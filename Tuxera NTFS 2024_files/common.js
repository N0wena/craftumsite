/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/ansi-html-community/index.js":
/*!***************************************************!*\
  !*** ./node_modules/ansi-html-community/index.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = ansiHTML

// Reference to https://github.com/sindresorhus/ansi-regex
var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/

var _defColors = {
  reset: ['fff', '000'], // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
}
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
}
var _openTags = {
  '1': 'font-weight:bold', // bold
  '2': 'opacity:0.5', // dim
  '3': '<i>', // italic
  '4': '<u>', // underscore
  '8': 'display:none', // hidden
  '9': '<del>' // delete
}
var _closeTags = {
  '23': '</i>', // reset italic
  '24': '</u>', // reset underscore
  '29': '</del>' // reset delete
}

;[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>'
})

/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */
function ansiHTML (text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text
  }

  // Cache opened sequence.
  var ansiCodes = []
  // Replace with markup.
  var ret = text.replace(/\033\[(\d+)m/g, function (match, seq) {
    var ot = _openTags[seq]
    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) { // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop()
        return '</span>'
      }
      // Open tag.
      ansiCodes.push(seq)
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">'
    }

    var ct = _closeTags[seq]
    if (ct) {
      // Pop sequence
      ansiCodes.pop()
      return ct
    }
    return ''
  })

  // Make sure tags are closed.
  var l = ansiCodes.length
  ;(l > 0) && (ret += Array(l + 1).join('</span>'))

  return ret
}

/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */
ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.')
  }

  var _finalColors = {}
  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null
    if (!hex) {
      _finalColors[key] = _defColors[key]
      continue
    }
    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex]
      }
      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string'
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000')
      }
      var defHexColor = _defColors[key]
      if (!hex[0]) {
        hex[0] = defHexColor[0]
      }
      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]]
        hex.push(defHexColor[1])
      }

      hex = hex.slice(0, 2)
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000')
    }
    _finalColors[key] = hex
  }
  _setTags(_finalColors)
}

/**
 * Reset colors.
 */
ansiHTML.reset = function () {
  _setTags(_defColors)
}

/**
 * Expose tags, including open and close.
 * @type {Object}
 */
ansiHTML.tags = {}

if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () { return _openTags }
  })
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () { return _closeTags }
  })
} else {
  ansiHTML.tags.open = _openTags
  ansiHTML.tags.close = _closeTags
}

function _setTags (colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]
  // inverse
  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]
  // dark grey
  _openTags['90'] = 'color:#' + colors.darkgrey

  for (var code in _styles) {
    var color = _styles[code]
    var oriColor = colors[color] || '000'
    _openTags[code] = 'color:#' + oriColor
    code = parseInt(code)
    _openTags[(code + 10).toString()] = 'background:#' + oriColor
  }
}

ansiHTML.reset()


/***/ }),

/***/ "./src/js/animation.js":
/*!*****************************!*\
  !*** ./src/js/animation.js ***!
  \*****************************/
/***/ (() => {

var run = () => {
  document.querySelectorAll('.wow').forEach(e => {
    e.style.visibility = 'hidden';
  });
  new WOW().init();
};
document.addEventListener('DOMContentLoaded', run);

/***/ }),

/***/ "./src/js/button.js":
/*!**************************!*\
  !*** ./src/js/button.js ***!
  \**************************/
/***/ (() => {

(function () {
  'use strict';

  var base64ToString = window.userScripts.Util.base64ToString;
  var clearTags = window.userScripts.Util.clearTags;
  var FILE_PERMISSION = ['pdf', 'docx', 'doc', 'csv', 'xlsx', 'xls', 'zip', 'odt', 'jpg', 'png', 'webp', 'ico', 'svg', 'jpeg', 'gif', 'txt', 'rar'];
  function removeHash() {
    history.replaceState({}, document.title, window.location.pathname + window.location.search);
  }
  class Button {
    constructor(el) {
      this.el = el;
      this.buttonClickHandler = this.handleClick.bind(this);
      this.openedPopup = null;
      this.yandexGoalId = this.el.dataset.yandexGoalId;
      this.googleEvent = this.el.dataset.googleEvent && JSON.parse(base64ToString(this.el.dataset.googleEvent));
      this.dataOnclickHref = this.el.dataset.href;
      this.dataOnclickTarget = this.el.dataset.target;
      this.isNativeLink = this.el.tagName.toLowerCase() === 'a';
      this.isCartAction = this.el.dataset.actionCart === 'true';
      this.isCartLink = this.el.dataset.type === 'cart-icon';
    }
    init() {
      if (!this.el) return;

      // default
      this.el.addEventListener('click', e => {
        this.middleware(e);
      });

      // если это внешняя или внутренняя ссылка через onclick
      if (this.dataOnclickHref) {
        var href = this.dataOnclickHref;
        var isExternalOrInternal = href.startsWith('http') && !this.isFile(href) || href.startsWith('/') && !href.startsWith('/#n-');
        if (isExternalOrInternal) {
          var onclick = "event.stopPropagation();event.preventDefault();window.open('".concat(href, "', '").concat(this.dataOnclickTarget || '_self', "')");
          this.el.setAttribute('onclick', onclick);
          return;
        }
      }

      // во всех остальных случаях
      this.el.addEventListener('click', this.buttonClickHandler);
    }

    // обработка вешается всегда и для a и для onclick
    middleware(e) {
      if (window.Ya && this.yandexGoalId) {
        ym(window.Ya._metrika.getCounters()[0].id, 'reachGoal', this.yandexGoalId);
      }
      if (window.gtag && this.googleEvent) {
        window.gtag('event', this.googleEvent.eventAction, {
          'event_category': this.googleEvent.eventCategory,
          'event_label': this.googleEvent.eventLabel
        });
      }
      var menu = e.target.closest('[data-public-mobile-content]');
      if (menu) {
        window.userScripts.Util.hideMenu(menu);
      }
    }
    handleClick(e) {
      e.stopPropagation();

      // add to cart
      if (this.isCartAction) {
        e.preventDefault();
        var {
          productName,
          productDescription,
          productPrice,
          productImage
        } = this.el.dataset;
        var section = this.el.closest('section');
        var collectionItem = this.el.closest('[data-c-item-id]:not([data-c-item-id=""])');
        var detail = {
          productName: clearTags(productName),
          productDescription: clearTags(productDescription),
          productPrice: clearTags(productPrice),
          productImage: clearTags(productImage),
          id: this.el.id + '/' + section.dataset.rootId,
          block_id: section.dataset.rootId
        };

        // если это товар внутри репитера коллекции
        if (collectionItem) {
          detail.collection_id = collectionItem.dataset.cId;
          detail.collection_item_id = collectionItem.dataset.cItemId;
          detail.id = this.el.id + '/' + collectionItem.dataset.cItemId;
        }
        var event = new CustomEvent('public-add-to-cart', {
          detail
        });
        document.dispatchEvent(event);
        return;
      }
      if (this.isCartLink) {
        var cart = document.querySelector('[data-cart="true"]');
        if (cart) {
          e.preventDefault();
          this.openedPopup = cart;
          window.userScripts.Util.showPopup(cart);
          return;
        }
      }
      var {
        hash
      } = this.el;
      var href = this.el.getAttribute("href");
      var targetAttr = this.el.target;
      if (!this.isNativeLink && this.dataOnclickHref) {
        href = this.dataOnclickHref;
        targetAttr = this.dataOnclickTarget;
        hash = '#' + href.split('#')[1];
      }
      var url = href && href.trim();

      // empty links
      if (!url || url === '' || url === '#') {
        e.preventDefault();
        return;
      }
      if (this.isFile(href)) {
        e.preventDefault();
        if (targetAttr !== '_blank') {
          window.saveAs(href, href.split('/').pop());
        } else {
          window.open(href, '_blank');
        }
        return;
      }
      var target = null;
      try {
        target = hash && document.querySelector(hash);
      } catch (e) {
        console.log(e);
      }

      // external or internal in Builder
      var isBuilder = !target && window.userScripts.Util.isBuilder(this.el);
      if (isBuilder) {
        e.preventDefault();
        return;
      }
      if (!target) return;

      // open popup and anchor

      e.preventDefault();
      if (target.dataset.popup) {
        this.openedPopup = target;
        window.userScripts.Util.showPopup(target);
        return;
      }
      window.userScripts.Util.scrollTo(target);
    }
    isFile(href) {
      return FILE_PERMISSION.includes(href.split('.').pop());
    }
    static run() {
      var rootElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      var items = [...rootElement.querySelectorAll('a'), ...rootElement.querySelectorAll('[data-href]')];
      items.forEach(c => {
        var button = new Button(c);
        button.init();
      });
    }
  }
  document.addEventListener('DOMContentLoaded', () => {
    var windowHash = window.location.hash;
    if (windowHash) {
      // отменяем нативный скролл по якорю
      removeHash();
      var target = document.querySelector(windowHash);
      if (!target) return;
      if (target.dataset.popup) {
        window.userScripts.Util.showPopup(target);
      } else {
        localStorage.setItem('scrollingToAnchor', true);
        window.userScripts.Util.scrollTo(target, () => localStorage.removeItem('scrollingToAnchor'));
      }
    }
    Button.run();
  });
  window.userScripts = window.userScripts || {};
  window.userScripts.Button = Button;
})();

/***/ }),

/***/ "./src/js/collections/bind.js":
/*!************************************!*\
  !*** ./src/js/collections/bind.js ***!
  \************************************/
/***/ (() => {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// TODO Сделать чтобы страница не скакала если это не первая страница или есть фильтры в url, как вриант скрывать репитер изначально и отображать после применения фильтров -

(function () {
  var Util = window.userScripts.Util;
  var base64ToString = Util.base64ToString;
  var getFiltersWithReplacedTemplateVariables = Util.getFiltersWithReplacedTemplateVariables;
  function scrollToElement(element) {
    var rect = element.getBoundingClientRect();
    var windowHeight = window.innerHeight;

    // Вычисляем видимую часть элемента
    var visiblePartTopY = Math.min(Math.max(rect.top, 0), windowHeight);
    var visiblePartBottomY = Math.min(Math.max(rect.bottom, 0), windowHeight);
    var visibleHeight = visiblePartBottomY - visiblePartTopY;

    // Rounding error
    if (visibleHeight < 0) {
      visibleHeight = 0;
    }

    // Проверяем, составляет ли видимая часть элемента менее x%
    if (visibleHeight < rect.height * 0.8) {
      element.scrollIntoView({
        behavior: 'smooth',
        block: 'center'
      });
    }
  }
  function getFilterConditions(system, fieldType, condition, conditionValue, dynamicTypeData) {
    var result = {
      __system: system
    };
    if (fieldType === 'text') {
      result.__system.value_type = Util.EConditionValueType.STRING;
      if (condition === Util.EFilterMethodsConditions.EXISTS) {
        result.$exists = true;
        result.__system.value_type = Util.EConditionValueType.BOOLEAN;
      } else if (condition === Util.EFilterMethodsConditions.NOT_EXISTS) {
        result.$exists = false;
        result.__system.value_type = Util.EConditionValueType.BOOLEAN;
      } else {
        var rawValue = conditionValue !== null ? conditionValue : '';
        if (dynamicTypeData) {
          if (dynamicTypeData.type === Util.ETextDynamicType.CURRENT_PAGE_ITEM_FIELD) {
            if (dynamicTypeData.fieldId === 'name' || dynamicTypeData.fieldId === 'slug') {
              rawValue = "{{ item.".concat(dynamicTypeData.fieldId, " }}");
            } else {
              rawValue = "{{ item.values.".concat(dynamicTypeData.fieldId, ".value }}");
            }
          }
        }
        if (condition === Util.EFilterMethodsConditions.EQUAL) {
          result.$eq = rawValue;
        } else if (condition === Util.EFilterMethodsConditions.NOT_EQUAL) {
          result.$ne = rawValue;
        } else if (condition === Util.EFilterMethodsConditions.INCLUDES) {
          result.$regex = ".*".concat(rawValue, ".*");
        } else if (condition === Util.EFilterMethodsConditions.NOT_INCLUDES) {
          result.$neregex = ".*".concat(rawValue, ".*");
        } else if (condition === Util.EFilterMethodsConditions.STARTS_WITH) {
          result.$regex = "".concat(rawValue, ".*");
        } else if (condition === Util.EFilterMethodsConditions.ENDS_WITH) {
          result.$regex = ".*".concat(rawValue);
        } else if (condition === Util.EFilterMethodsConditions.NOT_STARTS_WITH) {
          result.$neregex = "".concat(rawValue, ".*");
        } else if (condition === Util.EFilterMethodsConditions.NOT_ENDS_WITH) {
          result.$neregex = ".*".concat(rawValue);
        } else {
          throw new Error('unhandled filterMethodsStructure condition');
        }
      }
    } else if (fieldType === 'int') {
      result.__system.value_type = Util.EConditionValueType.INT;
      if (condition === Util.EFilterMethodsConditions.EXISTS) {
        result.$exists = true;
        result.__system.value_type = Util.EConditionValueType.BOOLEAN;
      } else if (condition === Util.EFilterMethodsConditions.NOT_EXISTS) {
        result.$exists = false;
        result.__system.value_type = Util.EConditionValueType.BOOLEAN;
      } else {
        var _rawValue = conditionValue !== null ? conditionValue : 0;
        if (dynamicTypeData) {
          if (dynamicTypeData.type === Util.EIntDynamicType.CURRENT_PAGE_ITEM_FIELD) {
            _rawValue = "{{ item.values.".concat(dynamicTypeData.fieldId, ".value }}");
          }
        }
        if (condition === Util.EFilterMethodsConditions.EQUAL) {
          result.$eq = _rawValue;
        } else if (condition === Util.EFilterMethodsConditions.NOT_EQUAL) {
          result.$ne = _rawValue;
        } else if (condition === Util.EFilterMethodsConditions.GREATER_THAN) {
          result.$gt = _rawValue;
        } else if (condition === Util.EFilterMethodsConditions.GREATER_THAN_EQUAL) {
          result.$gte = _rawValue;
        } else if (condition === Util.EFilterMethodsConditions.LESS_THAN) {
          result.$lt = _rawValue;
        } else if (condition === Util.EFilterMethodsConditions.LESS_THAN_EQUAL) {
          result.$lte = _rawValue;
        } else {
          throw new Error('unhandled filterMethodsStructure condition');
        }
      }
    }
    return result;
  }
  function rerunUserScripts(el) {
    if (window.userScripts && el) {
      Object.values(window.userScripts).forEach(script => {
        var _script$run;
        (_script$run = script.run) === null || _script$run === void 0 ? void 0 : _script$run.call(script, el);
      });
    }
  }
  class Bind {
    constructor(el) {
      this.el = el;
      this.rootId = el.dataset.rootId;
      this.bind = JSON.parse(base64ToString(el.dataset.bind));
      this.repeaters = [];
    }
    init() {
      var _this = this;
      return _asyncToGenerator(function* () {
        var promises = Object.entries(_this.bind).map( /*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator(function* (_ref) {
            var [requestId, options] = _ref;
            var repeater = new window.userScripts.Repeater(requestId, options);
            _this.repeaters.push(repeater);
            repeater.init();
          });
          return function (_x) {
            return _ref2.apply(this, arguments);
          };
        }());
        yield Promise.all(promises);
        yield _this.update();
        window.addEventListener('popstate', () => {
          _this.update();
        });
      })();
    }

    // key - ключ фильтра, который изменил url
    // requestId - идентификатор родительского репитера
    update() {
      var _this2 = this;
      return _asyncToGenerator(function* () {
        if (_this2.el.style.display === 'none') {
          return;
        }
        var urlParams = new URLSearchParams(window.location.search);
        var query = urlParams.get('filters');
        if (!query) {
          return;
        }
        var filters = JSON.parse(base64ToString(query));
        Object.entries(filters).forEach(_ref3 => {
          var [key, value] = _ref3;
          if (key.includes('_page')) {
            var [id] = key.split('_');
            _this2.updatePagination(id, value);
          } else {
            _this2.updateFilters('#' + key, value);
          }
        });

        // обновляем репитеры
        Object.entries(_this2.bind).forEach(_ref4 => {
          var [requestId, options] = _ref4;
          var repeater = _this2.repeaters.find(e => e.requestId === requestId);
          repeater.update(options);
        });
        yield _this2.render();
      })();
    }
    updatePagination(repeaterId, page) {
      var data = this.bind[repeaterId];
      if (data) {
        data.pagination.offset = page * data.pagination.limit - data.pagination.limit;
      }
    }

    // у нас к одному фильтру (input, radio) может быть привязано несколько $or фильтров и несколько репитеров
    // поэтому надо обновлять фильтр для каждого репитера
    updateFilters(selector, value) {
      Object.values(this.bind).forEach(_ref5 => {
        var {
          filters: {
            $and
          }
        } = _ref5;
        $and.forEach(_ref6 => {
          var {
            $or
          } = _ref6;
          $or.forEach(f => this.updateFilter(f, selector, value));
        });
      });
    }
    updateFilter(filter, selector, value) {
      Object.entries(filter).forEach(_ref7 => {
        var [_, {
          __system
        }] = _ref7;
        var data = __system === null || __system === void 0 ? void 0 : __system.filterMethodsStructure;
        if ((data === null || data === void 0 ? void 0 : data.elementSelector) === selector) {
          filter[_] = getFilterConditions(__system, data.fieldType, data.condition, value, data.dynamicTypeData);
        }
      });
    }
    getContent() {
      var _this3 = this;
      return _asyncToGenerator(function* () {
        var refinedBind = JSON.parse(JSON.stringify(_this3.bind));
        Object.entries(refinedBind).forEach(_ref8 => {
          var [requestId, request] = _ref8;
          request.filters = getFiltersWithReplacedTemplateVariables(request.filters, window.PageCtx);
        });
        var body = {
          action: 'build_block',
          identity: _this3.rootId,
          ctx: window.PageCtx || {},
          bind: refinedBind
        };
        var response = yield fetch('/user-website-api/builder/', {
          headers: {
            'Content-Type': 'application/json;charset=UTF-8'
          },
          credentials: 'include',
          method: 'POST',
          body: JSON.stringify(body)
        });
        return yield response.json();
      })();
    }
    render() {
      var _this4 = this;
      return _asyncToGenerator(function* () {
        var temp = document.createElement('div');
        temp.innerHTML = yield _this4.getContent();
        var newBlock = temp.firstChild;
        Object.keys(_this4.bind).forEach(requestId => {
          var _newRepeaters$, _oldRepeaters$;
          var newRepeaters = Array.from(temp.querySelectorAll("[data-c-repeater*=\"in ".concat(requestId, "\"]")));
          var oldRepeaters = Array.from(_this4.el.querySelectorAll("[data-c-repeater*=\"in ".concat(requestId, "\"]")));
          var newParent = (_newRepeaters$ = newRepeaters[0]) === null || _newRepeaters$ === void 0 ? void 0 : _newRepeaters$.parentNode;
          var oldParent = (_oldRepeaters$ = oldRepeaters[0]) === null || _oldRepeaters$ === void 0 ? void 0 : _oldRepeaters$.parentNode;

          // Если нет старого списка, перерисовываем весь блок
          if (!oldParent) {
            var style = _this4.el.style;
            _this4.el.parentNode.replaceChild(newBlock, _this4.el);
            _this4.el = newBlock;
            _this4.el.style = style;
            rerunUserScripts(newBlock);
            return;
          }

          // Если нет нового репитера, очищаем старый
          if (!newParent) {
            oldParent.innerHTML = '';
            return;
          }

          // Если содержимое изменилось, обновляем старый список и вызываем пользовательские скрипты
          if (oldParent.innerHTML !== newParent.innerHTML) {
            oldParent.innerHTML = newParent.innerHTML;
            var firstRepeaterElement = oldParent.querySelector("[data-c-repeater*=\"in ".concat(requestId, "\"]"));
            if (firstRepeaterElement) {
              scrollToElement(firstRepeaterElement);
            }
            rerunUserScripts(oldParent);
          }
          temp.remove();
        });
      })();
    }
    static run() {
      var root = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      var blocks = root.querySelectorAll('[data-bind]:not([data-bind="e30="])');
      blocks.forEach(e => {
        var bind = new Bind(e);
        bind.init();
      });
    }
  }
  document.addEventListener('DOMContentLoaded', () => {
    Bind.run();
  });
  window.userScripts = window.userScripts || {};
  window.userScripts.Bind = Bind;
})();

/***/ }),

/***/ "./src/js/collections/filters.js":
/*!***************************************!*\
  !*** ./src/js/collections/filters.js ***!
  \***************************************/
/***/ (() => {

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
(function () {
  var debounce = window.userScripts.Util.debounce;
  var base64ToString = window.userScripts.Util.base64ToString;
  var stringToBase64 = window.userScripts.Util.stringToBase64;

  /**
   * Базовый класс любого фильтра
   * Он умеет получать значение фильтра из URL и обновлять его
   */

  class RepeaterFilter {
    constructor(requestId, key) {
      this.requestId = requestId;
      this.key = key;
    }
    get filters() {
      var query = new URLSearchParams(window.location.search).get('filters');
      return query ? JSON.parse(base64ToString(query)) : {};
    }
    get value() {
      return this.filters[this.key];
    }
    update(params) {
      var url = new URL(window.location);
      var {
        href,
        hash
      } = url;
      url.hash = '';
      var base64 = stringToBase64(JSON.stringify(_objectSpread(_objectSpread({}, this.filters), params)));
      url.searchParams.set('filters', base64);
      if (href !== url.href) {
        url.hash = hash;
        window.history.pushState({}, '', url);
        window.dispatchEvent(new PopStateEvent('popstate'));
      }
    }
  }

  /**
   * Базовый класс пагинации, от него наследуются все остальные виды пагинации
   */

  class RepeaterPagination extends RepeaterFilter {
    constructor(requestId, perPage, total) {
      var key = "".concat(requestId, "_page");
      super(requestId, key);
      this.total = total;
      this.perPage = perPage;
    }
    get currentPage() {
      return this.value ? Number(this.value) : 1;
    }
    get maxPage() {
      return Math.ceil(this.total / this.perPage);
    }
    setPage(page) {
      if (page < 1) {
        this.update({
          [this.key]: 1
        });
        return;
      }
      if (page > this.maxPage) {
        this.update({
          [this.key]: this.maxPage
        });
        return;
      }
      this.update({
        [this.key]: page
      });
    }
    setTotal(total) {
      this.total = total;
    }
  }

  /**
   * Пагинация с кнопками Вперед-Назад
   */

  class RepeaterPrevNextPagination extends RepeaterPagination {
    constructor(requestId, perPage, total, options) {
      super(requestId, perPage, total);
      this.options = options;
      this.init();
    }
    init() {
      if (!this.options) {
        return;
      }
      var el = document.querySelector(this.options.elementSelector);
      if (el) {
        el.addEventListener(this.options.trigger, e => {
          e.preventDefault();
          this[this.options.effect]();
        });
      }
    }
    prevPage() {
      this.setPage(this.currentPage - 1);
    }
    nextPage() {
      this.setPage(this.currentPage + 1);
    }
  }

  /**
   * Инпут с типом который поддерживает поиск: текст, целое...
   */

  class RepeaterSearchInput extends RepeaterFilter {
    constructor(requestId, options) {
      var key = options.elementSelector.replaceAll('#', '');
      super(requestId, key);
      this.requestId = requestId;
      this.options = options;
      this.debounceSearch = debounce(this.search.bind(this), 700);
      this.init();
    }
    init() {
      if (!this.options) {
        return;
      }
      var el = document.querySelector(this.options.elementSelector);
      if (el) {
        el.addEventListener('input', e => {
          e.preventDefault();
          this.debounceSearch(e.target.value);
        });
        el.addEventListener('keydown', e => {
          if (e.key === 'Enter') {
            e.preventDefault();
            this.search(e.target.value);
          }
        });

        // если есть значение по умолчанию
        if (this.value === undefined && this.options.conditionValue !== null && this.options.conditionValue !== '') {
          this.search(this.options.conditionValue);
          el.value = this.options.conditionValue;
          return;
        }
        el.value = String(this.value || '');
      }
    }
    search(e) {
      if (typeof e !== 'string' && typeof e !== 'number') return;
      var refinedValue = e;
      if (this.options && this.options.fieldType === 'int') {
        refinedValue = parseInt(String(refinedValue));
        if (!isFinite(refinedValue)) {
          refinedValue = 0;
        }
      }
      // при изменении фильтра, сбрасываем пагинацию
      var paginationKey = "".concat(this.requestId, "_page");
      this.update({
        [this.key]: refinedValue,
        [paginationKey]: 1
      });
    }
  }
  window.userScripts = window.userScripts || {};
  window.userScripts.RepeaterPrevNextPagination = RepeaterPrevNextPagination;
  window.userScripts.RepeaterSearchInput = RepeaterSearchInput;
})();

/***/ }),

/***/ "./src/js/collections/index.js":
/*!*************************************!*\
  !*** ./src/js/collections/index.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _filters__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filters */ "./src/js/collections/filters.js");
/* harmony import */ var _filters__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_filters__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _repeater__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./repeater */ "./src/js/collections/repeater.js");
/* harmony import */ var _repeater__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_repeater__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _bind__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bind */ "./src/js/collections/bind.js");
/* harmony import */ var _bind__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_bind__WEBPACK_IMPORTED_MODULE_2__);




/***/ }),

/***/ "./src/js/collections/repeater.js":
/*!****************************************!*\
  !*** ./src/js/collections/repeater.js ***!
  \****************************************/
/***/ (() => {

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
(function () {
  var getFiltersWithReplacedTemplateVariables = window.userScripts.Util.getFiltersWithReplacedTemplateVariables;
  class Repeater {
    constructor(requestId, options) {
      this.requestId = requestId;
      this.options = options;
      this.paginations = [];
      this.inputs = [];
    }
    init() {
      var _this = this;
      return _asyncToGenerator(function* () {
        _this.total = yield _this.getTotal(_this.options);
        _this.paginations = _this.initPagination();
        _this.inputs = _this.initSearches();
      })();
    }
    initPagination() {
      var _this$options$paginat;
      var paginationData = ((_this$options$paginat = this.options.pagination.__system) === null || _this$options$paginat === void 0 ? void 0 : _this$options$paginat.paginationMethodsStructures) || [];
      return paginationData.map(e => new window.userScripts.RepeaterPrevNextPagination(this.requestId, this.options.pagination.limit, this.total, e));
    }

    // инициализируем все инпуты с fieldType: text и подобные
    initSearches() {
      if (!this.options.filters || !this.options.filters.$and) {
        return [];
      }
      var filterMethodsStructures = this.options.filters.$and.map(and => {
        return and.$or.map(or => Object.values(or).map(e => {
          var _e$__system;
          return (_e$__system = e.__system) === null || _e$__system === void 0 ? void 0 : _e$__system.filterMethodsStructure;
        }));
      }).flat(Infinity);
      var searchableFilterMethodsStructures = filterMethodsStructures.filter(e => e.elementSelector && (e.fieldType === 'text' || e.fieldType === 'int'));
      return [...searchableFilterMethodsStructures.map(e => new window.userScripts.RepeaterSearchInput(this.requestId, e))];
    }
    update(options) {
      var _this2 = this;
      return _asyncToGenerator(function* () {
        _this2.options = options;
        _this2.total = yield _this2.getTotal();
        _this2.paginations.forEach(e => e.setTotal(_this2.total));
      })();
    }

    // TODO бэк добавит total для каждого репитера в атрибут, чтобы не делать этот запрос
    getTotal() {
      var _this3 = this;
      return _asyncToGenerator(function* () {
        var refinedOptions = JSON.parse(JSON.stringify(_this3.options));
        refinedOptions.filters = getFiltersWithReplacedTemplateVariables(refinedOptions.filters, window.PageCtx);
        var response = yield (yield fetch('/user-website-api/collections/search/', {
          headers: {
            'Content-Type': 'application/json;charset=UTF-8'
          },
          credentials: 'include',
          method: 'POST',
          body: JSON.stringify(_objectSpread(_objectSpread({}, refinedOptions), {}, {
            format: 'count'
          }))
        })).json();
        return response.total;
      })();
    }
  }
  window.userScripts = window.userScripts || {};
  window.userScripts.Repeater = Repeater;
})();

/***/ }),

/***/ "./src/js/form.js":
/*!************************!*\
  !*** ./src/js/form.js ***!
  \************************/
/***/ (() => {

var _excluded = ["tempId"];
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
(function () {
  'use strict';

  var base64ToString = window.userScripts.Util.base64ToString;
  var ENDPOINT = window.location.origin + '/user-website-api';
  // const ENDPOINT = 'https://qf4450.craftum.io' + '/user-website-api'

  var FORM_ENDPOINT = ENDPOINT + '/form/';
  var CART_ENDPOINT = ENDPOINT + '/checkout/';
  var REQUIRED_FIELD_ERROR_TEXT = 'Обязательное поле';

  // Yandex Captcha
  var KEY_YANDEX_CAPTCHA = 'ysc1_gx3Gt8gRwFdxRolNStKTWeQkRiq5loNcRHmnutlb66b8b106';
  var ONLOAD_YANDEX_CAPTCHA = 'renderAfterLoadingSmartCaptcha';
  var SRC_YANDEX_CAPTCHA = "https://smartcaptcha.yandexcloud.net/captcha.js?render=onload&onload=".concat(ONLOAD_YANDEX_CAPTCHA);
  var CONTAINER_ID_YANDEX_CAPTCHA = 'captcha-container-';
  var forms = [];
  var metaTagsCaptcha = document.head.querySelectorAll('meta[name="captcha"]');
  window[ONLOAD_YANDEX_CAPTCHA] = () => {
    if (!window.smartCaptcha || forms.length === 0) return;
    forms.forEach(form => {
      form.initSmartCaptcha();
    });
  };
  function serializeForm(formNode) {
    var {
      elements
    } = formNode;
    var resultWithTempIds = Array.from(elements).reduce((acc, element) => {
      if (!element.name || element.name === 'smart-token') return acc;
      var {
        name,
        type,
        checked,
        value
      } = element;
      // у select тип на бэке text
      if (type === 'select-one') {
        return [...acc, {
          name,
          value,
          type: 'text'
        }];
      }
      if (type === 'checkbox' || type === 'radio') {
        // name содержит айдишник группы, так что имя нужно брать из legend
        var fieldset = element.closest('fieldset');
        if (!fieldset) return acc;
        var legend = fieldset.querySelector('legend');
        var legendTextContent = legend ? legend.textContent : fieldset.id;

        // массив строк со значениями
        if (type === 'checkbox') {
          if (!checked) return acc;
          var match = acc.find(e => e.type === 'list' && e.tempId === name);
          if (match) {
            match.value.push(value);
            return acc;
          } else {
            return [...acc, {
              name: legendTextContent,
              value: [value],
              type: 'list',
              tempId: name
            }];
          }
        }
        if (type === 'radio') {
          if (!checked) return acc;
          return [...acc, {
            name: legendTextContent,
            value,
            type: 'text'
          }];
        }
      }
      return [...acc, {
        name,
        value,
        type
      }];
    }, []);
    var result = resultWithTempIds.map(_ref => {
      var {
          tempId
        } = _ref,
        rest = _objectWithoutProperties(_ref, _excluded);
      return rest;
    });
    return result;
  }
  function getPureId(id) {
    return id.split('n-')[1];
  }
  function loadSmartCaptcha() {
    var script = document.createElement('script');
    script.src = SRC_YANDEX_CAPTCHA;
    script.defer = true;
    document.head.appendChild(script);
  }
  function isCaptchaEnabled() {
    return metaTagsCaptcha.length > 0 && [...metaTagsCaptcha].some(tag => tag.content !== 'null');
  }
  class Form {
    constructor(el) {
      this.el = el;
      this.button = el.querySelector('[type="submit"]');
      this.actionType = el.dataset.formActionType;
      this.redirectUrl = el.dataset.formRedirectUrl;
      this.message = el.dataset.formMessage;
      this.requiredFields = el.querySelectorAll('[required]');
      this.inputs = el.querySelectorAll('input');
      this.yandexGoalId = this.button && this.button.dataset.yandexGoalId;
      this.googleEvent = this.button && this.button.dataset.googleEvent && JSON.parse(base64ToString(this.button.dataset.googleEvent));
      this.widgetSmartCaptchaId = null;
      this.smartCaptchaContainerId = CONTAINER_ID_YANDEX_CAPTCHA + this.id;
      this.wrapperCaptchaContainer = null;
    }
    get redirectAfterSend() {
      return (this.actionType === 'redirect_to_page' || this.actionType === 'redirect_to_site') && this.redirectUrl;
    }
    get messageAfterSend() {
      return this.actionType === 'show_message' && this.message;
    }
    get cart() {
      var block = this.el.closest('[data-block-content]');
      return block && block.querySelector('[data-script="cart-items"]');
    }
    get popup() {
      return this.el.closest('[data-popup="true"]');
    }
    get id() {
      return getPureId(this.el.id);
    }
    reset() {
      this.el.reset();
      var checkboxes = this.el.querySelectorAll('input[type="checkbox"]');
      checkboxes.forEach(c => c.checked = false);
    }
    successHandle() {
      this.reset();
      if (window.Ya && this.yandexGoalId && typeof ym !== 'undefined') {
        ym(window.Ya._metrika.getCounters()[0].id, 'reachGoal', this.yandexGoalId);
      }
      if (window.gtag && this.googleEvent) {
        window.gtag('event', this.googleEvent.eventAction, {
          'event_category': this.googleEvent.eventCategory,
          'event_label': this.googleEvent.eventLabel
        });
      }

      // если это popup, закрываем его

      if (this.popup) {
        window.userScripts.Util.hidePopup(this.popup);
      }

      // если корзина - чистим
      if (this.cart) {
        var event = new CustomEvent('public-clear-cart');
        document.dispatchEvent(event);
        // если подключена платежная система игнорируем другие действия
        if (this.el.dataset.payment) {
          return;
        }
      }
      if (this.redirectAfterSend) {
        window.location.assign(this.redirectUrl);
      }
      if (this.messageAfterSend) {
        var [pageUrl, targetId] = this.message.split('#');
        if (pageUrl && pageUrl !== decodeURIComponent(window.location.pathname)) {
          window.location.assign(this.message);
        } else {
          var target = targetId && document.querySelector('#' + targetId);
          if (target) window.userScripts.Util.showPopup(target);
        }
      }
    }
    handlePayment(formHtml) {
      var paymentInput = this.el.querySelector('[data-payment-label] input');
      if (paymentInput && !paymentInput.checked) {
        return;
      }
      var formDiv = document.createElement('div');
      formDiv.innerHTML += formHtml;
      document.body.appendChild(formDiv);
      formDiv.querySelector('form').submit();
    }
    createSmartCaptchaContainer() {
      // контейнер для капчи
      var captchaContainer = document.createElement('div');
      captchaContainer.id = this.smartCaptchaContainerId;
      this.wrapperCaptchaContainer.appendChild(captchaContainer);
    }
    hideCaptchaWrapper() {
      this.wrapperCaptchaContainer.classList.remove('show-captcha-container');
      this.clearEventCaptchaWrapper();
    }
    clearEventCaptchaWrapper() {
      this.wrapperCaptchaContainer.removeEventListener('mousedown', this.fadeHandlerCaptchaWrapper.bind(this));
    }
    fadeHandlerCaptchaWrapper(e) {
      if (e.target === this.wrapperCaptchaContainer) {
        this.hideCaptchaWrapper();
      }
    }
    showCaptchaWrapper() {
      this.wrapperCaptchaContainer.classList.add('show-captcha-container');
      this.wrapperCaptchaContainer.addEventListener('mousedown', this.fadeHandlerCaptchaWrapper.bind(this));
    }
    initSmartCaptcha() {
      this.createSmartCaptchaContainer();
      var captchaOptions = {
        sitekey: KEY_YANDEX_CAPTCHA,
        callback: this.onSubmit.bind(this)
      };
      this.widgetSmartCaptchaId = window.smartCaptcha.render(this.smartCaptchaContainerId, captchaOptions);
    }
    onSubmit() {
      var _arguments = arguments,
        _this = this;
      return _asyncToGenerator(function* () {
        var token = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : null;
        _this.hideCaptchaWrapper();

        // собираем данные с полей формы
        var data = serializeForm(_this.el);
        var section = _this.el.closest('section');
        var payload = {
          id: _this.id,
          data,
          block_id: section && section.dataset.rootId,
          token
        };

        // собираем UTM данные
        var UTMHelper = window.userScripts.UTMHelper;
        var utms = UTMHelper.getItems();
        if (utms) {
          payload.utm = utms;
        }
        if (_this.cart) {
          var carts = localStorage.carts && JSON.parse(localStorage.carts) || {};
          var products = carts[_this.cart.id] || [];
          payload.products = products.map(e => {
            if (e.collection_item_id) {
              return {
                source: "collection",
                collection_item_id: e.collection_item_id,
                collection_id: e.collection_id,
                count: e.productQuantity
              };
            } else {
              return {
                source: "node",
                id: getPureId(e.id),
                count: e.productQuantity,
                block_id: e.block_id
              };
            }
          });
          if (_this.el.dataset.payment === 'robokassa' || _this.el.dataset.payment === 'ukassa') payload.payment = true;
        }
        var url = _this.cart ? CART_ENDPOINT : FORM_ENDPOINT;
        try {
          _this.button.classList.add('loading');
          var response = yield fetch(url, {
            method: 'POST',
            body: JSON.stringify(payload),
            headers: {
              'Content-Type': 'application/json;charset=UTF-8'
            }
          });
          var responseJson = yield response.json();
          _this.button.classList.remove('loading');
          if (response.ok) {
            UTMHelper.clear();
            if (responseJson) {
              if (_this.el.dataset.payment === 'ukassa' && responseJson.redirect_uri) {
                var link = document.createElement('a');
                link.href = responseJson.redirect_uri;
                link.click();
                link.remove();
              }
              if (_this.el.dataset.payment === 'robokassa' && responseJson.html) {
                _this.handlePayment(responseJson.html);
              }
            }
            _this.successHandle();
          }
        } catch (e) {
          console.error(e);
          _this.button.classList.remove('loading');
        }
      })();
    }
    initMask() {
      var masked = this.el.querySelectorAll('input[data-mask]:not([data-mask=""])');

      // подключаем маску если нужно
      masked.forEach(i => {
        // если остался символ _ значит не полностью ввели номер
        i.pattern = "[^_]*";
        var mask = i.dataset.mask;
        var prefix = mask.substring(0, 2);

        // маска состоит только из префикса +9
        if (mask.includes('+') && mask.length === 2) {
          var defaultMask = "".concat(prefix, " (999) 999 99 99");
          i.dataset.mask = defaultMask;
          window.Inputmask({
            mask: defaultMask
          }).mask(i);
          return;
        }
        window.Inputmask(mask).mask(i);
      });
    }
    initSelect() {
      var options = this.el.querySelectorAll('select option');
      options.forEach(o => {
        if (o.textContent !== o.label) o.textContent = o.label;
      });
    }
    initWrapperCaptchaContainer() {
      var wrapperCaptchaContainer = document.createElement('div');
      wrapperCaptchaContainer.classList.add('wrapper-captcha-container');
      this.wrapperCaptchaContainer = wrapperCaptchaContainer;
      this.el.appendChild(wrapperCaptchaContainer);
    }

    /**
     * Валидация обязательных полей
     */
    addRequiredFieldsetListeners() {
      this.requiredFields.forEach(fieldset => {
        fieldset.addEventListener('change', () => this.updateRequiredInputs(fieldset));
      });
    }
    updateRequiredInputs(fieldset) {
      var errorText = fieldset.querySelector('.error-required-input__text') || this.createErrorText(REQUIRED_FIELD_ERROR_TEXT);
      if (!fieldset.contains(errorText)) fieldset.appendChild(errorText);
      errorText.style.display = this.requiredFieldIsNotEmpty(fieldset) ? 'none' : 'block';
    }
    requiredFieldIsNotEmpty(el) {
      if (!el) return false;
      var tag = el.tagName.toLowerCase();
      if (tag === 'input') return !!el.value;
      if (tag === 'fieldset') return Array.from(el.querySelectorAll('input')).some(input => input.checked);
      if (tag === 'select') {
        var option = el.options[el.selectedIndex];
        console.log('option :>> ', option.value);
        return !!(option && option.value);
      }
    }
    createErrorText(text) {
      var errorText = document.createElement('div');
      errorText.classList.add('error-required-input__text');
      errorText.innerHTML = text;
      errorText.style.display = 'none';
      return errorText;
    }

    /**
     * Перехват события, чтобы не регистрировать события я.метрики при невалидной форме
     */
    initHiddenSubmitBtn() {
      var cloneBtn = this.createCloneBtn();
      this.button.disabled = true;
      if (cloneBtn) this.interceptSubmitForm(cloneBtn, this.el);
    }
    createCloneBtn(btn) {
      if (!this.button) return;
      var cloneBtn = this.button.cloneNode(true);
      this.button.style.position = 'relative';
      cloneBtn.removeAttribute('type');
      cloneBtn.classList.add('clone-btn');
      cloneBtn.style.position = 'absolute';
      cloneBtn.style.top = '0px';
      cloneBtn.style.left = '0px';
      cloneBtn.style.width = this.button.offsetWidth + 'px';
      cloneBtn.style.opacity = '0';
      this.button.appendChild(cloneBtn);
      return cloneBtn;
    }
    interceptSubmitForm(btn, form) {
      form.addEventListener('keydown', event => {
        var keyCodeEnter = 13;
        if (event.keyCode === keyCodeEnter) {
          this.formValidation(event);
        }
      });
      btn.addEventListener('click', event => {
        this.formValidation(event);
      });
    }
    formValidation(event) {
      var isValid = this.el.checkValidity() && Array.from(this.requiredFields).every(e => this.requiredFieldIsNotEmpty(e));
      console.log('<===🔷 formValidation 🔷===>', isValid);
      if (!isValid) {
        this.requiredFields.forEach(fieldset => this.updateRequiredInputs(fieldset));
        this.el.reportValidity();
        event.preventDefault();
        event.stopPropagation();
        return;
      }
      this.button.disabled = false;
    }
    init() {
      var _this2 = this;
      this.addRequiredFieldsetListeners();
      this.initMask();
      this.initSelect();
      this.initWrapperCaptchaContainer();
      this.initHiddenSubmitBtn();
      this.el.addEventListener('submit', /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator(function* (e) {
          console.log('<===🔷 onSubmitForm 🔷===>');
          e.preventDefault();

          // инициализируем капчу если включена
          if (isCaptchaEnabled() && forms.length > 0) {
            var _window$smartCaptcha;
            if (!window.smartCaptcha) {
              loadSmartCaptcha();
            }
            var token = (_window$smartCaptcha = window.smartCaptcha) === null || _window$smartCaptcha === void 0 ? void 0 : _window$smartCaptcha.getResponse(_this2.widgetSmartCaptchaId);
            if (!token) {
              _this2.showCaptchaWrapper();
            } else {
              yield _this2.onSubmit(token);
            }
          } else {
            yield _this2.onSubmit();
          }
        });
        return function (_x) {
          return _ref2.apply(this, arguments);
        };
      }());
    }
    static run() {
      var rootElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      var SELECTOR = '[data-script="form"]';
      var items = [...rootElement.querySelectorAll(SELECTOR)];
      items.forEach(c => {
        var form = new Form(c);
        form.init();
        forms.push(form);
      });

      // выключаем все чекбоксы (формы, аккордеон)
      var CHECKBOXES_SELECTOR = 'input[type="checkbox"]';
      var checkboxes = [...rootElement.querySelectorAll(CHECKBOXES_SELECTOR)];
      checkboxes.forEach(c => c.checked = false);

      // выбираем первый радио
      var RADIO_SELECTOR = '[data-type="radio"]';
      var radio = [...rootElement.querySelectorAll(RADIO_SELECTOR)];
      var ITEM_PICKERS_SELECTOR = '[data-type="item-picker"]';
      var itemPickers = [...rootElement.querySelectorAll(ITEM_PICKERS_SELECTOR)];
      [...radio, ...itemPickers].forEach(fieldset => {
        var inputs = fieldset.querySelectorAll('input[type="radio"]');
        inputs.forEach(c => c.removeAttribute('checked'));
        if (inputs[0]) inputs[0].checked = true;
      });
    }
  }
  document.addEventListener('DOMContentLoaded', () => {
    Form.run();
  });
  window.userScripts = window.userScripts || {};
  window.userScripts.Form = Form;
})();

/***/ }),

/***/ "./src/js/map.js":
/*!***********************!*\
  !*** ./src/js/map.js ***!
  \***********************/
/***/ (() => {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
(function () {
  'use strict';

  var base64ToString = window.userScripts.Util.base64ToString;
  class Map {
    constructor(el) {
      this.el = el;
      this.pin = el.querySelector('[data-map-pin]');
      this.ballon = el.querySelector('[data-map-balloon]');
      this.map = null;
      this.options = JSON.parse(base64ToString(el.dataset.options));
      this.markerIcon = {
        iconLayout: 'default#imageWithContent',
        iconImageHref: '',
        iconImageSize: [24, 24],
        iconImageOffset: [-12, -12],
        iconContent: 'content',
        iconContentOffset: [0, 0],
        contentLayout: this.pin && this.pin.outerHTML
      };
    }
    getCustomBalloon(_ref) {
      var {
        name,
        title,
        subtitle,
        text
      } = _ref;
      var MyBalloonLayout = window.ymaps.templateLayoutFactory.createClass(this.ballon.outerHTML, {
        build: function build() {
          this.constructor.superclass.build.call(this);
          var parent = this.getParentElement();
          var balloon = parent.querySelector('[data-map-balloon]');
          var email = balloon.querySelector('[data-title="Email"]');
          var tel = balloon.querySelector('[data-title="Телефон"]');
          var textEl = balloon.querySelector('[data-title="Описание"]');

          // при открытии балуна подставляем данные метки
          balloon.querySelector('[data-title="Адрес"]').textContent = name;
          if (tel) {
            tel.textContent = title;
            tel.href = "tel:".concat(title);
          }
          if (email) {
            email.textContent = subtitle;
            email.href = "mailto:".concat(subtitle);
          }
          if (textEl) {
            textEl.textContent = text;
            textEl.style.display = null;
          }
          parent.append(balloon);
          this._$element = balloon;
          this.applyElementOffset();
          var close = this._$element.querySelector('[data-map-balloon-close]');
          close.addEventListener('click', () => {
            this.onCloseClick(this);
          });
        },
        clear: function clear() {
          if (this.getData.geoObject) this.constructor.superclass.clear.call(this);
        },
        onSublayoutSizeChange: function onSublayoutSizeChange() {
          MyBalloonLayout.superclass.onSublayoutSizeChange.apply(this, arguments);
          this.applyElementOffset();
          this.events.fire('shapechange');
        },
        applyElementOffset: function applyElementOffset() {
          var arrow = this._$element.querySelector('.arrow');
          this._$element.style.left = -(this._$element.offsetWidth / 2) + 'px';
          this._$element.style.top = -(this._$element.offsetHeight + arrow.offsetHeight) + 'px';
        },
        onCloseClick: function onCloseClick(e) {
          e.events.fire('userclose');
        },
        getShape: function getShape() {
          var position = {
            left: this._$element.style.left,
            top: this._$element.style.top
          };
          return new window.ymaps.shape.Rectangle(new window.ymaps.geometry.pixel.Rectangle([[position.left, position.top], [position.left + this._$element.offsetWidth, position.top + this._$element.offsetHeight + this._$element.querySelector('.arrow').offsetHeight]]));
        }
      });
      return MyBalloonLayout;
    }
    init() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options;
      return new Promise(resolve => {
        window.ymaps.ready(() => {
          //Проверям на мобильное устройство
          var isMobile = window.userScripts.Util.isMobile();

          // создаем карту
          this.map = new window.ymaps.Map(this.el, _objectSpread(_objectSpread({}, options), {}, {
            behaviors: isMobile ? ["multiTouch"] : ["drag"]
          }));

          //
          window.userScripts.Util.previewChangeSubscribe(this.el, () => {
            this.map.container.fitToViewport();
          });

          // опции кастомной иконки
          var {
            width,
            height
          } = getComputedStyle(this.pin);
          var iconLayout = this.pin.outerHTML;
          var properties = {
            iconLayout: 'default#imageWithContent',
            iconImageHref: '',
            iconImageSize: [parseInt(width), parseInt(height)],
            iconImageOffset: [0, 0],
            // отключаем поведение по умолчанию, при котором на 320px кастомный балун не отображается
            balloonPanelMaxMapArea: 0,
            iconContentOffset: [0, 0],
            content: ''
          };
          options.points.forEach(p => {
            var iconOptions = _objectSpread(_objectSpread({}, properties), {}, {
              iconContentLayout: window.ymaps.templateLayoutFactory.createClass(iconLayout),
              balloonLayout: options.withBalloon ? this.getCustomBalloon({
                name: p.name || '',
                title: p.title || '',
                subtitle: p.subtitle || '',
                text: p.text || ''
              }) : ''
            });
            var mark = new ymaps.Placemark(p.coordinates, {}, iconOptions);
            this.map.geoObjects.add(mark);
          });
          resolve();
        });
      });
    }
    static run() {
      var rootElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      // key
      // Api key для yandex maps 1
      var API_KEY_V1 = '3290aef5-a991-45ba-9a25-ace031ec3d11';
      // Api key для yandex maps 2
      var API_KEY_V2 = 'c4324a11-3acd-4b6a-bc00-53a29495073c';
      var API_KEY = API_KEY_V2;
      // реализовать статическую фейковую карту можно до 650px
      var MAX_STATIC_MAP_WIDTH = 650;
      // высота карты по умолчанию
      var DEFAULT_MAP_HEIGHT = 280;
      var SELECTOR = '[data-script="map"]';
      var maps = [...rootElement.querySelectorAll(SELECTOR)];
      var startLazyMap = map => {
        map.init();
      };
      var mapLoaderPromises = {};
      var ymapLoader = apiKey => {
        if (!mapLoaderPromises[apiKey]) {
          mapLoaderPromises[apiKey] = new Promise((res, rej) => {
            if (window.ymaps) return res();
            var MAP_BUNDLE_URL = "https://api-maps.yandex.ru/2.1/?lang=ru_RU&apikey=".concat(apiKey);
            var yandexMapScript = document.createElement('SCRIPT');
            yandexMapScript.setAttribute('src', MAP_BUNDLE_URL);
            document.head.appendChild(yandexMapScript);
            yandexMapScript.onload = () => {
              window.ymaps.ready(() => res());
            };
            yandexMapScript.onerror = rej;
          });
        }
        return mapLoaderPromises[apiKey];
      };
      maps.forEach( /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator(function* (s) {
          var mapOptions = JSON.parse(base64ToString(s.dataset.options));
          var apiKey = mapOptions.apiKey ? mapOptions.apiKey : API_KEY;
          var map = new Map(s);
          var computed = getComputedStyle(s);
          var width = parseInt(computed.width);
          var height = parseInt(computed.height) || DEFAULT_MAP_HEIGHT;
          if (window.userScripts.Util.isBuilder(s) || width > MAX_STATIC_MAP_WIDTH) {
            yield ymapLoader(apiKey);
            startLazyMap(map);
            return;
          }

          // реализуем фейковую картинку при загрузке станицы для мобилок
          // при появлении элемента в поле видимости реальная карта загружается

          // строка с точками
          var pointsQuery = mapOptions.points.map(_ref3 => {
            var {
              coordinates
            } = _ref3;
            return "pt=".concat(coordinates[0], ",").concat(coordinates[1]);
          }).join('~');

          // Wrong image size 320, 500. Size must be in range: 0 < width <= 650, 0 < height <= 450
          var compWidth = Math.min(width, 650);
          var compHeight = Math.min(height, 450);
          var staticFakeMap = document.createElement('img');
          staticFakeMap.src = "https://static-maps.yandex.ru/1.x/?ll=".concat(mapOptions.center[1], ",").concat(mapOptions.center[0], "&z=").concat(mapOptions.zoom, "&l=map&size=").concat(compWidth, ",").concat(compHeight, "&").concat(pointsQuery, ",ya_ru");
          staticFakeMap.height = compHeight;
          staticFakeMap.width = compWidth;
          s.append(staticFakeMap);

          // Intersection Observer
          // за 300px до карты начинать грузить
          var options = {
            root: null,
            rootMargin: '300px',
            threshold: 0.0
          };
          var intersectionHandler = /*#__PURE__*/function () {
            var _ref4 = _asyncToGenerator(function* (entries) {
              if (entries[0].isIntersecting) {
                yield ymapLoader(apiKey);
                staticFakeMap.remove();
                startLazyMap(map);
                observer.unobserve(s);
              }
            });
            return function intersectionHandler(_x2) {
              return _ref4.apply(this, arguments);
            };
          }();
          var observer = new IntersectionObserver(intersectionHandler, options);
          observer.observe(s);
        });
        return function (_x) {
          return _ref2.apply(this, arguments);
        };
      }());
    }
  }
  document.addEventListener('DOMContentLoaded', () => {
    Map.run();
  });
  window.userScripts = window.userScripts || {};
  window.userScripts.Map = Map;
})();

/***/ }),

/***/ "./src/js/slider.js":
/*!**************************!*\
  !*** ./src/js/slider.js ***!
  \**************************/
/***/ (() => {

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
(function () {
  'use strict';

  var base64ToString = window.userScripts.Util.base64ToString;
  class Slider {
    constructor(el) {
      this.el = el;
      this.swiper = null;
      this.target = el.querySelector('.swiper');
      this.options = JSON.parse(base64ToString(el.dataset.options));
    }
    resizeHandle(width) {
      // width - parent block width
      if (!this.swiper.passedParams || !this.swiper.passedParams.breakpoints) return;
      // find and set the nearest breakpoint in the slider params
      var breakpoints = Object.keys(this.swiper.passedParams.breakpoints).map(e => Number(e));
      var key = breakpoints.sort((a, b) => Math.abs(width - a) - Math.abs(width - b))[0];
      var {
        slidesPerView,
        spaceBetween
      } = this.swiper.passedParams.breakpoints[key];
      this.swiper.params.slidesPerView = slidesPerView;
      this.swiper.params.spaceBetween = spaceBetween;
      this.swiper.update();
    }
    autoplayInit(change) {
      this.swiper.autoplay.start();
      if (change && !change.target.classList.contains('show')) this.swiper.autoplay.stop();
    }
    removePlayClassFromAllSlides() {
      var _this$swiper;
      if (!((_this$swiper = this.swiper) !== null && _this$swiper !== void 0 && _this$swiper.slides)) return;
      this.swiper.slides.forEach(slide => {
        if (slide.classList.contains('play')) slide.classList.remove('play');
      });
    }
    init() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options;
      this.swiper = new Swiper(this.target, _objectSpread(_objectSpread({
        pagination: {
          el: '.swiper-pagination',
          dynamicBullets: true,
          dynamicMainBullets: 7,
          clickable: true
        },
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev'
        },
        on: {
          beforeSlideChangeStart: () => {
            this.removePlayClassFromAllSlides();
          }
        }
      }, options), {}, {
        observer: true,
        observeParents: true
      }));
      if (window.userScripts.Util.isBuilder(this.el)) {
        window.userScripts.Util.previewChangeSubscribe(this.el.closest('section'), change => {
          this.resizeHandle(change.contentRect.width);
        });
      }
      if (options.autoplay && !this.swiper.autoplay.running) {
        window.userScripts.Util.observeClassChanges(this.el.closest('section'), this.autoplayInit.bind(this));
      }
      return this.swiper;
    }
    static run() {
      var rootElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      var SELECTOR = '[data-script="slider"]';
      var sliders = [...rootElement.querySelectorAll(SELECTOR)];
      sliders.forEach(s => {
        var slider = new Slider(s);
        slider.init();
      });
    }
  }
  document.addEventListener('DOMContentLoaded', () => {
    Slider.run();
  });
  window.userScripts = window.userScripts || {};
  window.userScripts.Slider = Slider;
})();

/***/ }),

/***/ "./src/js/step-animation.js":
/*!**********************************!*\
  !*** ./src/js/step-animation.js ***!
  \**********************************/
/***/ (() => {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
(function () {
  'use strict';

  var base64ToString = window.userScripts.Util.base64ToString;
  var EVENTS = {
    scroll: 'scroll',
    click: 'click',
    mouseenter: 'mouseenter',
    elementOnScreen: 'elementOnScreen',
    blockOnScreen: 'blockOnScreen'
  };
  class StepAnimation {
    constructor(el) {
      var steps = el.dataset.stepAnimationSteps;
      this.el = el;
      this.repeat = parseInt(el.dataset.stepAnimationRepeat) || 0;
      this.type = el.dataset.stepAnimationType;
      this.steps = steps ? JSON.parse(base64ToString(steps)) : [];
      this.offset = parseInt(el.dataset.stepAnimationOffset) || 0;
      this.trigger = el.dataset.stepAnimationTrigger || 'bottom';
      this.blockParent = el.closest('.cli-block');
      this.timeline = null;
    }
    get isTouchEvent() {
      return this.type === EVENTS.click || this.type === EVENTS.mouseenter;
    }
    get isShowEvent() {
      return this.type === EVENTS.elementOnScreen || this.type === EVENTS.blockOnScreen;
    }
    get offsetOperator() {
      return this.trigger === 'bottom' ? '-=' : '+=';
    }
    get target() {
      return this.type === EVENTS.blockOnScreen ? this.blockParent : this.el;
    }
    createTimeline() {
      if (this.isTouchEvent) {
        var repeat = this.repeat;
        var self = this;
        var onComplete = function onComplete() {
          // this - timeline
          if (self.type === EVENTS.click && self.repeat === 0) {
            this.reverse().pause();
          }
        };
        if (repeat === 0) {
          repeat = 1; // yoyo reverse require
        }

        return gsap.timeline({
          paused: true,
          repeat,
          yoyo: true,
          onComplete
        });
      }
      if (this.isShowEvent) {
        var scrollTrigger = {
          trigger: this.target,
          start: "top ".concat(this.trigger).concat(this.offsetOperator).concat(this.offset)
        };
        return gsap.timeline({
          paused: true,
          repeat: this.repeat,
          scrollTrigger
        });
      }
      return gsap.timeline({
        paused: true,
        repeat: this.repeat
      });
    }
    appendStepsToTimeline() {
      var exceptions = ['distance', 'fix'];
      this.steps.forEach((step, i) => {
        var distance = step.fix ? parseInt(step.y) + parseInt(step.distance) : step.distance;
        var options = Object.entries(step).reduce((acc, _ref) => {
          var [key, value] = _ref;
          return exceptions.includes(key) ? acc : _objectSpread(_objectSpread({}, acc), {}, {
            [key]: value
          });
        }, {});
        if (this.type === EVENTS.scroll) {
          // дистанция предыдущих шагов
          var prevSteps = this.steps.filter((e, index) => index < i);
          var passedDistance = prevSteps.reduce((acc, curr) => acc + curr.distance, 0) - this.offset;
          options.scrollTrigger = {
            immediateRender: false,
            trigger: this.target,
            start: "top ".concat(this.trigger, "-=").concat(passedDistance),
            end: "+=".concat(distance),
            scrub: true
          };
        }
        this.timeline.to(this.el, options);
      });
    }
    touchEventHandler() {
      var _this = this;
      return _asyncToGenerator(function* () {
        _this.timeline.restart().play();
      })();
    }
    stopTouchEventHandler() {
      var _this2 = this;
      return _asyncToGenerator(function* () {
        if (_this2.repeat === -1) {
          // loop
          yield _this2.timeline.restart().pause();
        } else {
          yield _this2.timeline.reverse();
        }
      })();
    }
    init() {
      var _this3 = this;
      gsap.registerPlugin(ScrollTrigger);
      ScrollTrigger.defaults({
        scroller: window.userScripts.Util.getScrollContainer(this.el)
      });
      this.timeline = this.createTimeline();
      this.appendStepsToTimeline();
      if (this.isTouchEvent) {
        this.el.addEventListener(this.type, /*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator(function* (e) {
            if (!_this3.timeline.isActive()) {
              var hasElementHref = _this3.el.getAttribute('href');

              // отрабатывание анимации на ссылках
              if (!hasElementHref) {
                e.preventDefault();
              }
              yield _this3.touchEventHandler();
            }
          });
          return function (_x) {
            return _ref2.apply(this, arguments);
          };
        }());
      }
    }
    static run() {
      var rootElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      // для откладывания анимации
      // при переходе на страницу с якорем
      // иначе не скроллится к якорному блоку
      var timerId = setInterval(() => {
        if (!JSON.parse(localStorage.getItem('scrollingToAnchor'))) {
          var SELECTOR = '[data-step-animation-type]:not([data-step-animation-type=""])';
          var items = [...rootElement.querySelectorAll(SELECTOR)];
          items.forEach(c => {
            var el = new StepAnimation(c);
            el.init();
          });
          clearInterval(timerId);
        }
      }, 500);
    }
  }
  document.addEventListener('DOMContentLoaded', () => {
    StepAnimation.run();
  });
  window.userScripts = window.userScripts || {};
  window.userScripts.StepAnimation = StepAnimation;
})();

/***/ }),

/***/ "./src/js/timer.js":
/*!*************************!*\
  !*** ./src/js/timer.js ***!
  \*************************/
/***/ (() => {

(function () {
  'use strict';

  class Timer {
    constructor(el) {
      this.el = el;
      this.interval = null;
      this.eventDate = new Date(Date.parse(el.getAttribute('data-timer')));
      this.dayEl = el.querySelector('[data-timer-day-value]');
      this.hoursEl = el.querySelector('[data-timer-hours-value]');
      this.minutesEl = el.querySelector('[data-timer-minutes-value]');
      this.secondsEl = el.querySelector('[data-timer-seconds-value]');
    }
    tick() {
      var now = new Date();
      var diffInTime = this.eventDate.getTime() - now.getTime();
      var timestamp = Math.trunc(diffInTime / 1000);
      var allHours = Math.floor(timestamp / 60 / 60);
      this.dayEl.textContent = String(Math.floor(allHours / 24));
      this.hoursEl.textContent = String(allHours % 24);
      this.minutesEl.textContent = String(Math.floor(timestamp / 60) - allHours * 60);
      this.secondsEl.textContent = String(timestamp % 60);
      if (diffInTime <= 0) {
        this.stop();
        this.expired();
      }
    }
    init() {
      this.stop();
      this.eventDate = new Date(Date.parse(this.el.getAttribute('data-timer')));
      var tick = this.tick.bind(this);
      this.tick();
      this.interval = setInterval(tick, 1000);
    }
    stop() {
      this.interval = null;
    }
    expired() {
      this.dayEl.textContent = '0';
      this.hoursEl.textContent = '0';
      this.minutesEl.textContent = '0';
      this.secondsEl.textContent = '0';
    }
    static run() {
      var rootElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      var SELECTOR = '[data-script="timer"]';
      var timers = [...rootElement.querySelectorAll(SELECTOR)];
      timers.forEach(t => {
        var timer = new Timer(t);
        timer.init();
      });
    }
  }
  document.addEventListener('DOMContentLoaded', () => {
    Timer.run();
  });
  window.userScripts = window.userScripts || {};
  window.userScripts.Timer = Timer;
})();

/***/ }),

/***/ "./src/js/util.js":
/*!************************!*\
  !*** ./src/js/util.js ***!
  \************************/
/***/ (() => {

(function () {
  'use strict';

  var STICKY_SELECTOR = '.cli-sticky';
  var BUILDER_PREVIEW_SELECTOR = '[data-public-page]';
  class Util {
    static isBuilder(el) {
      if (!el) return;
      return !!el.closest('#app');
    }
    static getScrollContainer(el) {
      return this.isBuilder(el) ? document.querySelector(BUILDER_PREVIEW_SELECTOR) : document.documentElement;
    }
    static scrollAfterLoad(el, cb) {
      var scrollTarget = this.getScrollContainer(el);
      var currentScrollTop = scrollTarget.scrollTop;
      var topOffset = 0;
      var stickyHeader = document.querySelector(STICKY_SELECTOR);
      if (stickyHeader) {
        var computedHeight = getComputedStyle(stickyHeader).height;
        topOffset = computedHeight === 'auto' ? 0 : parseInt(computedHeight);
      }
      var rect = el.getBoundingClientRect();
      var offset = rect.top - topOffset;
      var top = offset > 0 ? Math.abs(currentScrollTop + Math.abs(offset)) : Math.abs(currentScrollTop - Math.abs(offset));
      var payload = {
        top,
        behavior: 'smooth'
      };
      scrollTarget.scrollTo(payload);
      if (cb) cb();
    }
    static checkAndScroll(el, cb) {
      if (document.readyState === 'complete') {
        // Если страница уже загружена, сразу вызываем scrollAfterLoad
        this.scrollAfterLoad(el, cb);
      } else {
        // Если страница еще загружается, ждем полной загрузки
        window.addEventListener('load', () => {
          // Используем requestAnimationFrame для отложенного выполнения
          requestAnimationFrame(() => this.scrollAfterLoad(el, cb));
        }, {
          once: true
        });
      }
    }
    static scrollTo(el, cb) {
      this.checkAndScroll(el, cb);
    }
    static showPopup(el) {
      el.classList.add('show');
      var scrollTarget = this.getScrollContainer(el);
      if (this.isBuilder(el)) {
        scrollTarget.style.contain = 'layout';
        el.style.top = "".concat(scrollTarget.scrollTop, "px");
      }
      scrollTarget.style.overflow = 'hidden';

      // кнопка внутри попапа
      var close = el.querySelector('[data-popup-close]');
      var clearEvents = () => {
        close.removeEventListener('click', closeHandler);
        el.removeEventListener('mousedown', fadeHandler);
      };
      var closeHandler = e => {
        e.stopPropagation();
        this.hidePopup(el);
        clearEvents();
      };

      // клик по оверлею воокруг попапа
      var fadeHandler = e => {
        if (el === e.target) {
          this.hidePopup(el);
          clearEvents();
        }
      };
      close.addEventListener('click', closeHandler);
      el.addEventListener('mousedown', fadeHandler);
    }
    static hidePopup(el) {
      el.classList.remove('show');
      var scrollTarget = this.getScrollContainer(el);
      if (this.isBuilder(el)) {
        el.style.top = 0;
        scrollTarget.style.contain = null;
      }
      scrollTarget.style.overflow = null;
    }
    static previewChangeSubscribe(el, cb) {
      // change breakpoints in builder preview
      var classObserver = new ResizeObserver(changes => {
        cb(changes[0]);
      });
      classObserver.observe(el);
    }
    static observeClassChanges(el, cb) {
      var observer = new MutationObserver(mutationsList => {
        cb(mutationsList.filter(i => el === i.target)[0]);
      });
      var config = {
        attributes: true,
        attributeFilter: ['class'],
        subtree: true
      };
      observer.observe(el, config);
    }
    static hideMenu(menu) {
      menu.classList.remove('opened');
      var container = this.getScrollContainer(menu);
      container.style.overflow = null;
      container.style.touchAction = null;
    }
    static showMenu(menu) {
      menu.classList.add('opened');
      var container = this.getScrollContainer(menu);
      container.style.overflow = 'hidden';
      // mobile safari fix
      container.style.touchAction = 'none';
      // const scroll = this.mobileMenu.offsetHeight < this.mobileMenu.scrollHeight
      // scroll ? this.mobileMenu.style.setProperty('justify-content', 'flex-start', 'important') : this.mobileMenu.style['justify-content'] = null
    }

    static isMobile() {
      var toMatch = [/Android/i, /webOS/i, /iPhone/i, /iPad/i, /iPod/i, /BlackBerry/i, /Windows Phone/i];
      return toMatch.some(toMatchItem => {
        return navigator.userAgent.match(toMatchItem);
      });
    }
    static base64ToString(base64) {
      var isBase64 = val => typeof val === 'string' && /^[A-Za-z0-9+/]+=*$/.test(val);
      if (typeof base64 !== 'string') {
        return base64;
      }
      if (!isBase64(base64)) {
        return base64;
      }
      return new TextDecoder().decode(Uint8Array.from(atob(base64), m => m.codePointAt(0)));
    }
    static stringToBase64(str) {
      if (typeof str !== 'string') {
        return str;
      }
      return btoa(String.fromCodePoint(...new TextEncoder().encode(str)));
    }
    static debounce(func, wait) {
      var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var timeout;
      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var later = () => {
          timeout = null;
          if (!immediate) func(...args);
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func(...args);
      };
    }

    // collection utils
    static getFiltersWithReplacedTemplateVariables(filters, templateContext) {
      var newFilters = JSON.parse(JSON.stringify(filters));
      function isVariable(value) {
        return value.includes('{{ ') && value.includes(' }}');
      }
      function replaceVariables(str, getValue) {
        var regex = /{{\s*([\w.-]+)\s*}}/g;
        return str.replace(regex, (_, variableName) => getValue(variableName));
      }
      function getValueFromPath(str, context) {
        if (!str || !context) {
          return '';
        }
        var path = str.replace(/[{}]/g, '').trim();
        var keys = path.split('.');
        return keys.reduce((acc, key) => acc && acc[key], context);
      }
      newFilters.$and.forEach(andObj => {
        andObj.$or.forEach(orConditions => {
          Object.entries(orConditions).forEach(_ref => {
            var [_fieldId, conditions] = _ref;
            Object.entries(conditions).forEach(_ref2 => {
              var [conditionKey, conditionValue] = _ref2;
              if (typeof conditionValue !== 'string' || !isVariable(conditionValue) || conditionKey === '__system') return;
              var getValue = variable => getValueFromPath(variable, templateContext);
              var newConditionValue = replaceVariables(conditionValue, getValue);
              var valueType = Util.EConditionValueType.STRING;
              if (conditions.__system && conditions.__system.value_type) {
                valueType = conditions.__system.value_type;
              }
              if (valueType === Util.EConditionValueType.BOOLEAN) {
                newConditionValue = !!newConditionValue;
              } else if (valueType === Util.EConditionValueType.INT) {
                newConditionValue = parseInt(newConditionValue);
              }
              conditions[conditionKey] = newConditionValue;
            });
          });
        });
      });
      return newFilters;
    }
    // collection utils END

    static clearTags(v) {
      var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (v && typeof v === 'string') {
        var regex = tag ? new RegExp("(</?".concat(tag, "(?=( |>|/))([^>]*)>)"), 'ig') : /(<([^>]*)>)/ig;
        return v.replace(regex, '');
      } else {
        return v;
      }
    }
  }

  // collection utils
  Util.EFilterMethodsConditions = {
    INCLUDES: 'includes',
    NOT_INCLUDES: 'notIncludes',
    STARTS_WITH: 'startsWith',
    NOT_STARTS_WITH: 'notStartsWith',
    ENDS_WITH: 'endsWith',
    NOT_ENDS_WITH: 'notEndsWith',
    EXISTS: 'exists',
    NOT_EXISTS: 'notExists',
    EQUAL: 'equal',
    NOT_EQUAL: 'notEqual',
    CONTAINS: 'contains',
    NOT_CONTAINS: 'notContains',
    GREATER_THAN: 'greaterThan',
    GREATER_THAN_EQUAL: 'greaterThanEqual',
    LESS_THAN: 'lessThan',
    LESS_THAN_EQUAL: 'lessThanEqual'
  };
  Util.EConditionValueType = {
    STRING: 'text',
    BOOLEAN: 'boolean',
    INT: 'int'
  };
  Util.ETextDynamicType = {
    FROM_ELEMENT_IN_PAGE: 'fromElementInPage',
    CURRENT_PAGE_ITEM_FIELD: 'currentPageItemField'
  };
  Util.EIntDynamicType = {
    FROM_ELEMENT_IN_PAGE: 'fromElementInPage',
    CURRENT_PAGE_ITEM_FIELD: 'currentPageItemField'
  };
  // collection utils END

  window.userScripts = window.userScripts || {};
  window.userScripts.Util = Util;
})();

/***/ }),

/***/ "./src/js/utm.js":
/*!***********************!*\
  !*** ./src/js/utm.js ***!
  \***********************/
/***/ (() => {

(function () {
  'use strict';

  var LSKey = 'UTM_params';
  class UTMHelper {
    constructor() {}
    static hasMetaTag() {
      var tag = document.head.querySelector('meta[name="analytics"]');
      return tag && tag.content && tag.content === 'utm';
    }
    static getQueryParams() {
      return Object.fromEntries([...new URLSearchParams(window.location.search).entries()].filter(param => param[0].startsWith('utm_')));
    }
    static save() {
      var params = UTMHelper.getQueryParams();
      if (!Object.keys(params).length) return;
      localStorage.setItem(LSKey, JSON.stringify(params));
    }
    static clear() {
      localStorage.removeItem(LSKey);
    }
    static getItems() {
      return JSON.parse(localStorage.getItem(LSKey));
    }
    static init() {
      if (UTMHelper.hasMetaTag()) {
        UTMHelper.save();
      }
    }
  }
  UTMHelper.init();
  window.userScripts = window.userScripts || {};
  window.userScripts.UTMHelper = UTMHelper;
})();

/***/ }),

/***/ "./src/js/video.js":
/*!*************************!*\
  !*** ./src/js/video.js ***!
  \*************************/
/***/ (() => {

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
(function () {
  'use strict';

  var VIDEO_SERVICES = [{
    service: 'youtube',
    base: 'https://www.youtube.com/embed/',
    urlReg: /(?:youtube\.com\/(?:[^]+\/.+\/|(?:v|e(?:mbed)?)\/|shorts\/|.*[?&]v=)|youtu\.be\/)([^"&?\s]{11})/gi,
    idReg: /.*(?:youtu\.be\/|v\/|u\/\w\/|embed\/|shorts\/|watch\?v=)([^#\\&\\?]*).*/,
    linkConstant: '?enablejsapi=1&version=3&playerapiid=ytplayer&start=1&modestbranding=1&showinfo=0&rel=0&iv_load_policy=3',
    linkDynamicParams: {
      autoplay: 'autoplay',
      mute: 'mute',
      loop: 'loop',
      controls: 'controls'
    },
    postMessages: {
      play: '{"event":"command","func":"playVideo","args":""}',
      pause: '{"event":"command","func":"pauseVideo","args":""}'
    }
  }, {
    service: 'rutube',
    base: 'https://rutube.ru/play/embed/',
    urlReg: /rutube\.ru\/(video\/|play\/embed\/).*/gi,
    idReg: /.*(?:rutube\.ru\/|play\/embed\/|video\/)([^#\\&\\?]*)/,
    linkConstant: '?',
    // Параметры ниже в плеере rutube не работают,
    // но они нужны для настройки видео через postMessage
    linkDynamicParams: {
      autoplay: 'autoplay',
      mute: 'mute',
      loop: 'loop',
      controls: 'controls'
    },
    postMessages: {
      play: '{"type":"player:play"}',
      pause: '{"type":"player:pause"}',
      mute: '{"type":"player:mute"}'
    }
  }, {
    service: 'vimeo',
    base: 'https://player.vimeo.com/video/',
    urlReg: /vimeo\.com\/(video\/)?.*/gi,
    idReg: /.*(?:vimeo\.com\/|video\/)([^#\\&\\?]*)/,
    // отключение поведения когда одно видео начинает проигрываться, то другие ставятся на паузу
    linkConstant: '?autopause=0',
    linkDynamicParams: {
      autoplay: 'autoplay',
      mute: 'muted',
      loop: 'loop',
      controls: 'controls'
    },
    postMessages: {
      play: '{"method":"play"}',
      pause: '{"method":"pause"}'
    }
  }, {
    service: 'zen.yandex',
    base: 'https://dzen.ru/embed/',
    urlReg: /dzen\.ru\/(embed\/).*/gi,
    idReg: /.*(?:dzen\.ru\/embed\/)([^#\\&\\?]*)/,
    linkConstant: '?',
    linkDynamicParams: {
      autoplay: 'autoplay',
      mute: 'mute',
      loop: 'loop',
      controls: 'tv'
    },
    postMessages: {
      play: '{"method":"play"}',
      pause: '{"method":"pause"}'
    }
  }, {
    service: 'vk',
    base: 'https://vk.com/',
    urlReg: /(vk\.com|vkvideo\.ru)\/(video)?.*/gi,
    idReg: /(https:\/\/vk\.com|https:\/\/vkvideo\.ru)\/(video_ext\.php)?[^"]*/,
    linkConstant: '?',
    linkDynamicParams: {
      autoplay: 'autoplay',
      mute: 'muted',
      loop: 'loop'
    },
    postMessages: {
      play: '{"method":"play"}',
      pause: '{"method":"pause"}'
    }
  }];
  var getBinaryFromUrlByKey = (url, key) => {
    var index = url.indexOf(key + '=');
    return Number(url[index + key.length + 1]);
  };
  var parseUrl = url => {
    if (!url) return null;
    var videoService = VIDEO_SERVICES.find(i => url.match(i.urlReg));
    if (url && videoService) {
      var match = url.match(videoService.idReg);
      return _objectSpread({
        url: match[0],
        id: getServiceId(videoService.service, match)
      }, videoService);
    }
    return null;
  };
  var getServiceId = (service, match) => {
    if (service === 'vk') {
      return match && "video_ext.php?oid=".concat(match[1], "&id=").concat(match[2]);
    }
    return match && match[1].replace('/', '');
  };
  class Video {
    constructor(el) {
      var iframe = el.querySelector('iframe');
      this.el = el;
      this.iframe = iframe;
      this.url = iframe.dataset.iframeSrc || iframe.src;
      this.backgroundVideo = this.el.closest('[data-design-type="background"]');
      this.serviceOptions = parseUrl(this.url);
      this.isRutubeVideo = this.serviceOptions && this.serviceOptions.service === 'rutube';
      this.isYoutubeVideo = this.serviceOptions && this.serviceOptions.service === 'youtube';
      this.isVkVideo = this.serviceOptions && this.serviceOptions.service === 'vk';
      this.button = el.querySelector('[data-video-button]');
      var autoplayKey = this.serviceOptions && this.serviceOptions.linkDynamicParams.autoplay;
      this.autoplayValue = autoplayKey ? getBinaryFromUrlByKey(this.url, autoplayKey) : 0;
      this.previewDOMElement = el.querySelector('[data-video-preview]');
      this.playIntervalId = null;
      this.wasRetryPlayLaunched = false;
      this.playing = false;
      this.currentPlayerInstance = null;
    }
    action(command) {
      var _this$iframe;
      if ((_this$iframe = this.iframe) !== null && _this$iframe !== void 0 && _this$iframe.contentWindow) {
        var _this$iframe$contentW;
        (_this$iframe$contentW = this.iframe.contentWindow) === null || _this$iframe$contentW === void 0 ? void 0 : _this$iframe$contentW.postMessage(command, '*');
      }
    }
    play() {
      var _this$iframe2;
      this.playing = true;
      this.el.classList.add('play');
      if (!((_this$iframe2 = this.iframe) !== null && _this$iframe2 !== void 0 && _this$iframe2.getAttribute('src'))) {
        this.iframe.src = this.url;
      }
      if (this.isVkVideo && this.currentPlayerInstance) {
        this.currentPlayerInstance.play();
      }
      var command = this.serviceOptions.postMessages.play;

      // у iframe ютуба event load отрабатывает с существенной задержкой, порой в 10-15 секунд, поэтому на него опираться нельзя
      // BUILDER-997
      if (!this.isYoutubeVideo) {
        this.iframe.onload = () => {
          this.action(command);
        };
      }
      this.action(command);
      if (!this.isRutubeVideo && !this.wasRetryPlayLaunched) {
        this.wasRetryPlayLaunched = true;
        this.playIntervalId = setInterval(() => this.action(command), 300);
        setTimeout(() => this.playIntervalId !== null && clearInterval(this.playIntervalId), 1500);
      }
    }
    pause() {
      this.playing = false;
      this.el.classList.remove('play');
      if (this.playIntervalId !== null) {
        clearInterval(this.playIntervalId);
        this.playIntervalId = null;
      }
      var command = this.serviceOptions.postMessages.pause;
      this.action(command);
      if (this.isVkVideo && this.currentPlayerInstance) {
        this.currentPlayerInstance.pause();
      }
    }
    mute() {
      var command = this.serviceOptions.postMessages.mute;
      this.action(command);
      if (this.isVkVideo && this.currentPlayerInstance) {
        this.currentPlayerInstance.mute();
      }
    }
    addVkVideo() {
      var script = document.createElement('script');
      script.src = 'https://vk.com/js/api/videoplayer.js';
      script.async = true;
      script.onload = () => {
        this.onScriptLoaded();
      };
      document.body.appendChild(script);
    }
    onScriptLoaded() {
      this.iframe.src = this.iframe.getAttribute('data-iframe-src');
      this.currentPlayerInstance = VK.VideoPlayer(this.iframe);
      var parsedUrl = new URL(this.iframe.src);
      var params = new URLSearchParams(parsedUrl.search);
      var mutedValue = params.get('muted');
      if (mutedValue === '1') {
        this.mute();
      }
    }
    init() {
      if (this.isVkVideo) {
        this.addVkVideo();
      }

      // синхронизируем класс play, например, когда листаем слайдер
      var classObserver = new MutationObserver(changes => {
        changes.forEach(_ref => {
          var {
            target
          } = _ref;
          var curr = target.classList.contains('play');
          if (this.playing) {
            if (!curr) {
              this.el.classList.add('play');
            }
          } else {
            if (curr) {
              this.el.classList.remove('play');
            }
          }
        });
      });

      // следим за скрытием/отображением элемента
      var visibleObserver = new IntersectionObserver(entries => {
        if (entries[0].isIntersecting) {
          if (this.autoplayValue && !this.playing) {
            this.play();
          }
        } else {
          if (this.playing) {
            this.pause();
          }
        }
      }, {
        threshold: 0,
        rootMargin: "-200px 0px -200px 0px"
      });
      classObserver.observe(this.el, {
        attributes: true,
        attributeFilter: ['class']
      });
      visibleObserver.observe(this.el);
      this.button && this.button.addEventListener('click', e => {
        e.stopPropagation();
        if (this.playing) {
          this.pause();
        } else {
          this.play();
        }
      });
      this.el.addEventListener('click', () => {
        this.pause();
      });
      var controller = new AbortController();
      window.addEventListener('message', e => {
        // если iframe нет в DOM, то отписываемся от message
        if (!this.iframe.closest('body')) {
          controller.abort();
          return;
        }
        // если message от нужного iframe
        if (e.source === this.iframe.contentWindow) {
          try {
            // Автовоспроизведение видео с Rutube на странице
            var message = JSON.parse(e.data);
            if (this.isRutubeVideo) {
              if (this.autoplayValue) {
                if (message.type === 'player:ready' || message.type === 'player:playComplete') {
                  this.mute();
                  this.action(this.serviceOptions.postMessages.play);
                }
              }
            }
          } catch (_unused) {}
        }
      }, {
        signal: controller.signal
      });

      // для preview и SEO активируем iframe после задержки
      if (!this.backgroundVideo && !this.previewDOMElement) {
        var IFRAME_AUTO_ACTIVATION_DELAY = 2500;
        setTimeout(() => {
          if (!this.iframe || this.iframe.src === this.url) return;
          this.el.classList.add('cli-video--raw');
          this.iframe.src = this.url;
        }, IFRAME_AUTO_ACTIVATION_DELAY);
      }
    }
    static run() {
      var rootElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      var SELECTOR = '[data-script="video"]';
      var videos = [...rootElement.querySelectorAll(SELECTOR)];
      videos.forEach(t => {
        var video = new Video(t);
        video.init();
      });
    }
  }
  document.addEventListener('DOMContentLoaded', () => {
    Video.run();
  });
  window.userScripts = window.userScripts || {};
  window.userScripts.Video = Video;
})();

/***/ }),

/***/ "./src/js/zoom.js":
/*!************************!*\
  !*** ./src/js/zoom.js ***!
  \************************/
/***/ (() => {

var ICON_NEXT = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" aria-labelledby="cli-swiper-next" role="presentation"><g fill="currentColor"><path d="M15.093 12L10.0542 6.40139L10.9462 5.59863L16.7074 12L10.9462 18.4014L10.0542 17.5986L15.093 12Z" fill-rule="evenodd" clip-rule="evenodd"></path></g></svg>';
var ICON_PREV = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" aria-labelledby="cli-swiper-prev" role="presentation"><g fill="currentColor"><path d="M8.90704 12L13.9458 6.40139L13.0538 5.59863L7.29261 12L13.0538 18.4014L13.9458 17.5986L8.90704 12Z" fill-rule="evenodd" clip-rule="evenodd"></path></g></svg>';
var MANY_ELEMENTS_SWIPER = "<div class=\"zoom-popup-slider swiper\">\n    <div class=\"zoom-popup-slider__wrapper swiper-wrapper\"></div>\n    <div class=\"zoom-popup-slider__next-container\">\n      <div class=\"zoom-popup-slider__next swiper-button-next\">".concat(ICON_NEXT, "</div>\n    </div>\n    <div class=\"zoom-popup-slider__prev-container\">\n      <div class=\"zoom-popup-slider__prev swiper-button-prev\">").concat(ICON_PREV, "</div>\n    </div>\n    <div class=\"zoom-popup-slider__pagination swiper-pagination\"></div>\n    <div class=\"zoom-popup__svg-wrapper\"></div>\n  </div>\n  <div class=\"zoom-popup__close-container\">\n    <div class=\"zoom-popup__close\"></div>\n  </div>");
var ONE_ELEMENT_SWIPER = "<div class=\"zoom-popup-slider swiper\">\n    <div class=\"zoom-popup-slider__wrapper swiper-wrapper\"></div>\n    <div class=\"zoom-popup__svg-wrapper\"></div>\n  </div>\n  <div class=\"zoom-popup__close-container\">\n    <div class=\"zoom-popup__close\"></div>\n  </div>";
var MANY_ELEMENTS_OPTIONS = {
  pagination: {
    el: ".swiper-pagination",
    dynamicBullets: true,
    dynamicMainBullets: 7,
    clickable: true
  },
  navigation: {
    nextEl: ".zoom-popup-slider__next-container",
    prevEl: ".zoom-popup-slider__prev-container"
  },
  loop: true
};
(function () {
  class ZoomPopup {
    constructor() {
      this.popup = null;
      this.swiper = null;
      this.hideHandler = e => this.hide(e.target);
    }
    create() {
      var container = document.createElement('div');
      container.classList.add('zoom-popup');
      container.style.display = 'none';
      this.popup = container;
      return container;
    }
    createSlider(target) {
      var parent = target.closest('section');
      var images = parent.querySelectorAll('[data-zoom="true"]');
      var sliderPagination = parent.querySelector('[data-design-type="slider-pagination"]');
      var options = {};
      if (images.length > 1) {
        options = MANY_ELEMENTS_OPTIONS;
        this.popup.innerHTML = MANY_ELEMENTS_SWIPER;
        if (sliderPagination) this.popup.querySelector('.zoom-popup-slider__pagination').id = sliderPagination.id;
      } else {
        this.popup.innerHTML = ONE_ELEMENT_SWIPER;
      }
      var slides = Array.from(images).map(image => {
        var {
          src,
          alt
        } = image;
        var title = image.getAttribute('data-zoom-title');
        return this.createSlide(src, alt, title);
      });
      var swiperWrapper = this.popup.querySelector('.swiper-wrapper');
      slides.forEach(slide => swiperWrapper.appendChild(slide));
      this.swiper = new Swiper(this.popup.querySelector('.swiper'), options);
      this.swiper.slideToLoop(Array.from(images).indexOf(target));
    }
    createSlide(src, alt) {
      var title = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var slide = document.createElement('div');
      slide.className = 'zoom-popup-slider__slide swiper-slide';
      var imageContainer = document.createElement('figure');
      imageContainer.className = 'zoom-popup-slider__image';
      var image = document.createElement('img');
      image.src = src;
      image.alt = alt;
      imageContainer.appendChild(image);
      if (title) {
        var figcaption = document.createElement('figcaption');
        figcaption.textContent = title;
        figcaption.classList.add('zoom-popup-slider__title');
        imageContainer.appendChild(figcaption);
      }
      slide.appendChild(imageContainer);
      return slide;
    }
    show(target) {
      this.createSlider(target);
      this.popup.addEventListener('click', this.hideHandler);
      this.popup.style.display = 'flex';
    }
    hide(target) {
      var isCloseButton = target.classList.contains('zoom-popup__close');
      var isCloseContainer = target.classList.contains('zoom-popup__close-container');
      if (!isCloseContainer && !isCloseButton) return;
      this.popup.style.display = 'none';
      this.swiper.destroy(false, false);
      this.popup.removeEventListener('click', this.hideHandler);
    }
    static destroy() {
      var popup = document.querySelector('.zoom-popup');
      if (popup) popup.remove();
    }
  }
  class ZoomOnClick {
    constructor(el, popup) {
      this.el = el;
      this.popup = popup;
    }
    init() {
      this.el.addEventListener('click', e => {
        e.preventDefault();
        e.stopPropagation();
        this.popup.show(e.target);
      });
    }
    static run() {
      var rootElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
      var SELECTOR = '[data-zoom="true"]';
      var images = [...rootElement.querySelectorAll(SELECTOR)];
      if (images.length === 0) return;
      var popup = new ZoomPopup();
      var el = popup.create();
      rootElement.appendChild(el);
      images.forEach(t => {
        var item = new ZoomOnClick(t, popup);
        item.init();
      });
    }
    static stop() {
      ZoomPopup.destroy();
    }
  }
  document.addEventListener('DOMContentLoaded', () => {
    ZoomOnClick.run();
  });
  window.userScripts = window.userScripts || {};
  window.userScripts.ZoomOnClick = ZoomOnClick;
})();

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "./node_modules/html-entities/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/html-entities/lib/index.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var named_references_1 = __webpack_require__(/*! ./named-references */ "./node_modules/html-entities/lib/named-references.js");
var numeric_unicode_map_1 = __webpack_require__(/*! ./numeric-unicode-map */ "./node_modules/html-entities/lib/numeric-unicode-map.js");
var surrogate_pairs_1 = __webpack_require__(/*! ./surrogate-pairs */ "./node_modules/html-entities/lib/surrogate-pairs.js");
var allNamedReferences = __assign(__assign({}, named_references_1.namedReferences), { all: named_references_1.namedReferences.html5 });
var encodeRegExps = {
    specialChars: /[<>'"&]/g,
    nonAscii: /[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,
    nonAsciiPrintable: /[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,
    nonAsciiPrintableOnly: /[\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,
    extensive: /[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g
};
var defaultEncodeOptions = {
    mode: 'specialChars',
    level: 'all',
    numeric: 'decimal'
};
/** Encodes all the necessary (specified by `level`) characters in the text */
function encode(text, _a) {
    var _b = _a === void 0 ? defaultEncodeOptions : _a, _c = _b.mode, mode = _c === void 0 ? 'specialChars' : _c, _d = _b.numeric, numeric = _d === void 0 ? 'decimal' : _d, _e = _b.level, level = _e === void 0 ? 'all' : _e;
    if (!text) {
        return '';
    }
    var encodeRegExp = encodeRegExps[mode];
    var references = allNamedReferences[level].characters;
    var isHex = numeric === 'hexadecimal';
    encodeRegExp.lastIndex = 0;
    var _b = encodeRegExp.exec(text);
    var _c;
    if (_b) {
        _c = '';
        var _d = 0;
        do {
            if (_d !== _b.index) {
                _c += text.substring(_d, _b.index);
            }
            var _e = _b[0];
            var result_1 = references[_e];
            if (!result_1) {
                var code_1 = _e.length > 1 ? surrogate_pairs_1.getCodePoint(_e, 0) : _e.charCodeAt(0);
                result_1 = (isHex ? '&#x' + code_1.toString(16) : '&#' + code_1) + ';';
            }
            _c += result_1;
            _d = _b.index + _e.length;
        } while ((_b = encodeRegExp.exec(text)));
        if (_d !== text.length) {
            _c += text.substring(_d);
        }
    }
    else {
        _c =
            text;
    }
    return _c;
}
exports.encode = encode;
var defaultDecodeOptions = {
    scope: 'body',
    level: 'all'
};
var strict = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g;
var attribute = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;
var baseDecodeRegExps = {
    xml: {
        strict: strict,
        attribute: attribute,
        body: named_references_1.bodyRegExps.xml
    },
    html4: {
        strict: strict,
        attribute: attribute,
        body: named_references_1.bodyRegExps.html4
    },
    html5: {
        strict: strict,
        attribute: attribute,
        body: named_references_1.bodyRegExps.html5
    }
};
var decodeRegExps = __assign(__assign({}, baseDecodeRegExps), { all: baseDecodeRegExps.html5 });
var fromCharCode = String.fromCharCode;
var outOfBoundsChar = fromCharCode(65533);
var defaultDecodeEntityOptions = {
    level: 'all'
};
/** Decodes a single entity */
function decodeEntity(entity, _a) {
    var _b = (_a === void 0 ? defaultDecodeEntityOptions : _a).level, level = _b === void 0 ? 'all' : _b;
    if (!entity) {
        return '';
    }
    var _b = entity;
    var decodeEntityLastChar_1 = entity[entity.length - 1];
    if (false) {}
    else if (false) {}
    else {
        var decodeResultByReference_1 = allNamedReferences[level].entities[entity];
        if (decodeResultByReference_1) {
            _b = decodeResultByReference_1;
        }
        else if (entity[0] === '&' && entity[1] === '#') {
            var decodeSecondChar_1 = entity[2];
            var decodeCode_1 = decodeSecondChar_1 == 'x' || decodeSecondChar_1 == 'X'
                ? parseInt(entity.substr(3), 16)
                : parseInt(entity.substr(2));
            _b =
                decodeCode_1 >= 0x10ffff
                    ? outOfBoundsChar
                    : decodeCode_1 > 65535
                        ? surrogate_pairs_1.fromCodePoint(decodeCode_1)
                        : fromCharCode(numeric_unicode_map_1.numericUnicodeMap[decodeCode_1] || decodeCode_1);
        }
    }
    return _b;
}
exports.decodeEntity = decodeEntity;
/** Decodes all entities in the text */
function decode(text, _a) {
    var decodeSecondChar_1 = _a === void 0 ? defaultDecodeOptions : _a, decodeCode_1 = decodeSecondChar_1.level, level = decodeCode_1 === void 0 ? 'all' : decodeCode_1, _b = decodeSecondChar_1.scope, scope = _b === void 0 ? level === 'xml' ? 'strict' : 'body' : _b;
    if (!text) {
        return '';
    }
    var decodeRegExp = decodeRegExps[level][scope];
    var references = allNamedReferences[level].entities;
    var isAttribute = scope === 'attribute';
    var isStrict = scope === 'strict';
    decodeRegExp.lastIndex = 0;
    var replaceMatch_1 = decodeRegExp.exec(text);
    var replaceResult_1;
    if (replaceMatch_1) {
        replaceResult_1 = '';
        var replaceLastIndex_1 = 0;
        do {
            if (replaceLastIndex_1 !== replaceMatch_1.index) {
                replaceResult_1 += text.substring(replaceLastIndex_1, replaceMatch_1.index);
            }
            var replaceInput_1 = replaceMatch_1[0];
            var decodeResult_1 = replaceInput_1;
            var decodeEntityLastChar_2 = replaceInput_1[replaceInput_1.length - 1];
            if (isAttribute
                && decodeEntityLastChar_2 === '=') {
                decodeResult_1 = replaceInput_1;
            }
            else if (isStrict
                && decodeEntityLastChar_2 !== ';') {
                decodeResult_1 = replaceInput_1;
            }
            else {
                var decodeResultByReference_2 = references[replaceInput_1];
                if (decodeResultByReference_2) {
                    decodeResult_1 = decodeResultByReference_2;
                }
                else if (replaceInput_1[0] === '&' && replaceInput_1[1] === '#') {
                    var decodeSecondChar_2 = replaceInput_1[2];
                    var decodeCode_2 = decodeSecondChar_2 == 'x' || decodeSecondChar_2 == 'X'
                        ? parseInt(replaceInput_1.substr(3), 16)
                        : parseInt(replaceInput_1.substr(2));
                    decodeResult_1 =
                        decodeCode_2 >= 0x10ffff
                            ? outOfBoundsChar
                            : decodeCode_2 > 65535
                                ? surrogate_pairs_1.fromCodePoint(decodeCode_2)
                                : fromCharCode(numeric_unicode_map_1.numericUnicodeMap[decodeCode_2] || decodeCode_2);
                }
            }
            replaceResult_1 += decodeResult_1;
            replaceLastIndex_1 = replaceMatch_1.index + replaceInput_1.length;
        } while ((replaceMatch_1 = decodeRegExp.exec(text)));
        if (replaceLastIndex_1 !== text.length) {
            replaceResult_1 += text.substring(replaceLastIndex_1);
        }
    }
    else {
        replaceResult_1 =
            text;
    }
    return replaceResult_1;
}
exports.decode = decode;


/***/ }),

/***/ "./node_modules/html-entities/lib/named-references.js":
/*!************************************************************!*\
  !*** ./node_modules/html-entities/lib/named-references.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
Object.defineProperty(exports, "__esModule", ({value:true}));exports.bodyRegExps={xml:/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html4:/&notin;|&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html5:/&centerdot;|&copysr;|&divideontimes;|&gtcc;|&gtcir;|&gtdot;|&gtlPar;|&gtquest;|&gtrapprox;|&gtrarr;|&gtrdot;|&gtreqless;|&gtreqqless;|&gtrless;|&gtrsim;|&ltcc;|&ltcir;|&ltdot;|&lthree;|&ltimes;|&ltlarr;|&ltquest;|&ltrPar;|&ltri;|&ltrie;|&ltrif;|&notin;|&notinE;|&notindot;|&notinva;|&notinvb;|&notinvc;|&notni;|&notniva;|&notnivb;|&notnivc;|&parallel;|&timesb;|&timesbar;|&timesd;|&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g};exports.namedReferences={xml:{entities:{"&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},characters:{"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"}},html4:{entities:{"&apos;":"'","&nbsp":" ","&nbsp;":" ","&iexcl":"¡","&iexcl;":"¡","&cent":"¢","&cent;":"¢","&pound":"£","&pound;":"£","&curren":"¤","&curren;":"¤","&yen":"¥","&yen;":"¥","&brvbar":"¦","&brvbar;":"¦","&sect":"§","&sect;":"§","&uml":"¨","&uml;":"¨","&copy":"©","&copy;":"©","&ordf":"ª","&ordf;":"ª","&laquo":"«","&laquo;":"«","&not":"¬","&not;":"¬","&shy":"­","&shy;":"­","&reg":"®","&reg;":"®","&macr":"¯","&macr;":"¯","&deg":"°","&deg;":"°","&plusmn":"±","&plusmn;":"±","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&acute":"´","&acute;":"´","&micro":"µ","&micro;":"µ","&para":"¶","&para;":"¶","&middot":"·","&middot;":"·","&cedil":"¸","&cedil;":"¸","&sup1":"¹","&sup1;":"¹","&ordm":"º","&ordm;":"º","&raquo":"»","&raquo;":"»","&frac14":"¼","&frac14;":"¼","&frac12":"½","&frac12;":"½","&frac34":"¾","&frac34;":"¾","&iquest":"¿","&iquest;":"¿","&Agrave":"À","&Agrave;":"À","&Aacute":"Á","&Aacute;":"Á","&Acirc":"Â","&Acirc;":"Â","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Aring":"Å","&Aring;":"Å","&AElig":"Æ","&AElig;":"Æ","&Ccedil":"Ç","&Ccedil;":"Ç","&Egrave":"È","&Egrave;":"È","&Eacute":"É","&Eacute;":"É","&Ecirc":"Ê","&Ecirc;":"Ê","&Euml":"Ë","&Euml;":"Ë","&Igrave":"Ì","&Igrave;":"Ì","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Iuml":"Ï","&Iuml;":"Ï","&ETH":"Ð","&ETH;":"Ð","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Ograve":"Ò","&Ograve;":"Ò","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Otilde":"Õ","&Otilde;":"Õ","&Ouml":"Ö","&Ouml;":"Ö","&times":"×","&times;":"×","&Oslash":"Ø","&Oslash;":"Ø","&Ugrave":"Ù","&Ugrave;":"Ù","&Uacute":"Ú","&Uacute;":"Ú","&Ucirc":"Û","&Ucirc;":"Û","&Uuml":"Ü","&Uuml;":"Ü","&Yacute":"Ý","&Yacute;":"Ý","&THORN":"Þ","&THORN;":"Þ","&szlig":"ß","&szlig;":"ß","&agrave":"à","&agrave;":"à","&aacute":"á","&aacute;":"á","&acirc":"â","&acirc;":"â","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&aring":"å","&aring;":"å","&aelig":"æ","&aelig;":"æ","&ccedil":"ç","&ccedil;":"ç","&egrave":"è","&egrave;":"è","&eacute":"é","&eacute;":"é","&ecirc":"ê","&ecirc;":"ê","&euml":"ë","&euml;":"ë","&igrave":"ì","&igrave;":"ì","&iacute":"í","&iacute;":"í","&icirc":"î","&icirc;":"î","&iuml":"ï","&iuml;":"ï","&eth":"ð","&eth;":"ð","&ntilde":"ñ","&ntilde;":"ñ","&ograve":"ò","&ograve;":"ò","&oacute":"ó","&oacute;":"ó","&ocirc":"ô","&ocirc;":"ô","&otilde":"õ","&otilde;":"õ","&ouml":"ö","&ouml;":"ö","&divide":"÷","&divide;":"÷","&oslash":"ø","&oslash;":"ø","&ugrave":"ù","&ugrave;":"ù","&uacute":"ú","&uacute;":"ú","&ucirc":"û","&ucirc;":"û","&uuml":"ü","&uuml;":"ü","&yacute":"ý","&yacute;":"ý","&thorn":"þ","&thorn;":"þ","&yuml":"ÿ","&yuml;":"ÿ","&quot":'"',"&quot;":'"',"&amp":"&","&amp;":"&","&lt":"<","&lt;":"<","&gt":">","&gt;":">","&OElig;":"Œ","&oelig;":"œ","&Scaron;":"Š","&scaron;":"š","&Yuml;":"Ÿ","&circ;":"ˆ","&tilde;":"˜","&ensp;":" ","&emsp;":" ","&thinsp;":" ","&zwnj;":"‌","&zwj;":"‍","&lrm;":"‎","&rlm;":"‏","&ndash;":"–","&mdash;":"—","&lsquo;":"‘","&rsquo;":"’","&sbquo;":"‚","&ldquo;":"“","&rdquo;":"”","&bdquo;":"„","&dagger;":"†","&Dagger;":"‡","&permil;":"‰","&lsaquo;":"‹","&rsaquo;":"›","&euro;":"€","&fnof;":"ƒ","&Alpha;":"Α","&Beta;":"Β","&Gamma;":"Γ","&Delta;":"Δ","&Epsilon;":"Ε","&Zeta;":"Ζ","&Eta;":"Η","&Theta;":"Θ","&Iota;":"Ι","&Kappa;":"Κ","&Lambda;":"Λ","&Mu;":"Μ","&Nu;":"Ν","&Xi;":"Ξ","&Omicron;":"Ο","&Pi;":"Π","&Rho;":"Ρ","&Sigma;":"Σ","&Tau;":"Τ","&Upsilon;":"Υ","&Phi;":"Φ","&Chi;":"Χ","&Psi;":"Ψ","&Omega;":"Ω","&alpha;":"α","&beta;":"β","&gamma;":"γ","&delta;":"δ","&epsilon;":"ε","&zeta;":"ζ","&eta;":"η","&theta;":"θ","&iota;":"ι","&kappa;":"κ","&lambda;":"λ","&mu;":"μ","&nu;":"ν","&xi;":"ξ","&omicron;":"ο","&pi;":"π","&rho;":"ρ","&sigmaf;":"ς","&sigma;":"σ","&tau;":"τ","&upsilon;":"υ","&phi;":"φ","&chi;":"χ","&psi;":"ψ","&omega;":"ω","&thetasym;":"ϑ","&upsih;":"ϒ","&piv;":"ϖ","&bull;":"•","&hellip;":"…","&prime;":"′","&Prime;":"″","&oline;":"‾","&frasl;":"⁄","&weierp;":"℘","&image;":"ℑ","&real;":"ℜ","&trade;":"™","&alefsym;":"ℵ","&larr;":"←","&uarr;":"↑","&rarr;":"→","&darr;":"↓","&harr;":"↔","&crarr;":"↵","&lArr;":"⇐","&uArr;":"⇑","&rArr;":"⇒","&dArr;":"⇓","&hArr;":"⇔","&forall;":"∀","&part;":"∂","&exist;":"∃","&empty;":"∅","&nabla;":"∇","&isin;":"∈","&notin;":"∉","&ni;":"∋","&prod;":"∏","&sum;":"∑","&minus;":"−","&lowast;":"∗","&radic;":"√","&prop;":"∝","&infin;":"∞","&ang;":"∠","&and;":"∧","&or;":"∨","&cap;":"∩","&cup;":"∪","&int;":"∫","&there4;":"∴","&sim;":"∼","&cong;":"≅","&asymp;":"≈","&ne;":"≠","&equiv;":"≡","&le;":"≤","&ge;":"≥","&sub;":"⊂","&sup;":"⊃","&nsub;":"⊄","&sube;":"⊆","&supe;":"⊇","&oplus;":"⊕","&otimes;":"⊗","&perp;":"⊥","&sdot;":"⋅","&lceil;":"⌈","&rceil;":"⌉","&lfloor;":"⌊","&rfloor;":"⌋","&lang;":"〈","&rang;":"〉","&loz;":"◊","&spades;":"♠","&clubs;":"♣","&hearts;":"♥","&diams;":"♦"},characters:{"'":"&apos;"," ":"&nbsp;","¡":"&iexcl;","¢":"&cent;","£":"&pound;","¤":"&curren;","¥":"&yen;","¦":"&brvbar;","§":"&sect;","¨":"&uml;","©":"&copy;","ª":"&ordf;","«":"&laquo;","¬":"&not;","­":"&shy;","®":"&reg;","¯":"&macr;","°":"&deg;","±":"&plusmn;","²":"&sup2;","³":"&sup3;","´":"&acute;","µ":"&micro;","¶":"&para;","·":"&middot;","¸":"&cedil;","¹":"&sup1;","º":"&ordm;","»":"&raquo;","¼":"&frac14;","½":"&frac12;","¾":"&frac34;","¿":"&iquest;","À":"&Agrave;","Á":"&Aacute;","Â":"&Acirc;","Ã":"&Atilde;","Ä":"&Auml;","Å":"&Aring;","Æ":"&AElig;","Ç":"&Ccedil;","È":"&Egrave;","É":"&Eacute;","Ê":"&Ecirc;","Ë":"&Euml;","Ì":"&Igrave;","Í":"&Iacute;","Î":"&Icirc;","Ï":"&Iuml;","Ð":"&ETH;","Ñ":"&Ntilde;","Ò":"&Ograve;","Ó":"&Oacute;","Ô":"&Ocirc;","Õ":"&Otilde;","Ö":"&Ouml;","×":"&times;","Ø":"&Oslash;","Ù":"&Ugrave;","Ú":"&Uacute;","Û":"&Ucirc;","Ü":"&Uuml;","Ý":"&Yacute;","Þ":"&THORN;","ß":"&szlig;","à":"&agrave;","á":"&aacute;","â":"&acirc;","ã":"&atilde;","ä":"&auml;","å":"&aring;","æ":"&aelig;","ç":"&ccedil;","è":"&egrave;","é":"&eacute;","ê":"&ecirc;","ë":"&euml;","ì":"&igrave;","í":"&iacute;","î":"&icirc;","ï":"&iuml;","ð":"&eth;","ñ":"&ntilde;","ò":"&ograve;","ó":"&oacute;","ô":"&ocirc;","õ":"&otilde;","ö":"&ouml;","÷":"&divide;","ø":"&oslash;","ù":"&ugrave;","ú":"&uacute;","û":"&ucirc;","ü":"&uuml;","ý":"&yacute;","þ":"&thorn;","ÿ":"&yuml;",'"':"&quot;","&":"&amp;","<":"&lt;",">":"&gt;","Œ":"&OElig;","œ":"&oelig;","Š":"&Scaron;","š":"&scaron;","Ÿ":"&Yuml;","ˆ":"&circ;","˜":"&tilde;"," ":"&ensp;"," ":"&emsp;"," ":"&thinsp;","‌":"&zwnj;","‍":"&zwj;","‎":"&lrm;","‏":"&rlm;","–":"&ndash;","—":"&mdash;","‘":"&lsquo;","’":"&rsquo;","‚":"&sbquo;","“":"&ldquo;","”":"&rdquo;","„":"&bdquo;","†":"&dagger;","‡":"&Dagger;","‰":"&permil;","‹":"&lsaquo;","›":"&rsaquo;","€":"&euro;","ƒ":"&fnof;","Α":"&Alpha;","Β":"&Beta;","Γ":"&Gamma;","Δ":"&Delta;","Ε":"&Epsilon;","Ζ":"&Zeta;","Η":"&Eta;","Θ":"&Theta;","Ι":"&Iota;","Κ":"&Kappa;","Λ":"&Lambda;","Μ":"&Mu;","Ν":"&Nu;","Ξ":"&Xi;","Ο":"&Omicron;","Π":"&Pi;","Ρ":"&Rho;","Σ":"&Sigma;","Τ":"&Tau;","Υ":"&Upsilon;","Φ":"&Phi;","Χ":"&Chi;","Ψ":"&Psi;","Ω":"&Omega;","α":"&alpha;","β":"&beta;","γ":"&gamma;","δ":"&delta;","ε":"&epsilon;","ζ":"&zeta;","η":"&eta;","θ":"&theta;","ι":"&iota;","κ":"&kappa;","λ":"&lambda;","μ":"&mu;","ν":"&nu;","ξ":"&xi;","ο":"&omicron;","π":"&pi;","ρ":"&rho;","ς":"&sigmaf;","σ":"&sigma;","τ":"&tau;","υ":"&upsilon;","φ":"&phi;","χ":"&chi;","ψ":"&psi;","ω":"&omega;","ϑ":"&thetasym;","ϒ":"&upsih;","ϖ":"&piv;","•":"&bull;","…":"&hellip;","′":"&prime;","″":"&Prime;","‾":"&oline;","⁄":"&frasl;","℘":"&weierp;","ℑ":"&image;","ℜ":"&real;","™":"&trade;","ℵ":"&alefsym;","←":"&larr;","↑":"&uarr;","→":"&rarr;","↓":"&darr;","↔":"&harr;","↵":"&crarr;","⇐":"&lArr;","⇑":"&uArr;","⇒":"&rArr;","⇓":"&dArr;","⇔":"&hArr;","∀":"&forall;","∂":"&part;","∃":"&exist;","∅":"&empty;","∇":"&nabla;","∈":"&isin;","∉":"&notin;","∋":"&ni;","∏":"&prod;","∑":"&sum;","−":"&minus;","∗":"&lowast;","√":"&radic;","∝":"&prop;","∞":"&infin;","∠":"&ang;","∧":"&and;","∨":"&or;","∩":"&cap;","∪":"&cup;","∫":"&int;","∴":"&there4;","∼":"&sim;","≅":"&cong;","≈":"&asymp;","≠":"&ne;","≡":"&equiv;","≤":"&le;","≥":"&ge;","⊂":"&sub;","⊃":"&sup;","⊄":"&nsub;","⊆":"&sube;","⊇":"&supe;","⊕":"&oplus;","⊗":"&otimes;","⊥":"&perp;","⋅":"&sdot;","⌈":"&lceil;","⌉":"&rceil;","⌊":"&lfloor;","⌋":"&rfloor;","〈":"&lang;","〉":"&rang;","◊":"&loz;","♠":"&spades;","♣":"&clubs;","♥":"&hearts;","♦":"&diams;"}},html5:{entities:{"&AElig":"Æ","&AElig;":"Æ","&AMP":"&","&AMP;":"&","&Aacute":"Á","&Aacute;":"Á","&Abreve;":"Ă","&Acirc":"Â","&Acirc;":"Â","&Acy;":"А","&Afr;":"𝔄","&Agrave":"À","&Agrave;":"À","&Alpha;":"Α","&Amacr;":"Ā","&And;":"⩓","&Aogon;":"Ą","&Aopf;":"𝔸","&ApplyFunction;":"⁡","&Aring":"Å","&Aring;":"Å","&Ascr;":"𝒜","&Assign;":"≔","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Backslash;":"∖","&Barv;":"⫧","&Barwed;":"⌆","&Bcy;":"Б","&Because;":"∵","&Bernoullis;":"ℬ","&Beta;":"Β","&Bfr;":"𝔅","&Bopf;":"𝔹","&Breve;":"˘","&Bscr;":"ℬ","&Bumpeq;":"≎","&CHcy;":"Ч","&COPY":"©","&COPY;":"©","&Cacute;":"Ć","&Cap;":"⋒","&CapitalDifferentialD;":"ⅅ","&Cayleys;":"ℭ","&Ccaron;":"Č","&Ccedil":"Ç","&Ccedil;":"Ç","&Ccirc;":"Ĉ","&Cconint;":"∰","&Cdot;":"Ċ","&Cedilla;":"¸","&CenterDot;":"·","&Cfr;":"ℭ","&Chi;":"Χ","&CircleDot;":"⊙","&CircleMinus;":"⊖","&CirclePlus;":"⊕","&CircleTimes;":"⊗","&ClockwiseContourIntegral;":"∲","&CloseCurlyDoubleQuote;":"”","&CloseCurlyQuote;":"’","&Colon;":"∷","&Colone;":"⩴","&Congruent;":"≡","&Conint;":"∯","&ContourIntegral;":"∮","&Copf;":"ℂ","&Coproduct;":"∐","&CounterClockwiseContourIntegral;":"∳","&Cross;":"⨯","&Cscr;":"𝒞","&Cup;":"⋓","&CupCap;":"≍","&DD;":"ⅅ","&DDotrahd;":"⤑","&DJcy;":"Ђ","&DScy;":"Ѕ","&DZcy;":"Џ","&Dagger;":"‡","&Darr;":"↡","&Dashv;":"⫤","&Dcaron;":"Ď","&Dcy;":"Д","&Del;":"∇","&Delta;":"Δ","&Dfr;":"𝔇","&DiacriticalAcute;":"´","&DiacriticalDot;":"˙","&DiacriticalDoubleAcute;":"˝","&DiacriticalGrave;":"`","&DiacriticalTilde;":"˜","&Diamond;":"⋄","&DifferentialD;":"ⅆ","&Dopf;":"𝔻","&Dot;":"¨","&DotDot;":"⃜","&DotEqual;":"≐","&DoubleContourIntegral;":"∯","&DoubleDot;":"¨","&DoubleDownArrow;":"⇓","&DoubleLeftArrow;":"⇐","&DoubleLeftRightArrow;":"⇔","&DoubleLeftTee;":"⫤","&DoubleLongLeftArrow;":"⟸","&DoubleLongLeftRightArrow;":"⟺","&DoubleLongRightArrow;":"⟹","&DoubleRightArrow;":"⇒","&DoubleRightTee;":"⊨","&DoubleUpArrow;":"⇑","&DoubleUpDownArrow;":"⇕","&DoubleVerticalBar;":"∥","&DownArrow;":"↓","&DownArrowBar;":"⤓","&DownArrowUpArrow;":"⇵","&DownBreve;":"̑","&DownLeftRightVector;":"⥐","&DownLeftTeeVector;":"⥞","&DownLeftVector;":"↽","&DownLeftVectorBar;":"⥖","&DownRightTeeVector;":"⥟","&DownRightVector;":"⇁","&DownRightVectorBar;":"⥗","&DownTee;":"⊤","&DownTeeArrow;":"↧","&Downarrow;":"⇓","&Dscr;":"𝒟","&Dstrok;":"Đ","&ENG;":"Ŋ","&ETH":"Ð","&ETH;":"Ð","&Eacute":"É","&Eacute;":"É","&Ecaron;":"Ě","&Ecirc":"Ê","&Ecirc;":"Ê","&Ecy;":"Э","&Edot;":"Ė","&Efr;":"𝔈","&Egrave":"È","&Egrave;":"È","&Element;":"∈","&Emacr;":"Ē","&EmptySmallSquare;":"◻","&EmptyVerySmallSquare;":"▫","&Eogon;":"Ę","&Eopf;":"𝔼","&Epsilon;":"Ε","&Equal;":"⩵","&EqualTilde;":"≂","&Equilibrium;":"⇌","&Escr;":"ℰ","&Esim;":"⩳","&Eta;":"Η","&Euml":"Ë","&Euml;":"Ë","&Exists;":"∃","&ExponentialE;":"ⅇ","&Fcy;":"Ф","&Ffr;":"𝔉","&FilledSmallSquare;":"◼","&FilledVerySmallSquare;":"▪","&Fopf;":"𝔽","&ForAll;":"∀","&Fouriertrf;":"ℱ","&Fscr;":"ℱ","&GJcy;":"Ѓ","&GT":">","&GT;":">","&Gamma;":"Γ","&Gammad;":"Ϝ","&Gbreve;":"Ğ","&Gcedil;":"Ģ","&Gcirc;":"Ĝ","&Gcy;":"Г","&Gdot;":"Ġ","&Gfr;":"𝔊","&Gg;":"⋙","&Gopf;":"𝔾","&GreaterEqual;":"≥","&GreaterEqualLess;":"⋛","&GreaterFullEqual;":"≧","&GreaterGreater;":"⪢","&GreaterLess;":"≷","&GreaterSlantEqual;":"⩾","&GreaterTilde;":"≳","&Gscr;":"𝒢","&Gt;":"≫","&HARDcy;":"Ъ","&Hacek;":"ˇ","&Hat;":"^","&Hcirc;":"Ĥ","&Hfr;":"ℌ","&HilbertSpace;":"ℋ","&Hopf;":"ℍ","&HorizontalLine;":"─","&Hscr;":"ℋ","&Hstrok;":"Ħ","&HumpDownHump;":"≎","&HumpEqual;":"≏","&IEcy;":"Е","&IJlig;":"Ĳ","&IOcy;":"Ё","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Icy;":"И","&Idot;":"İ","&Ifr;":"ℑ","&Igrave":"Ì","&Igrave;":"Ì","&Im;":"ℑ","&Imacr;":"Ī","&ImaginaryI;":"ⅈ","&Implies;":"⇒","&Int;":"∬","&Integral;":"∫","&Intersection;":"⋂","&InvisibleComma;":"⁣","&InvisibleTimes;":"⁢","&Iogon;":"Į","&Iopf;":"𝕀","&Iota;":"Ι","&Iscr;":"ℐ","&Itilde;":"Ĩ","&Iukcy;":"І","&Iuml":"Ï","&Iuml;":"Ï","&Jcirc;":"Ĵ","&Jcy;":"Й","&Jfr;":"𝔍","&Jopf;":"𝕁","&Jscr;":"𝒥","&Jsercy;":"Ј","&Jukcy;":"Є","&KHcy;":"Х","&KJcy;":"Ќ","&Kappa;":"Κ","&Kcedil;":"Ķ","&Kcy;":"К","&Kfr;":"𝔎","&Kopf;":"𝕂","&Kscr;":"𝒦","&LJcy;":"Љ","&LT":"<","&LT;":"<","&Lacute;":"Ĺ","&Lambda;":"Λ","&Lang;":"⟪","&Laplacetrf;":"ℒ","&Larr;":"↞","&Lcaron;":"Ľ","&Lcedil;":"Ļ","&Lcy;":"Л","&LeftAngleBracket;":"⟨","&LeftArrow;":"←","&LeftArrowBar;":"⇤","&LeftArrowRightArrow;":"⇆","&LeftCeiling;":"⌈","&LeftDoubleBracket;":"⟦","&LeftDownTeeVector;":"⥡","&LeftDownVector;":"⇃","&LeftDownVectorBar;":"⥙","&LeftFloor;":"⌊","&LeftRightArrow;":"↔","&LeftRightVector;":"⥎","&LeftTee;":"⊣","&LeftTeeArrow;":"↤","&LeftTeeVector;":"⥚","&LeftTriangle;":"⊲","&LeftTriangleBar;":"⧏","&LeftTriangleEqual;":"⊴","&LeftUpDownVector;":"⥑","&LeftUpTeeVector;":"⥠","&LeftUpVector;":"↿","&LeftUpVectorBar;":"⥘","&LeftVector;":"↼","&LeftVectorBar;":"⥒","&Leftarrow;":"⇐","&Leftrightarrow;":"⇔","&LessEqualGreater;":"⋚","&LessFullEqual;":"≦","&LessGreater;":"≶","&LessLess;":"⪡","&LessSlantEqual;":"⩽","&LessTilde;":"≲","&Lfr;":"𝔏","&Ll;":"⋘","&Lleftarrow;":"⇚","&Lmidot;":"Ŀ","&LongLeftArrow;":"⟵","&LongLeftRightArrow;":"⟷","&LongRightArrow;":"⟶","&Longleftarrow;":"⟸","&Longleftrightarrow;":"⟺","&Longrightarrow;":"⟹","&Lopf;":"𝕃","&LowerLeftArrow;":"↙","&LowerRightArrow;":"↘","&Lscr;":"ℒ","&Lsh;":"↰","&Lstrok;":"Ł","&Lt;":"≪","&Map;":"⤅","&Mcy;":"М","&MediumSpace;":" ","&Mellintrf;":"ℳ","&Mfr;":"𝔐","&MinusPlus;":"∓","&Mopf;":"𝕄","&Mscr;":"ℳ","&Mu;":"Μ","&NJcy;":"Њ","&Nacute;":"Ń","&Ncaron;":"Ň","&Ncedil;":"Ņ","&Ncy;":"Н","&NegativeMediumSpace;":"​","&NegativeThickSpace;":"​","&NegativeThinSpace;":"​","&NegativeVeryThinSpace;":"​","&NestedGreaterGreater;":"≫","&NestedLessLess;":"≪","&NewLine;":"\n","&Nfr;":"𝔑","&NoBreak;":"⁠","&NonBreakingSpace;":" ","&Nopf;":"ℕ","&Not;":"⫬","&NotCongruent;":"≢","&NotCupCap;":"≭","&NotDoubleVerticalBar;":"∦","&NotElement;":"∉","&NotEqual;":"≠","&NotEqualTilde;":"≂̸","&NotExists;":"∄","&NotGreater;":"≯","&NotGreaterEqual;":"≱","&NotGreaterFullEqual;":"≧̸","&NotGreaterGreater;":"≫̸","&NotGreaterLess;":"≹","&NotGreaterSlantEqual;":"⩾̸","&NotGreaterTilde;":"≵","&NotHumpDownHump;":"≎̸","&NotHumpEqual;":"≏̸","&NotLeftTriangle;":"⋪","&NotLeftTriangleBar;":"⧏̸","&NotLeftTriangleEqual;":"⋬","&NotLess;":"≮","&NotLessEqual;":"≰","&NotLessGreater;":"≸","&NotLessLess;":"≪̸","&NotLessSlantEqual;":"⩽̸","&NotLessTilde;":"≴","&NotNestedGreaterGreater;":"⪢̸","&NotNestedLessLess;":"⪡̸","&NotPrecedes;":"⊀","&NotPrecedesEqual;":"⪯̸","&NotPrecedesSlantEqual;":"⋠","&NotReverseElement;":"∌","&NotRightTriangle;":"⋫","&NotRightTriangleBar;":"⧐̸","&NotRightTriangleEqual;":"⋭","&NotSquareSubset;":"⊏̸","&NotSquareSubsetEqual;":"⋢","&NotSquareSuperset;":"⊐̸","&NotSquareSupersetEqual;":"⋣","&NotSubset;":"⊂⃒","&NotSubsetEqual;":"⊈","&NotSucceeds;":"⊁","&NotSucceedsEqual;":"⪰̸","&NotSucceedsSlantEqual;":"⋡","&NotSucceedsTilde;":"≿̸","&NotSuperset;":"⊃⃒","&NotSupersetEqual;":"⊉","&NotTilde;":"≁","&NotTildeEqual;":"≄","&NotTildeFullEqual;":"≇","&NotTildeTilde;":"≉","&NotVerticalBar;":"∤","&Nscr;":"𝒩","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Nu;":"Ν","&OElig;":"Œ","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Ocy;":"О","&Odblac;":"Ő","&Ofr;":"𝔒","&Ograve":"Ò","&Ograve;":"Ò","&Omacr;":"Ō","&Omega;":"Ω","&Omicron;":"Ο","&Oopf;":"𝕆","&OpenCurlyDoubleQuote;":"“","&OpenCurlyQuote;":"‘","&Or;":"⩔","&Oscr;":"𝒪","&Oslash":"Ø","&Oslash;":"Ø","&Otilde":"Õ","&Otilde;":"Õ","&Otimes;":"⨷","&Ouml":"Ö","&Ouml;":"Ö","&OverBar;":"‾","&OverBrace;":"⏞","&OverBracket;":"⎴","&OverParenthesis;":"⏜","&PartialD;":"∂","&Pcy;":"П","&Pfr;":"𝔓","&Phi;":"Φ","&Pi;":"Π","&PlusMinus;":"±","&Poincareplane;":"ℌ","&Popf;":"ℙ","&Pr;":"⪻","&Precedes;":"≺","&PrecedesEqual;":"⪯","&PrecedesSlantEqual;":"≼","&PrecedesTilde;":"≾","&Prime;":"″","&Product;":"∏","&Proportion;":"∷","&Proportional;":"∝","&Pscr;":"𝒫","&Psi;":"Ψ","&QUOT":'"',"&QUOT;":'"',"&Qfr;":"𝔔","&Qopf;":"ℚ","&Qscr;":"𝒬","&RBarr;":"⤐","&REG":"®","&REG;":"®","&Racute;":"Ŕ","&Rang;":"⟫","&Rarr;":"↠","&Rarrtl;":"⤖","&Rcaron;":"Ř","&Rcedil;":"Ŗ","&Rcy;":"Р","&Re;":"ℜ","&ReverseElement;":"∋","&ReverseEquilibrium;":"⇋","&ReverseUpEquilibrium;":"⥯","&Rfr;":"ℜ","&Rho;":"Ρ","&RightAngleBracket;":"⟩","&RightArrow;":"→","&RightArrowBar;":"⇥","&RightArrowLeftArrow;":"⇄","&RightCeiling;":"⌉","&RightDoubleBracket;":"⟧","&RightDownTeeVector;":"⥝","&RightDownVector;":"⇂","&RightDownVectorBar;":"⥕","&RightFloor;":"⌋","&RightTee;":"⊢","&RightTeeArrow;":"↦","&RightTeeVector;":"⥛","&RightTriangle;":"⊳","&RightTriangleBar;":"⧐","&RightTriangleEqual;":"⊵","&RightUpDownVector;":"⥏","&RightUpTeeVector;":"⥜","&RightUpVector;":"↾","&RightUpVectorBar;":"⥔","&RightVector;":"⇀","&RightVectorBar;":"⥓","&Rightarrow;":"⇒","&Ropf;":"ℝ","&RoundImplies;":"⥰","&Rrightarrow;":"⇛","&Rscr;":"ℛ","&Rsh;":"↱","&RuleDelayed;":"⧴","&SHCHcy;":"Щ","&SHcy;":"Ш","&SOFTcy;":"Ь","&Sacute;":"Ś","&Sc;":"⪼","&Scaron;":"Š","&Scedil;":"Ş","&Scirc;":"Ŝ","&Scy;":"С","&Sfr;":"𝔖","&ShortDownArrow;":"↓","&ShortLeftArrow;":"←","&ShortRightArrow;":"→","&ShortUpArrow;":"↑","&Sigma;":"Σ","&SmallCircle;":"∘","&Sopf;":"𝕊","&Sqrt;":"√","&Square;":"□","&SquareIntersection;":"⊓","&SquareSubset;":"⊏","&SquareSubsetEqual;":"⊑","&SquareSuperset;":"⊐","&SquareSupersetEqual;":"⊒","&SquareUnion;":"⊔","&Sscr;":"𝒮","&Star;":"⋆","&Sub;":"⋐","&Subset;":"⋐","&SubsetEqual;":"⊆","&Succeeds;":"≻","&SucceedsEqual;":"⪰","&SucceedsSlantEqual;":"≽","&SucceedsTilde;":"≿","&SuchThat;":"∋","&Sum;":"∑","&Sup;":"⋑","&Superset;":"⊃","&SupersetEqual;":"⊇","&Supset;":"⋑","&THORN":"Þ","&THORN;":"Þ","&TRADE;":"™","&TSHcy;":"Ћ","&TScy;":"Ц","&Tab;":"\t","&Tau;":"Τ","&Tcaron;":"Ť","&Tcedil;":"Ţ","&Tcy;":"Т","&Tfr;":"𝔗","&Therefore;":"∴","&Theta;":"Θ","&ThickSpace;":"  ","&ThinSpace;":" ","&Tilde;":"∼","&TildeEqual;":"≃","&TildeFullEqual;":"≅","&TildeTilde;":"≈","&Topf;":"𝕋","&TripleDot;":"⃛","&Tscr;":"𝒯","&Tstrok;":"Ŧ","&Uacute":"Ú","&Uacute;":"Ú","&Uarr;":"↟","&Uarrocir;":"⥉","&Ubrcy;":"Ў","&Ubreve;":"Ŭ","&Ucirc":"Û","&Ucirc;":"Û","&Ucy;":"У","&Udblac;":"Ű","&Ufr;":"𝔘","&Ugrave":"Ù","&Ugrave;":"Ù","&Umacr;":"Ū","&UnderBar;":"_","&UnderBrace;":"⏟","&UnderBracket;":"⎵","&UnderParenthesis;":"⏝","&Union;":"⋃","&UnionPlus;":"⊎","&Uogon;":"Ų","&Uopf;":"𝕌","&UpArrow;":"↑","&UpArrowBar;":"⤒","&UpArrowDownArrow;":"⇅","&UpDownArrow;":"↕","&UpEquilibrium;":"⥮","&UpTee;":"⊥","&UpTeeArrow;":"↥","&Uparrow;":"⇑","&Updownarrow;":"⇕","&UpperLeftArrow;":"↖","&UpperRightArrow;":"↗","&Upsi;":"ϒ","&Upsilon;":"Υ","&Uring;":"Ů","&Uscr;":"𝒰","&Utilde;":"Ũ","&Uuml":"Ü","&Uuml;":"Ü","&VDash;":"⊫","&Vbar;":"⫫","&Vcy;":"В","&Vdash;":"⊩","&Vdashl;":"⫦","&Vee;":"⋁","&Verbar;":"‖","&Vert;":"‖","&VerticalBar;":"∣","&VerticalLine;":"|","&VerticalSeparator;":"❘","&VerticalTilde;":"≀","&VeryThinSpace;":" ","&Vfr;":"𝔙","&Vopf;":"𝕍","&Vscr;":"𝒱","&Vvdash;":"⊪","&Wcirc;":"Ŵ","&Wedge;":"⋀","&Wfr;":"𝔚","&Wopf;":"𝕎","&Wscr;":"𝒲","&Xfr;":"𝔛","&Xi;":"Ξ","&Xopf;":"𝕏","&Xscr;":"𝒳","&YAcy;":"Я","&YIcy;":"Ї","&YUcy;":"Ю","&Yacute":"Ý","&Yacute;":"Ý","&Ycirc;":"Ŷ","&Ycy;":"Ы","&Yfr;":"𝔜","&Yopf;":"𝕐","&Yscr;":"𝒴","&Yuml;":"Ÿ","&ZHcy;":"Ж","&Zacute;":"Ź","&Zcaron;":"Ž","&Zcy;":"З","&Zdot;":"Ż","&ZeroWidthSpace;":"​","&Zeta;":"Ζ","&Zfr;":"ℨ","&Zopf;":"ℤ","&Zscr;":"𝒵","&aacute":"á","&aacute;":"á","&abreve;":"ă","&ac;":"∾","&acE;":"∾̳","&acd;":"∿","&acirc":"â","&acirc;":"â","&acute":"´","&acute;":"´","&acy;":"а","&aelig":"æ","&aelig;":"æ","&af;":"⁡","&afr;":"𝔞","&agrave":"à","&agrave;":"à","&alefsym;":"ℵ","&aleph;":"ℵ","&alpha;":"α","&amacr;":"ā","&amalg;":"⨿","&amp":"&","&amp;":"&","&and;":"∧","&andand;":"⩕","&andd;":"⩜","&andslope;":"⩘","&andv;":"⩚","&ang;":"∠","&ange;":"⦤","&angle;":"∠","&angmsd;":"∡","&angmsdaa;":"⦨","&angmsdab;":"⦩","&angmsdac;":"⦪","&angmsdad;":"⦫","&angmsdae;":"⦬","&angmsdaf;":"⦭","&angmsdag;":"⦮","&angmsdah;":"⦯","&angrt;":"∟","&angrtvb;":"⊾","&angrtvbd;":"⦝","&angsph;":"∢","&angst;":"Å","&angzarr;":"⍼","&aogon;":"ą","&aopf;":"𝕒","&ap;":"≈","&apE;":"⩰","&apacir;":"⩯","&ape;":"≊","&apid;":"≋","&apos;":"'","&approx;":"≈","&approxeq;":"≊","&aring":"å","&aring;":"å","&ascr;":"𝒶","&ast;":"*","&asymp;":"≈","&asympeq;":"≍","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&awconint;":"∳","&awint;":"⨑","&bNot;":"⫭","&backcong;":"≌","&backepsilon;":"϶","&backprime;":"‵","&backsim;":"∽","&backsimeq;":"⋍","&barvee;":"⊽","&barwed;":"⌅","&barwedge;":"⌅","&bbrk;":"⎵","&bbrktbrk;":"⎶","&bcong;":"≌","&bcy;":"б","&bdquo;":"„","&becaus;":"∵","&because;":"∵","&bemptyv;":"⦰","&bepsi;":"϶","&bernou;":"ℬ","&beta;":"β","&beth;":"ℶ","&between;":"≬","&bfr;":"𝔟","&bigcap;":"⋂","&bigcirc;":"◯","&bigcup;":"⋃","&bigodot;":"⨀","&bigoplus;":"⨁","&bigotimes;":"⨂","&bigsqcup;":"⨆","&bigstar;":"★","&bigtriangledown;":"▽","&bigtriangleup;":"△","&biguplus;":"⨄","&bigvee;":"⋁","&bigwedge;":"⋀","&bkarow;":"⤍","&blacklozenge;":"⧫","&blacksquare;":"▪","&blacktriangle;":"▴","&blacktriangledown;":"▾","&blacktriangleleft;":"◂","&blacktriangleright;":"▸","&blank;":"␣","&blk12;":"▒","&blk14;":"░","&blk34;":"▓","&block;":"█","&bne;":"=⃥","&bnequiv;":"≡⃥","&bnot;":"⌐","&bopf;":"𝕓","&bot;":"⊥","&bottom;":"⊥","&bowtie;":"⋈","&boxDL;":"╗","&boxDR;":"╔","&boxDl;":"╖","&boxDr;":"╓","&boxH;":"═","&boxHD;":"╦","&boxHU;":"╩","&boxHd;":"╤","&boxHu;":"╧","&boxUL;":"╝","&boxUR;":"╚","&boxUl;":"╜","&boxUr;":"╙","&boxV;":"║","&boxVH;":"╬","&boxVL;":"╣","&boxVR;":"╠","&boxVh;":"╫","&boxVl;":"╢","&boxVr;":"╟","&boxbox;":"⧉","&boxdL;":"╕","&boxdR;":"╒","&boxdl;":"┐","&boxdr;":"┌","&boxh;":"─","&boxhD;":"╥","&boxhU;":"╨","&boxhd;":"┬","&boxhu;":"┴","&boxminus;":"⊟","&boxplus;":"⊞","&boxtimes;":"⊠","&boxuL;":"╛","&boxuR;":"╘","&boxul;":"┘","&boxur;":"└","&boxv;":"│","&boxvH;":"╪","&boxvL;":"╡","&boxvR;":"╞","&boxvh;":"┼","&boxvl;":"┤","&boxvr;":"├","&bprime;":"‵","&breve;":"˘","&brvbar":"¦","&brvbar;":"¦","&bscr;":"𝒷","&bsemi;":"⁏","&bsim;":"∽","&bsime;":"⋍","&bsol;":"\\","&bsolb;":"⧅","&bsolhsub;":"⟈","&bull;":"•","&bullet;":"•","&bump;":"≎","&bumpE;":"⪮","&bumpe;":"≏","&bumpeq;":"≏","&cacute;":"ć","&cap;":"∩","&capand;":"⩄","&capbrcup;":"⩉","&capcap;":"⩋","&capcup;":"⩇","&capdot;":"⩀","&caps;":"∩︀","&caret;":"⁁","&caron;":"ˇ","&ccaps;":"⩍","&ccaron;":"č","&ccedil":"ç","&ccedil;":"ç","&ccirc;":"ĉ","&ccups;":"⩌","&ccupssm;":"⩐","&cdot;":"ċ","&cedil":"¸","&cedil;":"¸","&cemptyv;":"⦲","&cent":"¢","&cent;":"¢","&centerdot;":"·","&cfr;":"𝔠","&chcy;":"ч","&check;":"✓","&checkmark;":"✓","&chi;":"χ","&cir;":"○","&cirE;":"⧃","&circ;":"ˆ","&circeq;":"≗","&circlearrowleft;":"↺","&circlearrowright;":"↻","&circledR;":"®","&circledS;":"Ⓢ","&circledast;":"⊛","&circledcirc;":"⊚","&circleddash;":"⊝","&cire;":"≗","&cirfnint;":"⨐","&cirmid;":"⫯","&cirscir;":"⧂","&clubs;":"♣","&clubsuit;":"♣","&colon;":":","&colone;":"≔","&coloneq;":"≔","&comma;":",","&commat;":"@","&comp;":"∁","&compfn;":"∘","&complement;":"∁","&complexes;":"ℂ","&cong;":"≅","&congdot;":"⩭","&conint;":"∮","&copf;":"𝕔","&coprod;":"∐","&copy":"©","&copy;":"©","&copysr;":"℗","&crarr;":"↵","&cross;":"✗","&cscr;":"𝒸","&csub;":"⫏","&csube;":"⫑","&csup;":"⫐","&csupe;":"⫒","&ctdot;":"⋯","&cudarrl;":"⤸","&cudarrr;":"⤵","&cuepr;":"⋞","&cuesc;":"⋟","&cularr;":"↶","&cularrp;":"⤽","&cup;":"∪","&cupbrcap;":"⩈","&cupcap;":"⩆","&cupcup;":"⩊","&cupdot;":"⊍","&cupor;":"⩅","&cups;":"∪︀","&curarr;":"↷","&curarrm;":"⤼","&curlyeqprec;":"⋞","&curlyeqsucc;":"⋟","&curlyvee;":"⋎","&curlywedge;":"⋏","&curren":"¤","&curren;":"¤","&curvearrowleft;":"↶","&curvearrowright;":"↷","&cuvee;":"⋎","&cuwed;":"⋏","&cwconint;":"∲","&cwint;":"∱","&cylcty;":"⌭","&dArr;":"⇓","&dHar;":"⥥","&dagger;":"†","&daleth;":"ℸ","&darr;":"↓","&dash;":"‐","&dashv;":"⊣","&dbkarow;":"⤏","&dblac;":"˝","&dcaron;":"ď","&dcy;":"д","&dd;":"ⅆ","&ddagger;":"‡","&ddarr;":"⇊","&ddotseq;":"⩷","&deg":"°","&deg;":"°","&delta;":"δ","&demptyv;":"⦱","&dfisht;":"⥿","&dfr;":"𝔡","&dharl;":"⇃","&dharr;":"⇂","&diam;":"⋄","&diamond;":"⋄","&diamondsuit;":"♦","&diams;":"♦","&die;":"¨","&digamma;":"ϝ","&disin;":"⋲","&div;":"÷","&divide":"÷","&divide;":"÷","&divideontimes;":"⋇","&divonx;":"⋇","&djcy;":"ђ","&dlcorn;":"⌞","&dlcrop;":"⌍","&dollar;":"$","&dopf;":"𝕕","&dot;":"˙","&doteq;":"≐","&doteqdot;":"≑","&dotminus;":"∸","&dotplus;":"∔","&dotsquare;":"⊡","&doublebarwedge;":"⌆","&downarrow;":"↓","&downdownarrows;":"⇊","&downharpoonleft;":"⇃","&downharpoonright;":"⇂","&drbkarow;":"⤐","&drcorn;":"⌟","&drcrop;":"⌌","&dscr;":"𝒹","&dscy;":"ѕ","&dsol;":"⧶","&dstrok;":"đ","&dtdot;":"⋱","&dtri;":"▿","&dtrif;":"▾","&duarr;":"⇵","&duhar;":"⥯","&dwangle;":"⦦","&dzcy;":"џ","&dzigrarr;":"⟿","&eDDot;":"⩷","&eDot;":"≑","&eacute":"é","&eacute;":"é","&easter;":"⩮","&ecaron;":"ě","&ecir;":"≖","&ecirc":"ê","&ecirc;":"ê","&ecolon;":"≕","&ecy;":"э","&edot;":"ė","&ee;":"ⅇ","&efDot;":"≒","&efr;":"𝔢","&eg;":"⪚","&egrave":"è","&egrave;":"è","&egs;":"⪖","&egsdot;":"⪘","&el;":"⪙","&elinters;":"⏧","&ell;":"ℓ","&els;":"⪕","&elsdot;":"⪗","&emacr;":"ē","&empty;":"∅","&emptyset;":"∅","&emptyv;":"∅","&emsp13;":" ","&emsp14;":" ","&emsp;":" ","&eng;":"ŋ","&ensp;":" ","&eogon;":"ę","&eopf;":"𝕖","&epar;":"⋕","&eparsl;":"⧣","&eplus;":"⩱","&epsi;":"ε","&epsilon;":"ε","&epsiv;":"ϵ","&eqcirc;":"≖","&eqcolon;":"≕","&eqsim;":"≂","&eqslantgtr;":"⪖","&eqslantless;":"⪕","&equals;":"=","&equest;":"≟","&equiv;":"≡","&equivDD;":"⩸","&eqvparsl;":"⧥","&erDot;":"≓","&erarr;":"⥱","&escr;":"ℯ","&esdot;":"≐","&esim;":"≂","&eta;":"η","&eth":"ð","&eth;":"ð","&euml":"ë","&euml;":"ë","&euro;":"€","&excl;":"!","&exist;":"∃","&expectation;":"ℰ","&exponentiale;":"ⅇ","&fallingdotseq;":"≒","&fcy;":"ф","&female;":"♀","&ffilig;":"ﬃ","&fflig;":"ﬀ","&ffllig;":"ﬄ","&ffr;":"𝔣","&filig;":"ﬁ","&fjlig;":"fj","&flat;":"♭","&fllig;":"ﬂ","&fltns;":"▱","&fnof;":"ƒ","&fopf;":"𝕗","&forall;":"∀","&fork;":"⋔","&forkv;":"⫙","&fpartint;":"⨍","&frac12":"½","&frac12;":"½","&frac13;":"⅓","&frac14":"¼","&frac14;":"¼","&frac15;":"⅕","&frac16;":"⅙","&frac18;":"⅛","&frac23;":"⅔","&frac25;":"⅖","&frac34":"¾","&frac34;":"¾","&frac35;":"⅗","&frac38;":"⅜","&frac45;":"⅘","&frac56;":"⅚","&frac58;":"⅝","&frac78;":"⅞","&frasl;":"⁄","&frown;":"⌢","&fscr;":"𝒻","&gE;":"≧","&gEl;":"⪌","&gacute;":"ǵ","&gamma;":"γ","&gammad;":"ϝ","&gap;":"⪆","&gbreve;":"ğ","&gcirc;":"ĝ","&gcy;":"г","&gdot;":"ġ","&ge;":"≥","&gel;":"⋛","&geq;":"≥","&geqq;":"≧","&geqslant;":"⩾","&ges;":"⩾","&gescc;":"⪩","&gesdot;":"⪀","&gesdoto;":"⪂","&gesdotol;":"⪄","&gesl;":"⋛︀","&gesles;":"⪔","&gfr;":"𝔤","&gg;":"≫","&ggg;":"⋙","&gimel;":"ℷ","&gjcy;":"ѓ","&gl;":"≷","&glE;":"⪒","&gla;":"⪥","&glj;":"⪤","&gnE;":"≩","&gnap;":"⪊","&gnapprox;":"⪊","&gne;":"⪈","&gneq;":"⪈","&gneqq;":"≩","&gnsim;":"⋧","&gopf;":"𝕘","&grave;":"`","&gscr;":"ℊ","&gsim;":"≳","&gsime;":"⪎","&gsiml;":"⪐","&gt":">","&gt;":">","&gtcc;":"⪧","&gtcir;":"⩺","&gtdot;":"⋗","&gtlPar;":"⦕","&gtquest;":"⩼","&gtrapprox;":"⪆","&gtrarr;":"⥸","&gtrdot;":"⋗","&gtreqless;":"⋛","&gtreqqless;":"⪌","&gtrless;":"≷","&gtrsim;":"≳","&gvertneqq;":"≩︀","&gvnE;":"≩︀","&hArr;":"⇔","&hairsp;":" ","&half;":"½","&hamilt;":"ℋ","&hardcy;":"ъ","&harr;":"↔","&harrcir;":"⥈","&harrw;":"↭","&hbar;":"ℏ","&hcirc;":"ĥ","&hearts;":"♥","&heartsuit;":"♥","&hellip;":"…","&hercon;":"⊹","&hfr;":"𝔥","&hksearow;":"⤥","&hkswarow;":"⤦","&hoarr;":"⇿","&homtht;":"∻","&hookleftarrow;":"↩","&hookrightarrow;":"↪","&hopf;":"𝕙","&horbar;":"―","&hscr;":"𝒽","&hslash;":"ℏ","&hstrok;":"ħ","&hybull;":"⁃","&hyphen;":"‐","&iacute":"í","&iacute;":"í","&ic;":"⁣","&icirc":"î","&icirc;":"î","&icy;":"и","&iecy;":"е","&iexcl":"¡","&iexcl;":"¡","&iff;":"⇔","&ifr;":"𝔦","&igrave":"ì","&igrave;":"ì","&ii;":"ⅈ","&iiiint;":"⨌","&iiint;":"∭","&iinfin;":"⧜","&iiota;":"℩","&ijlig;":"ĳ","&imacr;":"ī","&image;":"ℑ","&imagline;":"ℐ","&imagpart;":"ℑ","&imath;":"ı","&imof;":"⊷","&imped;":"Ƶ","&in;":"∈","&incare;":"℅","&infin;":"∞","&infintie;":"⧝","&inodot;":"ı","&int;":"∫","&intcal;":"⊺","&integers;":"ℤ","&intercal;":"⊺","&intlarhk;":"⨗","&intprod;":"⨼","&iocy;":"ё","&iogon;":"į","&iopf;":"𝕚","&iota;":"ι","&iprod;":"⨼","&iquest":"¿","&iquest;":"¿","&iscr;":"𝒾","&isin;":"∈","&isinE;":"⋹","&isindot;":"⋵","&isins;":"⋴","&isinsv;":"⋳","&isinv;":"∈","&it;":"⁢","&itilde;":"ĩ","&iukcy;":"і","&iuml":"ï","&iuml;":"ï","&jcirc;":"ĵ","&jcy;":"й","&jfr;":"𝔧","&jmath;":"ȷ","&jopf;":"𝕛","&jscr;":"𝒿","&jsercy;":"ј","&jukcy;":"є","&kappa;":"κ","&kappav;":"ϰ","&kcedil;":"ķ","&kcy;":"к","&kfr;":"𝔨","&kgreen;":"ĸ","&khcy;":"х","&kjcy;":"ќ","&kopf;":"𝕜","&kscr;":"𝓀","&lAarr;":"⇚","&lArr;":"⇐","&lAtail;":"⤛","&lBarr;":"⤎","&lE;":"≦","&lEg;":"⪋","&lHar;":"⥢","&lacute;":"ĺ","&laemptyv;":"⦴","&lagran;":"ℒ","&lambda;":"λ","&lang;":"⟨","&langd;":"⦑","&langle;":"⟨","&lap;":"⪅","&laquo":"«","&laquo;":"«","&larr;":"←","&larrb;":"⇤","&larrbfs;":"⤟","&larrfs;":"⤝","&larrhk;":"↩","&larrlp;":"↫","&larrpl;":"⤹","&larrsim;":"⥳","&larrtl;":"↢","&lat;":"⪫","&latail;":"⤙","&late;":"⪭","&lates;":"⪭︀","&lbarr;":"⤌","&lbbrk;":"❲","&lbrace;":"{","&lbrack;":"[","&lbrke;":"⦋","&lbrksld;":"⦏","&lbrkslu;":"⦍","&lcaron;":"ľ","&lcedil;":"ļ","&lceil;":"⌈","&lcub;":"{","&lcy;":"л","&ldca;":"⤶","&ldquo;":"“","&ldquor;":"„","&ldrdhar;":"⥧","&ldrushar;":"⥋","&ldsh;":"↲","&le;":"≤","&leftarrow;":"←","&leftarrowtail;":"↢","&leftharpoondown;":"↽","&leftharpoonup;":"↼","&leftleftarrows;":"⇇","&leftrightarrow;":"↔","&leftrightarrows;":"⇆","&leftrightharpoons;":"⇋","&leftrightsquigarrow;":"↭","&leftthreetimes;":"⋋","&leg;":"⋚","&leq;":"≤","&leqq;":"≦","&leqslant;":"⩽","&les;":"⩽","&lescc;":"⪨","&lesdot;":"⩿","&lesdoto;":"⪁","&lesdotor;":"⪃","&lesg;":"⋚︀","&lesges;":"⪓","&lessapprox;":"⪅","&lessdot;":"⋖","&lesseqgtr;":"⋚","&lesseqqgtr;":"⪋","&lessgtr;":"≶","&lesssim;":"≲","&lfisht;":"⥼","&lfloor;":"⌊","&lfr;":"𝔩","&lg;":"≶","&lgE;":"⪑","&lhard;":"↽","&lharu;":"↼","&lharul;":"⥪","&lhblk;":"▄","&ljcy;":"љ","&ll;":"≪","&llarr;":"⇇","&llcorner;":"⌞","&llhard;":"⥫","&lltri;":"◺","&lmidot;":"ŀ","&lmoust;":"⎰","&lmoustache;":"⎰","&lnE;":"≨","&lnap;":"⪉","&lnapprox;":"⪉","&lne;":"⪇","&lneq;":"⪇","&lneqq;":"≨","&lnsim;":"⋦","&loang;":"⟬","&loarr;":"⇽","&lobrk;":"⟦","&longleftarrow;":"⟵","&longleftrightarrow;":"⟷","&longmapsto;":"⟼","&longrightarrow;":"⟶","&looparrowleft;":"↫","&looparrowright;":"↬","&lopar;":"⦅","&lopf;":"𝕝","&loplus;":"⨭","&lotimes;":"⨴","&lowast;":"∗","&lowbar;":"_","&loz;":"◊","&lozenge;":"◊","&lozf;":"⧫","&lpar;":"(","&lparlt;":"⦓","&lrarr;":"⇆","&lrcorner;":"⌟","&lrhar;":"⇋","&lrhard;":"⥭","&lrm;":"‎","&lrtri;":"⊿","&lsaquo;":"‹","&lscr;":"𝓁","&lsh;":"↰","&lsim;":"≲","&lsime;":"⪍","&lsimg;":"⪏","&lsqb;":"[","&lsquo;":"‘","&lsquor;":"‚","&lstrok;":"ł","&lt":"<","&lt;":"<","&ltcc;":"⪦","&ltcir;":"⩹","&ltdot;":"⋖","&lthree;":"⋋","&ltimes;":"⋉","&ltlarr;":"⥶","&ltquest;":"⩻","&ltrPar;":"⦖","&ltri;":"◃","&ltrie;":"⊴","&ltrif;":"◂","&lurdshar;":"⥊","&luruhar;":"⥦","&lvertneqq;":"≨︀","&lvnE;":"≨︀","&mDDot;":"∺","&macr":"¯","&macr;":"¯","&male;":"♂","&malt;":"✠","&maltese;":"✠","&map;":"↦","&mapsto;":"↦","&mapstodown;":"↧","&mapstoleft;":"↤","&mapstoup;":"↥","&marker;":"▮","&mcomma;":"⨩","&mcy;":"м","&mdash;":"—","&measuredangle;":"∡","&mfr;":"𝔪","&mho;":"℧","&micro":"µ","&micro;":"µ","&mid;":"∣","&midast;":"*","&midcir;":"⫰","&middot":"·","&middot;":"·","&minus;":"−","&minusb;":"⊟","&minusd;":"∸","&minusdu;":"⨪","&mlcp;":"⫛","&mldr;":"…","&mnplus;":"∓","&models;":"⊧","&mopf;":"𝕞","&mp;":"∓","&mscr;":"𝓂","&mstpos;":"∾","&mu;":"μ","&multimap;":"⊸","&mumap;":"⊸","&nGg;":"⋙̸","&nGt;":"≫⃒","&nGtv;":"≫̸","&nLeftarrow;":"⇍","&nLeftrightarrow;":"⇎","&nLl;":"⋘̸","&nLt;":"≪⃒","&nLtv;":"≪̸","&nRightarrow;":"⇏","&nVDash;":"⊯","&nVdash;":"⊮","&nabla;":"∇","&nacute;":"ń","&nang;":"∠⃒","&nap;":"≉","&napE;":"⩰̸","&napid;":"≋̸","&napos;":"ŉ","&napprox;":"≉","&natur;":"♮","&natural;":"♮","&naturals;":"ℕ","&nbsp":" ","&nbsp;":" ","&nbump;":"≎̸","&nbumpe;":"≏̸","&ncap;":"⩃","&ncaron;":"ň","&ncedil;":"ņ","&ncong;":"≇","&ncongdot;":"⩭̸","&ncup;":"⩂","&ncy;":"н","&ndash;":"–","&ne;":"≠","&neArr;":"⇗","&nearhk;":"⤤","&nearr;":"↗","&nearrow;":"↗","&nedot;":"≐̸","&nequiv;":"≢","&nesear;":"⤨","&nesim;":"≂̸","&nexist;":"∄","&nexists;":"∄","&nfr;":"𝔫","&ngE;":"≧̸","&nge;":"≱","&ngeq;":"≱","&ngeqq;":"≧̸","&ngeqslant;":"⩾̸","&nges;":"⩾̸","&ngsim;":"≵","&ngt;":"≯","&ngtr;":"≯","&nhArr;":"⇎","&nharr;":"↮","&nhpar;":"⫲","&ni;":"∋","&nis;":"⋼","&nisd;":"⋺","&niv;":"∋","&njcy;":"њ","&nlArr;":"⇍","&nlE;":"≦̸","&nlarr;":"↚","&nldr;":"‥","&nle;":"≰","&nleftarrow;":"↚","&nleftrightarrow;":"↮","&nleq;":"≰","&nleqq;":"≦̸","&nleqslant;":"⩽̸","&nles;":"⩽̸","&nless;":"≮","&nlsim;":"≴","&nlt;":"≮","&nltri;":"⋪","&nltrie;":"⋬","&nmid;":"∤","&nopf;":"𝕟","&not":"¬","&not;":"¬","&notin;":"∉","&notinE;":"⋹̸","&notindot;":"⋵̸","&notinva;":"∉","&notinvb;":"⋷","&notinvc;":"⋶","&notni;":"∌","&notniva;":"∌","&notnivb;":"⋾","&notnivc;":"⋽","&npar;":"∦","&nparallel;":"∦","&nparsl;":"⫽⃥","&npart;":"∂̸","&npolint;":"⨔","&npr;":"⊀","&nprcue;":"⋠","&npre;":"⪯̸","&nprec;":"⊀","&npreceq;":"⪯̸","&nrArr;":"⇏","&nrarr;":"↛","&nrarrc;":"⤳̸","&nrarrw;":"↝̸","&nrightarrow;":"↛","&nrtri;":"⋫","&nrtrie;":"⋭","&nsc;":"⊁","&nsccue;":"⋡","&nsce;":"⪰̸","&nscr;":"𝓃","&nshortmid;":"∤","&nshortparallel;":"∦","&nsim;":"≁","&nsime;":"≄","&nsimeq;":"≄","&nsmid;":"∤","&nspar;":"∦","&nsqsube;":"⋢","&nsqsupe;":"⋣","&nsub;":"⊄","&nsubE;":"⫅̸","&nsube;":"⊈","&nsubset;":"⊂⃒","&nsubseteq;":"⊈","&nsubseteqq;":"⫅̸","&nsucc;":"⊁","&nsucceq;":"⪰̸","&nsup;":"⊅","&nsupE;":"⫆̸","&nsupe;":"⊉","&nsupset;":"⊃⃒","&nsupseteq;":"⊉","&nsupseteqq;":"⫆̸","&ntgl;":"≹","&ntilde":"ñ","&ntilde;":"ñ","&ntlg;":"≸","&ntriangleleft;":"⋪","&ntrianglelefteq;":"⋬","&ntriangleright;":"⋫","&ntrianglerighteq;":"⋭","&nu;":"ν","&num;":"#","&numero;":"№","&numsp;":" ","&nvDash;":"⊭","&nvHarr;":"⤄","&nvap;":"≍⃒","&nvdash;":"⊬","&nvge;":"≥⃒","&nvgt;":">⃒","&nvinfin;":"⧞","&nvlArr;":"⤂","&nvle;":"≤⃒","&nvlt;":"<⃒","&nvltrie;":"⊴⃒","&nvrArr;":"⤃","&nvrtrie;":"⊵⃒","&nvsim;":"∼⃒","&nwArr;":"⇖","&nwarhk;":"⤣","&nwarr;":"↖","&nwarrow;":"↖","&nwnear;":"⤧","&oS;":"Ⓢ","&oacute":"ó","&oacute;":"ó","&oast;":"⊛","&ocir;":"⊚","&ocirc":"ô","&ocirc;":"ô","&ocy;":"о","&odash;":"⊝","&odblac;":"ő","&odiv;":"⨸","&odot;":"⊙","&odsold;":"⦼","&oelig;":"œ","&ofcir;":"⦿","&ofr;":"𝔬","&ogon;":"˛","&ograve":"ò","&ograve;":"ò","&ogt;":"⧁","&ohbar;":"⦵","&ohm;":"Ω","&oint;":"∮","&olarr;":"↺","&olcir;":"⦾","&olcross;":"⦻","&oline;":"‾","&olt;":"⧀","&omacr;":"ō","&omega;":"ω","&omicron;":"ο","&omid;":"⦶","&ominus;":"⊖","&oopf;":"𝕠","&opar;":"⦷","&operp;":"⦹","&oplus;":"⊕","&or;":"∨","&orarr;":"↻","&ord;":"⩝","&order;":"ℴ","&orderof;":"ℴ","&ordf":"ª","&ordf;":"ª","&ordm":"º","&ordm;":"º","&origof;":"⊶","&oror;":"⩖","&orslope;":"⩗","&orv;":"⩛","&oscr;":"ℴ","&oslash":"ø","&oslash;":"ø","&osol;":"⊘","&otilde":"õ","&otilde;":"õ","&otimes;":"⊗","&otimesas;":"⨶","&ouml":"ö","&ouml;":"ö","&ovbar;":"⌽","&par;":"∥","&para":"¶","&para;":"¶","&parallel;":"∥","&parsim;":"⫳","&parsl;":"⫽","&part;":"∂","&pcy;":"п","&percnt;":"%","&period;":".","&permil;":"‰","&perp;":"⊥","&pertenk;":"‱","&pfr;":"𝔭","&phi;":"φ","&phiv;":"ϕ","&phmmat;":"ℳ","&phone;":"☎","&pi;":"π","&pitchfork;":"⋔","&piv;":"ϖ","&planck;":"ℏ","&planckh;":"ℎ","&plankv;":"ℏ","&plus;":"+","&plusacir;":"⨣","&plusb;":"⊞","&pluscir;":"⨢","&plusdo;":"∔","&plusdu;":"⨥","&pluse;":"⩲","&plusmn":"±","&plusmn;":"±","&plussim;":"⨦","&plustwo;":"⨧","&pm;":"±","&pointint;":"⨕","&popf;":"𝕡","&pound":"£","&pound;":"£","&pr;":"≺","&prE;":"⪳","&prap;":"⪷","&prcue;":"≼","&pre;":"⪯","&prec;":"≺","&precapprox;":"⪷","&preccurlyeq;":"≼","&preceq;":"⪯","&precnapprox;":"⪹","&precneqq;":"⪵","&precnsim;":"⋨","&precsim;":"≾","&prime;":"′","&primes;":"ℙ","&prnE;":"⪵","&prnap;":"⪹","&prnsim;":"⋨","&prod;":"∏","&profalar;":"⌮","&profline;":"⌒","&profsurf;":"⌓","&prop;":"∝","&propto;":"∝","&prsim;":"≾","&prurel;":"⊰","&pscr;":"𝓅","&psi;":"ψ","&puncsp;":" ","&qfr;":"𝔮","&qint;":"⨌","&qopf;":"𝕢","&qprime;":"⁗","&qscr;":"𝓆","&quaternions;":"ℍ","&quatint;":"⨖","&quest;":"?","&questeq;":"≟","&quot":'"',"&quot;":'"',"&rAarr;":"⇛","&rArr;":"⇒","&rAtail;":"⤜","&rBarr;":"⤏","&rHar;":"⥤","&race;":"∽̱","&racute;":"ŕ","&radic;":"√","&raemptyv;":"⦳","&rang;":"⟩","&rangd;":"⦒","&range;":"⦥","&rangle;":"⟩","&raquo":"»","&raquo;":"»","&rarr;":"→","&rarrap;":"⥵","&rarrb;":"⇥","&rarrbfs;":"⤠","&rarrc;":"⤳","&rarrfs;":"⤞","&rarrhk;":"↪","&rarrlp;":"↬","&rarrpl;":"⥅","&rarrsim;":"⥴","&rarrtl;":"↣","&rarrw;":"↝","&ratail;":"⤚","&ratio;":"∶","&rationals;":"ℚ","&rbarr;":"⤍","&rbbrk;":"❳","&rbrace;":"}","&rbrack;":"]","&rbrke;":"⦌","&rbrksld;":"⦎","&rbrkslu;":"⦐","&rcaron;":"ř","&rcedil;":"ŗ","&rceil;":"⌉","&rcub;":"}","&rcy;":"р","&rdca;":"⤷","&rdldhar;":"⥩","&rdquo;":"”","&rdquor;":"”","&rdsh;":"↳","&real;":"ℜ","&realine;":"ℛ","&realpart;":"ℜ","&reals;":"ℝ","&rect;":"▭","&reg":"®","&reg;":"®","&rfisht;":"⥽","&rfloor;":"⌋","&rfr;":"𝔯","&rhard;":"⇁","&rharu;":"⇀","&rharul;":"⥬","&rho;":"ρ","&rhov;":"ϱ","&rightarrow;":"→","&rightarrowtail;":"↣","&rightharpoondown;":"⇁","&rightharpoonup;":"⇀","&rightleftarrows;":"⇄","&rightleftharpoons;":"⇌","&rightrightarrows;":"⇉","&rightsquigarrow;":"↝","&rightthreetimes;":"⋌","&ring;":"˚","&risingdotseq;":"≓","&rlarr;":"⇄","&rlhar;":"⇌","&rlm;":"‏","&rmoust;":"⎱","&rmoustache;":"⎱","&rnmid;":"⫮","&roang;":"⟭","&roarr;":"⇾","&robrk;":"⟧","&ropar;":"⦆","&ropf;":"𝕣","&roplus;":"⨮","&rotimes;":"⨵","&rpar;":")","&rpargt;":"⦔","&rppolint;":"⨒","&rrarr;":"⇉","&rsaquo;":"›","&rscr;":"𝓇","&rsh;":"↱","&rsqb;":"]","&rsquo;":"’","&rsquor;":"’","&rthree;":"⋌","&rtimes;":"⋊","&rtri;":"▹","&rtrie;":"⊵","&rtrif;":"▸","&rtriltri;":"⧎","&ruluhar;":"⥨","&rx;":"℞","&sacute;":"ś","&sbquo;":"‚","&sc;":"≻","&scE;":"⪴","&scap;":"⪸","&scaron;":"š","&sccue;":"≽","&sce;":"⪰","&scedil;":"ş","&scirc;":"ŝ","&scnE;":"⪶","&scnap;":"⪺","&scnsim;":"⋩","&scpolint;":"⨓","&scsim;":"≿","&scy;":"с","&sdot;":"⋅","&sdotb;":"⊡","&sdote;":"⩦","&seArr;":"⇘","&searhk;":"⤥","&searr;":"↘","&searrow;":"↘","&sect":"§","&sect;":"§","&semi;":";","&seswar;":"⤩","&setminus;":"∖","&setmn;":"∖","&sext;":"✶","&sfr;":"𝔰","&sfrown;":"⌢","&sharp;":"♯","&shchcy;":"щ","&shcy;":"ш","&shortmid;":"∣","&shortparallel;":"∥","&shy":"­","&shy;":"­","&sigma;":"σ","&sigmaf;":"ς","&sigmav;":"ς","&sim;":"∼","&simdot;":"⩪","&sime;":"≃","&simeq;":"≃","&simg;":"⪞","&simgE;":"⪠","&siml;":"⪝","&simlE;":"⪟","&simne;":"≆","&simplus;":"⨤","&simrarr;":"⥲","&slarr;":"←","&smallsetminus;":"∖","&smashp;":"⨳","&smeparsl;":"⧤","&smid;":"∣","&smile;":"⌣","&smt;":"⪪","&smte;":"⪬","&smtes;":"⪬︀","&softcy;":"ь","&sol;":"/","&solb;":"⧄","&solbar;":"⌿","&sopf;":"𝕤","&spades;":"♠","&spadesuit;":"♠","&spar;":"∥","&sqcap;":"⊓","&sqcaps;":"⊓︀","&sqcup;":"⊔","&sqcups;":"⊔︀","&sqsub;":"⊏","&sqsube;":"⊑","&sqsubset;":"⊏","&sqsubseteq;":"⊑","&sqsup;":"⊐","&sqsupe;":"⊒","&sqsupset;":"⊐","&sqsupseteq;":"⊒","&squ;":"□","&square;":"□","&squarf;":"▪","&squf;":"▪","&srarr;":"→","&sscr;":"𝓈","&ssetmn;":"∖","&ssmile;":"⌣","&sstarf;":"⋆","&star;":"☆","&starf;":"★","&straightepsilon;":"ϵ","&straightphi;":"ϕ","&strns;":"¯","&sub;":"⊂","&subE;":"⫅","&subdot;":"⪽","&sube;":"⊆","&subedot;":"⫃","&submult;":"⫁","&subnE;":"⫋","&subne;":"⊊","&subplus;":"⪿","&subrarr;":"⥹","&subset;":"⊂","&subseteq;":"⊆","&subseteqq;":"⫅","&subsetneq;":"⊊","&subsetneqq;":"⫋","&subsim;":"⫇","&subsub;":"⫕","&subsup;":"⫓","&succ;":"≻","&succapprox;":"⪸","&succcurlyeq;":"≽","&succeq;":"⪰","&succnapprox;":"⪺","&succneqq;":"⪶","&succnsim;":"⋩","&succsim;":"≿","&sum;":"∑","&sung;":"♪","&sup1":"¹","&sup1;":"¹","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&sup;":"⊃","&supE;":"⫆","&supdot;":"⪾","&supdsub;":"⫘","&supe;":"⊇","&supedot;":"⫄","&suphsol;":"⟉","&suphsub;":"⫗","&suplarr;":"⥻","&supmult;":"⫂","&supnE;":"⫌","&supne;":"⊋","&supplus;":"⫀","&supset;":"⊃","&supseteq;":"⊇","&supseteqq;":"⫆","&supsetneq;":"⊋","&supsetneqq;":"⫌","&supsim;":"⫈","&supsub;":"⫔","&supsup;":"⫖","&swArr;":"⇙","&swarhk;":"⤦","&swarr;":"↙","&swarrow;":"↙","&swnwar;":"⤪","&szlig":"ß","&szlig;":"ß","&target;":"⌖","&tau;":"τ","&tbrk;":"⎴","&tcaron;":"ť","&tcedil;":"ţ","&tcy;":"т","&tdot;":"⃛","&telrec;":"⌕","&tfr;":"𝔱","&there4;":"∴","&therefore;":"∴","&theta;":"θ","&thetasym;":"ϑ","&thetav;":"ϑ","&thickapprox;":"≈","&thicksim;":"∼","&thinsp;":" ","&thkap;":"≈","&thksim;":"∼","&thorn":"þ","&thorn;":"þ","&tilde;":"˜","&times":"×","&times;":"×","&timesb;":"⊠","&timesbar;":"⨱","&timesd;":"⨰","&tint;":"∭","&toea;":"⤨","&top;":"⊤","&topbot;":"⌶","&topcir;":"⫱","&topf;":"𝕥","&topfork;":"⫚","&tosa;":"⤩","&tprime;":"‴","&trade;":"™","&triangle;":"▵","&triangledown;":"▿","&triangleleft;":"◃","&trianglelefteq;":"⊴","&triangleq;":"≜","&triangleright;":"▹","&trianglerighteq;":"⊵","&tridot;":"◬","&trie;":"≜","&triminus;":"⨺","&triplus;":"⨹","&trisb;":"⧍","&tritime;":"⨻","&trpezium;":"⏢","&tscr;":"𝓉","&tscy;":"ц","&tshcy;":"ћ","&tstrok;":"ŧ","&twixt;":"≬","&twoheadleftarrow;":"↞","&twoheadrightarrow;":"↠","&uArr;":"⇑","&uHar;":"⥣","&uacute":"ú","&uacute;":"ú","&uarr;":"↑","&ubrcy;":"ў","&ubreve;":"ŭ","&ucirc":"û","&ucirc;":"û","&ucy;":"у","&udarr;":"⇅","&udblac;":"ű","&udhar;":"⥮","&ufisht;":"⥾","&ufr;":"𝔲","&ugrave":"ù","&ugrave;":"ù","&uharl;":"↿","&uharr;":"↾","&uhblk;":"▀","&ulcorn;":"⌜","&ulcorner;":"⌜","&ulcrop;":"⌏","&ultri;":"◸","&umacr;":"ū","&uml":"¨","&uml;":"¨","&uogon;":"ų","&uopf;":"𝕦","&uparrow;":"↑","&updownarrow;":"↕","&upharpoonleft;":"↿","&upharpoonright;":"↾","&uplus;":"⊎","&upsi;":"υ","&upsih;":"ϒ","&upsilon;":"υ","&upuparrows;":"⇈","&urcorn;":"⌝","&urcorner;":"⌝","&urcrop;":"⌎","&uring;":"ů","&urtri;":"◹","&uscr;":"𝓊","&utdot;":"⋰","&utilde;":"ũ","&utri;":"▵","&utrif;":"▴","&uuarr;":"⇈","&uuml":"ü","&uuml;":"ü","&uwangle;":"⦧","&vArr;":"⇕","&vBar;":"⫨","&vBarv;":"⫩","&vDash;":"⊨","&vangrt;":"⦜","&varepsilon;":"ϵ","&varkappa;":"ϰ","&varnothing;":"∅","&varphi;":"ϕ","&varpi;":"ϖ","&varpropto;":"∝","&varr;":"↕","&varrho;":"ϱ","&varsigma;":"ς","&varsubsetneq;":"⊊︀","&varsubsetneqq;":"⫋︀","&varsupsetneq;":"⊋︀","&varsupsetneqq;":"⫌︀","&vartheta;":"ϑ","&vartriangleleft;":"⊲","&vartriangleright;":"⊳","&vcy;":"в","&vdash;":"⊢","&vee;":"∨","&veebar;":"⊻","&veeeq;":"≚","&vellip;":"⋮","&verbar;":"|","&vert;":"|","&vfr;":"𝔳","&vltri;":"⊲","&vnsub;":"⊂⃒","&vnsup;":"⊃⃒","&vopf;":"𝕧","&vprop;":"∝","&vrtri;":"⊳","&vscr;":"𝓋","&vsubnE;":"⫋︀","&vsubne;":"⊊︀","&vsupnE;":"⫌︀","&vsupne;":"⊋︀","&vzigzag;":"⦚","&wcirc;":"ŵ","&wedbar;":"⩟","&wedge;":"∧","&wedgeq;":"≙","&weierp;":"℘","&wfr;":"𝔴","&wopf;":"𝕨","&wp;":"℘","&wr;":"≀","&wreath;":"≀","&wscr;":"𝓌","&xcap;":"⋂","&xcirc;":"◯","&xcup;":"⋃","&xdtri;":"▽","&xfr;":"𝔵","&xhArr;":"⟺","&xharr;":"⟷","&xi;":"ξ","&xlArr;":"⟸","&xlarr;":"⟵","&xmap;":"⟼","&xnis;":"⋻","&xodot;":"⨀","&xopf;":"𝕩","&xoplus;":"⨁","&xotime;":"⨂","&xrArr;":"⟹","&xrarr;":"⟶","&xscr;":"𝓍","&xsqcup;":"⨆","&xuplus;":"⨄","&xutri;":"△","&xvee;":"⋁","&xwedge;":"⋀","&yacute":"ý","&yacute;":"ý","&yacy;":"я","&ycirc;":"ŷ","&ycy;":"ы","&yen":"¥","&yen;":"¥","&yfr;":"𝔶","&yicy;":"ї","&yopf;":"𝕪","&yscr;":"𝓎","&yucy;":"ю","&yuml":"ÿ","&yuml;":"ÿ","&zacute;":"ź","&zcaron;":"ž","&zcy;":"з","&zdot;":"ż","&zeetrf;":"ℨ","&zeta;":"ζ","&zfr;":"𝔷","&zhcy;":"ж","&zigrarr;":"⇝","&zopf;":"𝕫","&zscr;":"𝓏","&zwj;":"‍","&zwnj;":"‌"},characters:{"Æ":"&AElig;","&":"&amp;","Á":"&Aacute;","Ă":"&Abreve;","Â":"&Acirc;","А":"&Acy;","𝔄":"&Afr;","À":"&Agrave;","Α":"&Alpha;","Ā":"&Amacr;","⩓":"&And;","Ą":"&Aogon;","𝔸":"&Aopf;","⁡":"&af;","Å":"&angst;","𝒜":"&Ascr;","≔":"&coloneq;","Ã":"&Atilde;","Ä":"&Auml;","∖":"&ssetmn;","⫧":"&Barv;","⌆":"&doublebarwedge;","Б":"&Bcy;","∵":"&because;","ℬ":"&bernou;","Β":"&Beta;","𝔅":"&Bfr;","𝔹":"&Bopf;","˘":"&breve;","≎":"&bump;","Ч":"&CHcy;","©":"&copy;","Ć":"&Cacute;","⋒":"&Cap;","ⅅ":"&DD;","ℭ":"&Cfr;","Č":"&Ccaron;","Ç":"&Ccedil;","Ĉ":"&Ccirc;","∰":"&Cconint;","Ċ":"&Cdot;","¸":"&cedil;","·":"&middot;","Χ":"&Chi;","⊙":"&odot;","⊖":"&ominus;","⊕":"&oplus;","⊗":"&otimes;","∲":"&cwconint;","”":"&rdquor;","’":"&rsquor;","∷":"&Proportion;","⩴":"&Colone;","≡":"&equiv;","∯":"&DoubleContourIntegral;","∮":"&oint;","ℂ":"&complexes;","∐":"&coprod;","∳":"&awconint;","⨯":"&Cross;","𝒞":"&Cscr;","⋓":"&Cup;","≍":"&asympeq;","⤑":"&DDotrahd;","Ђ":"&DJcy;","Ѕ":"&DScy;","Џ":"&DZcy;","‡":"&ddagger;","↡":"&Darr;","⫤":"&DoubleLeftTee;","Ď":"&Dcaron;","Д":"&Dcy;","∇":"&nabla;","Δ":"&Delta;","𝔇":"&Dfr;","´":"&acute;","˙":"&dot;","˝":"&dblac;","`":"&grave;","˜":"&tilde;","⋄":"&diamond;","ⅆ":"&dd;","𝔻":"&Dopf;","¨":"&uml;","⃜":"&DotDot;","≐":"&esdot;","⇓":"&dArr;","⇐":"&lArr;","⇔":"&iff;","⟸":"&xlArr;","⟺":"&xhArr;","⟹":"&xrArr;","⇒":"&rArr;","⊨":"&vDash;","⇑":"&uArr;","⇕":"&vArr;","∥":"&spar;","↓":"&downarrow;","⤓":"&DownArrowBar;","⇵":"&duarr;","̑":"&DownBreve;","⥐":"&DownLeftRightVector;","⥞":"&DownLeftTeeVector;","↽":"&lhard;","⥖":"&DownLeftVectorBar;","⥟":"&DownRightTeeVector;","⇁":"&rightharpoondown;","⥗":"&DownRightVectorBar;","⊤":"&top;","↧":"&mapstodown;","𝒟":"&Dscr;","Đ":"&Dstrok;","Ŋ":"&ENG;","Ð":"&ETH;","É":"&Eacute;","Ě":"&Ecaron;","Ê":"&Ecirc;","Э":"&Ecy;","Ė":"&Edot;","𝔈":"&Efr;","È":"&Egrave;","∈":"&isinv;","Ē":"&Emacr;","◻":"&EmptySmallSquare;","▫":"&EmptyVerySmallSquare;","Ę":"&Eogon;","𝔼":"&Eopf;","Ε":"&Epsilon;","⩵":"&Equal;","≂":"&esim;","⇌":"&rlhar;","ℰ":"&expectation;","⩳":"&Esim;","Η":"&Eta;","Ë":"&Euml;","∃":"&exist;","ⅇ":"&exponentiale;","Ф":"&Fcy;","𝔉":"&Ffr;","◼":"&FilledSmallSquare;","▪":"&squf;","𝔽":"&Fopf;","∀":"&forall;","ℱ":"&Fscr;","Ѓ":"&GJcy;",">":"&gt;","Γ":"&Gamma;","Ϝ":"&Gammad;","Ğ":"&Gbreve;","Ģ":"&Gcedil;","Ĝ":"&Gcirc;","Г":"&Gcy;","Ġ":"&Gdot;","𝔊":"&Gfr;","⋙":"&ggg;","𝔾":"&Gopf;","≥":"&geq;","⋛":"&gtreqless;","≧":"&geqq;","⪢":"&GreaterGreater;","≷":"&gtrless;","⩾":"&ges;","≳":"&gtrsim;","𝒢":"&Gscr;","≫":"&gg;","Ъ":"&HARDcy;","ˇ":"&caron;","^":"&Hat;","Ĥ":"&Hcirc;","ℌ":"&Poincareplane;","ℋ":"&hamilt;","ℍ":"&quaternions;","─":"&boxh;","Ħ":"&Hstrok;","≏":"&bumpeq;","Е":"&IEcy;","Ĳ":"&IJlig;","Ё":"&IOcy;","Í":"&Iacute;","Î":"&Icirc;","И":"&Icy;","İ":"&Idot;","ℑ":"&imagpart;","Ì":"&Igrave;","Ī":"&Imacr;","ⅈ":"&ii;","∬":"&Int;","∫":"&int;","⋂":"&xcap;","⁣":"&ic;","⁢":"&it;","Į":"&Iogon;","𝕀":"&Iopf;","Ι":"&Iota;","ℐ":"&imagline;","Ĩ":"&Itilde;","І":"&Iukcy;","Ï":"&Iuml;","Ĵ":"&Jcirc;","Й":"&Jcy;","𝔍":"&Jfr;","𝕁":"&Jopf;","𝒥":"&Jscr;","Ј":"&Jsercy;","Є":"&Jukcy;","Х":"&KHcy;","Ќ":"&KJcy;","Κ":"&Kappa;","Ķ":"&Kcedil;","К":"&Kcy;","𝔎":"&Kfr;","𝕂":"&Kopf;","𝒦":"&Kscr;","Љ":"&LJcy;","<":"&lt;","Ĺ":"&Lacute;","Λ":"&Lambda;","⟪":"&Lang;","ℒ":"&lagran;","↞":"&twoheadleftarrow;","Ľ":"&Lcaron;","Ļ":"&Lcedil;","Л":"&Lcy;","⟨":"&langle;","←":"&slarr;","⇤":"&larrb;","⇆":"&lrarr;","⌈":"&lceil;","⟦":"&lobrk;","⥡":"&LeftDownTeeVector;","⇃":"&downharpoonleft;","⥙":"&LeftDownVectorBar;","⌊":"&lfloor;","↔":"&leftrightarrow;","⥎":"&LeftRightVector;","⊣":"&dashv;","↤":"&mapstoleft;","⥚":"&LeftTeeVector;","⊲":"&vltri;","⧏":"&LeftTriangleBar;","⊴":"&trianglelefteq;","⥑":"&LeftUpDownVector;","⥠":"&LeftUpTeeVector;","↿":"&upharpoonleft;","⥘":"&LeftUpVectorBar;","↼":"&lharu;","⥒":"&LeftVectorBar;","⋚":"&lesseqgtr;","≦":"&leqq;","≶":"&lg;","⪡":"&LessLess;","⩽":"&les;","≲":"&lsim;","𝔏":"&Lfr;","⋘":"&Ll;","⇚":"&lAarr;","Ŀ":"&Lmidot;","⟵":"&xlarr;","⟷":"&xharr;","⟶":"&xrarr;","𝕃":"&Lopf;","↙":"&swarrow;","↘":"&searrow;","↰":"&lsh;","Ł":"&Lstrok;","≪":"&ll;","⤅":"&Map;","М":"&Mcy;"," ":"&MediumSpace;","ℳ":"&phmmat;","𝔐":"&Mfr;","∓":"&mp;","𝕄":"&Mopf;","Μ":"&Mu;","Њ":"&NJcy;","Ń":"&Nacute;","Ň":"&Ncaron;","Ņ":"&Ncedil;","Н":"&Ncy;","​":"&ZeroWidthSpace;","\n":"&NewLine;","𝔑":"&Nfr;","⁠":"&NoBreak;"," ":"&nbsp;","ℕ":"&naturals;","⫬":"&Not;","≢":"&nequiv;","≭":"&NotCupCap;","∦":"&nspar;","∉":"&notinva;","≠":"&ne;","≂̸":"&nesim;","∄":"&nexists;","≯":"&ngtr;","≱":"&ngeq;","≧̸":"&ngeqq;","≫̸":"&nGtv;","≹":"&ntgl;","⩾̸":"&nges;","≵":"&ngsim;","≎̸":"&nbump;","≏̸":"&nbumpe;","⋪":"&ntriangleleft;","⧏̸":"&NotLeftTriangleBar;","⋬":"&ntrianglelefteq;","≮":"&nlt;","≰":"&nleq;","≸":"&ntlg;","≪̸":"&nLtv;","⩽̸":"&nles;","≴":"&nlsim;","⪢̸":"&NotNestedGreaterGreater;","⪡̸":"&NotNestedLessLess;","⊀":"&nprec;","⪯̸":"&npreceq;","⋠":"&nprcue;","∌":"&notniva;","⋫":"&ntriangleright;","⧐̸":"&NotRightTriangleBar;","⋭":"&ntrianglerighteq;","⊏̸":"&NotSquareSubset;","⋢":"&nsqsube;","⊐̸":"&NotSquareSuperset;","⋣":"&nsqsupe;","⊂⃒":"&vnsub;","⊈":"&nsubseteq;","⊁":"&nsucc;","⪰̸":"&nsucceq;","⋡":"&nsccue;","≿̸":"&NotSucceedsTilde;","⊃⃒":"&vnsup;","⊉":"&nsupseteq;","≁":"&nsim;","≄":"&nsimeq;","≇":"&ncong;","≉":"&napprox;","∤":"&nsmid;","𝒩":"&Nscr;","Ñ":"&Ntilde;","Ν":"&Nu;","Œ":"&OElig;","Ó":"&Oacute;","Ô":"&Ocirc;","О":"&Ocy;","Ő":"&Odblac;","𝔒":"&Ofr;","Ò":"&Ograve;","Ō":"&Omacr;","Ω":"&ohm;","Ο":"&Omicron;","𝕆":"&Oopf;","“":"&ldquo;","‘":"&lsquo;","⩔":"&Or;","𝒪":"&Oscr;","Ø":"&Oslash;","Õ":"&Otilde;","⨷":"&Otimes;","Ö":"&Ouml;","‾":"&oline;","⏞":"&OverBrace;","⎴":"&tbrk;","⏜":"&OverParenthesis;","∂":"&part;","П":"&Pcy;","𝔓":"&Pfr;","Φ":"&Phi;","Π":"&Pi;","±":"&pm;","ℙ":"&primes;","⪻":"&Pr;","≺":"&prec;","⪯":"&preceq;","≼":"&preccurlyeq;","≾":"&prsim;","″":"&Prime;","∏":"&prod;","∝":"&vprop;","𝒫":"&Pscr;","Ψ":"&Psi;",'"':"&quot;","𝔔":"&Qfr;","ℚ":"&rationals;","𝒬":"&Qscr;","⤐":"&drbkarow;","®":"&reg;","Ŕ":"&Racute;","⟫":"&Rang;","↠":"&twoheadrightarrow;","⤖":"&Rarrtl;","Ř":"&Rcaron;","Ŗ":"&Rcedil;","Р":"&Rcy;","ℜ":"&realpart;","∋":"&niv;","⇋":"&lrhar;","⥯":"&duhar;","Ρ":"&Rho;","⟩":"&rangle;","→":"&srarr;","⇥":"&rarrb;","⇄":"&rlarr;","⌉":"&rceil;","⟧":"&robrk;","⥝":"&RightDownTeeVector;","⇂":"&downharpoonright;","⥕":"&RightDownVectorBar;","⌋":"&rfloor;","⊢":"&vdash;","↦":"&mapsto;","⥛":"&RightTeeVector;","⊳":"&vrtri;","⧐":"&RightTriangleBar;","⊵":"&trianglerighteq;","⥏":"&RightUpDownVector;","⥜":"&RightUpTeeVector;","↾":"&upharpoonright;","⥔":"&RightUpVectorBar;","⇀":"&rightharpoonup;","⥓":"&RightVectorBar;","ℝ":"&reals;","⥰":"&RoundImplies;","⇛":"&rAarr;","ℛ":"&realine;","↱":"&rsh;","⧴":"&RuleDelayed;","Щ":"&SHCHcy;","Ш":"&SHcy;","Ь":"&SOFTcy;","Ś":"&Sacute;","⪼":"&Sc;","Š":"&Scaron;","Ş":"&Scedil;","Ŝ":"&Scirc;","С":"&Scy;","𝔖":"&Sfr;","↑":"&uparrow;","Σ":"&Sigma;","∘":"&compfn;","𝕊":"&Sopf;","√":"&radic;","□":"&square;","⊓":"&sqcap;","⊏":"&sqsubset;","⊑":"&sqsubseteq;","⊐":"&sqsupset;","⊒":"&sqsupseteq;","⊔":"&sqcup;","𝒮":"&Sscr;","⋆":"&sstarf;","⋐":"&Subset;","⊆":"&subseteq;","≻":"&succ;","⪰":"&succeq;","≽":"&succcurlyeq;","≿":"&succsim;","∑":"&sum;","⋑":"&Supset;","⊃":"&supset;","⊇":"&supseteq;","Þ":"&THORN;","™":"&trade;","Ћ":"&TSHcy;","Ц":"&TScy;","\t":"&Tab;","Τ":"&Tau;","Ť":"&Tcaron;","Ţ":"&Tcedil;","Т":"&Tcy;","𝔗":"&Tfr;","∴":"&therefore;","Θ":"&Theta;","  ":"&ThickSpace;"," ":"&thinsp;","∼":"&thksim;","≃":"&simeq;","≅":"&cong;","≈":"&thkap;","𝕋":"&Topf;","⃛":"&tdot;","𝒯":"&Tscr;","Ŧ":"&Tstrok;","Ú":"&Uacute;","↟":"&Uarr;","⥉":"&Uarrocir;","Ў":"&Ubrcy;","Ŭ":"&Ubreve;","Û":"&Ucirc;","У":"&Ucy;","Ű":"&Udblac;","𝔘":"&Ufr;","Ù":"&Ugrave;","Ū":"&Umacr;",_:"&lowbar;","⏟":"&UnderBrace;","⎵":"&bbrk;","⏝":"&UnderParenthesis;","⋃":"&xcup;","⊎":"&uplus;","Ų":"&Uogon;","𝕌":"&Uopf;","⤒":"&UpArrowBar;","⇅":"&udarr;","↕":"&varr;","⥮":"&udhar;","⊥":"&perp;","↥":"&mapstoup;","↖":"&nwarrow;","↗":"&nearrow;","ϒ":"&upsih;","Υ":"&Upsilon;","Ů":"&Uring;","𝒰":"&Uscr;","Ũ":"&Utilde;","Ü":"&Uuml;","⊫":"&VDash;","⫫":"&Vbar;","В":"&Vcy;","⊩":"&Vdash;","⫦":"&Vdashl;","⋁":"&xvee;","‖":"&Vert;","∣":"&smid;","|":"&vert;","❘":"&VerticalSeparator;","≀":"&wreath;"," ":"&hairsp;","𝔙":"&Vfr;","𝕍":"&Vopf;","𝒱":"&Vscr;","⊪":"&Vvdash;","Ŵ":"&Wcirc;","⋀":"&xwedge;","𝔚":"&Wfr;","𝕎":"&Wopf;","𝒲":"&Wscr;","𝔛":"&Xfr;","Ξ":"&Xi;","𝕏":"&Xopf;","𝒳":"&Xscr;","Я":"&YAcy;","Ї":"&YIcy;","Ю":"&YUcy;","Ý":"&Yacute;","Ŷ":"&Ycirc;","Ы":"&Ycy;","𝔜":"&Yfr;","𝕐":"&Yopf;","𝒴":"&Yscr;","Ÿ":"&Yuml;","Ж":"&ZHcy;","Ź":"&Zacute;","Ž":"&Zcaron;","З":"&Zcy;","Ż":"&Zdot;","Ζ":"&Zeta;","ℨ":"&zeetrf;","ℤ":"&integers;","𝒵":"&Zscr;","á":"&aacute;","ă":"&abreve;","∾":"&mstpos;","∾̳":"&acE;","∿":"&acd;","â":"&acirc;","а":"&acy;","æ":"&aelig;","𝔞":"&afr;","à":"&agrave;","ℵ":"&aleph;","α":"&alpha;","ā":"&amacr;","⨿":"&amalg;","∧":"&wedge;","⩕":"&andand;","⩜":"&andd;","⩘":"&andslope;","⩚":"&andv;","∠":"&angle;","⦤":"&ange;","∡":"&measuredangle;","⦨":"&angmsdaa;","⦩":"&angmsdab;","⦪":"&angmsdac;","⦫":"&angmsdad;","⦬":"&angmsdae;","⦭":"&angmsdaf;","⦮":"&angmsdag;","⦯":"&angmsdah;","∟":"&angrt;","⊾":"&angrtvb;","⦝":"&angrtvbd;","∢":"&angsph;","⍼":"&angzarr;","ą":"&aogon;","𝕒":"&aopf;","⩰":"&apE;","⩯":"&apacir;","≊":"&approxeq;","≋":"&apid;","'":"&apos;","å":"&aring;","𝒶":"&ascr;","*":"&midast;","ã":"&atilde;","ä":"&auml;","⨑":"&awint;","⫭":"&bNot;","≌":"&bcong;","϶":"&bepsi;","‵":"&bprime;","∽":"&bsim;","⋍":"&bsime;","⊽":"&barvee;","⌅":"&barwedge;","⎶":"&bbrktbrk;","б":"&bcy;","„":"&ldquor;","⦰":"&bemptyv;","β":"&beta;","ℶ":"&beth;","≬":"&twixt;","𝔟":"&bfr;","◯":"&xcirc;","⨀":"&xodot;","⨁":"&xoplus;","⨂":"&xotime;","⨆":"&xsqcup;","★":"&starf;","▽":"&xdtri;","△":"&xutri;","⨄":"&xuplus;","⤍":"&rbarr;","⧫":"&lozf;","▴":"&utrif;","▾":"&dtrif;","◂":"&ltrif;","▸":"&rtrif;","␣":"&blank;","▒":"&blk12;","░":"&blk14;","▓":"&blk34;","█":"&block;","=⃥":"&bne;","≡⃥":"&bnequiv;","⌐":"&bnot;","𝕓":"&bopf;","⋈":"&bowtie;","╗":"&boxDL;","╔":"&boxDR;","╖":"&boxDl;","╓":"&boxDr;","═":"&boxH;","╦":"&boxHD;","╩":"&boxHU;","╤":"&boxHd;","╧":"&boxHu;","╝":"&boxUL;","╚":"&boxUR;","╜":"&boxUl;","╙":"&boxUr;","║":"&boxV;","╬":"&boxVH;","╣":"&boxVL;","╠":"&boxVR;","╫":"&boxVh;","╢":"&boxVl;","╟":"&boxVr;","⧉":"&boxbox;","╕":"&boxdL;","╒":"&boxdR;","┐":"&boxdl;","┌":"&boxdr;","╥":"&boxhD;","╨":"&boxhU;","┬":"&boxhd;","┴":"&boxhu;","⊟":"&minusb;","⊞":"&plusb;","⊠":"&timesb;","╛":"&boxuL;","╘":"&boxuR;","┘":"&boxul;","└":"&boxur;","│":"&boxv;","╪":"&boxvH;","╡":"&boxvL;","╞":"&boxvR;","┼":"&boxvh;","┤":"&boxvl;","├":"&boxvr;","¦":"&brvbar;","𝒷":"&bscr;","⁏":"&bsemi;","\\":"&bsol;","⧅":"&bsolb;","⟈":"&bsolhsub;","•":"&bullet;","⪮":"&bumpE;","ć":"&cacute;","∩":"&cap;","⩄":"&capand;","⩉":"&capbrcup;","⩋":"&capcap;","⩇":"&capcup;","⩀":"&capdot;","∩︀":"&caps;","⁁":"&caret;","⩍":"&ccaps;","č":"&ccaron;","ç":"&ccedil;","ĉ":"&ccirc;","⩌":"&ccups;","⩐":"&ccupssm;","ċ":"&cdot;","⦲":"&cemptyv;","¢":"&cent;","𝔠":"&cfr;","ч":"&chcy;","✓":"&checkmark;","χ":"&chi;","○":"&cir;","⧃":"&cirE;","ˆ":"&circ;","≗":"&cire;","↺":"&olarr;","↻":"&orarr;","Ⓢ":"&oS;","⊛":"&oast;","⊚":"&ocir;","⊝":"&odash;","⨐":"&cirfnint;","⫯":"&cirmid;","⧂":"&cirscir;","♣":"&clubsuit;",":":"&colon;",",":"&comma;","@":"&commat;","∁":"&complement;","⩭":"&congdot;","𝕔":"&copf;","℗":"&copysr;","↵":"&crarr;","✗":"&cross;","𝒸":"&cscr;","⫏":"&csub;","⫑":"&csube;","⫐":"&csup;","⫒":"&csupe;","⋯":"&ctdot;","⤸":"&cudarrl;","⤵":"&cudarrr;","⋞":"&curlyeqprec;","⋟":"&curlyeqsucc;","↶":"&curvearrowleft;","⤽":"&cularrp;","∪":"&cup;","⩈":"&cupbrcap;","⩆":"&cupcap;","⩊":"&cupcup;","⊍":"&cupdot;","⩅":"&cupor;","∪︀":"&cups;","↷":"&curvearrowright;","⤼":"&curarrm;","⋎":"&cuvee;","⋏":"&cuwed;","¤":"&curren;","∱":"&cwint;","⌭":"&cylcty;","⥥":"&dHar;","†":"&dagger;","ℸ":"&daleth;","‐":"&hyphen;","⤏":"&rBarr;","ď":"&dcaron;","д":"&dcy;","⇊":"&downdownarrows;","⩷":"&eDDot;","°":"&deg;","δ":"&delta;","⦱":"&demptyv;","⥿":"&dfisht;","𝔡":"&dfr;","♦":"&diams;","ϝ":"&gammad;","⋲":"&disin;","÷":"&divide;","⋇":"&divonx;","ђ":"&djcy;","⌞":"&llcorner;","⌍":"&dlcrop;",$:"&dollar;","𝕕":"&dopf;","≑":"&eDot;","∸":"&minusd;","∔":"&plusdo;","⊡":"&sdotb;","⌟":"&lrcorner;","⌌":"&drcrop;","𝒹":"&dscr;","ѕ":"&dscy;","⧶":"&dsol;","đ":"&dstrok;","⋱":"&dtdot;","▿":"&triangledown;","⦦":"&dwangle;","џ":"&dzcy;","⟿":"&dzigrarr;","é":"&eacute;","⩮":"&easter;","ě":"&ecaron;","≖":"&eqcirc;","ê":"&ecirc;","≕":"&eqcolon;","э":"&ecy;","ė":"&edot;","≒":"&fallingdotseq;","𝔢":"&efr;","⪚":"&eg;","è":"&egrave;","⪖":"&eqslantgtr;","⪘":"&egsdot;","⪙":"&el;","⏧":"&elinters;","ℓ":"&ell;","⪕":"&eqslantless;","⪗":"&elsdot;","ē":"&emacr;","∅":"&varnothing;"," ":"&emsp13;"," ":"&emsp14;"," ":"&emsp;","ŋ":"&eng;"," ":"&ensp;","ę":"&eogon;","𝕖":"&eopf;","⋕":"&epar;","⧣":"&eparsl;","⩱":"&eplus;","ε":"&epsilon;","ϵ":"&varepsilon;","=":"&equals;","≟":"&questeq;","⩸":"&equivDD;","⧥":"&eqvparsl;","≓":"&risingdotseq;","⥱":"&erarr;","ℯ":"&escr;","η":"&eta;","ð":"&eth;","ë":"&euml;","€":"&euro;","!":"&excl;","ф":"&fcy;","♀":"&female;","ﬃ":"&ffilig;","ﬀ":"&fflig;","ﬄ":"&ffllig;","𝔣":"&ffr;","ﬁ":"&filig;",fj:"&fjlig;","♭":"&flat;","ﬂ":"&fllig;","▱":"&fltns;","ƒ":"&fnof;","𝕗":"&fopf;","⋔":"&pitchfork;","⫙":"&forkv;","⨍":"&fpartint;","½":"&half;","⅓":"&frac13;","¼":"&frac14;","⅕":"&frac15;","⅙":"&frac16;","⅛":"&frac18;","⅔":"&frac23;","⅖":"&frac25;","¾":"&frac34;","⅗":"&frac35;","⅜":"&frac38;","⅘":"&frac45;","⅚":"&frac56;","⅝":"&frac58;","⅞":"&frac78;","⁄":"&frasl;","⌢":"&sfrown;","𝒻":"&fscr;","⪌":"&gtreqqless;","ǵ":"&gacute;","γ":"&gamma;","⪆":"&gtrapprox;","ğ":"&gbreve;","ĝ":"&gcirc;","г":"&gcy;","ġ":"&gdot;","⪩":"&gescc;","⪀":"&gesdot;","⪂":"&gesdoto;","⪄":"&gesdotol;","⋛︀":"&gesl;","⪔":"&gesles;","𝔤":"&gfr;","ℷ":"&gimel;","ѓ":"&gjcy;","⪒":"&glE;","⪥":"&gla;","⪤":"&glj;","≩":"&gneqq;","⪊":"&gnapprox;","⪈":"&gneq;","⋧":"&gnsim;","𝕘":"&gopf;","ℊ":"&gscr;","⪎":"&gsime;","⪐":"&gsiml;","⪧":"&gtcc;","⩺":"&gtcir;","⋗":"&gtrdot;","⦕":"&gtlPar;","⩼":"&gtquest;","⥸":"&gtrarr;","≩︀":"&gvnE;","ъ":"&hardcy;","⥈":"&harrcir;","↭":"&leftrightsquigarrow;","ℏ":"&plankv;","ĥ":"&hcirc;","♥":"&heartsuit;","…":"&mldr;","⊹":"&hercon;","𝔥":"&hfr;","⤥":"&searhk;","⤦":"&swarhk;","⇿":"&hoarr;","∻":"&homtht;","↩":"&larrhk;","↪":"&rarrhk;","𝕙":"&hopf;","―":"&horbar;","𝒽":"&hscr;","ħ":"&hstrok;","⁃":"&hybull;","í":"&iacute;","î":"&icirc;","и":"&icy;","е":"&iecy;","¡":"&iexcl;","𝔦":"&ifr;","ì":"&igrave;","⨌":"&qint;","∭":"&tint;","⧜":"&iinfin;","℩":"&iiota;","ĳ":"&ijlig;","ī":"&imacr;","ı":"&inodot;","⊷":"&imof;","Ƶ":"&imped;","℅":"&incare;","∞":"&infin;","⧝":"&infintie;","⊺":"&intercal;","⨗":"&intlarhk;","⨼":"&iprod;","ё":"&iocy;","į":"&iogon;","𝕚":"&iopf;","ι":"&iota;","¿":"&iquest;","𝒾":"&iscr;","⋹":"&isinE;","⋵":"&isindot;","⋴":"&isins;","⋳":"&isinsv;","ĩ":"&itilde;","і":"&iukcy;","ï":"&iuml;","ĵ":"&jcirc;","й":"&jcy;","𝔧":"&jfr;","ȷ":"&jmath;","𝕛":"&jopf;","𝒿":"&jscr;","ј":"&jsercy;","є":"&jukcy;","κ":"&kappa;","ϰ":"&varkappa;","ķ":"&kcedil;","к":"&kcy;","𝔨":"&kfr;","ĸ":"&kgreen;","х":"&khcy;","ќ":"&kjcy;","𝕜":"&kopf;","𝓀":"&kscr;","⤛":"&lAtail;","⤎":"&lBarr;","⪋":"&lesseqqgtr;","⥢":"&lHar;","ĺ":"&lacute;","⦴":"&laemptyv;","λ":"&lambda;","⦑":"&langd;","⪅":"&lessapprox;","«":"&laquo;","⤟":"&larrbfs;","⤝":"&larrfs;","↫":"&looparrowleft;","⤹":"&larrpl;","⥳":"&larrsim;","↢":"&leftarrowtail;","⪫":"&lat;","⤙":"&latail;","⪭":"&late;","⪭︀":"&lates;","⤌":"&lbarr;","❲":"&lbbrk;","{":"&lcub;","[":"&lsqb;","⦋":"&lbrke;","⦏":"&lbrksld;","⦍":"&lbrkslu;","ľ":"&lcaron;","ļ":"&lcedil;","л":"&lcy;","⤶":"&ldca;","⥧":"&ldrdhar;","⥋":"&ldrushar;","↲":"&ldsh;","≤":"&leq;","⇇":"&llarr;","⋋":"&lthree;","⪨":"&lescc;","⩿":"&lesdot;","⪁":"&lesdoto;","⪃":"&lesdotor;","⋚︀":"&lesg;","⪓":"&lesges;","⋖":"&ltdot;","⥼":"&lfisht;","𝔩":"&lfr;","⪑":"&lgE;","⥪":"&lharul;","▄":"&lhblk;","љ":"&ljcy;","⥫":"&llhard;","◺":"&lltri;","ŀ":"&lmidot;","⎰":"&lmoustache;","≨":"&lneqq;","⪉":"&lnapprox;","⪇":"&lneq;","⋦":"&lnsim;","⟬":"&loang;","⇽":"&loarr;","⟼":"&xmap;","↬":"&rarrlp;","⦅":"&lopar;","𝕝":"&lopf;","⨭":"&loplus;","⨴":"&lotimes;","∗":"&lowast;","◊":"&lozenge;","(":"&lpar;","⦓":"&lparlt;","⥭":"&lrhard;","‎":"&lrm;","⊿":"&lrtri;","‹":"&lsaquo;","𝓁":"&lscr;","⪍":"&lsime;","⪏":"&lsimg;","‚":"&sbquo;","ł":"&lstrok;","⪦":"&ltcc;","⩹":"&ltcir;","⋉":"&ltimes;","⥶":"&ltlarr;","⩻":"&ltquest;","⦖":"&ltrPar;","◃":"&triangleleft;","⥊":"&lurdshar;","⥦":"&luruhar;","≨︀":"&lvnE;","∺":"&mDDot;","¯":"&strns;","♂":"&male;","✠":"&maltese;","▮":"&marker;","⨩":"&mcomma;","м":"&mcy;","—":"&mdash;","𝔪":"&mfr;","℧":"&mho;","µ":"&micro;","⫰":"&midcir;","−":"&minus;","⨪":"&minusdu;","⫛":"&mlcp;","⊧":"&models;","𝕞":"&mopf;","𝓂":"&mscr;","μ":"&mu;","⊸":"&mumap;","⋙̸":"&nGg;","≫⃒":"&nGt;","⇍":"&nlArr;","⇎":"&nhArr;","⋘̸":"&nLl;","≪⃒":"&nLt;","⇏":"&nrArr;","⊯":"&nVDash;","⊮":"&nVdash;","ń":"&nacute;","∠⃒":"&nang;","⩰̸":"&napE;","≋̸":"&napid;","ŉ":"&napos;","♮":"&natural;","⩃":"&ncap;","ň":"&ncaron;","ņ":"&ncedil;","⩭̸":"&ncongdot;","⩂":"&ncup;","н":"&ncy;","–":"&ndash;","⇗":"&neArr;","⤤":"&nearhk;","≐̸":"&nedot;","⤨":"&toea;","𝔫":"&nfr;","↮":"&nleftrightarrow;","⫲":"&nhpar;","⋼":"&nis;","⋺":"&nisd;","њ":"&njcy;","≦̸":"&nleqq;","↚":"&nleftarrow;","‥":"&nldr;","𝕟":"&nopf;","¬":"&not;","⋹̸":"&notinE;","⋵̸":"&notindot;","⋷":"&notinvb;","⋶":"&notinvc;","⋾":"&notnivb;","⋽":"&notnivc;","⫽⃥":"&nparsl;","∂̸":"&npart;","⨔":"&npolint;","↛":"&nrightarrow;","⤳̸":"&nrarrc;","↝̸":"&nrarrw;","𝓃":"&nscr;","⊄":"&nsub;","⫅̸":"&nsubseteqq;","⊅":"&nsup;","⫆̸":"&nsupseteqq;","ñ":"&ntilde;","ν":"&nu;","#":"&num;","№":"&numero;"," ":"&numsp;","⊭":"&nvDash;","⤄":"&nvHarr;","≍⃒":"&nvap;","⊬":"&nvdash;","≥⃒":"&nvge;",">⃒":"&nvgt;","⧞":"&nvinfin;","⤂":"&nvlArr;","≤⃒":"&nvle;","<⃒":"&nvlt;","⊴⃒":"&nvltrie;","⤃":"&nvrArr;","⊵⃒":"&nvrtrie;","∼⃒":"&nvsim;","⇖":"&nwArr;","⤣":"&nwarhk;","⤧":"&nwnear;","ó":"&oacute;","ô":"&ocirc;","о":"&ocy;","ő":"&odblac;","⨸":"&odiv;","⦼":"&odsold;","œ":"&oelig;","⦿":"&ofcir;","𝔬":"&ofr;","˛":"&ogon;","ò":"&ograve;","⧁":"&ogt;","⦵":"&ohbar;","⦾":"&olcir;","⦻":"&olcross;","⧀":"&olt;","ō":"&omacr;","ω":"&omega;","ο":"&omicron;","⦶":"&omid;","𝕠":"&oopf;","⦷":"&opar;","⦹":"&operp;","∨":"&vee;","⩝":"&ord;","ℴ":"&oscr;","ª":"&ordf;","º":"&ordm;","⊶":"&origof;","⩖":"&oror;","⩗":"&orslope;","⩛":"&orv;","ø":"&oslash;","⊘":"&osol;","õ":"&otilde;","⨶":"&otimesas;","ö":"&ouml;","⌽":"&ovbar;","¶":"&para;","⫳":"&parsim;","⫽":"&parsl;","п":"&pcy;","%":"&percnt;",".":"&period;","‰":"&permil;","‱":"&pertenk;","𝔭":"&pfr;","φ":"&phi;","ϕ":"&varphi;","☎":"&phone;","π":"&pi;","ϖ":"&varpi;","ℎ":"&planckh;","+":"&plus;","⨣":"&plusacir;","⨢":"&pluscir;","⨥":"&plusdu;","⩲":"&pluse;","⨦":"&plussim;","⨧":"&plustwo;","⨕":"&pointint;","𝕡":"&popf;","£":"&pound;","⪳":"&prE;","⪷":"&precapprox;","⪹":"&prnap;","⪵":"&prnE;","⋨":"&prnsim;","′":"&prime;","⌮":"&profalar;","⌒":"&profline;","⌓":"&profsurf;","⊰":"&prurel;","𝓅":"&pscr;","ψ":"&psi;"," ":"&puncsp;","𝔮":"&qfr;","𝕢":"&qopf;","⁗":"&qprime;","𝓆":"&qscr;","⨖":"&quatint;","?":"&quest;","⤜":"&rAtail;","⥤":"&rHar;","∽̱":"&race;","ŕ":"&racute;","⦳":"&raemptyv;","⦒":"&rangd;","⦥":"&range;","»":"&raquo;","⥵":"&rarrap;","⤠":"&rarrbfs;","⤳":"&rarrc;","⤞":"&rarrfs;","⥅":"&rarrpl;","⥴":"&rarrsim;","↣":"&rightarrowtail;","↝":"&rightsquigarrow;","⤚":"&ratail;","∶":"&ratio;","❳":"&rbbrk;","}":"&rcub;","]":"&rsqb;","⦌":"&rbrke;","⦎":"&rbrksld;","⦐":"&rbrkslu;","ř":"&rcaron;","ŗ":"&rcedil;","р":"&rcy;","⤷":"&rdca;","⥩":"&rdldhar;","↳":"&rdsh;","▭":"&rect;","⥽":"&rfisht;","𝔯":"&rfr;","⥬":"&rharul;","ρ":"&rho;","ϱ":"&varrho;","⇉":"&rrarr;","⋌":"&rthree;","˚":"&ring;","‏":"&rlm;","⎱":"&rmoustache;","⫮":"&rnmid;","⟭":"&roang;","⇾":"&roarr;","⦆":"&ropar;","𝕣":"&ropf;","⨮":"&roplus;","⨵":"&rotimes;",")":"&rpar;","⦔":"&rpargt;","⨒":"&rppolint;","›":"&rsaquo;","𝓇":"&rscr;","⋊":"&rtimes;","▹":"&triangleright;","⧎":"&rtriltri;","⥨":"&ruluhar;","℞":"&rx;","ś":"&sacute;","⪴":"&scE;","⪸":"&succapprox;","š":"&scaron;","ş":"&scedil;","ŝ":"&scirc;","⪶":"&succneqq;","⪺":"&succnapprox;","⋩":"&succnsim;","⨓":"&scpolint;","с":"&scy;","⋅":"&sdot;","⩦":"&sdote;","⇘":"&seArr;","§":"&sect;",";":"&semi;","⤩":"&tosa;","✶":"&sext;","𝔰":"&sfr;","♯":"&sharp;","щ":"&shchcy;","ш":"&shcy;","­":"&shy;","σ":"&sigma;","ς":"&varsigma;","⩪":"&simdot;","⪞":"&simg;","⪠":"&simgE;","⪝":"&siml;","⪟":"&simlE;","≆":"&simne;","⨤":"&simplus;","⥲":"&simrarr;","⨳":"&smashp;","⧤":"&smeparsl;","⌣":"&ssmile;","⪪":"&smt;","⪬":"&smte;","⪬︀":"&smtes;","ь":"&softcy;","/":"&sol;","⧄":"&solb;","⌿":"&solbar;","𝕤":"&sopf;","♠":"&spadesuit;","⊓︀":"&sqcaps;","⊔︀":"&sqcups;","𝓈":"&sscr;","☆":"&star;","⊂":"&subset;","⫅":"&subseteqq;","⪽":"&subdot;","⫃":"&subedot;","⫁":"&submult;","⫋":"&subsetneqq;","⊊":"&subsetneq;","⪿":"&subplus;","⥹":"&subrarr;","⫇":"&subsim;","⫕":"&subsub;","⫓":"&subsup;","♪":"&sung;","¹":"&sup1;","²":"&sup2;","³":"&sup3;","⫆":"&supseteqq;","⪾":"&supdot;","⫘":"&supdsub;","⫄":"&supedot;","⟉":"&suphsol;","⫗":"&suphsub;","⥻":"&suplarr;","⫂":"&supmult;","⫌":"&supsetneqq;","⊋":"&supsetneq;","⫀":"&supplus;","⫈":"&supsim;","⫔":"&supsub;","⫖":"&supsup;","⇙":"&swArr;","⤪":"&swnwar;","ß":"&szlig;","⌖":"&target;","τ":"&tau;","ť":"&tcaron;","ţ":"&tcedil;","т":"&tcy;","⌕":"&telrec;","𝔱":"&tfr;","θ":"&theta;","ϑ":"&vartheta;","þ":"&thorn;","×":"&times;","⨱":"&timesbar;","⨰":"&timesd;","⌶":"&topbot;","⫱":"&topcir;","𝕥":"&topf;","⫚":"&topfork;","‴":"&tprime;","▵":"&utri;","≜":"&trie;","◬":"&tridot;","⨺":"&triminus;","⨹":"&triplus;","⧍":"&trisb;","⨻":"&tritime;","⏢":"&trpezium;","𝓉":"&tscr;","ц":"&tscy;","ћ":"&tshcy;","ŧ":"&tstrok;","⥣":"&uHar;","ú":"&uacute;","ў":"&ubrcy;","ŭ":"&ubreve;","û":"&ucirc;","у":"&ucy;","ű":"&udblac;","⥾":"&ufisht;","𝔲":"&ufr;","ù":"&ugrave;","▀":"&uhblk;","⌜":"&ulcorner;","⌏":"&ulcrop;","◸":"&ultri;","ū":"&umacr;","ų":"&uogon;","𝕦":"&uopf;","υ":"&upsilon;","⇈":"&uuarr;","⌝":"&urcorner;","⌎":"&urcrop;","ů":"&uring;","◹":"&urtri;","𝓊":"&uscr;","⋰":"&utdot;","ũ":"&utilde;","ü":"&uuml;","⦧":"&uwangle;","⫨":"&vBar;","⫩":"&vBarv;","⦜":"&vangrt;","⊊︀":"&vsubne;","⫋︀":"&vsubnE;","⊋︀":"&vsupne;","⫌︀":"&vsupnE;","в":"&vcy;","⊻":"&veebar;","≚":"&veeeq;","⋮":"&vellip;","𝔳":"&vfr;","𝕧":"&vopf;","𝓋":"&vscr;","⦚":"&vzigzag;","ŵ":"&wcirc;","⩟":"&wedbar;","≙":"&wedgeq;","℘":"&wp;","𝔴":"&wfr;","𝕨":"&wopf;","𝓌":"&wscr;","𝔵":"&xfr;","ξ":"&xi;","⋻":"&xnis;","𝕩":"&xopf;","𝓍":"&xscr;","ý":"&yacute;","я":"&yacy;","ŷ":"&ycirc;","ы":"&ycy;","¥":"&yen;","𝔶":"&yfr;","ї":"&yicy;","𝕪":"&yopf;","𝓎":"&yscr;","ю":"&yucy;","ÿ":"&yuml;","ź":"&zacute;","ž":"&zcaron;","з":"&zcy;","ż":"&zdot;","ζ":"&zeta;","𝔷":"&zfr;","ж":"&zhcy;","⇝":"&zigrarr;","𝕫":"&zopf;","𝓏":"&zscr;","‍":"&zwj;","‌":"&zwnj;"}}};

/***/ }),

/***/ "./node_modules/html-entities/lib/numeric-unicode-map.js":
/*!***************************************************************!*\
  !*** ./node_modules/html-entities/lib/numeric-unicode-map.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
Object.defineProperty(exports, "__esModule", ({value:true}));exports.numericUnicodeMap={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376};

/***/ }),

/***/ "./node_modules/html-entities/lib/surrogate-pairs.js":
/*!***********************************************************!*\
  !*** ./node_modules/html-entities/lib/surrogate-pairs.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
Object.defineProperty(exports, "__esModule", ({value:true}));exports.fromCodePoint=String.fromCodePoint||function(astralCodePoint){return String.fromCharCode(Math.floor((astralCodePoint-65536)/1024)+55296,(astralCodePoint-65536)%1024+56320)};exports.getCodePoint=String.prototype.codePointAt?function(input,position){return input.codePointAt(position)}:function(input,position){return(input.charCodeAt(position)-55296)*1024+input.charCodeAt(position+1)-56320+65536};exports.highSurrogateFrom=55296;exports.highSurrogateTo=56319;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":
/*!***************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/clients/WebSocketClient.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ WebSocketClient)
/* harmony export */ });
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }



var WebSocketClient = /*#__PURE__*/function () {
  /**
   * @param {string} url
   */
  function WebSocketClient(url) {
    _classCallCheck(this, WebSocketClient);

    this.client = new WebSocket(url);

    this.client.onerror = function (error) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.error(error);
    };
  }
  /**
   * @param {(...args: any[]) => void} f
   */


  _createClass(WebSocketClient, [{
    key: "onOpen",
    value: function onOpen(f) {
      this.client.onopen = f;
    }
    /**
     * @param {(...args: any[]) => void} f
     */

  }, {
    key: "onClose",
    value: function onClose(f) {
      this.client.onclose = f;
    } // call f with the message string as the first argument

    /**
     * @param {(...args: any[]) => void} f
     */

  }, {
    key: "onMessage",
    value: function onMessage(f) {
      this.client.onmessage = function (e) {
        f(e.data);
      };
    }
  }]);

  return WebSocketClient;
}();



/***/ }),

/***/ "./node_modules/webpack-dev-server/client/modules/logger/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/modules/logger/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./client-src/modules/logger/SyncBailHookFake.js":
/*!*******************************************************!*\
  !*** ./client-src/modules/logger/SyncBailHookFake.js ***!
  \*******************************************************/
/***/ (function(module) {


/**
 * Client stub for tapable SyncBailHook
 */

module.exports = function clientTapableSyncBailHook() {
  return {
    call: function call() {}
  };
};

/***/ }),

/***/ "./node_modules/webpack/lib/logging/Logger.js":
/*!****************************************************!*\
  !*** ./node_modules/webpack/lib/logging/Logger.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/


function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; }) !== "undefined" && iter[(typeof Symbol !== "undefined" ? Symbol : function (i) { return i; }).iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var LogType = Object.freeze({
  error:
  /** @type {"error"} */
  "error",
  // message, c style arguments
  warn:
  /** @type {"warn"} */
  "warn",
  // message, c style arguments
  info:
  /** @type {"info"} */
  "info",
  // message, c style arguments
  log:
  /** @type {"log"} */
  "log",
  // message, c style arguments
  debug:
  /** @type {"debug"} */
  "debug",
  // message, c style arguments
  trace:
  /** @type {"trace"} */
  "trace",
  // no arguments
  group:
  /** @type {"group"} */
  "group",
  // [label]
  groupCollapsed:
  /** @type {"groupCollapsed"} */
  "groupCollapsed",
  // [label]
  groupEnd:
  /** @type {"groupEnd"} */
  "groupEnd",
  // [label]
  profile:
  /** @type {"profile"} */
  "profile",
  // [profileName]
  profileEnd:
  /** @type {"profileEnd"} */
  "profileEnd",
  // [profileName]
  time:
  /** @type {"time"} */
  "time",
  // name, time as [seconds, nanoseconds]
  clear:
  /** @type {"clear"} */
  "clear",
  // no arguments
  status:
  /** @type {"status"} */
  "status" // message, arguments

});
exports.LogType = LogType;
/** @typedef {typeof LogType[keyof typeof LogType]} LogTypeEnum */

var LOG_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; })("webpack logger raw log method");
var TIMERS_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; })("webpack logger times");
var TIMERS_AGGREGATES_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; })("webpack logger aggregated times");

var WebpackLogger = /*#__PURE__*/function () {
  /**
   * @param {function(LogTypeEnum, any[]=): void} log log function
   * @param {function(string | function(): string): WebpackLogger} getChildLogger function to create child logger
   */
  function WebpackLogger(log, getChildLogger) {
    _classCallCheck(this, WebpackLogger);

    this[LOG_SYMBOL] = log;
    this.getChildLogger = getChildLogger;
  }

  _createClass(WebpackLogger, [{
    key: "error",
    value: function error() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this[LOG_SYMBOL](LogType.error, args);
    }
  }, {
    key: "warn",
    value: function warn() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      this[LOG_SYMBOL](LogType.warn, args);
    }
  }, {
    key: "info",
    value: function info() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      this[LOG_SYMBOL](LogType.info, args);
    }
  }, {
    key: "log",
    value: function log() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      this[LOG_SYMBOL](LogType.log, args);
    }
  }, {
    key: "debug",
    value: function debug() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      this[LOG_SYMBOL](LogType.debug, args);
    }
  }, {
    key: "assert",
    value: function assert(assertion) {
      if (!assertion) {
        for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
          args[_key6 - 1] = arguments[_key6];
        }

        this[LOG_SYMBOL](LogType.error, args);
      }
    }
  }, {
    key: "trace",
    value: function trace() {
      this[LOG_SYMBOL](LogType.trace, ["Trace"]);
    }
  }, {
    key: "clear",
    value: function clear() {
      this[LOG_SYMBOL](LogType.clear);
    }
  }, {
    key: "status",
    value: function status() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      this[LOG_SYMBOL](LogType.status, args);
    }
  }, {
    key: "group",
    value: function group() {
      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }

      this[LOG_SYMBOL](LogType.group, args);
    }
  }, {
    key: "groupCollapsed",
    value: function groupCollapsed() {
      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }

      this[LOG_SYMBOL](LogType.groupCollapsed, args);
    }
  }, {
    key: "groupEnd",
    value: function groupEnd() {
      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }

      this[LOG_SYMBOL](LogType.groupEnd, args);
    }
  }, {
    key: "profile",
    value: function profile(label) {
      this[LOG_SYMBOL](LogType.profile, [label]);
    }
  }, {
    key: "profileEnd",
    value: function profileEnd(label) {
      this[LOG_SYMBOL](LogType.profileEnd, [label]);
    }
  }, {
    key: "time",
    value: function time(label) {
      this[TIMERS_SYMBOL] = this[TIMERS_SYMBOL] || new Map();
      this[TIMERS_SYMBOL].set(label, process.hrtime());
    }
  }, {
    key: "timeLog",
    value: function timeLog(label) {
      var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);

      if (!prev) {
        throw new Error("No such label '".concat(label, "' for WebpackLogger.timeLog()"));
      }

      var time = process.hrtime(prev);
      this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
    }
  }, {
    key: "timeEnd",
    value: function timeEnd(label) {
      var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);

      if (!prev) {
        throw new Error("No such label '".concat(label, "' for WebpackLogger.timeEnd()"));
      }

      var time = process.hrtime(prev);
      this[TIMERS_SYMBOL].delete(label);
      this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
    }
  }, {
    key: "timeAggregate",
    value: function timeAggregate(label) {
      var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);

      if (!prev) {
        throw new Error("No such label '".concat(label, "' for WebpackLogger.timeAggregate()"));
      }

      var time = process.hrtime(prev);
      this[TIMERS_SYMBOL].delete(label);
      this[TIMERS_AGGREGATES_SYMBOL] = this[TIMERS_AGGREGATES_SYMBOL] || new Map();
      var current = this[TIMERS_AGGREGATES_SYMBOL].get(label);

      if (current !== undefined) {
        if (time[1] + current[1] > 1e9) {
          time[0] += current[0] + 1;
          time[1] = time[1] - 1e9 + current[1];
        } else {
          time[0] += current[0];
          time[1] += current[1];
        }
      }

      this[TIMERS_AGGREGATES_SYMBOL].set(label, time);
    }
  }, {
    key: "timeAggregateEnd",
    value: function timeAggregateEnd(label) {
      if (this[TIMERS_AGGREGATES_SYMBOL] === undefined) return;
      var time = this[TIMERS_AGGREGATES_SYMBOL].get(label);
      if (time === undefined) return;
      this[TIMERS_AGGREGATES_SYMBOL].delete(label);
      this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
    }
  }]);

  return WebpackLogger;
}();

exports.Logger = WebpackLogger;

/***/ }),

/***/ "./node_modules/webpack/lib/logging/createConsoleLogger.js":
/*!*****************************************************************!*\
  !*** ./node_modules/webpack/lib/logging/createConsoleLogger.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_10785__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/


function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; }) !== "undefined" && iter[(typeof Symbol !== "undefined" ? Symbol : function (i) { return i; }).iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

var _require = __nested_webpack_require_10785__(/*! ./Logger */ "./node_modules/webpack/lib/logging/Logger.js"),
    LogType = _require.LogType;
/** @typedef {import("../../declarations/WebpackOptions").FilterItemTypes} FilterItemTypes */

/** @typedef {import("../../declarations/WebpackOptions").FilterTypes} FilterTypes */

/** @typedef {import("./Logger").LogTypeEnum} LogTypeEnum */

/** @typedef {function(string): boolean} FilterFunction */

/**
 * @typedef {Object} LoggerConsole
 * @property {function(): void} clear
 * @property {function(): void} trace
 * @property {(...args: any[]) => void} info
 * @property {(...args: any[]) => void} log
 * @property {(...args: any[]) => void} warn
 * @property {(...args: any[]) => void} error
 * @property {(...args: any[]) => void=} debug
 * @property {(...args: any[]) => void=} group
 * @property {(...args: any[]) => void=} groupCollapsed
 * @property {(...args: any[]) => void=} groupEnd
 * @property {(...args: any[]) => void=} status
 * @property {(...args: any[]) => void=} profile
 * @property {(...args: any[]) => void=} profileEnd
 * @property {(...args: any[]) => void=} logTime
 */

/**
 * @typedef {Object} LoggerOptions
 * @property {false|true|"none"|"error"|"warn"|"info"|"log"|"verbose"} level loglevel
 * @property {FilterTypes|boolean} debug filter for debug logging
 * @property {LoggerConsole} console the console to log to
 */

/**
 * @param {FilterItemTypes} item an input item
 * @returns {FilterFunction} filter function
 */


var filterToFunction = function filterToFunction(item) {
  if (typeof item === "string") {
    var regExp = new RegExp("[\\\\/]".concat(item.replace( // eslint-disable-next-line no-useless-escape
    /[-[\]{}()*+?.\\^$|]/g, "\\$&"), "([\\\\/]|$|!|\\?)"));
    return function (ident) {
      return regExp.test(ident);
    };
  }

  if (item && typeof item === "object" && typeof item.test === "function") {
    return function (ident) {
      return item.test(ident);
    };
  }

  if (typeof item === "function") {
    return item;
  }

  if (typeof item === "boolean") {
    return function () {
      return item;
    };
  }
};
/**
 * @enum {number}
 */


var LogLevel = {
  none: 6,
  false: 6,
  error: 5,
  warn: 4,
  info: 3,
  log: 2,
  true: 2,
  verbose: 1
};
/**
 * @param {LoggerOptions} options options object
 * @returns {function(string, LogTypeEnum, any[]): void} logging function
 */

module.exports = function (_ref) {
  var _ref$level = _ref.level,
      level = _ref$level === void 0 ? "info" : _ref$level,
      _ref$debug = _ref.debug,
      debug = _ref$debug === void 0 ? false : _ref$debug,
      console = _ref.console;
  var debugFilters = typeof debug === "boolean" ? [function () {
    return debug;
  }] :
  /** @type {FilterItemTypes[]} */
  [].concat(debug).map(filterToFunction);
  /** @type {number} */

  var loglevel = LogLevel["".concat(level)] || 0;
  /**
   * @param {string} name name of the logger
   * @param {LogTypeEnum} type type of the log entry
   * @param {any[]} args arguments of the log entry
   * @returns {void}
   */

  var logger = function logger(name, type, args) {
    var labeledArgs = function labeledArgs() {
      if (Array.isArray(args)) {
        if (args.length > 0 && typeof args[0] === "string") {
          return ["[".concat(name, "] ").concat(args[0])].concat(_toConsumableArray(args.slice(1)));
        } else {
          return ["[".concat(name, "]")].concat(_toConsumableArray(args));
        }
      } else {
        return [];
      }
    };

    var debug = debugFilters.some(function (f) {
      return f(name);
    });

    switch (type) {
      case LogType.debug:
        if (!debug) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

        if (typeof console.debug === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.debug.apply(console, _toConsumableArray(labeledArgs()));
        } else {
          console.log.apply(console, _toConsumableArray(labeledArgs()));
        }

        break;

      case LogType.log:
        if (!debug && loglevel > LogLevel.log) return;
        console.log.apply(console, _toConsumableArray(labeledArgs()));
        break;

      case LogType.info:
        if (!debug && loglevel > LogLevel.info) return;
        console.info.apply(console, _toConsumableArray(labeledArgs()));
        break;

      case LogType.warn:
        if (!debug && loglevel > LogLevel.warn) return;
        console.warn.apply(console, _toConsumableArray(labeledArgs()));
        break;

      case LogType.error:
        if (!debug && loglevel > LogLevel.error) return;
        console.error.apply(console, _toConsumableArray(labeledArgs()));
        break;

      case LogType.trace:
        if (!debug) return;
        console.trace();
        break;

      case LogType.groupCollapsed:
        if (!debug && loglevel > LogLevel.log) return;

        if (!debug && loglevel > LogLevel.verbose) {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          if (typeof console.groupCollapsed === "function") {
            // eslint-disable-next-line node/no-unsupported-features/node-builtins
            console.groupCollapsed.apply(console, _toConsumableArray(labeledArgs()));
          } else {
            console.log.apply(console, _toConsumableArray(labeledArgs()));
          }

          break;
        }

      // falls through

      case LogType.group:
        if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

        if (typeof console.group === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.group.apply(console, _toConsumableArray(labeledArgs()));
        } else {
          console.log.apply(console, _toConsumableArray(labeledArgs()));
        }

        break;

      case LogType.groupEnd:
        if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

        if (typeof console.groupEnd === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.groupEnd();
        }

        break;

      case LogType.time:
        {
          if (!debug && loglevel > LogLevel.log) return;
          var ms = args[1] * 1000 + args[2] / 1000000;
          var msg = "[".concat(name, "] ").concat(args[0], ": ").concat(ms, " ms");

          if (typeof console.logTime === "function") {
            console.logTime(msg);
          } else {
            console.log(msg);
          }

          break;
        }

      case LogType.profile:
        // eslint-disable-next-line node/no-unsupported-features/node-builtins
        if (typeof console.profile === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.profile.apply(console, _toConsumableArray(labeledArgs()));
        }

        break;

      case LogType.profileEnd:
        // eslint-disable-next-line node/no-unsupported-features/node-builtins
        if (typeof console.profileEnd === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.profileEnd.apply(console, _toConsumableArray(labeledArgs()));
        }

        break;

      case LogType.clear:
        if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

        if (typeof console.clear === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.clear();
        }

        break;

      case LogType.status:
        if (!debug && loglevel > LogLevel.info) return;

        if (typeof console.status === "function") {
          if (args.length === 0) {
            console.status();
          } else {
            console.status.apply(console, _toConsumableArray(labeledArgs()));
          }
        } else {
          if (args.length !== 0) {
            console.info.apply(console, _toConsumableArray(labeledArgs()));
          }
        }

        break;

      default:
        throw new Error("Unexpected LogType ".concat(type));
    }
  };

  return logger;
};

/***/ }),

/***/ "./node_modules/webpack/lib/logging/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/webpack/lib/logging/runtime.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_20872__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/


function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var SyncBailHook = __nested_webpack_require_20872__(/*! tapable/lib/SyncBailHook */ "./client-src/modules/logger/SyncBailHookFake.js");

var _require = __nested_webpack_require_20872__(/*! ./Logger */ "./node_modules/webpack/lib/logging/Logger.js"),
    Logger = _require.Logger;

var createConsoleLogger = __nested_webpack_require_20872__(/*! ./createConsoleLogger */ "./node_modules/webpack/lib/logging/createConsoleLogger.js");
/** @type {createConsoleLogger.LoggerOptions} */


var currentDefaultLoggerOptions = {
  level: "info",
  debug: false,
  console: console
};
var currentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);
/**
 * @param {string} name name of the logger
 * @returns {Logger} a logger
 */

exports.getLogger = function (name) {
  return new Logger(function (type, args) {
    if (exports.hooks.log.call(name, type, args) === undefined) {
      currentDefaultLogger(name, type, args);
    }
  }, function (childName) {
    return exports.getLogger("".concat(name, "/").concat(childName));
  });
};
/**
 * @param {createConsoleLogger.LoggerOptions} options new options, merge with old options
 * @returns {void}
 */


exports.configureDefaultLogger = function (options) {
  _extends(currentDefaultLoggerOptions, options);

  currentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);
};

exports.hooks = {
  log: new SyncBailHook(["origin", "type", "args"])
};

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_22988__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_22988__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__nested_webpack_require_22988__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__nested_webpack_require_22988__.o(definition, key) && !__nested_webpack_require_22988__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__nested_webpack_require_22988__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__nested_webpack_require_22988__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
!function() {
/*!********************************************!*\
  !*** ./client-src/modules/logger/index.js ***!
  \********************************************/
__nested_webpack_require_22988__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_22988__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* reexport default export from named module */ webpack_lib_logging_runtime_js__WEBPACK_IMPORTED_MODULE_0__; }
/* harmony export */ });
/* harmony import */ var webpack_lib_logging_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_22988__(/*! webpack/lib/logging/runtime.js */ "./node_modules/webpack/lib/logging/runtime.js");

}();
var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ })()
;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/overlay.js":
/*!***********************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/overlay.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "formatProblem": () => (/* binding */ formatProblem),
/* harmony export */   "hide": () => (/* binding */ hide),
/* harmony export */   "show": () => (/* binding */ show)
/* harmony export */ });
/* harmony import */ var ansi_html_community__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ansi-html-community */ "./node_modules/ansi-html-community/index.js");
/* harmony import */ var ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ansi_html_community__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var html_entities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! html-entities */ "./node_modules/html-entities/lib/index.js");
/* harmony import */ var html_entities__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(html_entities__WEBPACK_IMPORTED_MODULE_1__);
// The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)
// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).


var colors = {
  reset: ["transparent", "transparent"],
  black: "181818",
  red: "E36049",
  green: "B3CB74",
  yellow: "FFD080",
  blue: "7CAFC2",
  magenta: "7FACCA",
  cyan: "C3C2EF",
  lightgrey: "EBE7E3",
  darkgrey: "6D7891"
};
/** @type {HTMLIFrameElement | null | undefined} */

var iframeContainerElement;
/** @type {HTMLDivElement | null | undefined} */

var containerElement;
/** @type {Array<(element: HTMLDivElement) => void>} */

var onLoadQueue = [];
/** @type {TrustedTypePolicy | undefined} */

var overlayTrustedTypesPolicy;
ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default().setColors(colors);
/**
 * @param {string | null} trustedTypesPolicyName
 */

function createContainer(trustedTypesPolicyName) {
  // Enable Trusted Types if they are available in the current browser.
  if (window.trustedTypes) {
    overlayTrustedTypesPolicy = window.trustedTypes.createPolicy(trustedTypesPolicyName || "webpack-dev-server#overlay", {
      createHTML: function createHTML(value) {
        return value;
      }
    });
  }

  iframeContainerElement = document.createElement("iframe");
  iframeContainerElement.id = "webpack-dev-server-client-overlay";
  iframeContainerElement.src = "about:blank";
  iframeContainerElement.style.position = "fixed";
  iframeContainerElement.style.left = 0;
  iframeContainerElement.style.top = 0;
  iframeContainerElement.style.right = 0;
  iframeContainerElement.style.bottom = 0;
  iframeContainerElement.style.width = "100vw";
  iframeContainerElement.style.height = "100vh";
  iframeContainerElement.style.border = "none";
  iframeContainerElement.style.zIndex = 9999999999;

  iframeContainerElement.onload = function () {
    containerElement =
    /** @type {Document} */

    /** @type {HTMLIFrameElement} */
    iframeContainerElement.contentDocument.createElement("div");
    containerElement.id = "webpack-dev-server-client-overlay-div";
    containerElement.style.position = "fixed";
    containerElement.style.boxSizing = "border-box";
    containerElement.style.left = 0;
    containerElement.style.top = 0;
    containerElement.style.right = 0;
    containerElement.style.bottom = 0;
    containerElement.style.width = "100vw";
    containerElement.style.height = "100vh";
    containerElement.style.backgroundColor = "rgba(0, 0, 0, 0.85)";
    containerElement.style.color = "#E8E8E8";
    containerElement.style.fontFamily = "Menlo, Consolas, monospace";
    containerElement.style.fontSize = "large";
    containerElement.style.padding = "2rem";
    containerElement.style.lineHeight = "1.2";
    containerElement.style.whiteSpace = "pre-wrap";
    containerElement.style.overflow = "auto";
    var headerElement = document.createElement("span");
    headerElement.innerText = "Compiled with problems:";
    var closeButtonElement = document.createElement("button");
    closeButtonElement.innerText = "X";
    closeButtonElement.style.background = "transparent";
    closeButtonElement.style.border = "none";
    closeButtonElement.style.fontSize = "20px";
    closeButtonElement.style.fontWeight = "bold";
    closeButtonElement.style.color = "white";
    closeButtonElement.style.cursor = "pointer";
    closeButtonElement.style.cssFloat = "right"; // @ts-ignore

    closeButtonElement.style.styleFloat = "right";
    closeButtonElement.addEventListener("click", function () {
      hide();
    });
    containerElement.appendChild(headerElement);
    containerElement.appendChild(closeButtonElement);
    containerElement.appendChild(document.createElement("br"));
    containerElement.appendChild(document.createElement("br"));
    /** @type {Document} */

    /** @type {HTMLIFrameElement} */
    iframeContainerElement.contentDocument.body.appendChild(containerElement);
    onLoadQueue.forEach(function (onLoad) {
      onLoad(
      /** @type {HTMLDivElement} */
      containerElement);
    });
    onLoadQueue = [];
    /** @type {HTMLIFrameElement} */

    iframeContainerElement.onload = null;
  };

  document.body.appendChild(iframeContainerElement);
}
/**
 * @param {(element: HTMLDivElement) => void} callback
 * @param {string | null} trustedTypesPolicyName
 */


function ensureOverlayExists(callback, trustedTypesPolicyName) {
  if (containerElement) {
    // Everything is ready, call the callback right away.
    callback(containerElement);
    return;
  }

  onLoadQueue.push(callback);

  if (iframeContainerElement) {
    return;
  }

  createContainer(trustedTypesPolicyName);
} // Successful compilation.


function hide() {
  if (!iframeContainerElement) {
    return;
  } // Clean up and reset internal state.


  document.body.removeChild(iframeContainerElement);
  iframeContainerElement = null;
  containerElement = null;
}
/**
 * @param {string} type
 * @param {string  | { file?: string, moduleName?: string, loc?: string, message?: string }} item
 * @returns {{ header: string, body: string }}
 */


function formatProblem(type, item) {
  var header = type === "warning" ? "WARNING" : "ERROR";
  var body = "";

  if (typeof item === "string") {
    body += item;
  } else {
    var file = item.file || ""; // eslint-disable-next-line no-nested-ternary

    var moduleName = item.moduleName ? item.moduleName.indexOf("!") !== -1 ? "".concat(item.moduleName.replace(/^(\s|\S)*!/, ""), " (").concat(item.moduleName, ")") : "".concat(item.moduleName) : "";
    var loc = item.loc;
    header += "".concat(moduleName || file ? " in ".concat(moduleName ? "".concat(moduleName).concat(file ? " (".concat(file, ")") : "") : file).concat(loc ? " ".concat(loc) : "") : "");
    body += item.message || "";
  }

  return {
    header: header,
    body: body
  };
} // Compilation with errors (e.g. syntax error or missing modules).

/**
 * @param {string} type
 * @param {Array<string  | { file?: string, moduleName?: string, loc?: string, message?: string }>} messages
 * @param {string | null} trustedTypesPolicyName
 */


function show(type, messages, trustedTypesPolicyName) {
  ensureOverlayExists(function () {
    messages.forEach(function (message) {
      var entryElement = document.createElement("div");
      var typeElement = document.createElement("span");

      var _formatProblem = formatProblem(type, message),
          header = _formatProblem.header,
          body = _formatProblem.body;

      typeElement.innerText = header;
      typeElement.style.color = "#".concat(colors.red); // Make it look similar to our terminal.

      var text = ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default()((0,html_entities__WEBPACK_IMPORTED_MODULE_1__.encode)(body));
      var messageTextNode = document.createElement("div");
      messageTextNode.innerHTML = overlayTrustedTypesPolicy ? overlayTrustedTypesPolicy.createHTML(text) : text;
      entryElement.appendChild(typeElement);
      entryElement.appendChild(document.createElement("br"));
      entryElement.appendChild(document.createElement("br"));
      entryElement.appendChild(messageTextNode);
      entryElement.appendChild(document.createElement("br"));
      entryElement.appendChild(document.createElement("br"));
      /** @type {HTMLDivElement} */

      containerElement.appendChild(entryElement);
    });
  }, trustedTypesPolicyName);
}



/***/ }),

/***/ "./node_modules/webpack-dev-server/client/socket.js":
/*!**********************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/socket.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "client": () => (/* binding */ client),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _clients_WebSocketClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clients/WebSocketClient.js */ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
/* provided dependency */ var __webpack_dev_server_client__ = __webpack_require__(/*! ./node_modules/webpack-dev-server/client/clients/WebSocketClient.js */ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js");
/* global __webpack_dev_server_client__ */

 // this WebsocketClient is here as a default fallback, in case the client is not injected

/* eslint-disable camelcase */

var Client = // eslint-disable-next-line no-nested-ternary
typeof __webpack_dev_server_client__ !== "undefined" ? typeof __webpack_dev_server_client__.default !== "undefined" ? __webpack_dev_server_client__.default : __webpack_dev_server_client__ : _clients_WebSocketClient_js__WEBPACK_IMPORTED_MODULE_0__["default"];
/* eslint-enable camelcase */

var retries = 0;
var maxRetries = 10; // Initialized client is exported so external consumers can utilize the same instance
// It is mutable to enforce singleton
// eslint-disable-next-line import/no-mutable-exports

var client = null;
/**
 * @param {string} url
 * @param {{ [handler: string]: (data?: any, params?: any) => any }} handlers
 * @param {number} [reconnect]
 */

var socket = function initSocket(url, handlers, reconnect) {
  client = new Client(url);
  client.onOpen(function () {
    retries = 0;

    if (typeof reconnect !== "undefined") {
      maxRetries = reconnect;
    }
  });
  client.onClose(function () {
    if (retries === 0) {
      handlers.close();
    } // Try to reconnect.


    client = null; // After 10 retries stop trying, to prevent logspam.

    if (retries < maxRetries) {
      // Exponentially increase timeout to reconnect.
      // Respectfully copied from the package `got`.
      // eslint-disable-next-line no-restricted-properties
      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
      retries += 1;
      _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.log.info("Trying to reconnect...");
      setTimeout(function () {
        socket(url, handlers, reconnect);
      }, retryInMs);
    }
  });
  client.onMessage(
  /**
   * @param {any} data
   */
  function (data) {
    var message = JSON.parse(data);

    if (handlers[message.type]) {
      handlers[message.type](message.data, message.params);
    }
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (socket);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/createSocketURL.js":
/*!*************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/createSocketURL.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @param {{ protocol?: string, auth?: string, hostname?: string, port?: string, pathname?: string, search?: string, hash?: string, slashes?: boolean }} objURL
 * @returns {string}
 */
function format(objURL) {
  var protocol = objURL.protocol || "";

  if (protocol && protocol.substr(-1) !== ":") {
    protocol += ":";
  }

  var auth = objURL.auth || "";

  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ":");
    auth += "@";
  }

  var host = "";

  if (objURL.hostname) {
    host = auth + (objURL.hostname.indexOf(":") === -1 ? objURL.hostname : "[".concat(objURL.hostname, "]"));

    if (objURL.port) {
      host += ":".concat(objURL.port);
    }
  }

  var pathname = objURL.pathname || "";

  if (objURL.slashes) {
    host = "//".concat(host || "");

    if (pathname && pathname.charAt(0) !== "/") {
      pathname = "/".concat(pathname);
    }
  } else if (!host) {
    host = "";
  }

  var search = objURL.search || "";

  if (search && search.charAt(0) !== "?") {
    search = "?".concat(search);
  }

  var hash = objURL.hash || "";

  if (hash && hash.charAt(0) !== "#") {
    hash = "#".concat(hash);
  }

  pathname = pathname.replace(/[?#]/g,
  /**
   * @param {string} match
   * @returns {string}
   */
  function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace("#", "%23");
  return "".concat(protocol).concat(host).concat(pathname).concat(search).concat(hash);
}
/**
 * @param {URL & { fromCurrentScript?: boolean }} parsedURL
 * @returns {string}
 */


function createSocketURL(parsedURL) {
  var hostname = parsedURL.hostname; // Node.js module parses it as `::`
  // `new URL(urlString, [baseURLString])` parses it as '[::]'

  var isInAddrAny = hostname === "0.0.0.0" || hostname === "::" || hostname === "[::]"; // why do we need this check?
  // hostname n/a for file protocol (example, when using electron, ionic)
  // see: https://github.com/webpack/webpack-dev-server/pull/384

  if (isInAddrAny && self.location.hostname && self.location.protocol.indexOf("http") === 0) {
    hostname = self.location.hostname;
  }

  var socketURLProtocol = parsedURL.protocol || self.location.protocol; // When https is used in the app, secure web sockets are always necessary because the browser doesn't accept non-secure web sockets.

  if (socketURLProtocol === "auto:" || hostname && isInAddrAny && self.location.protocol === "https:") {
    socketURLProtocol = self.location.protocol;
  }

  socketURLProtocol = socketURLProtocol.replace(/^(?:http|.+-extension|file)/i, "ws");
  var socketURLAuth = ""; // `new URL(urlString, [baseURLstring])` doesn't have `auth` property
  // Parse authentication credentials in case we need them

  if (parsedURL.username) {
    socketURLAuth = parsedURL.username; // Since HTTP basic authentication does not allow empty username,
    // we only include password if the username is not empty.

    if (parsedURL.password) {
      // Result: <username>:<password>
      socketURLAuth = socketURLAuth.concat(":", parsedURL.password);
    }
  } // In case the host is a raw IPv6 address, it can be enclosed in
  // the brackets as the brackets are needed in the final URL string.
  // Need to remove those as url.format blindly adds its own set of brackets
  // if the host string contains colons. That would lead to non-working
  // double brackets (e.g. [[::]]) host
  //
  // All of these web socket url params are optionally passed in through resourceQuery,
  // so we need to fall back to the default if they are not provided


  var socketURLHostname = (hostname || self.location.hostname || "localhost").replace(/^\[(.*)\]$/, "$1");
  var socketURLPort = parsedURL.port;

  if (!socketURLPort || socketURLPort === "0") {
    socketURLPort = self.location.port;
  } // If path is provided it'll be passed in via the resourceQuery as a
  // query param so it has to be parsed out of the querystring in order for the
  // client to open the socket to the correct location.


  var socketURLPathname = "/ws";

  if (parsedURL.pathname && !parsedURL.fromCurrentScript) {
    socketURLPathname = parsedURL.pathname;
  }

  return format({
    protocol: socketURLProtocol,
    auth: socketURLAuth,
    hostname: socketURLHostname,
    port: socketURLPort,
    pathname: socketURLPathname,
    slashes: true
  });
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createSocketURL);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":
/*!********************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @returns {string}
 */
function getCurrentScriptSource() {
  // `document.currentScript` is the most accurate way to find the current script,
  // but is not supported in all browsers.
  if (document.currentScript) {
    return document.currentScript.getAttribute("src");
  } // Fallback to getting all scripts running in the document.


  var scriptElements = document.scripts || [];
  var scriptElementsWithSrc = Array.prototype.filter.call(scriptElements, function (element) {
    return element.getAttribute("src");
  });

  if (scriptElementsWithSrc.length > 0) {
    var currentScript = scriptElementsWithSrc[scriptElementsWithSrc.length - 1];
    return currentScript.getAttribute("src");
  } // Fail as there was no script to use.


  throw new Error("[webpack-dev-server] Failed to get current script source.");
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getCurrentScriptSource);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/log.js":
/*!*************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/log.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "log": () => (/* binding */ log),
/* harmony export */   "setLogLevel": () => (/* binding */ setLogLevel)
/* harmony export */ });
/* harmony import */ var _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/logger/index.js */ "./node_modules/webpack-dev-server/client/modules/logger/index.js");
/* harmony import */ var _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0__);

var name = "webpack-dev-server"; // default level is set on the client side, so it does not need
// to be set by the CLI or API

var defaultLevel = "info"; // options new options, merge with old options

/**
 * @param {false | true | "none" | "error" | "warn" | "info" | "log" | "verbose"} level
 * @returns {void}
 */

function setLogLevel(level) {
  _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default().configureDefaultLogger({
    level: level
  });
}

setLogLevel(defaultLevel);
var log = _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default().getLogger(name);


/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/parseURL.js":
/*!******************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/parseURL.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getCurrentScriptSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getCurrentScriptSource.js */ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");

/**
 * @param {string} resourceQuery
 * @returns {{ [key: string]: string | boolean }}
 */

function parseURL(resourceQuery) {
  /** @type {{ [key: string]: string }} */
  var options = {};

  if (typeof resourceQuery === "string" && resourceQuery !== "") {
    var searchParams = resourceQuery.slice(1).split("&");

    for (var i = 0; i < searchParams.length; i++) {
      var pair = searchParams[i].split("=");
      options[pair[0]] = decodeURIComponent(pair[1]);
    }
  } else {
    // Else, get the url from the <script> this file was called with.
    var scriptSource = (0,_getCurrentScriptSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])();
    var scriptSourceURL;

    try {
      // The placeholder `baseURL` with `window.location.href`,
      // is to allow parsing of path-relative or protocol-relative URLs,
      // and will have no effect if `scriptSource` is a fully valid URL.
      scriptSourceURL = new URL(scriptSource, self.location.href);
    } catch (error) {// URL parsing failed, do nothing.
      // We will still proceed to see if we can recover using `resourceQuery`
    }

    if (scriptSourceURL) {
      options = scriptSourceURL;
      options.fromCurrentScript = true;
    }
  }

  return options;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parseURL);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/reloadApp.js":
/*!*******************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/reloadApp.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webpack/hot/emitter.js */ "./node_modules/webpack/hot/emitter.js");
/* harmony import */ var webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");


/** @typedef {import("../index").Options} Options
/** @typedef {import("../index").Status} Status

/**
 * @param {Options} options
 * @param {Status} status
 */

function reloadApp(_ref, status) {
  var hot = _ref.hot,
      liveReload = _ref.liveReload;

  if (status.isUnloading) {
    return;
  }

  var currentHash = status.currentHash,
      previousHash = status.previousHash;
  var isInitial = currentHash.indexOf(
  /** @type {string} */
  previousHash) >= 0;

  if (isInitial) {
    return;
  }
  /**
   * @param {Window} rootWindow
   * @param {number} intervalId
   */


  function applyReload(rootWindow, intervalId) {
    clearInterval(intervalId);
    _log_js__WEBPACK_IMPORTED_MODULE_1__.log.info("App updated. Reloading...");
    rootWindow.location.reload();
  }

  var search = self.location.search.toLowerCase();
  var allowToHot = search.indexOf("webpack-dev-server-hot=false") === -1;
  var allowToLiveReload = search.indexOf("webpack-dev-server-live-reload=false") === -1;

  if (hot && allowToHot) {
    _log_js__WEBPACK_IMPORTED_MODULE_1__.log.info("App hot update...");
    webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0___default().emit("webpackHotUpdate", status.currentHash);

    if (typeof self !== "undefined" && self.window) {
      // broadcast update to window
      self.postMessage("webpackHotUpdate".concat(status.currentHash), "*");
    }
  } // allow refreshing the page only if liveReload isn't disabled
  else if (liveReload && allowToLiveReload) {
    var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)

    var intervalId = self.setInterval(function () {
      if (rootWindow.location.protocol !== "about:") {
        // reload immediately if protocol is valid
        applyReload(rootWindow, intervalId);
      } else {
        rootWindow = rootWindow.parent;

        if (rootWindow.parent === rootWindow) {
          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways
          applyReload(rootWindow, intervalId);
        }
      }
    });
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (reloadApp);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/sendMessage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/sendMessage.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* global __resourceQuery WorkerGlobalScope */
// Send messages to the outside, so plugins can consume it.

/**
 * @param {string} type
 * @param {any} [data]
 */
function sendMsg(type, data) {
  if (typeof self !== "undefined" && (typeof WorkerGlobalScope === "undefined" || !(self instanceof WorkerGlobalScope))) {
    self.postMessage({
      type: "webpack".concat(type),
      data: data
    }, "*");
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sendMsg);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/stripAnsi.js":
/*!*******************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/stripAnsi.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var ansiRegex = new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|"), "g");
/**
 *
 * Strip [ANSI escape codes](https://en.wikipedia.org/wiki/ANSI_escape_code) from a string.
 * Adapted from code originally released by Sindre Sorhus
 * Licensed the MIT License
 *
 * @param {string} string
 * @return {string}
 */

function stripAnsi(string) {
  if (typeof string !== "string") {
    throw new TypeError("Expected a `string`, got `".concat(typeof string, "`"));
  }

  return string.replace(ansiRegex, "");
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stripAnsi);

/***/ }),

/***/ "./node_modules/webpack/hot/emitter.js":
/*!*********************************************!*\
  !*** ./node_modules/webpack/hot/emitter.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/events/events.js");
module.exports = new EventEmitter();


/***/ }),

/***/ "./node_modules/webpack/hot/log.js":
/*!*****************************************!*\
  !*** ./node_modules/webpack/hot/log.js ***!
  \*****************************************/
/***/ ((module) => {

var logLevel = "info";

function dummy() {}

function shouldLog(level) {
	var shouldLog =
		(logLevel === "info" && level === "info") ||
		(["info", "warning"].indexOf(logLevel) >= 0 && level === "warning") ||
		(["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error");
	return shouldLog;
}

function logGroup(logFn) {
	return function (level, msg) {
		if (shouldLog(level)) {
			logFn(msg);
		}
	};
}

module.exports = function (level, msg) {
	if (shouldLog(level)) {
		if (level === "info") {
			console.log(msg);
		} else if (level === "warning") {
			console.warn(msg);
		} else if (level === "error") {
			console.error(msg);
		}
	}
};

/* eslint-disable node/no-unsupported-features/node-builtins */
var group = console.group || dummy;
var groupCollapsed = console.groupCollapsed || dummy;
var groupEnd = console.groupEnd || dummy;
/* eslint-enable node/no-unsupported-features/node-builtins */

module.exports.group = logGroup(group);

module.exports.groupCollapsed = logGroup(groupCollapsed);

module.exports.groupEnd = logGroup(groupEnd);

module.exports.setLogLevel = function (level) {
	logLevel = level;
};

module.exports.formatError = function (err) {
	var message = err.message;
	var stack = err.stack;
	if (!stack) {
		return message;
	} else if (stack.indexOf(message) < 0) {
		return message + "\n" + stack;
	} else {
		return stack;
	}
};


/***/ }),

/***/ "./src/libraries/file-saver.min.js":
/*!*****************************************!*\
  !*** ./src/libraries/file-saver.min.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(a,b){if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}})(this,function(){"use strict";function b(a,b){return"undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open("GET",a),d.responseType="blob",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error("could not download file")},d.send()}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"))}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof __webpack_require__.g&&__webpack_require__.g.global===__webpack_require__.g?__webpack_require__.g:void 0,a=/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open("","_blank"),g&&(g.document.title=g.document.body.innerText="downloading..."),"string"==typeof b)return c(b,d,e);var h="application/octet-stream"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\/[\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&"undefined"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g, true&&(module.exports=g)});

//# sourceMappingURL=FileSaver.min.js.map


/***/ }),

/***/ "./src/libraries/gsap.min.js":
/*!***********************************!*\
  !*** ./src/libraries/gsap.min.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports) {

/*!
 * GSAP 3.11.3
 * https://greensock.com
 *
 * @license Copyright 2022, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
 */

!function(t,e){ true?e(exports):0}(this,function(e){"use strict";function _inheritsLoose(t,e){t.prototype=Object.create(e.prototype),(t.prototype.constructor=t).__proto__=e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function r(t){return"string"==typeof t}function s(t){return"function"==typeof t}function t(t){return"number"==typeof t}function u(t){return void 0===t}function v(t){return"object"==typeof t}function w(t){return!1!==t}function x(){return"undefined"!=typeof window}function y(t){return s(t)||r(t)}function P(t){return(i=yt(t,ot))&&Ce}function Q(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")}function R(t,e){return!e&&console.warn(t)}function S(t,e){return t&&(ot[t]=e)&&i&&(i[t]=e)||ot}function T(){return 0}function ea(t){var e,r,i=t[0];if(v(i)||s(i)||(t=[t]),!(e=(i._gsap||{}).harness)){for(r=gt.length;r--&&!gt[r].targetTest(i););e=gt[r]}for(r=t.length;r--;)t[r]&&(t[r]._gsap||(t[r]._gsap=new jt(t[r],e)))||t.splice(r,1);return t}function fa(t){return t._gsap||ea(Ot(t))[0]._gsap}function ga(t,e,r){return(r=t[e])&&s(r)?t[e]():u(r)&&t.getAttribute&&t.getAttribute(e)||r}function ha(t,e){return(t=t.split(",")).forEach(e)||t}function ia(t){return Math.round(1e5*t)/1e5||0}function ja(t){return Math.round(1e7*t)/1e7||0}function ka(t,e){var r=e.charAt(0),i=parseFloat(e.substr(2));return t=parseFloat(t),"+"===r?t+i:"-"===r?t-i:"*"===r?t*i:t/i}function la(t,e){for(var r=e.length,i=0;t.indexOf(e[i])<0&&++i<r;);return i<r}function ma(){var t,e,r=ct.length,i=ct.slice(0);for(dt={},t=ct.length=0;t<r;t++)(e=i[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)}function na(t,e,r,i){ct.length&&ma(),t.render(e,r,i||B&&e<0&&(t._initted||t._startAt)),ct.length&&ma()}function oa(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(at).length<2?e:r(t)?t.trim():t}function pa(t){return t}function qa(t,e){for(var r in e)r in t||(t[r]=e[r]);return t}function ta(t,e){for(var r in e)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(t[r]=v(e[r])?ta(t[r]||(t[r]={}),e[r]):e[r]);return t}function ua(t,e){var r,i={};for(r in t)r in e||(i[r]=t[r]);return i}function va(t){var e=t.parent||L,r=t.keyframes?function _setKeyframeDefaults(i){return function(t,e){for(var r in e)r in t||"duration"===r&&i||"ease"===r||(t[r]=e[r])}}($(t.keyframes)):qa;if(w(t.inherit))for(;e;)r(t,e.vars.defaults),e=e.parent||e._dp;return t}function xa(t,e,r,i,n){void 0===r&&(r="_first"),void 0===i&&(i="_last");var a,s=t[i];if(n)for(a=e[n];s&&s[n]>a;)s=s._prev;return s?(e._next=s._next,s._next=e):(e._next=t[r],t[r]=e),e._next?e._next._prev=e:t[i]=e,e._prev=s,e.parent=e._dp=t,e}function ya(t,e,r,i){void 0===r&&(r="_first"),void 0===i&&(i="_last");var n=e._prev,a=e._next;n?n._next=a:t[r]===e&&(t[r]=a),a?a._prev=n:t[i]===e&&(t[i]=n),e._next=e._prev=e.parent=null}function za(t,e){!t.parent||e&&!t.parent.autoRemoveChildren||t.parent.remove(t),t._act=0}function Aa(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var r=t;r;)r._dirty=1,r=r.parent;return t}function Ca(t,e,r,i){return t._startAt&&(B?t._startAt.revert(ht):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,i))}function Ea(t){return t._repeat?Tt(t._tTime,t=t.duration()+t._rDelay)*t:0}function Ga(t,e){return(t-e._start)*e._ts+(0<=e._ts?0:e._dirty?e.totalDuration():e._tDur)}function Ha(t){return t._end=ja(t._start+(t._tDur/Math.abs(t._ts||t._rts||V)||0))}function Ia(t,e){var r=t._dp;return r&&r.smoothChildTiming&&t._ts&&(t._start=ja(r._time-(0<t._ts?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),Ha(t),r._dirty||Aa(r,t)),t}function Ja(t,e){var r;if((e._time||e._initted&&!e._dur)&&(r=Ga(t.rawTime(),e),(!e._dur||kt(0,e.totalDuration(),r)-e._tTime>V)&&e.render(r,!0)),Aa(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(r=t;r._dp;)0<=r.rawTime()&&r.totalTime(r._tTime),r=r._dp;t._zTime=-V}}function Ka(e,r,i,n){return r.parent&&za(r),r._start=ja((t(i)?i:i||e!==L?xt(e,i,r):e._time)+r._delay),r._end=ja(r._start+(r.totalDuration()/Math.abs(r.timeScale())||0)),xa(e,r,"_first","_last",e._sort?"_start":0),bt(r)||(e._recent=r),n||Ja(e,r),e._ts<0&&Ia(e,e._tTime),e}function La(t,e){return(ot.ScrollTrigger||Q("scrollTrigger",e))&&ot.ScrollTrigger.create(e,t)}function Ma(t,e,r,i,n){return Ht(t,e,n),t._initted?!r&&t._pt&&!B&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&f!==Et.frame?(ct.push(t),t._lazy=[n,i],1):void 0:1}function Ra(t,e,r,i){var n=t._repeat,a=ja(e)||0,s=t._tTime/t._tDur;return s&&!i&&(t._time*=a/t._dur),t._dur=a,t._tDur=n?n<0?1e10:ja(a*(n+1)+t._rDelay*n):a,0<s&&!i&&Ia(t,t._tTime=t._tDur*s),t.parent&&Ha(t),r||Aa(t.parent,t),t}function Sa(t){return t instanceof Ut?Aa(t):Ra(t,t._dur)}function Va(e,r,i){var n,a,s=t(r[1]),o=(s?2:1)+(e<2?0:1),u=r[o];if(s&&(u.duration=r[1]),u.parent=i,e){for(n=u,a=i;a&&!("immediateRender"in n);)n=a.vars.defaults||{},a=w(a.vars.inherit)&&a.parent;u.immediateRender=w(n.immediateRender),e<2?u.runBackwards=1:u.startAt=r[o-1]}return new Gt(r[0],u,r[1+o])}function Wa(t,e){return t||0===t?e(t):e}function Ya(t,e){return r(t)&&(e=st.exec(t))?e[1]:""}function _a(t,e){return t&&v(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&v(t[0]))&&!t.nodeType&&t!==h}function cb(r){return r=Ot(r)[0]||R("Invalid scope")||{},function(t){var e=r.current||r.nativeElement||r;return Ot(t,e.querySelectorAll?e:e===r?R("Invalid scope")||a.createElement("div"):r)}}function db(t){return t.sort(function(){return.5-Math.random()})}function eb(t){if(s(t))return t;var p=v(t)?t:{each:t},_=Yt(p.ease),m=p.from||0,g=parseFloat(p.base)||0,y={},e=0<m&&m<1,T=isNaN(m)||e,b=p.axis,w=m,x=m;return r(m)?w=x={center:.5,edges:.5,end:1}[m]||0:!e&&T&&(w=m[0],x=m[1]),function(t,e,r){var i,n,a,s,o,u,h,l,f,c=(r||p).length,d=y[c];if(!d){if(!(f="auto"===p.grid?0:(p.grid||[1,U])[1])){for(h=-U;h<(h=r[f++].getBoundingClientRect().left)&&f<c;);f--}for(d=y[c]=[],i=T?Math.min(f,c)*w-.5:m%f,n=f===U?0:T?c*x/f-.5:m/f|0,l=U,u=h=0;u<c;u++)a=u%f-i,s=n-(u/f|0),d[u]=o=b?Math.abs("y"===b?s:a):K(a*a+s*s),h<o&&(h=o),o<l&&(l=o);"random"===m&&db(d),d.max=h-l,d.min=l,d.v=c=(parseFloat(p.amount)||parseFloat(p.each)*(c<f?c-1:b?"y"===b?c/f:f:Math.max(f,c/f))||0)*("edges"===m?-1:1),d.b=c<0?g-c:g,d.u=Ya(p.amount||p.each)||0,_=_&&c<0?Lt(_):_}return c=(d[t]-d.min)/d.max||0,ja(d.b+(_?_(c):c)*d.v)+d.u}}function fb(i){var n=Math.pow(10,((i+"").split(".")[1]||"").length);return function(e){var r=ja(Math.round(parseFloat(e)/i)*i*n);return(r-r%1)/n+(t(e)?0:Ya(e))}}function gb(h,e){var l,f,r=$(h);return!r&&v(h)&&(l=r=h.radius||U,h.values?(h=Ot(h.values),(f=!t(h[0]))&&(l*=l)):h=fb(h.increment)),Wa(e,r?s(h)?function(t){return f=h(t),Math.abs(f-t)<=l?f:t}:function(e){for(var r,i,n=parseFloat(f?e.x:e),a=parseFloat(f?e.y:0),s=U,o=0,u=h.length;u--;)(r=f?(r=h[u].x-n)*r+(i=h[u].y-a)*i:Math.abs(h[u]-n))<s&&(s=r,o=u);return o=!l||s<=l?h[o]:e,f||o===e||t(e)?o:o+Ya(e)}:fb(h))}function hb(t,e,r,i){return Wa($(t)?!e:!0===r?!!(r=0):!i,function(){return $(t)?t[~~(Math.random()*t.length)]:(r=r||1e-5)&&(i=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((t-r/2+Math.random()*(e-t+.99*r))/r)*r*i)/i})}function lb(e,r,t){return Wa(t,function(t){return e[~~r(t)]})}function ob(t){for(var e,r,i,n,a=0,s="";~(e=t.indexOf("random(",a));)i=t.indexOf(")",e),n="["===t.charAt(e+7),r=t.substr(e+7,i-e-7).match(n?at:tt),s+=t.substr(a,e-a)+hb(n?r:+r[0],n?0:+r[1],+r[2]||1e-5),a=i+1;return s+t.substr(a,t.length-a)}function rb(t,e,r){var i,n,a,s=t.labels,o=U;for(i in s)(n=s[i]-e)<0==!!r&&n&&o>(n=Math.abs(n))&&(a=i,o=n);return a}function tb(t){return za(t),t.scrollTrigger&&t.scrollTrigger.kill(!!B),t.progress()<1&&Ct(t,"onInterrupt"),t}function yb(t,e,r){return(6*(t+=t<0?1:1<t?-1:0)<1?e+(r-e)*t*6:t<.5?r:3*t<2?e+(r-e)*(2/3-t)*6:e)*At+.5|0}function zb(e,r,i){var n,a,s,o,u,h,l,f,c,d,p=e?t(e)?[e>>16,e>>8&At,e&At]:0:St.black;if(!p){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),St[e])p=St[e];else if("#"===e.charAt(0)){if(e.length<6&&(e="#"+(n=e.charAt(1))+n+(a=e.charAt(2))+a+(s=e.charAt(3))+s+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(p=parseInt(e.substr(1,6),16))>>16,p>>8&At,p&At,parseInt(e.substr(7),16)/255];p=[(e=parseInt(e.substr(1),16))>>16,e>>8&At,e&At]}else if("hsl"===e.substr(0,3))if(p=d=e.match(tt),r){if(~e.indexOf("="))return p=e.match(et),i&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,u=p[1]/100,n=2*(h=p[2]/100)-(a=h<=.5?h*(u+1):h+u-h*u),3<p.length&&(p[3]*=1),p[0]=yb(o+1/3,n,a),p[1]=yb(o,n,a),p[2]=yb(o-1/3,n,a);else p=e.match(tt)||St.transparent;p=p.map(Number)}return r&&!d&&(n=p[0]/At,a=p[1]/At,s=p[2]/At,h=((l=Math.max(n,a,s))+(f=Math.min(n,a,s)))/2,l===f?o=u=0:(c=l-f,u=.5<h?c/(2-l-f):c/(l+f),o=l===n?(a-s)/c+(a<s?6:0):l===a?(s-n)/c+2:(n-a)/c+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*u+.5),p[2]=~~(100*h+.5)),i&&p.length<4&&(p[3]=1),p}function Ab(t){var r=[],i=[],n=-1;return t.split(Rt).forEach(function(t){var e=t.match(rt)||[];r.push.apply(r,e),i.push(n+=e.length+1)}),r.c=i,r}function Bb(t,e,r){var i,n,a,s,o="",u=(t+o).match(Rt),h=e?"hsla(":"rgba(",l=0;if(!u)return t;if(u=u.map(function(t){return(t=zb(t,e,1))&&h+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"}),r&&(a=Ab(t),(i=r.c).join(o)!==a.c.join(o)))for(s=(n=t.replace(Rt,"1").split(rt)).length-1;l<s;l++)o+=n[l]+(~i.indexOf(l)?u.shift()||h+"0,0,0,0)":(a.length?a:u.length?u:r).shift());if(!n)for(s=(n=t.split(Rt)).length-1;l<s;l++)o+=n[l]+u[l];return o+n[s]}function Eb(t){var e,r=t.join(" ");if(Rt.lastIndex=0,Rt.test(r))return e=Dt.test(r),t[1]=Bb(t[1],e),t[0]=Bb(t[0],e,Ab(t[1])),!0}function Nb(t){var e=(t+"").split("("),r=Ft[e[0]];return r&&1<e.length&&r.config?r.config.apply(null,~t.indexOf("{")?[function _parseObjectInString(t){for(var e,r,i,n={},a=t.substr(1,t.length-3).split(":"),s=a[0],o=1,u=a.length;o<u;o++)r=a[o],e=o!==u-1?r.lastIndexOf(","):r.length,i=r.substr(0,e),n[s]=isNaN(i)?i.replace(Bt,"").trim():+i,s=r.substr(e+1).trim();return n}(e[1])]:function _valueInParentheses(t){var e=t.indexOf("(")+1,r=t.indexOf(")"),i=t.indexOf("(",e);return t.substring(e,~i&&i<r?t.indexOf(")",r+1):r)}(t).split(",").map(oa)):Ft._CE&&It.test(t)?Ft._CE("",t):r}function Pb(t,e){for(var r,i=t._first;i;)i instanceof Ut?Pb(i,e):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===e||(i.timeline?Pb(i.timeline,e):(r=i._ease,i._ease=i._yEase,i._yEase=r,i._yoyo=e)),i=i._next}function Rb(t,e,r,i){void 0===r&&(r=function easeOut(t){return 1-e(1-t)}),void 0===i&&(i=function easeInOut(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var n,a={easeIn:e,easeOut:r,easeInOut:i};return ha(t,function(t){for(var e in Ft[t]=ot[t]=a,Ft[n=t.toLowerCase()]=r,a)Ft[n+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=Ft[t+"."+e]=a[e]}),a}function Sb(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}}function Tb(r,t,e){function Hm(t){return 1===t?1:i*Math.pow(2,-10*t)*G((t-a)*n)+1}var i=1<=t?t:1,n=(e||(r?.3:.45))/(t<1?t:1),a=n/W*(Math.asin(1/i)||0),s="out"===r?Hm:"in"===r?function(t){return 1-Hm(1-t)}:Sb(Hm);return n=W/n,s.config=function(t,e){return Tb(r,t,e)},s}function Ub(e,r){function Pm(t){return t?--t*t*((r+1)*t+r)+1:0}void 0===r&&(r=1.70158);var t="out"===e?Pm:"in"===e?function(t){return 1-Pm(1-t)}:Sb(Pm);return t.config=function(t){return Ub(e,t)},t}var I,B,l,L,h,n,a,i,o,f,c,d,p,_,m,g,b,k,M,O,C,A,D,E,z,F,Y,N,j={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},q={duration:.5,overwrite:!1,delay:0},U=1e8,V=1/U,W=2*Math.PI,X=W/4,H=0,K=Math.sqrt,Z=Math.cos,G=Math.sin,J="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},$=Array.isArray,tt=/(?:-?\.?\d|\.)+/gi,et=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,rt=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,it=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,nt=/[+-]=-?[.\d]+/,at=/[^,'"\[\]\s]+/gi,st=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,ot={},ut={suppressEvents:!0,isStart:!0,kill:!1},ht={suppressEvents:!0,kill:!1},lt={suppressEvents:!0},ft={},ct=[],dt={},pt={},_t={},mt=30,gt=[],vt="",yt=function _merge(t,e){for(var r in e)t[r]=e[r];return t},Tt=function _animationCycle(t,e){var r=Math.floor(t/=e);return t&&r===t?r-1:r},bt=function _isFromOrFromStart(t){var e=t.data;return"isFromStart"===e||"isStart"===e},wt={_start:0,endTime:T,totalDuration:T},xt=function _parsePosition(t,e,i){var n,a,s,o=t.labels,u=t._recent||wt,h=t.duration()>=U?u.endTime(!1):t._dur;return r(e)&&(isNaN(e)||e in o)?(a=e.charAt(0),s="%"===e.substr(-1),n=e.indexOf("="),"<"===a||">"===a?(0<=n&&(e=e.replace(/=/,"")),("<"===a?u._start:u.endTime(0<=u._repeat))+(parseFloat(e.substr(1))||0)*(s?(n<0?u:i).totalDuration()/100:1)):n<0?(e in o||(o[e]=h),o[e]):(a=parseFloat(e.charAt(n-1)+e.substr(n+1)),s&&i&&(a=a/100*($(i)?i[0]:i).totalDuration()),1<n?_parsePosition(t,e.substr(0,n-1),i)+a:h+a)):null==e?h:+e},kt=function _clamp(t,e,r){return r<t?t:e<r?e:r},Mt=[].slice,Ot=function toArray(t,e,i){return l&&!e&&l.selector?l.selector(t):!r(t)||i||!n&&zt()?$(t)?function _flatten(t,e,i){return void 0===i&&(i=[]),t.forEach(function(t){return r(t)&&!e||_a(t,1)?i.push.apply(i,Ot(t)):i.push(t)})||i}(t,i):_a(t)?Mt.call(t,0):t?[t]:[]:Mt.call((e||a).querySelectorAll(t),0)},Pt=function mapRange(e,t,r,i,n){var a=t-e,s=i-r;return Wa(n,function(t){return r+((t-e)/a*s||0)})},Ct=function _callback(t,e,r){var i,n,a,s=t.vars,o=s[e],u=l,h=t._ctx;if(o)return i=s[e+"Params"],n=s.callbackScope||t,r&&ct.length&&ma(),h&&(l=h),a=i?o.apply(n,i):o.call(n),l=u,a},At=255,St={aqua:[0,At,At],lime:[0,At,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,At],navy:[0,0,128],white:[At,At,At],olive:[128,128,0],yellow:[At,At,0],orange:[At,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[At,0,0],pink:[At,192,203],cyan:[0,At,At],transparent:[At,At,At,0]},Rt=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in St)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),Dt=/hsl[a]?\(/,Et=(M=Date.now,O=500,C=33,A=M(),D=A,z=E=1e3/240,g={time:0,frame:0,tick:function tick(){wl(!0)},deltaRatio:function deltaRatio(t){return b/(1e3/(t||60))},wake:function wake(){o&&(!n&&x()&&(h=n=window,a=h.document||{},ot.gsap=Ce,(h.gsapVersions||(h.gsapVersions=[])).push(Ce.version),P(i||h.GreenSockGlobals||!h.gsap&&h||{}),m=h.requestAnimationFrame),p&&g.sleep(),_=m||function(t){return setTimeout(t,z-1e3*g.time+1|0)},d=1,wl(2))},sleep:function sleep(){(m?h.cancelAnimationFrame:clearTimeout)(p),d=0,_=T},lagSmoothing:function lagSmoothing(t,e){O=t||1e8,C=Math.min(e,O,0)},fps:function fps(t){E=1e3/(t||240),z=1e3*g.time+E},add:function add(n,t,e){var a=t?function(t,e,r,i){n(t,e,r,i),g.remove(a)}:n;return g.remove(n),F[e?"unshift":"push"](a),zt(),a},remove:function remove(t,e){~(e=F.indexOf(t))&&F.splice(e,1)&&e<=k&&k--},_listeners:F=[]}),zt=function _wake(){return!d&&Et.wake()},Ft={},It=/^[\d.\-M][\d.\-,\s]/,Bt=/["']/g,Lt=function _invertEase(e){return function(t){return 1-e(1-t)}},Yt=function _parseEase(t,e){return t&&(s(t)?t:Ft[t]||Nb(t))||e};function wl(t){var e,r,i,n,a=M()-D,s=!0===t;if(O<a&&(A+=a-C),(0<(e=(i=(D+=a)-A)-z)||s)&&(n=++g.frame,b=i-1e3*g.time,g.time=i/=1e3,z+=e+(E<=e?4:E-e),r=1),s||(p=_(wl)),r)for(k=0;k<F.length;k++)F[k](i,b,n,t)}function en(t){return t<N?Y*t*t:t<.7272727272727273?Y*Math.pow(t-1.5/2.75,2)+.75:t<.9090909090909092?Y*(t-=2.25/2.75)*t+.9375:Y*Math.pow(t-2.625/2.75,2)+.984375}ha("Linear,Quad,Cubic,Quart,Quint,Strong",function(t,e){var r=e<5?e+1:e;Rb(t+",Power"+(r-1),e?function(t){return Math.pow(t,r)}:function(t){return t},function(t){return 1-Math.pow(1-t,r)},function(t){return t<.5?Math.pow(2*t,r)/2:1-Math.pow(2*(1-t),r)/2})}),Ft.Linear.easeNone=Ft.none=Ft.Linear.easeIn,Rb("Elastic",Tb("in"),Tb("out"),Tb()),Y=7.5625,N=1/2.75,Rb("Bounce",function(t){return 1-en(1-t)},en),Rb("Expo",function(t){return t?Math.pow(2,10*(t-1)):0}),Rb("Circ",function(t){return-(K(1-t*t)-1)}),Rb("Sine",function(t){return 1===t?1:1-Z(t*X)}),Rb("Back",Ub("in"),Ub("out"),Ub()),Ft.SteppedEase=Ft.steps=ot.SteppedEase={config:function config(t,e){void 0===t&&(t=1);var r=1/t,i=t+(e?0:1),n=e?1:0;return function(t){return((i*kt(0,.99999999,t)|0)+n)*r}}},q.ease=Ft["quad.out"],ha("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",function(t){return vt+=t+","+t+"Params,"});var Nt,jt=function GSCache(t,e){this.id=H++,(t._gsap=this).target=t,this.harness=e,this.get=e?e.get:ga,this.set=e?e.getSetter:re},qt=((Nt=Animation.prototype).delay=function delay(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},Nt.duration=function duration(t){return arguments.length?this.totalDuration(0<this._repeat?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},Nt.totalDuration=function totalDuration(t){return arguments.length?(this._dirty=0,Ra(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},Nt.totalTime=function totalTime(t,e){if(zt(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(Ia(this,t),!r._dp||r.parent||Ja(r,this);r&&r.parent;)r.parent._time!==r._start+(0<=r._ts?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(0<this._ts&&t<this._tDur||this._ts<0&&0<t||!this._tDur&&!t)&&Ka(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===V||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),na(this,t,e)),this},Nt.time=function time(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Ea(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},Nt.totalProgress=function totalProgress(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},Nt.progress=function progress(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Ea(this),e):this.duration()?Math.min(1,this._time/this._dur):this.ratio},Nt.iteration=function iteration(t,e){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*r,e):this._repeat?Tt(this._tTime,r)+1:1},Nt.timeScale=function timeScale(t){if(!arguments.length)return this._rts===-V?0:this._rts;if(this._rts===t)return this;var e=this.parent&&this._ts?Ga(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||t===-V?0:this._rts,this.totalTime(kt(-this._delay,this._tDur,e),!0),Ha(this),function _recacheAncestors(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t}(this)},Nt.paused=function paused(t){return arguments.length?(this._ps!==t&&((this._ps=t)?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(zt(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==V&&(this._tTime-=V)))),this):this._ps},Nt.startTime=function startTime(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return!e||!e._sort&&this.parent||Ka(e,this,t-this._delay),this}return this._start},Nt.endTime=function endTime(t){return this._start+(w(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},Nt.rawTime=function rawTime(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Ga(e.rawTime(t),this):this._tTime:this._tTime},Nt.revert=function revert(t){void 0===t&&(t=lt);var e=B;return B=t,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents)),"nested"!==this.data&&!1!==t.kill&&this.kill(),B=e,this},Nt.globalTime=function globalTime(t){for(var e=this,r=arguments.length?t:e.rawTime();e;)r=e._start+r/(e._ts||1),e=e._dp;return!this.parent&&this.vars.immediateRender?-1:r},Nt.repeat=function repeat(t){return arguments.length?(this._repeat=t===1/0?-2:t,Sa(this)):-2===this._repeat?1/0:this._repeat},Nt.repeatDelay=function repeatDelay(t){if(arguments.length){var e=this._time;return this._rDelay=t,Sa(this),e?this.time(e):this}return this._rDelay},Nt.yoyo=function yoyo(t){return arguments.length?(this._yoyo=t,this):this._yoyo},Nt.seek=function seek(t,e){return this.totalTime(xt(this,t),w(e))},Nt.restart=function restart(t,e){return this.play().totalTime(t?-this._delay:0,w(e))},Nt.play=function play(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},Nt.reverse=function reverse(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},Nt.pause=function pause(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},Nt.resume=function resume(){return this.paused(!1)},Nt.reversed=function reversed(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-V:0)),this):this._rts<0},Nt.invalidate=function invalidate(){return this._initted=this._act=0,this._zTime=-V,this},Nt.isActive=function isActive(){var t,e=this.parent||this._dp,r=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=r&&t<this.endTime(!0)-V))},Nt.eventCallback=function eventCallback(t,e,r){var i=this.vars;return 1<arguments.length?(e?(i[t]=e,r&&(i[t+"Params"]=r),"onUpdate"===t&&(this._onUpdate=e)):delete i[t],this):i[t]},Nt.then=function then(t){var i=this;return new Promise(function(e){function zo(){var t=i.then;i.then=null,s(r)&&(r=r(i))&&(r.then||r===i)&&(i.then=t),e(r),i.then=t}var r=s(t)?t:pa;i._initted&&1===i.totalProgress()&&0<=i._ts||!i._tTime&&i._ts<0?zo():i._prom=zo})},Nt.kill=function kill(){tb(this)},Animation);function Animation(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Ra(this,+t.duration,1,1),this.data=t.data,l&&(this._ctx=l).data.push(this),d||Et.wake()}qa(qt.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-V,_prom:0,_ps:!1,_rts:1});var Ut=function(i){function Timeline(t,e){var r;return void 0===t&&(t={}),(r=i.call(this,t)||this).labels={},r.smoothChildTiming=!!t.smoothChildTiming,r.autoRemoveChildren=!!t.autoRemoveChildren,r._sort=w(t.sortChildren),L&&Ka(t.parent||L,_assertThisInitialized(r),e),t.reversed&&r.reverse(),t.paused&&r.paused(!0),t.scrollTrigger&&La(_assertThisInitialized(r),t.scrollTrigger),r}_inheritsLoose(Timeline,i);var e=Timeline.prototype;return e.to=function to(t,e,r){return Va(0,arguments,this),this},e.from=function from(t,e,r){return Va(1,arguments,this),this},e.fromTo=function fromTo(t,e,r,i){return Va(2,arguments,this),this},e.set=function set(t,e,r){return e.duration=0,e.parent=this,va(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new Gt(t,e,xt(this,r),1),this},e.call=function call(t,e,r){return Ka(this,Gt.delayedCall(0,t,e),r)},e.staggerTo=function staggerTo(t,e,r,i,n,a,s){return r.duration=e,r.stagger=r.stagger||i,r.onComplete=a,r.onCompleteParams=s,r.parent=this,new Gt(t,r,xt(this,n)),this},e.staggerFrom=function staggerFrom(t,e,r,i,n,a,s){return r.runBackwards=1,va(r).immediateRender=w(r.immediateRender),this.staggerTo(t,e,r,i,n,a,s)},e.staggerFromTo=function staggerFromTo(t,e,r,i,n,a,s,o){return i.startAt=r,va(i).immediateRender=w(i.immediateRender),this.staggerTo(t,e,i,n,a,s,o)},e.render=function render(t,e,r){var i,n,a,s,o,u,h,l,f,c,d,p,_=this._time,m=this._dirty?this.totalDuration():this._tDur,g=this._dur,v=t<=0?0:ja(t),y=this._zTime<0!=t<0&&(this._initted||!g);if(this!==L&&m<v&&0<=t&&(v=m),v!==this._tTime||r||y){if(_!==this._time&&g&&(v+=this._time-_,t+=this._time-_),i=v,f=this._start,u=!(l=this._ts),y&&(g||(_=this._zTime),!t&&e||(this._zTime=t)),this._repeat){if(d=this._yoyo,o=g+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*o+t,e,r);if(i=ja(v%o),v===m?(s=this._repeat,i=g):((s=~~(v/o))&&s===v/o&&(i=g,s--),g<i&&(i=g)),c=Tt(this._tTime,o),!_&&this._tTime&&c!==s&&(c=s),d&&1&s&&(i=g-i,p=1),s!==c&&!this._lock){var T=d&&1&c,b=T===(d&&1&s);if(s<c&&(T=!T),_=T?0:g,this._lock=1,this.render(_||(p?0:ja(s*o)),e,!g)._lock=0,this._tTime=v,!e&&this.parent&&Ct(this,"onRepeat"),this.vars.repeatRefresh&&!p&&(this.invalidate()._lock=1),_&&_!==this._time||u!=!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(g=this._dur,m=this._tDur,b&&(this._lock=2,_=T?g:-1e-4,this.render(_,!0),this.vars.repeatRefresh&&!p&&this.invalidate()),this._lock=0,!this._ts&&!u)return this;Pb(this,p)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(h=function _findNextPauseTween(t,e,r){var i;if(e<r)for(i=t._first;i&&i._start<=r;){if("isPause"===i.data&&i._start>e)return i;i=i._next}else for(i=t._last;i&&i._start>=r;){if("isPause"===i.data&&i._start<e)return i;i=i._prev}}(this,ja(_),ja(i)))&&(v-=i-(i=h._start)),this._tTime=v,this._time=i,this._act=!l,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,_=0),!_&&i&&!e&&(Ct(this,"onStart"),this._tTime!==v))return this;if(_<=i&&0<=t)for(n=this._first;n;){if(a=n._next,(n._act||i>=n._start)&&n._ts&&h!==n){if(n.parent!==this)return this.render(t,e,r);if(n.render(0<n._ts?(i-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(i-n._start)*n._ts,e,r),i!==this._time||!this._ts&&!u){h=0,a&&(v+=this._zTime=-V);break}}n=a}else{n=this._last;for(var w=t<0?t:i;n;){if(a=n._prev,(n._act||w<=n._end)&&n._ts&&h!==n){if(n.parent!==this)return this.render(t,e,r);if(n.render(0<n._ts?(w-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(w-n._start)*n._ts,e,r||B&&(n._initted||n._startAt)),i!==this._time||!this._ts&&!u){h=0,a&&(v+=this._zTime=w?-V:V);break}}n=a}}if(h&&!e&&(this.pause(),h.render(_<=i?0:-V)._zTime=_<=i?1:-1,this._ts))return this._start=f,Ha(this),this.render(t,e,r);this._onUpdate&&!e&&Ct(this,"onUpdate",!0),(v===m&&this._tTime>=this.totalDuration()||!v&&_)&&(f!==this._start&&Math.abs(l)===Math.abs(this._ts)||this._lock||(!t&&g||!(v===m&&0<this._ts||!v&&this._ts<0)||za(this,1),e||t<0&&!_||!v&&!_&&m||(Ct(this,v===m&&0<=t?"onComplete":"onReverseComplete",!0),!this._prom||v<m&&0<this.timeScale()||this._prom())))}return this},e.add=function add(e,i){var n=this;if(t(i)||(i=xt(this,i,e)),!(e instanceof qt)){if($(e))return e.forEach(function(t){return n.add(t,i)}),this;if(r(e))return this.addLabel(e,i);if(!s(e))return this;e=Gt.delayedCall(0,e)}return this!==e?Ka(this,e,i):this},e.getChildren=function getChildren(t,e,r,i){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),void 0===i&&(i=-U);for(var n=[],a=this._first;a;)a._start>=i&&(a instanceof Gt?e&&n.push(a):(r&&n.push(a),t&&n.push.apply(n,a.getChildren(!0,e,r)))),a=a._next;return n},e.getById=function getById(t){for(var e=this.getChildren(1,1,1),r=e.length;r--;)if(e[r].vars.id===t)return e[r]},e.remove=function remove(t){return r(t)?this.removeLabel(t):s(t)?this.killTweensOf(t):(ya(this,t),t===this._recent&&(this._recent=this._last),Aa(this))},e.totalTime=function totalTime(t,e){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=ja(Et.time-(0<this._ts?t/this._ts:(this.totalDuration()-t)/-this._ts))),i.prototype.totalTime.call(this,t,e),this._forcing=0,this):this._tTime},e.addLabel=function addLabel(t,e){return this.labels[t]=xt(this,e),this},e.removeLabel=function removeLabel(t){return delete this.labels[t],this},e.addPause=function addPause(t,e,r){var i=Gt.delayedCall(0,e||T,r);return i.data="isPause",this._hasPause=1,Ka(this,i,xt(this,t))},e.removePause=function removePause(t){var e=this._first;for(t=xt(this,t);e;)e._start===t&&"isPause"===e.data&&za(e),e=e._next},e.killTweensOf=function killTweensOf(t,e,r){for(var i=this.getTweensOf(t,r),n=i.length;n--;)Vt!==i[n]&&i[n].kill(t,e);return this},e.getTweensOf=function getTweensOf(e,r){for(var i,n=[],a=Ot(e),s=this._first,o=t(r);s;)s instanceof Gt?la(s._targets,a)&&(o?(!Vt||s._initted&&s._ts)&&s.globalTime(0)<=r&&s.globalTime(s.totalDuration())>r:!r||s.isActive())&&n.push(s):(i=s.getTweensOf(a,r)).length&&n.push.apply(n,i),s=s._next;return n},e.tweenTo=function tweenTo(t,e){e=e||{};var r,i=this,n=xt(i,t),a=e.startAt,s=e.onStart,o=e.onStartParams,u=e.immediateRender,h=Gt.to(i,qa({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:n,overwrite:"auto",duration:e.duration||Math.abs((n-(a&&"time"in a?a.time:i._time))/i.timeScale())||V,onStart:function onStart(){if(i.pause(),!r){var t=e.duration||Math.abs((n-(a&&"time"in a?a.time:i._time))/i.timeScale());h._dur!==t&&Ra(h,t,0,1).render(h._time,!0,!0),r=1}s&&s.apply(h,o||[])}},e));return u?h.render(0):h},e.tweenFromTo=function tweenFromTo(t,e,r){return this.tweenTo(e,qa({startAt:{time:xt(this,t)}},r))},e.recent=function recent(){return this._recent},e.nextLabel=function nextLabel(t){return void 0===t&&(t=this._time),rb(this,xt(this,t))},e.previousLabel=function previousLabel(t){return void 0===t&&(t=this._time),rb(this,xt(this,t),1)},e.currentLabel=function currentLabel(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+V)},e.shiftChildren=function shiftChildren(t,e,r){void 0===r&&(r=0);for(var i,n=this._first,a=this.labels;n;)n._start>=r&&(n._start+=t,n._end+=t),n=n._next;if(e)for(i in a)a[i]>=r&&(a[i]+=t);return Aa(this)},e.invalidate=function invalidate(t){var e=this._first;for(this._lock=0;e;)e.invalidate(t),e=e._next;return i.prototype.invalidate.call(this,t)},e.clear=function clear(t){void 0===t&&(t=!0);for(var e,r=this._first;r;)e=r._next,this.remove(r),r=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),Aa(this)},e.totalDuration=function totalDuration(t){var e,r,i,n=0,a=this,s=a._last,o=U;if(arguments.length)return a.timeScale((a._repeat<0?a.duration():a.totalDuration())/(a.reversed()?-t:t));if(a._dirty){for(i=a.parent;s;)e=s._prev,s._dirty&&s.totalDuration(),o<(r=s._start)&&a._sort&&s._ts&&!a._lock?(a._lock=1,Ka(a,s,r-s._delay,1)._lock=0):o=r,r<0&&s._ts&&(n-=r,(!i&&!a._dp||i&&i.smoothChildTiming)&&(a._start+=r/a._ts,a._time-=r,a._tTime-=r),a.shiftChildren(-r,!1,-Infinity),o=0),s._end>n&&s._ts&&(n=s._end),s=e;Ra(a,a===L&&a._time>n?a._time:n,1,1),a._dirty=0}return a._tDur},Timeline.updateRoot=function updateRoot(t){if(L._ts&&(na(L,Ga(t,L)),f=Et.frame),Et.frame>=mt){mt+=j.autoSleep||120;var e=L._first;if((!e||!e._ts)&&j.autoSleep&&Et._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||Et.sleep()}}},Timeline}(qt);qa(Ut.prototype,{_lock:0,_hasPause:0,_forcing:0});function _b(t,e,i,n,a,o){var u,h,l,f;if(pt[t]&&!1!==(u=new pt[t]).init(a,u.rawVars?e[t]:function _processVars(t,e,i,n,a){if(s(t)&&(t=Qt(t,a,e,i,n)),!v(t)||t.style&&t.nodeType||$(t)||J(t))return r(t)?Qt(t,a,e,i,n):t;var o,u={};for(o in t)u[o]=Qt(t[o],a,e,i,n);return u}(e[t],n,a,o,i),i,n,o)&&(i._pt=h=new pe(i._pt,a,t,0,1,u.render,u,0,u.priority),i!==c))for(l=i._ptLookup[i._targets.indexOf(a)],f=u._props.length;f--;)l[u._props[f]]=h;return u}function fc(t,r,e,i){var n,a,s=r.ease||i||"power1.inOut";if($(r))a=e[t]||(e[t]=[]),r.forEach(function(t,e){return a.push({t:e/(r.length-1)*100,v:t,e:s})});else for(n in r)a=e[n]||(e[n]=[]),"ease"===n||a.push({t:parseFloat(t),v:r[n],e:s})}var Vt,Wt,Xt=function _addPropTween(t,e,i,n,a,o,u,h,l,f){s(n)&&(n=n(a||0,t,o));var c,d=t[e],p="get"!==i?i:s(d)?l?t[e.indexOf("set")||!s(t["get"+e.substr(3)])?e:"get"+e.substr(3)](l):t[e]():d,_=s(d)?l?ee:$t:Jt;if(r(n)&&(~n.indexOf("random(")&&(n=ob(n)),"="===n.charAt(1)&&(!(c=ka(p,n)+(Ya(p)||0))&&0!==c||(n=c))),!f||p!==n||Wt)return isNaN(p*n)||""===n?(d||e in t||Q(e,n),function _addComplexStringPropTween(t,e,r,i,n,a,s){var o,u,h,l,f,c,d,p,_=new pe(this._pt,t,e,0,1,se,null,n),m=0,g=0;for(_.b=r,_.e=i,r+="",(d=~(i+="").indexOf("random("))&&(i=ob(i)),a&&(a(p=[r,i],t,e),r=p[0],i=p[1]),u=r.match(it)||[];o=it.exec(i);)l=o[0],f=i.substring(m,o.index),h?h=(h+1)%5:"rgba("===f.substr(-5)&&(h=1),l!==u[g++]&&(c=parseFloat(u[g-1])||0,_._pt={_next:_._pt,p:f||1===g?f:",",s:c,c:"="===l.charAt(1)?ka(c,l)-c:parseFloat(l)-c,m:h&&h<4?Math.round:0},m=it.lastIndex);return _.c=m<i.length?i.substring(m,i.length):"",_.fp=s,(nt.test(i)||d)&&(_.e=0),this._pt=_}.call(this,t,e,p,n,_,h||j.stringFilter,l)):(c=new pe(this._pt,t,e,+p||0,n-(p||0),"boolean"==typeof d?ae:ne,0,_),l&&(c.fp=l),u&&c.modifier(u,this,t),this._pt=c)},Ht=function _initTween(t,e,r){var i,n,a,s,o,u,h,l,f,c,d,p,_,m=t.vars,g=m.ease,v=m.startAt,y=m.immediateRender,T=m.lazy,b=m.onUpdate,x=m.onUpdateParams,k=m.callbackScope,M=m.runBackwards,O=m.yoyoEase,P=m.keyframes,C=m.autoRevert,A=t._dur,S=t._startAt,R=t._targets,D=t.parent,E=D&&"nested"===D.data?D.vars.targets:R,z="auto"===t._overwrite&&!I,F=t.timeline;if(!F||P&&g||(g="none"),t._ease=Yt(g,q.ease),t._yEase=O?Lt(Yt(!0===O?g:O,q.ease)):0,O&&t._yoyo&&!t._repeat&&(O=t._yEase,t._yEase=t._ease,t._ease=O),t._from=!F&&!!m.runBackwards,!F||P&&!m.stagger){if(p=(l=R[0]?fa(R[0]).harness:0)&&m[l.prop],i=ua(m,ft),S&&(S._zTime<0&&S.progress(1),e<0&&M&&y&&!C?S.render(-1,!0):S.revert(M&&A?ht:ut),S._lazy=0),v){if(za(t._startAt=Gt.set(R,qa({data:"isStart",overwrite:!1,parent:D,immediateRender:!0,lazy:w(T),startAt:null,delay:0,onUpdate:b,onUpdateParams:x,callbackScope:k,stagger:0},v))),e<(t._startAt._dp=0)&&(B||!y&&!C)&&t._startAt.revert(ht),y&&A&&e<=0&&r<=0)return void(e&&(t._zTime=e))}else if(M&&A&&!S)if(e&&(y=!1),a=qa({overwrite:!1,data:"isFromStart",lazy:y&&w(T),immediateRender:y,stagger:0,parent:D},i),p&&(a[l.prop]=p),za(t._startAt=Gt.set(R,a)),e<(t._startAt._dp=0)&&(B?t._startAt.revert(ht):t._startAt.render(-1,!0)),t._zTime=e,y){if(!e)return}else _initTween(t._startAt,V,V);for(t._pt=t._ptCache=0,T=A&&w(T)||T&&!A,n=0;n<R.length;n++){if(h=(o=R[n])._gsap||ea(R)[n]._gsap,t._ptLookup[n]=c={},dt[h.id]&&ct.length&&ma(),d=E===R?n:E.indexOf(o),l&&!1!==(f=new l).init(o,p||i,t,d,E)&&(t._pt=s=new pe(t._pt,o,f.name,0,1,f.render,f,0,f.priority),f._props.forEach(function(t){c[t]=s}),f.priority&&(u=1)),!l||p)for(a in i)pt[a]&&(f=_b(a,i,t,d,o,E))?f.priority&&(u=1):c[a]=s=Xt.call(t,o,a,"get",i[a],d,E,0,m.stringFilter);t._op&&t._op[n]&&t.kill(o,t._op[n]),z&&t._pt&&(Vt=t,L.killTweensOf(o,c,t.globalTime(e)),_=!t.parent,Vt=0),t._pt&&T&&(dt[h.id]=1)}u&&de(t),t._onInit&&t._onInit(t)}t._onUpdate=b,t._initted=(!t._op||t._pt)&&!_,P&&e<=0&&F.render(U,!0,!0)},Qt=function _parseFuncOrString(t,e,i,n,a){return s(t)?t.call(e,i,n,a):r(t)&&~t.indexOf("random(")?ob(t):t},Kt=vt+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",Zt={};ha(Kt+",id,stagger,delay,duration,paused,scrollTrigger",function(t){return Zt[t]=1});var Gt=function(z){function Tween(e,r,i,n){var a;"number"==typeof r&&(i.duration=r,r=i,i=null);var s,o,u,h,l,f,c,d,p=(a=z.call(this,n?r:va(r))||this).vars,_=p.duration,m=p.delay,g=p.immediateRender,T=p.stagger,b=p.overwrite,x=p.keyframes,k=p.defaults,M=p.scrollTrigger,O=p.yoyoEase,P=r.parent||L,C=($(e)||J(e)?t(e[0]):"length"in r)?[e]:Ot(e);if(a._targets=C.length?ea(C):R("GSAP target "+e+" not found. https://greensock.com",!j.nullTargetWarn)||[],a._ptLookup=[],a._overwrite=b,x||T||y(_)||y(m)){if(r=a.vars,(s=a.timeline=new Ut({data:"nested",defaults:k||{},targets:P&&"nested"===P.data?P.vars.targets:C})).kill(),s.parent=s._dp=_assertThisInitialized(a),s._start=0,T||y(_)||y(m)){if(h=C.length,c=T&&eb(T),v(T))for(l in T)~Kt.indexOf(l)&&((d=d||{})[l]=T[l]);for(o=0;o<h;o++)(u=ua(r,Zt)).stagger=0,O&&(u.yoyoEase=O),d&&yt(u,d),f=C[o],u.duration=+Qt(_,_assertThisInitialized(a),o,f,C),u.delay=(+Qt(m,_assertThisInitialized(a),o,f,C)||0)-a._delay,!T&&1===h&&u.delay&&(a._delay=m=u.delay,a._start+=m,u.delay=0),s.to(f,u,c?c(o,f,C):0),s._ease=Ft.none;s.duration()?_=m=0:a.timeline=0}else if(x){va(qa(s.vars.defaults,{ease:"none"})),s._ease=Yt(x.ease||r.ease||"none");var A,S,D,E=0;if($(x))x.forEach(function(t){return s.to(C,t,">")}),s.duration();else{for(l in u={},x)"ease"===l||"easeEach"===l||fc(l,x[l],u,x.easeEach);for(l in u)for(A=u[l].sort(function(t,e){return t.t-e.t}),o=E=0;o<A.length;o++)(D={ease:(S=A[o]).e,duration:(S.t-(o?A[o-1].t:0))/100*_})[l]=S.v,s.to(C,D,E),E+=D.duration;s.duration()<_&&s.to({},{duration:_-s.duration()})}}_||a.duration(_=s.duration())}else a.timeline=0;return!0!==b||I||(Vt=_assertThisInitialized(a),L.killTweensOf(C),Vt=0),Ka(P,_assertThisInitialized(a),i),r.reversed&&a.reverse(),r.paused&&a.paused(!0),(g||!_&&!x&&a._start===ja(P._time)&&w(g)&&function _hasNoPausedAncestors(t){return!t||t._ts&&_hasNoPausedAncestors(t.parent)}(_assertThisInitialized(a))&&"nested"!==P.data)&&(a._tTime=-V,a.render(Math.max(0,-m)||0)),M&&La(_assertThisInitialized(a),M),a}_inheritsLoose(Tween,z);var e=Tween.prototype;return e.render=function render(t,e,r){var i,n,a,s,o,u,h,l,f,c=this._time,d=this._tDur,p=this._dur,_=t<0,m=d-V<t&&!_?d:t<V?0:t;if(p){if(m!==this._tTime||!t||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!=_){if(i=m,l=this.timeline,this._repeat){if(s=p+this._rDelay,this._repeat<-1&&_)return this.totalTime(100*s+t,e,r);if(i=ja(m%s),m===d?(a=this._repeat,i=p):((a=~~(m/s))&&a===m/s&&(i=p,a--),p<i&&(i=p)),(u=this._yoyo&&1&a)&&(f=this._yEase,i=p-i),o=Tt(this._tTime,s),i===c&&!r&&this._initted)return this._tTime=m,this;a!==o&&(l&&this._yEase&&Pb(l,u),!this.vars.repeatRefresh||u||this._lock||(this._lock=r=1,this.render(ja(s*a),!0).invalidate()._lock=0))}if(!this._initted){if(Ma(this,_?t:i,r,e,m))return this._tTime=0,this;if(c!==this._time)return this;if(p!==this._dur)return this.render(t,e,r)}if(this._tTime=m,this._time=i,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=h=(f||this._ease)(i/p),this._from&&(this.ratio=h=1-h),i&&!c&&!e&&(Ct(this,"onStart"),this._tTime!==m))return this;for(n=this._pt;n;)n.r(h,n.d),n=n._next;l&&l.render(t<0?t:!i&&u?-V:l._dur*l._ease(i/this._dur),e,r)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(_&&Ca(this,t,0,r),Ct(this,"onUpdate")),this._repeat&&a!==o&&this.vars.onRepeat&&!e&&this.parent&&Ct(this,"onRepeat"),m!==this._tDur&&m||this._tTime!==m||(_&&!this._onUpdate&&Ca(this,t,0,!0),!t&&p||!(m===this._tDur&&0<this._ts||!m&&this._ts<0)||za(this,1),e||_&&!c||!(m||c||u)||(Ct(this,m===d?"onComplete":"onReverseComplete",!0),!this._prom||m<d&&0<this.timeScale()||this._prom()))}}else!function _renderZeroDurationTween(t,e,r,i){var n,a,s,o=t.ratio,u=e<0||!e&&(!t._start&&function _parentPlayheadIsBeforeStart(t){var e=t.parent;return e&&e._ts&&e._initted&&!e._lock&&(e.rawTime()<0||_parentPlayheadIsBeforeStart(e))}(t)&&(t._initted||!bt(t))||(t._ts<0||t._dp._ts<0)&&!bt(t))?0:1,h=t._rDelay,l=0;if(h&&t._repeat&&(l=kt(0,t._tDur,e),a=Tt(l,h),t._yoyo&&1&a&&(u=1-u),a!==Tt(t._tTime,h)&&(o=1-u,t.vars.repeatRefresh&&t._initted&&t.invalidate())),u!==o||B||i||t._zTime===V||!e&&t._zTime){if(!t._initted&&Ma(t,e,i,r,l))return;for(s=t._zTime,t._zTime=e||(r?V:0),r=r||e&&!s,t.ratio=u,t._from&&(u=1-u),t._time=0,t._tTime=l,n=t._pt;n;)n.r(u,n.d),n=n._next;e<0&&Ca(t,e,0,!0),t._onUpdate&&!r&&Ct(t,"onUpdate"),l&&t._repeat&&!r&&t.parent&&Ct(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===u&&(u&&za(t,1),r||B||(Ct(t,u?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,r);return this},e.targets=function targets(){return this._targets},e.invalidate=function invalidate(t){return t&&this.vars.runBackwards||(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(t),z.prototype.invalidate.call(this,t)},e.resetTo=function resetTo(t,e,r,i){d||Et.wake(),this._ts||this.play();var n,a=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||Ht(this,a),n=this._ease(a/this._dur),function _updatePropTweens(t,e,r,i,n,a,s){var o,u,h,l,f=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!f)for(f=t._ptCache[e]=[],h=t._ptLookup,l=t._targets.length;l--;){if((o=h[l][e])&&o.d&&o.d._pt)for(o=o.d._pt;o&&o.p!==e&&o.fp!==e;)o=o._next;if(!o)return Wt=1,t.vars[e]="+=0",Ht(t,s),Wt=0,1;f.push(o)}for(l=f.length;l--;)(o=(u=f[l])._pt||u).s=!i&&0!==i||n?o.s+(i||0)+a*o.c:i,o.c=r-o.s,u.e&&(u.e=ia(r)+Ya(u.e)),u.b&&(u.b=o.s+Ya(u.b))}(this,t,e,r,i,n,a)?this.resetTo(t,e,r,i):(Ia(this,0),this.parent||xa(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},e.kill=function kill(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?tb(this):this;if(this.timeline){var i=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,Vt&&!0!==Vt.vars.overwrite)._first||tb(this),this.parent&&i!==this.timeline.totalDuration()&&Ra(this,this._dur*this.timeline._tDur/i,0,1),this}var n,a,s,o,u,h,l,f=this._targets,c=t?Ot(t):f,d=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function _arraysMatch(t,e){for(var r=t.length,i=r===e.length;i&&r--&&t[r]===e[r];);return r<0}(f,c))return"all"===e&&(this._pt=0),tb(this);for(n=this._op=this._op||[],"all"!==e&&(r(e)&&(u={},ha(e,function(t){return u[t]=1}),e=u),e=function _addAliasesToVars(t,e){var r,i,n,a,s=t[0]?fa(t[0]).harness:0,o=s&&s.aliases;if(!o)return e;for(i in r=yt({},e),o)if(i in r)for(n=(a=o[i].split(",")).length;n--;)r[a[n]]=r[i];return r}(f,e)),l=f.length;l--;)if(~c.indexOf(f[l]))for(u in a=d[l],"all"===e?(n[l]=e,o=a,s={}):(s=n[l]=n[l]||{},o=e),o)(h=a&&a[u])&&("kill"in h.d&&!0!==h.d.kill(u)||ya(this,h,"_pt"),delete a[u]),"all"!==s&&(s[u]=1);return this._initted&&!this._pt&&p&&tb(this),this},Tween.to=function to(t,e,r){return new Tween(t,e,r)},Tween.from=function from(t,e){return Va(1,arguments)},Tween.delayedCall=function delayedCall(t,e,r,i){return new Tween(e,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:e,onReverseComplete:e,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:i})},Tween.fromTo=function fromTo(t,e,r){return Va(2,arguments)},Tween.set=function set(t,e){return e.duration=0,e.repeatDelay||(e.repeat=0),new Tween(t,e)},Tween.killTweensOf=function killTweensOf(t,e,r){return L.killTweensOf(t,e,r)},Tween}(qt);qa(Gt.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),ha("staggerTo,staggerFrom,staggerFromTo",function(r){Gt[r]=function(){var t=new Ut,e=Mt.call(arguments,0);return e.splice("staggerFromTo"===r?5:4,0,0),t[r].apply(t,e)}});function nc(t,e,r){return t.setAttribute(e,r)}function vc(t,e,r,i){i.mSet(t,e,i.m.call(i.tween,r,i.mt),i)}var Jt=function _setterPlain(t,e,r){return t[e]=r},$t=function _setterFunc(t,e,r){return t[e](r)},ee=function _setterFuncWithParam(t,e,r,i){return t[e](i.fp,r)},re=function _getSetter(t,e){return s(t[e])?$t:u(t[e])&&t.setAttribute?nc:Jt},ne=function _renderPlain(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},ae=function _renderBoolean(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},se=function _renderComplexString(t,e){var r=e._pt,i="";if(!t&&e.b)i=e.b;else if(1===t&&e.e)i=e.e;else{for(;r;)i=r.p+(r.m?r.m(r.s+r.c*t):Math.round(1e4*(r.s+r.c*t))/1e4)+i,r=r._next;i+=e.c}e.set(e.t,e.p,i,e)},oe=function _renderPropTweens(t,e){for(var r=e._pt;r;)r.r(t,r.d),r=r._next},le=function _addPluginModifier(t,e,r,i){for(var n,a=this._pt;a;)n=a._next,a.p===i&&a.modifier(t,e,r),a=n},fe=function _killPropTweensOf(t){for(var e,r,i=this._pt;i;)r=i._next,i.p===t&&!i.op||i.op===t?ya(this,i,"_pt"):i.dep||(e=1),i=r;return!e},de=function _sortPropTweensByPriority(t){for(var e,r,i,n,a=t._pt;a;){for(e=a._next,r=i;r&&r.pr>a.pr;)r=r._next;(a._prev=r?r._prev:n)?a._prev._next=a:i=a,(a._next=r)?r._prev=a:n=a,a=e}t._pt=i},pe=(PropTween.prototype.modifier=function modifier(t,e,r){this.mSet=this.mSet||this.set,this.set=vc,this.m=t,this.mt=r,this.tween=e},PropTween);function PropTween(t,e,r,i,n,a,s,o,u){this.t=e,this.s=i,this.c=n,this.p=r,this.r=a||ne,this.d=s||this,this.set=o||Jt,this.pr=u||0,(this._next=t)&&(t._prev=this)}ha(vt+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",function(t){return ft[t]=1}),ot.TweenMax=ot.TweenLite=Gt,ot.TimelineLite=ot.TimelineMax=Ut,L=new Ut({sortChildren:!1,defaults:q,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),j.stringFilter=Eb;function Cc(t){return(Te[t]||we).map(function(t){return t()})}function Dc(){var t=Date.now(),o=[];2<t-xe&&(Cc("matchMediaInit"),ye.forEach(function(t){var e,r,i,n,a=t.queries,s=t.conditions;for(r in a)(e=h.matchMedia(a[r]).matches)&&(i=1),e!==s[r]&&(s[r]=e,n=1);n&&(t.revert(),i&&o.push(t))}),Cc("matchMediaRevert"),o.forEach(function(t){return t.onMatch(t)}),xe=t,Cc("matchMedia"))}var _e,ye=[],Te={},we=[],xe=0,ke=((_e=Context.prototype).add=function add(t,i,n){function Cw(){var t,e=l,r=a.selector;return e&&e!==a&&e.data.push(a),n&&(a.selector=cb(n)),l=a,t=i.apply(a,arguments),s(t)&&a._r.push(t),l=e,a.selector=r,a.isReverted=!1,t}s(t)&&(n=i,i=t,t=s);var a=this;return a.last=Cw,t===s?Cw(a):t?a[t]=Cw:Cw},_e.ignore=function ignore(t){var e=l;l=null,t(this),l=e},_e.getTweens=function getTweens(){var e=[];return this.data.forEach(function(t){return t instanceof Context?e.push.apply(e,t.getTweens()):t instanceof Gt&&!(t.parent&&"nested"===t.parent.data)&&e.push(t)}),e},_e.clear=function clear(){this._r.length=this.data.length=0},_e.kill=function kill(e,t){var r=this;if(e){var i=this.getTweens();this.data.forEach(function(t){"isFlip"===t.data&&(t.revert(),t.getChildren(!0,!0,!1).forEach(function(t){return i.splice(i.indexOf(t),1)}))}),i.map(function(t){return{g:t.globalTime(0),t:t}}).sort(function(t,e){return e.g-t.g||-1}).forEach(function(t){return t.t.revert(e)}),this.data.forEach(function(t){return!(t instanceof qt)&&t.revert&&t.revert(e)}),this._r.forEach(function(t){return t(e,r)}),this.isReverted=!0}else this.data.forEach(function(t){return t.kill&&t.kill()});if(this.clear(),t){var n=ye.indexOf(this);~n&&ye.splice(n,1)}},_e.revert=function revert(t){this.kill(t||{})},Context);function Context(t,e){this.selector=e&&cb(e),this.data=[],this._r=[],this.isReverted=!1,t&&this.add(t)}var Me,Oe=((Me=MatchMedia.prototype).add=function add(t,e,r){v(t)||(t={matches:t});var i,n,a,s=new ke(0,r||this.scope),o=s.conditions={};for(n in this.contexts.push(s),e=s.add("onMatch",e),s.queries=t)"all"===n?a=1:(i=h.matchMedia(t[n]))&&(ye.indexOf(s)<0&&ye.push(s),(o[n]=i.matches)&&(a=1),i.addListener?i.addListener(Dc):i.addEventListener("change",Dc));return a&&e(s),this},Me.revert=function revert(t){this.kill(t||{})},Me.kill=function kill(e){this.contexts.forEach(function(t){return t.kill(e,!0)})},MatchMedia);function MatchMedia(t){this.contexts=[],this.scope=t}var Pe={registerPlugin:function registerPlugin(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];e.forEach(function(t){return function _createPlugin(t){var e=(t=!t.name&&t.default||t).name,r=s(t),i=e&&!r&&t.init?function(){this._props=[]}:t,n={init:T,render:oe,add:Xt,kill:fe,modifier:le,rawVars:0},a={targetTest:0,get:0,getSetter:re,aliases:{},register:0};if(zt(),t!==i){if(pt[e])return;qa(i,qa(ua(t,n),a)),yt(i.prototype,yt(n,ua(t,a))),pt[i.prop=e]=i,t.targetTest&&(gt.push(i),ft[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}S(e,i),t.register&&t.register(Ce,i,pe)}(t)})},timeline:function timeline(t){return new Ut(t)},getTweensOf:function getTweensOf(t,e){return L.getTweensOf(t,e)},getProperty:function getProperty(i,t,e,n){r(i)&&(i=Ot(i)[0]);var a=fa(i||{}).get,s=e?pa:oa;return"native"===e&&(e=""),i?t?s((pt[t]&&pt[t].get||a)(i,t,e,n)):function(t,e,r){return s((pt[t]&&pt[t].get||a)(i,t,e,r))}:i},quickSetter:function quickSetter(r,e,i){if(1<(r=Ot(r)).length){var n=r.map(function(t){return Ce.quickSetter(t,e,i)}),a=n.length;return function(t){for(var e=a;e--;)n[e](t)}}r=r[0]||{};var s=pt[e],o=fa(r),u=o.harness&&(o.harness.aliases||{})[e]||e,h=s?function(t){var e=new s;c._pt=0,e.init(r,i?t+i:t,c,0,[r]),e.render(1,e),c._pt&&oe(1,c)}:o.set(r,u);return s?h:function(t){return h(r,u,i?t+i:t,o,1)}},quickTo:function quickTo(t,i,e){function Ux(t,e,r){return n.resetTo(i,t,e,r)}var r,n=Ce.to(t,yt(((r={})[i]="+=0.1",r.paused=!0,r),e||{}));return Ux.tween=n,Ux},isTweening:function isTweening(t){return 0<L.getTweensOf(t,!0).length},defaults:function defaults(t){return t&&t.ease&&(t.ease=Yt(t.ease,q.ease)),ta(q,t||{})},config:function config(t){return ta(j,t||{})},registerEffect:function registerEffect(t){var i=t.name,n=t.effect,e=t.plugins,a=t.defaults,r=t.extendTimeline;(e||"").split(",").forEach(function(t){return t&&!pt[t]&&!ot[t]&&R(i+" effect requires "+t+" plugin.")}),_t[i]=function(t,e,r){return n(Ot(t),qa(e||{},a),r)},r&&(Ut.prototype[i]=function(t,e,r){return this.add(_t[i](t,v(e)?e:(r=e)&&{},this),r)})},registerEase:function registerEase(t,e){Ft[t]=Yt(e)},parseEase:function parseEase(t,e){return arguments.length?Yt(t,e):Ft},getById:function getById(t){return L.getById(t)},exportRoot:function exportRoot(t,e){void 0===t&&(t={});var r,i,n=new Ut(t);for(n.smoothChildTiming=w(t.smoothChildTiming),L.remove(n),n._dp=0,n._time=n._tTime=L._time,r=L._first;r;)i=r._next,!e&&!r._dur&&r instanceof Gt&&r.vars.onComplete===r._targets[0]||Ka(n,r,r._start-r._delay),r=i;return Ka(L,n,0),n},context:function context(t,e){return t?new ke(t,e):l},matchMedia:function matchMedia(t){return new Oe(t)},matchMediaRefresh:function matchMediaRefresh(){return ye.forEach(function(t){var e,r,i=t.conditions;for(r in i)i[r]&&(i[r]=!1,e=1);e&&t.revert()})||Dc()},addEventListener:function addEventListener(t,e){var r=Te[t]||(Te[t]=[]);~r.indexOf(e)||r.push(e)},removeEventListener:function removeEventListener(t,e){var r=Te[t],i=r&&r.indexOf(e);0<=i&&r.splice(i,1)},utils:{wrap:function wrap(e,t,r){var i=t-e;return $(e)?lb(e,wrap(0,e.length),t):Wa(r,function(t){return(i+(t-e)%i)%i+e})},wrapYoyo:function wrapYoyo(e,t,r){var i=t-e,n=2*i;return $(e)?lb(e,wrapYoyo(0,e.length-1),t):Wa(r,function(t){return e+(i<(t=(n+(t-e)%n)%n||0)?n-t:t)})},distribute:eb,random:hb,snap:gb,normalize:function normalize(t,e,r){return Pt(t,e,0,1,r)},getUnit:Ya,clamp:function clamp(e,r,t){return Wa(t,function(t){return kt(e,r,t)})},splitColor:zb,toArray:Ot,selector:cb,mapRange:Pt,pipe:function pipe(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t){return e.reduce(function(t,e){return e(t)},t)}},unitize:function unitize(e,r){return function(t){return e(parseFloat(t))+(r||Ya(t))}},interpolate:function interpolate(e,i,t,n){var a=isNaN(e+i)?0:function(t){return(1-t)*e+t*i};if(!a){var s,o,u,h,l,f=r(e),c={};if(!0===t&&(n=1)&&(t=null),f)e={p:e},i={p:i};else if($(e)&&!$(i)){for(u=[],h=e.length,l=h-2,o=1;o<h;o++)u.push(interpolate(e[o-1],e[o]));h--,a=function func(t){t*=h;var e=Math.min(l,~~t);return u[e](t-e)},t=i}else n||(e=yt($(e)?[]:{},e));if(!u){for(s in i)Xt.call(c,e,s,"get",i[s]);a=function func(t){return oe(t,c)||(f?e.p:e)}}}return Wa(t,a)},shuffle:db},install:P,effects:_t,ticker:Et,updateRoot:Ut.updateRoot,plugins:pt,globalTimeline:L,core:{PropTween:pe,globals:S,Tween:Gt,Timeline:Ut,Animation:qt,getCache:fa,_removeLinkedListItem:ya,reverting:function reverting(){return B},context:function context(t){return t&&l&&(l.data.push(t),t._ctx=l),l},suppressOverwrites:function suppressOverwrites(t){return I=t}}};ha("to,from,fromTo,delayedCall,set,killTweensOf",function(t){return Pe[t]=Gt[t]}),Et.add(Ut.updateRoot),c=Pe.to({},{duration:0});function Hc(t,e){for(var r=t._pt;r&&r.p!==e&&r.op!==e&&r.fp!==e;)r=r._next;return r}function Jc(t,a){return{name:t,rawVars:1,init:function init(t,n,e){e._onInit=function(t){var e,i;if(r(n)&&(e={},ha(n,function(t){return e[t]=1}),n=e),a){for(i in e={},n)e[i]=a(n[i]);n=e}!function _addModifiers(t,e){var r,i,n,a=t._targets;for(r in e)for(i=a.length;i--;)(n=(n=t._ptLookup[i][r])&&n.d)&&(n._pt&&(n=Hc(n,r)),n&&n.modifier&&n.modifier(e[r],t,a[i],r))}(t,n)}}}}var Ce=Pe.registerPlugin({name:"attr",init:function init(t,e,r,i,n){var a,s,o;for(a in this.tween=r,e)o=t.getAttribute(a)||"",(s=this.add(t,"setAttribute",(o||0)+"",e[a],i,n,0,0,a)).op=a,s.b=o,this._props.push(a)},render:function render(t,e){for(var r=e._pt;r;)B?r.set(r.t,r.p,r.b,r):r.r(t,r.d),r=r._next}},{name:"endArray",init:function init(t,e){for(var r=e.length;r--;)this.add(t,r,t[r]||0,e[r],0,0,0,0,0,1)}},Jc("roundProps",fb),Jc("modifiers"),Jc("snap",gb))||Pe;Gt.version=Ut.version=Ce.version="3.11.3",o=1,x()&&zt();function td(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)}function ud(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)}function vd(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)}function wd(t,e){var r=e.s+e.c*t;e.set(e.t,e.p,~~(r+(r<0?-.5:.5))+e.u,e)}function xd(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)}function yd(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)}function zd(t,e,r){return t.style[e]=r}function Ad(t,e,r){return t.style.setProperty(e,r)}function Bd(t,e,r){return t._gsap[e]=r}function Cd(t,e,r){return t._gsap.scaleX=t._gsap.scaleY=r}function Dd(t,e,r,i,n){var a=t._gsap;a.scaleX=a.scaleY=r,a.renderTransform(n,a)}function Ed(t,e,r,i,n){var a=t._gsap;a[e]=r,a.renderTransform(n,a)}function Hd(t,e){var r=this,i=this.target,n=i.style;if(t in rr){if(this.tfm=this.tfm||{},"transform"!==t&&(~(t=hr[t]||t).indexOf(",")?t.split(",").forEach(function(t){return r.tfm[t]=mr(i,t)}):this.tfm[t]=i._gsap.x?i._gsap[t]:mr(i,t)),0<=this.props.indexOf(lr))return;i._gsap.svg&&(this.svgo=i.getAttribute("data-svg-origin"),this.props.push(fr,e,"")),t=lr}(n||e)&&this.props.push(t,e,n[t])}function Id(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))}function Jd(){var t,e,r=this.props,i=this.target,n=i.style,a=i._gsap;for(t=0;t<r.length;t+=3)r[t+1]?i[r[t]]=r[t+2]:r[t+2]?n[r[t]]=r[t+2]:n.removeProperty(r[t].replace(sr,"-$1").toLowerCase());if(this.tfm){for(e in this.tfm)a[e]=this.tfm[e];a.svg&&(a.renderTransform(),i.setAttribute("data-svg-origin",this.svgo||"")),!(t=Fe())||t.isStart||n[lr]||(Id(n),a.uncache=1)}}function Kd(t,e){var r={target:t,props:[],revert:Jd,save:Hd};return e&&e.split(",").forEach(function(t){return r.save(t)}),r}function Md(t,e){var r=Se.createElementNS?Se.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):Se.createElement(t);return r.style?r:Se.createElement(t)}function Nd(t,e,r){var i=getComputedStyle(t);return i[e]||i.getPropertyValue(e.replace(sr,"-$1").toLowerCase())||i.getPropertyValue(e)||!r&&Nd(t,dr(e)||e,1)||""}function Qd(){(function _windowExists(){return"undefined"!=typeof window})()&&window.document&&(Ae=window,Se=Ae.document,Re=Se.documentElement,Ee=Md("div")||{style:{}},Md("div"),lr=dr(lr),fr=lr+"Origin",Ee.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",Ie=!!dr("perspective"),Fe=Ce.core.reverting,De=1)}function Rd(t){var e,r=Md("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=this.parentNode,n=this.nextSibling,a=this.style.cssText;if(Re.appendChild(r),r.appendChild(this),this.style.display="block",t)try{e=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=Rd}catch(t){}else this._gsapBBox&&(e=this._gsapBBox());return i&&(n?i.insertBefore(this,n):i.appendChild(this)),Re.removeChild(r),this.style.cssText=a,e}function Sd(t,e){for(var r=e.length;r--;)if(t.hasAttribute(e[r]))return t.getAttribute(e[r])}function Td(e){var r;try{r=e.getBBox()}catch(t){r=Rd.call(e,!0)}return r&&(r.width||r.height)||e.getBBox===Rd||(r=Rd.call(e,!0)),!r||r.width||r.x||r.y?r:{x:+Sd(e,["x","cx","x1"])||0,y:+Sd(e,["y","cy","y1"])||0,width:0,height:0}}function Ud(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!Td(t))}function Vd(t,e){if(e){var r=t.style;e in rr&&e!==fr&&(e=lr),r.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),r.removeProperty(e.replace(sr,"-$1").toLowerCase())):r.removeAttribute(e)}}function Wd(t,e,r,i,n,a){var s=new pe(t._pt,e,r,0,1,a?yd:xd);return(t._pt=s).b=i,s.e=n,t._props.push(r),s}function Zd(t,e,r,i){var n,a,s,o,u=parseFloat(r)||0,h=(r+"").trim().substr((u+"").length)||"px",l=Ee.style,f=or.test(e),c="svg"===t.tagName.toLowerCase(),d=(c?"client":"offset")+(f?"Width":"Height"),p="px"===i,_="%"===i;return i===h||!u||pr[i]||pr[h]?u:("px"===h||p||(u=Zd(t,e,r,"px")),o=t.getCTM&&Ud(t),!_&&"%"!==h||!rr[e]&&!~e.indexOf("adius")?(l[f?"width":"height"]=100+(p?h:i),a=~e.indexOf("adius")||"em"===i&&t.appendChild&&!c?t:t.parentNode,o&&(a=(t.ownerSVGElement||{}).parentNode),a&&a!==Se&&a.appendChild||(a=Se.body),(s=a._gsap)&&_&&s.width&&f&&s.time===Et.time&&!s.uncache?ia(u/s.width*100):(!_&&"%"!==h||_r[Nd(a,"display")]||(l.position=Nd(t,"position")),a===t&&(l.position="static"),a.appendChild(Ee),n=Ee[d],a.removeChild(Ee),l.position="absolute",f&&_&&((s=fa(a)).time=Et.time,s.width=a[d]),ia(p?n*u/100:n&&u?100/n*u:0))):(n=o?t.getBBox()[f?"width":"height"]:t[d],ia(_?u/n*100:u/100*n)))}function _d(t,e,r,i){if(!r||"none"===r){var n=dr(e,t,1),a=n&&Nd(t,n,1);a&&a!==r?(e=n,r=a):"borderColor"===e&&(r=Nd(t,"borderTopColor"))}var s,o,u,h,l,f,c,d,p,_,m,g=new pe(this._pt,t.style,e,0,1,se),v=0,y=0;if(g.b=r,g.e=i,r+="","auto"===(i+="")&&(t.style[e]=i,i=Nd(t,e)||i,t.style[e]=r),Eb(s=[r,i]),i=s[1],u=(r=s[0]).match(rt)||[],(i.match(rt)||[]).length){for(;o=rt.exec(i);)c=o[0],p=i.substring(v,o.index),l?l=(l+1)%5:"rgba("!==p.substr(-5)&&"hsla("!==p.substr(-5)||(l=1),c!==(f=u[y++]||"")&&(h=parseFloat(f)||0,m=f.substr((h+"").length),"="===c.charAt(1)&&(c=ka(h,c)+m),d=parseFloat(c),_=c.substr((d+"").length),v=rt.lastIndex-_.length,_||(_=_||j.units[e]||m,v===i.length&&(i+=_,g.e+=_)),m!==_&&(h=Zd(t,e,f,_)||0),g._pt={_next:g._pt,p:p||1===y?p:",",s:h,c:d-h,m:l&&l<4||"zIndex"===e?Math.round:0});g.c=v<i.length?i.substring(v,i.length):""}else g.r="display"===e&&"none"===i?yd:xd;return nt.test(i)&&(g.e=0),this._pt=g}function be(t){var e=t.split(" "),r=e[0],i=e[1]||"50%";return"top"!==r&&"bottom"!==r&&"left"!==i&&"right"!==i||(t=r,r=i,i=t),e[0]=gr[r]||r,e[1]=gr[i]||i,e.join(" ")}function ce(t,e){if(e.tween&&e.tween._time===e.tween._dur){var r,i,n,a=e.t,s=a.style,o=e.u,u=a._gsap;if("all"===o||!0===o)s.cssText="",i=1;else for(n=(o=o.split(",")).length;-1<--n;)r=o[n],rr[r]&&(i=1,r="transformOrigin"===r?fr:lr),Vd(a,r);i&&(Vd(a,lr),u&&(u.svg&&a.removeAttribute("transform"),br(a,1),u.uncache=1,Id(s)))}}function ge(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t}function he(t){var e=Nd(t,lr);return ge(e)?yr:e.substr(7).match(et).map(ia)}function ie(t,e){var r,i,n,a,s=t._gsap||fa(t),o=t.style,u=he(t);return s.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(n=t.transform.baseVal.consolidate().matrix).a,n.b,n.c,n.d,n.e,n.f]).join(",")?yr:u:(u!==yr||t.offsetParent||t===Re||s.svg||(n=o.display,o.display="block",(r=t.parentNode)&&t.offsetParent||(a=1,i=t.nextElementSibling,Re.appendChild(t)),u=he(t),n?o.display=n:Vd(t,"display"),a&&(i?r.insertBefore(t,i):r?r.appendChild(t):Re.removeChild(t))),e&&6<u.length?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)}function je(t,e,r,i,n,a){var s,o,u,h=t._gsap,l=n||ie(t,!0),f=h.xOrigin||0,c=h.yOrigin||0,d=h.xOffset||0,p=h.yOffset||0,_=l[0],m=l[1],g=l[2],v=l[3],y=l[4],T=l[5],b=e.split(" "),w=parseFloat(b[0])||0,x=parseFloat(b[1])||0;r?l!==yr&&(o=_*v-m*g)&&(u=w*(-m/o)+x*(_/o)-(_*T-m*y)/o,w=w*(v/o)+x*(-g/o)+(g*T-v*y)/o,x=u):(w=(s=Td(t)).x+(~b[0].indexOf("%")?w/100*s.width:w),x=s.y+(~(b[1]||b[0]).indexOf("%")?x/100*s.height:x)),i||!1!==i&&h.smooth?(y=w-f,T=x-c,h.xOffset=d+(y*_+T*g)-y,h.yOffset=p+(y*m+T*v)-T):h.xOffset=h.yOffset=0,h.xOrigin=w,h.yOrigin=x,h.smooth=!!i,h.origin=e,h.originIsAbsolute=!!r,t.style[fr]="0px 0px",a&&(Wd(a,h,"xOrigin",f,w),Wd(a,h,"yOrigin",c,x),Wd(a,h,"xOffset",d,h.xOffset),Wd(a,h,"yOffset",p,h.yOffset)),t.setAttribute("data-svg-origin",w+" "+x)}function me(t,e,r){var i=Ya(e);return ia(parseFloat(e)+parseFloat(Zd(t,"x",r+"px",i)))+i}function te(t,e,i,n,a){var s,o,u=360,h=r(a),l=parseFloat(a)*(h&&~a.indexOf("rad")?ir:1)-n,f=n+l+"deg";return h&&("short"===(s=a.split("_")[1])&&(l%=u)!==l%180&&(l+=l<0?u:-u),"cw"===s&&l<0?l=(l+36e9)%u-~~(l/u)*u:"ccw"===s&&0<l&&(l=(l-36e9)%u-~~(l/u)*u)),t._pt=o=new pe(t._pt,e,i,n,l,ud),o.e=f,o.u="deg",t._props.push(i),o}function ue(t,e){for(var r in e)t[r]=e[r];return t}function ve(t,e,r){var i,n,a,s,o,u,h,l=ue({},r._gsap),f=r.style;for(n in l.svg?(a=r.getAttribute("transform"),r.setAttribute("transform",""),f[lr]=e,i=br(r,1),Vd(r,lr),r.setAttribute("transform",a)):(a=getComputedStyle(r)[lr],f[lr]=e,i=br(r,1),f[lr]=a),rr)(a=l[n])!==(s=i[n])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(n)<0&&(o=Ya(a)!==(h=Ya(s))?Zd(r,n,a,h):parseFloat(a),u=parseFloat(s),t._pt=new pe(t._pt,i,n,o,u-o,td),t._pt.u=h||0,t._props.push(n));ue(i,l)}var Ae,Se,Re,De,Ee,ze,Fe,Ie,Be=Ft.Power0,Le=Ft.Power1,Ye=Ft.Power2,Ne=Ft.Power3,qe=Ft.Power4,Ue=Ft.Linear,Ve=Ft.Quad,We=Ft.Cubic,Xe=Ft.Quart,He=Ft.Quint,Qe=Ft.Strong,Ke=Ft.Elastic,Ze=Ft.Back,Ge=Ft.SteppedEase,Je=Ft.Bounce,$e=Ft.Sine,tr=Ft.Expo,er=Ft.Circ,rr={},ir=180/Math.PI,nr=Math.PI/180,ar=Math.atan2,sr=/([A-Z])/g,or=/(left|right|width|margin|padding|x)/i,ur=/[\s,\(]\S/,hr={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},lr="transform",fr=lr+"Origin",cr="O,Moz,ms,Ms,Webkit".split(","),dr=function _checkPropPrefix(t,e,r){var i=(e||Ee).style,n=5;if(t in i&&!r)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);n--&&!(cr[n]+t in i););return n<0?null:(3===n?"ms":0<=n?cr[n]:"")+t},pr={deg:1,rad:1,turn:1},_r={grid:1,flex:1},mr=function _get(t,e,r,i){var n;return De||Qd(),e in hr&&"transform"!==e&&~(e=hr[e]).indexOf(",")&&(e=e.split(",")[0]),rr[e]&&"transform"!==e?(n=br(t,i),n="transformOrigin"!==e?n[e]:n.svg?n.origin:wr(Nd(t,fr))+" "+n.zOrigin+"px"):(n=t.style[e])&&"auto"!==n&&!i&&!~(n+"").indexOf("calc(")||(n=vr[e]&&vr[e](t,e,r)||Nd(t,e)||ga(t,e)||("opacity"===e?1:0)),r&&!~(n+"").trim().indexOf(" ")?Zd(t,e,n,r)+r:n},gr={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},vr={clearProps:function clearProps(t,e,r,i,n){if("isFromStart"!==n.data){var a=t._pt=new pe(t._pt,e,r,0,0,ce);return a.u=i,a.pr=-10,a.tween=n,t._props.push(r),1}}},yr=[1,0,0,1,0,0],Tr={},br=function _parseTransform(t,e){var r=t._gsap||new jt(t);if("x"in r&&!e&&!r.uncache)return r;var i,n,a,s,o,u,h,l,f,c,d,p,_,m,g,v,y,T,b,w,x,k,M,O,P,C,A,S,R,D,E,z,F=t.style,I=r.scaleX<0,B="deg",L=getComputedStyle(t),Y=Nd(t,fr)||"0";return i=n=a=u=h=l=f=c=d=0,s=o=1,r.svg=!(!t.getCTM||!Ud(t)),L.translate&&("none"===L.translate&&"none"===L.scale&&"none"===L.rotate||(F[lr]=("none"!==L.translate?"translate3d("+(L.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==L.rotate?"rotate("+L.rotate+") ":"")+("none"!==L.scale?"scale("+L.scale.split(" ").join(",")+") ":"")+("none"!==L[lr]?L[lr]:"")),F.scale=F.rotate=F.translate="none"),m=ie(t,r.svg),r.svg&&(O=r.uncache?(P=t.getBBox(),Y=r.xOrigin-P.x+"px "+(r.yOrigin-P.y)+"px",""):!e&&t.getAttribute("data-svg-origin"),je(t,O||Y,!!O||r.originIsAbsolute,!1!==r.smooth,m)),p=r.xOrigin||0,_=r.yOrigin||0,m!==yr&&(T=m[0],b=m[1],w=m[2],x=m[3],i=k=m[4],n=M=m[5],6===m.length?(s=Math.sqrt(T*T+b*b),o=Math.sqrt(x*x+w*w),u=T||b?ar(b,T)*ir:0,(f=w||x?ar(w,x)*ir+u:0)&&(o*=Math.abs(Math.cos(f*nr))),r.svg&&(i-=p-(p*T+_*w),n-=_-(p*b+_*x))):(z=m[6],D=m[7],A=m[8],S=m[9],R=m[10],E=m[11],i=m[12],n=m[13],a=m[14],h=(g=ar(z,R))*ir,g&&(O=k*(v=Math.cos(-g))+A*(y=Math.sin(-g)),P=M*v+S*y,C=z*v+R*y,A=k*-y+A*v,S=M*-y+S*v,R=z*-y+R*v,E=D*-y+E*v,k=O,M=P,z=C),l=(g=ar(-w,R))*ir,g&&(v=Math.cos(-g),E=x*(y=Math.sin(-g))+E*v,T=O=T*v-A*y,b=P=b*v-S*y,w=C=w*v-R*y),u=(g=ar(b,T))*ir,g&&(O=T*(v=Math.cos(g))+b*(y=Math.sin(g)),P=k*v+M*y,b=b*v-T*y,M=M*v-k*y,T=O,k=P),h&&359.9<Math.abs(h)+Math.abs(u)&&(h=u=0,l=180-l),s=ia(Math.sqrt(T*T+b*b+w*w)),o=ia(Math.sqrt(M*M+z*z)),g=ar(k,M),f=2e-4<Math.abs(g)?g*ir:0,d=E?1/(E<0?-E:E):0),r.svg&&(O=t.getAttribute("transform"),r.forceCSS=t.setAttribute("transform","")||!ge(Nd(t,lr)),O&&t.setAttribute("transform",O))),90<Math.abs(f)&&Math.abs(f)<270&&(I?(s*=-1,f+=u<=0?180:-180,u+=u<=0?180:-180):(o*=-1,f+=f<=0?180:-180)),e=e||r.uncache,r.x=i-((r.xPercent=i&&(!e&&r.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-i)?-50:0)))?t.offsetWidth*r.xPercent/100:0)+"px",r.y=n-((r.yPercent=n&&(!e&&r.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-n)?-50:0)))?t.offsetHeight*r.yPercent/100:0)+"px",r.z=a+"px",r.scaleX=ia(s),r.scaleY=ia(o),r.rotation=ia(u)+B,r.rotationX=ia(h)+B,r.rotationY=ia(l)+B,r.skewX=f+B,r.skewY=c+B,r.transformPerspective=d+"px",(r.zOrigin=parseFloat(Y.split(" ")[2])||0)&&(F[fr]=wr(Y)),r.xOffset=r.yOffset=0,r.force3D=j.force3D,r.renderTransform=r.svg?Cr:Ie?Pr:xr,r.uncache=0,r},wr=function _firstTwoOnly(t){return(t=t.split(" "))[0]+" "+t[1]},xr=function _renderNon3DTransforms(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,Pr(t,e)},kr="0deg",Mr="0px",Or=") ",Pr=function _renderCSSTransforms(t,e){var r=e||this,i=r.xPercent,n=r.yPercent,a=r.x,s=r.y,o=r.z,u=r.rotation,h=r.rotationY,l=r.rotationX,f=r.skewX,c=r.skewY,d=r.scaleX,p=r.scaleY,_=r.transformPerspective,m=r.force3D,g=r.target,v=r.zOrigin,y="",T="auto"===m&&t&&1!==t||!0===m;if(v&&(l!==kr||h!==kr)){var b,w=parseFloat(h)*nr,x=Math.sin(w),k=Math.cos(w);w=parseFloat(l)*nr,b=Math.cos(w),a=me(g,a,x*b*-v),s=me(g,s,-Math.sin(w)*-v),o=me(g,o,k*b*-v+v)}_!==Mr&&(y+="perspective("+_+Or),(i||n)&&(y+="translate("+i+"%, "+n+"%) "),!T&&a===Mr&&s===Mr&&o===Mr||(y+=o!==Mr||T?"translate3d("+a+", "+s+", "+o+") ":"translate("+a+", "+s+Or),u!==kr&&(y+="rotate("+u+Or),h!==kr&&(y+="rotateY("+h+Or),l!==kr&&(y+="rotateX("+l+Or),f===kr&&c===kr||(y+="skew("+f+", "+c+Or),1===d&&1===p||(y+="scale("+d+", "+p+Or),g.style[lr]=y||"translate(0, 0)"},Cr=function _renderSVGTransforms(t,e){var r,i,n,a,s,o=e||this,u=o.xPercent,h=o.yPercent,l=o.x,f=o.y,c=o.rotation,d=o.skewX,p=o.skewY,_=o.scaleX,m=o.scaleY,g=o.target,v=o.xOrigin,y=o.yOrigin,T=o.xOffset,b=o.yOffset,w=o.forceCSS,x=parseFloat(l),k=parseFloat(f);c=parseFloat(c),d=parseFloat(d),(p=parseFloat(p))&&(d+=p=parseFloat(p),c+=p),c||d?(c*=nr,d*=nr,r=Math.cos(c)*_,i=Math.sin(c)*_,n=Math.sin(c-d)*-m,a=Math.cos(c-d)*m,d&&(p*=nr,s=Math.tan(d-p),n*=s=Math.sqrt(1+s*s),a*=s,p&&(s=Math.tan(p),r*=s=Math.sqrt(1+s*s),i*=s)),r=ia(r),i=ia(i),n=ia(n),a=ia(a)):(r=_,a=m,i=n=0),(x&&!~(l+"").indexOf("px")||k&&!~(f+"").indexOf("px"))&&(x=Zd(g,"x",l,"px"),k=Zd(g,"y",f,"px")),(v||y||T||b)&&(x=ia(x+v-(v*r+y*n)+T),k=ia(k+y-(v*i+y*a)+b)),(u||h)&&(s=g.getBBox(),x=ia(x+u/100*s.width),k=ia(k+h/100*s.height)),s="matrix("+r+","+i+","+n+","+a+","+x+","+k+")",g.setAttribute("transform",s),w&&(g.style[lr]=s)};ha("padding,margin,Width,Radius",function(e,r){var t="Right",i="Bottom",n="Left",o=(r<3?["Top",t,i,n]:["Top"+n,"Top"+t,i+t,i+n]).map(function(t){return r<2?e+t:"border"+t+e});vr[1<r?"border"+e:e]=function(e,t,r,i,n){var a,s;if(arguments.length<4)return a=o.map(function(t){return mr(e,t,r)}),5===(s=a.join(" ")).split(a[0]).length?a[0]:s;a=(i+"").split(" "),s={},o.forEach(function(t,e){return s[t]=a[e]=a[e]||a[(e-1)/2|0]}),e.init(t,s,n)}});var Ar,Sr,Rr,Dr={name:"css",register:Qd,targetTest:function targetTest(t){return t.style&&t.nodeType},init:function init(t,e,i,n,a){var s,o,u,h,l,f,c,d,p,_,m,g,v,y,T,b,w=this._props,x=t.style,k=i.vars.startAt;for(c in De||Qd(),this.styles=this.styles||Kd(t),b=this.styles.props,this.tween=i,e)if("autoRound"!==c&&(o=e[c],!pt[c]||!_b(c,e,i,n,t,a)))if(l=typeof o,f=vr[c],"function"===l&&(l=typeof(o=o.call(i,n,t,a))),"string"===l&&~o.indexOf("random(")&&(o=ob(o)),f)f(this,t,c,o,i)&&(T=1);else if("--"===c.substr(0,2))s=(getComputedStyle(t).getPropertyValue(c)+"").trim(),o+="",Rt.lastIndex=0,Rt.test(s)||(d=Ya(s),p=Ya(o)),p?d!==p&&(s=Zd(t,c,s,p)+p):d&&(o+=d),this.add(x,"setProperty",s,o,n,a,0,0,c),w.push(c),b.push(c,0,x[c]);else if("undefined"!==l){if(k&&c in k?(s="function"==typeof k[c]?k[c].call(i,n,t,a):k[c],r(s)&&~s.indexOf("random(")&&(s=ob(s)),Ya(s+"")||(s+=j.units[c]||Ya(mr(t,c))||""),"="===(s+"").charAt(1)&&(s=mr(t,c))):s=mr(t,c),h=parseFloat(s),(_="string"===l&&"="===o.charAt(1)&&o.substr(0,2))&&(o=o.substr(2)),u=parseFloat(o),c in hr&&("autoAlpha"===c&&(1===h&&"hidden"===mr(t,"visibility")&&u&&(h=0),b.push("visibility",0,x.visibility),Wd(this,x,"visibility",h?"inherit":"hidden",u?"inherit":"hidden",!u)),"scale"!==c&&"transform"!==c&&~(c=hr[c]).indexOf(",")&&(c=c.split(",")[0])),m=c in rr)if(this.styles.save(c),g||((v=t._gsap).renderTransform&&!e.parseTransform||br(t,e.parseTransform),y=!1!==e.smoothOrigin&&v.smooth,(g=this._pt=new pe(this._pt,x,lr,0,1,v.renderTransform,v,0,-1)).dep=1),"scale"===c)this._pt=new pe(this._pt,v,"scaleY",h,(_?ka(h,_+u):u)-h||0,td),this._pt.u=0,w.push("scaleY",c),c+="X";else{if("transformOrigin"===c){b.push(fr,0,x[fr]),o=be(o),v.svg?je(t,o,0,y,0,this):((p=parseFloat(o.split(" ")[2])||0)!==v.zOrigin&&Wd(this,v,"zOrigin",v.zOrigin,p),Wd(this,x,c,wr(s),wr(o)));continue}if("svgOrigin"===c){je(t,o,1,y,0,this);continue}if(c in Tr){te(this,v,c,h,_?ka(h,_+o):o);continue}if("smoothOrigin"===c){Wd(this,v,"smooth",v.smooth,o);continue}if("force3D"===c){v[c]=o;continue}if("transform"===c){ve(this,o,t);continue}}else c in x||(c=dr(c)||c);if(m||(u||0===u)&&(h||0===h)&&!ur.test(o)&&c in x)u=u||0,(d=(s+"").substr((h+"").length))!==(p=Ya(o)||(c in j.units?j.units[c]:d))&&(h=Zd(t,c,s,p)),this._pt=new pe(this._pt,m?v:x,c,h,(_?ka(h,_+u):u)-h,m||"px"!==p&&"zIndex"!==c||!1===e.autoRound?td:wd),this._pt.u=p||0,d!==p&&"%"!==p&&(this._pt.b=s,this._pt.r=vd);else if(c in x)_d.call(this,t,c,s,_?_+o:o);else{if(!(c in t)){Q(c,o);continue}this.add(t,c,s||t[c],_?_+o:o,n,a)}m||(c in x?b.push(c,0,x[c]):b.push(c,1,s||t[c])),w.push(c)}T&&de(this)},render:function render(t,e){if(e.tween._time||!Fe())for(var r=e._pt;r;)r.r(t,r.d),r=r._next;else e.styles.revert()},get:mr,aliases:hr,getSetter:function getSetter(t,e,r){var i=hr[e];return i&&i.indexOf(",")<0&&(e=i),e in rr&&e!==fr&&(t._gsap.x||mr(t,"x"))?r&&ze===r?"scale"===e?Cd:Bd:(ze=r||{})&&("scale"===e?Dd:Ed):t.style&&!u(t.style[e])?zd:~e.indexOf("-")?Ad:re(t,e)},core:{_removeProperty:Vd,_getMatrix:ie}};Ce.utils.checkPrefix=dr,Ce.core.getStyleSaver=Kd,Rr=ha((Ar="x,y,z,scale,scaleX,scaleY,xPercent,yPercent")+","+(Sr="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",function(t){rr[t]=1}),ha(Sr,function(t){j.units[t]="deg",Tr[t]=1}),hr[Rr[13]]=Ar+","+Sr,ha("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",function(t){var e=t.split(":");hr[e[1]]=Rr[e[0]]}),ha("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",function(t){j.units[t]="px"}),Ce.registerPlugin(Dr);var Er=Ce.registerPlugin(Dr)||Ce,zr=Er.core.Tween;e.Back=Ze,e.Bounce=Je,e.CSSPlugin=Dr,e.Circ=er,e.Cubic=We,e.Elastic=Ke,e.Expo=tr,e.Linear=Ue,e.Power0=Be,e.Power1=Le,e.Power2=Ye,e.Power3=Ne,e.Power4=qe,e.Quad=Ve,e.Quart=Xe,e.Quint=He,e.Sine=$e,e.SteppedEase=Ge,e.Strong=Qe,e.TimelineLite=Ut,e.TimelineMax=Ut,e.TweenLite=Gt,e.TweenMax=zr,e.default=Er,e.gsap=Er;if (typeof(window)==="undefined"||window!==e){Object.defineProperty(e,"__esModule",{value:!0})} else {delete e.default}});


/***/ }),

/***/ "./src/libraries/input-mask.min.js":
/*!*****************************************!*\
  !*** ./src/libraries/input-mask.min.js ***!
  \*****************************************/
/***/ (function(module) {

/*!
 * dist/inputmask.min
 * https://github.com/RobinHerbots/Inputmask
 * Copyright (c) 2010 - 2022 Robin Herbots
 * Licensed under the MIT license
 * Version: 5.0.8-beta.57
 */
!function(e,t){if(true)module.exports=t();else { var a, i; }}("undefined"!=typeof self?self:this,(function(){return function(){"use strict";var e={8741:function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=!("undefined"==typeof window||!window.document||!window.document.createElement);t.default=i},3976:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=i(2839),n={_maxTestPos:500,placeholder:"_",optionalmarker:["[","]"],quantifiermarker:["{","}"],groupmarker:["(",")"],alternatormarker:"|",escapeChar:"\\",mask:null,regex:null,oncomplete:function(){},onincomplete:function(){},oncleared:function(){},repeat:0,greedy:!1,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,insertModeVisual:!0,clearIncomplete:!1,alias:null,onKeyDown:function(){},onBeforeMask:null,onBeforePaste:function(e,t){return"function"==typeof t.onBeforeMask?t.onBeforeMask.call(this,e,t):e},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:function(){},skipOptionalPartCharacter:" ",numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",_radixDance:!1,groupSeparator:"",keepStatic:null,positionCaretOnTab:!0,tabThrough:!1,supportsInputType:["text","tel","url","password","search"],ignorables:[a.keys.Backspace,a.keys.Tab,a.keys.Pause,a.keys.Escape,a.keys.PageUp,a.keys.PageDown,a.keys.End,a.keys.Home,a.keys.ArrowLeft,a.keys.ArrowUp,a.keys.ArrowRight,a.keys.ArrowDown,a.keys.Insert,a.keys.Delete,a.keys.ContextMenu,a.keys.F1,a.keys.F2,a.keys.F3,a.keys.F4,a.keys.F5,a.keys.F6,a.keys.F7,a.keys.F8,a.keys.F9,a.keys.F10,a.keys.F11,a.keys.F12,a.keys.Process,a.keys.Unidentified,a.keys.Shift,a.keys.Control,a.keys.Alt,a.keys.Tab,a.keys.AltGraph,a.keys.CapsLock],isComplete:null,preValidation:null,postValidation:null,staticDefinitionSymbol:void 0,jitMasking:!1,nullable:!0,inputEventOnly:!1,noValuePatching:!1,positionCaretOnClick:"lvp",casing:null,inputmode:"text",importDataAttributes:!0,shiftPositions:!0,usePrototypeDefinitions:!0,validationEventTimeOut:3e3,substitutes:{}};t.default=n},7392:function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={9:{validator:"[0-9\uff10-\uff19]",definitionSymbol:"*"},a:{validator:"[A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]",definitionSymbol:"*"},"*":{validator:"[0-9\uff10-\uff19A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]"}}},253:function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,i){if(void 0===i)return e.__data?e.__data[t]:null;e.__data=e.__data||{},e.__data[t]=i}},3776:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.Event=void 0,t.off=function(e,t){var i,a;function n(e,t,n){if(e in i==!0)if(a.removeEventListener?a.removeEventListener(e,n,!1):a.detachEvent&&a.detachEvent("on"+e,n),"global"===t)for(var r in i[e])i[e][r].splice(i[e][r].indexOf(n),1);else i[e][t].splice(i[e][t].indexOf(n),1)}function r(e,a){var n,r,o=[];if(e.length>0)if(void 0===t)for(n=0,r=i[e][a].length;n<r;n++)o.push({ev:e,namespace:a&&a.length>0?a:"global",handler:i[e][a][n]});else o.push({ev:e,namespace:a&&a.length>0?a:"global",handler:t});else if(a.length>0)for(var s in i)for(var l in i[s])if(l===a)if(void 0===t)for(n=0,r=i[s][l].length;n<r;n++)o.push({ev:s,namespace:l,handler:i[s][l][n]});else o.push({ev:s,namespace:l,handler:t});return o}if(c(this[0])&&e){i=this[0].eventRegistry,a=this[0];for(var o=e.split(" "),s=0;s<o.length;s++)for(var l=o[s].split("."),u=r(l[0],l[1]),f=0,d=u.length;f<d;f++)n(u[f].ev,u[f].namespace,u[f].handler)}return this},t.on=function(e,t){function i(e,i){n.addEventListener?n.addEventListener(e,t,!1):n.attachEvent&&n.attachEvent("on"+e,t),a[e]=a[e]||{},a[e][i]=a[e][i]||[],a[e][i].push(t)}if(c(this[0]))for(var a=this[0].eventRegistry,n=this[0],r=e.split(" "),o=0;o<r.length;o++){var s=r[o].split("."),l=s[0],u=s[1]||"global";i(l,u)}return this},t.trigger=function(e){if(c(this[0]))for(var t=this[0].eventRegistry,i=this[0],a="string"==typeof e?e.split(" "):[e.type],r=0;r<a.length;r++){var s=a[r].split("."),l=s[0],u=s[1]||"global";if(void 0!==document&&"global"===u){var f,d,p={bubbles:!0,cancelable:!0,composed:!0,detail:arguments[1]};if(document.createEvent){try{if("input"===l)p.inputType="insertText",f=new InputEvent(l,p);else f=new CustomEvent(l,p)}catch(e){(f=document.createEvent("CustomEvent")).initCustomEvent(l,p.bubbles,p.cancelable,p.detail)}e.type&&(0,n.default)(f,e),i.dispatchEvent(f)}else(f=document.createEventObject()).eventType=l,f.detail=arguments[1],e.type&&(0,n.default)(f,e),i.fireEvent("on"+f.eventType,f)}else if(void 0!==t[l])if(arguments[0]=arguments[0].type?arguments[0]:o.default.Event(arguments[0]),arguments[0].detail=arguments.slice(1),"global"===u)for(var h in t[l])for(d=0;d<t[l][h].length;d++)t[l][h][d].apply(i,arguments);else for(d=0;d<t[l][u].length;d++)t[l][u][d].apply(i,arguments)}return this};var a,n=l(i(600)),r=l(i(9380)),o=l(i(4963)),s=l(i(8741));function l(e){return e&&e.__esModule?e:{default:e}}function c(e){return e instanceof Element}t.Event=a,"function"==typeof r.default.CustomEvent?t.Event=a=r.default.CustomEvent:s.default&&(t.Event=a=function(e,t){t=t||{bubbles:!1,cancelable:!1,composed:!0,detail:void 0};var i=document.createEvent("CustomEvent");return i.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),i},a.prototype=r.default.Event.prototype)},600:function(e,t){function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function e(){var t,a,n,r,o,s,l=arguments[0]||{},c=1,u=arguments.length,f=!1;"boolean"==typeof l&&(f=l,l=arguments[c]||{},c++);"object"!==i(l)&&"function"!=typeof l&&(l={});for(;c<u;c++)if(null!=(t=arguments[c]))for(a in t)n=l[a],r=t[a],l!==r&&(f&&r&&("[object Object]"===Object.prototype.toString.call(r)||(o=Array.isArray(r)))?(o?(o=!1,s=n&&Array.isArray(n)?n:[]):s=n&&"[object Object]"===Object.prototype.toString.call(n)?n:{},l[a]=e(f,s,r)):void 0!==r&&(l[a]=r));return l}},4963:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=s(i(600)),n=s(i(9380)),r=s(i(253)),o=i(3776);function s(e){return e&&e.__esModule?e:{default:e}}var l=n.default.document;function c(e){return e instanceof c?e:this instanceof c?void(null!=e&&e!==n.default&&(this[0]=e.nodeName?e:void 0!==e[0]&&e[0].nodeName?e[0]:l.querySelector(e),void 0!==this[0]&&null!==this[0]&&(this[0].eventRegistry=this[0].eventRegistry||{}))):new c(e)}c.prototype={on:o.on,off:o.off,trigger:o.trigger},c.extend=a.default,c.data=r.default,c.Event=o.Event;var u=c;t.default=u},9845:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.mobile=t.iphone=t.ie=void 0;var a,n=(a=i(9380))&&a.__esModule?a:{default:a};var r=n.default.navigator&&n.default.navigator.userAgent||"",o=r.indexOf("MSIE ")>0||r.indexOf("Trident/")>0,s=navigator.userAgentData&&navigator.userAgentData.mobile||n.default.navigator&&n.default.navigator.maxTouchPoints||"ontouchstart"in n.default,l=/iphone/i.test(r);t.iphone=l,t.mobile=s,t.ie=o},7184:function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.replace(i,"\\$1")};var i=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"].join("|\\")+")","gim")},6030:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.EventHandlers=void 0;var a=i(8711),n=i(2839),r=i(9845),o=i(7215),s=i(7760),l=i(4713);function c(e,t){var i="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!i){if(Array.isArray(e)||(i=function(e,t){if(!e)return;if("string"==typeof e)return u(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);"Object"===i&&e.constructor&&(i=e.constructor.name);if("Map"===i||"Set"===i)return Array.from(e);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return u(e,t)}(e))||t&&e&&"number"==typeof e.length){i&&(e=i);var a=0,n=function(){};return{s:n,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,o=!0,s=!1;return{s:function(){i=i.call(e)},n:function(){var e=i.next();return o=e.done,e},e:function(e){s=!0,r=e},f:function(){try{o||null==i.return||i.return()}finally{if(s)throw r}}}}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,a=new Array(t);i<t;i++)a[i]=e[i];return a}var f={keyEvent:function(e,t,i,c,u){var d=this.inputmask,p=d.opts,h=d.dependencyLib,v=d.maskset,m=this,g=h(m),k=e.key,y=a.caret.call(d,m),b=p.onKeyDown.call(this,e,a.getBuffer.call(d),y,p);if(void 0!==b)return b;if(k===n.keys.Backspace||k===n.keys.Delete||r.iphone&&k===n.keys.BACKSPACE_SAFARI||e.ctrlKey&&k===n.keys.x&&!("oncut"in m))e.preventDefault(),o.handleRemove.call(d,m,k,y),(0,s.writeBuffer)(m,a.getBuffer.call(d,!0),v.p,e,m.inputmask._valueGet()!==a.getBuffer.call(d).join(""));else if(k===n.keys.End||k===n.keys.PageDown){e.preventDefault();var x=a.seekNext.call(d,a.getLastValidPosition.call(d));a.caret.call(d,m,e.shiftKey?y.begin:x,x,!0)}else k===n.keys.Home&&!e.shiftKey||k===n.keys.PageUp?(e.preventDefault(),a.caret.call(d,m,0,e.shiftKey?y.begin:0,!0)):p.undoOnEscape&&k===n.keys.Escape&&!0!==e.altKey?((0,s.checkVal)(m,!0,!1,d.undoValue.split("")),g.trigger("click")):k!==n.keys.Insert||e.shiftKey||e.ctrlKey||void 0!==d.userOptions.insertMode?!0===p.tabThrough&&k===n.keys.Tab?!0===e.shiftKey?(y.end=a.seekPrevious.call(d,y.end,!0),!0===l.getTest.call(d,y.end-1).match.static&&y.end--,y.begin=a.seekPrevious.call(d,y.end,!0),y.begin>=0&&y.end>0&&(e.preventDefault(),a.caret.call(d,m,y.begin,y.end))):(y.begin=a.seekNext.call(d,y.begin,!0),y.end=a.seekNext.call(d,y.begin,!0),y.end<v.maskLength&&y.end--,y.begin<=v.maskLength&&(e.preventDefault(),a.caret.call(d,m,y.begin,y.end))):e.shiftKey||p.insertModeVisual&&!1===p.insertMode&&(k===n.keys.ArrowRight?setTimeout((function(){var e=a.caret.call(d,m);a.caret.call(d,m,e.begin)}),0):k===n.keys.ArrowLeft&&setTimeout((function(){var e=a.translatePosition.call(d,m.inputmask.caretPos.begin);a.translatePosition.call(d,m.inputmask.caretPos.end);d.isRTL?a.caret.call(d,m,e+(e===v.maskLength?0:1)):a.caret.call(d,m,e-(0===e?0:1))}),0)):o.isSelection.call(d,y)?p.insertMode=!p.insertMode:(p.insertMode=!p.insertMode,a.caret.call(d,m,y.begin,y.begin));return d.isComposing=k==n.keys.Process||k==n.keys.Unidentified,d.ignorable=p.ignorables.includes(k),f.keypressEvent.call(this,e,t,i,c,u)},keypressEvent:function(e,t,i,r,l){var c=this.inputmask||this,u=c.opts,f=c.dependencyLib,d=c.maskset,p=c.el,h=f(p),v=e.key;if(!0===t||e.ctrlKey&&e.altKey||!(e.ctrlKey||e.metaKey||c.ignorable)){if(v){var m,g=t?{begin:l,end:l}:a.caret.call(c,p);v=u.substitutes[v]||v,d.writeOutBuffer=!0;var k=o.isValid.call(c,g,v,r,void 0,void 0,void 0,t);if(!1!==k&&(a.resetMaskSet.call(c,!0),m=void 0!==k.caret?k.caret:a.seekNext.call(c,k.pos.begin?k.pos.begin:k.pos),d.p=m),m=u.numericInput&&void 0===k.caret?a.seekPrevious.call(c,m):m,!1!==i&&(setTimeout((function(){u.onKeyValidation.call(p,v,k)}),0),d.writeOutBuffer&&!1!==k)){var y=a.getBuffer.call(c);(0,s.writeBuffer)(p,y,m,e,!0!==t)}if(e.preventDefault(),t)return!1!==k&&(k.forwardPosition=m),k}}else v===n.keys.Enter&&c.undoValue!==c._valueGet(!0)&&(c.undoValue=c._valueGet(!0),setTimeout((function(){h.trigger("change")}),0))},pasteEvent:function(e){var t,i=this.inputmask,n=i.opts,r=i._valueGet(!0),o=a.caret.call(i,this);i.isRTL&&(t=o.end,o.end=a.translatePosition.call(i,o.begin),o.begin=a.translatePosition.call(i,t));var l=r.substr(0,o.begin),u=r.substr(o.end,r.length);if(l==(i.isRTL?a.getBufferTemplate.call(i).slice().reverse():a.getBufferTemplate.call(i)).slice(0,o.begin).join("")&&(l=""),u==(i.isRTL?a.getBufferTemplate.call(i).slice().reverse():a.getBufferTemplate.call(i)).slice(o.end).join("")&&(u=""),window.clipboardData&&window.clipboardData.getData)r=l+window.clipboardData.getData("Text")+u;else{if(!e.clipboardData||!e.clipboardData.getData)return!0;r=l+e.clipboardData.getData("text/plain")+u}var f=r;if(i.isRTL){f=f.split("");var d,p=c(a.getBufferTemplate.call(i));try{for(p.s();!(d=p.n()).done;){var h=d.value;f[0]===h&&f.shift()}}catch(e){p.e(e)}finally{p.f()}f=f.join("")}if("function"==typeof n.onBeforePaste){if(!1===(f=n.onBeforePaste.call(i,f,n)))return!1;f||(f=r)}(0,s.checkVal)(this,!0,!1,f.toString().split(""),e),e.preventDefault()},inputFallBackEvent:function(e){var t=this.inputmask,i=t.opts,r=t.dependencyLib;var o,c=this,u=c.inputmask._valueGet(!0),d=(t.isRTL?a.getBuffer.call(t).slice().reverse():a.getBuffer.call(t)).join(""),p=a.caret.call(t,c,void 0,void 0,!0);if(d!==u){if(o=function(e,n,r){for(var o,s,c,u=e.substr(0,r.begin).split(""),f=e.substr(r.begin).split(""),d=n.substr(0,r.begin).split(""),p=n.substr(r.begin).split(""),h=u.length>=d.length?u.length:d.length,v=f.length>=p.length?f.length:p.length,m="",g=[],k="~";u.length<h;)u.push(k);for(;d.length<h;)d.push(k);for(;f.length<v;)f.unshift(k);for(;p.length<v;)p.unshift(k);var y=u.concat(f),b=d.concat(p);for(s=0,o=y.length;s<o;s++)switch(c=l.getPlaceholder.call(t,a.translatePosition.call(t,s)),m){case"insertText":b[s-1]===y[s]&&r.begin==y.length-1&&g.push(y[s]),s=o;break;case"insertReplacementText":case"deleteContentBackward":y[s]===k?r.end++:s=o;break;default:y[s]!==b[s]&&(y[s+1]!==k&&y[s+1]!==c&&void 0!==y[s+1]||(b[s]!==c||b[s+1]!==k)&&b[s]!==k?b[s+1]===k&&b[s]===y[s+1]?(m="insertText",g.push(y[s]),r.begin--,r.end--):y[s]!==c&&y[s]!==k&&(y[s+1]===k||b[s]!==y[s]&&b[s+1]===y[s+1])?(m="insertReplacementText",g.push(y[s]),r.begin--):y[s]===k?(m="deleteContentBackward",(a.isMask.call(t,a.translatePosition.call(t,s),!0)||b[s]===i.radixPoint)&&r.end++):s=o:(m="insertText",g.push(y[s]),r.begin--,r.end--))}return{action:m,data:g,caret:r}}(u,d,p),(c.inputmask.shadowRoot||c.ownerDocument).activeElement!==c&&c.focus(),(0,s.writeBuffer)(c,a.getBuffer.call(t)),a.caret.call(t,c,p.begin,p.end,!0),t.skipNextInsert&&"insertText"===e.inputType&&"insertText"===o.action&&t.isComposing)return!1;switch("insertCompositionText"===e.inputType&&"insertText"===o.action&&t.isComposing?t.skipNextInsert=!0:t.skipNextInsert=!1,o.action){case"insertText":case"insertReplacementText":o.data.forEach((function(e,i){var a=new r.Event("keypress");a.key=e,t.ignorable=!1,f.keypressEvent.call(c,a)})),setTimeout((function(){t.$el.trigger("keyup")}),0);break;case"deleteContentBackward":var h=new r.Event("keydown");h.key=n.keys.Backspace,f.keyEvent.call(c,h);break;default:(0,s.applyInputValue)(c,u),a.caret.call(t,c,p.begin,p.end,!0)}e.preventDefault()}},setValueEvent:function(e){var t=this.inputmask,i=this,n=e&&e.detail?e.detail[0]:arguments[1];void 0===n&&(n=i.inputmask._valueGet(!0)),(0,s.applyInputValue)(i,n),(e.detail&&void 0!==e.detail[1]||void 0!==arguments[2])&&a.caret.call(t,i,e.detail?e.detail[1]:arguments[2])},focusEvent:function(e){var t=this.inputmask,i=t.opts,n=this,r=n.inputmask._valueGet();i.showMaskOnFocus&&r!==a.getBuffer.call(t).join("")&&(0,s.writeBuffer)(n,a.getBuffer.call(t),a.seekNext.call(t,a.getLastValidPosition.call(t))),!0!==i.positionCaretOnTab||!1!==t.mouseEnter||o.isComplete.call(t,a.getBuffer.call(t))&&-1!==a.getLastValidPosition.call(t)||f.clickEvent.apply(n,[e,!0]),t.undoValue=t._valueGet(!0)},invalidEvent:function(e){this.inputmask.validationEvent=!0},mouseleaveEvent:function(){var e=this.inputmask,t=e.opts,i=this;e.mouseEnter=!1,t.clearMaskOnLostFocus&&(i.inputmask.shadowRoot||i.ownerDocument).activeElement!==i&&(0,s.HandleNativePlaceholder)(i,e.originalPlaceholder)},clickEvent:function(e,t){var i=this.inputmask;i.clicked++;var n=this;if((n.inputmask.shadowRoot||n.ownerDocument).activeElement===n){var r=a.determineNewCaretPosition.call(i,a.caret.call(i,n),t);void 0!==r&&a.caret.call(i,n,r)}},cutEvent:function(e){var t=this.inputmask,i=t.maskset,r=this,l=a.caret.call(t,r),c=t.isRTL?a.getBuffer.call(t).slice(l.end,l.begin):a.getBuffer.call(t).slice(l.begin,l.end),u=t.isRTL?c.reverse().join(""):c.join("");window.navigator.clipboard?window.navigator.clipboard.writeText(u):window.clipboardData&&window.clipboardData.getData&&window.clipboardData.setData("Text",u),o.handleRemove.call(t,r,n.keys.Delete,l),(0,s.writeBuffer)(r,a.getBuffer.call(t),i.p,e,t.undoValue!==t._valueGet(!0))},blurEvent:function(e){var t=this.inputmask,i=t.opts,n=t.dependencyLib;t.clicked=0;var r=n(this),l=this;if(l.inputmask){(0,s.HandleNativePlaceholder)(l,t.originalPlaceholder);var c=l.inputmask._valueGet(),u=a.getBuffer.call(t).slice();""!==c&&(i.clearMaskOnLostFocus&&(-1===a.getLastValidPosition.call(t)&&c===a.getBufferTemplate.call(t).join("")?u=[]:s.clearOptionalTail.call(t,u)),!1===o.isComplete.call(t,u)&&(setTimeout((function(){r.trigger("incomplete")}),0),i.clearIncomplete&&(a.resetMaskSet.call(t),u=i.clearMaskOnLostFocus?[]:a.getBufferTemplate.call(t).slice())),(0,s.writeBuffer)(l,u,void 0,e)),t.undoValue!==t._valueGet(!0)&&(t.undoValue=t._valueGet(!0),r.trigger("change"))}},mouseenterEvent:function(){var e=this.inputmask,t=e.opts.showMaskOnHover,i=this;if(e.mouseEnter=!0,(i.inputmask.shadowRoot||i.ownerDocument).activeElement!==i){var n=(e.isRTL?a.getBufferTemplate.call(e).slice().reverse():a.getBufferTemplate.call(e)).join("");t&&(0,s.HandleNativePlaceholder)(i,n)}},submitEvent:function(){var e=this.inputmask,t=e.opts;e.undoValue!==e._valueGet(!0)&&e.$el.trigger("change"),-1===a.getLastValidPosition.call(e)&&e._valueGet&&e._valueGet()===a.getBufferTemplate.call(e).join("")&&e._valueSet(""),t.clearIncomplete&&!1===o.isComplete.call(e,a.getBuffer.call(e))&&e._valueSet(""),t.removeMaskOnSubmit&&(e._valueSet(e.unmaskedvalue(),!0),setTimeout((function(){(0,s.writeBuffer)(e.el,a.getBuffer.call(e))}),0))},resetEvent:function(){var e=this.inputmask;e.refreshValue=!0,setTimeout((function(){(0,s.applyInputValue)(e.el,e._valueGet(!0))}),0)}};t.EventHandlers=f},9716:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.EventRuler=void 0;var a,n=(a=i(2394))&&a.__esModule?a:{default:a},r=i(2839),o=i(8711),s=i(7760);var l={on:function(e,t,i){var a=e.inputmask.dependencyLib,l=function(t){t.originalEvent&&(t=t.originalEvent||t,arguments[0]=t);var l,c=this,u=c.inputmask,f=u?u.opts:void 0;if(void 0===u&&"FORM"!==this.nodeName){var d=a.data(c,"_inputmask_opts");a(c).off(),d&&new n.default(d).mask(c)}else{if(["submit","reset","setvalue"].includes(t.type)||"FORM"===this.nodeName||!(c.disabled||c.readOnly&&!("keydown"===t.type&&t.ctrlKey&&t.key===r.keys.c||!1===f.tabThrough&&t.key===r.keys.Tab))){switch(t.type){case"input":if(!0===u.skipInputEvent)return u.skipInputEvent=!1,t.preventDefault();break;case"click":case"focus":return u.validationEvent?(u.validationEvent=!1,e.blur(),(0,s.HandleNativePlaceholder)(e,(u.isRTL?o.getBufferTemplate.call(u).slice().reverse():o.getBufferTemplate.call(u)).join("")),setTimeout((function(){e.focus()}),f.validationEventTimeOut),!1):(l=arguments,void setTimeout((function(){e.inputmask&&i.apply(c,l)}),0))}var p=i.apply(c,arguments);return!1===p&&(t.preventDefault(),t.stopPropagation()),p}t.preventDefault()}};["submit","reset"].includes(t)?(l=l.bind(e),null!==e.form&&a(e.form).on(t,l)):a(e).on(t,l),e.inputmask.events[t]=e.inputmask.events[t]||[],e.inputmask.events[t].push(l)},off:function(e,t){if(e.inputmask&&e.inputmask.events){var i=e.inputmask.dependencyLib,a=e.inputmask.events;for(var n in t&&((a=[])[t]=e.inputmask.events[t]),a){for(var r=a[n];r.length>0;){var o=r.pop();["submit","reset"].includes(n)?null!==e.form&&i(e.form).off(n,o):i(e).off(n,o)}delete e.inputmask.events[n]}}}};t.EventRuler=l},219:function(e,t,i){var a=d(i(2394)),n=i(2839),r=d(i(7184)),o=i(8711),s=i(4713);function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var i=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=i){var a,n,r,o,s=[],l=!0,c=!1;try{if(r=(i=i.call(e)).next,0===t){if(Object(i)!==i)return;l=!1}else for(;!(l=(a=r.call(i)).done)&&(s.push(a.value),s.length!==t);l=!0);}catch(e){c=!0,n=e}finally{try{if(!l&&null!=i.return&&(o=i.return(),Object(o)!==o))return}finally{if(c)throw n}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return c(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);"Object"===i&&e.constructor&&(i=e.constructor.name);if("Map"===i||"Set"===i)return Array.from(e);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return c(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,a=new Array(t);i<t;i++)a[i]=e[i];return a}function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function f(e,t){for(var i=0;i<t.length;i++){var a=t[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,(n=a.key,r=void 0,r=function(e,t){if("object"!==u(e)||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var a=i.call(e,t||"default");if("object"!==u(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(n,"string"),"symbol"===u(r)?r:String(r)),a)}var n,r}function d(e){return e&&e.__esModule?e:{default:e}}var p=a.default.dependencyLib,h=function(){function e(t,i,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.mask=t,this.format=i,this.opts=a,this._date=new Date(1,0,1),this.initDateObject(t,this.opts)}var t,i,a;return t=e,(i=[{key:"date",get:function(){return void 0===this._date&&(this._date=new Date(1,0,1),this.initDateObject(void 0,this.opts)),this._date}},{key:"initDateObject",value:function(e,t){var i;for(P(t).lastIndex=0;i=P(t).exec(this.format);){var a=new RegExp("\\d+$").exec(i[0]),n=a?i[0][0]+"x":i[0],r=void 0;if(void 0!==e){if(a){var o=P(t).lastIndex,s=E(i.index,t);P(t).lastIndex=o,r=e.slice(0,e.indexOf(s.nextMatch[0]))}else r=e.slice(0,g[n]&&g[n][4]||n.length);e=e.slice(r.length)}Object.prototype.hasOwnProperty.call(g,n)&&this.setValue(this,r,n,g[n][2],g[n][1])}}},{key:"setValue",value:function(e,t,i,a,n){if(void 0!==t&&(e[a]="ampm"===a?t:t.replace(/[^0-9]/g,"0"),e["raw"+a]=t.replace(/\s/g,"_")),void 0!==n){var r=e[a];("day"===a&&29===parseInt(r)||"month"===a&&2===parseInt(r))&&(29!==parseInt(e.day)||2!==parseInt(e.month)||""!==e.year&&void 0!==e.year||e._date.setFullYear(2012,1,29)),"day"===a&&(m=!0,0===parseInt(r)&&(r=1)),"month"===a&&(m=!0),"year"===a&&(m=!0,r.length<4&&(r=_(r,4,!0))),""===r||isNaN(r)||n.call(e._date,r),"ampm"===a&&n.call(e._date,r)}}},{key:"reset",value:function(){this._date=new Date(1,0,1)}},{key:"reInit",value:function(){this._date=void 0,this.date}}])&&f(t.prototype,i),a&&f(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}(),v=(new Date).getFullYear(),m=!1,g={d:["[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",Date.prototype.getDate],dd:["0[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",function(){return _(Date.prototype.getDate.call(this),2)}],ddd:[""],dddd:[""],m:["[1-9]|1[012]",function(e){var t=e?parseInt(e):0;return t>0&&t--,Date.prototype.setMonth.call(this,t)},"month",function(){return Date.prototype.getMonth.call(this)+1}],mm:["0[1-9]|1[012]",function(e){var t=e?parseInt(e):0;return t>0&&t--,Date.prototype.setMonth.call(this,t)},"month",function(){return _(Date.prototype.getMonth.call(this)+1,2)}],mmm:[""],mmmm:[""],yy:["[0-9]{2}",Date.prototype.setFullYear,"year",function(){return _(Date.prototype.getFullYear.call(this),2)}],yyyy:["[0-9]{4}",Date.prototype.setFullYear,"year",function(){return _(Date.prototype.getFullYear.call(this),4)}],h:["[1-9]|1[0-2]",Date.prototype.setHours,"hours",Date.prototype.getHours],hh:["0[1-9]|1[0-2]",Date.prototype.setHours,"hours",function(){return _(Date.prototype.getHours.call(this),2)}],hx:[function(e){return"[0-9]{".concat(e,"}")},Date.prototype.setHours,"hours",function(e){return Date.prototype.getHours}],H:["1?[0-9]|2[0-3]",Date.prototype.setHours,"hours",Date.prototype.getHours],HH:["0[0-9]|1[0-9]|2[0-3]",Date.prototype.setHours,"hours",function(){return _(Date.prototype.getHours.call(this),2)}],Hx:[function(e){return"[0-9]{".concat(e,"}")},Date.prototype.setHours,"hours",function(e){return function(){return _(Date.prototype.getHours.call(this),e)}}],M:["[1-5]?[0-9]",Date.prototype.setMinutes,"minutes",Date.prototype.getMinutes],MM:["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]",Date.prototype.setMinutes,"minutes",function(){return _(Date.prototype.getMinutes.call(this),2)}],s:["[1-5]?[0-9]",Date.prototype.setSeconds,"seconds",Date.prototype.getSeconds],ss:["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]",Date.prototype.setSeconds,"seconds",function(){return _(Date.prototype.getSeconds.call(this),2)}],l:["[0-9]{3}",Date.prototype.setMilliseconds,"milliseconds",function(){return _(Date.prototype.getMilliseconds.call(this),3)},3],L:["[0-9]{2}",Date.prototype.setMilliseconds,"milliseconds",function(){return _(Date.prototype.getMilliseconds.call(this),2)},2],t:["[ap]",y,"ampm",b,1],tt:["[ap]m",y,"ampm",b,2],T:["[AP]",y,"ampm",b,1],TT:["[AP]M",y,"ampm",b,2],Z:[".*",void 0,"Z",function(){var e=this.toString().match(/\((.+)\)/)[1];e.includes(" ")&&(e=(e=e.replace("-"," ").toUpperCase()).split(" ").map((function(e){return l(e,1)[0]})).join(""));return e}],o:[""],S:[""]},k={isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:ss",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"};function y(e){var t=this.getHours();e.toLowerCase().includes("p")?this.setHours(t+12):e.toLowerCase().includes("a")&&t>=12&&this.setHours(t-12)}function b(){var e=this.getHours();return(e=e||12)>=12?"PM":"AM"}function x(e){var t=new RegExp("\\d+$").exec(e[0]);if(t&&void 0!==t[0]){var i=g[e[0][0]+"x"].slice("");return i[0]=i[0](t[0]),i[3]=i[3](t[0]),i}if(g[e[0]])return g[e[0]]}function P(e){if(!e.tokenizer){var t=[],i=[];for(var a in g)if(/\.*x$/.test(a)){var n=a[0]+"\\d+";-1===i.indexOf(n)&&i.push(n)}else-1===t.indexOf(a[0])&&t.push(a[0]);e.tokenizer="("+(i.length>0?i.join("|")+"|":"")+t.join("+|")+")+?|.",e.tokenizer=new RegExp(e.tokenizer,"g")}return e.tokenizer}function w(e,t,i){if(!m)return!0;if(void 0===e.rawday||!isFinite(e.rawday)&&new Date(e.date.getFullYear(),isFinite(e.rawmonth)?e.month:e.date.getMonth()+1,0).getDate()>=e.day||"29"==e.day&&(!isFinite(e.rawyear)||void 0===e.rawyear||""===e.rawyear)||new Date(e.date.getFullYear(),isFinite(e.rawmonth)?e.month:e.date.getMonth()+1,0).getDate()>=e.day)return t;if("29"==e.day){var a=E(t.pos,i);if("yyyy"===a.targetMatch[0]&&t.pos-a.targetMatchIndex==2)return t.remove=t.pos+1,t}else if("02"==e.month&&"30"==e.day&&void 0!==t.c)return e.day="03",e.date.setDate(3),e.date.setMonth(1),t.insert=[{pos:t.pos,c:"0"},{pos:t.pos+1,c:t.c}],t.caret=o.seekNext.call(this,t.pos+1),t;return!1}function S(e,t,i,a){var n,o,s="";for(P(i).lastIndex=0;n=P(i).exec(e);){if(void 0===t)if(o=x(n))s+="("+o[0]+")";else switch(n[0]){case"[":s+="(";break;case"]":s+=")?";break;default:s+=(0,r.default)(n[0])}else if(o=x(n))if(!0!==a&&o[3])s+=o[3].call(t.date);else o[2]?s+=t["raw"+o[2]]:s+=n[0];else s+=n[0]}return s}function _(e,t,i){for(e=String(e),t=t||2;e.length<t;)e=i?e+"0":"0"+e;return e}function M(e,t,i){return"string"==typeof e?new h(e,t,i):e&&"object"===u(e)&&Object.prototype.hasOwnProperty.call(e,"date")?e:void 0}function O(e,t){return S(t.inputFormat,{date:e},t)}function E(e,t){var i,a,n=0,r=0;for(P(t).lastIndex=0;a=P(t).exec(t.inputFormat);){var o=new RegExp("\\d+$").exec(a[0]);if((n+=r=o?parseInt(o[0]):a[0].length)>=e+1){i=a,a=P(t).exec(t.inputFormat);break}}return{targetMatchIndex:n-r,nextMatch:a,targetMatch:i}}a.default.extendAliases({datetime:{mask:function(e){return e.numericInput=!1,g.S=e.i18n.ordinalSuffix.join("|"),e.inputFormat=k[e.inputFormat]||e.inputFormat,e.displayFormat=k[e.displayFormat]||e.displayFormat||e.inputFormat,e.outputFormat=k[e.outputFormat]||e.outputFormat||e.inputFormat,e.placeholder=""!==e.placeholder?e.placeholder:e.inputFormat.replace(/[[\]]/,""),e.regex=S(e.inputFormat,void 0,e),e.min=M(e.min,e.inputFormat,e),e.max=M(e.max,e.inputFormat,e),null},placeholder:"",inputFormat:"isoDateTime",displayFormat:null,outputFormat:null,min:null,max:null,skipOptionalPartCharacter:"",i18n:{dayNames:["Mon","Tue","Wed","Thu","Fri","Sat","Sun","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],ordinalSuffix:["st","nd","rd","th"]},preValidation:function(e,t,i,a,n,r,o,s){if(s)return!0;if(isNaN(i)&&e[t]!==i){var l=E(t,n);if(l.nextMatch&&l.nextMatch[0]===i&&l.targetMatch[0].length>1){var c=g[l.targetMatch[0]][0];if(new RegExp(c).test("0"+e[t-1]))return e[t]=e[t-1],e[t-1]="0",{fuzzy:!0,buffer:e,refreshFromBuffer:{start:t-1,end:t+1},pos:t+1}}}return!0},postValidation:function(e,t,i,a,n,r,o,l){var c,u;if(o)return!0;if(!1===a&&(((c=E(t+1,n)).targetMatch&&c.targetMatchIndex===t&&c.targetMatch[0].length>1&&void 0!==g[c.targetMatch[0]]||(c=E(t+2,n)).targetMatch&&c.targetMatchIndex===t+1&&c.targetMatch[0].length>1&&void 0!==g[c.targetMatch[0]])&&(u=g[c.targetMatch[0]][0]),void 0!==u&&(void 0!==r.validPositions[t+1]&&new RegExp(u).test(i+"0")?(e[t]=i,e[t+1]="0",a={pos:t+2,caret:t}):new RegExp(u).test("0"+i)&&(e[t]="0",e[t+1]=i,a={pos:t+2})),!1===a))return a;if(a.fuzzy&&(e=a.buffer,t=a.pos),(c=E(t,n)).targetMatch&&c.targetMatch[0]&&void 0!==g[c.targetMatch[0]]){var f=g[c.targetMatch[0]];u=f[0];var d=e.slice(c.targetMatchIndex,c.targetMatchIndex+c.targetMatch[0].length);if(!1===new RegExp(u).test(d.join(""))&&2===c.targetMatch[0].length&&r.validPositions[c.targetMatchIndex]&&r.validPositions[c.targetMatchIndex+1]&&(r.validPositions[c.targetMatchIndex+1].input="0"),"year"==f[2])for(var p=s.getMaskTemplate.call(this,!1,1,void 0,!0),h=t+1;h<e.length;h++)e[h]=p[h],delete r.validPositions[h]}var m=a,k=M(e.join(""),n.inputFormat,n);return m&&!isNaN(k.date.getTime())&&(n.prefillYear&&(m=function(e,t,i){if(e.year!==e.rawyear){var a=v.toString(),n=e.rawyear.replace(/[^0-9]/g,""),r=a.slice(0,n.length),o=a.slice(n.length);if(2===n.length&&n===r){var s=new Date(v,e.month-1,e.day);e.day==s.getDate()&&(!i.max||i.max.date.getTime()>=s.getTime())&&(e.date.setFullYear(v),e.year=a,t.insert=[{pos:t.pos+1,c:o[0]},{pos:t.pos+2,c:o[1]}])}}return t}(k,m,n)),m=function(e,t,i,a,n){if(!t)return t;if(t&&i.min&&!isNaN(i.min.date.getTime())){var r;for(e.reset(),P(i).lastIndex=0;r=P(i).exec(i.inputFormat);){var o;if((o=x(r))&&o[3]){for(var s=o[1],l=e[o[2]],c=i.min[o[2]],u=i.max?i.max[o[2]]:c,f=[],d=!1,p=0;p<c.length;p++)void 0!==a.validPositions[p+r.index]||d?(f[p]=l[p],d=d||l[p]>c[p]):(f[p]=c[p],"year"===o[2]&&l.length-1==p&&c!=u&&(f=(parseInt(f.join(""))+1).toString().split("")),"ampm"===o[2]&&c!=u&&i.min.date.getTime()>e.date.getTime()&&(f[p]=u[p]));s.call(e._date,f.join(""))}}t=i.min.date.getTime()<=e.date.getTime(),e.reInit()}return t&&i.max&&(isNaN(i.max.date.getTime())||(t=i.max.date.getTime()>=e.date.getTime())),t}(k,m=w.call(this,k,m,n),n,r)),void 0!==t&&m&&a.pos!==t?{buffer:S(n.inputFormat,k,n).split(""),refreshFromBuffer:{start:t,end:a.pos},pos:a.caret||a.pos}:m},onKeyDown:function(e,t,i,a){e.ctrlKey&&e.key===n.keys.ArrowRight&&(this.inputmask._valueSet(O(new Date,a)),p(this).trigger("setvalue"))},onUnMask:function(e,t,i){return t?S(i.outputFormat,M(e,i.inputFormat,i),i,!0):t},casing:function(e,t,i,a){return 0==t.nativeDef.indexOf("[ap]")?e.toLowerCase():0==t.nativeDef.indexOf("[AP]")?e.toUpperCase():e},onBeforeMask:function(e,t){return"[object Date]"===Object.prototype.toString.call(e)&&(e=O(e,t)),e},insertMode:!1,insertModeVisual:!1,shiftPositions:!1,keepStatic:!1,inputmode:"numeric",prefillYear:!0}})},3851:function(e,t,i){var a,n=(a=i(2394))&&a.__esModule?a:{default:a},r=i(8711),o=i(4713);n.default.extendDefinitions({A:{validator:"[A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]",casing:"upper"},"&":{validator:"[0-9A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5]",casing:"upper"},"#":{validator:"[0-9A-Fa-f]",casing:"upper"}});var s=new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]");function l(e,t,i,a,n){return i-1>-1&&"."!==t.buffer[i-1]?(e=t.buffer[i-1]+e,e=i-2>-1&&"."!==t.buffer[i-2]?t.buffer[i-2]+e:"0"+e):e="00"+e,s.test(e)}n.default.extendAliases({cssunit:{regex:"[+-]?[0-9]+\\.?([0-9]+)?(px|em|rem|ex|%|in|cm|mm|pt|pc)"},url:{regex:"(https?|ftp)://.*",autoUnmask:!1,keepStatic:!1,tabThrough:!0},ip:{mask:"i{1,3}.j{1,3}.k{1,3}.l{1,3}",definitions:{i:{validator:l},j:{validator:l},k:{validator:l},l:{validator:l}},onUnMask:function(e,t,i){return e},inputmode:"decimal",substitutes:{",":"."}},email:{mask:function(e){var t=e.separator,i=e.quantifier,a="*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",n=a;if(t)for(var r=0;r<i;r++)n+="[".concat(t).concat(a,"]");return n},greedy:!1,casing:"lower",separator:null,quantifier:5,skipOptionalPartCharacter:"",onBeforePaste:function(e,t){return(e=e.toLowerCase()).replace("mailto:","")},definitions:{"*":{validator:"[0-9\uff11-\uff19A-Za-z\u0410-\u044f\u0401\u0451\xc0-\xff\xb5!#$%&'*+/=?^_`{|}~-]"},"-":{validator:"[0-9A-Za-z-]"}},onUnMask:function(e,t,i){return e},inputmode:"email"},mac:{mask:"##:##:##:##:##:##"},vin:{mask:"V{13}9{4}",definitions:{V:{validator:"[A-HJ-NPR-Za-hj-npr-z\\d]",casing:"upper"}},clearIncomplete:!0,autoUnmask:!0},ssn:{mask:"999-99-9999",postValidation:function(e,t,i,a,n,s,l){var c=o.getMaskTemplate.call(this,!0,r.getLastValidPosition.call(this),!0,!0);return/^(?!219-09-9999|078-05-1120)(?!666|000|9.{2}).{3}-(?!00).{2}-(?!0{4}).{4}$/.test(c.join(""))}}})},207:function(e,t,i){var a=s(i(2394)),n=s(i(7184)),r=i(8711),o=i(2839);function s(e){return e&&e.__esModule?e:{default:e}}var l=a.default.dependencyLib;function c(e,t){for(var i="",n=0;n<e.length;n++)a.default.prototype.definitions[e.charAt(n)]||t.definitions[e.charAt(n)]||t.optionalmarker[0]===e.charAt(n)||t.optionalmarker[1]===e.charAt(n)||t.quantifiermarker[0]===e.charAt(n)||t.quantifiermarker[1]===e.charAt(n)||t.groupmarker[0]===e.charAt(n)||t.groupmarker[1]===e.charAt(n)||t.alternatormarker===e.charAt(n)?i+="\\"+e.charAt(n):i+=e.charAt(n);return i}function u(e,t,i,a){if(e.length>0&&t>0&&(!i.digitsOptional||a)){var n=e.indexOf(i.radixPoint),r=!1;i.negationSymbol.back===e[e.length-1]&&(r=!0,e.length--),-1===n&&(e.push(i.radixPoint),n=e.length-1);for(var o=1;o<=t;o++)isFinite(e[n+o])||(e[n+o]="0")}return r&&e.push(i.negationSymbol.back),e}function f(e,t){var i=0;for(var a in"+"===e&&(i=r.seekNext.call(this,t.validPositions.length-1)),t.tests)if((a=parseInt(a))>=i)for(var n=0,o=t.tests[a].length;n<o;n++)if((void 0===t.validPositions[a]||"-"===e)&&t.tests[a][n].match.def===e)return a+(void 0!==t.validPositions[a]&&"-"!==e?1:0);return i}function d(e,t){for(var i=-1,a=0,n=t.validPositions.length;a<n;a++){var r=t.validPositions[a];if(r&&r.match.def===e){i=a;break}}return i}function p(e,t,i,a,n){var r=t.buffer?t.buffer.indexOf(n.radixPoint):-1,o=(-1!==r||a&&n.jitMasking)&&new RegExp(n.definitions[9].validator).test(e);return n._radixDance&&-1!==r&&o&&null==t.validPositions[r]?{insert:{pos:r===i?r+1:r,c:n.radixPoint},pos:i}:o}a.default.extendAliases({numeric:{mask:function(e){e.repeat=0,e.groupSeparator===e.radixPoint&&e.digits&&"0"!==e.digits&&("."===e.radixPoint?e.groupSeparator=",":","===e.radixPoint?e.groupSeparator=".":e.groupSeparator="")," "===e.groupSeparator&&(e.skipOptionalPartCharacter=void 0),e.placeholder.length>1&&(e.placeholder=e.placeholder.charAt(0)),"radixFocus"===e.positionCaretOnClick&&""===e.placeholder&&(e.positionCaretOnClick="lvp");var t="0",i=e.radixPoint;!0===e.numericInput&&void 0===e.__financeInput?(t="1",e.positionCaretOnClick="radixFocus"===e.positionCaretOnClick?"lvp":e.positionCaretOnClick,e.digitsOptional=!1,isNaN(e.digits)&&(e.digits=2),e._radixDance=!1,i=","===e.radixPoint?"?":"!",""!==e.radixPoint&&void 0===e.definitions[i]&&(e.definitions[i]={},e.definitions[i].validator="["+e.radixPoint+"]",e.definitions[i].placeholder=e.radixPoint,e.definitions[i].static=!0,e.definitions[i].generated=!0)):(e.__financeInput=!1,e.numericInput=!0);var a,r="[+]";if(r+=c(e.prefix,e),""!==e.groupSeparator?(void 0===e.definitions[e.groupSeparator]&&(e.definitions[e.groupSeparator]={},e.definitions[e.groupSeparator].validator="["+e.groupSeparator+"]",e.definitions[e.groupSeparator].placeholder=e.groupSeparator,e.definitions[e.groupSeparator].static=!0,e.definitions[e.groupSeparator].generated=!0),r+=e._mask(e)):r+="9{+}",void 0!==e.digits&&0!==e.digits){var o=e.digits.toString().split(",");isFinite(o[0])&&o[1]&&isFinite(o[1])?r+=i+t+"{"+e.digits+"}":(isNaN(e.digits)||parseInt(e.digits)>0)&&(e.digitsOptional||e.jitMasking?(a=r+i+t+"{0,"+e.digits+"}",e.keepStatic=!0):r+=i+t+"{"+e.digits+"}")}else e.inputmode="numeric";return r+=c(e.suffix,e),r+="[-]",a&&(r=[a+c(e.suffix,e)+"[-]",r]),e.greedy=!1,function(e){void 0===e.parseMinMaxOptions&&(null!==e.min&&(e.min=e.min.toString().replace(new RegExp((0,n.default)(e.groupSeparator),"g"),""),","===e.radixPoint&&(e.min=e.min.replace(e.radixPoint,".")),e.min=isFinite(e.min)?parseFloat(e.min):NaN,isNaN(e.min)&&(e.min=Number.MIN_VALUE)),null!==e.max&&(e.max=e.max.toString().replace(new RegExp((0,n.default)(e.groupSeparator),"g"),""),","===e.radixPoint&&(e.max=e.max.replace(e.radixPoint,".")),e.max=isFinite(e.max)?parseFloat(e.max):NaN,isNaN(e.max)&&(e.max=Number.MAX_VALUE)),e.parseMinMaxOptions="done")}(e),""!==e.radixPoint&&e.substituteRadixPoint&&(e.substitutes["."==e.radixPoint?",":"."]=e.radixPoint),r},_mask:function(e){return"("+e.groupSeparator+"999){+|1}"},digits:"*",digitsOptional:!0,enforceDigitsOnBlur:!1,radixPoint:".",positionCaretOnClick:"radixFocus",_radixDance:!0,groupSeparator:"",allowMinus:!0,negationSymbol:{front:"-",back:""},prefix:"",suffix:"",min:null,max:null,SetMaxOnOverflow:!1,step:1,inputType:"text",unmaskAsNumber:!1,roundingFN:Math.round,inputmode:"decimal",shortcuts:{k:"1000",m:"1000000"},placeholder:"0",greedy:!1,rightAlign:!0,insertMode:!0,autoUnmask:!1,skipOptionalPartCharacter:"",usePrototypeDefinitions:!1,stripLeadingZeroes:!0,substituteRadixPoint:!0,definitions:{0:{validator:p},1:{validator:p,definitionSymbol:"9"},9:{validator:"[0-9\uff10-\uff19\u0660-\u0669\u06f0-\u06f9]",definitionSymbol:"*"},"+":{validator:function(e,t,i,a,n){return n.allowMinus&&("-"===e||e===n.negationSymbol.front)}},"-":{validator:function(e,t,i,a,n){return n.allowMinus&&e===n.negationSymbol.back}}},preValidation:function(e,t,i,a,n,r,o,s){if(!1!==n.__financeInput&&i===n.radixPoint)return!1;var l=e.indexOf(n.radixPoint),c=t;if(t=function(e,t,i,a,n){return n._radixDance&&n.numericInput&&t!==n.negationSymbol.back&&e<=i&&(i>0||t==n.radixPoint)&&(void 0===a.validPositions[e-1]||a.validPositions[e-1].input!==n.negationSymbol.back)&&(e-=1),e}(t,i,l,r,n),"-"===i||i===n.negationSymbol.front){if(!0!==n.allowMinus)return!1;var u=!1,p=d("+",r),h=d("-",r);return-1!==p&&(u=[p,h]),!1!==u?{remove:u,caret:c-n.negationSymbol.back.length}:{insert:[{pos:f.call(this,"+",r),c:n.negationSymbol.front,fromIsValid:!0},{pos:f.call(this,"-",r),c:n.negationSymbol.back,fromIsValid:void 0}],caret:c+n.negationSymbol.back.length}}if(i===n.groupSeparator)return{caret:c};if(s)return!0;if(-1!==l&&!0===n._radixDance&&!1===a&&i===n.radixPoint&&void 0!==n.digits&&(isNaN(n.digits)||parseInt(n.digits)>0)&&l!==t)return{caret:n._radixDance&&t===l-1?l+1:l};if(!1===n.__financeInput)if(a){if(n.digitsOptional)return{rewritePosition:o.end};if(!n.digitsOptional){if(o.begin>l&&o.end<=l)return i===n.radixPoint?{insert:{pos:l+1,c:"0",fromIsValid:!0},rewritePosition:l}:{rewritePosition:l+1};if(o.begin<l)return{rewritePosition:o.begin-1}}}else if(!n.showMaskOnHover&&!n.showMaskOnFocus&&!n.digitsOptional&&n.digits>0&&""===this.__valueGet.call(this.el))return{rewritePosition:l};return{rewritePosition:t}},postValidation:function(e,t,i,a,n,r,o){if(!1===a)return a;if(o)return!0;if(null!==n.min||null!==n.max){var s=n.onUnMask(e.slice().reverse().join(""),void 0,l.extend({},n,{unmaskAsNumber:!0}));if(null!==n.min&&s<n.min&&(s.toString().length>n.min.toString().length||s<0))return!1;if(null!==n.max&&s>n.max)return!!n.SetMaxOnOverflow&&{refreshFromBuffer:!0,buffer:u(n.max.toString().replace(".",n.radixPoint).split(""),n.digits,n).reverse()}}return a},onUnMask:function(e,t,i){if(""===t&&!0===i.nullable)return t;var a=e.replace(i.prefix,"");return a=(a=a.replace(i.suffix,"")).replace(new RegExp((0,n.default)(i.groupSeparator),"g"),""),""!==i.placeholder.charAt(0)&&(a=a.replace(new RegExp(i.placeholder.charAt(0),"g"),"0")),i.unmaskAsNumber?(""!==i.radixPoint&&-1!==a.indexOf(i.radixPoint)&&(a=a.replace(n.default.call(this,i.radixPoint),".")),a=(a=a.replace(new RegExp("^"+(0,n.default)(i.negationSymbol.front)),"-")).replace(new RegExp((0,n.default)(i.negationSymbol.back)+"$"),""),Number(a)):a},isComplete:function(e,t){var i=(t.numericInput?e.slice().reverse():e).join("");return i=(i=(i=(i=(i=i.replace(new RegExp("^"+(0,n.default)(t.negationSymbol.front)),"-")).replace(new RegExp((0,n.default)(t.negationSymbol.back)+"$"),"")).replace(t.prefix,"")).replace(t.suffix,"")).replace(new RegExp((0,n.default)(t.groupSeparator)+"([0-9]{3})","g"),"$1"),","===t.radixPoint&&(i=i.replace((0,n.default)(t.radixPoint),".")),isFinite(i)},onBeforeMask:function(e,t){var i=t.radixPoint||",";isFinite(t.digits)&&(t.digits=parseInt(t.digits)),"number"!=typeof e&&"number"!==t.inputType||""===i||(e=e.toString().replace(".",i));var a="-"===e.charAt(0)||e.charAt(0)===t.negationSymbol.front,r=e.split(i),o=r[0].replace(/[^\-0-9]/g,""),s=r.length>1?r[1].replace(/[^0-9]/g,""):"",l=r.length>1;e=o+(""!==s?i+s:s);var c=0;if(""!==i&&(c=t.digitsOptional?t.digits<s.length?t.digits:s.length:t.digits,""!==s||!t.digitsOptional)){var f=Math.pow(10,c||1);e=e.replace((0,n.default)(i),"."),isNaN(parseFloat(e))||(e=(t.roundingFN(parseFloat(e)*f)/f).toFixed(c)),e=e.toString().replace(".",i)}if(0===t.digits&&-1!==e.indexOf(i)&&(e=e.substring(0,e.indexOf(i))),null!==t.min||null!==t.max){var d=e.toString().replace(i,".");null!==t.min&&d<t.min?e=t.min.toString().replace(".",i):null!==t.max&&d>t.max&&(e=t.max.toString().replace(".",i))}return a&&"-"!==e.charAt(0)&&(e="-"+e),u(e.toString().split(""),c,t,l).join("")},onBeforeWrite:function(e,t,i,a){function r(e,t){if(!1!==a.__financeInput||t){var i=e.indexOf(a.radixPoint);-1!==i&&e.splice(i,1)}if(""!==a.groupSeparator)for(;-1!==(i=e.indexOf(a.groupSeparator));)e.splice(i,1);return e}var o,s;if(a.stripLeadingZeroes&&(s=function(e,t){var i=new RegExp("(^"+(""!==t.negationSymbol.front?(0,n.default)(t.negationSymbol.front)+"?":"")+(0,n.default)(t.prefix)+")(.*)("+(0,n.default)(t.suffix)+(""!=t.negationSymbol.back?(0,n.default)(t.negationSymbol.back)+"?":"")+"$)").exec(e.slice().reverse().join("")),a=i?i[2]:"",r=!1;return a&&(a=a.split(t.radixPoint.charAt(0))[0],r=new RegExp("^[0"+t.groupSeparator+"]*").exec(a)),!(!r||!(r[0].length>1||r[0].length>0&&r[0].length<a.length))&&r}(t,a)))for(var c=t.join("").lastIndexOf(s[0].split("").reverse().join(""))-(s[0]==s.input?0:1),f=s[0]==s.input?1:0,d=s[0].length-f;d>0;d--)delete this.maskset.validPositions[c+d],delete t[c+d];if(e)switch(e.type){case"blur":case"checkval":if(null!==a.min){var p=a.onUnMask(t.slice().reverse().join(""),void 0,l.extend({},a,{unmaskAsNumber:!0}));if(null!==a.min&&p<a.min)return{refreshFromBuffer:!0,buffer:u(a.min.toString().replace(".",a.radixPoint).split(""),a.digits,a).reverse()}}if(t[t.length-1]===a.negationSymbol.front){var h=new RegExp("(^"+(""!=a.negationSymbol.front?(0,n.default)(a.negationSymbol.front)+"?":"")+(0,n.default)(a.prefix)+")(.*)("+(0,n.default)(a.suffix)+(""!=a.negationSymbol.back?(0,n.default)(a.negationSymbol.back)+"?":"")+"$)").exec(r(t.slice(),!0).reverse().join(""));0==(h?h[2]:"")&&(o={refreshFromBuffer:!0,buffer:[0]})}else if(""!==a.radixPoint){t.indexOf(a.radixPoint)===a.suffix.length&&(o&&o.buffer?o.buffer.splice(0,1+a.suffix.length):(t.splice(0,1+a.suffix.length),o={refreshFromBuffer:!0,buffer:r(t)}))}if(a.enforceDigitsOnBlur){var v=(o=o||{})&&o.buffer||t.slice().reverse();o.refreshFromBuffer=!0,o.buffer=u(v,a.digits,a,!0).reverse()}}return o},onKeyDown:function(e,t,i,a){var n,r=l(this);if(3!=e.location){var s,c=e.key;if((s=a.shortcuts&&a.shortcuts[c])&&s.length>1)return this.inputmask.__valueSet.call(this,parseFloat(this.inputmask.unmaskedvalue())*parseInt(s)),r.trigger("setvalue"),!1}if(e.ctrlKey)switch(e.key){case o.keys.ArrowUp:return this.inputmask.__valueSet.call(this,parseFloat(this.inputmask.unmaskedvalue())+parseInt(a.step)),r.trigger("setvalue"),!1;case o.keys.ArrowDown:return this.inputmask.__valueSet.call(this,parseFloat(this.inputmask.unmaskedvalue())-parseInt(a.step)),r.trigger("setvalue"),!1}if(!e.shiftKey&&(e.key===o.keys.Delete||e.key===o.keys.Backspace||e.key===o.keys.BACKSPACE_SAFARI)&&i.begin!==t.length){if(t[e.key===o.keys.Delete?i.begin-1:i.end]===a.negationSymbol.front)return n=t.slice().reverse(),""!==a.negationSymbol.front&&n.shift(),""!==a.negationSymbol.back&&n.pop(),r.trigger("setvalue",[n.join(""),i.begin]),!1;if(!0===a._radixDance){var f=t.indexOf(a.radixPoint);if(a.digitsOptional){if(0===f)return(n=t.slice().reverse()).pop(),r.trigger("setvalue",[n.join(""),i.begin>=n.length?n.length:i.begin]),!1}else if(-1!==f&&(i.begin<f||i.end<f||e.key===o.keys.Delete&&(i.begin===f||i.begin-1===f))){var d=void 0;return i.begin===i.end&&(e.key===o.keys.Backspace||e.key===o.keys.BACKSPACE_SAFARI?i.begin++:e.key===o.keys.Delete&&i.begin-1===f&&(d=l.extend({},i),i.begin--,i.end--)),(n=t.slice().reverse()).splice(n.length-i.begin,i.begin-i.end+1),n=u(n,a.digits,a).join(""),d&&(i=d),r.trigger("setvalue",[n,i.begin>=n.length?f+1:i.begin]),!1}}}}},currency:{prefix:"",groupSeparator:",",alias:"numeric",digits:2,digitsOptional:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",inputmode:"numeric",digits:0},percentage:{alias:"numeric",min:0,max:100,suffix:" %",digits:0,allowMinus:!1},indianns:{alias:"numeric",_mask:function(e){return"("+e.groupSeparator+"99){*|1}("+e.groupSeparator+"999){1|1}"},groupSeparator:",",radixPoint:".",placeholder:"0",digits:2,digitsOptional:!1}})},9380:function(e,t,i){var a;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=((a=i(8741))&&a.__esModule?a:{default:a}).default?window:{};t.default=n},7760:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.HandleNativePlaceholder=function(e,t){var i=e?e.inputmask:this;if(s.ie){if(e.inputmask._valueGet()!==t&&(e.placeholder!==t||""===e.placeholder)){var a=r.getBuffer.call(i).slice(),n=e.inputmask._valueGet();if(n!==t){var o=r.getLastValidPosition.call(i);-1===o&&n===r.getBufferTemplate.call(i).join("")?a=[]:-1!==o&&u.call(i,a),d(e,a)}}}else e.placeholder!==t&&(e.placeholder=t,""===e.placeholder&&e.removeAttribute("placeholder"))},t.applyInputValue=c,t.checkVal=f,t.clearOptionalTail=u,t.unmaskedvalue=function(e){var t=e?e.inputmask:this,i=t.opts,a=t.maskset;if(e){if(void 0===e.inputmask)return e.value;e.inputmask&&e.inputmask.refreshValue&&c(e,e.inputmask._valueGet(!0))}for(var n=[],o=a.validPositions,s=0,l=o.length;s<l;s++)o[s]&&o[s].match&&(1!=o[s].match.static||Array.isArray(a.metadata)&&!0!==o[s].generatedInput)&&n.push(o[s].input);var u=0===n.length?"":(t.isRTL?n.reverse():n).join("");if("function"==typeof i.onUnMask){var f=(t.isRTL?r.getBuffer.call(t).slice().reverse():r.getBuffer.call(t)).join("");u=i.onUnMask.call(t,f,u,i)}return u},t.writeBuffer=d;var a=i(2839),n=i(4713),r=i(8711),o=i(7215),s=i(9845),l=i(6030);function c(e,t){var i=e?e.inputmask:this,a=i.opts;e.inputmask.refreshValue=!1,"function"==typeof a.onBeforeMask&&(t=a.onBeforeMask.call(i,t,a)||t),f(e,!0,!1,t=t.toString().split("")),i.undoValue=i._valueGet(!0),(a.clearMaskOnLostFocus||a.clearIncomplete)&&e.inputmask._valueGet()===r.getBufferTemplate.call(i).join("")&&-1===r.getLastValidPosition.call(i)&&e.inputmask._valueSet("")}function u(e){e.length=0;for(var t,i=n.getMaskTemplate.call(this,!0,0,!0,void 0,!0);void 0!==(t=i.shift());)e.push(t);return e}function f(e,t,i,a,s){var c=e?e.inputmask:this,u=c.maskset,f=c.opts,p=c.dependencyLib,h=a.slice(),v="",m=-1,g=void 0,k=f.skipOptionalPartCharacter;f.skipOptionalPartCharacter="",r.resetMaskSet.call(c),u.tests={},m=f.radixPoint?r.determineNewCaretPosition.call(c,{begin:0,end:0},!1,!1===f.__financeInput?"radixFocus":void 0).begin:0,u.p=m,c.caretPos={begin:m};var y=[],b=c.caretPos;if(h.forEach((function(e,t){if(void 0!==e){var a=new p.Event("_checkval");a.key=e,v+=e;var o=r.getLastValidPosition.call(c,void 0,!0);!function(e,t){for(var i=n.getMaskTemplate.call(c,!0,0).slice(e,r.seekNext.call(c,e,!1,!1)).join("").replace(/'/g,""),a=i.indexOf(t);a>0&&" "===i[a-1];)a--;var o=0===a&&!r.isMask.call(c,e)&&(n.getTest.call(c,e).match.nativeDef===t.charAt(0)||!0===n.getTest.call(c,e).match.static&&n.getTest.call(c,e).match.nativeDef==="'"+t.charAt(0)||" "===n.getTest.call(c,e).match.nativeDef&&(n.getTest.call(c,e+1).match.nativeDef===t.charAt(0)||!0===n.getTest.call(c,e+1).match.static&&n.getTest.call(c,e+1).match.nativeDef==="'"+t.charAt(0)));if(!o&&a>0&&!r.isMask.call(c,e,!1,!0)){var s=r.seekNext.call(c,e);c.caretPos.begin<s&&(c.caretPos={begin:s})}return o}(m,v)?(g=l.EventHandlers.keypressEvent.call(c,a,!0,!1,i,c.caretPos.begin))&&(m=c.caretPos.begin+1,v=""):g=l.EventHandlers.keypressEvent.call(c,a,!0,!1,i,o+1),g?(void 0!==g.pos&&u.validPositions[g.pos]&&!0===u.validPositions[g.pos].match.static&&void 0===u.validPositions[g.pos].alternation&&(y.push(g.pos),c.isRTL||(g.forwardPosition=g.pos+1)),d.call(c,void 0,r.getBuffer.call(c),g.forwardPosition,a,!1),c.caretPos={begin:g.forwardPosition,end:g.forwardPosition},b=c.caretPos):void 0===u.validPositions[t]&&h[t]===n.getPlaceholder.call(c,t)&&r.isMask.call(c,t,!0)?c.caretPos.begin++:c.caretPos=b}})),y.length>0){var x,P,w=r.seekNext.call(c,-1,void 0,!1);if(!o.isComplete.call(c,r.getBuffer.call(c))&&y.length<=w||o.isComplete.call(c,r.getBuffer.call(c))&&y.length>0&&y.length!==w&&0===y[0])for(var S=w;void 0!==(x=y.shift());){var _=new p.Event("_checkval");if((P=u.validPositions[x]).generatedInput=!0,_.key=P.input,(g=l.EventHandlers.keypressEvent.call(c,_,!0,!1,i,S))&&void 0!==g.pos&&g.pos!==x&&u.validPositions[g.pos]&&!0===u.validPositions[g.pos].match.static)y.push(g.pos);else if(!g)break;S++}}t&&d.call(c,e,r.getBuffer.call(c),g?g.forwardPosition:c.caretPos.begin,s||new p.Event("checkval"),s&&("input"===s.type&&c.undoValue!==r.getBuffer.call(c).join("")||"paste"===s.type)),f.skipOptionalPartCharacter=k}function d(e,t,i,n,s){var l=e?e.inputmask:this,c=l.opts,u=l.dependencyLib;if(n&&"function"==typeof c.onBeforeWrite){var f=c.onBeforeWrite.call(l,n,t,i,c);if(f){if(f.refreshFromBuffer){var d=f.refreshFromBuffer;o.refreshFromBuffer.call(l,!0===d?d:d.start,d.end,f.buffer||t),t=r.getBuffer.call(l,!0)}void 0!==i&&(i=void 0!==f.caret?f.caret:i)}}if(void 0!==e&&(e.inputmask._valueSet(t.join("")),void 0===i||void 0!==n&&"blur"===n.type||r.caret.call(l,e,i,void 0,void 0,void 0!==n&&"keydown"===n.type&&(n.key===a.keys.Delete||n.key===a.keys.Backspace)),!0===s)){var p=u(e),h=e.inputmask._valueGet();e.inputmask.skipInputEvent=!0,p.trigger("input"),setTimeout((function(){h===r.getBufferTemplate.call(l).join("")?p.trigger("cleared"):!0===o.isComplete.call(l,t)&&p.trigger("complete")}),0)}}},2394:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,i(7149),i(3194);var a=i(157),n=m(i(4963)),r=m(i(9380)),o=i(2391),s=i(4713),l=i(8711),c=i(7215),u=i(7760),f=i(9716),d=m(i(7392)),p=m(i(3976)),h=m(i(8741));function v(e){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v(e)}function m(e){return e&&e.__esModule?e:{default:e}}var g=r.default.document,k="_inputmask_opts";function y(e,t,i){if(h.default){if(!(this instanceof y))return new y(e,t,i);this.dependencyLib=n.default,this.el=void 0,this.events={},this.maskset=void 0,!0!==i&&("[object Object]"===Object.prototype.toString.call(e)?t=e:(t=t||{},e&&(t.alias=e)),this.opts=n.default.extend(!0,{},this.defaults,t),this.noMasksCache=t&&void 0!==t.definitions,this.userOptions=t||{},b(this.opts.alias,t,this.opts)),this.refreshValue=!1,this.undoValue=void 0,this.$el=void 0,this.skipInputEvent=!1,this.validationEvent=!1,this.ignorable=!1,this.maxLength,this.mouseEnter=!1,this.clicked=0,this.originalPlaceholder=void 0,this.isComposing=!1}}function b(e,t,i){var a=y.prototype.aliases[e];return a?(a.alias&&b(a.alias,void 0,i),n.default.extend(!0,i,a),n.default.extend(!0,i,t),!0):(null===i.mask&&(i.mask=e),!1)}y.prototype={dataAttribute:"data-inputmask",defaults:p.default,definitions:d.default,aliases:{},masksCache:{},get isRTL(){return this.opts.isRTL||this.opts.numericInput},mask:function(e){var t=this;return"string"==typeof e&&(e=g.getElementById(e)||g.querySelectorAll(e)),(e=e.nodeName?[e]:Array.isArray(e)?e:[].slice.call(e)).forEach((function(e,i){var s=n.default.extend(!0,{},t.opts);if(function(e,t,i,a){function o(t,n){var o=""===a?t:a+"-"+t;null!==(n=void 0!==n?n:e.getAttribute(o))&&("string"==typeof n&&(0===t.indexOf("on")?n=r.default[n]:"false"===n?n=!1:"true"===n&&(n=!0)),i[t]=n)}if(!0===t.importDataAttributes){var s,l,c,u,f=e.getAttribute(a);if(f&&""!==f&&(f=f.replace(/'/g,'"'),l=JSON.parse("{"+f+"}")),l)for(u in c=void 0,l)if("alias"===u.toLowerCase()){c=l[u];break}for(s in o("alias",c),i.alias&&b(i.alias,i,t),t){if(l)for(u in c=void 0,l)if(u.toLowerCase()===s.toLowerCase()){c=l[u];break}o(s,c)}}n.default.extend(!0,t,i),("rtl"===e.dir||t.rightAlign)&&(e.style.textAlign="right");("rtl"===e.dir||t.numericInput)&&(e.dir="ltr",e.removeAttribute("dir"),t.isRTL=!0);return Object.keys(i).length}(e,s,n.default.extend(!0,{},t.userOptions),t.dataAttribute)){var l=(0,o.generateMaskSet)(s,t.noMasksCache);void 0!==l&&(void 0!==e.inputmask&&(e.inputmask.opts.autoUnmask=!0,e.inputmask.remove()),e.inputmask=new y(void 0,void 0,!0),e.inputmask.opts=s,e.inputmask.noMasksCache=t.noMasksCache,e.inputmask.userOptions=n.default.extend(!0,{},t.userOptions),e.inputmask.el=e,e.inputmask.$el=(0,n.default)(e),e.inputmask.maskset=l,n.default.data(e,k,t.userOptions),a.mask.call(e.inputmask))}})),e&&e[0]&&e[0].inputmask||this},option:function(e,t){return"string"==typeof e?this.opts[e]:"object"===v(e)?(n.default.extend(this.userOptions,e),this.el&&!0!==t&&this.mask(this.el),this):void 0},unmaskedvalue:function(e){if(this.maskset=this.maskset||(0,o.generateMaskSet)(this.opts,this.noMasksCache),void 0===this.el||void 0!==e){var t=("function"==typeof this.opts.onBeforeMask&&this.opts.onBeforeMask.call(this,e,this.opts)||e).split("");u.checkVal.call(this,void 0,!1,!1,t),"function"==typeof this.opts.onBeforeWrite&&this.opts.onBeforeWrite.call(this,void 0,l.getBuffer.call(this),0,this.opts)}return u.unmaskedvalue.call(this,this.el)},remove:function(){if(this.el){n.default.data(this.el,k,null);var e=this.opts.autoUnmask?(0,u.unmaskedvalue)(this.el):this._valueGet(this.opts.autoUnmask);e!==l.getBufferTemplate.call(this).join("")?this._valueSet(e,this.opts.autoUnmask):this._valueSet(""),f.EventRuler.off(this.el),Object.getOwnPropertyDescriptor&&Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this.el),"value")&&this.__valueGet&&Object.defineProperty(this.el,"value",{get:this.__valueGet,set:this.__valueSet,configurable:!0}):g.__lookupGetter__&&this.el.__lookupGetter__("value")&&this.__valueGet&&(this.el.__defineGetter__("value",this.__valueGet),this.el.__defineSetter__("value",this.__valueSet)),this.el.inputmask=void 0}return this.el},getemptymask:function(){return this.maskset=this.maskset||(0,o.generateMaskSet)(this.opts,this.noMasksCache),(this.isRTL?l.getBufferTemplate.call(this).reverse():l.getBufferTemplate.call(this)).join("")},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return this.maskset=this.maskset||(0,o.generateMaskSet)(this.opts,this.noMasksCache),c.isComplete.call(this,l.getBuffer.call(this))},getmetadata:function(){if(this.maskset=this.maskset||(0,o.generateMaskSet)(this.opts,this.noMasksCache),Array.isArray(this.maskset.metadata)){var e=s.getMaskTemplate.call(this,!0,0,!1).join("");return this.maskset.metadata.forEach((function(t){return t.mask!==e||(e=t,!1)})),e}return this.maskset.metadata},isValid:function(e){if(this.maskset=this.maskset||(0,o.generateMaskSet)(this.opts,this.noMasksCache),e){var t=("function"==typeof this.opts.onBeforeMask&&this.opts.onBeforeMask.call(this,e,this.opts)||e).split("");u.checkVal.call(this,void 0,!0,!1,t)}else e=this.isRTL?l.getBuffer.call(this).slice().reverse().join(""):l.getBuffer.call(this).join("");for(var i=l.getBuffer.call(this),a=l.determineLastRequiredPosition.call(this),n=i.length-1;n>a&&!l.isMask.call(this,n);n--);return i.splice(a,n+1-a),c.isComplete.call(this,i)&&e===(this.isRTL?l.getBuffer.call(this).slice().reverse().join(""):l.getBuffer.call(this).join(""))},format:function(e,t){this.maskset=this.maskset||(0,o.generateMaskSet)(this.opts,this.noMasksCache);var i=("function"==typeof this.opts.onBeforeMask&&this.opts.onBeforeMask.call(this,e,this.opts)||e).split("");u.checkVal.call(this,void 0,!0,!1,i);var a=this.isRTL?l.getBuffer.call(this).slice().reverse().join(""):l.getBuffer.call(this).join("");return t?{value:a,metadata:this.getmetadata()}:a},setValue:function(e){this.el&&(0,n.default)(this.el).trigger("setvalue",[e])},analyseMask:o.analyseMask},y.extendDefaults=function(e){n.default.extend(!0,y.prototype.defaults,e)},y.extendDefinitions=function(e){n.default.extend(!0,y.prototype.definitions,e)},y.extendAliases=function(e){n.default.extend(!0,y.prototype.aliases,e)},y.format=function(e,t,i){return y(t).format(e,i)},y.unmask=function(e,t){return y(t).unmaskedvalue(e)},y.isValid=function(e,t){return y(t).isValid(e)},y.remove=function(e){"string"==typeof e&&(e=g.getElementById(e)||g.querySelectorAll(e)),(e=e.nodeName?[e]:e).forEach((function(e){e.inputmask&&e.inputmask.remove()}))},y.setValue=function(e,t){"string"==typeof e&&(e=g.getElementById(e)||g.querySelectorAll(e)),(e=e.nodeName?[e]:e).forEach((function(e){e.inputmask?e.inputmask.setValue(t):(0,n.default)(e).trigger("setvalue",[t])}))},y.dependencyLib=n.default,r.default.Inputmask=y;var x=y;t.default=x},5296:function(e,t,i){function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}var n=h(i(9380)),r=h(i(2394)),o=h(i(8741));function s(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(r=n.key,o=void 0,o=function(e,t){if("object"!==a(e)||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var n=i.call(e,t||"default");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(r,"string"),"symbol"===a(o)?o:String(o)),n)}var r,o}function l(e,t){if(t&&("object"===a(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function c(e){var t="function"==typeof Map?new Map:void 0;return c=function(e){if(null===e||(i=e,-1===Function.toString.call(i).indexOf("[native code]")))return e;var i;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return u(e,arguments,p(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),d(a,e)},c(e)}function u(e,t,i){return u=f()?Reflect.construct.bind():function(e,t,i){var a=[null];a.push.apply(a,t);var n=new(Function.bind.apply(e,a));return i&&d(n,i.prototype),n},u.apply(null,arguments)}function f(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function d(e,t){return d=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},d(e,t)}function p(e){return p=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},p(e)}function h(e){return e&&e.__esModule?e:{default:e}}var v=n.default.document;if(o.default&&v&&v.head&&v.head.attachShadow&&n.default.customElements&&void 0===n.default.customElements.get("input-mask")){var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&d(e,t)}(u,e);var t,i,a,n,o,c=(t=u,i=f(),function(){var e,a=p(t);if(i){var n=p(this).constructor;e=Reflect.construct(a,arguments,n)}else e=a.apply(this,arguments);return l(this,e)});function u(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u);var t=(e=c.call(this)).getAttributeNames(),i=e.attachShadow({mode:"closed"}),a=v.createElement("input");for(var n in a.type="text",i.appendChild(a),t)Object.prototype.hasOwnProperty.call(t,n)&&a.setAttribute(t[n],e.getAttribute(t[n]));var o=new r.default;return o.dataAttribute="",o.mask(a),a.inputmask.shadowRoot=i,e}return a=u,n&&s(a.prototype,n),o&&s(a,o),Object.defineProperty(a,"prototype",{writable:!1}),a}(c(HTMLElement));n.default.customElements.define("input-mask",m)}},2839:function(e,t){function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var i=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=i){var a,n,r,o,s=[],l=!0,c=!1;try{if(r=(i=i.call(e)).next,0===t){if(Object(i)!==i)return;l=!1}else for(;!(l=(a=r.call(i)).done)&&(s.push(a.value),s.length!==t);l=!0);}catch(e){c=!0,n=e}finally{try{if(!l&&null!=i.return&&(o=i.return(),Object(o)!==o))return}finally{if(c)throw n}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);"Object"===i&&e.constructor&&(i=e.constructor.name);if("Map"===i||"Set"===i)return Array.from(e);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return a(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,a=new Array(t);i<t;i++)a[i]=e[i];return a}Object.defineProperty(t,"__esModule",{value:!0}),t.keys=t.keyCode=void 0,t.toKey=function(e,t){return r[e]||(t?String.fromCharCode(e):String.fromCharCode(e).toLowerCase())},t.toKeyCode=function(e){return n[e]};var n={AltGraph:18,ArrowDown:40,ArrowLeft:37,ArrowRight:39,ArrowUp:38,Backspace:8,BACKSPACE_SAFARI:127,CapsLock:20,Delete:46,End:35,Enter:13,Escape:27,Home:36,Insert:45,PageDown:34,PageUp:33,Space:32,Tab:9,c:67,x:88,z:90,Shift:16,Control:17,Alt:18,Pause:19,Meta_LEFT:91,Meta_RIGHT:92,ContextMenu:93,Process:229,Unidentified:229,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123};t.keyCode=n;var r=Object.entries(n).reduce((function(e,t){var a=i(t,2),n=a[0],r=a[1];return e[r]=void 0===e[r]?n:e[r],e}),{}),o=Object.entries(n).reduce((function(e,t){var a=i(t,2),n=a[0];a[1];return e[n]="Space"===n?" ":n,e}),{});t.keys=o},2391:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.analyseMask=function(e,t,i){var a,o,s,l,c,u,f=/(?:[?*+]|\{[0-9+*]+(?:,[0-9+*]*)?(?:\|[0-9+*]*)?\})|[^.?*+^${[]()|\\]+|./g,d=/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,p=!1,h=new n.default,v=[],m=[],g=!1;function k(e,a,n){n=void 0!==n?n:e.matches.length;var o=e.matches[n-1];if(t){if(0===a.indexOf("[")||p&&/\\d|\\s|\\w|\\p/i.test(a)||"."===a){var s=i.casing?"i":"";/^\\p\{.*}$/i.test(a)&&(s+="u"),e.matches.splice(n++,0,{fn:new RegExp(a,s),static:!1,optionality:!1,newBlockMarker:void 0===o?"master":o.def!==a,casing:null,def:a,placeholder:void 0,nativeDef:a})}else p&&(a=a[a.length-1]),a.split("").forEach((function(t,a){o=e.matches[n-1],e.matches.splice(n++,0,{fn:/[a-z]/i.test(i.staticDefinitionSymbol||t)?new RegExp("["+(i.staticDefinitionSymbol||t)+"]",i.casing?"i":""):null,static:!0,optionality:!1,newBlockMarker:void 0===o?"master":o.def!==t&&!0!==o.static,casing:null,def:i.staticDefinitionSymbol||t,placeholder:void 0!==i.staticDefinitionSymbol?t:void 0,nativeDef:(p?"'":"")+t})}));p=!1}else{var l=i.definitions&&i.definitions[a]||i.usePrototypeDefinitions&&r.default.prototype.definitions[a];l&&!p?e.matches.splice(n++,0,{fn:l.validator?"string"==typeof l.validator?new RegExp(l.validator,i.casing?"i":""):new function(){this.test=l.validator}:new RegExp("."),static:l.static||!1,optionality:l.optional||!1,defOptionality:l.optional||!1,newBlockMarker:void 0===o||l.optional?"master":o.def!==(l.definitionSymbol||a),casing:l.casing,def:l.definitionSymbol||a,placeholder:l.placeholder,nativeDef:a,generated:l.generated}):(e.matches.splice(n++,0,{fn:/[a-z]/i.test(i.staticDefinitionSymbol||a)?new RegExp("["+(i.staticDefinitionSymbol||a)+"]",i.casing?"i":""):null,static:!0,optionality:!1,newBlockMarker:void 0===o?"master":o.def!==a&&!0!==o.static,casing:null,def:i.staticDefinitionSymbol||a,placeholder:void 0!==i.staticDefinitionSymbol?a:void 0,nativeDef:(p?"'":"")+a}),p=!1)}}function y(){if(v.length>0){if(k(l=v[v.length-1],o),l.isAlternator){c=v.pop();for(var e=0;e<c.matches.length;e++)c.matches[e].isGroup&&(c.matches[e].isGroup=!1);v.length>0?(l=v[v.length-1]).matches.push(c):h.matches.push(c)}}else k(h,o)}function b(e){var t=new n.default(!0);return t.openGroup=!1,t.matches=e,t}function x(){if((s=v.pop()).openGroup=!1,void 0!==s)if(v.length>0){if((l=v[v.length-1]).matches.push(s),l.isAlternator){for(var e=(c=v.pop()).matches[0].matches?c.matches[0].matches.length:1,t=0;t<c.matches.length;t++)c.matches[t].isGroup=!1,c.matches[t].alternatorGroup=!1,null===i.keepStatic&&e<(c.matches[t].matches?c.matches[t].matches.length:1)&&(i.keepStatic=!0),e=c.matches[t].matches?c.matches[t].matches.length:1;v.length>0?(l=v[v.length-1]).matches.push(c):h.matches.push(c)}}else h.matches.push(s);else y()}function P(e){var t=e.pop();return t.isQuantifier&&(t=b([e.pop(),t])),t}t&&(i.optionalmarker[0]=void 0,i.optionalmarker[1]=void 0);for(;a=t?d.exec(e):f.exec(e);){if(o=a[0],t){switch(o.charAt(0)){case"?":o="{0,1}";break;case"+":case"*":o="{"+o+"}";break;case"|":if(0===v.length){var w=b(h.matches);w.openGroup=!0,v.push(w),h.matches=[],g=!0}}switch(o){case"\\d":o="[0-9]";break;case"\\p":o+=d.exec(e)[0],o+=d.exec(e)[0]}}if(p)y();else switch(o.charAt(0)){case"$":case"^":t||y();break;case i.escapeChar:p=!0,t&&y();break;case i.optionalmarker[1]:case i.groupmarker[1]:x();break;case i.optionalmarker[0]:v.push(new n.default(!1,!0));break;case i.groupmarker[0]:v.push(new n.default(!0));break;case i.quantifiermarker[0]:var S=new n.default(!1,!1,!0),_=(o=o.replace(/[{}?]/g,"")).split("|"),M=_[0].split(","),O=isNaN(M[0])?M[0]:parseInt(M[0]),E=1===M.length?O:isNaN(M[1])?M[1]:parseInt(M[1]),T=isNaN(_[1])?_[1]:parseInt(_[1]);"*"!==O&&"+"!==O||(O="*"===E?0:1),S.quantifier={min:O,max:E,jit:T};var j=v.length>0?v[v.length-1].matches:h.matches;(a=j.pop()).isGroup||(a=b([a])),j.push(a),j.push(S);break;case i.alternatormarker:if(v.length>0){var D=(l=v[v.length-1]).matches[l.matches.length-1];u=l.openGroup&&(void 0===D.matches||!1===D.isGroup&&!1===D.isAlternator)?v.pop():P(l.matches)}else u=P(h.matches);if(u.isAlternator)v.push(u);else if(u.alternatorGroup?(c=v.pop(),u.alternatorGroup=!1):c=new n.default(!1,!1,!1,!0),c.matches.push(u),v.push(c),u.openGroup){u.openGroup=!1;var A=new n.default(!0);A.alternatorGroup=!0,v.push(A)}break;default:y()}}g&&x();for(;v.length>0;)s=v.pop(),h.matches.push(s);h.matches.length>0&&(!function e(a){a&&a.matches&&a.matches.forEach((function(n,r){var o=a.matches[r+1];(void 0===o||void 0===o.matches||!1===o.isQuantifier)&&n&&n.isGroup&&(n.isGroup=!1,t||(k(n,i.groupmarker[0],0),!0!==n.openGroup&&k(n,i.groupmarker[1]))),e(n)}))}(h),m.push(h));(i.numericInput||i.isRTL)&&function e(t){for(var a in t.matches=t.matches.reverse(),t.matches)if(Object.prototype.hasOwnProperty.call(t.matches,a)){var n=parseInt(a);if(t.matches[a].isQuantifier&&t.matches[n+1]&&t.matches[n+1].isGroup){var r=t.matches[a];t.matches.splice(a,1),t.matches.splice(n+1,0,r)}void 0!==t.matches[a].matches?t.matches[a]=e(t.matches[a]):t.matches[a]=((o=t.matches[a])===i.optionalmarker[0]?o=i.optionalmarker[1]:o===i.optionalmarker[1]?o=i.optionalmarker[0]:o===i.groupmarker[0]?o=i.groupmarker[1]:o===i.groupmarker[1]&&(o=i.groupmarker[0]),o)}var o;return t}(m[0]);return m},t.generateMaskSet=function(e,t){var i;function n(e,i,n){var s,l,c=!1;return null!==e&&""!==e||((c=null!==n.regex)?e=(e=n.regex).replace(/^(\^)(.*)(\$)$/,"$2"):(c=!0,e=".*")),1===e.length&&!1===n.greedy&&0!==n.repeat&&(n.placeholder=""),e=function(e,t){var i=t.repeat,a=t.groupmarker,n=t.quantifiermarker,r=t.keepStatic;if(i>0||"*"===i||"+"===i){var s="*"===i?0:"+"===i?1:i;e=a[0]+e+a[1]+n[0]+s+","+i+n[1]}if(!0===r){var l=e.match(new RegExp("(.)\\[([^\\]]*)\\]","g"));l&&l.forEach((function(t,i){var a=t.split("["),n=a[0],r=a[1].replace("]","");e=e.replace(new RegExp("".concat((0,o.default)(n),"\\[").concat((0,o.default)(r),"\\]")),n.charAt(0)===r.charAt(0)?"(".concat(n,"|").concat(n).concat(r,")"):"".concat(n,"[").concat(r,"]"))}))}return e}(e,n),l=c?"regex_"+n.regex:n.numericInput?e.split("").reverse().join(""):e,null!==n.keepStatic&&(l="ks_"+n.keepStatic+l),void 0===r.default.prototype.masksCache[l]||!0===t?(s={mask:e,maskToken:r.default.prototype.analyseMask(e,c,n),validPositions:[],_buffer:void 0,buffer:void 0,tests:{},excludes:{},metadata:i,maskLength:void 0,jitOffset:{}},!0!==t&&(r.default.prototype.masksCache[l]=s,s=a.default.extend(!0,{},r.default.prototype.masksCache[l]))):s=a.default.extend(!0,{},r.default.prototype.masksCache[l]),s}"function"==typeof e.mask&&(e.mask=e.mask(e));if(Array.isArray(e.mask)){if(e.mask.length>1){null===e.keepStatic&&(e.keepStatic=!0);var s=e.groupmarker[0];return(e.isRTL?e.mask.reverse():e.mask).forEach((function(t){s.length>1&&(s+=e.alternatormarker),void 0!==t.mask&&"function"!=typeof t.mask?s+=t.mask:s+=t})),n(s+=e.groupmarker[1],e.mask,e)}e.mask=e.mask.pop()}i=e.mask&&void 0!==e.mask.mask&&"function"!=typeof e.mask.mask?n(e.mask.mask,e.mask,e):n(e.mask,e.mask,e);null===e.keepStatic&&(e.keepStatic=!1);return i};var a=s(i(4963)),n=s(i(9695)),r=s(i(2394)),o=s(i(7184));function s(e){return e&&e.__esModule?e:{default:e}}},157:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.mask=function(){var e=this,t=this.opts,i=this.el,u=this.dependencyLib;o.EventRuler.off(i);var f=function(t,i){"textarea"!==t.tagName.toLowerCase()&&i.ignorables.push(a.keys.Enter);var s=t.getAttribute("type"),l="input"===t.tagName.toLowerCase()&&i.supportsInputType.includes(s)||t.isContentEditable||"textarea"===t.tagName.toLowerCase();if(!l)if("input"===t.tagName.toLowerCase()){var c=document.createElement("input");c.setAttribute("type",s),l="text"===c.type,c=null}else l="partial";return!1!==l?function(t){var a,s;function l(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():-1!==n.getLastValidPosition.call(e)||!0!==i.nullable?(this.inputmask.shadowRoot||this.ownerDocument).activeElement===this&&i.clearMaskOnLostFocus?(e.isRTL?r.clearOptionalTail.call(e,n.getBuffer.call(e).slice()).reverse():r.clearOptionalTail.call(e,n.getBuffer.call(e).slice())).join(""):a.call(this):"":a.call(this)}function c(e){s.call(this,e),this.inputmask&&(0,r.applyInputValue)(this,e)}if(!t.inputmask.__valueGet){if(!0!==i.noValuePatching){if(Object.getOwnPropertyDescriptor){var f=Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(t),"value"):void 0;f&&f.get&&f.set?(a=f.get,s=f.set,Object.defineProperty(t,"value",{get:l,set:c,configurable:!0})):"input"!==t.tagName.toLowerCase()&&(a=function(){return this.textContent},s=function(e){this.textContent=e},Object.defineProperty(t,"value",{get:l,set:c,configurable:!0}))}else document.__lookupGetter__&&t.__lookupGetter__("value")&&(a=t.__lookupGetter__("value"),s=t.__lookupSetter__("value"),t.__defineGetter__("value",l),t.__defineSetter__("value",c));t.inputmask.__valueGet=a,t.inputmask.__valueSet=s}t.inputmask._valueGet=function(t){return e.isRTL&&!0!==t?a.call(this.el).split("").reverse().join(""):a.call(this.el)},t.inputmask._valueSet=function(t,i){s.call(this.el,null==t?"":!0!==i&&e.isRTL?t.split("").reverse().join(""):t)},void 0===a&&(a=function(){return this.value},s=function(e){this.value=e},function(t){if(u.valHooks&&(void 0===u.valHooks[t]||!0!==u.valHooks[t].inputmaskpatch)){var a=u.valHooks[t]&&u.valHooks[t].get?u.valHooks[t].get:function(e){return e.value},o=u.valHooks[t]&&u.valHooks[t].set?u.valHooks[t].set:function(e,t){return e.value=t,e};u.valHooks[t]={get:function(t){if(t.inputmask){if(t.inputmask.opts.autoUnmask)return t.inputmask.unmaskedvalue();var r=a(t);return-1!==n.getLastValidPosition.call(e,void 0,void 0,t.inputmask.maskset.validPositions)||!0!==i.nullable?r:""}return a(t)},set:function(e,t){var i=o(e,t);return e.inputmask&&(0,r.applyInputValue)(e,t),i},inputmaskpatch:!0}}}(t.type),function(e){o.EventRuler.on(e,"mouseenter",(function(){var e=this,t=e.inputmask._valueGet(!0);t!=(e.inputmask.isRTL?n.getBuffer.call(e.inputmask).slice().reverse():n.getBuffer.call(e.inputmask)).join("")&&(0,r.applyInputValue)(e,t)}))}(t))}}(t):t.inputmask=void 0,l}(i,t);if(!1!==f){e.originalPlaceholder=i.placeholder,e.maxLength=void 0!==i?i.maxLength:void 0,-1===e.maxLength&&(e.maxLength=void 0),"inputMode"in i&&null===i.getAttribute("inputmode")&&(i.inputMode=t.inputmode,i.setAttribute("inputmode",t.inputmode)),!0===f&&(t.showMaskOnFocus=t.showMaskOnFocus&&-1===["cc-number","cc-exp"].indexOf(i.autocomplete),s.iphone&&(t.insertModeVisual=!1,i.setAttribute("autocorrect","off")),o.EventRuler.on(i,"submit",c.EventHandlers.submitEvent),o.EventRuler.on(i,"reset",c.EventHandlers.resetEvent),o.EventRuler.on(i,"blur",c.EventHandlers.blurEvent),o.EventRuler.on(i,"focus",c.EventHandlers.focusEvent),o.EventRuler.on(i,"invalid",c.EventHandlers.invalidEvent),o.EventRuler.on(i,"click",c.EventHandlers.clickEvent),o.EventRuler.on(i,"mouseleave",c.EventHandlers.mouseleaveEvent),o.EventRuler.on(i,"mouseenter",c.EventHandlers.mouseenterEvent),o.EventRuler.on(i,"paste",c.EventHandlers.pasteEvent),o.EventRuler.on(i,"cut",c.EventHandlers.cutEvent),o.EventRuler.on(i,"complete",t.oncomplete),o.EventRuler.on(i,"incomplete",t.onincomplete),o.EventRuler.on(i,"cleared",t.oncleared),!0!==t.inputEventOnly&&o.EventRuler.on(i,"keydown",c.EventHandlers.keyEvent),(s.mobile||t.inputEventOnly)&&i.removeAttribute("maxLength"),o.EventRuler.on(i,"input",c.EventHandlers.inputFallBackEvent)),o.EventRuler.on(i,"setvalue",c.EventHandlers.setValueEvent),n.getBufferTemplate.call(e).join(""),e.undoValue=e._valueGet(!0);var d=(i.inputmask.shadowRoot||i.ownerDocument).activeElement;if(""!==i.inputmask._valueGet(!0)||!1===t.clearMaskOnLostFocus||d===i){(0,r.applyInputValue)(i,i.inputmask._valueGet(!0),t);var p=n.getBuffer.call(e).slice();!1===l.isComplete.call(e,p)&&t.clearIncomplete&&n.resetMaskSet.call(e),t.clearMaskOnLostFocus&&d!==i&&(-1===n.getLastValidPosition.call(e)?p=[]:r.clearOptionalTail.call(e,p)),(!1===t.clearMaskOnLostFocus||t.showMaskOnFocus&&d===i||""!==i.inputmask._valueGet(!0))&&(0,r.writeBuffer)(i,p),d===i&&n.caret.call(e,i,n.seekNext.call(e,n.getLastValidPosition.call(e)))}}};var a=i(2839),n=i(8711),r=i(7760),o=i(9716),s=i(9845),l=i(7215),c=i(6030)},9695:function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,i,a){this.matches=[],this.openGroup=e||!1,this.alternatorGroup=!1,this.isGroup=e||!1,this.isOptional=t||!1,this.isQuantifier=i||!1,this.isAlternator=a||!1,this.quantifier={min:1,max:1}}},3194:function(){Array.prototype.includes||Object.defineProperty(Array.prototype,"includes",{value:function(e,t){if(null==this)throw new TypeError('"this" is null or not defined');var i=Object(this),a=i.length>>>0;if(0===a)return!1;for(var n=0|t,r=Math.max(n>=0?n:a-Math.abs(n),0);r<a;){if(i[r]===e)return!0;r++}return!1}})},7149:function(){function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"===e("test".__proto__)?function(e){return e.__proto__}:function(e){return e.constructor.prototype})},8711:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.caret=function(e,t,i,a,n){var r,o=this,s=this.opts;if(void 0===t)return"selectionStart"in e&&"selectionEnd"in e?(t=e.selectionStart,i=e.selectionEnd):window.getSelection?(r=window.getSelection().getRangeAt(0)).commonAncestorContainer.parentNode!==e&&r.commonAncestorContainer!==e||(t=r.startOffset,i=r.endOffset):document.selection&&document.selection.createRange&&(r=document.selection.createRange(),t=0-r.duplicate().moveStart("character",-e.inputmask._valueGet().length),i=t+r.text.length),{begin:a?t:c.call(o,t),end:a?i:c.call(o,i)};if(Array.isArray(t)&&(i=o.isRTL?t[0]:t[1],t=o.isRTL?t[1]:t[0]),void 0!==t.begin&&(i=o.isRTL?t.begin:t.end,t=o.isRTL?t.end:t.begin),"number"==typeof t){t=a?t:c.call(o,t),i="number"==typeof(i=a?i:c.call(o,i))?i:t;var l=parseInt(((e.ownerDocument.defaultView||window).getComputedStyle?(e.ownerDocument.defaultView||window).getComputedStyle(e,null):e.currentStyle).fontSize)*i;if(e.scrollLeft=l>e.scrollWidth?l:0,e.inputmask.caretPos={begin:t,end:i},s.insertModeVisual&&!1===s.insertMode&&t===i&&(n||i++),e===(e.inputmask.shadowRoot||e.ownerDocument).activeElement)if("setSelectionRange"in e)e.setSelectionRange(t,i);else if(window.getSelection){if(r=document.createRange(),void 0===e.firstChild||null===e.firstChild){var u=document.createTextNode("");e.appendChild(u)}r.setStart(e.firstChild,t<e.inputmask._valueGet().length?t:e.inputmask._valueGet().length),r.setEnd(e.firstChild,i<e.inputmask._valueGet().length?i:e.inputmask._valueGet().length),r.collapse(!0);var f=window.getSelection();f.removeAllRanges(),f.addRange(r)}else e.createTextRange&&((r=e.createTextRange()).collapse(!0),r.moveEnd("character",i),r.moveStart("character",t),r.select())}},t.determineLastRequiredPosition=function(e){var t,i,r=this,s=r.maskset,l=r.dependencyLib,c=a.getMaskTemplate.call(r,!0,o.call(r),!0,!0),u=c.length,f=o.call(r),d={},p=s.validPositions[f],h=void 0!==p?p.locator.slice():void 0;for(t=f+1;t<c.length;t++)i=a.getTestTemplate.call(r,t,h,t-1),h=i.locator.slice(),d[t]=l.extend(!0,{},i);var v=p&&void 0!==p.alternation?p.locator[p.alternation]:void 0;for(t=u-1;t>f&&(((i=d[t]).match.optionality||i.match.optionalQuantifier&&i.match.newBlockMarker||v&&(v!==d[t].locator[p.alternation]&&1!=i.match.static||!0===i.match.static&&i.locator[p.alternation]&&n.checkAlternationMatch.call(r,i.locator[p.alternation].toString().split(","),v.toString().split(","))&&""!==a.getTests.call(r,t)[0].def))&&c[t]===a.getPlaceholder.call(r,t,i.match));t--)u--;return e?{l:u,def:d[u]?d[u].match:void 0}:u},t.determineNewCaretPosition=function(e,t,i){var n=this,c=n.maskset,u=n.opts;t&&(n.isRTL?e.end=e.begin:e.begin=e.end);if(e.begin===e.end){switch(i=i||u.positionCaretOnClick){case"none":break;case"select":e={begin:0,end:r.call(n).length};break;case"ignore":e.end=e.begin=l.call(n,o.call(n));break;case"radixFocus":if(n.clicked>1&&0==c.validPositions.length)break;if(function(e){if(""!==u.radixPoint&&0!==u.digits){var t=c.validPositions;if(void 0===t[e]||t[e].input===a.getPlaceholder.call(n,e)){if(e<l.call(n,-1))return!0;var i=r.call(n).indexOf(u.radixPoint);if(-1!==i){for(var o=0,s=t.length;o<s;o++)if(t[o]&&i<o&&t[o].input!==a.getPlaceholder.call(n,o))return!1;return!0}}}return!1}(e.begin)){var f=r.call(n).join("").indexOf(u.radixPoint);e.end=e.begin=u.numericInput?l.call(n,f):f;break}default:var d=e.begin,p=o.call(n,d,!0),h=l.call(n,-1!==p||s.call(n,0)?p:-1);if(d<=h)e.end=e.begin=s.call(n,d,!1,!0)?d:l.call(n,d);else{var v=c.validPositions[p],m=a.getTestTemplate.call(n,h,v?v.match.locator:void 0,v),g=a.getPlaceholder.call(n,h,m.match);if(""!==g&&r.call(n)[h]!==g&&!0!==m.match.optionalQuantifier&&!0!==m.match.newBlockMarker||!s.call(n,h,u.keepStatic,!0)&&m.match.def===g){var k=l.call(n,h);(d>=k||d===h)&&(h=k)}e.end=e.begin=h}}return e}},t.getBuffer=r,t.getBufferTemplate=function(){var e=this.maskset;void 0===e._buffer&&(e._buffer=a.getMaskTemplate.call(this,!1,1),void 0===e.buffer&&(e.buffer=e._buffer.slice()));return e._buffer},t.getLastValidPosition=o,t.isMask=s,t.resetMaskSet=function(e){var t=this.maskset;t.buffer=void 0,!0!==e&&(t.validPositions=[],t.p=0)},t.seekNext=l,t.seekPrevious=function(e,t){var i=this,n=e-1;if(e<=0)return 0;for(;n>0&&(!0===t&&(!0!==a.getTest.call(i,n).match.newBlockMarker||!s.call(i,n,void 0,!0))||!0!==t&&!s.call(i,n,void 0,!0));)n--;return n},t.translatePosition=c;var a=i(4713),n=i(7215);function r(e){var t=this,i=t.maskset;return void 0!==i.buffer&&!0!==e||(i.buffer=a.getMaskTemplate.call(t,!0,o.call(t),!0),void 0===i._buffer&&(i._buffer=i.buffer.slice())),i.buffer}function o(e,t,i){var a=this.maskset,n=-1,r=-1,o=i||a.validPositions;void 0===e&&(e=-1);for(var s=0,l=o.length;s<l;s++)o[s]&&(t||!0!==o[s].generatedInput)&&(s<=e&&(n=s),s>=e&&(r=s));return-1===n||n==e?r:-1==r||e-n<r-e?n:r}function s(e,t,i){var n=this,r=this.maskset,o=a.getTestTemplate.call(n,e).match;if(""===o.def&&(o=a.getTest.call(n,e).match),!0!==o.static)return o.fn;if(!0===i&&void 0!==r.validPositions[e]&&!0!==r.validPositions[e].generatedInput)return!0;if(!0!==t&&e>-1){if(i){var s=a.getTests.call(n,e);return s.length>1+(""===s[s.length-1].match.def?1:0)}var l=a.determineTestTemplate.call(n,e,a.getTests.call(n,e)),c=a.getPlaceholder.call(n,e,l.match);return l.match.def!==c}return!1}function l(e,t,i){var n=this;void 0===i&&(i=!0);for(var r=e+1;""!==a.getTest.call(n,r).match.def&&(!0===t&&(!0!==a.getTest.call(n,r).match.newBlockMarker||!s.call(n,r,void 0,!0))||!0!==t&&!s.call(n,r,void 0,i));)r++;return r}function c(e){var t=this.opts,i=this.el;return!this.isRTL||"number"!=typeof e||t.greedy&&""===t.placeholder||!i||(e=this._valueGet().length-e)<0&&(e=0),e}},4713:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.determineTestTemplate=c,t.getDecisionTaker=o,t.getMaskTemplate=function(e,t,i,a,n){var r=this,o=this.opts,u=this.maskset,f=o.greedy;n&&o.greedy&&(o.greedy=!1,r.maskset.tests={});t=t||0;var p,h,v,m,g=[],k=0;do{if(!0===e&&u.validPositions[k])v=n&&u.validPositions[k].match.optionality&&void 0===u.validPositions[k+1]&&(!0===u.validPositions[k].generatedInput||u.validPositions[k].input==o.skipOptionalPartCharacter&&k>0)?c.call(r,k,d.call(r,k,p,k-1)):u.validPositions[k],h=v.match,p=v.locator.slice(),g.push(!0===i?v.input:!1===i?h.nativeDef:s.call(r,k,h));else{v=l.call(r,k,p,k-1),h=v.match,p=v.locator.slice();var y=!0!==a&&(!1!==o.jitMasking?o.jitMasking:h.jit);(m=(m&&h.static&&h.def!==o.groupSeparator&&null===h.fn||u.validPositions[k-1]&&h.static&&h.def!==o.groupSeparator&&null===h.fn)&&u.tests[k]&&1===u.tests[k].length)||!1===y||void 0===y||"number"==typeof y&&isFinite(y)&&y>k?g.push(!1===i?h.nativeDef:s.call(r,g.length,h)):m=!1}k++}while(!0!==h.static||""!==h.def||t>k);""===g[g.length-1]&&g.pop();!1===i&&void 0!==u.maskLength||(u.maskLength=k-1);return o.greedy=f,g},t.getPlaceholder=s,t.getTest=u,t.getTestTemplate=l,t.getTests=d,t.isSubsetOf=f;var a,n=(a=i(2394))&&a.__esModule?a:{default:a};function r(e,t){var i=(null!=e.alternation?e.mloc[o(e)]:e.locator).join("");if(""!==i)for(;i.length<t;)i+="0";return i}function o(e){var t=e.locator[e.alternation];return"string"==typeof t&&t.length>0&&(t=t.split(",")[0]),void 0!==t?t.toString():""}function s(e,t,i){var a=this.opts,n=this.maskset;if(void 0!==(t=t||u.call(this,e).match).placeholder||!0===i)return"function"==typeof t.placeholder?t.placeholder(a):t.placeholder;if(!0===t.static){if(e>-1&&void 0===n.validPositions[e]){var r,o=d.call(this,e),s=[];if(o.length>1+(""===o[o.length-1].match.def?1:0))for(var l=0;l<o.length;l++)if(""!==o[l].match.def&&!0!==o[l].match.optionality&&!0!==o[l].match.optionalQuantifier&&(!0===o[l].match.static||void 0===r||!1!==o[l].match.fn.test(r.match.def,n,e,!0,a))&&(s.push(o[l]),!0===o[l].match.static&&(r=o[l]),s.length>1&&/[0-9a-bA-Z]/.test(s[0].match.def)))return a.placeholder.charAt(e%a.placeholder.length)}return t.def}return a.placeholder.charAt(e%a.placeholder.length)}function l(e,t,i){return this.maskset.validPositions[e]||c.call(this,e,d.call(this,e,t?t.slice():t,i))}function c(e,t){var i=this.opts,a=0,n=function(e,t){var i=0,a=!1;t.forEach((function(e){e.match.optionality&&(0!==i&&i!==e.match.optionality&&(a=!0),(0===i||i>e.match.optionality)&&(i=e.match.optionality))})),i&&(0==e||1==t.length?i=0:a||(i=0));return i}(e,t);e=e>0?e-1:0;var o,s,l,c=r(u.call(this,e));i.greedy&&t.length>1&&""===t[t.length-1].match.def&&(a=1);for(var f=0;f<t.length-a;f++){var d=t[f];o=r(d,c.length);var p=Math.abs(o-c);(void 0===s||""!==o&&p<s||l&&!i.greedy&&l.match.optionality&&l.match.optionality-n>0&&"master"===l.match.newBlockMarker&&(!d.match.optionality||d.match.optionality-n<1||!d.match.newBlockMarker)||l&&!i.greedy&&l.match.optionalQuantifier&&!d.match.optionalQuantifier)&&(s=p,l=d)}return l}function u(e,t){var i=this.maskset;return i.validPositions[e]?i.validPositions[e]:(t||d.call(this,e))[0]}function f(e,t,i){function a(e){for(var t,i=[],a=-1,n=0,r=e.length;n<r;n++)if("-"===e.charAt(n))for(t=e.charCodeAt(n+1);++a<t;)i.push(String.fromCharCode(a));else a=e.charCodeAt(n),i.push(e.charAt(n));return i.join("")}return e.match.def===t.match.nativeDef||!(!(i.regex||e.match.fn instanceof RegExp&&t.match.fn instanceof RegExp)||!0===e.match.static||!0===t.match.static)&&-1!==a(t.match.fn.toString().replace(/[[\]/]/g,"")).indexOf(a(e.match.fn.toString().replace(/[[\]/]/g,"")))}function d(e,t,i){var a,r,o=this,s=this.dependencyLib,l=this.maskset,u=this.opts,d=this.el,p=l.maskToken,h=t?i:0,v=t?t.slice():[0],m=[],g=!1,k=t?t.join(""):"";function y(t,i,r,o){function s(r,o,c){function p(e,t){var i=0===t.matches.indexOf(e);return i||t.matches.every((function(a,n){return!0===a.isQuantifier?i=p(e,t.matches[n-1]):Object.prototype.hasOwnProperty.call(a,"matches")&&(i=p(e,a)),!i})),i}function v(e,t,i){var a,n;if((l.tests[e]||l.validPositions[e])&&(l.tests[e]||[l.validPositions[e]]).every((function(e,r){if(e.mloc[t])return a=e,!1;var o=void 0!==i?i:e.alternation,s=void 0!==e.locator[o]?e.locator[o].toString().indexOf(t):-1;return(void 0===n||s<n)&&-1!==s&&(a=e,n=s),!0})),a){var r=a.locator[a.alternation];return(a.mloc[t]||a.mloc[r]||a.locator).slice((void 0!==i?i:a.alternation)+1)}return void 0!==i?v(e,t):void 0}function x(e,t){var i=e.alternation,a=void 0===t||i===t.alternation&&-1===e.locator[i].toString().indexOf(t.locator[i]);if(!a&&i>t.alternation)for(var n=t.alternation;n<i;n++)if(e.locator[n]!==t.locator[n]){i=n,a=!0;break}if(a){e.mloc=e.mloc||{};var r=e.locator[i];if(void 0!==r){if("string"==typeof r&&(r=r.split(",")[0]),void 0===e.mloc[r]&&(e.mloc[r]=e.locator.slice()),void 0!==t){for(var o in t.mloc)"string"==typeof o&&(o=o.split(",")[0]),void 0===e.mloc[o]&&(e.mloc[o]=t.mloc[o]);e.locator[i]=Object.keys(e.mloc).join(",")}return!0}e.alternation=void 0}return!1}function P(e,t){if(e.locator.length!==t.locator.length)return!1;for(var i=e.alternation+1;i<e.locator.length;i++)if(e.locator[i]!==t.locator[i])return!1;return!0}if(h>e+u._maxTestPos)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+l.mask;if(h===e&&void 0===r.matches){if(m.push({match:r,locator:o.reverse(),cd:k,mloc:{}}),!r.optionality||void 0!==c||!(u.definitions&&u.definitions[r.nativeDef]&&u.definitions[r.nativeDef].optional||n.default.prototype.definitions[r.nativeDef]&&n.default.prototype.definitions[r.nativeDef].optional))return!0;g=!0,h=e}else if(void 0!==r.matches){if(r.isGroup&&c!==r){if(r=s(t.matches[t.matches.indexOf(r)+1],o,c))return!0}else if(r.isOptional){var w=r,S=m.length;if(r=y(r,i,o,c)){if(m.forEach((function(e,t){t>=S&&(e.match.optionality=e.match.optionality?e.match.optionality+1:1)})),a=m[m.length-1].match,void 0!==c||!p(a,w))return!0;g=!0,h=e}}else if(r.isAlternator){var _,M=r,O=[],E=m.slice(),T=o.length,j=!1,D=i.length>0?i.shift():-1;if(-1===D||"string"==typeof D){var A,B=h,C=i.slice(),R=[];if("string"==typeof D)R=D.split(",");else for(A=0;A<M.matches.length;A++)R.push(A.toString());if(void 0!==l.excludes[e]){for(var L=R.slice(),F=0,I=l.excludes[e].length;F<I;F++){var N=l.excludes[e][F].toString().split(":");o.length==N[1]&&R.splice(R.indexOf(N[0]),1)}0===R.length&&(delete l.excludes[e],R=L)}(!0===u.keepStatic||isFinite(parseInt(u.keepStatic))&&B>=u.keepStatic)&&(R=R.slice(0,1));for(var V=0;V<R.length;V++){A=parseInt(R[V]),m=[],i="string"==typeof D&&v(h,A,T)||C.slice();var G=M.matches[A];if(G&&s(G,[A].concat(o),c))r=!0;else if(0===V&&(j=!0),G&&G.matches&&G.matches.length>M.matches[0].matches.length)break;_=m.slice(),h=B,m=[];for(var H=0;H<_.length;H++){var U=_[H],K=!1;U.match.jit=U.match.jit||j,U.alternation=U.alternation||T,x(U);for(var $=0;$<O.length;$++){var q=O[$];if("string"!=typeof D||void 0!==U.alternation&&R.includes(U.locator[U.alternation].toString())){if(U.match.nativeDef===q.match.nativeDef){K=!0,x(q,U);break}if(f(U,q,u)){x(U,q)&&(K=!0,O.splice(O.indexOf(q),0,U));break}if(f(q,U,u)){x(q,U);break}if(J=q,!0===(W=U).match.static&&!0!==J.match.static&&J.match.fn.test(W.match.def,l,e,!1,u,!1)){P(U,q)||void 0!==d.inputmask.userOptions.keepStatic?x(U,q)&&(K=!0,O.splice(O.indexOf(q),0,U)):u.keepStatic=!0;break}}}K||O.push(U)}}m=E.concat(O),h=e,g=m.length>0,r=O.length>0,i=C.slice()}else r=s(M.matches[D]||t.matches[D],[D].concat(o),c);if(r)return!0}else if(r.isQuantifier&&c!==t.matches[t.matches.indexOf(r)-1])for(var z=r,Q=!1,Z=i.length>0?i.shift():0;Z<(isNaN(z.quantifier.max)?Z+1:z.quantifier.max)&&h<=e;Z++){var Y=t.matches[t.matches.indexOf(z)-1];if(r=s(Y,[Z].concat(o),Y)){if(m.forEach((function(t,i){(a=b(Y,t.match)?t.match:m[m.length-1].match).optionalQuantifier=Z>=z.quantifier.min,a.jit=(Z+1)*(Y.matches.indexOf(a)+1)>z.quantifier.jit,a.optionalQuantifier&&p(a,Y)&&(g=!0,h=e,u.greedy&&null==l.validPositions[e-1]&&Z>z.quantifier.min&&-1!=["*","+"].indexOf(z.quantifier.max)&&(m.pop(),k=void 0),Q=!0),!Q&&a.jit&&(l.jitOffset[e]=Y.matches.length-Y.matches.indexOf(a))})),Q)break;return!0}}else if(r=y(r,i,o,c))return!0}else h++;var W,J}for(var c=i.length>0?i.shift():0;c<t.matches.length;c++)if(!0!==t.matches[c].isQuantifier){var p=s(t.matches[c],[c].concat(r),o);if(p&&h===e)return p;if(h>e)break}}function b(e,t){var i=-1!=e.matches.indexOf(t);return i||e.matches.forEach((function(e,a){void 0===e.matches||i||(i=b(e,t))})),i}if(e>-1){if(void 0===t){for(var x,P=e-1;void 0===(x=l.validPositions[P]||l.tests[P])&&P>-1;)P--;void 0!==x&&P>-1&&(v=function(e,t){var i,a=[];return Array.isArray(t)||(t=[t]),t.length>0&&(void 0===t[0].alternation||!0===u.keepStatic?0===(a=c.call(o,e,t.slice()).locator.slice()).length&&(a=t[0].locator.slice()):t.forEach((function(e){""!==e.def&&(0===a.length?(i=e.alternation,a=e.locator.slice()):e.locator[i]&&-1===a[i].toString().indexOf(e.locator[i])&&(a[i]+=","+e.locator[i]))}))),a}(P,x),k=v.join(""),h=P)}if(l.tests[e]&&l.tests[e][0].cd===k)return l.tests[e];for(var w=v.shift();w<p.length;w++){if(y(p[w],v,[w])&&h===e||h>e)break}}return(0===m.length||g)&&m.push({match:{fn:null,static:!0,optionality:!1,casing:null,def:"",placeholder:""},locator:[],mloc:{},cd:k}),void 0!==t&&l.tests[e]?r=s.extend(!0,[],m):(l.tests[e]=s.extend(!0,[],m),r=l.tests[e]),m.forEach((function(e){e.match.optionality=e.match.defOptionality||!1})),r}},7215:function(e,t,i){Object.defineProperty(t,"__esModule",{value:!0}),t.alternate=s,t.checkAlternationMatch=function(e,t,i){for(var a,n=this.opts.greedy?t:t.slice(0,1),r=!1,o=void 0!==i?i.split(","):[],s=0;s<o.length;s++)-1!==(a=e.indexOf(o[s]))&&e.splice(a,1);for(var l=0;l<e.length;l++)if(n.includes(e[l])){r=!0;break}return r},t.handleRemove=function(e,t,i,o,l){var c=this,u=this.maskset,f=this.opts;if((f.numericInput||c.isRTL)&&(t===n.keys.Backspace?t=n.keys.Delete:t===n.keys.Delete&&(t=n.keys.Backspace),c.isRTL)){var d=i.end;i.end=i.begin,i.begin=d}var p,h=r.getLastValidPosition.call(c,void 0,!0);i.end>=r.getBuffer.call(c).length&&h>=i.end&&(i.end=h+1);t===n.keys.Backspace?i.end-i.begin<1&&(i.begin=r.seekPrevious.call(c,i.begin)):t===n.keys.Delete&&i.begin===i.end&&(i.end=r.isMask.call(c,i.end,!0,!0)?i.end+1:r.seekNext.call(c,i.end)+1);if(!1!==(p=v.call(c,i))){if(!0!==o&&!1!==f.keepStatic||null!==f.regex&&-1!==a.getTest.call(c,i.begin).match.def.indexOf("|")){var m=s.call(c,!0);if(m){var g=void 0!==m.caret?m.caret:m.pos?r.seekNext.call(c,m.pos.begin?m.pos.begin:m.pos):r.getLastValidPosition.call(c,-1,!0);(t!==n.keys.Delete||i.begin>g)&&i.begin}}!0!==o&&(u.p=t===n.keys.Delete?i.begin+p:i.begin,u.p=r.determineNewCaretPosition.call(c,{begin:u.p,end:u.p},!1,!1===f.insertMode&&t===n.keys.Backspace?"none":void 0).begin)}},t.isComplete=c,t.isSelection=u,t.isValid=f,t.refreshFromBuffer=p,t.revalidateMask=v;var a=i(4713),n=i(2839),r=i(8711),o=i(6030);function s(e,t,i,n,o,l){var c,u,d,p,h,v,m,g,k,y,b,x=this,P=this.dependencyLib,w=this.opts,S=x.maskset,_=P.extend(!0,[],S.validPositions),M=P.extend(!0,{},S.tests),O=!1,E=!1,T=void 0!==o?o:r.getLastValidPosition.call(x);if(l&&(y=l.begin,b=l.end,l.begin>l.end&&(y=l.end,b=l.begin)),-1===T&&void 0===o)c=0,u=(p=a.getTest.call(x,c)).alternation;else for(;T>=0;T--)if((d=S.validPositions[T])&&void 0!==d.alternation){if(p&&p.locator[d.alternation]!==d.locator[d.alternation])break;c=T,u=S.validPositions[c].alternation,p=d}if(void 0!==u){m=parseInt(c),S.excludes[m]=S.excludes[m]||[],!0!==e&&S.excludes[m].push((0,a.getDecisionTaker)(p)+":"+p.alternation);var j=[],D=-1;for(h=m;h<r.getLastValidPosition.call(x,void 0,!0)+1;h++)-1===D&&e<=h&&void 0!==t&&(j.push(t),D=j.length-1),(v=S.validPositions[h])&&!0!==v.generatedInput&&(void 0===l||h<y||h>=b)&&j.push(v.input),delete S.validPositions[h];for(-1===D&&void 0!==t&&(j.push(t),D=j.length-1);void 0!==S.excludes[m]&&S.excludes[m].length<10;){for(S.tests={},r.resetMaskSet.call(x,!0),O=!0,h=0;h<j.length&&(g=O.caret||r.getLastValidPosition.call(x,void 0,!0)+1,k=j[h],O=f.call(x,g,k,!1,n,!0));h++)h===D&&(E=O),1==e&&O&&(E={caretPos:h});if(O)break;if(r.resetMaskSet.call(x),p=a.getTest.call(x,m),S.validPositions=P.extend(!0,[],_),S.tests=P.extend(!0,{},M),!S.excludes[m]){E=s.call(x,e,t,i,n,m-1,l);break}var A=(0,a.getDecisionTaker)(p);if(-1!==S.excludes[m].indexOf(A+":"+p.alternation)){E=s.call(x,e,t,i,n,m-1,l);break}for(S.excludes[m].push(A+":"+p.alternation),h=m;h<r.getLastValidPosition.call(x,void 0,!0)+1;h++)delete S.validPositions[h]}}return E&&!1===w.keepStatic||delete S.excludes[m],E}function l(e,t,i){var a=this.opts,r=this.maskset;switch(a.casing||t.casing){case"upper":e=e.toUpperCase();break;case"lower":e=e.toLowerCase();break;case"title":var o=r.validPositions[i-1];e=0===i||o&&o.input===String.fromCharCode(n.keyCode.Space)?e.toUpperCase():e.toLowerCase();break;default:if("function"==typeof a.casing){var s=Array.prototype.slice.call(arguments);s.push(r.validPositions),e=a.casing.apply(this,s)}}return e}function c(e){var t=this,i=this.opts,n=this.maskset;if("function"==typeof i.isComplete)return i.isComplete(e,i);if("*"!==i.repeat){var o=!1,s=r.determineLastRequiredPosition.call(t,!0),l=r.seekPrevious.call(t,s.l);if(void 0===s.def||s.def.newBlockMarker||s.def.optionality||s.def.optionalQuantifier){o=!0;for(var c=0;c<=l;c++){var u=a.getTestTemplate.call(t,c).match;if(!0!==u.static&&void 0===n.validPositions[c]&&!0!==u.optionality&&!0!==u.optionalQuantifier||!0===u.static&&e[c]!==a.getPlaceholder.call(t,c,u)){o=!1;break}}}return o}}function u(e){var t=this.opts.insertMode?0:1;return this.isRTL?e.begin-e.end>t:e.end-e.begin>t}function f(e,t,i,n,o,d,m){var g=this,k=this.dependencyLib,y=this.opts,b=g.maskset;i=!0===i;var x=e;function P(e){if(void 0!==e){if(void 0!==e.remove&&(Array.isArray(e.remove)||(e.remove=[e.remove]),e.remove.sort((function(e,t){return g.isRTL?e.pos-t.pos:t.pos-e.pos})).forEach((function(e){v.call(g,{begin:e,end:e+1})})),e.remove=void 0),void 0!==e.insert&&(Array.isArray(e.insert)||(e.insert=[e.insert]),e.insert.sort((function(e,t){return g.isRTL?t.pos-e.pos:e.pos-t.pos})).forEach((function(e){""!==e.c&&f.call(g,e.pos,e.c,void 0===e.strict||e.strict,void 0!==e.fromIsValid?e.fromIsValid:n)})),e.insert=void 0),e.refreshFromBuffer&&e.buffer){var t=e.refreshFromBuffer;p.call(g,!0===t?t:t.start,t.end,e.buffer),e.refreshFromBuffer=void 0}void 0!==e.rewritePosition&&(x=e.rewritePosition,e=!0)}return e}function w(t,i,o){var s=!1;return a.getTests.call(g,t).every((function(c,f){var d=c.match;if(r.getBuffer.call(g,!0),!1!==(s=(!d.jit||void 0!==b.validPositions[r.seekPrevious.call(g,t)])&&(null!=d.fn?d.fn.test(i,b,t,o,y,u.call(g,e)):(i===d.def||i===y.skipOptionalPartCharacter)&&""!==d.def&&{c:a.getPlaceholder.call(g,t,d,!0)||d.def,pos:t}))){var p=void 0!==s.c?s.c:i,h=t;return p=p===y.skipOptionalPartCharacter&&!0===d.static?a.getPlaceholder.call(g,t,d,!0)||d.def:p,!0!==(s=P(s))&&void 0!==s.pos&&s.pos!==t&&(h=s.pos),!0!==s&&void 0===s.pos&&void 0===s.c?!1:(!1===v.call(g,e,k.extend({},c,{input:l.call(g,p,d,h)}),n,h)&&(s=!1),!1)}return!0})),s}void 0!==e.begin&&(x=g.isRTL?e.end:e.begin);var S=!0,_=k.extend(!0,{},b.validPositions);if(!1===y.keepStatic&&void 0!==b.excludes[x]&&!0!==o&&!0!==n)for(var M=x;M<(g.isRTL?e.begin:e.end);M++)void 0!==b.excludes[M]&&(b.excludes[M]=void 0,delete b.tests[M]);if("function"==typeof y.preValidation&&!0!==n&&!0!==d&&(S=P(S=y.preValidation.call(g,r.getBuffer.call(g),x,t,u.call(g,e),y,b,e,i||o))),!0===S){if(S=w(x,t,i),(!i||!0===n)&&!1===S&&!0!==d){var O=b.validPositions[x];if(!O||!0!==O.match.static||O.match.def!==t&&t!==y.skipOptionalPartCharacter){if(y.insertMode||void 0===b.validPositions[r.seekNext.call(g,x)]||e.end>x){var E=!1;if(b.jitOffset[x]&&void 0===b.validPositions[r.seekNext.call(g,x)]&&!1!==(S=f.call(g,x+b.jitOffset[x],t,!0,!0))&&(!0!==o&&(S.caret=x),E=!0),e.end>x&&(b.validPositions[x]=void 0),!E&&!r.isMask.call(g,x,y.keepStatic&&0===x))for(var T=x+1,j=r.seekNext.call(g,x,!1,0!==x);T<=j;T++)if(!1!==(S=w(T,t,i))){S=h.call(g,x,void 0!==S.pos?S.pos:T)||S,x=T;break}}}else S={caret:r.seekNext.call(g,x)}}!1!==S||!y.keepStatic||!c.call(g,r.getBuffer.call(g))&&0!==x||i||!0===o?u.call(g,e)&&b.tests[x]&&b.tests[x].length>1&&y.keepStatic&&!i&&!0!==o&&(S=s.call(g,!0)):S=s.call(g,x,t,i,n,void 0,e),!0===S&&(S={pos:x})}if("function"==typeof y.postValidation&&!0!==n&&!0!==d){var D=y.postValidation.call(g,r.getBuffer.call(g,!0),void 0!==e.begin?g.isRTL?e.end:e.begin:e,t,S,y,b,i,m);void 0!==D&&(S=!0===D?S:D)}S&&void 0===S.pos&&(S.pos=x),!1===S||!0===d?(r.resetMaskSet.call(g,!0),b.validPositions=k.extend(!0,[],_)):h.call(g,void 0,x,!0);var A=P(S);void 0!==g.maxLength&&(r.getBuffer.call(g).length>g.maxLength&&!n&&(r.resetMaskSet.call(g,!0),b.validPositions=k.extend(!0,[],_),A=!1));return A}function d(e,t,i){for(var n=this.maskset,r=!1,o=a.getTests.call(this,e),s=0;s<o.length;s++){if(o[s].match&&(o[s].match.nativeDef===t.match[i.shiftPositions?"def":"nativeDef"]&&(!i.shiftPositions||!t.match.static)||o[s].match.nativeDef===t.match.nativeDef||i.regex&&!o[s].match.static&&o[s].match.fn.test(t.input,n,e,!1,i))){r=!0;break}if(o[s].match&&o[s].match.def===t.match.nativeDef){r=void 0;break}}return!1===r&&void 0!==n.jitOffset[e]&&(r=d.call(this,e+n.jitOffset[e],t,i)),r}function p(e,t,i){var a,n,s=this,l=this.maskset,c=this.opts,u=this.dependencyLib,f=c.skipOptionalPartCharacter,d=s.isRTL?i.slice().reverse():i;if(c.skipOptionalPartCharacter="",!0===e)r.resetMaskSet.call(s),l.tests={},e=0,t=i.length,n=r.determineNewCaretPosition.call(s,{begin:0,end:0},!1).begin;else{for(a=e;a<t;a++)delete l.validPositions[a];n=e}var p=new u.Event("keypress");for(a=e;a<t;a++){p.key=d[a].toString(),s.ignorable=!1;var h=o.EventHandlers.keypressEvent.call(s,p,!0,!1,!1,n);!1!==h&&void 0!==h&&(n=h.forwardPosition)}c.skipOptionalPartCharacter=f}function h(e,t,i){var n=this,o=this.maskset,s=this.dependencyLib;if(void 0===e)for(e=t-1;e>0&&!o.validPositions[e];e--);for(var l=e;l<t;l++){if(void 0===o.validPositions[l]&&!r.isMask.call(n,l,!1))if(0==l?a.getTest.call(n,l):o.validPositions[l-1]){var c=a.getTests.call(n,l).slice();""===c[c.length-1].match.def&&c.pop();var u,d=a.determineTestTemplate.call(n,l,c);if(d&&(!0!==d.match.jit||"master"===d.match.newBlockMarker&&(u=o.validPositions[l+1])&&!0===u.match.optionalQuantifier)&&((d=s.extend({},d,{input:a.getPlaceholder.call(n,l,d.match,!0)||d.match.def})).generatedInput=!0,v.call(n,l,d,!0),!0!==i)){var p=o.validPositions[t].input;return o.validPositions[t]=void 0,f.call(n,t,p,!0,!0)}}}}function v(e,t,i,n){var o=this,s=this.maskset,l=this.opts,c=this.dependencyLib;function u(e,t,i){var a=t[e];if(void 0!==a&&!0===a.match.static&&!0!==a.match.optionality&&(void 0===t[0]||void 0===t[0].alternation)){var n=i.begin<=e-1?t[e-1]&&!0===t[e-1].match.static&&t[e-1]:t[e-1],r=i.end>e+1?t[e+1]&&!0===t[e+1].match.static&&t[e+1]:t[e+1];return n&&r}return!1}var p=0,h=void 0!==e.begin?e.begin:e,v=void 0!==e.end?e.end:e,m=!0;if(e.begin>e.end&&(h=e.end,v=e.begin),n=void 0!==n?n:h,void 0===i&&(h!==v||l.insertMode&&void 0!==s.validPositions[n]||void 0===t||t.match.optionalQuantifier||t.match.optionality)){var g,k=c.extend(!0,{},s.validPositions),y=r.getLastValidPosition.call(o,void 0,!0);for(s.p=h,g=y;g>=h;g--)delete s.validPositions[g],void 0===t&&delete s.tests[g+1];var b,x,P=n,w=P;for(t&&(s.validPositions[n]=c.extend(!0,{},t),w++,P++),g=t?v:v-1;g<=y;g++){if(void 0!==(b=k[g])&&!0!==b.generatedInput&&(g>=v||g>=h&&u(g,k,{begin:h,end:v}))){for(;""!==a.getTest.call(o,w).match.def;){if(!1!==(x=d.call(o,w,b,l))||"+"===b.match.def){"+"===b.match.def&&r.getBuffer.call(o,!0);var S=f.call(o,w,b.input,"+"!==b.match.def,!0);if(m=!1!==S,P=(S.pos||w)+1,!m&&x)break}else m=!1;if(m){void 0===t&&b.match.static&&g===e.begin&&p++;break}if(!m&&r.getBuffer.call(o),w>s.maskLength)break;w++}""==a.getTest.call(o,w).match.def&&(m=!1),w=P}if(!m)break}if(!m)return s.validPositions=c.extend(!0,[],k),r.resetMaskSet.call(o,!0),!1}else t&&a.getTest.call(o,n).match.cd===t.match.cd&&(s.validPositions[n]=c.extend(!0,{},t));return r.resetMaskSet.call(o,!0),p}}},t={};function i(a){var n=t[a];if(void 0!==n)return n.exports;var r=t[a]={exports:{}};return e[a](r,r.exports,i),r.exports}var a={};return function(){var e,t=a;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,i(3851),i(219),i(207),i(5296);var n=((e=i(2394))&&e.__esModule?e:{default:e}).default;t.default=n}(),a}()}));


/***/ }),

/***/ "./src/libraries/lodash.min.js":
/*!*************************************!*\
  !*** ./src/libraries/lodash.min.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash lodash.com/license | Underscore.js 1.8.3 underscorejs.org/LICENSE
 */
;(function(){function n(n,t,r){switch(r.length){case 0:return n.call(t);case 1:return n.call(t,r[0]);case 2:return n.call(t,r[0],r[1]);case 3:return n.call(t,r[0],r[1],r[2])}return n.apply(t,r)}function t(n,t,r,e){for(var u=-1,i=null==n?0:n.length;++u<i;){var o=n[u];t(e,o,r(o),n)}return e}function r(n,t){for(var r=-1,e=null==n?0:n.length;++r<e&&false!==t(n[r],r,n););return n}function e(n,t){for(var r=null==n?0:n.length;r--&&false!==t(n[r],r,n););return n}function u(n,t){for(var r=-1,e=null==n?0:n.length;++r<e;)if(!t(n[r],r,n))return false;
  return true}function i(n,t){for(var r=-1,e=null==n?0:n.length,u=0,i=[];++r<e;){var o=n[r];t(o,r,n)&&(i[u++]=o)}return i}function o(n,t){return!(null==n||!n.length)&&-1<v(n,t,0)}function f(n,t,r){for(var e=-1,u=null==n?0:n.length;++e<u;)if(r(t,n[e]))return true;return false}function c(n,t){for(var r=-1,e=null==n?0:n.length,u=Array(e);++r<e;)u[r]=t(n[r],r,n);return u}function a(n,t){for(var r=-1,e=t.length,u=n.length;++r<e;)n[u+r]=t[r];return n}function l(n,t,r,e){var u=-1,i=null==n?0:n.length;for(e&&i&&(r=n[++u]);++u<i;)r=t(r,n[u],u,n);
  return r}function s(n,t,r,e){var u=null==n?0:n.length;for(e&&u&&(r=n[--u]);u--;)r=t(r,n[u],u,n);return r}function h(n,t){for(var r=-1,e=null==n?0:n.length;++r<e;)if(t(n[r],r,n))return true;return false}function p(n,t,r){var e;return r(n,function(n,r,u){if(t(n,r,u))return e=r,false}),e}function _(n,t,r,e){var u=n.length;for(r+=e?1:-1;e?r--:++r<u;)if(t(n[r],r,n))return r;return-1}function v(n,t,r){if(t===t)n:{--r;for(var e=n.length;++r<e;)if(n[r]===t){n=r;break n}n=-1}else n=_(n,d,r);return n}function g(n,t,r,e){
  --r;for(var u=n.length;++r<u;)if(e(n[r],t))return r;return-1}function d(n){return n!==n}function y(n,t){var r=null==n?0:n.length;return r?m(n,t)/r:F}function b(n){return function(t){return null==t?T:t[n]}}function x(n){return function(t){return null==n?T:n[t]}}function j(n,t,r,e,u){return u(n,function(n,u,i){r=e?(e=false,n):t(r,n,u,i)}),r}function w(n,t){var r=n.length;for(n.sort(t);r--;)n[r]=n[r].c;return n}function m(n,t){for(var r,e=-1,u=n.length;++e<u;){var i=t(n[e]);i!==T&&(r=r===T?i:r+i)}return r;
  }function A(n,t){for(var r=-1,e=Array(n);++r<n;)e[r]=t(r);return e}function E(n,t){return c(t,function(t){return[t,n[t]]})}function k(n){return function(t){return n(t)}}function S(n,t){return c(t,function(t){return n[t]})}function O(n,t){return n.has(t)}function I(n,t){for(var r=-1,e=n.length;++r<e&&-1<v(t,n[r],0););return r}function R(n,t){for(var r=n.length;r--&&-1<v(t,n[r],0););return r}function z(n){return"\\"+Un[n]}function W(n){var t=-1,r=Array(n.size);return n.forEach(function(n,e){r[++t]=[e,n];
  }),r}function B(n,t){return function(r){return n(t(r))}}function L(n,t){for(var r=-1,e=n.length,u=0,i=[];++r<e;){var o=n[r];o!==t&&"__lodash_placeholder__"!==o||(n[r]="__lodash_placeholder__",i[u++]=r)}return i}function U(n){var t=-1,r=Array(n.size);return n.forEach(function(n){r[++t]=n}),r}function C(n){var t=-1,r=Array(n.size);return n.forEach(function(n){r[++t]=[n,n]}),r}function D(n){if(Rn.test(n)){for(var t=On.lastIndex=0;On.test(n);)++t;n=t}else n=Qn(n);return n}function M(n){return Rn.test(n)?n.match(On)||[]:n.split("");
  }var T,$=1/0,F=NaN,N=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],P=/\b__p\+='';/g,Z=/\b(__p\+=)''\+/g,q=/(__e\(.*?\)|\b__t\))\+'';/g,V=/&(?:amp|lt|gt|quot|#39);/g,K=/[&<>"']/g,G=RegExp(V.source),H=RegExp(K.source),J=/<%-([\s\S]+?)%>/g,Y=/<%([\s\S]+?)%>/g,Q=/<%=([\s\S]+?)%>/g,X=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,nn=/^\w*$/,tn=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,rn=/[\\^$.*+?()[\]{}|]/g,en=RegExp(rn.source),un=/^\s+|\s+$/g,on=/^\s+/,fn=/\s+$/,cn=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,an=/\{\n\/\* \[wrapped with (.+)\] \*/,ln=/,? & /,sn=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,hn=/\\(\\)?/g,pn=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,_n=/\w*$/,vn=/^[-+]0x[0-9a-f]+$/i,gn=/^0b[01]+$/i,dn=/^\[object .+?Constructor\]$/,yn=/^0o[0-7]+$/i,bn=/^(?:0|[1-9]\d*)$/,xn=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,jn=/($^)/,wn=/['\n\r\u2028\u2029\\]/g,mn="[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?(?:\\u200d(?:[^\\ud800-\\udfff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?)*",An="(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])"+mn,En="(?:[^\\ud800-\\udfff][\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]?|[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff])",kn=RegExp("['\u2019]","g"),Sn=RegExp("[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]","g"),On=RegExp("\\ud83c[\\udffb-\\udfff](?=\\ud83c[\\udffb-\\udfff])|"+En+mn,"g"),In=RegExp(["[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+(?:['\u2019](?:d|ll|m|re|s|t|ve))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde]|$)|(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde](?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])|$)|[A-Z\\xc0-\\xd6\\xd8-\\xde]?(?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['\u2019](?:d|ll|m|re|s|t|ve))?|[A-Z\\xc0-\\xd6\\xd8-\\xde]+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?|\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])|\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])|\\d+",An].join("|"),"g"),Rn=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]"),zn=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Wn="Array Buffer DataView Date Error Float32Array Float64Array Function Int8Array Int16Array Int32Array Map Math Object Promise RegExp Set String Symbol TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array WeakMap _ clearTimeout isFinite parseInt setTimeout".split(" "),Bn={};
  Bn["[object Float32Array]"]=Bn["[object Float64Array]"]=Bn["[object Int8Array]"]=Bn["[object Int16Array]"]=Bn["[object Int32Array]"]=Bn["[object Uint8Array]"]=Bn["[object Uint8ClampedArray]"]=Bn["[object Uint16Array]"]=Bn["[object Uint32Array]"]=true,Bn["[object Arguments]"]=Bn["[object Array]"]=Bn["[object ArrayBuffer]"]=Bn["[object Boolean]"]=Bn["[object DataView]"]=Bn["[object Date]"]=Bn["[object Error]"]=Bn["[object Function]"]=Bn["[object Map]"]=Bn["[object Number]"]=Bn["[object Object]"]=Bn["[object RegExp]"]=Bn["[object Set]"]=Bn["[object String]"]=Bn["[object WeakMap]"]=false;
  var Ln={};Ln["[object Arguments]"]=Ln["[object Array]"]=Ln["[object ArrayBuffer]"]=Ln["[object DataView]"]=Ln["[object Boolean]"]=Ln["[object Date]"]=Ln["[object Float32Array]"]=Ln["[object Float64Array]"]=Ln["[object Int8Array]"]=Ln["[object Int16Array]"]=Ln["[object Int32Array]"]=Ln["[object Map]"]=Ln["[object Number]"]=Ln["[object Object]"]=Ln["[object RegExp]"]=Ln["[object Set]"]=Ln["[object String]"]=Ln["[object Symbol]"]=Ln["[object Uint8Array]"]=Ln["[object Uint8ClampedArray]"]=Ln["[object Uint16Array]"]=Ln["[object Uint32Array]"]=true,
  Ln["[object Error]"]=Ln["[object Function]"]=Ln["[object WeakMap]"]=false;var Un={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Cn=parseFloat,Dn=parseInt,Mn=typeof __webpack_require__.g=="object"&&__webpack_require__.g&&__webpack_require__.g.Object===Object&&__webpack_require__.g,Tn=typeof self=="object"&&self&&self.Object===Object&&self,$n=Mn||Tn||Function("return this")(),Fn= true&&exports&&!exports.nodeType&&exports,Nn=Fn&&"object"=="object"&&module&&!module.nodeType&&module,Pn=Nn&&Nn.exports===Fn,Zn=Pn&&Mn.process,qn=function(){
  try{var n=Nn&&Nn.f&&Nn.f("util").types;return n?n:Zn&&Zn.binding&&Zn.binding("util")}catch(n){}}(),Vn=qn&&qn.isArrayBuffer,Kn=qn&&qn.isDate,Gn=qn&&qn.isMap,Hn=qn&&qn.isRegExp,Jn=qn&&qn.isSet,Yn=qn&&qn.isTypedArray,Qn=b("length"),Xn=x({"\xc0":"A","\xc1":"A","\xc2":"A","\xc3":"A","\xc4":"A","\xc5":"A","\xe0":"a","\xe1":"a","\xe2":"a","\xe3":"a","\xe4":"a","\xe5":"a","\xc7":"C","\xe7":"c","\xd0":"D","\xf0":"d","\xc8":"E","\xc9":"E","\xca":"E","\xcb":"E","\xe8":"e","\xe9":"e","\xea":"e","\xeb":"e","\xcc":"I",
  "\xcd":"I","\xce":"I","\xcf":"I","\xec":"i","\xed":"i","\xee":"i","\xef":"i","\xd1":"N","\xf1":"n","\xd2":"O","\xd3":"O","\xd4":"O","\xd5":"O","\xd6":"O","\xd8":"O","\xf2":"o","\xf3":"o","\xf4":"o","\xf5":"o","\xf6":"o","\xf8":"o","\xd9":"U","\xda":"U","\xdb":"U","\xdc":"U","\xf9":"u","\xfa":"u","\xfb":"u","\xfc":"u","\xdd":"Y","\xfd":"y","\xff":"y","\xc6":"Ae","\xe6":"ae","\xde":"Th","\xfe":"th","\xdf":"ss","\u0100":"A","\u0102":"A","\u0104":"A","\u0101":"a","\u0103":"a","\u0105":"a","\u0106":"C",
  "\u0108":"C","\u010a":"C","\u010c":"C","\u0107":"c","\u0109":"c","\u010b":"c","\u010d":"c","\u010e":"D","\u0110":"D","\u010f":"d","\u0111":"d","\u0112":"E","\u0114":"E","\u0116":"E","\u0118":"E","\u011a":"E","\u0113":"e","\u0115":"e","\u0117":"e","\u0119":"e","\u011b":"e","\u011c":"G","\u011e":"G","\u0120":"G","\u0122":"G","\u011d":"g","\u011f":"g","\u0121":"g","\u0123":"g","\u0124":"H","\u0126":"H","\u0125":"h","\u0127":"h","\u0128":"I","\u012a":"I","\u012c":"I","\u012e":"I","\u0130":"I","\u0129":"i",
  "\u012b":"i","\u012d":"i","\u012f":"i","\u0131":"i","\u0134":"J","\u0135":"j","\u0136":"K","\u0137":"k","\u0138":"k","\u0139":"L","\u013b":"L","\u013d":"L","\u013f":"L","\u0141":"L","\u013a":"l","\u013c":"l","\u013e":"l","\u0140":"l","\u0142":"l","\u0143":"N","\u0145":"N","\u0147":"N","\u014a":"N","\u0144":"n","\u0146":"n","\u0148":"n","\u014b":"n","\u014c":"O","\u014e":"O","\u0150":"O","\u014d":"o","\u014f":"o","\u0151":"o","\u0154":"R","\u0156":"R","\u0158":"R","\u0155":"r","\u0157":"r","\u0159":"r",
  "\u015a":"S","\u015c":"S","\u015e":"S","\u0160":"S","\u015b":"s","\u015d":"s","\u015f":"s","\u0161":"s","\u0162":"T","\u0164":"T","\u0166":"T","\u0163":"t","\u0165":"t","\u0167":"t","\u0168":"U","\u016a":"U","\u016c":"U","\u016e":"U","\u0170":"U","\u0172":"U","\u0169":"u","\u016b":"u","\u016d":"u","\u016f":"u","\u0171":"u","\u0173":"u","\u0174":"W","\u0175":"w","\u0176":"Y","\u0177":"y","\u0178":"Y","\u0179":"Z","\u017b":"Z","\u017d":"Z","\u017a":"z","\u017c":"z","\u017e":"z","\u0132":"IJ","\u0133":"ij",
  "\u0152":"Oe","\u0153":"oe","\u0149":"'n","\u017f":"s"}),nt=x({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"}),tt=x({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),rt=function x(mn){function An(n){if(yu(n)&&!ff(n)&&!(n instanceof Un)){if(n instanceof On)return n;if(oi.call(n,"__wrapped__"))return Fe(n)}return new On(n)}function En(){}function On(n,t){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=T}function Un(n){this.__wrapped__=n,
  this.__actions__=[],this.__dir__=1,this.__filtered__=false,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Mn(n){var t=-1,r=null==n?0:n.length;for(this.clear();++t<r;){var e=n[t];this.set(e[0],e[1])}}function Tn(n){var t=-1,r=null==n?0:n.length;for(this.clear();++t<r;){var e=n[t];this.set(e[0],e[1])}}function Fn(n){var t=-1,r=null==n?0:n.length;for(this.clear();++t<r;){var e=n[t];this.set(e[0],e[1])}}function Nn(n){var t=-1,r=null==n?0:n.length;for(this.__data__=new Fn;++t<r;)this.add(n[t]);
  }function Zn(n){this.size=(this.__data__=new Tn(n)).size}function qn(n,t){var r,e=ff(n),u=!e&&of(n),i=!e&&!u&&af(n),o=!e&&!u&&!i&&_f(n),u=(e=e||u||i||o)?A(n.length,ni):[],f=u.length;for(r in n)!t&&!oi.call(n,r)||e&&("length"==r||i&&("offset"==r||"parent"==r)||o&&("buffer"==r||"byteLength"==r||"byteOffset"==r)||Se(r,f))||u.push(r);return u}function Qn(n){var t=n.length;return t?n[ir(0,t-1)]:T}function et(n,t){return De(Ur(n),pt(t,0,n.length))}function ut(n){return De(Ur(n))}function it(n,t,r){(r===T||lu(n[t],r))&&(r!==T||t in n)||st(n,t,r);
  }function ot(n,t,r){var e=n[t];oi.call(n,t)&&lu(e,r)&&(r!==T||t in n)||st(n,t,r)}function ft(n,t){for(var r=n.length;r--;)if(lu(n[r][0],t))return r;return-1}function ct(n,t,r,e){return uo(n,function(n,u,i){t(e,n,r(n),i)}),e}function at(n,t){return n&&Cr(t,Wu(t),n)}function lt(n,t){return n&&Cr(t,Bu(t),n)}function st(n,t,r){"__proto__"==t&&Ai?Ai(n,t,{configurable:true,enumerable:true,value:r,writable:true}):n[t]=r}function ht(n,t){for(var r=-1,e=t.length,u=Ku(e),i=null==n;++r<e;)u[r]=i?T:Ru(n,t[r]);return u;
  }function pt(n,t,r){return n===n&&(r!==T&&(n=n<=r?n:r),t!==T&&(n=n>=t?n:t)),n}function _t(n,t,e,u,i,o){var f,c=1&t,a=2&t,l=4&t;if(e&&(f=i?e(n,u,i,o):e(n)),f!==T)return f;if(!du(n))return n;if(u=ff(n)){if(f=me(n),!c)return Ur(n,f)}else{var s=vo(n),h="[object Function]"==s||"[object GeneratorFunction]"==s;if(af(n))return Ir(n,c);if("[object Object]"==s||"[object Arguments]"==s||h&&!i){if(f=a||h?{}:Ae(n),!c)return a?Mr(n,lt(f,n)):Dr(n,at(f,n))}else{if(!Ln[s])return i?n:{};f=Ee(n,s,c)}}if(o||(o=new Zn),
  i=o.get(n))return i;o.set(n,f),pf(n)?n.forEach(function(r){f.add(_t(r,t,e,r,n,o))}):sf(n)&&n.forEach(function(r,u){f.set(u,_t(r,t,e,u,n,o))});var a=l?a?ve:_e:a?Bu:Wu,p=u?T:a(n);return r(p||n,function(r,u){p&&(u=r,r=n[u]),ot(f,u,_t(r,t,e,u,n,o))}),f}function vt(n){var t=Wu(n);return function(r){return gt(r,n,t)}}function gt(n,t,r){var e=r.length;if(null==n)return!e;for(n=Qu(n);e--;){var u=r[e],i=t[u],o=n[u];if(o===T&&!(u in n)||!i(o))return false}return true}function dt(n,t,r){if(typeof n!="function")throw new ti("Expected a function");
  return bo(function(){n.apply(T,r)},t)}function yt(n,t,r,e){var u=-1,i=o,a=true,l=n.length,s=[],h=t.length;if(!l)return s;r&&(t=c(t,k(r))),e?(i=f,a=false):200<=t.length&&(i=O,a=false,t=new Nn(t));n:for(;++u<l;){var p=n[u],_=null==r?p:r(p),p=e||0!==p?p:0;if(a&&_===_){for(var v=h;v--;)if(t[v]===_)continue n;s.push(p)}else i(t,_,e)||s.push(p)}return s}function bt(n,t){var r=true;return uo(n,function(n,e,u){return r=!!t(n,e,u)}),r}function xt(n,t,r){for(var e=-1,u=n.length;++e<u;){var i=n[e],o=t(i);if(null!=o&&(f===T?o===o&&!wu(o):r(o,f)))var f=o,c=i;
  }return c}function jt(n,t){var r=[];return uo(n,function(n,e,u){t(n,e,u)&&r.push(n)}),r}function wt(n,t,r,e,u){var i=-1,o=n.length;for(r||(r=ke),u||(u=[]);++i<o;){var f=n[i];0<t&&r(f)?1<t?wt(f,t-1,r,e,u):a(u,f):e||(u[u.length]=f)}return u}function mt(n,t){return n&&oo(n,t,Wu)}function At(n,t){return n&&fo(n,t,Wu)}function Et(n,t){return i(t,function(t){return _u(n[t])})}function kt(n,t){t=Sr(t,n);for(var r=0,e=t.length;null!=n&&r<e;)n=n[Me(t[r++])];return r&&r==e?n:T}function St(n,t,r){return t=t(n),
  ff(n)?t:a(t,r(n))}function Ot(n){if(null==n)n=n===T?"[object Undefined]":"[object Null]";else if(mi&&mi in Qu(n)){var t=oi.call(n,mi),r=n[mi];try{n[mi]=T;var e=true}catch(n){}var u=ai.call(n);e&&(t?n[mi]=r:delete n[mi]),n=u}else n=ai.call(n);return n}function It(n,t){return n>t}function Rt(n,t){return null!=n&&oi.call(n,t)}function zt(n,t){return null!=n&&t in Qu(n)}function Wt(n,t,r){for(var e=r?f:o,u=n[0].length,i=n.length,a=i,l=Ku(i),s=1/0,h=[];a--;){var p=n[a];a&&t&&(p=c(p,k(t))),s=Ci(p.length,s),
  l[a]=!r&&(t||120<=u&&120<=p.length)?new Nn(a&&p):T}var p=n[0],_=-1,v=l[0];n:for(;++_<u&&h.length<s;){var g=p[_],d=t?t(g):g,g=r||0!==g?g:0;if(v?!O(v,d):!e(h,d,r)){for(a=i;--a;){var y=l[a];if(y?!O(y,d):!e(n[a],d,r))continue n}v&&v.push(d),h.push(g)}}return h}function Bt(n,t,r){var e={};return mt(n,function(n,u,i){t(e,r(n),u,i)}),e}function Lt(t,r,e){return r=Sr(r,t),t=2>r.length?t:kt(t,hr(r,0,-1)),r=null==t?t:t[Me(Ve(r))],null==r?T:n(r,t,e)}function Ut(n){return yu(n)&&"[object Arguments]"==Ot(n)}function Ct(n){
  return yu(n)&&"[object ArrayBuffer]"==Ot(n)}function Dt(n){return yu(n)&&"[object Date]"==Ot(n)}function Mt(n,t,r,e,u){if(n===t)t=true;else if(null==n||null==t||!yu(n)&&!yu(t))t=n!==n&&t!==t;else n:{var i=ff(n),o=ff(t),f=i?"[object Array]":vo(n),c=o?"[object Array]":vo(t),f="[object Arguments]"==f?"[object Object]":f,c="[object Arguments]"==c?"[object Object]":c,a="[object Object]"==f,o="[object Object]"==c;if((c=f==c)&&af(n)){if(!af(t)){t=false;break n}i=true,a=false}if(c&&!a)u||(u=new Zn),t=i||_f(n)?se(n,t,r,e,Mt,u):he(n,t,f,r,e,Mt,u);else{
  if(!(1&r)&&(i=a&&oi.call(n,"__wrapped__"),f=o&&oi.call(t,"__wrapped__"),i||f)){n=i?n.value():n,t=f?t.value():t,u||(u=new Zn),t=Mt(n,t,r,e,u);break n}if(c)t:if(u||(u=new Zn),i=1&r,f=_e(n),o=f.length,c=_e(t).length,o==c||i){for(a=o;a--;){var l=f[a];if(!(i?l in t:oi.call(t,l))){t=false;break t}}if((c=u.get(n))&&u.get(t))t=c==t;else{c=true,u.set(n,t),u.set(t,n);for(var s=i;++a<o;){var l=f[a],h=n[l],p=t[l];if(e)var _=i?e(p,h,l,t,n,u):e(h,p,l,n,t,u);if(_===T?h!==p&&!Mt(h,p,r,e,u):!_){c=false;break}s||(s="constructor"==l);
  }c&&!s&&(r=n.constructor,e=t.constructor,r!=e&&"constructor"in n&&"constructor"in t&&!(typeof r=="function"&&r instanceof r&&typeof e=="function"&&e instanceof e)&&(c=false)),u.delete(n),u.delete(t),t=c}}else t=false;else t=false}}return t}function Tt(n){return yu(n)&&"[object Map]"==vo(n)}function $t(n,t,r,e){var u=r.length,i=u,o=!e;if(null==n)return!i;for(n=Qu(n);u--;){var f=r[u];if(o&&f[2]?f[1]!==n[f[0]]:!(f[0]in n))return false}for(;++u<i;){var f=r[u],c=f[0],a=n[c],l=f[1];if(o&&f[2]){if(a===T&&!(c in n))return false;
  }else{if(f=new Zn,e)var s=e(a,l,c,n,t,f);if(s===T?!Mt(l,a,3,e,f):!s)return false}}return true}function Ft(n){return!(!du(n)||ci&&ci in n)&&(_u(n)?hi:dn).test(Te(n))}function Nt(n){return yu(n)&&"[object RegExp]"==Ot(n)}function Pt(n){return yu(n)&&"[object Set]"==vo(n)}function Zt(n){return yu(n)&&gu(n.length)&&!!Bn[Ot(n)]}function qt(n){return typeof n=="function"?n:null==n?$u:typeof n=="object"?ff(n)?Jt(n[0],n[1]):Ht(n):Zu(n)}function Vt(n){if(!ze(n))return Li(n);var t,r=[];for(t in Qu(n))oi.call(n,t)&&"constructor"!=t&&r.push(t);
  return r}function Kt(n,t){return n<t}function Gt(n,t){var r=-1,e=su(n)?Ku(n.length):[];return uo(n,function(n,u,i){e[++r]=t(n,u,i)}),e}function Ht(n){var t=xe(n);return 1==t.length&&t[0][2]?We(t[0][0],t[0][1]):function(r){return r===n||$t(r,n,t)}}function Jt(n,t){return Ie(n)&&t===t&&!du(t)?We(Me(n),t):function(r){var e=Ru(r,n);return e===T&&e===t?zu(r,n):Mt(t,e,3)}}function Yt(n,t,r,e,u){n!==t&&oo(t,function(i,o){if(u||(u=new Zn),du(i)){var f=u,c=Le(n,o),a=Le(t,o),l=f.get(a);if(l)it(n,o,l);else{
  var l=e?e(c,a,o+"",n,t,f):T,s=l===T;if(s){var h=ff(a),p=!h&&af(a),_=!h&&!p&&_f(a),l=a;h||p||_?ff(c)?l=c:hu(c)?l=Ur(c):p?(s=false,l=Ir(a,true)):_?(s=false,l=zr(a,true)):l=[]:xu(a)||of(a)?(l=c,of(c)?l=Ou(c):du(c)&&!_u(c)||(l=Ae(a))):s=false}s&&(f.set(a,l),Yt(l,a,r,e,f),f.delete(a)),it(n,o,l)}}else f=e?e(Le(n,o),i,o+"",n,t,u):T,f===T&&(f=i),it(n,o,f)},Bu)}function Qt(n,t){var r=n.length;if(r)return t+=0>t?r:0,Se(t,r)?n[t]:T}function Xt(n,t,r){var e=-1;return t=c(t.length?t:[$u],k(ye())),n=Gt(n,function(n){return{
  a:c(t,function(t){return t(n)}),b:++e,c:n}}),w(n,function(n,t){var e;n:{e=-1;for(var u=n.a,i=t.a,o=u.length,f=r.length;++e<o;){var c=Wr(u[e],i[e]);if(c){e=e>=f?c:c*("desc"==r[e]?-1:1);break n}}e=n.b-t.b}return e})}function nr(n,t){return tr(n,t,function(t,r){return zu(n,r)})}function tr(n,t,r){for(var e=-1,u=t.length,i={};++e<u;){var o=t[e],f=kt(n,o);r(f,o)&&lr(i,Sr(o,n),f)}return i}function rr(n){return function(t){return kt(t,n)}}function er(n,t,r,e){var u=e?g:v,i=-1,o=t.length,f=n;for(n===t&&(t=Ur(t)),
  r&&(f=c(n,k(r)));++i<o;)for(var a=0,l=t[i],l=r?r(l):l;-1<(a=u(f,l,a,e));)f!==n&&xi.call(f,a,1),xi.call(n,a,1);return n}function ur(n,t){for(var r=n?t.length:0,e=r-1;r--;){var u=t[r];if(r==e||u!==i){var i=u;Se(u)?xi.call(n,u,1):xr(n,u)}}}function ir(n,t){return n+Ii(Ti()*(t-n+1))}function or(n,t){var r="";if(!n||1>t||9007199254740991<t)return r;do t%2&&(r+=n),(t=Ii(t/2))&&(n+=n);while(t);return r}function fr(n,t){return xo(Be(n,t,$u),n+"")}function cr(n){return Qn(Uu(n))}function ar(n,t){var r=Uu(n);
  return De(r,pt(t,0,r.length))}function lr(n,t,r,e){if(!du(n))return n;t=Sr(t,n);for(var u=-1,i=t.length,o=i-1,f=n;null!=f&&++u<i;){var c=Me(t[u]),a=r;if(u!=o){var l=f[c],a=e?e(l,c,f):T;a===T&&(a=du(l)?l:Se(t[u+1])?[]:{})}ot(f,c,a),f=f[c]}return n}function sr(n){return De(Uu(n))}function hr(n,t,r){var e=-1,u=n.length;for(0>t&&(t=-t>u?0:u+t),r=r>u?u:r,0>r&&(r+=u),u=t>r?0:r-t>>>0,t>>>=0,r=Ku(u);++e<u;)r[e]=n[e+t];return r}function pr(n,t){var r;return uo(n,function(n,e,u){return r=t(n,e,u),!r}),!!r}
  function _r(n,t,r){var e=0,u=null==n?e:n.length;if(typeof t=="number"&&t===t&&2147483647>=u){for(;e<u;){var i=e+u>>>1,o=n[i];null!==o&&!wu(o)&&(r?o<=t:o<t)?e=i+1:u=i}return u}return vr(n,t,$u,r)}function vr(n,t,r,e){t=r(t);for(var u=0,i=null==n?0:n.length,o=t!==t,f=null===t,c=wu(t),a=t===T;u<i;){var l=Ii((u+i)/2),s=r(n[l]),h=s!==T,p=null===s,_=s===s,v=wu(s);(o?e||_:a?_&&(e||h):f?_&&h&&(e||!p):c?_&&h&&!p&&(e||!v):p||v?0:e?s<=t:s<t)?u=l+1:i=l}return Ci(i,4294967294)}function gr(n,t){for(var r=-1,e=n.length,u=0,i=[];++r<e;){
  var o=n[r],f=t?t(o):o;if(!r||!lu(f,c)){var c=f;i[u++]=0===o?0:o}}return i}function dr(n){return typeof n=="number"?n:wu(n)?F:+n}function yr(n){if(typeof n=="string")return n;if(ff(n))return c(n,yr)+"";if(wu(n))return ro?ro.call(n):"";var t=n+"";return"0"==t&&1/n==-$?"-0":t}function br(n,t,r){var e=-1,u=o,i=n.length,c=true,a=[],l=a;if(r)c=false,u=f;else if(200<=i){if(u=t?null:so(n))return U(u);c=false,u=O,l=new Nn}else l=t?[]:a;n:for(;++e<i;){var s=n[e],h=t?t(s):s,s=r||0!==s?s:0;if(c&&h===h){for(var p=l.length;p--;)if(l[p]===h)continue n;
  t&&l.push(h),a.push(s)}else u(l,h,r)||(l!==a&&l.push(h),a.push(s))}return a}function xr(n,t){return t=Sr(t,n),n=2>t.length?n:kt(n,hr(t,0,-1)),null==n||delete n[Me(Ve(t))]}function jr(n,t,r,e){for(var u=n.length,i=e?u:-1;(e?i--:++i<u)&&t(n[i],i,n););return r?hr(n,e?0:i,e?i+1:u):hr(n,e?i+1:0,e?u:i)}function wr(n,t){var r=n;return r instanceof Un&&(r=r.value()),l(t,function(n,t){return t.func.apply(t.thisArg,a([n],t.args))},r)}function mr(n,t,r){var e=n.length;if(2>e)return e?br(n[0]):[];for(var u=-1,i=Ku(e);++u<e;)for(var o=n[u],f=-1;++f<e;)f!=u&&(i[u]=yt(i[u]||o,n[f],t,r));
  return br(wt(i,1),t,r)}function Ar(n,t,r){for(var e=-1,u=n.length,i=t.length,o={};++e<u;)r(o,n[e],e<i?t[e]:T);return o}function Er(n){return hu(n)?n:[]}function kr(n){return typeof n=="function"?n:$u}function Sr(n,t){return ff(n)?n:Ie(n,t)?[n]:jo(Iu(n))}function Or(n,t,r){var e=n.length;return r=r===T?e:r,!t&&r>=e?n:hr(n,t,r)}function Ir(n,t){if(t)return n.slice();var r=n.length,r=gi?gi(r):new n.constructor(r);return n.copy(r),r}function Rr(n){var t=new n.constructor(n.byteLength);return new vi(t).set(new vi(n)),
  t}function zr(n,t){return new n.constructor(t?Rr(n.buffer):n.buffer,n.byteOffset,n.length)}function Wr(n,t){if(n!==t){var r=n!==T,e=null===n,u=n===n,i=wu(n),o=t!==T,f=null===t,c=t===t,a=wu(t);if(!f&&!a&&!i&&n>t||i&&o&&c&&!f&&!a||e&&o&&c||!r&&c||!u)return 1;if(!e&&!i&&!a&&n<t||a&&r&&u&&!e&&!i||f&&r&&u||!o&&u||!c)return-1}return 0}function Br(n,t,r,e){var u=-1,i=n.length,o=r.length,f=-1,c=t.length,a=Ui(i-o,0),l=Ku(c+a);for(e=!e;++f<c;)l[f]=t[f];for(;++u<o;)(e||u<i)&&(l[r[u]]=n[u]);for(;a--;)l[f++]=n[u++];
  return l}function Lr(n,t,r,e){var u=-1,i=n.length,o=-1,f=r.length,c=-1,a=t.length,l=Ui(i-f,0),s=Ku(l+a);for(e=!e;++u<l;)s[u]=n[u];for(l=u;++c<a;)s[l+c]=t[c];for(;++o<f;)(e||u<i)&&(s[l+r[o]]=n[u++]);return s}function Ur(n,t){var r=-1,e=n.length;for(t||(t=Ku(e));++r<e;)t[r]=n[r];return t}function Cr(n,t,r,e){var u=!r;r||(r={});for(var i=-1,o=t.length;++i<o;){var f=t[i],c=e?e(r[f],n[f],f,r,n):T;c===T&&(c=n[f]),u?st(r,f,c):ot(r,f,c)}return r}function Dr(n,t){return Cr(n,po(n),t)}function Mr(n,t){return Cr(n,_o(n),t);
  }function Tr(n,r){return function(e,u){var i=ff(e)?t:ct,o=r?r():{};return i(e,n,ye(u,2),o)}}function $r(n){return fr(function(t,r){var e=-1,u=r.length,i=1<u?r[u-1]:T,o=2<u?r[2]:T,i=3<n.length&&typeof i=="function"?(u--,i):T;for(o&&Oe(r[0],r[1],o)&&(i=3>u?T:i,u=1),t=Qu(t);++e<u;)(o=r[e])&&n(t,o,e,i);return t})}function Fr(n,t){return function(r,e){if(null==r)return r;if(!su(r))return n(r,e);for(var u=r.length,i=t?u:-1,o=Qu(r);(t?i--:++i<u)&&false!==e(o[i],i,o););return r}}function Nr(n){return function(t,r,e){
  var u=-1,i=Qu(t);e=e(t);for(var o=e.length;o--;){var f=e[n?o:++u];if(false===r(i[f],f,i))break}return t}}function Pr(n,t,r){function e(){return(this&&this!==$n&&this instanceof e?i:n).apply(u?r:this,arguments)}var u=1&t,i=Vr(n);return e}function Zr(n){return function(t){t=Iu(t);var r=Rn.test(t)?M(t):T,e=r?r[0]:t.charAt(0);return t=r?Or(r,1).join(""):t.slice(1),e[n]()+t}}function qr(n){return function(t){return l(Mu(Du(t).replace(kn,"")),n,"")}}function Vr(n){return function(){var t=arguments;switch(t.length){
  case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3]);case 5:return new n(t[0],t[1],t[2],t[3],t[4]);case 6:return new n(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new n(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var r=eo(n.prototype),t=n.apply(r,t);return du(t)?t:r}}function Kr(t,r,e){function u(){for(var o=arguments.length,f=Ku(o),c=o,a=de(u);c--;)f[c]=arguments[c];return c=3>o&&f[0]!==a&&f[o-1]!==a?[]:L(f,a),
  o-=c.length,o<e?ue(t,r,Jr,u.placeholder,T,f,c,T,T,e-o):n(this&&this!==$n&&this instanceof u?i:t,this,f)}var i=Vr(t);return u}function Gr(n){return function(t,r,e){var u=Qu(t);if(!su(t)){var i=ye(r,3);t=Wu(t),r=function(n){return i(u[n],n,u)}}return r=n(t,r,e),-1<r?u[i?t[r]:r]:T}}function Hr(n){return pe(function(t){var r=t.length,e=r,u=On.prototype.thru;for(n&&t.reverse();e--;){var i=t[e];if(typeof i!="function")throw new ti("Expected a function");if(u&&!o&&"wrapper"==ge(i))var o=new On([],true)}for(e=o?e:r;++e<r;)var i=t[e],u=ge(i),f="wrapper"==u?ho(i):T,o=f&&Re(f[0])&&424==f[1]&&!f[4].length&&1==f[9]?o[ge(f[0])].apply(o,f[3]):1==i.length&&Re(i)?o[u]():o.thru(i);
  return function(){var n=arguments,e=n[0];if(o&&1==n.length&&ff(e))return o.plant(e).value();for(var u=0,n=r?t[u].apply(this,n):e;++u<r;)n=t[u].call(this,n);return n}})}function Jr(n,t,r,e,u,i,o,f,c,a){function l(){for(var d=arguments.length,y=Ku(d),b=d;b--;)y[b]=arguments[b];if(_){var x,j=de(l),b=y.length;for(x=0;b--;)y[b]===j&&++x}if(e&&(y=Br(y,e,u,_)),i&&(y=Lr(y,i,o,_)),d-=x,_&&d<a)return j=L(y,j),ue(n,t,Jr,l.placeholder,r,y,j,f,c,a-d);if(j=h?r:this,b=p?j[n]:n,d=y.length,f){x=y.length;for(var w=Ci(f.length,x),m=Ur(y);w--;){
  var A=f[w];y[w]=Se(A,x)?m[A]:T}}else v&&1<d&&y.reverse();return s&&c<d&&(y.length=c),this&&this!==$n&&this instanceof l&&(b=g||Vr(b)),b.apply(j,y)}var s=128&t,h=1&t,p=2&t,_=24&t,v=512&t,g=p?T:Vr(n);return l}function Yr(n,t){return function(r,e){return Bt(r,n,t(e))}}function Qr(n,t){return function(r,e){var u;if(r===T&&e===T)return t;if(r!==T&&(u=r),e!==T){if(u===T)return e;typeof r=="string"||typeof e=="string"?(r=yr(r),e=yr(e)):(r=dr(r),e=dr(e)),u=n(r,e)}return u}}function Xr(t){return pe(function(r){
  return r=c(r,k(ye())),fr(function(e){var u=this;return t(r,function(t){return n(t,u,e)})})})}function ne(n,t){t=t===T?" ":yr(t);var r=t.length;return 2>r?r?or(t,n):t:(r=or(t,Oi(n/D(t))),Rn.test(t)?Or(M(r),0,n).join(""):r.slice(0,n))}function te(t,r,e,u){function i(){for(var r=-1,c=arguments.length,a=-1,l=u.length,s=Ku(l+c),h=this&&this!==$n&&this instanceof i?f:t;++a<l;)s[a]=u[a];for(;c--;)s[a++]=arguments[++r];return n(h,o?e:this,s)}var o=1&r,f=Vr(t);return i}function re(n){return function(t,r,e){
  e&&typeof e!="number"&&Oe(t,r,e)&&(r=e=T),t=Au(t),r===T?(r=t,t=0):r=Au(r),e=e===T?t<r?1:-1:Au(e);var u=-1;r=Ui(Oi((r-t)/(e||1)),0);for(var i=Ku(r);r--;)i[n?r:++u]=t,t+=e;return i}}function ee(n){return function(t,r){return typeof t=="string"&&typeof r=="string"||(t=Su(t),r=Su(r)),n(t,r)}}function ue(n,t,r,e,u,i,o,f,c,a){var l=8&t,s=l?o:T;o=l?T:o;var h=l?i:T;return i=l?T:i,t=(t|(l?32:64))&~(l?64:32),4&t||(t&=-4),u=[n,t,u,h,s,i,o,f,c,a],r=r.apply(T,u),Re(n)&&yo(r,u),r.placeholder=e,Ue(r,n,t)}function ie(n){
  var t=Yu[n];return function(n,r){if(n=Su(n),(r=null==r?0:Ci(Eu(r),292))&&Wi(n)){var e=(Iu(n)+"e").split("e"),e=t(e[0]+"e"+(+e[1]+r)),e=(Iu(e)+"e").split("e");return+(e[0]+"e"+(+e[1]-r))}return t(n)}}function oe(n){return function(t){var r=vo(t);return"[object Map]"==r?W(t):"[object Set]"==r?C(t):E(t,n(t))}}function fe(n,t,r,e,u,i,o,f){var c=2&t;if(!c&&typeof n!="function")throw new ti("Expected a function");var a=e?e.length:0;if(a||(t&=-97,e=u=T),o=o===T?o:Ui(Eu(o),0),f=f===T?f:Eu(f),a-=u?u.length:0,
  64&t){var l=e,s=u;e=u=T}var h=c?T:ho(n);return i=[n,t,r,e,u,l,s,i,o,f],h&&(r=i[1],n=h[1],t=r|n,e=128==n&&8==r||128==n&&256==r&&i[7].length<=h[8]||384==n&&h[7].length<=h[8]&&8==r,131>t||e)&&(1&n&&(i[2]=h[2],t|=1&r?0:4),(r=h[3])&&(e=i[3],i[3]=e?Br(e,r,h[4]):r,i[4]=e?L(i[3],"__lodash_placeholder__"):h[4]),(r=h[5])&&(e=i[5],i[5]=e?Lr(e,r,h[6]):r,i[6]=e?L(i[5],"__lodash_placeholder__"):h[6]),(r=h[7])&&(i[7]=r),128&n&&(i[8]=null==i[8]?h[8]:Ci(i[8],h[8])),null==i[9]&&(i[9]=h[9]),i[0]=h[0],i[1]=t),n=i[0],
  t=i[1],r=i[2],e=i[3],u=i[4],f=i[9]=i[9]===T?c?0:n.length:Ui(i[9]-a,0),!f&&24&t&&(t&=-25),Ue((h?co:yo)(t&&1!=t?8==t||16==t?Kr(n,t,f):32!=t&&33!=t||u.length?Jr.apply(T,i):te(n,t,r,e):Pr(n,t,r),i),n,t)}function ce(n,t,r,e){return n===T||lu(n,ei[r])&&!oi.call(e,r)?t:n}function ae(n,t,r,e,u,i){return du(n)&&du(t)&&(i.set(t,n),Yt(n,t,T,ae,i),i.delete(t)),n}function le(n){return xu(n)?T:n}function se(n,t,r,e,u,i){var o=1&r,f=n.length,c=t.length;if(f!=c&&!(o&&c>f))return false;if((c=i.get(n))&&i.get(t))return c==t;
  var c=-1,a=true,l=2&r?new Nn:T;for(i.set(n,t),i.set(t,n);++c<f;){var s=n[c],p=t[c];if(e)var _=o?e(p,s,c,t,n,i):e(s,p,c,n,t,i);if(_!==T){if(_)continue;a=false;break}if(l){if(!h(t,function(n,t){if(!O(l,t)&&(s===n||u(s,n,r,e,i)))return l.push(t)})){a=false;break}}else if(s!==p&&!u(s,p,r,e,i)){a=false;break}}return i.delete(n),i.delete(t),a}function he(n,t,r,e,u,i,o){switch(r){case"[object DataView]":if(n.byteLength!=t.byteLength||n.byteOffset!=t.byteOffset)break;n=n.buffer,t=t.buffer;case"[object ArrayBuffer]":
  if(n.byteLength!=t.byteLength||!i(new vi(n),new vi(t)))break;return true;case"[object Boolean]":case"[object Date]":case"[object Number]":return lu(+n,+t);case"[object Error]":return n.name==t.name&&n.message==t.message;case"[object RegExp]":case"[object String]":return n==t+"";case"[object Map]":var f=W;case"[object Set]":if(f||(f=U),n.size!=t.size&&!(1&e))break;return(r=o.get(n))?r==t:(e|=2,o.set(n,t),t=se(f(n),f(t),e,u,i,o),o.delete(n),t);case"[object Symbol]":if(to)return to.call(n)==to.call(t)}
  return false}function pe(n){return xo(Be(n,T,Ze),n+"")}function _e(n){return St(n,Wu,po)}function ve(n){return St(n,Bu,_o)}function ge(n){for(var t=n.name+"",r=Gi[t],e=oi.call(Gi,t)?r.length:0;e--;){var u=r[e],i=u.func;if(null==i||i==n)return u.name}return t}function de(n){return(oi.call(An,"placeholder")?An:n).placeholder}function ye(){var n=An.iteratee||Fu,n=n===Fu?qt:n;return arguments.length?n(arguments[0],arguments[1]):n}function be(n,t){var r=n.__data__,e=typeof t;return("string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t)?r[typeof t=="string"?"string":"hash"]:r.map;
  }function xe(n){for(var t=Wu(n),r=t.length;r--;){var e=t[r],u=n[e];t[r]=[e,u,u===u&&!du(u)]}return t}function je(n,t){var r=null==n?T:n[t];return Ft(r)?r:T}function we(n,t,r){t=Sr(t,n);for(var e=-1,u=t.length,i=false;++e<u;){var o=Me(t[e]);if(!(i=null!=n&&r(n,o)))break;n=n[o]}return i||++e!=u?i:(u=null==n?0:n.length,!!u&&gu(u)&&Se(o,u)&&(ff(n)||of(n)))}function me(n){var t=n.length,r=new n.constructor(t);return t&&"string"==typeof n[0]&&oi.call(n,"index")&&(r.index=n.index,r.input=n.input),r}function Ae(n){
  return typeof n.constructor!="function"||ze(n)?{}:eo(di(n))}function Ee(n,t,r){var e=n.constructor;switch(t){case"[object ArrayBuffer]":return Rr(n);case"[object Boolean]":case"[object Date]":return new e(+n);case"[object DataView]":return t=r?Rr(n.buffer):n.buffer,new n.constructor(t,n.byteOffset,n.byteLength);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":
  case"[object Uint16Array]":case"[object Uint32Array]":return zr(n,r);case"[object Map]":return new e;case"[object Number]":case"[object String]":return new e(n);case"[object RegExp]":return t=new n.constructor(n.source,_n.exec(n)),t.lastIndex=n.lastIndex,t;case"[object Set]":return new e;case"[object Symbol]":return to?Qu(to.call(n)):{}}}function ke(n){return ff(n)||of(n)||!!(ji&&n&&n[ji])}function Se(n,t){var r=typeof n;return t=null==t?9007199254740991:t,!!t&&("number"==r||"symbol"!=r&&bn.test(n))&&-1<n&&0==n%1&&n<t;
  }function Oe(n,t,r){if(!du(r))return false;var e=typeof t;return!!("number"==e?su(r)&&Se(t,r.length):"string"==e&&t in r)&&lu(r[t],n)}function Ie(n,t){if(ff(n))return false;var r=typeof n;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=n&&!wu(n))||(nn.test(n)||!X.test(n)||null!=t&&n in Qu(t))}function Re(n){var t=ge(n),r=An[t];return typeof r=="function"&&t in Un.prototype&&(n===r||(t=ho(r),!!t&&n===t[0]))}function ze(n){var t=n&&n.constructor;return n===(typeof t=="function"&&t.prototype||ei)}function We(n,t){
  return function(r){return null!=r&&(r[n]===t&&(t!==T||n in Qu(r)))}}function Be(t,r,e){return r=Ui(r===T?t.length-1:r,0),function(){for(var u=arguments,i=-1,o=Ui(u.length-r,0),f=Ku(o);++i<o;)f[i]=u[r+i];for(i=-1,o=Ku(r+1);++i<r;)o[i]=u[i];return o[r]=e(f),n(t,this,o)}}function Le(n,t){if(("constructor"!==t||"function"!=typeof n[t])&&"__proto__"!=t)return n[t]}function Ue(n,t,r){var e=t+"";t=xo;var u,i=$e;return u=(u=e.match(an))?u[1].split(ln):[],r=i(u,r),(i=r.length)&&(u=i-1,r[u]=(1<i?"& ":"")+r[u],
  r=r.join(2<i?", ":" "),e=e.replace(cn,"{\n/* [wrapped with "+r+"] */\n")),t(n,e)}function Ce(n){var t=0,r=0;return function(){var e=Di(),u=16-(e-r);if(r=e,0<u){if(800<=++t)return arguments[0]}else t=0;return n.apply(T,arguments)}}function De(n,t){var r=-1,e=n.length,u=e-1;for(t=t===T?e:t;++r<t;){var e=ir(r,u),i=n[e];n[e]=n[r],n[r]=i}return n.length=t,n}function Me(n){if(typeof n=="string"||wu(n))return n;var t=n+"";return"0"==t&&1/n==-$?"-0":t}function Te(n){if(null!=n){try{return ii.call(n)}catch(n){}
  return n+""}return""}function $e(n,t){return r(N,function(r){var e="_."+r[0];t&r[1]&&!o(n,e)&&n.push(e)}),n.sort()}function Fe(n){if(n instanceof Un)return n.clone();var t=new On(n.__wrapped__,n.__chain__);return t.__actions__=Ur(n.__actions__),t.__index__=n.__index__,t.__values__=n.__values__,t}function Ne(n,t,r){var e=null==n?0:n.length;return e?(r=null==r?0:Eu(r),0>r&&(r=Ui(e+r,0)),_(n,ye(t,3),r)):-1}function Pe(n,t,r){var e=null==n?0:n.length;if(!e)return-1;var u=e-1;return r!==T&&(u=Eu(r),u=0>r?Ui(e+u,0):Ci(u,e-1)),
  _(n,ye(t,3),u,true)}function Ze(n){return(null==n?0:n.length)?wt(n,1):[]}function qe(n){return n&&n.length?n[0]:T}function Ve(n){var t=null==n?0:n.length;return t?n[t-1]:T}function Ke(n,t){return n&&n.length&&t&&t.length?er(n,t):n}function Ge(n){return null==n?n:$i.call(n)}function He(n){if(!n||!n.length)return[];var t=0;return n=i(n,function(n){if(hu(n))return t=Ui(n.length,t),true}),A(t,function(t){return c(n,b(t))})}function Je(t,r){if(!t||!t.length)return[];var e=He(t);return null==r?e:c(e,function(t){
  return n(r,T,t)})}function Ye(n){return n=An(n),n.__chain__=true,n}function Qe(n,t){return t(n)}function Xe(){return this}function nu(n,t){return(ff(n)?r:uo)(n,ye(t,3))}function tu(n,t){return(ff(n)?e:io)(n,ye(t,3))}function ru(n,t){return(ff(n)?c:Gt)(n,ye(t,3))}function eu(n,t,r){return t=r?T:t,t=n&&null==t?n.length:t,fe(n,128,T,T,T,T,t)}function uu(n,t){var r;if(typeof t!="function")throw new ti("Expected a function");return n=Eu(n),function(){return 0<--n&&(r=t.apply(this,arguments)),1>=n&&(t=T),
  r}}function iu(n,t,r){return t=r?T:t,n=fe(n,8,T,T,T,T,T,t),n.placeholder=iu.placeholder,n}function ou(n,t,r){return t=r?T:t,n=fe(n,16,T,T,T,T,T,t),n.placeholder=ou.placeholder,n}function fu(n,t,r){function e(t){var r=c,e=a;return c=a=T,_=t,s=n.apply(e,r)}function u(n){var r=n-p;return n-=_,p===T||r>=t||0>r||g&&n>=l}function i(){var n=Go();if(u(n))return o(n);var r,e=bo;r=n-_,n=t-(n-p),r=g?Ci(n,l-r):n,h=e(i,r)}function o(n){return h=T,d&&c?e(n):(c=a=T,s)}function f(){var n=Go(),r=u(n);if(c=arguments,
  a=this,p=n,r){if(h===T)return _=n=p,h=bo(i,t),v?e(n):s;if(g)return lo(h),h=bo(i,t),e(p)}return h===T&&(h=bo(i,t)),s}var c,a,l,s,h,p,_=0,v=false,g=false,d=true;if(typeof n!="function")throw new ti("Expected a function");return t=Su(t)||0,du(r)&&(v=!!r.leading,l=(g="maxWait"in r)?Ui(Su(r.maxWait)||0,t):l,d="trailing"in r?!!r.trailing:d),f.cancel=function(){h!==T&&lo(h),_=0,c=p=a=h=T},f.flush=function(){return h===T?s:o(Go())},f}function cu(n,t){function r(){var e=arguments,u=t?t.apply(this,e):e[0],i=r.cache;
  return i.has(u)?i.get(u):(e=n.apply(this,e),r.cache=i.set(u,e)||i,e)}if(typeof n!="function"||null!=t&&typeof t!="function")throw new ti("Expected a function");return r.cache=new(cu.Cache||Fn),r}function au(n){if(typeof n!="function")throw new ti("Expected a function");return function(){var t=arguments;switch(t.length){case 0:return!n.call(this);case 1:return!n.call(this,t[0]);case 2:return!n.call(this,t[0],t[1]);case 3:return!n.call(this,t[0],t[1],t[2])}return!n.apply(this,t)}}function lu(n,t){return n===t||n!==n&&t!==t;
  }function su(n){return null!=n&&gu(n.length)&&!_u(n)}function hu(n){return yu(n)&&su(n)}function pu(n){if(!yu(n))return false;var t=Ot(n);return"[object Error]"==t||"[object DOMException]"==t||typeof n.message=="string"&&typeof n.name=="string"&&!xu(n)}function _u(n){return!!du(n)&&(n=Ot(n),"[object Function]"==n||"[object GeneratorFunction]"==n||"[object AsyncFunction]"==n||"[object Proxy]"==n)}function vu(n){return typeof n=="number"&&n==Eu(n)}function gu(n){return typeof n=="number"&&-1<n&&0==n%1&&9007199254740991>=n;
  }function du(n){var t=typeof n;return null!=n&&("object"==t||"function"==t)}function yu(n){return null!=n&&typeof n=="object"}function bu(n){return typeof n=="number"||yu(n)&&"[object Number]"==Ot(n)}function xu(n){return!(!yu(n)||"[object Object]"!=Ot(n))&&(n=di(n),null===n||(n=oi.call(n,"constructor")&&n.constructor,typeof n=="function"&&n instanceof n&&ii.call(n)==li))}function ju(n){return typeof n=="string"||!ff(n)&&yu(n)&&"[object String]"==Ot(n)}function wu(n){return typeof n=="symbol"||yu(n)&&"[object Symbol]"==Ot(n);
  }function mu(n){if(!n)return[];if(su(n))return ju(n)?M(n):Ur(n);if(wi&&n[wi]){n=n[wi]();for(var t,r=[];!(t=n.next()).done;)r.push(t.value);return r}return t=vo(n),("[object Map]"==t?W:"[object Set]"==t?U:Uu)(n)}function Au(n){return n?(n=Su(n),n===$||n===-$?1.7976931348623157e308*(0>n?-1:1):n===n?n:0):0===n?n:0}function Eu(n){n=Au(n);var t=n%1;return n===n?t?n-t:n:0}function ku(n){return n?pt(Eu(n),0,4294967295):0}function Su(n){if(typeof n=="number")return n;if(wu(n))return F;if(du(n)&&(n=typeof n.valueOf=="function"?n.valueOf():n,
  n=du(n)?n+"":n),typeof n!="string")return 0===n?n:+n;n=n.replace(un,"");var t=gn.test(n);return t||yn.test(n)?Dn(n.slice(2),t?2:8):vn.test(n)?F:+n}function Ou(n){return Cr(n,Bu(n))}function Iu(n){return null==n?"":yr(n)}function Ru(n,t,r){return n=null==n?T:kt(n,t),n===T?r:n}function zu(n,t){return null!=n&&we(n,t,zt)}function Wu(n){return su(n)?qn(n):Vt(n)}function Bu(n){if(su(n))n=qn(n,true);else if(du(n)){var t,r=ze(n),e=[];for(t in n)("constructor"!=t||!r&&oi.call(n,t))&&e.push(t);n=e}else{if(t=[],
  null!=n)for(r in Qu(n))t.push(r);n=t}return n}function Lu(n,t){if(null==n)return{};var r=c(ve(n),function(n){return[n]});return t=ye(t),tr(n,r,function(n,r){return t(n,r[0])})}function Uu(n){return null==n?[]:S(n,Wu(n))}function Cu(n){return $f(Iu(n).toLowerCase())}function Du(n){return(n=Iu(n))&&n.replace(xn,Xn).replace(Sn,"")}function Mu(n,t,r){return n=Iu(n),t=r?T:t,t===T?zn.test(n)?n.match(In)||[]:n.match(sn)||[]:n.match(t)||[]}function Tu(n){return function(){return n}}function $u(n){return n;
  }function Fu(n){return qt(typeof n=="function"?n:_t(n,1))}function Nu(n,t,e){var u=Wu(t),i=Et(t,u);null!=e||du(t)&&(i.length||!u.length)||(e=t,t=n,n=this,i=Et(t,Wu(t)));var o=!(du(e)&&"chain"in e&&!e.chain),f=_u(n);return r(i,function(r){var e=t[r];n[r]=e,f&&(n.prototype[r]=function(){var t=this.__chain__;if(o||t){var r=n(this.__wrapped__);return(r.__actions__=Ur(this.__actions__)).push({func:e,args:arguments,thisArg:n}),r.__chain__=t,r}return e.apply(n,a([this.value()],arguments))})}),n}function Pu(){}
  function Zu(n){return Ie(n)?b(Me(n)):rr(n)}function qu(){return[]}function Vu(){return false}mn=null==mn?$n:rt.defaults($n.Object(),mn,rt.pick($n,Wn));var Ku=mn.Array,Gu=mn.Date,Hu=mn.Error,Ju=mn.Function,Yu=mn.Math,Qu=mn.Object,Xu=mn.RegExp,ni=mn.String,ti=mn.TypeError,ri=Ku.prototype,ei=Qu.prototype,ui=mn["__core-js_shared__"],ii=Ju.prototype.toString,oi=ei.hasOwnProperty,fi=0,ci=function(){var n=/[^.]+$/.exec(ui&&ui.keys&&ui.keys.IE_PROTO||"");return n?"Symbol(src)_1."+n:""}(),ai=ei.toString,li=ii.call(Qu),si=$n._,hi=Xu("^"+ii.call(oi).replace(rn,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),pi=Pn?mn.Buffer:T,_i=mn.Symbol,vi=mn.Uint8Array,gi=pi?pi.g:T,di=B(Qu.getPrototypeOf,Qu),yi=Qu.create,bi=ei.propertyIsEnumerable,xi=ri.splice,ji=_i?_i.isConcatSpreadable:T,wi=_i?_i.iterator:T,mi=_i?_i.toStringTag:T,Ai=function(){
  try{var n=je(Qu,"defineProperty");return n({},"",{}),n}catch(n){}}(),Ei=mn.clearTimeout!==$n.clearTimeout&&mn.clearTimeout,ki=Gu&&Gu.now!==$n.Date.now&&Gu.now,Si=mn.setTimeout!==$n.setTimeout&&mn.setTimeout,Oi=Yu.ceil,Ii=Yu.floor,Ri=Qu.getOwnPropertySymbols,zi=pi?pi.isBuffer:T,Wi=mn.isFinite,Bi=ri.join,Li=B(Qu.keys,Qu),Ui=Yu.max,Ci=Yu.min,Di=Gu.now,Mi=mn.parseInt,Ti=Yu.random,$i=ri.reverse,Fi=je(mn,"DataView"),Ni=je(mn,"Map"),Pi=je(mn,"Promise"),Zi=je(mn,"Set"),qi=je(mn,"WeakMap"),Vi=je(Qu,"create"),Ki=qi&&new qi,Gi={},Hi=Te(Fi),Ji=Te(Ni),Yi=Te(Pi),Qi=Te(Zi),Xi=Te(qi),no=_i?_i.prototype:T,to=no?no.valueOf:T,ro=no?no.toString:T,eo=function(){
  function n(){}return function(t){return du(t)?yi?yi(t):(n.prototype=t,t=new n,n.prototype=T,t):{}}}();An.templateSettings={escape:J,evaluate:Y,interpolate:Q,variable:"",imports:{_:An}},An.prototype=En.prototype,An.prototype.constructor=An,On.prototype=eo(En.prototype),On.prototype.constructor=On,Un.prototype=eo(En.prototype),Un.prototype.constructor=Un,Mn.prototype.clear=function(){this.__data__=Vi?Vi(null):{},this.size=0},Mn.prototype.delete=function(n){return n=this.has(n)&&delete this.__data__[n],
  this.size-=n?1:0,n},Mn.prototype.get=function(n){var t=this.__data__;return Vi?(n=t[n],"__lodash_hash_undefined__"===n?T:n):oi.call(t,n)?t[n]:T},Mn.prototype.has=function(n){var t=this.__data__;return Vi?t[n]!==T:oi.call(t,n)},Mn.prototype.set=function(n,t){var r=this.__data__;return this.size+=this.has(n)?0:1,r[n]=Vi&&t===T?"__lodash_hash_undefined__":t,this},Tn.prototype.clear=function(){this.__data__=[],this.size=0},Tn.prototype.delete=function(n){var t=this.__data__;return n=ft(t,n),!(0>n)&&(n==t.length-1?t.pop():xi.call(t,n,1),
  --this.size,true)},Tn.prototype.get=function(n){var t=this.__data__;return n=ft(t,n),0>n?T:t[n][1]},Tn.prototype.has=function(n){return-1<ft(this.__data__,n)},Tn.prototype.set=function(n,t){var r=this.__data__,e=ft(r,n);return 0>e?(++this.size,r.push([n,t])):r[e][1]=t,this},Fn.prototype.clear=function(){this.size=0,this.__data__={hash:new Mn,map:new(Ni||Tn),string:new Mn}},Fn.prototype.delete=function(n){return n=be(this,n).delete(n),this.size-=n?1:0,n},Fn.prototype.get=function(n){return be(this,n).get(n);
  },Fn.prototype.has=function(n){return be(this,n).has(n)},Fn.prototype.set=function(n,t){var r=be(this,n),e=r.size;return r.set(n,t),this.size+=r.size==e?0:1,this},Nn.prototype.add=Nn.prototype.push=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this},Nn.prototype.has=function(n){return this.__data__.has(n)},Zn.prototype.clear=function(){this.__data__=new Tn,this.size=0},Zn.prototype.delete=function(n){var t=this.__data__;return n=t.delete(n),this.size=t.size,n},Zn.prototype.get=function(n){
  return this.__data__.get(n)},Zn.prototype.has=function(n){return this.__data__.has(n)},Zn.prototype.set=function(n,t){var r=this.__data__;if(r instanceof Tn){var e=r.__data__;if(!Ni||199>e.length)return e.push([n,t]),this.size=++r.size,this;r=this.__data__=new Fn(e)}return r.set(n,t),this.size=r.size,this};var uo=Fr(mt),io=Fr(At,true),oo=Nr(),fo=Nr(true),co=Ki?function(n,t){return Ki.set(n,t),n}:$u,ao=Ai?function(n,t){return Ai(n,"toString",{configurable:true,enumerable:false,value:Tu(t),writable:true})}:$u,lo=Ei||function(n){
  return $n.clearTimeout(n)},so=Zi&&1/U(new Zi([,-0]))[1]==$?function(n){return new Zi(n)}:Pu,ho=Ki?function(n){return Ki.get(n)}:Pu,po=Ri?function(n){return null==n?[]:(n=Qu(n),i(Ri(n),function(t){return bi.call(n,t)}))}:qu,_o=Ri?function(n){for(var t=[];n;)a(t,po(n)),n=di(n);return t}:qu,vo=Ot;(Fi&&"[object DataView]"!=vo(new Fi(new ArrayBuffer(1)))||Ni&&"[object Map]"!=vo(new Ni)||Pi&&"[object Promise]"!=vo(Pi.resolve())||Zi&&"[object Set]"!=vo(new Zi)||qi&&"[object WeakMap]"!=vo(new qi))&&(vo=function(n){
  var t=Ot(n);if(n=(n="[object Object]"==t?n.constructor:T)?Te(n):"")switch(n){case Hi:return"[object DataView]";case Ji:return"[object Map]";case Yi:return"[object Promise]";case Qi:return"[object Set]";case Xi:return"[object WeakMap]"}return t});var go=ui?_u:Vu,yo=Ce(co),bo=Si||function(n,t){return $n.setTimeout(n,t)},xo=Ce(ao),jo=function(n){n=cu(n,function(n){return 500===t.size&&t.clear(),n});var t=n.cache;return n}(function(n){var t=[];return 46===n.charCodeAt(0)&&t.push(""),n.replace(tn,function(n,r,e,u){
  t.push(e?u.replace(hn,"$1"):r||n)}),t}),wo=fr(function(n,t){return hu(n)?yt(n,wt(t,1,hu,true)):[]}),mo=fr(function(n,t){var r=Ve(t);return hu(r)&&(r=T),hu(n)?yt(n,wt(t,1,hu,true),ye(r,2)):[]}),Ao=fr(function(n,t){var r=Ve(t);return hu(r)&&(r=T),hu(n)?yt(n,wt(t,1,hu,true),T,r):[]}),Eo=fr(function(n){var t=c(n,Er);return t.length&&t[0]===n[0]?Wt(t):[]}),ko=fr(function(n){var t=Ve(n),r=c(n,Er);return t===Ve(r)?t=T:r.pop(),r.length&&r[0]===n[0]?Wt(r,ye(t,2)):[]}),So=fr(function(n){var t=Ve(n),r=c(n,Er);return(t=typeof t=="function"?t:T)&&r.pop(),
  r.length&&r[0]===n[0]?Wt(r,T,t):[]}),Oo=fr(Ke),Io=pe(function(n,t){var r=null==n?0:n.length,e=ht(n,t);return ur(n,c(t,function(n){return Se(n,r)?+n:n}).sort(Wr)),e}),Ro=fr(function(n){return br(wt(n,1,hu,true))}),zo=fr(function(n){var t=Ve(n);return hu(t)&&(t=T),br(wt(n,1,hu,true),ye(t,2))}),Wo=fr(function(n){var t=Ve(n),t=typeof t=="function"?t:T;return br(wt(n,1,hu,true),T,t)}),Bo=fr(function(n,t){return hu(n)?yt(n,t):[]}),Lo=fr(function(n){return mr(i(n,hu))}),Uo=fr(function(n){var t=Ve(n);return hu(t)&&(t=T),
  mr(i(n,hu),ye(t,2))}),Co=fr(function(n){var t=Ve(n),t=typeof t=="function"?t:T;return mr(i(n,hu),T,t)}),Do=fr(He),Mo=fr(function(n){var t=n.length,t=1<t?n[t-1]:T,t=typeof t=="function"?(n.pop(),t):T;return Je(n,t)}),To=pe(function(n){function t(t){return ht(t,n)}var r=n.length,e=r?n[0]:0,u=this.__wrapped__;return!(1<r||this.__actions__.length)&&u instanceof Un&&Se(e)?(u=u.slice(e,+e+(r?1:0)),u.__actions__.push({func:Qe,args:[t],thisArg:T}),new On(u,this.__chain__).thru(function(n){return r&&!n.length&&n.push(T),
  n})):this.thru(t)}),$o=Tr(function(n,t,r){oi.call(n,r)?++n[r]:st(n,r,1)}),Fo=Gr(Ne),No=Gr(Pe),Po=Tr(function(n,t,r){oi.call(n,r)?n[r].push(t):st(n,r,[t])}),Zo=fr(function(t,r,e){var u=-1,i=typeof r=="function",o=su(t)?Ku(t.length):[];return uo(t,function(t){o[++u]=i?n(r,t,e):Lt(t,r,e)}),o}),qo=Tr(function(n,t,r){st(n,r,t)}),Vo=Tr(function(n,t,r){n[r?0:1].push(t)},function(){return[[],[]]}),Ko=fr(function(n,t){if(null==n)return[];var r=t.length;return 1<r&&Oe(n,t[0],t[1])?t=[]:2<r&&Oe(t[0],t[1],t[2])&&(t=[t[0]]),
  Xt(n,wt(t,1),[])}),Go=ki||function(){return $n.Date.now()},Ho=fr(function(n,t,r){var e=1;if(r.length)var u=L(r,de(Ho)),e=32|e;return fe(n,e,t,r,u)}),Jo=fr(function(n,t,r){var e=3;if(r.length)var u=L(r,de(Jo)),e=32|e;return fe(t,e,n,r,u)}),Yo=fr(function(n,t){return dt(n,1,t)}),Qo=fr(function(n,t,r){return dt(n,Su(t)||0,r)});cu.Cache=Fn;var Xo=fr(function(t,r){r=1==r.length&&ff(r[0])?c(r[0],k(ye())):c(wt(r,1),k(ye()));var e=r.length;return fr(function(u){for(var i=-1,o=Ci(u.length,e);++i<o;)u[i]=r[i].call(this,u[i]);
  return n(t,this,u)})}),nf=fr(function(n,t){return fe(n,32,T,t,L(t,de(nf)))}),tf=fr(function(n,t){return fe(n,64,T,t,L(t,de(tf)))}),rf=pe(function(n,t){return fe(n,256,T,T,T,t)}),ef=ee(It),uf=ee(function(n,t){return n>=t}),of=Ut(function(){return arguments}())?Ut:function(n){return yu(n)&&oi.call(n,"callee")&&!bi.call(n,"callee")},ff=Ku.isArray,cf=Vn?k(Vn):Ct,af=zi||Vu,lf=Kn?k(Kn):Dt,sf=Gn?k(Gn):Tt,hf=Hn?k(Hn):Nt,pf=Jn?k(Jn):Pt,_f=Yn?k(Yn):Zt,vf=ee(Kt),gf=ee(function(n,t){return n<=t}),df=$r(function(n,t){
  if(ze(t)||su(t))Cr(t,Wu(t),n);else for(var r in t)oi.call(t,r)&&ot(n,r,t[r])}),yf=$r(function(n,t){Cr(t,Bu(t),n)}),bf=$r(function(n,t,r,e){Cr(t,Bu(t),n,e)}),xf=$r(function(n,t,r,e){Cr(t,Wu(t),n,e)}),jf=pe(ht),wf=fr(function(n,t){n=Qu(n);var r=-1,e=t.length,u=2<e?t[2]:T;for(u&&Oe(t[0],t[1],u)&&(e=1);++r<e;)for(var u=t[r],i=Bu(u),o=-1,f=i.length;++o<f;){var c=i[o],a=n[c];(a===T||lu(a,ei[c])&&!oi.call(n,c))&&(n[c]=u[c])}return n}),mf=fr(function(t){return t.push(T,ae),n(Of,T,t)}),Af=Yr(function(n,t,r){
  null!=t&&typeof t.toString!="function"&&(t=ai.call(t)),n[t]=r},Tu($u)),Ef=Yr(function(n,t,r){null!=t&&typeof t.toString!="function"&&(t=ai.call(t)),oi.call(n,t)?n[t].push(r):n[t]=[r]},ye),kf=fr(Lt),Sf=$r(function(n,t,r){Yt(n,t,r)}),Of=$r(function(n,t,r,e){Yt(n,t,r,e)}),If=pe(function(n,t){var r={};if(null==n)return r;var e=false;t=c(t,function(t){return t=Sr(t,n),e||(e=1<t.length),t}),Cr(n,ve(n),r),e&&(r=_t(r,7,le));for(var u=t.length;u--;)xr(r,t[u]);return r}),Rf=pe(function(n,t){return null==n?{}:nr(n,t);
  }),zf=oe(Wu),Wf=oe(Bu),Bf=qr(function(n,t,r){return t=t.toLowerCase(),n+(r?Cu(t):t)}),Lf=qr(function(n,t,r){return n+(r?"-":"")+t.toLowerCase()}),Uf=qr(function(n,t,r){return n+(r?" ":"")+t.toLowerCase()}),Cf=Zr("toLowerCase"),Df=qr(function(n,t,r){return n+(r?"_":"")+t.toLowerCase()}),Mf=qr(function(n,t,r){return n+(r?" ":"")+$f(t)}),Tf=qr(function(n,t,r){return n+(r?" ":"")+t.toUpperCase()}),$f=Zr("toUpperCase"),Ff=fr(function(t,r){try{return n(t,T,r)}catch(n){return pu(n)?n:new Hu(n)}}),Nf=pe(function(n,t){
  return r(t,function(t){t=Me(t),st(n,t,Ho(n[t],n))}),n}),Pf=Hr(),Zf=Hr(true),qf=fr(function(n,t){return function(r){return Lt(r,n,t)}}),Vf=fr(function(n,t){return function(r){return Lt(n,r,t)}}),Kf=Xr(c),Gf=Xr(u),Hf=Xr(h),Jf=re(),Yf=re(true),Qf=Qr(function(n,t){return n+t},0),Xf=ie("ceil"),nc=Qr(function(n,t){return n/t},1),tc=ie("floor"),rc=Qr(function(n,t){return n*t},1),ec=ie("round"),uc=Qr(function(n,t){return n-t},0);return An.after=function(n,t){if(typeof t!="function")throw new ti("Expected a function");
  return n=Eu(n),function(){if(1>--n)return t.apply(this,arguments)}},An.ary=eu,An.assign=df,An.assignIn=yf,An.assignInWith=bf,An.assignWith=xf,An.at=jf,An.before=uu,An.bind=Ho,An.bindAll=Nf,An.bindKey=Jo,An.castArray=function(){if(!arguments.length)return[];var n=arguments[0];return ff(n)?n:[n]},An.chain=Ye,An.chunk=function(n,t,r){if(t=(r?Oe(n,t,r):t===T)?1:Ui(Eu(t),0),r=null==n?0:n.length,!r||1>t)return[];for(var e=0,u=0,i=Ku(Oi(r/t));e<r;)i[u++]=hr(n,e,e+=t);return i},An.compact=function(n){for(var t=-1,r=null==n?0:n.length,e=0,u=[];++t<r;){
  var i=n[t];i&&(u[e++]=i)}return u},An.concat=function(){var n=arguments.length;if(!n)return[];for(var t=Ku(n-1),r=arguments[0];n--;)t[n-1]=arguments[n];return a(ff(r)?Ur(r):[r],wt(t,1))},An.cond=function(t){var r=null==t?0:t.length,e=ye();return t=r?c(t,function(n){if("function"!=typeof n[1])throw new ti("Expected a function");return[e(n[0]),n[1]]}):[],fr(function(e){for(var u=-1;++u<r;){var i=t[u];if(n(i[0],this,e))return n(i[1],this,e)}})},An.conforms=function(n){return vt(_t(n,1))},An.constant=Tu,
  An.countBy=$o,An.create=function(n,t){var r=eo(n);return null==t?r:at(r,t)},An.curry=iu,An.curryRight=ou,An.debounce=fu,An.defaults=wf,An.defaultsDeep=mf,An.defer=Yo,An.delay=Qo,An.difference=wo,An.differenceBy=mo,An.differenceWith=Ao,An.drop=function(n,t,r){var e=null==n?0:n.length;return e?(t=r||t===T?1:Eu(t),hr(n,0>t?0:t,e)):[]},An.dropRight=function(n,t,r){var e=null==n?0:n.length;return e?(t=r||t===T?1:Eu(t),t=e-t,hr(n,0,0>t?0:t)):[]},An.dropRightWhile=function(n,t){return n&&n.length?jr(n,ye(t,3),true,true):[];
  },An.dropWhile=function(n,t){return n&&n.length?jr(n,ye(t,3),true):[]},An.fill=function(n,t,r,e){var u=null==n?0:n.length;if(!u)return[];for(r&&typeof r!="number"&&Oe(n,t,r)&&(r=0,e=u),u=n.length,r=Eu(r),0>r&&(r=-r>u?0:u+r),e=e===T||e>u?u:Eu(e),0>e&&(e+=u),e=r>e?0:ku(e);r<e;)n[r++]=t;return n},An.filter=function(n,t){return(ff(n)?i:jt)(n,ye(t,3))},An.flatMap=function(n,t){return wt(ru(n,t),1)},An.flatMapDeep=function(n,t){return wt(ru(n,t),$)},An.flatMapDepth=function(n,t,r){return r=r===T?1:Eu(r),
  wt(ru(n,t),r)},An.flatten=Ze,An.flattenDeep=function(n){return(null==n?0:n.length)?wt(n,$):[]},An.flattenDepth=function(n,t){return null!=n&&n.length?(t=t===T?1:Eu(t),wt(n,t)):[]},An.flip=function(n){return fe(n,512)},An.flow=Pf,An.flowRight=Zf,An.fromPairs=function(n){for(var t=-1,r=null==n?0:n.length,e={};++t<r;){var u=n[t];e[u[0]]=u[1]}return e},An.functions=function(n){return null==n?[]:Et(n,Wu(n))},An.functionsIn=function(n){return null==n?[]:Et(n,Bu(n))},An.groupBy=Po,An.initial=function(n){
  return(null==n?0:n.length)?hr(n,0,-1):[]},An.intersection=Eo,An.intersectionBy=ko,An.intersectionWith=So,An.invert=Af,An.invertBy=Ef,An.invokeMap=Zo,An.iteratee=Fu,An.keyBy=qo,An.keys=Wu,An.keysIn=Bu,An.map=ru,An.mapKeys=function(n,t){var r={};return t=ye(t,3),mt(n,function(n,e,u){st(r,t(n,e,u),n)}),r},An.mapValues=function(n,t){var r={};return t=ye(t,3),mt(n,function(n,e,u){st(r,e,t(n,e,u))}),r},An.matches=function(n){return Ht(_t(n,1))},An.matchesProperty=function(n,t){return Jt(n,_t(t,1))},An.memoize=cu,
  An.merge=Sf,An.mergeWith=Of,An.method=qf,An.methodOf=Vf,An.mixin=Nu,An.negate=au,An.nthArg=function(n){return n=Eu(n),fr(function(t){return Qt(t,n)})},An.omit=If,An.omitBy=function(n,t){return Lu(n,au(ye(t)))},An.once=function(n){return uu(2,n)},An.orderBy=function(n,t,r,e){return null==n?[]:(ff(t)||(t=null==t?[]:[t]),r=e?T:r,ff(r)||(r=null==r?[]:[r]),Xt(n,t,r))},An.over=Kf,An.overArgs=Xo,An.overEvery=Gf,An.overSome=Hf,An.partial=nf,An.partialRight=tf,An.partition=Vo,An.pick=Rf,An.pickBy=Lu,An.property=Zu,
  An.propertyOf=function(n){return function(t){return null==n?T:kt(n,t)}},An.pull=Oo,An.pullAll=Ke,An.pullAllBy=function(n,t,r){return n&&n.length&&t&&t.length?er(n,t,ye(r,2)):n},An.pullAllWith=function(n,t,r){return n&&n.length&&t&&t.length?er(n,t,T,r):n},An.pullAt=Io,An.range=Jf,An.rangeRight=Yf,An.rearg=rf,An.reject=function(n,t){return(ff(n)?i:jt)(n,au(ye(t,3)))},An.remove=function(n,t){var r=[];if(!n||!n.length)return r;var e=-1,u=[],i=n.length;for(t=ye(t,3);++e<i;){var o=n[e];t(o,e,n)&&(r.push(o),
  u.push(e))}return ur(n,u),r},An.rest=function(n,t){if(typeof n!="function")throw new ti("Expected a function");return t=t===T?t:Eu(t),fr(n,t)},An.reverse=Ge,An.sampleSize=function(n,t,r){return t=(r?Oe(n,t,r):t===T)?1:Eu(t),(ff(n)?et:ar)(n,t)},An.set=function(n,t,r){return null==n?n:lr(n,t,r)},An.setWith=function(n,t,r,e){return e=typeof e=="function"?e:T,null==n?n:lr(n,t,r,e)},An.shuffle=function(n){return(ff(n)?ut:sr)(n)},An.slice=function(n,t,r){var e=null==n?0:n.length;return e?(r&&typeof r!="number"&&Oe(n,t,r)?(t=0,
  r=e):(t=null==t?0:Eu(t),r=r===T?e:Eu(r)),hr(n,t,r)):[]},An.sortBy=Ko,An.sortedUniq=function(n){return n&&n.length?gr(n):[]},An.sortedUniqBy=function(n,t){return n&&n.length?gr(n,ye(t,2)):[]},An.split=function(n,t,r){return r&&typeof r!="number"&&Oe(n,t,r)&&(t=r=T),r=r===T?4294967295:r>>>0,r?(n=Iu(n))&&(typeof t=="string"||null!=t&&!hf(t))&&(t=yr(t),!t&&Rn.test(n))?Or(M(n),0,r):n.split(t,r):[]},An.spread=function(t,r){if(typeof t!="function")throw new ti("Expected a function");return r=null==r?0:Ui(Eu(r),0),
  fr(function(e){var u=e[r];return e=Or(e,0,r),u&&a(e,u),n(t,this,e)})},An.tail=function(n){var t=null==n?0:n.length;return t?hr(n,1,t):[]},An.take=function(n,t,r){return n&&n.length?(t=r||t===T?1:Eu(t),hr(n,0,0>t?0:t)):[]},An.takeRight=function(n,t,r){var e=null==n?0:n.length;return e?(t=r||t===T?1:Eu(t),t=e-t,hr(n,0>t?0:t,e)):[]},An.takeRightWhile=function(n,t){return n&&n.length?jr(n,ye(t,3),false,true):[]},An.takeWhile=function(n,t){return n&&n.length?jr(n,ye(t,3)):[]},An.tap=function(n,t){return t(n),
  n},An.throttle=function(n,t,r){var e=true,u=true;if(typeof n!="function")throw new ti("Expected a function");return du(r)&&(e="leading"in r?!!r.leading:e,u="trailing"in r?!!r.trailing:u),fu(n,t,{leading:e,maxWait:t,trailing:u})},An.thru=Qe,An.toArray=mu,An.toPairs=zf,An.toPairsIn=Wf,An.toPath=function(n){return ff(n)?c(n,Me):wu(n)?[n]:Ur(jo(Iu(n)))},An.toPlainObject=Ou,An.transform=function(n,t,e){var u=ff(n),i=u||af(n)||_f(n);if(t=ye(t,4),null==e){var o=n&&n.constructor;e=i?u?new o:[]:du(n)&&_u(o)?eo(di(n)):{};
  }return(i?r:mt)(n,function(n,r,u){return t(e,n,r,u)}),e},An.unary=function(n){return eu(n,1)},An.union=Ro,An.unionBy=zo,An.unionWith=Wo,An.uniq=function(n){return n&&n.length?br(n):[]},An.uniqBy=function(n,t){return n&&n.length?br(n,ye(t,2)):[]},An.uniqWith=function(n,t){return t=typeof t=="function"?t:T,n&&n.length?br(n,T,t):[]},An.unset=function(n,t){return null==n||xr(n,t)},An.unzip=He,An.unzipWith=Je,An.update=function(n,t,r){return null==n?n:lr(n,t,kr(r)(kt(n,t)),void 0)},An.updateWith=function(n,t,r,e){
  return e=typeof e=="function"?e:T,null!=n&&(n=lr(n,t,kr(r)(kt(n,t)),e)),n},An.values=Uu,An.valuesIn=function(n){return null==n?[]:S(n,Bu(n))},An.without=Bo,An.words=Mu,An.wrap=function(n,t){return nf(kr(t),n)},An.xor=Lo,An.xorBy=Uo,An.xorWith=Co,An.zip=Do,An.zipObject=function(n,t){return Ar(n||[],t||[],ot)},An.zipObjectDeep=function(n,t){return Ar(n||[],t||[],lr)},An.zipWith=Mo,An.entries=zf,An.entriesIn=Wf,An.extend=yf,An.extendWith=bf,Nu(An,An),An.add=Qf,An.attempt=Ff,An.camelCase=Bf,An.capitalize=Cu,
  An.ceil=Xf,An.clamp=function(n,t,r){return r===T&&(r=t,t=T),r!==T&&(r=Su(r),r=r===r?r:0),t!==T&&(t=Su(t),t=t===t?t:0),pt(Su(n),t,r)},An.clone=function(n){return _t(n,4)},An.cloneDeep=function(n){return _t(n,5)},An.cloneDeepWith=function(n,t){return t=typeof t=="function"?t:T,_t(n,5,t)},An.cloneWith=function(n,t){return t=typeof t=="function"?t:T,_t(n,4,t)},An.conformsTo=function(n,t){return null==t||gt(n,t,Wu(t))},An.deburr=Du,An.defaultTo=function(n,t){return null==n||n!==n?t:n},An.divide=nc,An.endsWith=function(n,t,r){
  n=Iu(n),t=yr(t);var e=n.length,e=r=r===T?e:pt(Eu(r),0,e);return r-=t.length,0<=r&&n.slice(r,e)==t},An.eq=lu,An.escape=function(n){return(n=Iu(n))&&H.test(n)?n.replace(K,nt):n},An.escapeRegExp=function(n){return(n=Iu(n))&&en.test(n)?n.replace(rn,"\\$&"):n},An.every=function(n,t,r){var e=ff(n)?u:bt;return r&&Oe(n,t,r)&&(t=T),e(n,ye(t,3))},An.find=Fo,An.findIndex=Ne,An.findKey=function(n,t){return p(n,ye(t,3),mt)},An.findLast=No,An.findLastIndex=Pe,An.findLastKey=function(n,t){return p(n,ye(t,3),At);
  },An.floor=tc,An.forEach=nu,An.forEachRight=tu,An.forIn=function(n,t){return null==n?n:oo(n,ye(t,3),Bu)},An.forInRight=function(n,t){return null==n?n:fo(n,ye(t,3),Bu)},An.forOwn=function(n,t){return n&&mt(n,ye(t,3))},An.forOwnRight=function(n,t){return n&&At(n,ye(t,3))},An.get=Ru,An.gt=ef,An.gte=uf,An.has=function(n,t){return null!=n&&we(n,t,Rt)},An.hasIn=zu,An.head=qe,An.identity=$u,An.includes=function(n,t,r,e){return n=su(n)?n:Uu(n),r=r&&!e?Eu(r):0,e=n.length,0>r&&(r=Ui(e+r,0)),ju(n)?r<=e&&-1<n.indexOf(t,r):!!e&&-1<v(n,t,r);
  },An.indexOf=function(n,t,r){var e=null==n?0:n.length;return e?(r=null==r?0:Eu(r),0>r&&(r=Ui(e+r,0)),v(n,t,r)):-1},An.inRange=function(n,t,r){return t=Au(t),r===T?(r=t,t=0):r=Au(r),n=Su(n),n>=Ci(t,r)&&n<Ui(t,r)},An.invoke=kf,An.isArguments=of,An.isArray=ff,An.isArrayBuffer=cf,An.isArrayLike=su,An.isArrayLikeObject=hu,An.isBoolean=function(n){return true===n||false===n||yu(n)&&"[object Boolean]"==Ot(n)},An.isBuffer=af,An.isDate=lf,An.isElement=function(n){return yu(n)&&1===n.nodeType&&!xu(n)},An.isEmpty=function(n){
  if(null==n)return true;if(su(n)&&(ff(n)||typeof n=="string"||typeof n.splice=="function"||af(n)||_f(n)||of(n)))return!n.length;var t=vo(n);if("[object Map]"==t||"[object Set]"==t)return!n.size;if(ze(n))return!Vt(n).length;for(var r in n)if(oi.call(n,r))return false;return true},An.isEqual=function(n,t){return Mt(n,t)},An.isEqualWith=function(n,t,r){var e=(r=typeof r=="function"?r:T)?r(n,t):T;return e===T?Mt(n,t,T,r):!!e},An.isError=pu,An.isFinite=function(n){return typeof n=="number"&&Wi(n)},An.isFunction=_u,
  An.isInteger=vu,An.isLength=gu,An.isMap=sf,An.isMatch=function(n,t){return n===t||$t(n,t,xe(t))},An.isMatchWith=function(n,t,r){return r=typeof r=="function"?r:T,$t(n,t,xe(t),r)},An.isNaN=function(n){return bu(n)&&n!=+n},An.isNative=function(n){if(go(n))throw new Hu("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Ft(n)},An.isNil=function(n){return null==n},An.isNull=function(n){return null===n},An.isNumber=bu,An.isObject=du,An.isObjectLike=yu,An.isPlainObject=xu,An.isRegExp=hf,
  An.isSafeInteger=function(n){return vu(n)&&-9007199254740991<=n&&9007199254740991>=n},An.isSet=pf,An.isString=ju,An.isSymbol=wu,An.isTypedArray=_f,An.isUndefined=function(n){return n===T},An.isWeakMap=function(n){return yu(n)&&"[object WeakMap]"==vo(n)},An.isWeakSet=function(n){return yu(n)&&"[object WeakSet]"==Ot(n)},An.join=function(n,t){return null==n?"":Bi.call(n,t)},An.kebabCase=Lf,An.last=Ve,An.lastIndexOf=function(n,t,r){var e=null==n?0:n.length;if(!e)return-1;var u=e;if(r!==T&&(u=Eu(r),u=0>u?Ui(e+u,0):Ci(u,e-1)),
  t===t){for(r=u+1;r--&&n[r]!==t;);n=r}else n=_(n,d,u,true);return n},An.lowerCase=Uf,An.lowerFirst=Cf,An.lt=vf,An.lte=gf,An.max=function(n){return n&&n.length?xt(n,$u,It):T},An.maxBy=function(n,t){return n&&n.length?xt(n,ye(t,2),It):T},An.mean=function(n){return y(n,$u)},An.meanBy=function(n,t){return y(n,ye(t,2))},An.min=function(n){return n&&n.length?xt(n,$u,Kt):T},An.minBy=function(n,t){return n&&n.length?xt(n,ye(t,2),Kt):T},An.stubArray=qu,An.stubFalse=Vu,An.stubObject=function(){return{}},An.stubString=function(){
  return""},An.stubTrue=function(){return true},An.multiply=rc,An.nth=function(n,t){return n&&n.length?Qt(n,Eu(t)):T},An.noConflict=function(){return $n._===this&&($n._=si),this},An.noop=Pu,An.now=Go,An.pad=function(n,t,r){n=Iu(n);var e=(t=Eu(t))?D(n):0;return!t||e>=t?n:(t=(t-e)/2,ne(Ii(t),r)+n+ne(Oi(t),r))},An.padEnd=function(n,t,r){n=Iu(n);var e=(t=Eu(t))?D(n):0;return t&&e<t?n+ne(t-e,r):n},An.padStart=function(n,t,r){n=Iu(n);var e=(t=Eu(t))?D(n):0;return t&&e<t?ne(t-e,r)+n:n},An.parseInt=function(n,t,r){
  return r||null==t?t=0:t&&(t=+t),Mi(Iu(n).replace(on,""),t||0)},An.random=function(n,t,r){if(r&&typeof r!="boolean"&&Oe(n,t,r)&&(t=r=T),r===T&&(typeof t=="boolean"?(r=t,t=T):typeof n=="boolean"&&(r=n,n=T)),n===T&&t===T?(n=0,t=1):(n=Au(n),t===T?(t=n,n=0):t=Au(t)),n>t){var e=n;n=t,t=e}return r||n%1||t%1?(r=Ti(),Ci(n+r*(t-n+Cn("1e-"+((r+"").length-1))),t)):ir(n,t)},An.reduce=function(n,t,r){var e=ff(n)?l:j,u=3>arguments.length;return e(n,ye(t,4),r,u,uo)},An.reduceRight=function(n,t,r){var e=ff(n)?s:j,u=3>arguments.length;
  return e(n,ye(t,4),r,u,io)},An.repeat=function(n,t,r){return t=(r?Oe(n,t,r):t===T)?1:Eu(t),or(Iu(n),t)},An.replace=function(){var n=arguments,t=Iu(n[0]);return 3>n.length?t:t.replace(n[1],n[2])},An.result=function(n,t,r){t=Sr(t,n);var e=-1,u=t.length;for(u||(u=1,n=T);++e<u;){var i=null==n?T:n[Me(t[e])];i===T&&(e=u,i=r),n=_u(i)?i.call(n):i}return n},An.round=ec,An.runInContext=x,An.sample=function(n){return(ff(n)?Qn:cr)(n)},An.size=function(n){if(null==n)return 0;if(su(n))return ju(n)?D(n):n.length;
  var t=vo(n);return"[object Map]"==t||"[object Set]"==t?n.size:Vt(n).length},An.snakeCase=Df,An.some=function(n,t,r){var e=ff(n)?h:pr;return r&&Oe(n,t,r)&&(t=T),e(n,ye(t,3))},An.sortedIndex=function(n,t){return _r(n,t)},An.sortedIndexBy=function(n,t,r){return vr(n,t,ye(r,2))},An.sortedIndexOf=function(n,t){var r=null==n?0:n.length;if(r){var e=_r(n,t);if(e<r&&lu(n[e],t))return e}return-1},An.sortedLastIndex=function(n,t){return _r(n,t,true)},An.sortedLastIndexBy=function(n,t,r){return vr(n,t,ye(r,2),true);
  },An.sortedLastIndexOf=function(n,t){if(null==n?0:n.length){var r=_r(n,t,true)-1;if(lu(n[r],t))return r}return-1},An.startCase=Mf,An.startsWith=function(n,t,r){return n=Iu(n),r=null==r?0:pt(Eu(r),0,n.length),t=yr(t),n.slice(r,r+t.length)==t},An.subtract=uc,An.sum=function(n){return n&&n.length?m(n,$u):0},An.sumBy=function(n,t){return n&&n.length?m(n,ye(t,2)):0},An.template=function(n,t,r){var e=An.templateSettings;r&&Oe(n,t,r)&&(t=T),n=Iu(n),t=bf({},t,e,ce),r=bf({},t.imports,e.imports,ce);var u,i,o=Wu(r),f=S(r,o),c=0;
  r=t.interpolate||jn;var a="__p+='";r=Xu((t.escape||jn).source+"|"+r.source+"|"+(r===Q?pn:jn).source+"|"+(t.evaluate||jn).source+"|$","g");var l=oi.call(t,"sourceURL")?"//# sourceURL="+(t.sourceURL+"").replace(/[\r\n]/g," ")+"\n":"";if(n.replace(r,function(t,r,e,o,f,l){return e||(e=o),a+=n.slice(c,l).replace(wn,z),r&&(u=true,a+="'+__e("+r+")+'"),f&&(i=true,a+="';"+f+";\n__p+='"),e&&(a+="'+((__t=("+e+"))==null?'':__t)+'"),c=l+t.length,t}),a+="';",(t=oi.call(t,"variable")&&t.variable)||(a="with(obj){"+a+"}"),
  a=(i?a.replace(P,""):a).replace(Z,"$1").replace(q,"$1;"),a="function("+(t||"obj")+"){"+(t?"":"obj||(obj={});")+"var __t,__p=''"+(u?",__e=_.escape":"")+(i?",__j=Array.prototype.join;function print(){__p+=__j.call(arguments,'')}":";")+a+"return __p}",t=Ff(function(){return Ju(o,l+"return "+a).apply(T,f)}),t.source=a,pu(t))throw t;return t},An.times=function(n,t){if(n=Eu(n),1>n||9007199254740991<n)return[];var r=4294967295,e=Ci(n,4294967295);for(t=ye(t),n-=4294967295,e=A(e,t);++r<n;)t(r);return e},An.toFinite=Au,
  An.toInteger=Eu,An.toLength=ku,An.toLower=function(n){return Iu(n).toLowerCase()},An.toNumber=Su,An.toSafeInteger=function(n){return n?pt(Eu(n),-9007199254740991,9007199254740991):0===n?n:0},An.toString=Iu,An.toUpper=function(n){return Iu(n).toUpperCase()},An.trim=function(n,t,r){return(n=Iu(n))&&(r||t===T)?n.replace(un,""):n&&(t=yr(t))?(n=M(n),r=M(t),t=I(n,r),r=R(n,r)+1,Or(n,t,r).join("")):n},An.trimEnd=function(n,t,r){return(n=Iu(n))&&(r||t===T)?n.replace(fn,""):n&&(t=yr(t))?(n=M(n),t=R(n,M(t))+1,
  Or(n,0,t).join("")):n},An.trimStart=function(n,t,r){return(n=Iu(n))&&(r||t===T)?n.replace(on,""):n&&(t=yr(t))?(n=M(n),t=I(n,M(t)),Or(n,t).join("")):n},An.truncate=function(n,t){var r=30,e="...";if(du(t))var u="separator"in t?t.separator:u,r="length"in t?Eu(t.length):r,e="omission"in t?yr(t.omission):e;n=Iu(n);var i=n.length;if(Rn.test(n))var o=M(n),i=o.length;if(r>=i)return n;if(i=r-D(e),1>i)return e;if(r=o?Or(o,0,i).join(""):n.slice(0,i),u===T)return r+e;if(o&&(i+=r.length-i),hf(u)){if(n.slice(i).search(u)){
  var f=r;for(u.global||(u=Xu(u.source,Iu(_n.exec(u))+"g")),u.lastIndex=0;o=u.exec(f);)var c=o.index;r=r.slice(0,c===T?i:c)}}else n.indexOf(yr(u),i)!=i&&(u=r.lastIndexOf(u),-1<u&&(r=r.slice(0,u)));return r+e},An.unescape=function(n){return(n=Iu(n))&&G.test(n)?n.replace(V,tt):n},An.uniqueId=function(n){var t=++fi;return Iu(n)+t},An.upperCase=Tf,An.upperFirst=$f,An.each=nu,An.eachRight=tu,An.first=qe,Nu(An,function(){var n={};return mt(An,function(t,r){oi.call(An.prototype,r)||(n[r]=t)}),n}(),{chain:false
  }),An.VERSION="4.17.15",r("bind bindKey curry curryRight partial partialRight".split(" "),function(n){An[n].placeholder=An}),r(["drop","take"],function(n,t){Un.prototype[n]=function(r){r=r===T?1:Ui(Eu(r),0);var e=this.__filtered__&&!t?new Un(this):this.clone();return e.__filtered__?e.__takeCount__=Ci(r,e.__takeCount__):e.__views__.push({size:Ci(r,4294967295),type:n+(0>e.__dir__?"Right":"")}),e},Un.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse()}}),r(["filter","map","takeWhile"],function(n,t){
  var r=t+1,e=1==r||3==r;Un.prototype[n]=function(n){var t=this.clone();return t.__iteratees__.push({iteratee:ye(n,3),type:r}),t.__filtered__=t.__filtered__||e,t}}),r(["head","last"],function(n,t){var r="take"+(t?"Right":"");Un.prototype[n]=function(){return this[r](1).value()[0]}}),r(["initial","tail"],function(n,t){var r="drop"+(t?"":"Right");Un.prototype[n]=function(){return this.__filtered__?new Un(this):this[r](1)}}),Un.prototype.compact=function(){return this.filter($u)},Un.prototype.find=function(n){
  return this.filter(n).head()},Un.prototype.findLast=function(n){return this.reverse().find(n)},Un.prototype.invokeMap=fr(function(n,t){return typeof n=="function"?new Un(this):this.map(function(r){return Lt(r,n,t)})}),Un.prototype.reject=function(n){return this.filter(au(ye(n)))},Un.prototype.slice=function(n,t){n=Eu(n);var r=this;return r.__filtered__&&(0<n||0>t)?new Un(r):(0>n?r=r.takeRight(-n):n&&(r=r.drop(n)),t!==T&&(t=Eu(t),r=0>t?r.dropRight(-t):r.take(t-n)),r)},Un.prototype.takeRightWhile=function(n){
  return this.reverse().takeWhile(n).reverse()},Un.prototype.toArray=function(){return this.take(4294967295)},mt(Un.prototype,function(n,t){var r=/^(?:filter|find|map|reject)|While$/.test(t),e=/^(?:head|last)$/.test(t),u=An[e?"take"+("last"==t?"Right":""):t],i=e||/^find/.test(t);u&&(An.prototype[t]=function(){function t(n){return n=u.apply(An,a([n],f)),e&&h?n[0]:n}var o=this.__wrapped__,f=e?[1]:arguments,c=o instanceof Un,l=f[0],s=c||ff(o);s&&r&&typeof l=="function"&&1!=l.length&&(c=s=false);var h=this.__chain__,p=!!this.__actions__.length,l=i&&!h,c=c&&!p;
  return!i&&s?(o=c?o:new Un(this),o=n.apply(o,f),o.__actions__.push({func:Qe,args:[t],thisArg:T}),new On(o,h)):l&&c?n.apply(this,f):(o=this.thru(t),l?e?o.value()[0]:o.value():o)})}),r("pop push shift sort splice unshift".split(" "),function(n){var t=ri[n],r=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",e=/^(?:pop|shift)$/.test(n);An.prototype[n]=function(){var n=arguments;if(e&&!this.__chain__){var u=this.value();return t.apply(ff(u)?u:[],n)}return this[r](function(r){return t.apply(ff(r)?r:[],n)});
  }}),mt(Un.prototype,function(n,t){var r=An[t];if(r){var e=r.name+"";oi.call(Gi,e)||(Gi[e]=[]),Gi[e].push({name:t,func:r})}}),Gi[Jr(T,2).name]=[{name:"wrapper",func:T}],Un.prototype.clone=function(){var n=new Un(this.__wrapped__);return n.__actions__=Ur(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=Ur(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=Ur(this.__views__),n},Un.prototype.reverse=function(){if(this.__filtered__){var n=new Un(this);
  n.__dir__=-1,n.__filtered__=true}else n=this.clone(),n.__dir__*=-1;return n},Un.prototype.value=function(){var n,t=this.__wrapped__.value(),r=this.__dir__,e=ff(t),u=0>r,i=e?t.length:0;n=i;for(var o=this.__views__,f=0,c=-1,a=o.length;++c<a;){var l=o[c],s=l.size;switch(l.type){case"drop":f+=s;break;case"dropRight":n-=s;break;case"take":n=Ci(n,f+s);break;case"takeRight":f=Ui(f,n-s)}}if(n={start:f,end:n},o=n.start,f=n.end,n=f-o,o=u?f:o-1,f=this.__iteratees__,c=f.length,a=0,l=Ci(n,this.__takeCount__),!e||!u&&i==n&&l==n)return wr(t,this.__actions__);
  e=[];n:for(;n--&&a<l;){for(o+=r,u=-1,i=t[o];++u<c;){var h=f[u],s=h.type,h=(0,h.iteratee)(i);if(2==s)i=h;else if(!h){if(1==s)continue n;break n}}e[a++]=i}return e},An.prototype.at=To,An.prototype.chain=function(){return Ye(this)},An.prototype.commit=function(){return new On(this.value(),this.__chain__)},An.prototype.next=function(){this.__values__===T&&(this.__values__=mu(this.value()));var n=this.__index__>=this.__values__.length;return{done:n,value:n?T:this.__values__[this.__index__++]}},An.prototype.plant=function(n){
  for(var t,r=this;r instanceof En;){var e=Fe(r);e.__index__=0,e.__values__=T,t?u.__wrapped__=e:t=e;var u=e,r=r.__wrapped__}return u.__wrapped__=n,t},An.prototype.reverse=function(){var n=this.__wrapped__;return n instanceof Un?(this.__actions__.length&&(n=new Un(this)),n=n.reverse(),n.__actions__.push({func:Qe,args:[Ge],thisArg:T}),new On(n,this.__chain__)):this.thru(Ge)},An.prototype.toJSON=An.prototype.valueOf=An.prototype.value=function(){return wr(this.__wrapped__,this.__actions__)},An.prototype.first=An.prototype.head,
  wi&&(An.prototype[wi]=Xe),An}(); true?($n._=rt, !(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){return rt}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))):0}).call(this);


/***/ }),

/***/ "./src/libraries/scroll-trigger.min.js":
/*!*********************************************!*\
  !*** ./src/libraries/scroll-trigger.min.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports) {

/*!
 * ScrollTrigger 3.11.3
 * https://greensock.com
 *
 * @license Copyright 2022, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
 */

!function(e,t){ true?t(exports):0}(this,function(e){"use strict";function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function q(){return we||"undefined"!=typeof window&&(we=window.gsap)&&we.registerPlugin&&we}function y(e,t){return~Fe.indexOf(e)&&Fe[Fe.indexOf(e)+1][t]}function z(e){return!!~t.indexOf(e)}function A(e,t,r,n,o){return e.addEventListener(t,r,{passive:!n,capture:!!o})}function B(e,t,r,n){return e.removeEventListener(t,r,!!n)}function E(){return ze&&ze.isPressed||Le.cache++}function F(r,n){function Sc(e){if(e||0===e){o&&(Ae.history.scrollRestoration="manual");var t=ze&&ze.isPressed;e=Sc.v=Math.round(e)||(ze&&ze.iOS?1:0),r(e),Sc.cacheID=Le.cache,t&&i("ss",e)}else(n||Le.cache!==Sc.cacheID||i("ref"))&&(Sc.cacheID=Le.cache,Sc.v=r());return Sc.v+Sc.offset}return Sc.offset=0,r&&Sc}function I(e){return we.utils.toArray(e)[0]||("string"==typeof e&&!1!==we.config().nullTargetWarn?console.warn("Element not found:",e):null)}function J(t,e){var r=e.s,n=e.sc;z(t)&&(t=Ee.scrollingElement||Me);var o=Le.indexOf(t),i=n===Ne.sc?1:2;~o||(o=Le.push(t)-1),Le[o+i]||t.addEventListener("scroll",E);var a=Le[o+i],s=a||(Le[o+i]=F(y(t,r),!0)||(z(t)?n:F(function(e){return arguments.length?t[r]=e:t[r]})));return s.target=t,a||(s.smooth="smooth"===we.getProperty(t,"scrollBehavior")),s}function K(e,t,o){function od(e,t){var r=He();t||n<r-s?(a=i,i=e,l=s,s=r):o?i+=e:i=a+(e-a)/(r-l)*(s-l)}var i=e,a=e,s=He(),l=s,n=t||50,c=Math.max(500,3*n);return{update:od,reset:function reset(){a=i=o?0:i,l=s=0},getVelocity:function getVelocity(e){var t=l,r=a,n=He();return!e&&0!==e||e===i||od(e),s===l||c<n-l?0:(i+(o?r:-r))/((o?n:s)-t)*1e3}}}function L(e,t){return t&&!e._gsapAllow&&e.preventDefault(),e.changedTouches?e.changedTouches[0]:e}function M(e){var t=Math.max.apply(Math,e),r=Math.min.apply(Math,e);return Math.abs(t)>=Math.abs(r)?t:r}function N(){(Ie=we.core.globals().ScrollTrigger)&&Ie.core&&function _integrate(){var e=Ie.core,r=e.bridge||{},t=e._scrollers,n=e._proxies;t.push.apply(t,Le),n.push.apply(n,Fe),Le=t,Fe=n,i=function _bridge(e,t){return r[e](t)}}()}function O(e){return(we=e||q())&&"undefined"!=typeof document&&document.body&&(Ae=window,Me=(Ee=document).documentElement,Ce=Ee.body,t=[Ae,Ee,Me,Ce],we.utils.clamp,De="onpointerenter"in Ce?"pointer":"mouse",Oe=k.isTouch=Ae.matchMedia&&Ae.matchMedia("(hover: none), (pointer: coarse)").matches?1:"ontouchstart"in Ae||0<navigator.maxTouchPoints||0<navigator.msMaxTouchPoints?2:0,Be=k.eventTypes=("ontouchstart"in Me?"touchstart,touchmove,touchcancel,touchend":"onpointerdown"in Me?"pointerdown,pointermove,pointercancel,pointerup":"mousedown,mousemove,mouseup,mouseup").split(","),setTimeout(function(){return o=0},500),N(),ke=1),ke}var we,ke,Ae,Ee,Me,Ce,Oe,De,Ie,t,ze,Be,o=1,Re=[],Le=[],Fe=[],He=Date.now,i=function _bridge(e,t){return t},r="scrollLeft",n="scrollTop",Je={s:r,p:"left",p2:"Left",os:"right",os2:"Right",d:"width",d2:"Width",a:"x",sc:F(function(e){return arguments.length?Ae.scrollTo(e,Ne.sc()):Ae.pageXOffset||Ee[r]||Me[r]||Ce[r]||0})},Ne={s:n,p:"top",p2:"Top",os:"bottom",os2:"Bottom",d:"height",d2:"Height",a:"y",op:Je,sc:F(function(e){return arguments.length?Ae.scrollTo(Je.sc(),e):Ae.pageYOffset||Ee[n]||Me[n]||Ce[n]||0})};Je.op=Ne,Le.cache=0;var k=(Observer.prototype.init=function init(e){ke||O(we)||console.warn("Please gsap.registerPlugin(Observer)"),Ie||N();var o=e.tolerance,a=e.dragMinimum,t=e.type,n=e.target,r=e.lineHeight,i=e.debounce,s=e.preventDefault,l=e.onStop,c=e.onStopDelay,u=e.ignore,f=e.wheelSpeed,d=e.event,p=e.onDragStart,g=e.onDragEnd,h=e.onDrag,v=e.onPress,b=e.onRelease,m=e.onRight,y=e.onLeft,x=e.onUp,S=e.onDown,w=e.onChangeX,_=e.onChangeY,T=e.onChange,k=e.onToggleX,P=e.onToggleY,C=e.onHover,D=e.onHoverEnd,R=e.onMove,X=e.ignoreCheck,F=e.isNormalizer,Y=e.onGestureStart,H=e.onGestureEnd,V=e.onWheel,W=e.onEnable,j=e.onDisable,q=e.onClick,U=e.scrollSpeed,G=e.capture,$=e.allowClicks,Q=e.lockAxis,Z=e.onLockAxis;function Pe(){return ye=He()}function Qe(e,t){return(se.event=e)&&u&&~u.indexOf(e.target)||t&&ge&&"touch"!==e.pointerType||X&&X(e,t)}function Se(){var e=se.deltaX=M(be),t=se.deltaY=M(me),r=Math.abs(e)>=o,n=Math.abs(t)>=o;T&&(r||n)&&T(se,e,t,be,me),r&&(m&&0<se.deltaX&&m(se),y&&se.deltaX<0&&y(se),w&&w(se),k&&se.deltaX<0!=le<0&&k(se),le=se.deltaX,be[0]=be[1]=be[2]=0),n&&(S&&0<se.deltaY&&S(se),x&&se.deltaY<0&&x(se),_&&_(se),P&&se.deltaY<0!=ce<0&&P(se),ce=se.deltaY,me[0]=me[1]=me[2]=0),(ne||re)&&(R&&R(se),re&&(h(se),re=!1),ne=!1),ie&&!(ie=!1)&&Z&&Z(se),oe&&(V(se),oe=!1),ee=0}function Te(e,t,r){be[r]+=e,me[r]+=t,se._vx.update(e),se._vy.update(t),i?ee=ee||requestAnimationFrame(Se):Se()}function Ue(e,t){Q&&!ae&&(se.axis=ae=Math.abs(e)>Math.abs(t)?"x":"y",ie=!0),"y"!==ae&&(be[2]+=e,se._vx.update(e,!0)),"x"!==ae&&(me[2]+=t,se._vy.update(t,!0)),i?ee=ee||requestAnimationFrame(Se):Se()}function Ve(e){if(!Qe(e,1)){var t=(e=L(e,s)).clientX,r=e.clientY,n=t-se.x,o=r-se.y,i=se.isDragging;se.x=t,se.y=r,(i||Math.abs(se.startX-t)>=a||Math.abs(se.startY-r)>=a)&&(h&&(re=!0),i||(se.isDragging=!0),Ue(n,o),i||p&&p(se))}}function Xe(t){if(!Qe(t,1)){B(F?n:ve,Be[1],Ve,!0);var e=se.isDragging&&(3<Math.abs(se.x-se.startX)||3<Math.abs(se.y-se.startY)),r=L(t);e||(se._vx.reset(),se._vy.reset(),s&&$&&we.delayedCall(.08,function(){if(300<He()-ye&&!t.defaultPrevented)if(t.target.click)t.target.click();else if(ve.createEvent){var e=ve.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,Ae,1,r.screenX,r.screenY,r.clientX,r.clientY,!1,!1,!1,!1,0,null),t.target.dispatchEvent(e)}})),se.isDragging=se.isGesturing=se.isPressed=!1,l&&!F&&te.restart(!0),g&&e&&g(se),b&&b(se,e)}}function Ye(e){return e.touches&&1<e.touches.length&&(se.isGesturing=!0)&&Y(e,se.isDragging)}function Ze(){return(se.isGesturing=!1)||H(se)}function $e(e){if(!Qe(e)){var t=ue(),r=fe();Te((t-de)*U,(r-pe)*U,1),de=t,pe=r,l&&te.restart(!0)}}function _e(e){if(!Qe(e)){e=L(e,s),V&&(oe=!0);var t=(1===e.deltaMode?r:2===e.deltaMode?Ae.innerHeight:1)*f;Te(e.deltaX*t,e.deltaY*t,0),l&&!F&&te.restart(!0)}}function af(e){if(!Qe(e)){var t=e.clientX,r=e.clientY,n=t-se.x,o=r-se.y;se.x=t,se.y=r,ne=!0,(n||o)&&Ue(n,o)}}function bf(e){se.event=e,C(se)}function cf(e){se.event=e,D(se)}function df(e){return Qe(e)||L(e,s)&&q(se)}this.target=n=I(n)||Me,this.vars=e,u=u&&we.utils.toArray(u),o=o||1e-9,a=a||0,f=f||1,U=U||1,t=t||"wheel,touch,pointer",i=!1!==i,r=r||parseFloat(Ae.getComputedStyle(Ce).lineHeight)||22;var ee,te,re,ne,oe,ie,ae,se=this,le=0,ce=0,ue=J(n,Je),fe=J(n,Ne),de=ue(),pe=fe(),ge=~t.indexOf("touch")&&!~t.indexOf("pointer")&&"pointerdown"===Be[0],he=z(n),ve=n.ownerDocument||Ee,be=[0,0,0],me=[0,0,0],ye=0,xe=se.onPress=function(e){Qe(e,1)||(se.axis=ae=null,te.pause(),se.isPressed=!0,e=L(e),le=ce=0,se.startX=se.x=e.clientX,se.startY=se.y=e.clientY,se._vx.reset(),se._vy.reset(),A(F?n:ve,Be[1],Ve,s,!0),se.deltaX=se.deltaY=0,v&&v(se))};te=se._dc=we.delayedCall(c||.25,function onStopFunc(){se._vx.reset(),se._vy.reset(),te.pause(),l&&l(se)}).pause(),se.deltaX=se.deltaY=0,se._vx=K(0,50,!0),se._vy=K(0,50,!0),se.scrollX=ue,se.scrollY=fe,se.isDragging=se.isGesturing=se.isPressed=!1,se.enable=function(e){return se.isEnabled||(A(he?ve:n,"scroll",E),0<=t.indexOf("scroll")&&A(he?ve:n,"scroll",$e,s,G),0<=t.indexOf("wheel")&&A(n,"wheel",_e,s,G),(0<=t.indexOf("touch")&&Oe||0<=t.indexOf("pointer"))&&(A(n,Be[0],xe,s,G),A(ve,Be[2],Xe),A(ve,Be[3],Xe),$&&A(n,"click",Pe,!1,!0),q&&A(n,"click",df),Y&&A(ve,"gesturestart",Ye),H&&A(ve,"gestureend",Ze),C&&A(n,De+"enter",bf),D&&A(n,De+"leave",cf),R&&A(n,De+"move",af)),se.isEnabled=!0,e&&e.type&&xe(e),W&&W(se)),se},se.disable=function(){se.isEnabled&&(Re.filter(function(e){return e!==se&&z(e.target)}).length||B(he?ve:n,"scroll",E),se.isPressed&&(se._vx.reset(),se._vy.reset(),B(F?n:ve,Be[1],Ve,!0)),B(he?ve:n,"scroll",$e,G),B(n,"wheel",_e,G),B(n,Be[0],xe,G),B(ve,Be[2],Xe),B(ve,Be[3],Xe),B(n,"click",Pe,!0),B(n,"click",df),B(ve,"gesturestart",Ye),B(ve,"gestureend",Ze),B(n,De+"enter",bf),B(n,De+"leave",cf),B(n,De+"move",af),se.isEnabled=se.isPressed=se.isDragging=!1,j&&j(se))},se.kill=function(){se.disable();var e=Re.indexOf(se);0<=e&&Re.splice(e,1),ze===se&&(ze=0)},Re.push(se),F&&z(n)&&(ze=se),se.enable(d)},function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}(Observer,[{key:"velocityX",get:function get(){return this._vx.getVelocity()}},{key:"velocityY",get:function get(){return this._vy.getVelocity()}}]),Observer);function Observer(e){this.init(e)}k.version="3.11.3",k.create=function(e){return new k(e)},k.register=O,k.getAll=function(){return Re.slice()},k.getById=function(t){return Re.filter(function(e){return e.vars.id===t})[0]},q()&&we.registerPlugin(k);function xa(){return ot=1}function ya(){return ot=0}function za(e){return e}function Aa(e){return Math.round(1e5*e)/1e5||0}function Ba(){return"undefined"!=typeof window}function Ca(){return Ke||Ba()&&(Ke=window.gsap)&&Ke.registerPlugin&&Ke}function Da(e){return!!~s.indexOf(e)}function Ea(e){return y(e,"getBoundingClientRect")||(Da(e)?function(){return Xt.width=We.innerWidth,Xt.height=We.innerHeight,Xt}:function(){return Mt(e)})}function Ha(e,t){var r=t.s,n=t.d2,o=t.d,i=t.a;return(r="scroll"+n)&&(i=y(e,r))?i()-Ea(e)()[o]:Da(e)?(qe[r]||Ge[r])-(We["inner"+n]||qe["client"+n]||Ge["client"+n]):e[r]-e["offset"+n]}function Ia(e,t){for(var r=0;r<p.length;r+=3)t&&!~t.indexOf(p[r+1])||e(p[r],p[r+1],p[r+2])}function Ja(e){return"string"==typeof e}function Ka(e){return"function"==typeof e}function La(e){return"number"==typeof e}function Ma(e){return"object"==typeof e}function Na(e,t,r){return e&&e.progress(t?0:1)&&r&&e.pause()}function Oa(e,t){if(e.enabled){var r=t(e);r&&r.totalTime&&(e.callbackAnimation=r)}}function db(e){return We.getComputedStyle(e)}function fb(e,t){for(var r in t)r in e||(e[r]=t[r]);return e}function hb(e,t){var r=t.d2;return e["offset"+r]||e["client"+r]||0}function ib(e){var t,r=[],n=e.labels,o=e.duration();for(t in n)r.push(n[t]/o);return r}function kb(o){var i=Ke.utils.snap(o),a=Array.isArray(o)&&o.slice(0).sort(function(e,t){return e-t});return a?function(e,t,r){var n;if(void 0===r&&(r=.001),!t)return i(e);if(0<t){for(e-=r,n=0;n<a.length;n++)if(a[n]>=e)return a[n];return a[n-1]}for(n=a.length,e+=r;n--;)if(a[n]<=e)return a[n];return a[0]}:function(e,t,r){void 0===r&&(r=.001);var n=i(e);return!t||Math.abs(n-e)<r||n-e<0==t<0?n:i(t<0?e-o:e+o)}}function mb(t,r,e,n){return e.split(",").forEach(function(e){return t(r,e,n)})}function nb(e,t,r,n,o){return e.addEventListener(t,r,{passive:!n,capture:!!o})}function ob(e,t,r,n){return e.removeEventListener(t,r,!!n)}function pb(e,t,r){return r&&r.wheelHandler&&e(t,"wheel",r)}function tb(e,t){if(Ja(e)){var r=e.indexOf("="),n=~r?(e.charAt(r-1)+1)*parseFloat(e.substr(r+1)):0;~r&&(e.indexOf("%")>r&&(n*=t/100),e=e.substr(0,r-1)),e=n+(e in D?D[e]*t:~e.indexOf("%")?parseFloat(e)*t/100:parseFloat(e)||0)}return e}function ub(e,t,r,n,o,i,a,s){var l=o.startColor,c=o.endColor,u=o.fontSize,f=o.indent,d=o.fontWeight,p=je.createElement("div"),g=Da(r)||"fixed"===y(r,"pinType"),h=-1!==e.indexOf("scroller"),v=g?Ge:r,b=-1!==e.indexOf("start"),m=b?l:c,x="border-color:"+m+";font-size:"+u+";color:"+m+";font-weight:"+d+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return x+="position:"+((h||s)&&g?"fixed;":"absolute;"),!h&&!s&&g||(x+=(n===Ne?_:T)+":"+(i+parseFloat(f))+"px;"),a&&(x+="box-sizing:border-box;text-align:left;width:"+a.offsetWidth+"px;"),p._isStart=b,p.setAttribute("class","gsap-marker-"+e+(t?" marker-"+t:"")),p.style.cssText=x,p.innerText=t||0===t?e+"-"+t:e,v.children[0]?v.insertBefore(p,v.children[0]):v.appendChild(p),p._offset=p["offset"+n.op.d2],R(p,0,n,b),p}function zb(){return 34<gt()-ht&&(S=S||requestAnimationFrame(j))}function Ab(){h&&h.isPressed&&!(h.startX>Ge.clientWidth)||(Le.cache++,h?S=S||requestAnimationFrame(j):j(),ht||H("scrollStart"),ht=gt())}function Bb(){m=We.innerWidth,b=We.innerHeight}function Cb(){Le.cache++,nt||g||je.fullscreenElement||je.webkitFullscreenElement||v&&m===We.innerWidth&&!(Math.abs(We.innerHeight-b)>.25*We.innerHeight)||l.restart(!0)}function Fb(){return ob(Z,"scrollEnd",Fb)||zt(!0)}function Ib(e){for(var t=0;t<V.length;t+=5)(!e||V[t+4]&&V[t+4].query===e)&&(V[t].style.cssText=V[t+1],V[t].getBBox&&V[t].setAttribute("transform",V[t+2]||""),V[t+3].uncache=1)}function Jb(e,t){var r;for(it=0;it<Ot.length;it++)!(r=Ot[it])||t&&r._ctx!==t||(e?r.kill(1):r.revert(!0,!0));t&&Ib(t),t||H("revert")}function Kb(e,t){Le.cache++,!t&&ut||Le.forEach(function(e){return Ka(e)&&e.cacheID++&&(e.rec=0)}),Ja(e)&&(We.history.scrollRestoration=x=e)}function Xb(e,t,r,n){if(!e._gsap.swappedIn){for(var o,i=U.length,a=t.style,s=e.style;i--;)a[o=U[i]]=r[o];a.position="absolute"===r.position?"absolute":"relative","inline"===r.display&&(a.display="inline-block"),s[T]=s[_]="auto",a.flexBasis=r.flexBasis||"auto",a.overflow="visible",a.boxSizing="border-box",a[mt]=hb(e,Je)+Et,a[yt]=hb(e,Ne)+Et,a[Tt]=s[kt]=s.top=s.left="0",Rt(n),s[mt]=s.maxWidth=r[mt],s[yt]=s.maxHeight=r[yt],s[Tt]=r[Tt],e.parentNode!==t&&(e.parentNode.insertBefore(t,e),t.appendChild(e)),e._gsap.swappedIn=!0}}function $b(e){for(var t=G.length,r=e.style,n=[],o=0;o<t;o++)n.push(G[o],r[G[o]]);return n.t=e,n}function bc(e,t,r,n,o,i,a,s,l,c,u,f,d){Ka(e)&&(e=e(s)),Ja(e)&&"max"===e.substr(0,3)&&(e=f+("="===e.charAt(4)?tb("0"+e.substr(3),r):0));var p,g,h,v=d?d.time():0;if(d&&d.seek(0),La(e))a&&R(a,r,n,!0);else{Ka(t)&&(t=t(s));var b,m,y,x,S=(e||"0").split(" ");h=I(t)||Ge,(b=Mt(h)||{})&&(b.left||b.top)||"none"!==db(h).display||(x=h.style.display,h.style.display="block",b=Mt(h),x?h.style.display=x:h.style.removeProperty("display")),m=tb(S[0],b[n.d]),y=tb(S[1]||"0",r),e=b[n.p]-l[n.p]-c+m+o-y,a&&R(a,y,n,r-y<20||a._isStart&&20<y),r-=r-y}if(i){var w=e+r,_=i._isStart;p="scroll"+n.d2,R(i,w,n,_&&20<w||!_&&(u?Math.max(Ge[p],qe[p]):i.parentNode[p])<=w+1),u&&(l=Mt(a),u&&(i.style[n.op.p]=l[n.op.p]-n.op.m-i._offset+Et))}return d&&h&&(p=Mt(h),d.seek(f),g=Mt(h),d._caScrollDist=p[n.p]-g[n.p],e=e/d._caScrollDist*f),d&&d.seek(v),d?e:Math.round(e)}function dc(e,t,r,n){if(e.parentNode!==t){var o,i,a=e.style;if(t===Ge){for(o in e._stOrig=a.cssText,i=db(e))+o||Q.test(o)||!i[o]||"string"!=typeof a[o]||"0"===o||(a[o]=i[o]);a.top=r,a.left=n}else a.cssText=e._stOrig;Ke.core.getCache(e).uncache=1,t.appendChild(e)}}function ec(l,e){function Sj(e,t,r,n,o){var i=Sj.tween,a=t.onComplete,s={};return r=r||f(),o=n&&o||0,n=n||e-r,i&&i.kill(),c=Math.round(r),t[d]=e,(t.modifiers=s)[d]=function(e){return(e=Math.round(f()))!==c&&e!==u&&3<Math.abs(e-c)&&3<Math.abs(e-u)?(i.kill(),Sj.tween=0):e=r+n*i.ratio+o*i.ratio*i.ratio,u=c,c=Math.round(e)},t.onComplete=function(){Sj.tween=0,a&&a.call(i)},i=Sj.tween=Ke.to(l,t)}var c,u,f=J(l,e),d="_scroll"+e.p2;return(l[d]=f).wheelHandler=function(){return Sj.tween&&Sj.tween.kill()&&(Sj.tween=0)},nb(l,"wheel",f.wheelHandler),Sj}var Ke,a,We,je,qe,Ge,s,l,et,tt,rt,c,nt,ot,u,it,f,d,p,at,st,g,h,v,b,m,P,lt,x,ct,S,ut,ft,dt,pt=1,gt=Date.now,w=gt(),ht=0,vt=0,bt=Math.abs,_="right",T="bottom",mt="width",yt="height",xt="Right",St="Left",wt="Top",_t="Bottom",Tt="padding",kt="margin",At="Width",C="Height",Et="px",Mt=function _getBounds(e,t){var r=t&&"matrix(1, 0, 0, 1, 0, 0)"!==db(e)[u]&&Ke.to(e,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),n=e.getBoundingClientRect();return r&&r.progress(0).kill(),n},Pt={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},Ct={toggleActions:"play",anticipatePin:0},D={top:0,left:0,center:.5,bottom:1,right:1},R=function _positionMarker(e,t,r,n){var o={display:"block"},i=r[n?"os2":"p2"],a=r[n?"p2":"os2"];e._isFlipped=n,o[r.a+"Percent"]=n?-100:0,o[r.a]=n?"1px":0,o["border"+i+At]=1,o["border"+a+At]=0,o[r.p]=t+"px",Ke.set(e,o)},Ot=[],Dt={},X={},Y=[],H=function _dispatch(e){return X[e]&&X[e].map(function(e){return e()})||Y},V=[],It=0,zt=function _refreshAll(e,t){if(!ht||e){ut=Z.isRefreshing=!0,Le.forEach(function(e){return Ka(e)&&e.cacheID++&&(e.rec=e())});var r=H("refreshInit");at&&Z.sort(),t||Jb(),Le.forEach(function(e){Ka(e)&&(e.smooth&&(e.target.style.scrollBehavior="auto"),e(0))}),Ot.slice(0).forEach(function(e){return e.refresh()}),Ot.forEach(function(e,t){if(e._subPinOffset&&e.pin){var r=e.vars.horizontal?"offsetWidth":"offsetHeight",n=e.pin[r];e.revert(!0,1),e.adjustPinSpacing(e.pin[r]-n),e.revert(!1,1)}}),Ot.forEach(function(e){return"max"===e.vars.end&&e.setPositions(e.start,Math.max(e.start+1,Ha(e.scroller,e._dir)))}),r.forEach(function(e){return e&&e.render&&e.render(-1)}),Le.forEach(function(e){Ka(e)&&(e.smooth&&requestAnimationFrame(function(){return e.target.style.scrollBehavior="smooth"}),e.rec&&e(e.rec))}),Kb(x,1),l.pause(),It++,j(2),Ot.forEach(function(e){return Ka(e.vars.onRefresh)&&e.vars.onRefresh(e)}),ut=Z.isRefreshing=!1,H("refresh")}else nb(Z,"scrollEnd",Fb)},W=0,Bt=1,j=function _updateAll(e){if(!ut||2===e){Z.isUpdating=!0,dt&&dt.update(0);var t=Ot.length,r=gt(),n=50<=r-w,o=t&&Ot[0].scroll();if(Bt=o<W?-1:1,W=o,n&&(ht&&!ot&&200<r-ht&&(ht=0,H("scrollEnd")),rt=w,w=r),Bt<0){for(it=t;0<it--;)Ot[it]&&Ot[it].update(0,n);Bt=1}else for(it=0;it<t;it++)Ot[it]&&Ot[it].update(0,n);Z.isUpdating=!1}S=0},U=["left","top",T,_,kt+_t,kt+xt,kt+wt,kt+St,"display","flexShrink","float","zIndex","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","gridArea","justifySelf","alignSelf","placeSelf","order"],G=U.concat([mt,yt,"boxSizing","max"+At,"max"+C,"position",kt,Tt,Tt+wt,Tt+xt,Tt+_t,Tt+St]),$=/([A-Z])/g,Rt=function _setState(e){if(e){var t,r,n=e.t.style,o=e.length,i=0;for((e.t._gsap||Ke.core.getCache(e.t)).uncache=1;i<o;i+=2)r=e[i+1],t=e[i],r?n[t]=r:n[t]&&n.removeProperty(t.replace($,"-$1").toLowerCase())}},Xt={left:0,top:0},Q=/(webkit|moz|length|cssText|inset)/i,Z=(ScrollTrigger.prototype.init=function init(_,T){if(this.progress=this.start=0,this.vars&&this.kill(!0,!0),vt){var k,n,p,A,E,M,P,C,O,D,z,e,B,R,X,L,F,t,Y,b,H,N,m,K,x,S,r,w,V,W,o,g,j,q,U,G,$,i,Q=(_=fb(Ja(_)||La(_)||_.nodeType?{trigger:_}:_,Ct)).onUpdate,Z=_.toggleClass,a=_.id,ee=_.onToggle,te=_.onRefresh,re=_.scrub,ne=_.trigger,oe=_.pin,ie=_.pinSpacing,ae=_.invalidateOnRefresh,se=_.anticipatePin,s=_.onScrubComplete,h=_.onSnapComplete,le=_.once,ce=_.snap,ue=_.pinReparent,l=_.pinSpacer,fe=_.containerAnimation,de=_.fastScrollEnd,pe=_.preventOverlaps,ge=_.horizontal||_.containerAnimation&&!1!==_.horizontal?Je:Ne,he=!re&&0!==re,ve=I(_.scroller||We),c=Ke.core.getCache(ve),be=Da(ve),me="fixed"===("pinType"in _?_.pinType:y(ve,"pinType")||be&&"fixed"),ye=[_.onEnter,_.onLeave,_.onEnterBack,_.onLeaveBack],xe=he&&_.toggleActions.split(" "),u="markers"in _?_.markers:Ct.markers,Se=be?0:parseFloat(db(ve)["border"+ge.p2+At])||0,we=this,_e=_.onRefreshInit&&function(){return _.onRefreshInit(we)},Te=function _getSizeFunc(e,t,r){var n=r.d,o=r.d2,i=r.a;return(i=y(e,"getBoundingClientRect"))?function(){return i()[n]}:function(){return(t?We["inner"+o]:e["client"+o])||0}}(ve,be,ge),ke=function _getOffsetsFunc(e,t){return!t||~Fe.indexOf(e)?Ea(e):function(){return Xt}}(ve,be),Ae=0,Ee=0,Me=J(ve,ge);if(lt(we),we._dir=ge,se*=45,we.scroller=ve,we.scroll=fe?fe.time.bind(fe):Me,A=Me(),we.vars=_,T=T||_.animation,"refreshPriority"in _&&(at=1,-9999===_.refreshPriority&&(dt=we)),c.tweenScroll=c.tweenScroll||{top:ec(ve,Ne),left:ec(ve,Je)},we.tweenTo=k=c.tweenScroll[ge.p],we.scrubDuration=function(e){(o=La(e)&&e)?W?W.duration(e):W=Ke.to(T,{ease:"expo",totalProgress:"+=0.001",duration:o,paused:!0,onComplete:function onComplete(){return s&&s(we)}}):(W&&W.progress(1).kill(),W=0)},T&&(T.vars.lazy=!1,T._initted||!1!==T.vars.immediateRender&&!1!==_.immediateRender&&T.duration()&&T.render(0,!0,!0),we.animation=T.pause(),(T.scrollTrigger=we).scrubDuration(re),w=0,a=a||T.vars.id),Ot.push(we),ce&&(Ma(ce)&&!ce.push||(ce={snapTo:ce}),"scrollBehavior"in Ge.style&&Ke.set(be?[Ge,qe]:ve,{scrollBehavior:"auto"}),Le.forEach(function(e){return Ka(e)&&e.target===(be?je.scrollingElement||qe:ve)&&(e.smooth=!1)}),p=Ka(ce.snapTo)?ce.snapTo:"labels"===ce.snapTo?function _getClosestLabel(t){return function(e){return Ke.utils.snap(ib(t),e)}}(T):"labelsDirectional"===ce.snapTo?function _getLabelAtDirection(r){return function(e,t){return kb(ib(r))(e,t.direction)}}(T):!1!==ce.directional?function(e,t){return kb(ce.snapTo)(e,gt()-Ee<500?0:t.direction)}:Ke.utils.snap(ce.snapTo),g=ce.duration||{min:.1,max:2},g=Ma(g)?tt(g.min,g.max):tt(g,g),j=Ke.delayedCall(ce.delay||o/2||.1,function(){var e=Me(),t=gt()-Ee<500,r=k.tween;if(!(t||Math.abs(we.getVelocity())<10)||r||ot||Ae===e)we.isActive&&Ae!==e&&j.restart(!0);else{var n=(e-M)/B,o=T&&!he?T.totalProgress():n,i=t?0:(o-V)/(gt()-rt)*1e3||0,a=Ke.utils.clamp(-n,1-n,bt(i/2)*i/.185),s=n+(!1===ce.inertia?0:a),l=tt(0,1,p(s,we)),c=Math.round(M+l*B),u=ce.onStart,f=ce.onInterrupt,d=ce.onComplete;if(e<=P&&M<=e&&c!==e){if(r&&!r._initted&&r.data<=bt(c-e))return;!1===ce.inertia&&(a=l-n),k(c,{duration:g(bt(.185*Math.max(bt(s-o),bt(l-o))/i/.05||0)),ease:ce.ease||"power3",data:bt(c-e),onInterrupt:function onInterrupt(){return j.restart(!0)&&f&&f(we)},onComplete:function onComplete(){we.update(),Ae=Me(),w=V=T&&!he?T.totalProgress():we.progress,h&&h(we),d&&d(we)}},e,a*B,c-e-a*B),u&&u(we,k.tween)}}}).pause()),a&&(Dt[a]=we),i=(i=(ne=we.trigger=I(ne||oe))&&ne._gsap&&ne._gsap.stRevert)&&i(we),oe=!0===oe?ne:I(oe),Ja(Z)&&(Z={targets:ne,className:Z}),oe&&(!1===ie||ie===kt||(ie=!(!ie&&oe.parentNode&&oe.parentNode.style&&"flex"===db(oe.parentNode).display)&&Tt),we.pin=oe,(n=Ke.core.getCache(oe)).spacer?R=n.pinState:(l&&((l=I(l))&&!l.nodeType&&(l=l.current||l.nativeElement),n.spacerIsNative=!!l,l&&(n.spacerState=$b(l))),n.spacer=F=l||je.createElement("div"),F.classList.add("pin-spacer"),a&&F.classList.add("pin-spacer-"+a),n.pinState=R=$b(oe)),!1!==_.force3D&&Ke.set(oe,{force3D:!0}),we.spacer=F=n.spacer,r=db(oe),m=r[ie+ge.os2],Y=Ke.getProperty(oe),b=Ke.quickSetter(oe,ge.a,Et),Xb(oe,F,r),L=$b(oe)),u){e=Ma(u)?fb(u,Pt):Pt,D=ub("scroller-start",a,ve,ge,e,0),z=ub("scroller-end",a,ve,ge,e,0,D),t=D["offset"+ge.op.d2];var f=I(y(ve,"content")||ve);C=this.markerStart=ub("start",a,f,ge,e,t,0,fe),O=this.markerEnd=ub("end",a,f,ge,e,t,0,fe),fe&&($=Ke.quickSetter([C,O],ge.a,Et)),me||Fe.length&&!0===y(ve,"fixedMarkers")||(function _makePositionable(e){var t=db(e).position;e.style.position="absolute"===t||"fixed"===t?t:"relative"}(be?Ge:ve),Ke.set([D,z],{force3D:!0}),x=Ke.quickSetter(D,ge.a,Et),S=Ke.quickSetter(z,ge.a,Et))}if(fe){var d=fe.vars.onUpdate,v=fe.vars.onUpdateParams;fe.eventCallback("onUpdate",function(){we.update(0,0,1),d&&d.apply(v||[])})}we.previous=function(){return Ot[Ot.indexOf(we)-1]},we.next=function(){return Ot[Ot.indexOf(we)+1]},we.revert=function(e,t){if(!t)return we.kill(!0);var r=!1!==e||!we.enabled,n=nt;r!==we.isReverted&&(r&&(U=Math.max(Me(),we.scroll.rec||0),q=we.progress,G=T&&T.progress()),C&&[C,O,D,z].forEach(function(e){return e.style.display=r?"none":"block"}),r&&(nt=1,we.update(r)),oe&&(r?function _swapPinOut(e,t,r){Rt(r);var n=e._gsap;if(n.spacerIsNative)Rt(n.spacerState);else if(e._gsap.swappedIn){var o=t.parentNode;o&&(o.insertBefore(e,t),o.removeChild(t))}e._gsap.swappedIn=!1}(oe,F,R):ue&&we.isActive||Xb(oe,F,db(oe),K)),r||we.update(r),nt=n,we.isReverted=r)},we.refresh=function(e,t){if(!nt&&we.enabled||t)if(oe&&e&&ht)nb(ScrollTrigger,"scrollEnd",Fb);else{!ut&&_e&&_e(we),nt=1,Ee=gt(),k.tween&&(k.tween.kill(),k.tween=0),W&&W.pause(),ae&&T&&T.revert({kill:!1}).invalidate(),we.isReverted||we.revert(!0,!0),we._subPinOffset=!1;for(var r,n,o,i,a,s,l,c,u,f,d=Te(),p=ke(),g=fe?fe.duration():Ha(ve,ge),h=0,v=0,b=_.end,m=_.endTrigger||ne,y=_.start||(0!==_.start&&ne?oe?"0 0":"0 100%":0),x=we.pinnedContainer=_.pinnedContainer&&I(_.pinnedContainer),S=ne&&Math.max(0,Ot.indexOf(we))||0,w=S;w--;)(s=Ot[w]).end||s.refresh(0,1)||(nt=1),!(l=s.pin)||l!==ne&&l!==oe||s.isReverted||((f=f||[]).unshift(s),s.revert(!0,!0)),s!==Ot[w]&&(S--,w--);for(Ka(y)&&(y=y(we)),M=bc(y,ne,d,ge,Me(),C,D,we,p,Se,me,g,fe)||(oe?-.001:0),Ka(b)&&(b=b(we)),Ja(b)&&!b.indexOf("+=")&&(~b.indexOf(" ")?b=(Ja(y)?y.split(" ")[0]:"")+b:(h=tb(b.substr(2),d),b=Ja(y)?y:M+h,m=ne)),P=Math.max(M,bc(b||(m?"100% 0":g),m,d,ge,Me()+h,O,z,we,p,Se,me,g,fe))||-.001,B=P-M||(M-=.01)&&.001,h=0,w=S;w--;)(l=(s=Ot[w]).pin)&&s.start-s._pinPush<=M&&!fe&&0<s.end&&(r=s.end-s.start,(l===ne&&s.start-s._pinPush<M||l===x)&&!La(y)&&(h+=r*(1-s.progress)),l===oe&&(v+=r));if(M+=h,P+=h,we._pinPush=v,C&&h&&((r={})[ge.a]="+="+h,x&&(r[ge.p]="-="+Me()),Ke.set([C,O],r)),oe)r=db(oe),i=ge===Ne,o=Me(),H=parseFloat(Y(ge.a))+v,!g&&1<P&&((be?Ge:ve).style["overflow-"+ge.a]="scroll"),Xb(oe,F,r),L=$b(oe),n=Mt(oe,!0),c=me&&J(ve,i?Je:Ne)(),ie&&((K=[ie+ge.os2,B+v+Et]).t=F,(w=ie===Tt?hb(oe,ge)+B+v:0)&&K.push(ge.d,w+Et),Rt(K),x&&Ot.forEach(function(e){e.pin===x&&!1!==e.vars.pinSpacing&&(e._subPinOffset=!0)}),me&&Me(U)),me&&((a={top:n.top+(i?o-M:c)+Et,left:n.left+(i?c:o-M)+Et,boxSizing:"border-box",position:"fixed"})[mt]=a.maxWidth=Math.ceil(n.width)+Et,a[yt]=a.maxHeight=Math.ceil(n.height)+Et,a[kt]=a[kt+wt]=a[kt+xt]=a[kt+_t]=a[kt+St]="0",a[Tt]=r[Tt],a[Tt+wt]=r[Tt+wt],a[Tt+xt]=r[Tt+xt],a[Tt+_t]=r[Tt+_t],a[Tt+St]=r[Tt+St],X=function _copyState(e,t,r){for(var n,o=[],i=e.length,a=r?8:0;a<i;a+=2)n=e[a],o.push(n,n in t?t[n]:e[a+1]);return o.t=e.t,o}(R,a,ue),ut&&Me(0)),T?(u=T._initted,st(1),T.render(T.duration(),!0,!0),N=Y(ge.a)-H+B+v,B!==N&&me&&X.splice(X.length-2,2),T.render(0,!0,!0),u||T.invalidate(!0),T.parent||T.totalTime(T.totalTime()),st(0)):N=B;else if(ne&&Me()&&!fe)for(n=ne.parentNode;n&&n!==Ge;)n._pinOffset&&(M-=n._pinOffset,P-=n._pinOffset),n=n.parentNode;f&&f.forEach(function(e){return e.revert(!1,!0)}),we.start=M,we.end=P,A=E=ut?U:Me(),fe||ut||(A<U&&Me(U),we.scroll.rec=0),we.revert(!1,!0),j&&(Ae=-1,we.isActive&&Me(M+B*q),j.restart(!0)),nt=0,T&&he&&(T._initted||G)&&T.progress()!==G&&T.progress(G,!0).render(T.time(),!0,!0),q===we.progress&&!fe||(T&&!he&&T.totalProgress(q,!0),we.progress=(A-M)/B===q?0:q),oe&&ie&&(F._pinOffset=Math.round(we.progress*N)),te&&!ut&&te(we)}},we.getVelocity=function(){return(Me()-E)/(gt()-rt)*1e3||0},we.endAnimation=function(){Na(we.callbackAnimation),T&&(W?W.progress(1):T.paused()?he||Na(T,we.direction<0,1):Na(T,T.reversed()))},we.labelToScroll=function(e){return T&&T.labels&&(M||we.refresh()||M)+T.labels[e]/T.duration()*B||0},we.getTrailing=function(t){var e=Ot.indexOf(we),r=0<we.direction?Ot.slice(0,e).reverse():Ot.slice(e+1);return(Ja(t)?r.filter(function(e){return e.vars.preventOverlaps===t}):r).filter(function(e){return 0<we.direction?e.end<=M:e.start>=P})},we.update=function(e,t,r){if(!fe||r||e){var n,o,i,a,s,l,c,u=ut?U:we.scroll(),f=e?0:(u-M)/B,d=f<0?0:1<f?1:f||0,p=we.progress;if(t&&(E=A,A=fe?Me():u,ce&&(V=w,w=T&&!he?T.totalProgress():d)),se&&!d&&oe&&!nt&&!pt&&ht&&M<u+(u-E)/(gt()-rt)*se&&(d=1e-4),d!==p&&we.enabled){if(a=(s=(n=we.isActive=!!d&&d<1)!=(!!p&&p<1))||!!d!=!!p,we.direction=p<d?1:-1,we.progress=d,a&&!nt&&(o=d&&!p?0:1===d?1:1===p?2:3,he&&(i=!s&&"none"!==xe[o+1]&&xe[o+1]||xe[o],c=T&&("complete"===i||"reset"===i||i in T))),pe&&(s||c)&&(c||re||!T)&&(Ka(pe)?pe(we):we.getTrailing(pe).forEach(function(e){return e.endAnimation()})),he||(!W||nt||pt?T&&T.totalProgress(d,!!nt):((fe||dt&&dt!==we)&&W.render(W._dp._time-W._start),W.resetTo?W.resetTo("totalProgress",d,T._tTime/T._tDur):(W.vars.totalProgress=d,W.invalidate().restart()))),oe)if(e&&ie&&(F.style[ie+ge.os2]=m),me){if(a){if(l=!e&&p<d&&u<P+1&&u+1>=Ha(ve,ge),ue)if(e||!n&&!l)dc(oe,F);else{var g=Mt(oe,!0),h=u-M;dc(oe,Ge,g.top+(ge===Ne?h:0)+Et,g.left+(ge===Ne?0:h)+Et)}Rt(n||l?X:L),N!==B&&d<1&&n||b(H+(1!==d||l?0:N))}}else b(Aa(H+N*d));!ce||k.tween||nt||pt||j.restart(!0),Z&&(s||le&&d&&(d<1||!ct))&&et(Z.targets).forEach(function(e){return e.classList[n||le?"add":"remove"](Z.className)}),!Q||he||e||Q(we),a&&!nt?(he&&(c&&("complete"===i?T.pause().totalProgress(1):"reset"===i?T.restart(!0).pause():"restart"===i?T.restart(!0):T[i]()),Q&&Q(we)),!s&&ct||(ee&&s&&Oa(we,ee),ye[o]&&Oa(we,ye[o]),le&&(1===d?we.kill(!1,1):ye[o]=0),s||ye[o=1===d?1:3]&&Oa(we,ye[o])),de&&!n&&Math.abs(we.getVelocity())>(La(de)?de:2500)&&(Na(we.callbackAnimation),W?W.progress(1):Na(T,"reverse"===i?1:!d,1))):he&&Q&&!nt&&Q(we)}if(S){var v=fe?u/fe.duration()*(fe._caScrollDist||0):u;x(v+(D._isFlipped?1:0)),S(v)}$&&$(-u/fe.duration()*(fe._caScrollDist||0))}},we.enable=function(e,t){we.enabled||(we.enabled=!0,nb(ve,"resize",Cb),nb(be?je:ve,"scroll",Ab),_e&&nb(ScrollTrigger,"refreshInit",_e),!1!==e&&(we.progress=q=0,A=E=Ae=Me()),!1!==t&&we.refresh())},we.getTween=function(e){return e&&k?k.tween:W},we.setPositions=function(e,t){oe&&(H+=e-M,N+=t-e-B,ie===Tt&&we.adjustPinSpacing(t-e-B)),we.start=M=e,we.end=P=t,B=t-e,we.update()},we.adjustPinSpacing=function(e){if(K){var t=K.indexOf(ge.d)+1;K[t]=parseFloat(K[t])+e+Et,K[1]=parseFloat(K[1])+e+Et,Rt(K)}},we.disable=function(e,t){if(we.enabled&&(!1!==e&&we.revert(!0,!0),we.enabled=we.isActive=!1,t||W&&W.pause(),U=0,n&&(n.uncache=1),_e&&ob(ScrollTrigger,"refreshInit",_e),j&&(j.pause(),k.tween&&k.tween.kill()&&(k.tween=0)),!be)){for(var r=Ot.length;r--;)if(Ot[r].scroller===ve&&Ot[r]!==we)return;ob(ve,"resize",Cb),ob(ve,"scroll",Ab)}},we.kill=function(e,t){we.disable(e,t),W&&!t&&W.kill(),a&&delete Dt[a];var r=Ot.indexOf(we);0<=r&&Ot.splice(r,1),r===it&&0<Bt&&it--,r=0,Ot.forEach(function(e){return e.scroller===we.scroller&&(r=1)}),r||ut||(we.scroll.rec=0),T&&(T.scrollTrigger=null,e&&T.revert({kill:!1}),t||T.kill()),C&&[C,O,D,z].forEach(function(e){return e.parentNode&&e.parentNode.removeChild(e)}),dt===we&&(dt=0),oe&&(n&&(n.uncache=1),r=0,Ot.forEach(function(e){return e.pin===oe&&r++}),r||(n.spacer=0)),_.onKill&&_.onKill(we)},we.enable(!1,!1),i&&i(we),T&&T.add&&!B?Ke.delayedCall(.01,function(){return M||P||we.refresh()})&&(B=.01)&&(M=P=0):we.refresh(),oe&&function _queueRefreshAll(){if(ft!==It){var e=ft=It;requestAnimationFrame(function(){return e===It&&zt(!0)})}}()}else this.update=this.refresh=this.kill=za},ScrollTrigger.register=function register(e){return a||(Ke=e||Ca(),Ba()&&window.document&&ScrollTrigger.enable(),a=vt),a},ScrollTrigger.defaults=function defaults(e){if(e)for(var t in e)Ct[t]=e[t];return Ct},ScrollTrigger.disable=function disable(t,r){vt=0,Ot.forEach(function(e){return e[r?"kill":"disable"](t)}),ob(We,"wheel",Ab),ob(je,"scroll",Ab),clearInterval(c),ob(je,"touchcancel",za),ob(Ge,"touchstart",za),mb(ob,je,"pointerdown,touchstart,mousedown",xa),mb(ob,je,"pointerup,touchend,mouseup",ya),l.kill(),Ia(ob);for(var e=0;e<Le.length;e+=3)pb(ob,Le[e],Le[e+1]),pb(ob,Le[e],Le[e+2])},ScrollTrigger.enable=function enable(){if(We=window,je=document,qe=je.documentElement,Ge=je.body,Ke&&(et=Ke.utils.toArray,tt=Ke.utils.clamp,lt=Ke.core.context||za,st=Ke.core.suppressOverwrites||za,x=We.history.scrollRestoration||"auto",Ke.core.globals("ScrollTrigger",ScrollTrigger),Ge)){vt=1,k.register(Ke),ScrollTrigger.isTouch=k.isTouch,P=k.isTouch&&/(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent),nb(We,"wheel",Ab),s=[We,je,qe,Ge],Ke.matchMedia?(ScrollTrigger.matchMedia=function(e){var t,r=Ke.matchMedia();for(t in e)r.add(t,e[t]);return r},Ke.addEventListener("matchMediaInit",function(){return Jb()}),Ke.addEventListener("matchMediaRevert",function(){return Ib()}),Ke.addEventListener("matchMedia",function(){zt(0,1),H("matchMedia")}),Ke.matchMedia("(orientation: portrait)",function(){return Bb(),Bb})):console.warn("Requires GSAP 3.11.0 or later"),Bb(),nb(je,"scroll",Ab);var e,t,r=Ge.style,n=r.borderTopStyle,o=Ke.core.Animation.prototype;for(o.revert||Object.defineProperty(o,"revert",{value:function value(){return this.time(-.01,!0)}}),r.borderTopStyle="solid",e=Mt(Ge),Ne.m=Math.round(e.top+Ne.sc())||0,Je.m=Math.round(e.left+Je.sc())||0,n?r.borderTopStyle=n:r.removeProperty("border-top-style"),c=setInterval(zb,250),Ke.delayedCall(.5,function(){return pt=0}),nb(je,"touchcancel",za),nb(Ge,"touchstart",za),mb(nb,je,"pointerdown,touchstart,mousedown",xa),mb(nb,je,"pointerup,touchend,mouseup",ya),u=Ke.utils.checkPrefix("transform"),G.push(u),a=gt(),l=Ke.delayedCall(.2,zt).pause(),p=[je,"visibilitychange",function(){var e=We.innerWidth,t=We.innerHeight;je.hidden?(f=e,d=t):f===e&&d===t||Cb()},je,"DOMContentLoaded",zt,We,"load",zt,We,"resize",Cb],Ia(nb),Ot.forEach(function(e){return e.enable(0,1)}),t=0;t<Le.length;t+=3)pb(ob,Le[t],Le[t+1]),pb(ob,Le[t],Le[t+2])}},ScrollTrigger.config=function config(e){"limitCallbacks"in e&&(ct=!!e.limitCallbacks);var t=e.syncInterval;t&&clearInterval(c)||(c=t)&&setInterval(zb,t),"ignoreMobileResize"in e&&(v=1===ScrollTrigger.isTouch&&e.ignoreMobileResize),"autoRefreshEvents"in e&&(Ia(ob)||Ia(nb,e.autoRefreshEvents||"none"),g=-1===(e.autoRefreshEvents+"").indexOf("resize"))},ScrollTrigger.scrollerProxy=function scrollerProxy(e,t){var r=I(e),n=Le.indexOf(r),o=Da(r);~n&&Le.splice(n,o?6:2),t&&(o?Fe.unshift(We,t,Ge,t,qe,t):Fe.unshift(r,t))},ScrollTrigger.clearMatchMedia=function clearMatchMedia(t){Ot.forEach(function(e){return e._ctx&&e._ctx.query===t&&e._ctx.kill(!0,!0)})},ScrollTrigger.isInViewport=function isInViewport(e,t,r){var n=(Ja(e)?I(e):e).getBoundingClientRect(),o=n[r?mt:yt]*t||0;return r?0<n.right-o&&n.left+o<We.innerWidth:0<n.bottom-o&&n.top+o<We.innerHeight},ScrollTrigger.positionInViewport=function positionInViewport(e,t,r){Ja(e)&&(e=I(e));var n=e.getBoundingClientRect(),o=n[r?mt:yt],i=null==t?o/2:t in D?D[t]*o:~t.indexOf("%")?parseFloat(t)*o/100:parseFloat(t)||0;return r?(n.left+i)/We.innerWidth:(n.top+i)/We.innerHeight},ScrollTrigger.killAll=function killAll(e){if(Ot.forEach(function(e){return"ScrollSmoother"!==e.vars.id&&e.kill()}),!0!==e){var t=X.killAll||[];X={},t.forEach(function(e){return e()})}},ScrollTrigger);function ScrollTrigger(e,t){a||ScrollTrigger.register(Ke)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),this.init(e,t)}Z.version="3.11.3",Z.saveStyles=function(e){return e?et(e).forEach(function(e){if(e&&e.style){var t=V.indexOf(e);0<=t&&V.splice(t,5),V.push(e,e.style.cssText,e.getBBox&&e.getAttribute("transform"),Ke.core.getCache(e),lt())}}):V},Z.revert=function(e,t){return Jb(!e,t)},Z.create=function(e,t){return new Z(e,t)},Z.refresh=function(e){return e?Cb():(a||Z.register())&&zt(!0)},Z.update=j,Z.clearScrollMemory=Kb,Z.maxScroll=function(e,t){return Ha(e,t?Je:Ne)},Z.getScrollFunc=function(e,t){return J(I(e),t?Je:Ne)},Z.getById=function(e){return Dt[e]},Z.getAll=function(){return Ot.filter(function(e){return"ScrollSmoother"!==e.vars.id})},Z.isScrolling=function(){return!!ht},Z.snapDirectional=kb,Z.addEventListener=function(e,t){var r=X[e]||(X[e]=[]);~r.indexOf(t)||r.push(t)},Z.removeEventListener=function(e,t){var r=X[e],n=r&&r.indexOf(t);0<=n&&r.splice(n,1)},Z.batch=function(e,t){function Do(e,t){var r=[],n=[],o=Ke.delayedCall(i,function(){t(r,n),r=[],n=[]}).pause();return function(e){r.length||o.restart(!0),r.push(e.trigger),n.push(e),a<=r.length&&o.progress(1)}}var r,n=[],o={},i=t.interval||.016,a=t.batchMax||1e9;for(r in t)o[r]="on"===r.substr(0,2)&&Ka(t[r])&&"onRefreshInit"!==r?Do(0,t[r]):t[r];return Ka(a)&&(a=a(),nb(Z,"refresh",function(){return a=t.batchMax()})),et(e).forEach(function(e){var t={};for(r in o)t[r]=o[r];t.trigger=e,n.push(Z.create(t))}),n};function gc(e,t,r,n){return n<t?e(n):t<0&&e(0),n<r?(n-t)/(r-t):r<0?t/(t-r):1}function hc(e,t){!0===t?e.style.removeProperty("touch-action"):e.style.touchAction=!0===t?"auto":t?"pan-"+t+(k.isTouch?" pinch-zoom":""):"none",e===qe&&hc(Ge,t)}function jc(e){var t,r=e.event,n=e.target,o=e.axis,i=(r.changedTouches?r.changedTouches[0]:r).target,a=i._gsap||Ke.core.getCache(i),s=gt();if(!a._isScrollT||2e3<s-a._isScrollT){for(;i&&i.scrollHeight<=i.clientHeight;)i=i.parentNode;a._isScroll=i&&!Da(i)&&i!==n&&(te[(t=db(i)).overflowY]||te[t.overflowX]),a._isScrollT=s}!a._isScroll&&"x"!==o||(r.stopPropagation(),r._gsapAllow=!0)}function kc(e,t,r,n){return k.create({target:e,capture:!0,debounce:!1,lockAxis:!0,type:t,onWheel:n=n&&jc,onPress:n,onDrag:n,onScroll:n,onEnable:function onEnable(){return r&&nb(je,k.eventTypes[0],ne,!1,!0)},onDisable:function onDisable(){return ob(je,k.eventTypes[0],ne,!0)}})}function oc(e){function zp(){return o=!1}function Cp(){i=Ha(d,Ne),T=tt(P?1:0,i),f&&(_=tt(0,Ha(d,Je))),l=It}function Dp(){h._gsap.y=Aa(parseFloat(h._gsap.y)+v.offset)+"px",h.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+parseFloat(h._gsap.y)+", 0, 1)",v.offset=v.cacheID=0}function Jp(){Cp(),a.isActive()&&a.vars.scrollY>i&&(v()>i?a.progress(1)&&v(i):a.resetTo("scrollY",i))}Ma(e)||(e={}),e.preventDefault=e.isNormalizer=e.allowClicks=!0,e.type||(e.type="wheel,touch"),e.debounce=!!e.debounce,e.id=e.id||"normalizer";var n,i,l,o,a,c,u,s,f=e.normalizeScrollX,t=e.momentum,r=e.allowNestedScroll,d=I(e.target)||qe,p=Ke.core.globals().ScrollSmoother,g=p&&p.get(),h=P&&(e.content&&I(e.content)||g&&!1!==e.content&&!g.smooth()&&g.content()),v=J(d,Ne),b=J(d,Je),m=1,y=(k.isTouch&&We.visualViewport?We.visualViewport.scale*We.visualViewport.width:We.outerWidth)/We.innerWidth,x=0,S=Ka(t)?function(){return t(n)}:function(){return t||2.8},w=kc(d,e.type,!0,r),_=za,T=za;return h&&Ke.set(h,{y:"+=0"}),e.ignoreCheck=function(e){return P&&"touchmove"===e.type&&function ignoreDrag(){if(o){requestAnimationFrame(zp);var e=Aa(n.deltaY/2),t=T(v.v-e);if(h&&t!==v.v+v.offset){v.offset=t-v.v;var r=Aa((parseFloat(h&&h._gsap.y)||0)-v.offset);h.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+r+", 0, 1)",h._gsap.y=r+"px",v.cacheID=Le.cache,j()}return!0}v.offset&&Dp(),o=!0}()||1.05<m&&"touchstart"!==e.type||n.isGesturing||e.touches&&1<e.touches.length},e.onPress=function(){var e=m;m=Aa((We.visualViewport&&We.visualViewport.scale||1)/y),a.pause(),e!==m&&hc(d,1.01<m||!f&&"x"),c=b(),u=v(),Cp(),l=It},e.onRelease=e.onGestureStart=function(e,t){if(v.offset&&Dp(),t){Le.cache++;var r,n,o=S();f&&(n=(r=b())+.05*o*-e.velocityX/.227,o*=gc(b,r,n,Ha(d,Je)),a.vars.scrollX=_(n)),n=(r=v())+.05*o*-e.velocityY/.227,o*=gc(v,r,n,Ha(d,Ne)),a.vars.scrollY=T(n),a.invalidate().duration(o).play(.01),(P&&a.vars.scrollY>=i||i-1<=r)&&Ke.to({},{onUpdate:Jp,duration:o})}else s.restart(!0)},e.onWheel=function(){a._ts&&a.pause(),1e3<gt()-x&&(l=0,x=gt())},e.onChange=function(e,t,r,n,o){if(It!==l&&Cp(),t&&f&&b(_(n[2]===t?c+(e.startX-e.x):b()+t-n[1])),r){v.offset&&Dp();var i=o[2]===r,a=i?u+e.startY-e.y:v()+r-o[1],s=T(a);i&&a!==s&&(u+=s-a),v(s)}(r||t)&&j()},e.onEnable=function(){hc(d,!f&&"x"),Z.addEventListener("refresh",Jp),nb(We,"resize",Jp),v.smooth&&(v.target.style.scrollBehavior="auto",v.smooth=b.smooth=!1),w.enable()},e.onDisable=function(){hc(d,!0),ob(We,"resize",Jp),Z.removeEventListener("refresh",Jp),w.kill()},e.lockAxis=!1!==e.lockAxis,((n=new k(e)).iOS=P)&&!v()&&v(1),P&&Ke.ticker.add(za),s=n._dc,a=Ke.to(n,{ease:"power4",paused:!0,scrollX:f?"+=0.1":"+=0",scrollY:"+=0.1",onComplete:s.vars.onComplete}),n}var ee,te={auto:1,scroll:1},re=/(input|label|select|textarea)/i,ne=function _captureInputs(e){var t=re.test(e.target.tagName);(t||ee)&&(e._gsapAllow=!0,ee=t)};Z.sort=function(e){return Ot.sort(e||function(e,t){return-1e6*(e.vars.refreshPriority||0)+e.start-(t.start+-1e6*(t.vars.refreshPriority||0))})},Z.observe=function(e){return new k(e)},Z.normalizeScroll=function(e){if(void 0===e)return h;if(!0===e&&h)return h.enable();if(!1===e)return h&&h.kill();var t=e instanceof k?e:oc(e);return h&&h.target===t.target&&h.kill(),Da(t.target)&&(h=t),t},Z.core={_getVelocityProp:K,_inputObserver:kc,_scrollers:Le,_proxies:Fe,bridge:{ss:function ss(){ht||H("scrollStart"),ht=gt()},ref:function ref(){return nt}}},Ca()&&Ke.registerPlugin(Z),e.ScrollTrigger=Z,e.default=Z;if (typeof(window)==="undefined"||window!==e){Object.defineProperty(e,"__esModule",{value:!0})} else {delete e.default}});


/***/ }),

/***/ "./src/libraries/swiper-bundle.js":
/*!****************************************!*\
  !*** ./src/libraries/swiper-bundle.js ***!
  \****************************************/
/***/ (() => {

/**
 * Swiper 11.1.15
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * https://swiperjs.com
 *
 * Copyright 2014-2024 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: November 18, 2024
 */


window.Swiper = function () {
  "use strict";

  function e(e) {
    return null !== e && "object" == typeof e && "constructor" in e && e.constructor === Object
  }

  function t(s, a) {
    void 0 === s && (s = {}), void 0 === a && (a = {}), Object.keys(a).forEach((i => {
      void 0 === s[i] ? s[i] = a[i] : e(a[i]) && e(s[i]) && Object.keys(a[i]).length > 0 && t(s[i], a[i])
    }))
  }

  const s = {
    body: {},
    addEventListener() {
    },
    removeEventListener() {
    },
    activeElement: {
      blur() {
      }, nodeName: ""
    },
    querySelector: () => null,
    querySelectorAll: () => [],
    getElementById: () => null,
    createEvent: () => ({
      initEvent() {
      }
    }),
    createElement: () => ({
      children: [], childNodes: [], style: {}, setAttribute() {
      }, getElementsByTagName: () => []
    }),
    createElementNS: () => ({}),
    importNode: () => null,
    location: {hash: "", host: "", hostname: "", href: "", origin: "", pathname: "", protocol: "", search: ""}
  };

  function a() {
    const e = "undefined" != typeof document ? document : {};
    return t(e, s), e
  }

  const i = {
    document: s,
    navigator: {userAgent: ""},
    location: {hash: "", host: "", hostname: "", href: "", origin: "", pathname: "", protocol: "", search: ""},
    history: {
      replaceState() {
      }, pushState() {
      }, go() {
      }, back() {
      }
    },
    CustomEvent: function () {
      return this
    },
    addEventListener() {
    },
    removeEventListener() {
    },
    getComputedStyle: () => ({getPropertyValue: () => ""}),
    Image() {
    },
    Date() {
    },
    screen: {},
    setTimeout() {
    },
    clearTimeout() {
    },
    matchMedia: () => ({}),
    requestAnimationFrame: e => "undefined" == typeof setTimeout ? (e(), null) : setTimeout(e, 0),
    cancelAnimationFrame(e) {
      "undefined" != typeof setTimeout && clearTimeout(e)
    }
  };

  function r() {
    const e = "undefined" != typeof window ? window : {};
    return t(e, i), e
  }

  function n(e) {
    return void 0 === e && (e = ""), e.trim().split(" ").filter((e => !!e.trim()))
  }

  function l(e, t) {
    return void 0 === t && (t = 0), setTimeout(e, t)
  }

  function o() {
    return Date.now()
  }

  function d(e, t) {
    void 0 === t && (t = "x");
    const s = r();
    let a, i, n;
    const l = function (e) {
      const t = r();
      let s;
      return t.getComputedStyle && (s = t.getComputedStyle(e, null)), !s && e.currentStyle && (s = e.currentStyle), s || (s = e.style), s
    }(e);
    return s.WebKitCSSMatrix ? (i = l.transform || l.webkitTransform, i.split(",").length > 6 && (i = i.split(", ").map((e => e.replace(",", "."))).join(", ")), n = new s.WebKitCSSMatrix("none" === i ? "" : i)) : (n = l.MozTransform || l.OTransform || l.MsTransform || l.msTransform || l.transform || l.getPropertyValue("transform").replace("translate(", "matrix(1, 0, 0, 1,"), a = n.toString().split(",")), "x" === t && (i = s.WebKitCSSMatrix ? n.m41 : 16 === a.length ? parseFloat(a[12]) : parseFloat(a[4])), "y" === t && (i = s.WebKitCSSMatrix ? n.m42 : 16 === a.length ? parseFloat(a[13]) : parseFloat(a[5])), i || 0
  }

  function c(e) {
    return "object" == typeof e && null !== e && e.constructor && "Object" === Object.prototype.toString.call(e).slice(8, -1)
  }

  function p() {
    const e = Object(arguments.length <= 0 ? void 0 : arguments[0]), t = ["__proto__", "constructor", "prototype"];
    for (let a = 1; a < arguments.length; a += 1) {
      const i = a < 0 || arguments.length <= a ? void 0 : arguments[a];
      if (null != i && (s = i, !("undefined" != typeof window && void 0 !== window.HTMLElement ? s instanceof HTMLElement : s && (1 === s.nodeType || 11 === s.nodeType)))) {
        const s = Object.keys(Object(i)).filter((e => t.indexOf(e) < 0));
        for (let t = 0, a = s.length; t < a; t += 1) {
          const a = s[t], r = Object.getOwnPropertyDescriptor(i, a);
          void 0 !== r && r.enumerable && (c(e[a]) && c(i[a]) ? i[a].__swiper__ ? e[a] = i[a] : p(e[a], i[a]) : !c(e[a]) && c(i[a]) ? (e[a] = {}, i[a].__swiper__ ? e[a] = i[a] : p(e[a], i[a])) : e[a] = i[a])
        }
      }
    }
    var s;
    return e
  }

  function u(e, t, s) {
    e.style.setProperty(t, s)
  }

  function m(e) {
    let {swiper: t, targetPosition: s, side: a} = e;
    const i = r(), n = -t.translate;
    let l, o = null;
    const d = t.params.speed;
    t.wrapperEl.style.scrollSnapType = "none", i.cancelAnimationFrame(t.cssModeFrameID);
    const c = s > n ? "next" : "prev", p = (e, t) => "next" === c && e >= t || "prev" === c && e <= t, u = () => {
      l = (new Date).getTime(), null === o && (o = l);
      const e = Math.max(Math.min((l - o) / d, 1), 0), r = .5 - Math.cos(e * Math.PI) / 2;
      let c = n + r * (s - n);
      if (p(c, s) && (c = s), t.wrapperEl.scrollTo({[a]: c}), p(c, s)) return t.wrapperEl.style.overflow = "hidden", t.wrapperEl.style.scrollSnapType = "", setTimeout((() => {
        t.wrapperEl.style.overflow = "", t.wrapperEl.scrollTo({[a]: c})
      })), void i.cancelAnimationFrame(t.cssModeFrameID);
      t.cssModeFrameID = i.requestAnimationFrame(u)
    };
    u()
  }

  function h(e) {
    return e.querySelector(".swiper-slide-transform") || e.shadowRoot && e.shadowRoot.querySelector(".swiper-slide-transform") || e
  }

  function f(e, t) {
    void 0 === t && (t = "");
    const s = [...e.children];
    return e instanceof HTMLSlotElement && s.push(...e.assignedElements()), t ? s.filter((e => e.matches(t))) : s
  }

  function g(e) {
    try {
      return void console.warn(e)
    } catch (e) {
    }
  }

  function v(e, t) {
    void 0 === t && (t = []);
    const s = document.createElement(e);
    return s.classList.add(...Array.isArray(t) ? t : n(t)), s
  }

  function w(e) {
    const t = r(), s = a(), i = e.getBoundingClientRect(), n = s.body, l = e.clientTop || n.clientTop || 0,
      o = e.clientLeft || n.clientLeft || 0, d = e === t ? t.scrollY : e.scrollTop,
      c = e === t ? t.scrollX : e.scrollLeft;
    return {top: i.top + d - l, left: i.left + c - o}
  }

  function b(e, t) {
    return r().getComputedStyle(e, null).getPropertyValue(t)
  }

  function y(e) {
    let t, s = e;
    if (s) {
      for (t = 0; null !== (s = s.previousSibling);) 1 === s.nodeType && (t += 1);
      return t
    }
  }

  function E(e, t) {
    const s = [];
    let a = e.parentElement;
    for (; a;) t ? a.matches(t) && s.push(a) : s.push(a), a = a.parentElement;
    return s
  }

  function x(e, t) {
    t && e.addEventListener("transitionend", (function s(a) {
      a.target === e && (t.call(e, a), e.removeEventListener("transitionend", s))
    }))
  }

  function S(e, t, s) {
    const a = r();
    return s ? e["width" === t ? "offsetWidth" : "offsetHeight"] + parseFloat(a.getComputedStyle(e, null).getPropertyValue("width" === t ? "margin-right" : "margin-top")) + parseFloat(a.getComputedStyle(e, null).getPropertyValue("width" === t ? "margin-left" : "margin-bottom")) : e.offsetWidth
  }

  function T(e) {
    return (Array.isArray(e) ? e : [e]).filter((e => !!e))
  }

  function M(e) {
    return t => Math.abs(t) > 0 && e.browser && e.browser.need3dFix && Math.abs(t) % 90 == 0 ? t + .001 : t
  }

  let C, P, L;

  function I() {
    return C || (C = function () {
      const e = r(), t = a();
      return {
        smoothScroll: t.documentElement && t.documentElement.style && "scrollBehavior" in t.documentElement.style,
        touch: !!("ontouchstart" in e || e.DocumentTouch && t instanceof e.DocumentTouch)
      }
    }()), C
  }

  function z(e) {
    return void 0 === e && (e = {}), P || (P = function (e) {
      let {userAgent: t} = void 0 === e ? {} : e;
      const s = I(), a = r(), i = a.navigator.platform, n = t || a.navigator.userAgent, l = {ios: !1, android: !1},
        o = a.screen.width, d = a.screen.height, c = n.match(/(Android);?[\s\/]+([\d.]+)?/);
      let p = n.match(/(iPad).*OS\s([\d_]+)/);
      const u = n.match(/(iPod)(.*OS\s([\d_]+))?/), m = !p && n.match(/(iPhone\sOS|iOS)\s([\d_]+)/), h = "Win32" === i;
      let f = "MacIntel" === i;
      return !p && f && s.touch && ["1024x1366", "1366x1024", "834x1194", "1194x834", "834x1112", "1112x834", "768x1024", "1024x768", "820x1180", "1180x820", "810x1080", "1080x810"].indexOf(`${o}x${d}`) >= 0 && (p = n.match(/(Version)\/([\d.]+)/), p || (p = [0, 1, "13_0_0"]), f = !1), c && !h && (l.os = "android", l.android = !0), (p || m || u) && (l.os = "ios", l.ios = !0), l
    }(e)), P
  }

  function A() {
    return L || (L = function () {
      const e = r(), t = z();
      let s = !1;

      function a() {
        const t = e.navigator.userAgent.toLowerCase();
        return t.indexOf("safari") >= 0 && t.indexOf("chrome") < 0 && t.indexOf("android") < 0
      }

      if (a()) {
        const t = String(e.navigator.userAgent);
        if (t.includes("Version/")) {
          const [e, a] = t.split("Version/")[1].split(" ")[0].split(".").map((e => Number(e)));
          s = e < 16 || 16 === e && a < 2
        }
      }
      const i = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent), n = a();
      return {isSafari: s || n, needPerspectiveFix: s, need3dFix: n || i && t.ios, isWebView: i}
    }()), L
  }

  var $ = {
    on(e, t, s) {
      const a = this;
      if (!a.eventsListeners || a.destroyed) return a;
      if ("function" != typeof t) return a;
      const i = s ? "unshift" : "push";
      return e.split(" ").forEach((e => {
        a.eventsListeners[e] || (a.eventsListeners[e] = []), a.eventsListeners[e][i](t)
      })), a
    }, once(e, t, s) {
      const a = this;
      if (!a.eventsListeners || a.destroyed) return a;
      if ("function" != typeof t) return a;

      function i() {
        a.off(e, i), i.__emitterProxy && delete i.__emitterProxy;
        for (var s = arguments.length, r = new Array(s), n = 0; n < s; n++) r[n] = arguments[n];
        t.apply(a, r)
      }

      return i.__emitterProxy = t, a.on(e, i, s)
    }, onAny(e, t) {
      const s = this;
      if (!s.eventsListeners || s.destroyed) return s;
      if ("function" != typeof e) return s;
      const a = t ? "unshift" : "push";
      return s.eventsAnyListeners.indexOf(e) < 0 && s.eventsAnyListeners[a](e), s
    }, offAny(e) {
      const t = this;
      if (!t.eventsListeners || t.destroyed) return t;
      if (!t.eventsAnyListeners) return t;
      const s = t.eventsAnyListeners.indexOf(e);
      return s >= 0 && t.eventsAnyListeners.splice(s, 1), t
    }, off(e, t) {
      const s = this;
      return !s.eventsListeners || s.destroyed ? s : s.eventsListeners ? (e.split(" ").forEach((e => {
        void 0 === t ? s.eventsListeners[e] = [] : s.eventsListeners[e] && s.eventsListeners[e].forEach(((a, i) => {
          (a === t || a.__emitterProxy && a.__emitterProxy === t) && s.eventsListeners[e].splice(i, 1)
        }))
      })), s) : s
    }, emit() {
      const e = this;
      if (!e.eventsListeners || e.destroyed) return e;
      if (!e.eventsListeners) return e;
      let t, s, a;
      for (var i = arguments.length, r = new Array(i), n = 0; n < i; n++) r[n] = arguments[n];
      "string" == typeof r[0] || Array.isArray(r[0]) ? (t = r[0], s = r.slice(1, r.length), a = e) : (t = r[0].events, s = r[0].data, a = r[0].context || e), s.unshift(a);
      return (Array.isArray(t) ? t : t.split(" ")).forEach((t => {
        e.eventsAnyListeners && e.eventsAnyListeners.length && e.eventsAnyListeners.forEach((e => {
          e.apply(a, [t, ...s])
        })), e.eventsListeners && e.eventsListeners[t] && e.eventsListeners[t].forEach((e => {
          e.apply(a, s)
        }))
      })), e
    }
  };
  const k = (e, t, s) => {
    t && !e.classList.contains(s) ? e.classList.add(s) : !t && e.classList.contains(s) && e.classList.remove(s)
  };
  const O = (e, t, s) => {
    t && !e.classList.contains(s) ? e.classList.add(s) : !t && e.classList.contains(s) && e.classList.remove(s)
  };
  const D = (e, t) => {
    if (!e || e.destroyed || !e.params) return;
    const s = t.closest(e.isElement ? "swiper-slide" : `.${e.params.slideClass}`);
    if (s) {
      let t = s.querySelector(`.${e.params.lazyPreloaderClass}`);
      !t && e.isElement && (s.shadowRoot ? t = s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`) : requestAnimationFrame((() => {
        s.shadowRoot && (t = s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`), t && t.remove())
      }))), t && t.remove()
    }
  }, G = (e, t) => {
    if (!e.slides[t]) return;
    const s = e.slides[t].querySelector('[loading="lazy"]');
    s && s.removeAttribute("loading")
  }, H = e => {
    if (!e || e.destroyed || !e.params) return;
    let t = e.params.lazyPreloadPrevNext;
    const s = e.slides.length;
    if (!s || !t || t < 0) return;
    t = Math.min(t, s);
    const a = "auto" === e.params.slidesPerView ? e.slidesPerViewDynamic() : Math.ceil(e.params.slidesPerView),
      i = e.activeIndex;
    if (e.params.grid && e.params.grid.rows > 1) {
      const s = i, r = [s - t];
      return r.push(...Array.from({length: t}).map(((e, t) => s + a + t))), void e.slides.forEach(((t, s) => {
        r.includes(t.column) && G(e, s)
      }))
    }
    const r = i + a - 1;
    if (e.params.rewind || e.params.loop) for (let a = i - t; a <= r + t; a += 1) {
      const t = (a % s + s) % s;
      (t < i || t > r) && G(e, t)
    } else for (let a = Math.max(i - t, 0); a <= Math.min(r + t, s - 1); a += 1) a !== i && (a > r || a < i) && G(e, a)
  };
  var B = {
    updateSize: function () {
      const e = this;
      let t, s;
      const a = e.el;
      t = void 0 !== e.params.width && null !== e.params.width ? e.params.width : a.clientWidth, s = void 0 !== e.params.height && null !== e.params.height ? e.params.height : a.clientHeight, 0 === t && e.isHorizontal() || 0 === s && e.isVertical() || (t = t - parseInt(b(a, "padding-left") || 0, 10) - parseInt(b(a, "padding-right") || 0, 10), s = s - parseInt(b(a, "padding-top") || 0, 10) - parseInt(b(a, "padding-bottom") || 0, 10), Number.isNaN(t) && (t = 0), Number.isNaN(s) && (s = 0), Object.assign(e, {
        width: t,
        height: s,
        size: e.isHorizontal() ? t : s
      }))
    }, updateSlides: function () {
      const e = this;

      function t(t, s) {
        return parseFloat(t.getPropertyValue(e.getDirectionLabel(s)) || 0)
      }

      const s = e.params, {wrapperEl: a, slidesEl: i, size: r, rtlTranslate: n, wrongRTL: l} = e,
        o = e.virtual && s.virtual.enabled, d = o ? e.virtual.slides.length : e.slides.length,
        c = f(i, `.${e.params.slideClass}, swiper-slide`), p = o ? e.virtual.slides.length : c.length;
      let m = [];
      const h = [], g = [];
      let v = s.slidesOffsetBefore;
      "function" == typeof v && (v = s.slidesOffsetBefore.call(e));
      let w = s.slidesOffsetAfter;
      "function" == typeof w && (w = s.slidesOffsetAfter.call(e));
      const y = e.snapGrid.length, E = e.slidesGrid.length;
      let x = s.spaceBetween, T = -v, M = 0, C = 0;
      if (void 0 === r) return;
      "string" == typeof x && x.indexOf("%") >= 0 ? x = parseFloat(x.replace("%", "")) / 100 * r : "string" == typeof x && (x = parseFloat(x)), e.virtualSize = -x, c.forEach((e => {
        n ? e.style.marginLeft = "" : e.style.marginRight = "", e.style.marginBottom = "", e.style.marginTop = ""
      })), s.centeredSlides && s.cssMode && (u(a, "--swiper-centered-offset-before", ""), u(a, "--swiper-centered-offset-after", ""));
      const P = s.grid && s.grid.rows > 1 && e.grid;
      let L;
      P ? e.grid.initSlides(c) : e.grid && e.grid.unsetSlides();
      const I = "auto" === s.slidesPerView && s.breakpoints && Object.keys(s.breakpoints).filter((e => void 0 !== s.breakpoints[e].slidesPerView)).length > 0;
      for (let a = 0; a < p; a += 1) {
        let i;
        if (L = 0, c[a] && (i = c[a]), P && e.grid.updateSlide(a, i, c), !c[a] || "none" !== b(i, "display")) {
          if ("auto" === s.slidesPerView) {
            I && (c[a].style[e.getDirectionLabel("width")] = "");
            const r = getComputedStyle(i), n = i.style.transform, l = i.style.webkitTransform;
            if (n && (i.style.transform = "none"), l && (i.style.webkitTransform = "none"), s.roundLengths) L = e.isHorizontal() ? S(i, "width", !0) : S(i, "height", !0); else {
              const e = t(r, "width"), s = t(r, "padding-left"), a = t(r, "padding-right"), n = t(r, "margin-left"),
                l = t(r, "margin-right"), o = r.getPropertyValue("box-sizing");
              if (o && "border-box" === o) L = e + n + l; else {
                const {clientWidth: t, offsetWidth: r} = i;
                L = e + s + a + n + l + (r - t)
              }
            }
            n && (i.style.transform = n), l && (i.style.webkitTransform = l), s.roundLengths && (L = Math.floor(L))
          } else L = (r - (s.slidesPerView - 1) * x) / s.slidesPerView, s.roundLengths && (L = Math.floor(L)), c[a] && (c[a].style[e.getDirectionLabel("width")] = `${L}px`);
          c[a] && (c[a].swiperSlideSize = L), g.push(L), s.centeredSlides ? (T = T + L / 2 + M / 2 + x, 0 === M && 0 !== a && (T = T - r / 2 - x), 0 === a && (T = T - r / 2 - x), Math.abs(T) < .001 && (T = 0), s.roundLengths && (T = Math.floor(T)), C % s.slidesPerGroup == 0 && m.push(T), h.push(T)) : (s.roundLengths && (T = Math.floor(T)), (C - Math.min(e.params.slidesPerGroupSkip, C)) % e.params.slidesPerGroup == 0 && m.push(T), h.push(T), T = T + L + x), e.virtualSize += L + x, M = L, C += 1
        }
      }
      if (e.virtualSize = Math.max(e.virtualSize, r) + w, n && l && ("slide" === s.effect || "coverflow" === s.effect) && (a.style.width = `${e.virtualSize + x}px`), s.setWrapperSize && (a.style[e.getDirectionLabel("width")] = `${e.virtualSize + x}px`), P && e.grid.updateWrapperSize(L, m), !s.centeredSlides) {
        const t = [];
        for (let a = 0; a < m.length; a += 1) {
          let i = m[a];
          s.roundLengths && (i = Math.floor(i)), m[a] <= e.virtualSize - r && t.push(i)
        }
        m = t, Math.floor(e.virtualSize - r) - Math.floor(m[m.length - 1]) > 1 && m.push(e.virtualSize - r)
      }
      if (o && s.loop) {
        const t = g[0] + x;
        if (s.slidesPerGroup > 1) {
          const a = Math.ceil((e.virtual.slidesBefore + e.virtual.slidesAfter) / s.slidesPerGroup),
            i = t * s.slidesPerGroup;
          for (let e = 0; e < a; e += 1) m.push(m[m.length - 1] + i)
        }
        for (let a = 0; a < e.virtual.slidesBefore + e.virtual.slidesAfter; a += 1) 1 === s.slidesPerGroup && m.push(m[m.length - 1] + t), h.push(h[h.length - 1] + t), e.virtualSize += t
      }
      if (0 === m.length && (m = [0]), 0 !== x) {
        const t = e.isHorizontal() && n ? "marginLeft" : e.getDirectionLabel("marginRight");
        c.filter(((e, t) => !(s.cssMode && !s.loop) || t !== c.length - 1)).forEach((e => {
          e.style[t] = `${x}px`
        }))
      }
      if (s.centeredSlides && s.centeredSlidesBounds) {
        let e = 0;
        g.forEach((t => {
          e += t + (x || 0)
        })), e -= x;
        const t = e > r ? e - r : 0;
        m = m.map((e => e <= 0 ? -v : e > t ? t + w : e))
      }
      if (s.centerInsufficientSlides) {
        let e = 0;
        g.forEach((t => {
          e += t + (x || 0)
        })), e -= x;
        const t = (s.slidesOffsetBefore || 0) + (s.slidesOffsetAfter || 0);
        if (e + t < r) {
          const s = (r - e - t) / 2;
          m.forEach(((e, t) => {
            m[t] = e - s
          })), h.forEach(((e, t) => {
            h[t] = e + s
          }))
        }
      }
      if (Object.assign(e, {
        slides: c,
        snapGrid: m,
        slidesGrid: h,
        slidesSizesGrid: g
      }), s.centeredSlides && s.cssMode && !s.centeredSlidesBounds) {
        u(a, "--swiper-centered-offset-before", -m[0] + "px"), u(a, "--swiper-centered-offset-after", e.size / 2 - g[g.length - 1] / 2 + "px");
        const t = -e.snapGrid[0], s = -e.slidesGrid[0];
        e.snapGrid = e.snapGrid.map((e => e + t)), e.slidesGrid = e.slidesGrid.map((e => e + s))
      }
      if (p !== d && e.emit("slidesLengthChange"), m.length !== y && (e.params.watchOverflow && e.checkOverflow(), e.emit("snapGridLengthChange")), h.length !== E && e.emit("slidesGridLengthChange"), s.watchSlidesProgress && e.updateSlidesOffset(), e.emit("slidesUpdated"), !(o || s.cssMode || "slide" !== s.effect && "fade" !== s.effect)) {
        const t = `${s.containerModifierClass}backface-hidden`, a = e.el.classList.contains(t);
        p <= s.maxBackfaceHiddenSlides ? a || e.el.classList.add(t) : a && e.el.classList.remove(t)
      }
    }, updateAutoHeight: function (e) {
      const t = this, s = [], a = t.virtual && t.params.virtual.enabled;
      let i, r = 0;
      "number" == typeof e ? t.setTransition(e) : !0 === e && t.setTransition(t.params.speed);
      const n = e => a ? t.slides[t.getSlideIndexByData(e)] : t.slides[e];
      if ("auto" !== t.params.slidesPerView && t.params.slidesPerView > 1) if (t.params.centeredSlides) (t.visibleSlides || []).forEach((e => {
        s.push(e)
      })); else for (i = 0; i < Math.ceil(t.params.slidesPerView); i += 1) {
        const e = t.activeIndex + i;
        if (e > t.slides.length && !a) break;
        s.push(n(e))
      } else s.push(n(t.activeIndex));
      for (i = 0; i < s.length; i += 1) if (void 0 !== s[i]) {
        const e = s[i].offsetHeight;
        r = e > r ? e : r
      }
      (r || 0 === r) && (t.wrapperEl.style.height = `${r}px`)
    }, updateSlidesOffset: function () {
      const e = this, t = e.slides,
        s = e.isElement ? e.isHorizontal() ? e.wrapperEl.offsetLeft : e.wrapperEl.offsetTop : 0;
      for (let a = 0; a < t.length; a += 1) t[a].swiperSlideOffset = (e.isHorizontal() ? t[a].offsetLeft : t[a].offsetTop) - s - e.cssOverflowAdjustment()
    }, updateSlidesProgress: function (e) {
      void 0 === e && (e = this && this.translate || 0);
      const t = this, s = t.params, {slides: a, rtlTranslate: i, snapGrid: r} = t;
      if (0 === a.length) return;
      void 0 === a[0].swiperSlideOffset && t.updateSlidesOffset();
      let n = -e;
      i && (n = e), t.visibleSlidesIndexes = [], t.visibleSlides = [];
      let l = s.spaceBetween;
      "string" == typeof l && l.indexOf("%") >= 0 ? l = parseFloat(l.replace("%", "")) / 100 * t.size : "string" == typeof l && (l = parseFloat(l));
      for (let e = 0; e < a.length; e += 1) {
        const o = a[e];
        let d = o.swiperSlideOffset;
        s.cssMode && s.centeredSlides && (d -= a[0].swiperSlideOffset);
        const c = (n + (s.centeredSlides ? t.minTranslate() : 0) - d) / (o.swiperSlideSize + l),
          p = (n - r[0] + (s.centeredSlides ? t.minTranslate() : 0) - d) / (o.swiperSlideSize + l), u = -(n - d),
          m = u + t.slidesSizesGrid[e], h = u >= 0 && u <= t.size - t.slidesSizesGrid[e],
          f = u >= 0 && u < t.size - 1 || m > 1 && m <= t.size || u <= 0 && m >= t.size;
        f && (t.visibleSlides.push(o), t.visibleSlidesIndexes.push(e)), k(o, f, s.slideVisibleClass), k(o, h, s.slideFullyVisibleClass), o.progress = i ? -c : c, o.originalProgress = i ? -p : p
      }
    }, updateProgress: function (e) {
      const t = this;
      if (void 0 === e) {
        const s = t.rtlTranslate ? -1 : 1;
        e = t && t.translate && t.translate * s || 0
      }
      const s = t.params, a = t.maxTranslate() - t.minTranslate();
      let {progress: i, isBeginning: r, isEnd: n, progressLoop: l} = t;
      const o = r, d = n;
      if (0 === a) i = 0, r = !0, n = !0; else {
        i = (e - t.minTranslate()) / a;
        const s = Math.abs(e - t.minTranslate()) < 1, l = Math.abs(e - t.maxTranslate()) < 1;
        r = s || i <= 0, n = l || i >= 1, s && (i = 0), l && (i = 1)
      }
      if (s.loop) {
        const s = t.getSlideIndexByData(0), a = t.getSlideIndexByData(t.slides.length - 1), i = t.slidesGrid[s],
          r = t.slidesGrid[a], n = t.slidesGrid[t.slidesGrid.length - 1], o = Math.abs(e);
        l = o >= i ? (o - i) / n : (o + n - r) / n, l > 1 && (l -= 1)
      }
      Object.assign(t, {
        progress: i,
        progressLoop: l,
        isBeginning: r,
        isEnd: n
      }), (s.watchSlidesProgress || s.centeredSlides && s.autoHeight) && t.updateSlidesProgress(e), r && !o && t.emit("reachBeginning toEdge"), n && !d && t.emit("reachEnd toEdge"), (o && !r || d && !n) && t.emit("fromEdge"), t.emit("progress", i)
    }, updateSlidesClasses: function () {
      const e = this, {slides: t, params: s, slidesEl: a, activeIndex: i} = e, r = e.virtual && s.virtual.enabled,
        n = e.grid && s.grid && s.grid.rows > 1, l = e => f(a, `.${s.slideClass}${e}, swiper-slide${e}`)[0];
      let o, d, c;
      if (r) if (s.loop) {
        let t = i - e.virtual.slidesBefore;
        t < 0 && (t = e.virtual.slides.length + t), t >= e.virtual.slides.length && (t -= e.virtual.slides.length), o = l(`[data-swiper-slide-index="${t}"]`)
      } else o = l(`[data-swiper-slide-index="${i}"]`); else n ? (o = t.filter((e => e.column === i))[0], c = t.filter((e => e.column === i + 1))[0], d = t.filter((e => e.column === i - 1))[0]) : o = t[i];
      o && (n || (c = function (e, t) {
        const s = [];
        for (; e.nextElementSibling;) {
          const a = e.nextElementSibling;
          t ? a.matches(t) && s.push(a) : s.push(a), e = a
        }
        return s
      }(o, `.${s.slideClass}, swiper-slide`)[0], s.loop && !c && (c = t[0]), d = function (e, t) {
        const s = [];
        for (; e.previousElementSibling;) {
          const a = e.previousElementSibling;
          t ? a.matches(t) && s.push(a) : s.push(a), e = a
        }
        return s
      }(o, `.${s.slideClass}, swiper-slide`)[0], s.loop && 0 === !d && (d = t[t.length - 1]))), t.forEach((e => {
        O(e, e === o, s.slideActiveClass), O(e, e === c, s.slideNextClass), O(e, e === d, s.slidePrevClass)
      })), e.emitSlidesClasses()
    }, updateActiveIndex: function (e) {
      const t = this, s = t.rtlTranslate ? t.translate : -t.translate, {
        snapGrid: a,
        params: i,
        activeIndex: r,
        realIndex: n,
        snapIndex: l
      } = t;
      let o, d = e;
      const c = e => {
        let s = e - t.virtual.slidesBefore;
        return s < 0 && (s = t.virtual.slides.length + s), s >= t.virtual.slides.length && (s -= t.virtual.slides.length), s
      };
      if (void 0 === d && (d = function (e) {
        const {slidesGrid: t, params: s} = e, a = e.rtlTranslate ? e.translate : -e.translate;
        let i;
        for (let e = 0; e < t.length; e += 1) void 0 !== t[e + 1] ? a >= t[e] && a < t[e + 1] - (t[e + 1] - t[e]) / 2 ? i = e : a >= t[e] && a < t[e + 1] && (i = e + 1) : a >= t[e] && (i = e);
        return s.normalizeSlideIndex && (i < 0 || void 0 === i) && (i = 0), i
      }(t)), a.indexOf(s) >= 0) o = a.indexOf(s); else {
        const e = Math.min(i.slidesPerGroupSkip, d);
        o = e + Math.floor((d - e) / i.slidesPerGroup)
      }
      if (o >= a.length && (o = a.length - 1), d === r && !t.params.loop) return void (o !== l && (t.snapIndex = o, t.emit("snapIndexChange")));
      if (d === r && t.params.loop && t.virtual && t.params.virtual.enabled) return void (t.realIndex = c(d));
      const p = t.grid && i.grid && i.grid.rows > 1;
      let u;
      if (t.virtual && i.virtual.enabled && i.loop) u = c(d); else if (p) {
        const e = t.slides.filter((e => e.column === d))[0];
        let s = parseInt(e.getAttribute("data-swiper-slide-index"), 10);
        Number.isNaN(s) && (s = Math.max(t.slides.indexOf(e), 0)), u = Math.floor(s / i.grid.rows)
      } else if (t.slides[d]) {
        const e = t.slides[d].getAttribute("data-swiper-slide-index");
        u = e ? parseInt(e, 10) : d
      } else u = d;
      Object.assign(t, {
        previousSnapIndex: l,
        snapIndex: o,
        previousRealIndex: n,
        realIndex: u,
        previousIndex: r,
        activeIndex: d
      }), t.initialized && H(t), t.emit("activeIndexChange"), t.emit("snapIndexChange"), (t.initialized || t.params.runCallbacksOnInit) && (n !== u && t.emit("realIndexChange"), t.emit("slideChange"))
    }, updateClickedSlide: function (e, t) {
      const s = this, a = s.params;
      let i = e.closest(`.${a.slideClass}, swiper-slide`);
      !i && s.isElement && t && t.length > 1 && t.includes(e) && [...t.slice(t.indexOf(e) + 1, t.length)].forEach((e => {
        !i && e.matches && e.matches(`.${a.slideClass}, swiper-slide`) && (i = e)
      }));
      let r, n = !1;
      if (i) for (let e = 0; e < s.slides.length; e += 1) if (s.slides[e] === i) {
        n = !0, r = e;
        break
      }
      if (!i || !n) return s.clickedSlide = void 0, void (s.clickedIndex = void 0);
      s.clickedSlide = i, s.virtual && s.params.virtual.enabled ? s.clickedIndex = parseInt(i.getAttribute("data-swiper-slide-index"), 10) : s.clickedIndex = r, a.slideToClickedSlide && void 0 !== s.clickedIndex && s.clickedIndex !== s.activeIndex && s.slideToClickedSlide()
    }
  };
  var N = {
    getTranslate: function (e) {
      void 0 === e && (e = this.isHorizontal() ? "x" : "y");
      const {params: t, rtlTranslate: s, translate: a, wrapperEl: i} = this;
      if (t.virtualTranslate) return s ? -a : a;
      if (t.cssMode) return a;
      let r = d(i, e);
      return r += this.cssOverflowAdjustment(), s && (r = -r), r || 0
    }, setTranslate: function (e, t) {
      const s = this, {rtlTranslate: a, params: i, wrapperEl: r, progress: n} = s;
      let l, o = 0, d = 0;
      s.isHorizontal() ? o = a ? -e : e : d = e, i.roundLengths && (o = Math.floor(o), d = Math.floor(d)), s.previousTranslate = s.translate, s.translate = s.isHorizontal() ? o : d, i.cssMode ? r[s.isHorizontal() ? "scrollLeft" : "scrollTop"] = s.isHorizontal() ? -o : -d : i.virtualTranslate || (s.isHorizontal() ? o -= s.cssOverflowAdjustment() : d -= s.cssOverflowAdjustment(), r.style.transform = `translate3d(${o}px, ${d}px, 0px)`);
      const c = s.maxTranslate() - s.minTranslate();
      l = 0 === c ? 0 : (e - s.minTranslate()) / c, l !== n && s.updateProgress(e), s.emit("setTranslate", s.translate, t)
    }, minTranslate: function () {
      return -this.snapGrid[0]
    }, maxTranslate: function () {
      return -this.snapGrid[this.snapGrid.length - 1]
    }, translateTo: function (e, t, s, a, i) {
      void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === s && (s = !0), void 0 === a && (a = !0);
      const r = this, {params: n, wrapperEl: l} = r;
      if (r.animating && n.preventInteractionOnTransition) return !1;
      const o = r.minTranslate(), d = r.maxTranslate();
      let c;
      if (c = a && e > o ? o : a && e < d ? d : e, r.updateProgress(c), n.cssMode) {
        const e = r.isHorizontal();
        if (0 === t) l[e ? "scrollLeft" : "scrollTop"] = -c; else {
          if (!r.support.smoothScroll) return m({swiper: r, targetPosition: -c, side: e ? "left" : "top"}), !0;
          l.scrollTo({[e ? "left" : "top"]: -c, behavior: "smooth"})
        }
        return !0
      }
      return 0 === t ? (r.setTransition(0), r.setTranslate(c), s && (r.emit("beforeTransitionStart", t, i), r.emit("transitionEnd"))) : (r.setTransition(t), r.setTranslate(c), s && (r.emit("beforeTransitionStart", t, i), r.emit("transitionStart")), r.animating || (r.animating = !0, r.onTranslateToWrapperTransitionEnd || (r.onTranslateToWrapperTransitionEnd = function (e) {
        r && !r.destroyed && e.target === this && (r.wrapperEl.removeEventListener("transitionend", r.onTranslateToWrapperTransitionEnd), r.onTranslateToWrapperTransitionEnd = null, delete r.onTranslateToWrapperTransitionEnd, r.animating = !1, s && r.emit("transitionEnd"))
      }), r.wrapperEl.addEventListener("transitionend", r.onTranslateToWrapperTransitionEnd))), !0
    }
  };

  function X(e) {
    let {swiper: t, runCallbacks: s, direction: a, step: i} = e;
    const {activeIndex: r, previousIndex: n} = t;
    let l = a;
    if (l || (l = r > n ? "next" : r < n ? "prev" : "reset"), t.emit(`transition${i}`), s && r !== n) {
      if ("reset" === l) return void t.emit(`slideResetTransition${i}`);
      t.emit(`slideChangeTransition${i}`), "next" === l ? t.emit(`slideNextTransition${i}`) : t.emit(`slidePrevTransition${i}`)
    }
  }

  var Y = {
    slideTo: function (e, t, s, a, i) {
      void 0 === e && (e = 0), void 0 === s && (s = !0), "string" == typeof e && (e = parseInt(e, 10));
      const r = this;
      let n = e;
      n < 0 && (n = 0);
      const {
        params: l,
        snapGrid: o,
        slidesGrid: d,
        previousIndex: c,
        activeIndex: p,
        rtlTranslate: u,
        wrapperEl: h,
        enabled: f
      } = r;
      if (!f && !a && !i || r.destroyed || r.animating && l.preventInteractionOnTransition) return !1;
      void 0 === t && (t = r.params.speed);
      const g = Math.min(r.params.slidesPerGroupSkip, n);
      let v = g + Math.floor((n - g) / r.params.slidesPerGroup);
      v >= o.length && (v = o.length - 1);
      const w = -o[v];
      if (l.normalizeSlideIndex) for (let e = 0; e < d.length; e += 1) {
        const t = -Math.floor(100 * w), s = Math.floor(100 * d[e]), a = Math.floor(100 * d[e + 1]);
        void 0 !== d[e + 1] ? t >= s && t < a - (a - s) / 2 ? n = e : t >= s && t < a && (n = e + 1) : t >= s && (n = e)
      }
      if (r.initialized && n !== p) {
        if (!r.allowSlideNext && (u ? w > r.translate && w > r.minTranslate() : w < r.translate && w < r.minTranslate())) return !1;
        if (!r.allowSlidePrev && w > r.translate && w > r.maxTranslate() && (p || 0) !== n) return !1
      }
      let b;
      n !== (c || 0) && s && r.emit("beforeSlideChangeStart"), r.updateProgress(w), b = n > p ? "next" : n < p ? "prev" : "reset";
      const y = r.virtual && r.params.virtual.enabled;
      if (!(y && i) && (u && -w === r.translate || !u && w === r.translate)) return r.updateActiveIndex(n), l.autoHeight && r.updateAutoHeight(), r.updateSlidesClasses(), "slide" !== l.effect && r.setTranslate(w), "reset" !== b && (r.transitionStart(s, b), r.transitionEnd(s, b)), !1;
      if (l.cssMode) {
        const e = r.isHorizontal(), s = u ? w : -w;
        if (0 === t) y && (r.wrapperEl.style.scrollSnapType = "none", r._immediateVirtual = !0), y && !r._cssModeVirtualInitialSet && r.params.initialSlide > 0 ? (r._cssModeVirtualInitialSet = !0, requestAnimationFrame((() => {
          h[e ? "scrollLeft" : "scrollTop"] = s
        }))) : h[e ? "scrollLeft" : "scrollTop"] = s, y && requestAnimationFrame((() => {
          r.wrapperEl.style.scrollSnapType = "", r._immediateVirtual = !1
        })); else {
          if (!r.support.smoothScroll) return m({swiper: r, targetPosition: s, side: e ? "left" : "top"}), !0;
          h.scrollTo({[e ? "left" : "top"]: s, behavior: "smooth"})
        }
        return !0
      }
      return r.setTransition(t), r.setTranslate(w), r.updateActiveIndex(n), r.updateSlidesClasses(), r.emit("beforeTransitionStart", t, a), r.transitionStart(s, b), 0 === t ? r.transitionEnd(s, b) : r.animating || (r.animating = !0, r.onSlideToWrapperTransitionEnd || (r.onSlideToWrapperTransitionEnd = function (e) {
        r && !r.destroyed && e.target === this && (r.wrapperEl.removeEventListener("transitionend", r.onSlideToWrapperTransitionEnd), r.onSlideToWrapperTransitionEnd = null, delete r.onSlideToWrapperTransitionEnd, r.transitionEnd(s, b))
      }), r.wrapperEl.addEventListener("transitionend", r.onSlideToWrapperTransitionEnd)), !0
    }, slideToLoop: function (e, t, s, a) {
      if (void 0 === e && (e = 0), void 0 === s && (s = !0), "string" == typeof e) {
        e = parseInt(e, 10)
      }
      const i = this;
      if (i.destroyed) return;
      void 0 === t && (t = i.params.speed);
      const r = i.grid && i.params.grid && i.params.grid.rows > 1;
      let n = e;
      if (i.params.loop) if (i.virtual && i.params.virtual.enabled) n += i.virtual.slidesBefore; else {
        let e;
        if (r) {
          const t = n * i.params.grid.rows;
          e = i.slides.filter((e => 1 * e.getAttribute("data-swiper-slide-index") === t))[0].column
        } else e = i.getSlideIndexByData(n);
        const t = r ? Math.ceil(i.slides.length / i.params.grid.rows) : i.slides.length, {centeredSlides: s} = i.params;
        let l = i.params.slidesPerView;
        "auto" === l ? l = i.slidesPerViewDynamic() : (l = Math.ceil(parseFloat(i.params.slidesPerView, 10)), s && l % 2 == 0 && (l += 1));
        let o = t - e < l;
        if (s && (o = o || e < Math.ceil(l / 2)), a && s && "auto" !== i.params.slidesPerView && !r && (o = !1), o) {
          const a = s ? e < i.activeIndex ? "prev" : "next" : e - i.activeIndex - 1 < i.params.slidesPerView ? "next" : "prev";
          i.loopFix({
            direction: a,
            slideTo: !0,
            activeSlideIndex: "next" === a ? e + 1 : e - t + 1,
            slideRealIndex: "next" === a ? i.realIndex : void 0
          })
        }
        if (r) {
          const e = n * i.params.grid.rows;
          n = i.slides.filter((t => 1 * t.getAttribute("data-swiper-slide-index") === e))[0].column
        } else n = i.getSlideIndexByData(n)
      }
      return requestAnimationFrame((() => {
        i.slideTo(n, t, s, a)
      })), i
    }, slideNext: function (e, t, s) {
      void 0 === t && (t = !0);
      const a = this, {enabled: i, params: r, animating: n} = a;
      if (!i || a.destroyed) return a;
      void 0 === e && (e = a.params.speed);
      let l = r.slidesPerGroup;
      "auto" === r.slidesPerView && 1 === r.slidesPerGroup && r.slidesPerGroupAuto && (l = Math.max(a.slidesPerViewDynamic("current", !0), 1));
      const o = a.activeIndex < r.slidesPerGroupSkip ? 1 : l, d = a.virtual && r.virtual.enabled;
      if (r.loop) {
        if (n && !d && r.loopPreventsSliding) return !1;
        if (a.loopFix({direction: "next"}), a._clientLeft = a.wrapperEl.clientLeft, a.activeIndex === a.slides.length - 1 && r.cssMode) return requestAnimationFrame((() => {
          a.slideTo(a.activeIndex + o, e, t, s)
        })), !0
      }
      return r.rewind && a.isEnd ? a.slideTo(0, e, t, s) : a.slideTo(a.activeIndex + o, e, t, s)
    }, slidePrev: function (e, t, s) {
      void 0 === t && (t = !0);
      const a = this, {params: i, snapGrid: r, slidesGrid: n, rtlTranslate: l, enabled: o, animating: d} = a;
      if (!o || a.destroyed) return a;
      void 0 === e && (e = a.params.speed);
      const c = a.virtual && i.virtual.enabled;
      if (i.loop) {
        if (d && !c && i.loopPreventsSliding) return !1;
        a.loopFix({direction: "prev"}), a._clientLeft = a.wrapperEl.clientLeft
      }

      function p(e) {
        return e < 0 ? -Math.floor(Math.abs(e)) : Math.floor(e)
      }

      const u = p(l ? a.translate : -a.translate), m = r.map((e => p(e)));
      let h = r[m.indexOf(u) - 1];
      if (void 0 === h && i.cssMode) {
        let e;
        r.forEach(((t, s) => {
          u >= t && (e = s)
        })), void 0 !== e && (h = r[e > 0 ? e - 1 : e])
      }
      let f = 0;
      if (void 0 !== h && (f = n.indexOf(h), f < 0 && (f = a.activeIndex - 1), "auto" === i.slidesPerView && 1 === i.slidesPerGroup && i.slidesPerGroupAuto && (f = f - a.slidesPerViewDynamic("previous", !0) + 1, f = Math.max(f, 0))), i.rewind && a.isBeginning) {
        const i = a.params.virtual && a.params.virtual.enabled && a.virtual ? a.virtual.slides.length - 1 : a.slides.length - 1;
        return a.slideTo(i, e, t, s)
      }
      return i.loop && 0 === a.activeIndex && i.cssMode ? (requestAnimationFrame((() => {
        a.slideTo(f, e, t, s)
      })), !0) : a.slideTo(f, e, t, s)
    }, slideReset: function (e, t, s) {
      void 0 === t && (t = !0);
      const a = this;
      if (!a.destroyed) return void 0 === e && (e = a.params.speed), a.slideTo(a.activeIndex, e, t, s)
    }, slideToClosest: function (e, t, s, a) {
      void 0 === t && (t = !0), void 0 === a && (a = .5);
      const i = this;
      if (i.destroyed) return;
      void 0 === e && (e = i.params.speed);
      let r = i.activeIndex;
      const n = Math.min(i.params.slidesPerGroupSkip, r), l = n + Math.floor((r - n) / i.params.slidesPerGroup),
        o = i.rtlTranslate ? i.translate : -i.translate;
      if (o >= i.snapGrid[l]) {
        const e = i.snapGrid[l];
        o - e > (i.snapGrid[l + 1] - e) * a && (r += i.params.slidesPerGroup)
      } else {
        const e = i.snapGrid[l - 1];
        o - e <= (i.snapGrid[l] - e) * a && (r -= i.params.slidesPerGroup)
      }
      return r = Math.max(r, 0), r = Math.min(r, i.slidesGrid.length - 1), i.slideTo(r, e, t, s)
    }, slideToClickedSlide: function () {
      const e = this;
      if (e.destroyed) return;
      const {params: t, slidesEl: s} = e, a = "auto" === t.slidesPerView ? e.slidesPerViewDynamic() : t.slidesPerView;
      let i, r = e.clickedIndex;
      const n = e.isElement ? "swiper-slide" : `.${t.slideClass}`;
      if (t.loop) {
        if (e.animating) return;
        i = parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"), 10), t.centeredSlides ? r < e.loopedSlides - a / 2 || r > e.slides.length - e.loopedSlides + a / 2 ? (e.loopFix(), r = e.getSlideIndex(f(s, `${n}[data-swiper-slide-index="${i}"]`)[0]), l((() => {
          e.slideTo(r)
        }))) : e.slideTo(r) : r > e.slides.length - a ? (e.loopFix(), r = e.getSlideIndex(f(s, `${n}[data-swiper-slide-index="${i}"]`)[0]), l((() => {
          e.slideTo(r)
        }))) : e.slideTo(r)
      } else e.slideTo(r)
    }
  };
  var R = {
    loopCreate: function (e) {
      const t = this, {params: s, slidesEl: a} = t;
      if (!s.loop || t.virtual && t.params.virtual.enabled) return;
      const i = () => {
          f(a, `.${s.slideClass}, swiper-slide`).forEach(((e, t) => {
            e.setAttribute("data-swiper-slide-index", t)
          }))
        }, r = t.grid && s.grid && s.grid.rows > 1, n = s.slidesPerGroup * (r ? s.grid.rows : 1),
        l = t.slides.length % n != 0, o = r && t.slides.length % s.grid.rows != 0, d = e => {
          for (let a = 0; a < e; a += 1) {
            const e = t.isElement ? v("swiper-slide", [s.slideBlankClass]) : v("div", [s.slideClass, s.slideBlankClass]);
            t.slidesEl.append(e)
          }
        };
      if (l) {
        if (s.loopAddBlankSlides) {
          d(n - t.slides.length % n), t.recalcSlides(), t.updateSlides()
        } else g("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");
        i()
      } else if (o) {
        if (s.loopAddBlankSlides) {
          d(s.grid.rows - t.slides.length % s.grid.rows), t.recalcSlides(), t.updateSlides()
        } else g("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");
        i()
      } else i();
      t.loopFix({slideRealIndex: e, direction: s.centeredSlides ? void 0 : "next"})
    }, loopFix: function (e) {
      let {
        slideRealIndex: t,
        slideTo: s = !0,
        direction: a,
        setTranslate: i,
        activeSlideIndex: r,
        byController: n,
        byMousewheel: l
      } = void 0 === e ? {} : e;
      const o = this;
      if (!o.params.loop) return;
      o.emit("beforeLoopFix");
      const {slides: d, allowSlidePrev: c, allowSlideNext: p, slidesEl: u, params: m} = o, {centeredSlides: h} = m;
      if (o.allowSlidePrev = !0, o.allowSlideNext = !0, o.virtual && m.virtual.enabled) return s && (m.centeredSlides || 0 !== o.snapIndex ? m.centeredSlides && o.snapIndex < m.slidesPerView ? o.slideTo(o.virtual.slides.length + o.snapIndex, 0, !1, !0) : o.snapIndex === o.snapGrid.length - 1 && o.slideTo(o.virtual.slidesBefore, 0, !1, !0) : o.slideTo(o.virtual.slides.length, 0, !1, !0)), o.allowSlidePrev = c, o.allowSlideNext = p, void o.emit("loopFix");
      let f = m.slidesPerView;
      "auto" === f ? f = o.slidesPerViewDynamic() : (f = Math.ceil(parseFloat(m.slidesPerView, 10)), h && f % 2 == 0 && (f += 1));
      const v = m.slidesPerGroupAuto ? f : m.slidesPerGroup;
      let w = v;
      w % v != 0 && (w += v - w % v), w += m.loopAdditionalSlides, o.loopedSlides = w;
      const b = o.grid && m.grid && m.grid.rows > 1;
      d.length < f + w ? g("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters") : b && "row" === m.grid.fill && g("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");
      const y = [], E = [];
      let x = o.activeIndex;
      void 0 === r ? r = o.getSlideIndex(d.filter((e => e.classList.contains(m.slideActiveClass)))[0]) : x = r;
      const S = "next" === a || !a, T = "prev" === a || !a;
      let M = 0, C = 0;
      const P = b ? Math.ceil(d.length / m.grid.rows) : d.length,
        L = (b ? d[r].column : r) + (h && void 0 === i ? -f / 2 + .5 : 0);
      if (L < w) {
        M = Math.max(w - L, v);
        for (let e = 0; e < w - L; e += 1) {
          const t = e - Math.floor(e / P) * P;
          if (b) {
            const e = P - t - 1;
            for (let t = d.length - 1; t >= 0; t -= 1) d[t].column === e && y.push(t)
          } else y.push(P - t - 1)
        }
      } else if (L + f > P - w) {
        C = Math.max(L - (P - 2 * w), v);
        for (let e = 0; e < C; e += 1) {
          const t = e - Math.floor(e / P) * P;
          b ? d.forEach(((e, s) => {
            e.column === t && E.push(s)
          })) : E.push(t)
        }
      }
      if (o.__preventObserver__ = !0, requestAnimationFrame((() => {
        o.__preventObserver__ = !1
      })), T && y.forEach((e => {
        d[e].swiperLoopMoveDOM = !0, u.prepend(d[e]), d[e].swiperLoopMoveDOM = !1
      })), S && E.forEach((e => {
        d[e].swiperLoopMoveDOM = !0, u.append(d[e]), d[e].swiperLoopMoveDOM = !1
      })), o.recalcSlides(), "auto" === m.slidesPerView ? o.updateSlides() : b && (y.length > 0 && T || E.length > 0 && S) && o.slides.forEach(((e, t) => {
        o.grid.updateSlide(t, e, o.slides)
      })), m.watchSlidesProgress && o.updateSlidesOffset(), s) if (y.length > 0 && T) {
        if (void 0 === t) {
          const e = o.slidesGrid[x], t = o.slidesGrid[x + M] - e;
          l ? o.setTranslate(o.translate - t) : (o.slideTo(x + Math.ceil(M), 0, !1, !0), i && (o.touchEventsData.startTranslate = o.touchEventsData.startTranslate - t, o.touchEventsData.currentTranslate = o.touchEventsData.currentTranslate - t))
        } else if (i) {
          const e = b ? y.length / m.grid.rows : y.length;
          o.slideTo(o.activeIndex + e, 0, !1, !0), o.touchEventsData.currentTranslate = o.translate
        }
      } else if (E.length > 0 && S) if (void 0 === t) {
        const e = o.slidesGrid[x], t = o.slidesGrid[x - C] - e;
        l ? o.setTranslate(o.translate - t) : (o.slideTo(x - C, 0, !1, !0), i && (o.touchEventsData.startTranslate = o.touchEventsData.startTranslate - t, o.touchEventsData.currentTranslate = o.touchEventsData.currentTranslate - t))
      } else {
        const e = b ? E.length / m.grid.rows : E.length;
        o.slideTo(o.activeIndex - e, 0, !1, !0)
      }
      if (o.allowSlidePrev = c, o.allowSlideNext = p, o.controller && o.controller.control && !n) {
        const e = {slideRealIndex: t, direction: a, setTranslate: i, activeSlideIndex: r, byController: !0};
        Array.isArray(o.controller.control) ? o.controller.control.forEach((t => {
          !t.destroyed && t.params.loop && t.loopFix({...e, slideTo: t.params.slidesPerView === m.slidesPerView && s})
        })) : o.controller.control instanceof o.constructor && o.controller.control.params.loop && o.controller.control.loopFix({
          ...e,
          slideTo: o.controller.control.params.slidesPerView === m.slidesPerView && s
        })
      }
      o.emit("loopFix")
    }, loopDestroy: function () {
      const e = this, {params: t, slidesEl: s} = e;
      if (!t.loop || e.virtual && e.params.virtual.enabled) return;
      e.recalcSlides();
      const a = [];
      e.slides.forEach((e => {
        const t = void 0 === e.swiperSlideIndex ? 1 * e.getAttribute("data-swiper-slide-index") : e.swiperSlideIndex;
        a[t] = e
      })), e.slides.forEach((e => {
        e.removeAttribute("data-swiper-slide-index")
      })), a.forEach((e => {
        s.append(e)
      })), e.recalcSlides(), e.slideTo(e.realIndex, 0)
    }
  };

  function q(e, t, s) {
    const a = r(), {params: i} = e, n = i.edgeSwipeDetection, l = i.edgeSwipeThreshold;
    return !n || !(s <= l || s >= a.innerWidth - l) || "prevent" === n && (t.preventDefault(), !0)
  }

  function F(e) {
    const t = this, s = a();
    let i = e;
    i.originalEvent && (i = i.originalEvent);
    const n = t.touchEventsData;
    if ("pointerdown" === i.type) {
      if (null !== n.pointerId && n.pointerId !== i.pointerId) return;
      n.pointerId = i.pointerId
    } else "touchstart" === i.type && 1 === i.targetTouches.length && (n.touchId = i.targetTouches[0].identifier);
    if ("touchstart" === i.type) return void q(t, i, i.targetTouches[0].pageX);
    const {params: l, touches: d, enabled: c} = t;
    if (!c) return;
    if (!l.simulateTouch && "mouse" === i.pointerType) return;
    if (t.animating && l.preventInteractionOnTransition) return;
    !t.animating && l.cssMode && l.loop && t.loopFix();
    let p = i.target;
    if ("wrapper" === l.touchEventsTarget && !function (e, t) {
      const s = t.contains(e);
      if (!s && t instanceof HTMLSlotElement) return [...t.assignedElements()].includes(e);
      return s
    }(p, t.wrapperEl)) return;
    if ("which" in i && 3 === i.which) return;
    if ("button" in i && i.button > 0) return;
    if (n.isTouched && n.isMoved) return;
    const u = !!l.noSwipingClass && "" !== l.noSwipingClass, m = i.composedPath ? i.composedPath() : i.path;
    u && i.target && i.target.shadowRoot && m && (p = m[0]);
    const h = l.noSwipingSelector ? l.noSwipingSelector : `.${l.noSwipingClass}`,
      f = !(!i.target || !i.target.shadowRoot);
    if (l.noSwiping && (f ? function (e, t) {
      return void 0 === t && (t = this), function t(s) {
        if (!s || s === a() || s === r()) return null;
        s.assignedSlot && (s = s.assignedSlot);
        const i = s.closest(e);
        return i || s.getRootNode ? i || t(s.getRootNode().host) : null
      }(t)
    }(h, p) : p.closest(h))) return void (t.allowClick = !0);
    if (l.swipeHandler && !p.closest(l.swipeHandler)) return;
    d.currentX = i.pageX, d.currentY = i.pageY;
    const g = d.currentX, v = d.currentY;
    if (!q(t, i, g)) return;
    Object.assign(n, {
      isTouched: !0,
      isMoved: !1,
      allowTouchCallbacks: !0,
      isScrolling: void 0,
      startMoving: void 0
    }), d.startX = g, d.startY = v, n.touchStartTime = o(), t.allowClick = !0, t.updateSize(), t.swipeDirection = void 0, l.threshold > 0 && (n.allowThresholdMove = !1);
    let w = !0;
    p.matches(n.focusableElements) && (w = !1, "SELECT" === p.nodeName && (n.isTouched = !1)), s.activeElement && s.activeElement.matches(n.focusableElements) && s.activeElement !== p && ("mouse" === i.pointerType || "mouse" !== i.pointerType && !p.matches(n.focusableElements)) && s.activeElement.blur();
    const b = w && t.allowTouchMove && l.touchStartPreventDefault;
    !l.touchStartForcePreventDefault && !b || p.isContentEditable || i.preventDefault(), l.freeMode && l.freeMode.enabled && t.freeMode && t.animating && !l.cssMode && t.freeMode.onTouchStart(), t.emit("touchStart", i)
  }

  function V(e) {
    const t = a(), s = this, i = s.touchEventsData, {params: r, touches: n, rtlTranslate: l, enabled: d} = s;
    if (!d) return;
    if (!r.simulateTouch && "mouse" === e.pointerType) return;
    let c, p = e;
    if (p.originalEvent && (p = p.originalEvent), "pointermove" === p.type) {
      if (null !== i.touchId) return;
      if (p.pointerId !== i.pointerId) return
    }
    if ("touchmove" === p.type) {
      if (c = [...p.changedTouches].filter((e => e.identifier === i.touchId))[0], !c || c.identifier !== i.touchId) return
    } else c = p;
    if (!i.isTouched) return void (i.startMoving && i.isScrolling && s.emit("touchMoveOpposite", p));
    const u = c.pageX, m = c.pageY;
    if (p.preventedByNestedSwiper) return n.startX = u, void (n.startY = m);
    if (!s.allowTouchMove) return p.target.matches(i.focusableElements) || (s.allowClick = !1), void (i.isTouched && (Object.assign(n, {
      startX: u,
      startY: m,
      currentX: u,
      currentY: m
    }), i.touchStartTime = o()));
    if (r.touchReleaseOnEdges && !r.loop) if (s.isVertical()) {
      if (m < n.startY && s.translate <= s.maxTranslate() || m > n.startY && s.translate >= s.minTranslate()) return i.isTouched = !1, void (i.isMoved = !1)
    } else if (u < n.startX && s.translate <= s.maxTranslate() || u > n.startX && s.translate >= s.minTranslate()) return;
    if (t.activeElement && t.activeElement.matches(i.focusableElements) && t.activeElement !== p.target && "mouse" !== p.pointerType && t.activeElement.blur(), t.activeElement && p.target === t.activeElement && p.target.matches(i.focusableElements)) return i.isMoved = !0, void (s.allowClick = !1);
    i.allowTouchCallbacks && s.emit("touchMove", p), n.previousX = n.currentX, n.previousY = n.currentY, n.currentX = u, n.currentY = m;
    const h = n.currentX - n.startX, f = n.currentY - n.startY;
    if (s.params.threshold && Math.sqrt(h ** 2 + f ** 2) < s.params.threshold) return;
    if (void 0 === i.isScrolling) {
      let e;
      s.isHorizontal() && n.currentY === n.startY || s.isVertical() && n.currentX === n.startX ? i.isScrolling = !1 : h * h + f * f >= 25 && (e = 180 * Math.atan2(Math.abs(f), Math.abs(h)) / Math.PI, i.isScrolling = s.isHorizontal() ? e > r.touchAngle : 90 - e > r.touchAngle)
    }
    if (i.isScrolling && s.emit("touchMoveOpposite", p), void 0 === i.startMoving && (n.currentX === n.startX && n.currentY === n.startY || (i.startMoving = !0)), i.isScrolling || "touchmove" === p.type && i.preventTouchMoveFromPointerMove) return void (i.isTouched = !1);
    if (!i.startMoving) return;
    s.allowClick = !1, !r.cssMode && p.cancelable && p.preventDefault(), r.touchMoveStopPropagation && !r.nested && p.stopPropagation();
    let g = s.isHorizontal() ? h : f, v = s.isHorizontal() ? n.currentX - n.previousX : n.currentY - n.previousY;
    r.oneWayMovement && (g = Math.abs(g) * (l ? 1 : -1), v = Math.abs(v) * (l ? 1 : -1)), n.diff = g, g *= r.touchRatio, l && (g = -g, v = -v);
    const w = s.touchesDirection;
    s.swipeDirection = g > 0 ? "prev" : "next", s.touchesDirection = v > 0 ? "prev" : "next";
    const b = s.params.loop && !r.cssMode,
      y = "next" === s.touchesDirection && s.allowSlideNext || "prev" === s.touchesDirection && s.allowSlidePrev;
    if (!i.isMoved) {
      if (b && y && s.loopFix({direction: s.swipeDirection}), i.startTranslate = s.getTranslate(), s.setTransition(0), s.animating) {
        const e = new window.CustomEvent("transitionend", {
          bubbles: !0,
          cancelable: !0,
          detail: {bySwiperTouchMove: !0}
        });
        s.wrapperEl.dispatchEvent(e)
      }
      i.allowMomentumBounce = !1, !r.grabCursor || !0 !== s.allowSlideNext && !0 !== s.allowSlidePrev || s.setGrabCursor(!0), s.emit("sliderFirstMove", p)
    }
    if ((new Date).getTime(), i.isMoved && i.allowThresholdMove && w !== s.touchesDirection && b && y && Math.abs(g) >= 1) return Object.assign(n, {
      startX: u,
      startY: m,
      currentX: u,
      currentY: m,
      startTranslate: i.currentTranslate
    }), i.loopSwapReset = !0, void (i.startTranslate = i.currentTranslate);
    s.emit("sliderMove", p), i.isMoved = !0, i.currentTranslate = g + i.startTranslate;
    let E = !0, x = r.resistanceRatio;
    if (r.touchReleaseOnEdges && (x = 0), g > 0 ? (b && y && i.allowThresholdMove && i.currentTranslate > (r.centeredSlides ? s.minTranslate() - s.slidesSizesGrid[s.activeIndex + 1] - ("auto" !== r.slidesPerView && s.slides.length - r.slidesPerView >= 2 ? s.slidesSizesGrid[s.activeIndex + 1] + s.params.spaceBetween : 0) - s.params.spaceBetween : s.minTranslate()) && s.loopFix({
      direction: "prev",
      setTranslate: !0,
      activeSlideIndex: 0
    }), i.currentTranslate > s.minTranslate() && (E = !1, r.resistance && (i.currentTranslate = s.minTranslate() - 1 + (-s.minTranslate() + i.startTranslate + g) ** x))) : g < 0 && (b && y && i.allowThresholdMove && i.currentTranslate < (r.centeredSlides ? s.maxTranslate() + s.slidesSizesGrid[s.slidesSizesGrid.length - 1] + s.params.spaceBetween + ("auto" !== r.slidesPerView && s.slides.length - r.slidesPerView >= 2 ? s.slidesSizesGrid[s.slidesSizesGrid.length - 1] + s.params.spaceBetween : 0) : s.maxTranslate()) && s.loopFix({
      direction: "next",
      setTranslate: !0,
      activeSlideIndex: s.slides.length - ("auto" === r.slidesPerView ? s.slidesPerViewDynamic() : Math.ceil(parseFloat(r.slidesPerView, 10)))
    }), i.currentTranslate < s.maxTranslate() && (E = !1, r.resistance && (i.currentTranslate = s.maxTranslate() + 1 - (s.maxTranslate() - i.startTranslate - g) ** x))), E && (p.preventedByNestedSwiper = !0), !s.allowSlideNext && "next" === s.swipeDirection && i.currentTranslate < i.startTranslate && (i.currentTranslate = i.startTranslate), !s.allowSlidePrev && "prev" === s.swipeDirection && i.currentTranslate > i.startTranslate && (i.currentTranslate = i.startTranslate), s.allowSlidePrev || s.allowSlideNext || (i.currentTranslate = i.startTranslate), r.threshold > 0) {
      if (!(Math.abs(g) > r.threshold || i.allowThresholdMove)) return void (i.currentTranslate = i.startTranslate);
      if (!i.allowThresholdMove) return i.allowThresholdMove = !0, n.startX = n.currentX, n.startY = n.currentY, i.currentTranslate = i.startTranslate, void (n.diff = s.isHorizontal() ? n.currentX - n.startX : n.currentY - n.startY)
    }
    r.followFinger && !r.cssMode && ((r.freeMode && r.freeMode.enabled && s.freeMode || r.watchSlidesProgress) && (s.updateActiveIndex(), s.updateSlidesClasses()), r.freeMode && r.freeMode.enabled && s.freeMode && s.freeMode.onTouchMove(), s.updateProgress(i.currentTranslate), s.setTranslate(i.currentTranslate))
  }

  function _(e) {
    const t = this, s = t.touchEventsData;
    let a, i = e;
    i.originalEvent && (i = i.originalEvent);
    if ("touchend" === i.type || "touchcancel" === i.type) {
      if (a = [...i.changedTouches].filter((e => e.identifier === s.touchId))[0], !a || a.identifier !== s.touchId) return
    } else {
      if (null !== s.touchId) return;
      if (i.pointerId !== s.pointerId) return;
      a = i
    }
    if (["pointercancel", "pointerout", "pointerleave", "contextmenu"].includes(i.type)) {
      if (!(["pointercancel", "contextmenu"].includes(i.type) && (t.browser.isSafari || t.browser.isWebView))) return
    }
    s.pointerId = null, s.touchId = null;
    const {params: r, touches: n, rtlTranslate: d, slidesGrid: c, enabled: p} = t;
    if (!p) return;
    if (!r.simulateTouch && "mouse" === i.pointerType) return;
    if (s.allowTouchCallbacks && t.emit("touchEnd", i), s.allowTouchCallbacks = !1, !s.isTouched) return s.isMoved && r.grabCursor && t.setGrabCursor(!1), s.isMoved = !1, void (s.startMoving = !1);
    r.grabCursor && s.isMoved && s.isTouched && (!0 === t.allowSlideNext || !0 === t.allowSlidePrev) && t.setGrabCursor(!1);
    const u = o(), m = u - s.touchStartTime;
    if (t.allowClick) {
      const e = i.path || i.composedPath && i.composedPath();
      t.updateClickedSlide(e && e[0] || i.target, e), t.emit("tap click", i), m < 300 && u - s.lastClickTime < 300 && t.emit("doubleTap doubleClick", i)
    }
    if (s.lastClickTime = o(), l((() => {
      t.destroyed || (t.allowClick = !0)
    })), !s.isTouched || !s.isMoved || !t.swipeDirection || 0 === n.diff && !s.loopSwapReset || s.currentTranslate === s.startTranslate && !s.loopSwapReset) return s.isTouched = !1, s.isMoved = !1, void (s.startMoving = !1);
    let h;
    if (s.isTouched = !1, s.isMoved = !1, s.startMoving = !1, h = r.followFinger ? d ? t.translate : -t.translate : -s.currentTranslate, r.cssMode) return;
    if (r.freeMode && r.freeMode.enabled) return void t.freeMode.onTouchEnd({currentPos: h});
    const f = h >= -t.maxTranslate() && !t.params.loop;
    let g = 0, v = t.slidesSizesGrid[0];
    for (let e = 0; e < c.length; e += e < r.slidesPerGroupSkip ? 1 : r.slidesPerGroup) {
      const t = e < r.slidesPerGroupSkip - 1 ? 1 : r.slidesPerGroup;
      void 0 !== c[e + t] ? (f || h >= c[e] && h < c[e + t]) && (g = e, v = c[e + t] - c[e]) : (f || h >= c[e]) && (g = e, v = c[c.length - 1] - c[c.length - 2])
    }
    let w = null, b = null;
    r.rewind && (t.isBeginning ? b = r.virtual && r.virtual.enabled && t.virtual ? t.virtual.slides.length - 1 : t.slides.length - 1 : t.isEnd && (w = 0));
    const y = (h - c[g]) / v, E = g < r.slidesPerGroupSkip - 1 ? 1 : r.slidesPerGroup;
    if (m > r.longSwipesMs) {
      if (!r.longSwipes) return void t.slideTo(t.activeIndex);
      "next" === t.swipeDirection && (y >= r.longSwipesRatio ? t.slideTo(r.rewind && t.isEnd ? w : g + E) : t.slideTo(g)), "prev" === t.swipeDirection && (y > 1 - r.longSwipesRatio ? t.slideTo(g + E) : null !== b && y < 0 && Math.abs(y) > r.longSwipesRatio ? t.slideTo(b) : t.slideTo(g))
    } else {
      if (!r.shortSwipes) return void t.slideTo(t.activeIndex);
      t.navigation && (i.target === t.navigation.nextEl || i.target === t.navigation.prevEl) ? i.target === t.navigation.nextEl ? t.slideTo(g + E) : t.slideTo(g) : ("next" === t.swipeDirection && t.slideTo(null !== w ? w : g + E), "prev" === t.swipeDirection && t.slideTo(null !== b ? b : g))
    }
  }

  function W() {
    const e = this, {params: t, el: s} = e;
    if (s && 0 === s.offsetWidth) return;
    t.breakpoints && e.setBreakpoint();
    const {allowSlideNext: a, allowSlidePrev: i, snapGrid: r} = e, n = e.virtual && e.params.virtual.enabled;
    e.allowSlideNext = !0, e.allowSlidePrev = !0, e.updateSize(), e.updateSlides(), e.updateSlidesClasses();
    const l = n && t.loop;
    !("auto" === t.slidesPerView || t.slidesPerView > 1) || !e.isEnd || e.isBeginning || e.params.centeredSlides || l ? e.params.loop && !n ? e.slideToLoop(e.realIndex, 0, !1, !0) : e.slideTo(e.activeIndex, 0, !1, !0) : e.slideTo(e.slides.length - 1, 0, !1, !0), e.autoplay && e.autoplay.running && e.autoplay.paused && (clearTimeout(e.autoplay.resizeTimeout), e.autoplay.resizeTimeout = setTimeout((() => {
      e.autoplay && e.autoplay.running && e.autoplay.paused && e.autoplay.resume()
    }), 500)), e.allowSlidePrev = i, e.allowSlideNext = a, e.params.watchOverflow && r !== e.snapGrid && e.checkOverflow()
  }

  function j(e) {
    const t = this;
    t.enabled && (t.allowClick || (t.params.preventClicks && e.preventDefault(), t.params.preventClicksPropagation && t.animating && (e.stopPropagation(), e.stopImmediatePropagation())))
  }

  function U() {
    const e = this, {wrapperEl: t, rtlTranslate: s, enabled: a} = e;
    if (!a) return;
    let i;
    e.previousTranslate = e.translate, e.isHorizontal() ? e.translate = -t.scrollLeft : e.translate = -t.scrollTop, 0 === e.translate && (e.translate = 0), e.updateActiveIndex(), e.updateSlidesClasses();
    const r = e.maxTranslate() - e.minTranslate();
    i = 0 === r ? 0 : (e.translate - e.minTranslate()) / r, i !== e.progress && e.updateProgress(s ? -e.translate : e.translate), e.emit("setTranslate", e.translate, !1)
  }

  function K(e) {
    const t = this;
    D(t, e.target), t.params.cssMode || "auto" !== t.params.slidesPerView && !t.params.autoHeight || t.update()
  }

  function Z() {
    const e = this;
    e.documentTouchHandlerProceeded || (e.documentTouchHandlerProceeded = !0, e.params.touchReleaseOnEdges && (e.el.style.touchAction = "auto"))
  }

  const Q = (e, t) => {
    const s = a(), {params: i, el: r, wrapperEl: n, device: l} = e, o = !!i.nested,
      d = "on" === t ? "addEventListener" : "removeEventListener", c = t;
    r && "string" != typeof r && (s[d]("touchstart", e.onDocumentTouchStart, {
      passive: !1,
      capture: o
    }), r[d]("touchstart", e.onTouchStart, {passive: !1}), r[d]("pointerdown", e.onTouchStart, {passive: !1}), s[d]("touchmove", e.onTouchMove, {
      passive: !1,
      capture: o
    }), s[d]("pointermove", e.onTouchMove, {
      passive: !1,
      capture: o
    }), s[d]("touchend", e.onTouchEnd, {passive: !0}), s[d]("pointerup", e.onTouchEnd, {passive: !0}), s[d]("pointercancel", e.onTouchEnd, {passive: !0}), s[d]("touchcancel", e.onTouchEnd, {passive: !0}), s[d]("pointerout", e.onTouchEnd, {passive: !0}), s[d]("pointerleave", e.onTouchEnd, {passive: !0}), s[d]("contextmenu", e.onTouchEnd, {passive: !0}), (i.preventClicks || i.preventClicksPropagation) && r[d]("click", e.onClick, !0), i.cssMode && n[d]("scroll", e.onScroll), i.updateOnWindowResize ? e[c](l.ios || l.android ? "resize orientationchange observerUpdate" : "resize observerUpdate", W, !0) : e[c]("observerUpdate", W, !0), r[d]("load", e.onLoad, {capture: !0}))
  };
  const J = (e, t) => e.grid && t.grid && t.grid.rows > 1;
  var ee = {
    init: !0,
    direction: "horizontal",
    oneWayMovement: !1,
    swiperElementNodeName: "SWIPER-CONTAINER",
    touchEventsTarget: "wrapper",
    initialSlide: 0,
    speed: 300,
    cssMode: !1,
    updateOnWindowResize: !0,
    resizeObserver: !0,
    nested: !1,
    createElements: !1,
    eventsPrefix: "swiper",
    enabled: !0,
    focusableElements: "input, select, option, textarea, button, video, label",
    width: null,
    height: null,
    preventInteractionOnTransition: !1,
    userAgent: null,
    url: null,
    edgeSwipeDetection: !1,
    edgeSwipeThreshold: 20,
    autoHeight: !1,
    setWrapperSize: !1,
    virtualTranslate: !1,
    effect: "slide",
    breakpoints: void 0,
    breakpointsBase: "window",
    spaceBetween: 0,
    slidesPerView: 1,
    slidesPerGroup: 1,
    slidesPerGroupSkip: 0,
    slidesPerGroupAuto: !1,
    centeredSlides: !1,
    centeredSlidesBounds: !1,
    slidesOffsetBefore: 0,
    slidesOffsetAfter: 0,
    normalizeSlideIndex: !0,
    centerInsufficientSlides: !1,
    watchOverflow: !0,
    roundLengths: !1,
    touchRatio: 1,
    touchAngle: 45,
    simulateTouch: !0,
    shortSwipes: !0,
    longSwipes: !0,
    longSwipesRatio: .5,
    longSwipesMs: 300,
    followFinger: !0,
    allowTouchMove: !0,
    threshold: 5,
    touchMoveStopPropagation: !1,
    touchStartPreventDefault: !0,
    touchStartForcePreventDefault: !1,
    touchReleaseOnEdges: !1,
    uniqueNavElements: !0,
    resistance: !0,
    resistanceRatio: .85,
    watchSlidesProgress: !1,
    grabCursor: !1,
    preventClicks: !0,
    preventClicksPropagation: !0,
    slideToClickedSlide: !1,
    loop: !1,
    loopAddBlankSlides: !0,
    loopAdditionalSlides: 0,
    loopPreventsSliding: !0,
    rewind: !1,
    allowSlidePrev: !0,
    allowSlideNext: !0,
    swipeHandler: null,
    noSwiping: !0,
    noSwipingClass: "swiper-no-swiping",
    noSwipingSelector: null,
    passiveListeners: !0,
    maxBackfaceHiddenSlides: 10,
    containerModifierClass: "swiper-",
    slideClass: "swiper-slide",
    slideBlankClass: "swiper-slide-blank",
    slideActiveClass: "swiper-slide-active",
    slideVisibleClass: "swiper-slide-visible",
    slideFullyVisibleClass: "swiper-slide-fully-visible",
    slideNextClass: "swiper-slide-next",
    slidePrevClass: "swiper-slide-prev",
    wrapperClass: "swiper-wrapper",
    lazyPreloaderClass: "swiper-lazy-preloader",
    lazyPreloadPrevNext: 0,
    runCallbacksOnInit: !0,
    _emitClasses: !1
  };

  function te(e, t) {
    return function (s) {
      void 0 === s && (s = {});
      const a = Object.keys(s)[0], i = s[a];
      "object" == typeof i && null !== i ? (!0 === e[a] && (e[a] = {enabled: !0}), "navigation" === a && e[a] && e[a].enabled && !e[a].prevEl && !e[a].nextEl && (e[a].auto = !0), ["pagination", "scrollbar"].indexOf(a) >= 0 && e[a] && e[a].enabled && !e[a].el && (e[a].auto = !0), a in e && "enabled" in i ? ("object" != typeof e[a] || "enabled" in e[a] || (e[a].enabled = !0), e[a] || (e[a] = {enabled: !1}), p(t, s)) : p(t, s)) : p(t, s)
    }
  }

  const se = {
    eventsEmitter: $, update: B, translate: N, transition: {
      setTransition: function (e, t) {
        const s = this;
        s.params.cssMode || (s.wrapperEl.style.transitionDuration = `${e}ms`, s.wrapperEl.style.transitionDelay = 0 === e ? "0ms" : ""), s.emit("setTransition", e, t)
      }, transitionStart: function (e, t) {
        void 0 === e && (e = !0);
        const s = this, {params: a} = s;
        a.cssMode || (a.autoHeight && s.updateAutoHeight(), X({
          swiper: s,
          runCallbacks: e,
          direction: t,
          step: "Start"
        }))
      }, transitionEnd: function (e, t) {
        void 0 === e && (e = !0);
        const s = this, {params: a} = s;
        s.animating = !1, a.cssMode || (s.setTransition(0), X({swiper: s, runCallbacks: e, direction: t, step: "End"}))
      }
    }, slide: Y, loop: R, grabCursor: {
      setGrabCursor: function (e) {
        const t = this;
        if (!t.params.simulateTouch || t.params.watchOverflow && t.isLocked || t.params.cssMode) return;
        const s = "container" === t.params.touchEventsTarget ? t.el : t.wrapperEl;
        t.isElement && (t.__preventObserver__ = !0), s.style.cursor = "move", s.style.cursor = e ? "grabbing" : "grab", t.isElement && requestAnimationFrame((() => {
          t.__preventObserver__ = !1
        }))
      }, unsetGrabCursor: function () {
        const e = this;
        e.params.watchOverflow && e.isLocked || e.params.cssMode || (e.isElement && (e.__preventObserver__ = !0), e["container" === e.params.touchEventsTarget ? "el" : "wrapperEl"].style.cursor = "", e.isElement && requestAnimationFrame((() => {
          e.__preventObserver__ = !1
        })))
      }
    }, events: {
      attachEvents: function () {
        const e = this, {params: t} = e;
        e.onTouchStart = F.bind(e), e.onTouchMove = V.bind(e), e.onTouchEnd = _.bind(e), e.onDocumentTouchStart = Z.bind(e), t.cssMode && (e.onScroll = U.bind(e)), e.onClick = j.bind(e), e.onLoad = K.bind(e), Q(e, "on")
      }, detachEvents: function () {
        Q(this, "off")
      }
    }, breakpoints: {
      setBreakpoint: function () {
        const e = this, {realIndex: t, initialized: s, params: a, el: i} = e, r = a.breakpoints;
        if (!r || r && 0 === Object.keys(r).length) return;
        const n = e.getBreakpoint(r, e.params.breakpointsBase, e.el);
        if (!n || e.currentBreakpoint === n) return;
        const l = (n in r ? r[n] : void 0) || e.originalParams, o = J(e, a), d = J(e, l), c = e.params.grabCursor,
          u = l.grabCursor, m = a.enabled;
        o && !d ? (i.classList.remove(`${a.containerModifierClass}grid`, `${a.containerModifierClass}grid-column`), e.emitContainerClasses()) : !o && d && (i.classList.add(`${a.containerModifierClass}grid`), (l.grid.fill && "column" === l.grid.fill || !l.grid.fill && "column" === a.grid.fill) && i.classList.add(`${a.containerModifierClass}grid-column`), e.emitContainerClasses()), c && !u ? e.unsetGrabCursor() : !c && u && e.setGrabCursor(), ["navigation", "pagination", "scrollbar"].forEach((t => {
          if (void 0 === l[t]) return;
          const s = a[t] && a[t].enabled, i = l[t] && l[t].enabled;
          s && !i && e[t].disable(), !s && i && e[t].enable()
        }));
        const h = l.direction && l.direction !== a.direction, f = a.loop && (l.slidesPerView !== a.slidesPerView || h),
          g = a.loop;
        h && s && e.changeDirection(), p(e.params, l);
        const v = e.params.enabled, w = e.params.loop;
        Object.assign(e, {
          allowTouchMove: e.params.allowTouchMove,
          allowSlideNext: e.params.allowSlideNext,
          allowSlidePrev: e.params.allowSlidePrev
        }), m && !v ? e.disable() : !m && v && e.enable(), e.currentBreakpoint = n, e.emit("_beforeBreakpoint", l), s && (f ? (e.loopDestroy(), e.loopCreate(t), e.updateSlides()) : !g && w ? (e.loopCreate(t), e.updateSlides()) : g && !w && e.loopDestroy()), e.emit("breakpoint", l)
      }, getBreakpoint: function (e, t, s) {
        if (void 0 === t && (t = "window"), !e || "container" === t && !s) return;
        let a = !1;
        const i = r(), n = "window" === t ? i.innerHeight : s.clientHeight, l = Object.keys(e).map((e => {
          if ("string" == typeof e && 0 === e.indexOf("@")) {
            const t = parseFloat(e.substr(1));
            return {value: n * t, point: e}
          }
          return {value: e, point: e}
        }));
        l.sort(((e, t) => parseInt(e.value, 10) - parseInt(t.value, 10)));
        for (let e = 0; e < l.length; e += 1) {
          const {point: r, value: n} = l[e];
          "window" === t ? i.matchMedia(`(min-width: ${n}px)`).matches && (a = r) : n <= s.clientWidth && (a = r)
        }
        return a || "max"
      }
    }, checkOverflow: {
      checkOverflow: function () {
        const e = this, {isLocked: t, params: s} = e, {slidesOffsetBefore: a} = s;
        if (a) {
          const t = e.slides.length - 1, s = e.slidesGrid[t] + e.slidesSizesGrid[t] + 2 * a;
          e.isLocked = e.size > s
        } else e.isLocked = 1 === e.snapGrid.length;
        !0 === s.allowSlideNext && (e.allowSlideNext = !e.isLocked), !0 === s.allowSlidePrev && (e.allowSlidePrev = !e.isLocked), t && t !== e.isLocked && (e.isEnd = !1), t !== e.isLocked && e.emit(e.isLocked ? "lock" : "unlock")
      }
    }, classes: {
      addClasses: function () {
        const e = this, {classNames: t, params: s, rtl: a, el: i, device: r} = e, n = function (e, t) {
          const s = [];
          return e.forEach((e => {
            "object" == typeof e ? Object.keys(e).forEach((a => {
              e[a] && s.push(t + a)
            })) : "string" == typeof e && s.push(t + e)
          })), s
        }(["initialized", s.direction, {"free-mode": e.params.freeMode && s.freeMode.enabled}, {autoheight: s.autoHeight}, {rtl: a}, {grid: s.grid && s.grid.rows > 1}, {"grid-column": s.grid && s.grid.rows > 1 && "column" === s.grid.fill}, {android: r.android}, {ios: r.ios}, {"css-mode": s.cssMode}, {centered: s.cssMode && s.centeredSlides}, {"watch-progress": s.watchSlidesProgress}], s.containerModifierClass);
        t.push(...n), i.classList.add(...t), e.emitContainerClasses()
      }, removeClasses: function () {
        const {el: e, classNames: t} = this;
        e && "string" != typeof e && (e.classList.remove(...t), this.emitContainerClasses())
      }
    }
  }, ae = {};

  class ie {
    constructor() {
      let e, t;
      for (var s = arguments.length, i = new Array(s), r = 0; r < s; r++) i[r] = arguments[r];
      1 === i.length && i[0].constructor && "Object" === Object.prototype.toString.call(i[0]).slice(8, -1) ? t = i[0] : [e, t] = i, t || (t = {}), t = p({}, t), e && !t.el && (t.el = e);
      const n = a();
      if (t.el && "string" == typeof t.el && n.querySelectorAll(t.el).length > 1) {
        const e = [];
        return n.querySelectorAll(t.el).forEach((s => {
          const a = p({}, t, {el: s});
          e.push(new ie(a))
        })), e
      }
      const l = this;
      l.__swiper__ = !0, l.support = I(), l.device = z({userAgent: t.userAgent}), l.browser = A(), l.eventsListeners = {}, l.eventsAnyListeners = [], l.modules = [...l.__modules__], t.modules && Array.isArray(t.modules) && l.modules.push(...t.modules);
      const o = {};
      l.modules.forEach((e => {
        e({
          params: t,
          swiper: l,
          extendParams: te(t, o),
          on: l.on.bind(l),
          once: l.once.bind(l),
          off: l.off.bind(l),
          emit: l.emit.bind(l)
        })
      }));
      const d = p({}, ee, o);
      return l.params = p({}, d, ae, t), l.originalParams = p({}, l.params), l.passedParams = p({}, t), l.params && l.params.on && Object.keys(l.params.on).forEach((e => {
        l.on(e, l.params.on[e])
      })), l.params && l.params.onAny && l.onAny(l.params.onAny), Object.assign(l, {
        enabled: l.params.enabled,
        el: e,
        classNames: [],
        slides: [],
        slidesGrid: [],
        snapGrid: [],
        slidesSizesGrid: [],
        isHorizontal: () => "horizontal" === l.params.direction,
        isVertical: () => "vertical" === l.params.direction,
        activeIndex: 0,
        realIndex: 0,
        isBeginning: !0,
        isEnd: !1,
        translate: 0,
        previousTranslate: 0,
        progress: 0,
        velocity: 0,
        animating: !1,
        cssOverflowAdjustment() {
          return Math.trunc(this.translate / 2 ** 23) * 2 ** 23
        },
        allowSlideNext: l.params.allowSlideNext,
        allowSlidePrev: l.params.allowSlidePrev,
        touchEventsData: {
          isTouched: void 0,
          isMoved: void 0,
          allowTouchCallbacks: void 0,
          touchStartTime: void 0,
          isScrolling: void 0,
          currentTranslate: void 0,
          startTranslate: void 0,
          allowThresholdMove: void 0,
          focusableElements: l.params.focusableElements,
          lastClickTime: 0,
          clickTimeout: void 0,
          velocities: [],
          allowMomentumBounce: void 0,
          startMoving: void 0,
          pointerId: null,
          touchId: null
        },
        allowClick: !0,
        allowTouchMove: l.params.allowTouchMove,
        touches: {startX: 0, startY: 0, currentX: 0, currentY: 0, diff: 0},
        imagesToLoad: [],
        imagesLoaded: 0
      }), l.emit("_swiper"), l.params.init && l.init(), l
    }

    getDirectionLabel(e) {
      return this.isHorizontal() ? e : {
        width: "height",
        "margin-top": "margin-left",
        "margin-bottom ": "margin-right",
        "margin-left": "margin-top",
        "margin-right": "margin-bottom",
        "padding-left": "padding-top",
        "padding-right": "padding-bottom",
        marginRight: "marginBottom"
      }[e]
    }

    getSlideIndex(e) {
      const {slidesEl: t, params: s} = this, a = y(f(t, `.${s.slideClass}, swiper-slide`)[0]);
      return y(e) - a
    }

    getSlideIndexByData(e) {
      return this.getSlideIndex(this.slides.filter((t => 1 * t.getAttribute("data-swiper-slide-index") === e))[0])
    }

    recalcSlides() {
      const {slidesEl: e, params: t} = this;
      this.slides = f(e, `.${t.slideClass}, swiper-slide`)
    }

    enable() {
      const e = this;
      e.enabled || (e.enabled = !0, e.params.grabCursor && e.setGrabCursor(), e.emit("enable"))
    }

    disable() {
      const e = this;
      e.enabled && (e.enabled = !1, e.params.grabCursor && e.unsetGrabCursor(), e.emit("disable"))
    }

    setProgress(e, t) {
      const s = this;
      e = Math.min(Math.max(e, 0), 1);
      const a = s.minTranslate(), i = (s.maxTranslate() - a) * e + a;
      s.translateTo(i, void 0 === t ? 0 : t), s.updateActiveIndex(), s.updateSlidesClasses()
    }

    emitContainerClasses() {
      const e = this;
      if (!e.params._emitClasses || !e.el) return;
      const t = e.el.className.split(" ").filter((t => 0 === t.indexOf("swiper") || 0 === t.indexOf(e.params.containerModifierClass)));
      e.emit("_containerClasses", t.join(" "))
    }

    getSlideClasses(e) {
      const t = this;
      return t.destroyed ? "" : e.className.split(" ").filter((e => 0 === e.indexOf("swiper-slide") || 0 === e.indexOf(t.params.slideClass))).join(" ")
    }

    emitSlidesClasses() {
      const e = this;
      if (!e.params._emitClasses || !e.el) return;
      const t = [];
      e.slides.forEach((s => {
        const a = e.getSlideClasses(s);
        t.push({slideEl: s, classNames: a}), e.emit("_slideClass", s, a)
      })), e.emit("_slideClasses", t)
    }

    slidesPerViewDynamic(e, t) {
      void 0 === e && (e = "current"), void 0 === t && (t = !1);
      const {params: s, slides: a, slidesGrid: i, slidesSizesGrid: r, size: n, activeIndex: l} = this;
      let o = 1;
      if ("number" == typeof s.slidesPerView) return s.slidesPerView;
      if (s.centeredSlides) {
        let e, t = a[l] ? Math.ceil(a[l].swiperSlideSize) : 0;
        for (let s = l + 1; s < a.length; s += 1) a[s] && !e && (t += Math.ceil(a[s].swiperSlideSize), o += 1, t > n && (e = !0));
        for (let s = l - 1; s >= 0; s -= 1) a[s] && !e && (t += a[s].swiperSlideSize, o += 1, t > n && (e = !0))
      } else if ("current" === e) for (let e = l + 1; e < a.length; e += 1) {
        (t ? i[e] + r[e] - i[l] < n : i[e] - i[l] < n) && (o += 1)
      } else for (let e = l - 1; e >= 0; e -= 1) {
        i[l] - i[e] < n && (o += 1)
      }
      return o
    }

    update() {
      const e = this;
      if (!e || e.destroyed) return;
      const {snapGrid: t, params: s} = e;

      function a() {
        const t = e.rtlTranslate ? -1 * e.translate : e.translate,
          s = Math.min(Math.max(t, e.maxTranslate()), e.minTranslate());
        e.setTranslate(s), e.updateActiveIndex(), e.updateSlidesClasses()
      }

      let i;
      if (s.breakpoints && e.setBreakpoint(), [...e.el.querySelectorAll('[loading="lazy"]')].forEach((t => {
        t.complete && D(e, t)
      })), e.updateSize(), e.updateSlides(), e.updateProgress(), e.updateSlidesClasses(), s.freeMode && s.freeMode.enabled && !s.cssMode) a(), s.autoHeight && e.updateAutoHeight(); else {
        if (("auto" === s.slidesPerView || s.slidesPerView > 1) && e.isEnd && !s.centeredSlides) {
          const t = e.virtual && s.virtual.enabled ? e.virtual.slides : e.slides;
          i = e.slideTo(t.length - 1, 0, !1, !0)
        } else i = e.slideTo(e.activeIndex, 0, !1, !0);
        i || a()
      }
      s.watchOverflow && t !== e.snapGrid && e.checkOverflow(), e.emit("update")
    }

    changeDirection(e, t) {
      void 0 === t && (t = !0);
      const s = this, a = s.params.direction;
      return e || (e = "horizontal" === a ? "vertical" : "horizontal"), e === a || "horizontal" !== e && "vertical" !== e || (s.el.classList.remove(`${s.params.containerModifierClass}${a}`), s.el.classList.add(`${s.params.containerModifierClass}${e}`), s.emitContainerClasses(), s.params.direction = e, s.slides.forEach((t => {
        "vertical" === e ? t.style.width = "" : t.style.height = ""
      })), s.emit("changeDirection"), t && s.update()), s
    }

    changeLanguageDirection(e) {
      const t = this;
      t.rtl && "rtl" === e || !t.rtl && "ltr" === e || (t.rtl = "rtl" === e, t.rtlTranslate = "horizontal" === t.params.direction && t.rtl, t.rtl ? (t.el.classList.add(`${t.params.containerModifierClass}rtl`), t.el.dir = "rtl") : (t.el.classList.remove(`${t.params.containerModifierClass}rtl`), t.el.dir = "ltr"), t.update())
    }

    mount(e) {
      const t = this;
      if (t.mounted) return !0;
      let s = e || t.params.el;
      if ("string" == typeof s && (s = document.querySelector(s)), !s) return !1;
      s.swiper = t, s.parentNode && s.parentNode.host && s.parentNode.host.nodeName === t.params.swiperElementNodeName.toUpperCase() && (t.isElement = !0);
      const a = () => `.${(t.params.wrapperClass || "").trim().split(" ").join(".")}`;
      let i = (() => {
        if (s && s.shadowRoot && s.shadowRoot.querySelector) {
          return s.shadowRoot.querySelector(a())
        }
        return f(s, a())[0]
      })();
      return !i && t.params.createElements && (i = v("div", t.params.wrapperClass), s.append(i), f(s, `.${t.params.slideClass}`).forEach((e => {
        i.append(e)
      }))), Object.assign(t, {
        el: s,
        wrapperEl: i,
        slidesEl: t.isElement && !s.parentNode.host.slideSlots ? s.parentNode.host : i,
        hostEl: t.isElement ? s.parentNode.host : s,
        mounted: !0,
        rtl: "rtl" === s.dir.toLowerCase() || "rtl" === b(s, "direction"),
        rtlTranslate: "horizontal" === t.params.direction && ("rtl" === s.dir.toLowerCase() || "rtl" === b(s, "direction")),
        wrongRTL: "-webkit-box" === b(i, "display")
      }), !0
    }

    init(e) {
      const t = this;
      if (t.initialized) return t;
      if (!1 === t.mount(e)) return t;
      t.emit("beforeInit"), t.params.breakpoints && t.setBreakpoint(), t.addClasses(), t.updateSize(), t.updateSlides(), t.params.watchOverflow && t.checkOverflow(), t.params.grabCursor && t.enabled && t.setGrabCursor(), t.params.loop && t.virtual && t.params.virtual.enabled ? t.slideTo(t.params.initialSlide + t.virtual.slidesBefore, 0, t.params.runCallbacksOnInit, !1, !0) : t.slideTo(t.params.initialSlide, 0, t.params.runCallbacksOnInit, !1, !0), t.params.loop && t.loopCreate(), t.attachEvents();
      const s = [...t.el.querySelectorAll('[loading="lazy"]')];
      return t.isElement && s.push(...t.hostEl.querySelectorAll('[loading="lazy"]')), s.forEach((e => {
        e.complete ? D(t, e) : e.addEventListener("load", (e => {
          D(t, e.target)
        }))
      })), H(t), t.initialized = !0, H(t), t.emit("init"), t.emit("afterInit"), t
    }

    destroy(e, t) {
      void 0 === e && (e = !0), void 0 === t && (t = !0);
      const s = this, {params: a, el: i, wrapperEl: r, slides: n} = s;
      return void 0 === s.params || s.destroyed || (s.emit("beforeDestroy"), s.initialized = !1, s.detachEvents(), a.loop && s.loopDestroy(), t && (s.removeClasses(), i && "string" != typeof i && i.removeAttribute("style"), r && r.removeAttribute("style"), n && n.length && n.forEach((e => {
        e.classList.remove(a.slideVisibleClass, a.slideFullyVisibleClass, a.slideActiveClass, a.slideNextClass, a.slidePrevClass), e.removeAttribute("style"), e.removeAttribute("data-swiper-slide-index")
      }))), s.emit("destroy"), Object.keys(s.eventsListeners).forEach((e => {
        s.off(e)
      })), !1 !== e && (s.el && "string" != typeof s.el && (s.el.swiper = null), function (e) {
        const t = e;
        Object.keys(t).forEach((e => {
          try {
            t[e] = null
          } catch (e) {
          }
          try {
            delete t[e]
          } catch (e) {
          }
        }))
      }(s)), s.destroyed = !0), null
    }

    static extendDefaults(e) {
      p(ae, e)
    }

    static get extendedDefaults() {
      return ae
    }

    static get defaults() {
      return ee
    }

    static installModule(e) {
      ie.prototype.__modules__ || (ie.prototype.__modules__ = []);
      const t = ie.prototype.__modules__;
      "function" == typeof e && t.indexOf(e) < 0 && t.push(e)
    }

    static use(e) {
      return Array.isArray(e) ? (e.forEach((e => ie.installModule(e))), ie) : (ie.installModule(e), ie)
    }
  }

  function re(e, t, s, a) {
    return e.params.createElements && Object.keys(a).forEach((i => {
      if (!s[i] && !0 === s.auto) {
        let r = f(e.el, `.${a[i]}`)[0];
        r || (r = v("div", a[i]), r.className = a[i], e.el.append(r)), s[i] = r, t[i] = r
      }
    })), s
  }

  function ne(e) {
    return void 0 === e && (e = ""), `.${e.trim().replace(/([\.:!+\/])/g, "\\$1").replace(/ /g, ".")}`
  }

  function le(e) {
    const t = this, {params: s, slidesEl: a} = t;
    s.loop && t.loopDestroy();
    const i = e => {
      if ("string" == typeof e) {
        const t = document.createElement("div");
        t.innerHTML = e, a.append(t.children[0]), t.innerHTML = ""
      } else a.append(e)
    };
    if ("object" == typeof e && "length" in e) for (let t = 0; t < e.length; t += 1) e[t] && i(e[t]); else i(e);
    t.recalcSlides(), s.loop && t.loopCreate(), s.observer && !t.isElement || t.update()
  }

  function oe(e) {
    const t = this, {params: s, activeIndex: a, slidesEl: i} = t;
    s.loop && t.loopDestroy();
    let r = a + 1;
    const n = e => {
      if ("string" == typeof e) {
        const t = document.createElement("div");
        t.innerHTML = e, i.prepend(t.children[0]), t.innerHTML = ""
      } else i.prepend(e)
    };
    if ("object" == typeof e && "length" in e) {
      for (let t = 0; t < e.length; t += 1) e[t] && n(e[t]);
      r = a + e.length
    } else n(e);
    t.recalcSlides(), s.loop && t.loopCreate(), s.observer && !t.isElement || t.update(), t.slideTo(r, 0, !1)
  }

  function de(e, t) {
    const s = this, {params: a, activeIndex: i, slidesEl: r} = s;
    let n = i;
    a.loop && (n -= s.loopedSlides, s.loopDestroy(), s.recalcSlides());
    const l = s.slides.length;
    if (e <= 0) return void s.prependSlide(t);
    if (e >= l) return void s.appendSlide(t);
    let o = n > e ? n + 1 : n;
    const d = [];
    for (let t = l - 1; t >= e; t -= 1) {
      const e = s.slides[t];
      e.remove(), d.unshift(e)
    }
    if ("object" == typeof t && "length" in t) {
      for (let e = 0; e < t.length; e += 1) t[e] && r.append(t[e]);
      o = n > e ? n + t.length : n
    } else r.append(t);
    for (let e = 0; e < d.length; e += 1) r.append(d[e]);
    s.recalcSlides(), a.loop && s.loopCreate(), a.observer && !s.isElement || s.update(), a.loop ? s.slideTo(o + s.loopedSlides, 0, !1) : s.slideTo(o, 0, !1)
  }

  function ce(e) {
    const t = this, {params: s, activeIndex: a} = t;
    let i = a;
    s.loop && (i -= t.loopedSlides, t.loopDestroy());
    let r, n = i;
    if ("object" == typeof e && "length" in e) {
      for (let s = 0; s < e.length; s += 1) r = e[s], t.slides[r] && t.slides[r].remove(), r < n && (n -= 1);
      n = Math.max(n, 0)
    } else r = e, t.slides[r] && t.slides[r].remove(), r < n && (n -= 1), n = Math.max(n, 0);
    t.recalcSlides(), s.loop && t.loopCreate(), s.observer && !t.isElement || t.update(), s.loop ? t.slideTo(n + t.loopedSlides, 0, !1) : t.slideTo(n, 0, !1)
  }

  function pe() {
    const e = this, t = [];
    for (let s = 0; s < e.slides.length; s += 1) t.push(s);
    e.removeSlide(t)
  }

  function ue(e) {
    const {
      effect: t,
      swiper: s,
      on: a,
      setTranslate: i,
      setTransition: r,
      overwriteParams: n,
      perspective: l,
      recreateShadows: o,
      getEffectParams: d
    } = e;
    let c;
    a("beforeInit", (() => {
      if (s.params.effect !== t) return;
      s.classNames.push(`${s.params.containerModifierClass}${t}`), l && l() && s.classNames.push(`${s.params.containerModifierClass}3d`);
      const e = n ? n() : {};
      Object.assign(s.params, e), Object.assign(s.originalParams, e)
    })), a("setTranslate", (() => {
      s.params.effect === t && i()
    })), a("setTransition", ((e, a) => {
      s.params.effect === t && r(a)
    })), a("transitionEnd", (() => {
      if (s.params.effect === t && o) {
        if (!d || !d().slideShadows) return;
        s.slides.forEach((e => {
          e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e => e.remove()))
        })), o()
      }
    })), a("virtualUpdate", (() => {
      s.params.effect === t && (s.slides.length || (c = !0), requestAnimationFrame((() => {
        c && s.slides && s.slides.length && (i(), c = !1)
      })))
    }))
  }

  function me(e, t) {
    const s = h(t);
    return s !== t && (s.style.backfaceVisibility = "hidden", s.style["-webkit-backface-visibility"] = "hidden"), s
  }

  function he(e) {
    let {swiper: t, duration: s, transformElements: a, allSlides: i} = e;
    const {activeIndex: r} = t;
    if (t.params.virtualTranslate && 0 !== s) {
      let e, s = !1;
      e = i ? a : a.filter((e => {
        const s = e.classList.contains("swiper-slide-transform") ? (e => {
          if (!e.parentElement) return t.slides.filter((t => t.shadowRoot && t.shadowRoot === e.parentNode))[0];
          return e.parentElement
        })(e) : e;
        return t.getSlideIndex(s) === r
      })), e.forEach((e => {
        x(e, (() => {
          if (s) return;
          if (!t || t.destroyed) return;
          s = !0, t.animating = !1;
          const e = new window.CustomEvent("transitionend", {bubbles: !0, cancelable: !0});
          t.wrapperEl.dispatchEvent(e)
        }))
      }))
    }
  }

  function fe(e, t, s) {
    const a = `swiper-slide-shadow${s ? `-${s}` : ""}${e ? ` swiper-slide-shadow-${e}` : ""}`, i = h(t);
    let r = i.querySelector(`.${a.split(" ").join(".")}`);
    return r || (r = v("div", a.split(" ")), i.append(r)), r
  }

  Object.keys(se).forEach((e => {
    Object.keys(se[e]).forEach((t => {
      ie.prototype[t] = se[e][t]
    }))
  })), ie.use([function (e) {
    let {swiper: t, on: s, emit: a} = e;
    const i = r();
    let n = null, l = null;
    const o = () => {
      t && !t.destroyed && t.initialized && (a("beforeResize"), a("resize"))
    }, d = () => {
      t && !t.destroyed && t.initialized && a("orientationchange")
    };
    s("init", (() => {
      t.params.resizeObserver && void 0 !== i.ResizeObserver ? t && !t.destroyed && t.initialized && (n = new ResizeObserver((e => {
        l = i.requestAnimationFrame((() => {
          const {width: s, height: a} = t;
          let i = s, r = a;
          e.forEach((e => {
            let {contentBoxSize: s, contentRect: a, target: n} = e;
            n && n !== t.el || (i = a ? a.width : (s[0] || s).inlineSize, r = a ? a.height : (s[0] || s).blockSize)
          })), i === s && r === a || o()
        }))
      })), n.observe(t.el)) : (i.addEventListener("resize", o), i.addEventListener("orientationchange", d))
    })), s("destroy", (() => {
      l && i.cancelAnimationFrame(l), n && n.unobserve && t.el && (n.unobserve(t.el), n = null), i.removeEventListener("resize", o), i.removeEventListener("orientationchange", d)
    }))
  }, function (e) {
    let {swiper: t, extendParams: s, on: a, emit: i} = e;
    const n = [], l = r(), o = function (e, s) {
      void 0 === s && (s = {});
      const a = new (l.MutationObserver || l.WebkitMutationObserver)((e => {
        if (t.__preventObserver__) return;
        if (1 === e.length) return void i("observerUpdate", e[0]);
        const s = function () {
          i("observerUpdate", e[0])
        };
        l.requestAnimationFrame ? l.requestAnimationFrame(s) : l.setTimeout(s, 0)
      }));
      a.observe(e, {
        attributes: void 0 === s.attributes || s.attributes,
        childList: t.isElement || (void 0 === s.childList || s).childList,
        characterData: void 0 === s.characterData || s.characterData
      }), n.push(a)
    };
    s({observer: !1, observeParents: !1, observeSlideChildren: !1}), a("init", (() => {
      if (t.params.observer) {
        if (t.params.observeParents) {
          const e = E(t.hostEl);
          for (let t = 0; t < e.length; t += 1) o(e[t])
        }
        o(t.hostEl, {childList: t.params.observeSlideChildren}), o(t.wrapperEl, {attributes: !1})
      }
    })), a("destroy", (() => {
      n.forEach((e => {
        e.disconnect()
      })), n.splice(0, n.length)
    }))
  }]);
  const ge = [function (e) {
    let t, {swiper: s, extendParams: i, on: r, emit: n} = e;
    i({
      virtual: {
        enabled: !1,
        slides: [],
        cache: !0,
        renderSlide: null,
        renderExternal: null,
        renderExternalUpdate: !0,
        addSlidesBefore: 0,
        addSlidesAfter: 0
      }
    });
    const l = a();
    s.virtual = {cache: {}, from: void 0, to: void 0, slides: [], offset: 0, slidesGrid: []};
    const o = l.createElement("div");

    function d(e, t) {
      const a = s.params.virtual;
      if (a.cache && s.virtual.cache[t]) return s.virtual.cache[t];
      let i;
      return a.renderSlide ? (i = a.renderSlide.call(s, e, t), "string" == typeof i && (o.innerHTML = i, i = o.children[0])) : i = s.isElement ? v("swiper-slide") : v("div", s.params.slideClass), i.setAttribute("data-swiper-slide-index", t), a.renderSlide || (i.innerHTML = e), a.cache && (s.virtual.cache[t] = i), i
    }

    function c(e, t) {
      const {slidesPerView: a, slidesPerGroup: i, centeredSlides: r, loop: l, initialSlide: o} = s.params;
      if (t && !l && o > 0) return;
      const {addSlidesBefore: c, addSlidesAfter: p} = s.params.virtual, {
        from: u,
        to: m,
        slides: h,
        slidesGrid: g,
        offset: v
      } = s.virtual;
      s.params.cssMode || s.updateActiveIndex();
      const w = s.activeIndex || 0;
      let b, y, E;
      b = s.rtlTranslate ? "right" : s.isHorizontal() ? "left" : "top", r ? (y = Math.floor(a / 2) + i + p, E = Math.floor(a / 2) + i + c) : (y = a + (i - 1) + p, E = (l ? a : i) + c);
      let x = w - E, S = w + y;
      l || (x = Math.max(x, 0), S = Math.min(S, h.length - 1));
      let T = (s.slidesGrid[x] || 0) - (s.slidesGrid[0] || 0);

      function M() {
        s.updateSlides(), s.updateProgress(), s.updateSlidesClasses(), n("virtualUpdate")
      }

      if (l && w >= E ? (x -= E, r || (T += s.slidesGrid[0])) : l && w < E && (x = -E, r && (T += s.slidesGrid[0])), Object.assign(s.virtual, {
        from: x,
        to: S,
        offset: T,
        slidesGrid: s.slidesGrid,
        slidesBefore: E,
        slidesAfter: y
      }), u === x && m === S && !e) return s.slidesGrid !== g && T !== v && s.slides.forEach((e => {
        e.style[b] = T - Math.abs(s.cssOverflowAdjustment()) + "px"
      })), s.updateProgress(), void n("virtualUpdate");
      if (s.params.virtual.renderExternal) return s.params.virtual.renderExternal.call(s, {
        offset: T,
        from: x,
        to: S,
        slides: function () {
          const e = [];
          for (let t = x; t <= S; t += 1) e.push(h[t]);
          return e
        }()
      }), void (s.params.virtual.renderExternalUpdate ? M() : n("virtualUpdate"));
      const C = [], P = [], L = e => {
        let t = e;
        return e < 0 ? t = h.length + e : t >= h.length && (t -= h.length), t
      };
      if (e) s.slides.filter((e => e.matches(`.${s.params.slideClass}, swiper-slide`))).forEach((e => {
        e.remove()
      })); else for (let e = u; e <= m; e += 1) if (e < x || e > S) {
        const t = L(e);
        s.slides.filter((e => e.matches(`.${s.params.slideClass}[data-swiper-slide-index="${t}"], swiper-slide[data-swiper-slide-index="${t}"]`))).forEach((e => {
          e.remove()
        }))
      }
      const I = l ? -h.length : 0, z = l ? 2 * h.length : h.length;
      for (let t = I; t < z; t += 1) if (t >= x && t <= S) {
        const s = L(t);
        void 0 === m || e ? P.push(s) : (t > m && P.push(s), t < u && C.push(s))
      }
      if (P.forEach((e => {
        s.slidesEl.append(d(h[e], e))
      })), l) for (let e = C.length - 1; e >= 0; e -= 1) {
        const t = C[e];
        s.slidesEl.prepend(d(h[t], t))
      } else C.sort(((e, t) => t - e)), C.forEach((e => {
        s.slidesEl.prepend(d(h[e], e))
      }));
      f(s.slidesEl, ".swiper-slide, swiper-slide").forEach((e => {
        e.style[b] = T - Math.abs(s.cssOverflowAdjustment()) + "px"
      })), M()
    }

    r("beforeInit", (() => {
      if (!s.params.virtual.enabled) return;
      let e;
      if (void 0 === s.passedParams.virtual.slides) {
        const t = [...s.slidesEl.children].filter((e => e.matches(`.${s.params.slideClass}, swiper-slide`)));
        t && t.length && (s.virtual.slides = [...t], e = !0, t.forEach(((e, t) => {
          e.setAttribute("data-swiper-slide-index", t), s.virtual.cache[t] = e, e.remove()
        })))
      }
      e || (s.virtual.slides = s.params.virtual.slides), s.classNames.push(`${s.params.containerModifierClass}virtual`), s.params.watchSlidesProgress = !0, s.originalParams.watchSlidesProgress = !0, c(!1, !0)
    })), r("setTranslate", (() => {
      s.params.virtual.enabled && (s.params.cssMode && !s._immediateVirtual ? (clearTimeout(t), t = setTimeout((() => {
        c()
      }), 100)) : c())
    })), r("init update resize", (() => {
      s.params.virtual.enabled && s.params.cssMode && u(s.wrapperEl, "--swiper-virtual-size", `${s.virtualSize}px`)
    })), Object.assign(s.virtual, {
      appendSlide: function (e) {
        if ("object" == typeof e && "length" in e) for (let t = 0; t < e.length; t += 1) e[t] && s.virtual.slides.push(e[t]); else s.virtual.slides.push(e);
        c(!0)
      }, prependSlide: function (e) {
        const t = s.activeIndex;
        let a = t + 1, i = 1;
        if (Array.isArray(e)) {
          for (let t = 0; t < e.length; t += 1) e[t] && s.virtual.slides.unshift(e[t]);
          a = t + e.length, i = e.length
        } else s.virtual.slides.unshift(e);
        if (s.params.virtual.cache) {
          const e = s.virtual.cache, t = {};
          Object.keys(e).forEach((s => {
            const a = e[s], r = a.getAttribute("data-swiper-slide-index");
            r && a.setAttribute("data-swiper-slide-index", parseInt(r, 10) + i), t[parseInt(s, 10) + i] = a
          })), s.virtual.cache = t
        }
        c(!0), s.slideTo(a, 0)
      }, removeSlide: function (e) {
        if (null == e) return;
        let t = s.activeIndex;
        if (Array.isArray(e)) for (let a = e.length - 1; a >= 0; a -= 1) s.params.virtual.cache && (delete s.virtual.cache[e[a]], Object.keys(s.virtual.cache).forEach((t => {
          t > e && (s.virtual.cache[t - 1] = s.virtual.cache[t], s.virtual.cache[t - 1].setAttribute("data-swiper-slide-index", t - 1), delete s.virtual.cache[t])
        }))), s.virtual.slides.splice(e[a], 1), e[a] < t && (t -= 1), t = Math.max(t, 0); else s.params.virtual.cache && (delete s.virtual.cache[e], Object.keys(s.virtual.cache).forEach((t => {
          t > e && (s.virtual.cache[t - 1] = s.virtual.cache[t], s.virtual.cache[t - 1].setAttribute("data-swiper-slide-index", t - 1), delete s.virtual.cache[t])
        }))), s.virtual.slides.splice(e, 1), e < t && (t -= 1), t = Math.max(t, 0);
        c(!0), s.slideTo(t, 0)
      }, removeAllSlides: function () {
        s.virtual.slides = [], s.params.virtual.cache && (s.virtual.cache = {}), c(!0), s.slideTo(0, 0)
      }, update: c
    })
  }, function (e) {
    let {swiper: t, extendParams: s, on: i, emit: n} = e;
    const l = a(), o = r();

    function d(e) {
      if (!t.enabled) return;
      const {rtlTranslate: s} = t;
      let a = e;
      a.originalEvent && (a = a.originalEvent);
      const i = a.keyCode || a.charCode, r = t.params.keyboard.pageUpDown, d = r && 33 === i, c = r && 34 === i,
        p = 37 === i, u = 39 === i, m = 38 === i, h = 40 === i;
      if (!t.allowSlideNext && (t.isHorizontal() && u || t.isVertical() && h || c)) return !1;
      if (!t.allowSlidePrev && (t.isHorizontal() && p || t.isVertical() && m || d)) return !1;
      if (!(a.shiftKey || a.altKey || a.ctrlKey || a.metaKey || l.activeElement && l.activeElement.nodeName && ("input" === l.activeElement.nodeName.toLowerCase() || "textarea" === l.activeElement.nodeName.toLowerCase()))) {
        if (t.params.keyboard.onlyInViewport && (d || c || p || u || m || h)) {
          let e = !1;
          if (E(t.el, `.${t.params.slideClass}, swiper-slide`).length > 0 && 0 === E(t.el, `.${t.params.slideActiveClass}`).length) return;
          const a = t.el, i = a.clientWidth, r = a.clientHeight, n = o.innerWidth, l = o.innerHeight, d = w(a);
          s && (d.left -= a.scrollLeft);
          const c = [[d.left, d.top], [d.left + i, d.top], [d.left, d.top + r], [d.left + i, d.top + r]];
          for (let t = 0; t < c.length; t += 1) {
            const s = c[t];
            if (s[0] >= 0 && s[0] <= n && s[1] >= 0 && s[1] <= l) {
              if (0 === s[0] && 0 === s[1]) continue;
              e = !0
            }
          }
          if (!e) return
        }
        t.isHorizontal() ? ((d || c || p || u) && (a.preventDefault ? a.preventDefault() : a.returnValue = !1), ((c || u) && !s || (d || p) && s) && t.slideNext(), ((d || p) && !s || (c || u) && s) && t.slidePrev()) : ((d || c || m || h) && (a.preventDefault ? a.preventDefault() : a.returnValue = !1), (c || h) && t.slideNext(), (d || m) && t.slidePrev()), n("keyPress", i)
      }
    }

    function c() {
      t.keyboard.enabled || (l.addEventListener("keydown", d), t.keyboard.enabled = !0)
    }

    function p() {
      t.keyboard.enabled && (l.removeEventListener("keydown", d), t.keyboard.enabled = !1)
    }

    t.keyboard = {enabled: !1}, s({keyboard: {enabled: !1, onlyInViewport: !0, pageUpDown: !0}}), i("init", (() => {
      t.params.keyboard.enabled && c()
    })), i("destroy", (() => {
      t.keyboard.enabled && p()
    })), Object.assign(t.keyboard, {enable: c, disable: p})
  }, function (e) {
    let {swiper: t, extendParams: s, on: a, emit: i} = e;
    const n = r();
    let d;
    s({
      mousewheel: {
        enabled: !1,
        releaseOnEdges: !1,
        invert: !1,
        forceToAxis: !1,
        sensitivity: 1,
        eventsTarget: "container",
        thresholdDelta: null,
        thresholdTime: null,
        noMousewheelClass: "swiper-no-mousewheel"
      }
    }), t.mousewheel = {enabled: !1};
    let c, p = o();
    const u = [];

    function m() {
      t.enabled && (t.mouseEntered = !0)
    }

    function h() {
      t.enabled && (t.mouseEntered = !1)
    }

    function f(e) {
      return !(t.params.mousewheel.thresholdDelta && e.delta < t.params.mousewheel.thresholdDelta) && (!(t.params.mousewheel.thresholdTime && o() - p < t.params.mousewheel.thresholdTime) && (e.delta >= 6 && o() - p < 60 || (e.direction < 0 ? t.isEnd && !t.params.loop || t.animating || (t.slideNext(), i("scroll", e.raw)) : t.isBeginning && !t.params.loop || t.animating || (t.slidePrev(), i("scroll", e.raw)), p = (new n.Date).getTime(), !1)))
    }

    function g(e) {
      let s = e, a = !0;
      if (!t.enabled) return;
      if (e.target.closest(`.${t.params.mousewheel.noMousewheelClass}`)) return;
      const r = t.params.mousewheel;
      t.params.cssMode && s.preventDefault();
      let n = t.el;
      "container" !== t.params.mousewheel.eventsTarget && (n = document.querySelector(t.params.mousewheel.eventsTarget));
      const p = n && n.contains(s.target);
      if (!t.mouseEntered && !p && !r.releaseOnEdges) return !0;
      s.originalEvent && (s = s.originalEvent);
      let m = 0;
      const h = t.rtlTranslate ? -1 : 1, g = function (e) {
        let t = 0, s = 0, a = 0, i = 0;
        return "detail" in e && (s = e.detail), "wheelDelta" in e && (s = -e.wheelDelta / 120), "wheelDeltaY" in e && (s = -e.wheelDeltaY / 120), "wheelDeltaX" in e && (t = -e.wheelDeltaX / 120), "axis" in e && e.axis === e.HORIZONTAL_AXIS && (t = s, s = 0), a = 10 * t, i = 10 * s, "deltaY" in e && (i = e.deltaY), "deltaX" in e && (a = e.deltaX), e.shiftKey && !a && (a = i, i = 0), (a || i) && e.deltaMode && (1 === e.deltaMode ? (a *= 40, i *= 40) : (a *= 800, i *= 800)), a && !t && (t = a < 1 ? -1 : 1), i && !s && (s = i < 1 ? -1 : 1), {
          spinX: t,
          spinY: s,
          pixelX: a,
          pixelY: i
        }
      }(s);
      if (r.forceToAxis) if (t.isHorizontal()) {
        if (!(Math.abs(g.pixelX) > Math.abs(g.pixelY))) return !0;
        m = -g.pixelX * h
      } else {
        if (!(Math.abs(g.pixelY) > Math.abs(g.pixelX))) return !0;
        m = -g.pixelY
      } else m = Math.abs(g.pixelX) > Math.abs(g.pixelY) ? -g.pixelX * h : -g.pixelY;
      if (0 === m) return !0;
      r.invert && (m = -m);
      let v = t.getTranslate() + m * r.sensitivity;
      if (v >= t.minTranslate() && (v = t.minTranslate()), v <= t.maxTranslate() && (v = t.maxTranslate()), a = !!t.params.loop || !(v === t.minTranslate() || v === t.maxTranslate()), a && t.params.nested && s.stopPropagation(), t.params.freeMode && t.params.freeMode.enabled) {
        const e = {time: o(), delta: Math.abs(m), direction: Math.sign(m)},
          a = c && e.time < c.time + 500 && e.delta <= c.delta && e.direction === c.direction;
        if (!a) {
          c = void 0;
          let n = t.getTranslate() + m * r.sensitivity;
          const o = t.isBeginning, p = t.isEnd;
          if (n >= t.minTranslate() && (n = t.minTranslate()), n <= t.maxTranslate() && (n = t.maxTranslate()), t.setTransition(0), t.setTranslate(n), t.updateProgress(), t.updateActiveIndex(), t.updateSlidesClasses(), (!o && t.isBeginning || !p && t.isEnd) && t.updateSlidesClasses(), t.params.loop && t.loopFix({
            direction: e.direction < 0 ? "next" : "prev",
            byMousewheel: !0
          }), t.params.freeMode.sticky) {
            clearTimeout(d), d = void 0, u.length >= 15 && u.shift();
            const s = u.length ? u[u.length - 1] : void 0, a = u[0];
            if (u.push(e), s && (e.delta > s.delta || e.direction !== s.direction)) u.splice(0); else if (u.length >= 15 && e.time - a.time < 500 && a.delta - e.delta >= 1 && e.delta <= 6) {
              const s = m > 0 ? .8 : .2;
              c = e, u.splice(0), d = l((() => {
                !t.destroyed && t.params && t.slideToClosest(t.params.speed, !0, void 0, s)
              }), 0)
            }
            d || (d = l((() => {
              if (t.destroyed || !t.params) return;
              c = e, u.splice(0), t.slideToClosest(t.params.speed, !0, void 0, .5)
            }), 500))
          }
          if (a || i("scroll", s), t.params.autoplay && t.params.autoplayDisableOnInteraction && t.autoplay.stop(), r.releaseOnEdges && (n === t.minTranslate() || n === t.maxTranslate())) return !0
        }
      } else {
        const s = {time: o(), delta: Math.abs(m), direction: Math.sign(m), raw: e};
        u.length >= 2 && u.shift();
        const a = u.length ? u[u.length - 1] : void 0;
        if (u.push(s), a ? (s.direction !== a.direction || s.delta > a.delta || s.time > a.time + 150) && f(s) : f(s), function (e) {
          const s = t.params.mousewheel;
          if (e.direction < 0) {
            if (t.isEnd && !t.params.loop && s.releaseOnEdges) return !0
          } else if (t.isBeginning && !t.params.loop && s.releaseOnEdges) return !0;
          return !1
        }(s)) return !0
      }
      return s.preventDefault ? s.preventDefault() : s.returnValue = !1, !1
    }

    function v(e) {
      let s = t.el;
      "container" !== t.params.mousewheel.eventsTarget && (s = document.querySelector(t.params.mousewheel.eventsTarget)), s[e]("mouseenter", m), s[e]("mouseleave", h), s[e]("wheel", g)
    }

    function w() {
      return t.params.cssMode ? (t.wrapperEl.removeEventListener("wheel", g), !0) : !t.mousewheel.enabled && (v("addEventListener"), t.mousewheel.enabled = !0, !0)
    }

    function b() {
      return t.params.cssMode ? (t.wrapperEl.addEventListener(event, g), !0) : !!t.mousewheel.enabled && (v("removeEventListener"), t.mousewheel.enabled = !1, !0)
    }

    a("init", (() => {
      !t.params.mousewheel.enabled && t.params.cssMode && b(), t.params.mousewheel.enabled && w()
    })), a("destroy", (() => {
      t.params.cssMode && w(), t.mousewheel.enabled && b()
    })), Object.assign(t.mousewheel, {enable: w, disable: b})
  }, function (e) {
    let {swiper: t, extendParams: s, on: a, emit: i} = e;

    function r(e) {
      let s;
      return e && "string" == typeof e && t.isElement && (s = t.el.querySelector(e) || t.hostEl.querySelector(e), s) ? s : (e && ("string" == typeof e && (s = [...document.querySelectorAll(e)]), t.params.uniqueNavElements && "string" == typeof e && s && s.length > 1 && 1 === t.el.querySelectorAll(e).length ? s = t.el.querySelector(e) : s && 1 === s.length && (s = s[0])), e && !s ? e : s)
    }

    function n(e, s) {
      const a = t.params.navigation;
      (e = T(e)).forEach((e => {
        e && (e.classList[s ? "add" : "remove"](...a.disabledClass.split(" ")), "BUTTON" === e.tagName && (e.disabled = s), t.params.watchOverflow && t.enabled && e.classList[t.isLocked ? "add" : "remove"](a.lockClass))
      }))
    }

    function l() {
      const {nextEl: e, prevEl: s} = t.navigation;
      if (t.params.loop) return n(s, !1), void n(e, !1);
      n(s, t.isBeginning && !t.params.rewind), n(e, t.isEnd && !t.params.rewind)
    }

    function o(e) {
      e.preventDefault(), (!t.isBeginning || t.params.loop || t.params.rewind) && (t.slidePrev(), i("navigationPrev"))
    }

    function d(e) {
      e.preventDefault(), (!t.isEnd || t.params.loop || t.params.rewind) && (t.slideNext(), i("navigationNext"))
    }

    function c() {
      const e = t.params.navigation;
      if (t.params.navigation = re(t, t.originalParams.navigation, t.params.navigation, {
        nextEl: "swiper-button-next",
        prevEl: "swiper-button-prev"
      }), !e.nextEl && !e.prevEl) return;
      let s = r(e.nextEl), a = r(e.prevEl);
      Object.assign(t.navigation, {nextEl: s, prevEl: a}), s = T(s), a = T(a);
      const i = (s, a) => {
        s && s.addEventListener("click", "next" === a ? d : o), !t.enabled && s && s.classList.add(...e.lockClass.split(" "))
      };
      s.forEach((e => i(e, "next"))), a.forEach((e => i(e, "prev")))
    }

    function p() {
      let {nextEl: e, prevEl: s} = t.navigation;
      e = T(e), s = T(s);
      const a = (e, s) => {
        e.removeEventListener("click", "next" === s ? d : o), e.classList.remove(...t.params.navigation.disabledClass.split(" "))
      };
      e.forEach((e => a(e, "next"))), s.forEach((e => a(e, "prev")))
    }

    s({
      navigation: {
        nextEl: null,
        prevEl: null,
        hideOnClick: !1,
        disabledClass: "swiper-button-disabled",
        hiddenClass: "swiper-button-hidden",
        lockClass: "swiper-button-lock",
        navigationDisabledClass: "swiper-navigation-disabled"
      }
    }), t.navigation = {nextEl: null, prevEl: null}, a("init", (() => {
      !1 === t.params.navigation.enabled ? u() : (c(), l())
    })), a("toEdge fromEdge lock unlock", (() => {
      l()
    })), a("destroy", (() => {
      p()
    })), a("enable disable", (() => {
      let {nextEl: e, prevEl: s} = t.navigation;
      e = T(e), s = T(s), t.enabled ? l() : [...e, ...s].filter((e => !!e)).forEach((e => e.classList.add(t.params.navigation.lockClass)))
    })), a("click", ((e, s) => {
      let {nextEl: a, prevEl: r} = t.navigation;
      a = T(a), r = T(r);
      const n = s.target;
      let l = r.includes(n) || a.includes(n);
      if (t.isElement && !l) {
        const e = s.path || s.composedPath && s.composedPath();
        e && (l = e.find((e => a.includes(e) || r.includes(e))))
      }
      if (t.params.navigation.hideOnClick && !l) {
        if (t.pagination && t.params.pagination && t.params.pagination.clickable && (t.pagination.el === n || t.pagination.el.contains(n))) return;
        let e;
        a.length ? e = a[0].classList.contains(t.params.navigation.hiddenClass) : r.length && (e = r[0].classList.contains(t.params.navigation.hiddenClass)), i(!0 === e ? "navigationShow" : "navigationHide"), [...a, ...r].filter((e => !!e)).forEach((e => e.classList.toggle(t.params.navigation.hiddenClass)))
      }
    }));
    const u = () => {
      t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")), p()
    };
    Object.assign(t.navigation, {
      enable: () => {
        t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")), c(), l()
      }, disable: u, update: l, init: c, destroy: p
    })
  }, function (e) {
    let {swiper: t, extendParams: s, on: a, emit: i} = e;
    const r = "swiper-pagination";
    let n;
    s({
      pagination: {
        el: null,
        bulletElement: "span",
        clickable: !1,
        hideOnClick: !1,
        renderBullet: null,
        renderProgressbar: null,
        renderFraction: null,
        renderCustom: null,
        progressbarOpposite: !1,
        type: "bullets",
        dynamicBullets: !1,
        dynamicMainBullets: 1,
        formatFractionCurrent: e => e,
        formatFractionTotal: e => e,
        bulletClass: `${r}-bullet`,
        bulletActiveClass: `${r}-bullet-active`,
        modifierClass: `${r}-`,
        currentClass: `${r}-current`,
        totalClass: `${r}-total`,
        hiddenClass: `${r}-hidden`,
        progressbarFillClass: `${r}-progressbar-fill`,
        progressbarOppositeClass: `${r}-progressbar-opposite`,
        clickableClass: `${r}-clickable`,
        lockClass: `${r}-lock`,
        horizontalClass: `${r}-horizontal`,
        verticalClass: `${r}-vertical`,
        paginationDisabledClass: `${r}-disabled`
      }
    }), t.pagination = {el: null, bullets: []};
    let l = 0;

    function o() {
      return !t.params.pagination.el || !t.pagination.el || Array.isArray(t.pagination.el) && 0 === t.pagination.el.length
    }

    function d(e, s) {
      const {bulletActiveClass: a} = t.params.pagination;
      e && (e = e[("prev" === s ? "previous" : "next") + "ElementSibling"]) && (e.classList.add(`${a}-${s}`), (e = e[("prev" === s ? "previous" : "next") + "ElementSibling"]) && e.classList.add(`${a}-${s}-${s}`))
    }

    function c(e) {
      const s = e.target.closest(ne(t.params.pagination.bulletClass));
      if (!s) return;
      e.preventDefault();
      const a = y(s) * t.params.slidesPerGroup;
      if (t.params.loop) {
        if (t.realIndex === a) return;
        const e = (i = t.realIndex, r = a, n = t.slides.length, (r %= n) == 1 + (i %= n) ? "next" : r === i - 1 ? "previous" : void 0);
        "next" === e ? t.slideNext() : "previous" === e ? t.slidePrev() : t.slideToLoop(a)
      } else t.slideTo(a);
      var i, r, n
    }

    function p() {
      const e = t.rtl, s = t.params.pagination;
      if (o()) return;
      let a, r, c = t.pagination.el;
      c = T(c);
      const p = t.virtual && t.params.virtual.enabled ? t.virtual.slides.length : t.slides.length,
        u = t.params.loop ? Math.ceil(p / t.params.slidesPerGroup) : t.snapGrid.length;
      if (t.params.loop ? (r = t.previousRealIndex || 0, a = t.params.slidesPerGroup > 1 ? Math.floor(t.realIndex / t.params.slidesPerGroup) : t.realIndex) : void 0 !== t.snapIndex ? (a = t.snapIndex, r = t.previousSnapIndex) : (r = t.previousIndex || 0, a = t.activeIndex || 0), "bullets" === s.type && t.pagination.bullets && t.pagination.bullets.length > 0) {
        const i = t.pagination.bullets;
        let o, p, u;
        if (s.dynamicBullets && (n = S(i[0], t.isHorizontal() ? "width" : "height", !0), c.forEach((e => {
          e.style[t.isHorizontal() ? "width" : "height"] = n * (s.dynamicMainBullets + 4) + "px"
        })), s.dynamicMainBullets > 1 && void 0 !== r && (l += a - (r || 0), l > s.dynamicMainBullets - 1 ? l = s.dynamicMainBullets - 1 : l < 0 && (l = 0)), o = Math.max(a - l, 0), p = o + (Math.min(i.length, s.dynamicMainBullets) - 1), u = (p + o) / 2), i.forEach((e => {
          const t = [...["", "-next", "-next-next", "-prev", "-prev-prev", "-main"].map((e => `${s.bulletActiveClass}${e}`))].map((e => "string" == typeof e && e.includes(" ") ? e.split(" ") : e)).flat();
          e.classList.remove(...t)
        })), c.length > 1) i.forEach((e => {
          const i = y(e);
          i === a ? e.classList.add(...s.bulletActiveClass.split(" ")) : t.isElement && e.setAttribute("part", "bullet"), s.dynamicBullets && (i >= o && i <= p && e.classList.add(...`${s.bulletActiveClass}-main`.split(" ")), i === o && d(e, "prev"), i === p && d(e, "next"))
        })); else {
          const e = i[a];
          if (e && e.classList.add(...s.bulletActiveClass.split(" ")), t.isElement && i.forEach(((e, t) => {
            e.setAttribute("part", t === a ? "bullet-active" : "bullet")
          })), s.dynamicBullets) {
            const e = i[o], t = i[p];
            for (let e = o; e <= p; e += 1) i[e] && i[e].classList.add(...`${s.bulletActiveClass}-main`.split(" "));
            d(e, "prev"), d(t, "next")
          }
        }
        if (s.dynamicBullets) {
          const a = Math.min(i.length, s.dynamicMainBullets + 4), r = (n * a - n) / 2 - u * n, l = e ? "right" : "left";
          i.forEach((e => {
            e.style[t.isHorizontal() ? l : "top"] = `${r}px`
          }))
        }
      }
      c.forEach(((e, r) => {
        if ("fraction" === s.type && (e.querySelectorAll(ne(s.currentClass)).forEach((e => {
          e.textContent = s.formatFractionCurrent(a + 1)
        })), e.querySelectorAll(ne(s.totalClass)).forEach((e => {
          e.textContent = s.formatFractionTotal(u)
        }))), "progressbar" === s.type) {
          let i;
          i = s.progressbarOpposite ? t.isHorizontal() ? "vertical" : "horizontal" : t.isHorizontal() ? "horizontal" : "vertical";
          const r = (a + 1) / u;
          let n = 1, l = 1;
          "horizontal" === i ? n = r : l = r, e.querySelectorAll(ne(s.progressbarFillClass)).forEach((e => {
            e.style.transform = `translate3d(0,0,0) scaleX(${n}) scaleY(${l})`, e.style.transitionDuration = `${t.params.speed}ms`
          }))
        }
        "custom" === s.type && s.renderCustom ? (e.innerHTML = s.renderCustom(t, a + 1, u), 0 === r && i("paginationRender", e)) : (0 === r && i("paginationRender", e), i("paginationUpdate", e)), t.params.watchOverflow && t.enabled && e.classList[t.isLocked ? "add" : "remove"](s.lockClass)
      }))
    }

    function u() {
      const e = t.params.pagination;
      if (o()) return;
      const s = t.virtual && t.params.virtual.enabled ? t.virtual.slides.length : t.grid && t.params.grid.rows > 1 ? t.slides.length / Math.ceil(t.params.grid.rows) : t.slides.length;
      let a = t.pagination.el;
      a = T(a);
      let r = "";
      if ("bullets" === e.type) {
        let a = t.params.loop ? Math.ceil(s / t.params.slidesPerGroup) : t.snapGrid.length;
        t.params.freeMode && t.params.freeMode.enabled && a > s && (a = s);
        for (let s = 0; s < a; s += 1) e.renderBullet ? r += e.renderBullet.call(t, s, e.bulletClass) : r += `<${e.bulletElement} ${t.isElement ? 'part="bullet"' : ""} class="${e.bulletClass}"></${e.bulletElement}>`
      }
      "fraction" === e.type && (r = e.renderFraction ? e.renderFraction.call(t, e.currentClass, e.totalClass) : `<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`), "progressbar" === e.type && (r = e.renderProgressbar ? e.renderProgressbar.call(t, e.progressbarFillClass) : `<span class="${e.progressbarFillClass}"></span>`), t.pagination.bullets = [], a.forEach((s => {
        "custom" !== e.type && (s.innerHTML = r || ""), "bullets" === e.type && t.pagination.bullets.push(...s.querySelectorAll(ne(e.bulletClass)))
      })), "custom" !== e.type && i("paginationRender", a[0])
    }

    function m() {
      t.params.pagination = re(t, t.originalParams.pagination, t.params.pagination, {el: "swiper-pagination"});
      const e = t.params.pagination;
      if (!e.el) return;
      let s;
      "string" == typeof e.el && t.isElement && (s = t.el.querySelector(e.el)), s || "string" != typeof e.el || (s = [...document.querySelectorAll(e.el)]), s || (s = e.el), s && 0 !== s.length && (t.params.uniqueNavElements && "string" == typeof e.el && Array.isArray(s) && s.length > 1 && (s = [...t.el.querySelectorAll(e.el)], s.length > 1 && (s = s.filter((e => E(e, ".swiper")[0] === t.el))[0])), Array.isArray(s) && 1 === s.length && (s = s[0]), Object.assign(t.pagination, {el: s}), s = T(s), s.forEach((s => {
        "bullets" === e.type && e.clickable && s.classList.add(...(e.clickableClass || "").split(" ")), s.classList.add(e.modifierClass + e.type), s.classList.add(t.isHorizontal() ? e.horizontalClass : e.verticalClass), "bullets" === e.type && e.dynamicBullets && (s.classList.add(`${e.modifierClass}${e.type}-dynamic`), l = 0, e.dynamicMainBullets < 1 && (e.dynamicMainBullets = 1)), "progressbar" === e.type && e.progressbarOpposite && s.classList.add(e.progressbarOppositeClass), e.clickable && s.addEventListener("click", c), t.enabled || s.classList.add(e.lockClass)
      })))
    }

    function h() {
      const e = t.params.pagination;
      if (o()) return;
      let s = t.pagination.el;
      s && (s = T(s), s.forEach((s => {
        s.classList.remove(e.hiddenClass), s.classList.remove(e.modifierClass + e.type), s.classList.remove(t.isHorizontal() ? e.horizontalClass : e.verticalClass), e.clickable && (s.classList.remove(...(e.clickableClass || "").split(" ")), s.removeEventListener("click", c))
      }))), t.pagination.bullets && t.pagination.bullets.forEach((t => t.classList.remove(...e.bulletActiveClass.split(" "))))
    }

    a("changeDirection", (() => {
      if (!t.pagination || !t.pagination.el) return;
      const e = t.params.pagination;
      let {el: s} = t.pagination;
      s = T(s), s.forEach((s => {
        s.classList.remove(e.horizontalClass, e.verticalClass), s.classList.add(t.isHorizontal() ? e.horizontalClass : e.verticalClass)
      }))
    })), a("init", (() => {
      !1 === t.params.pagination.enabled ? f() : (m(), u(), p())
    })), a("activeIndexChange", (() => {
      void 0 === t.snapIndex && p()
    })), a("snapIndexChange", (() => {
      p()
    })), a("snapGridLengthChange", (() => {
      u(), p()
    })), a("destroy", (() => {
      h()
    })), a("enable disable", (() => {
      let {el: e} = t.pagination;
      e && (e = T(e), e.forEach((e => e.classList[t.enabled ? "remove" : "add"](t.params.pagination.lockClass))))
    })), a("lock unlock", (() => {
      p()
    })), a("click", ((e, s) => {
      const a = s.target, r = T(t.pagination.el);
      if (t.params.pagination.el && t.params.pagination.hideOnClick && r && r.length > 0 && !a.classList.contains(t.params.pagination.bulletClass)) {
        if (t.navigation && (t.navigation.nextEl && a === t.navigation.nextEl || t.navigation.prevEl && a === t.navigation.prevEl)) return;
        const e = r[0].classList.contains(t.params.pagination.hiddenClass);
        i(!0 === e ? "paginationShow" : "paginationHide"), r.forEach((e => e.classList.toggle(t.params.pagination.hiddenClass)))
      }
    }));
    const f = () => {
      t.el.classList.add(t.params.pagination.paginationDisabledClass);
      let {el: e} = t.pagination;
      e && (e = T(e), e.forEach((e => e.classList.add(t.params.pagination.paginationDisabledClass)))), h()
    };
    Object.assign(t.pagination, {
      enable: () => {
        t.el.classList.remove(t.params.pagination.paginationDisabledClass);
        let {el: e} = t.pagination;
        e && (e = T(e), e.forEach((e => e.classList.remove(t.params.pagination.paginationDisabledClass)))), m(), u(), p()
      }, disable: f, render: u, update: p, init: m, destroy: h
    })
  }, function (e) {
    let {swiper: t, extendParams: s, on: i, emit: r} = e;
    const o = a();
    let d, c, p, u, m = !1, h = null, f = null;

    function g() {
      if (!t.params.scrollbar.el || !t.scrollbar.el) return;
      const {scrollbar: e, rtlTranslate: s} = t, {dragEl: a, el: i} = e, r = t.params.scrollbar,
        n = t.params.loop ? t.progressLoop : t.progress;
      let l = c, o = (p - c) * n;
      s ? (o = -o, o > 0 ? (l = c - o, o = 0) : -o + c > p && (l = p + o)) : o < 0 ? (l = c + o, o = 0) : o + c > p && (l = p - o), t.isHorizontal() ? (a.style.transform = `translate3d(${o}px, 0, 0)`, a.style.width = `${l}px`) : (a.style.transform = `translate3d(0px, ${o}px, 0)`, a.style.height = `${l}px`), r.hide && (clearTimeout(h), i.style.opacity = 1, h = setTimeout((() => {
        i.style.opacity = 0, i.style.transitionDuration = "400ms"
      }), 1e3))
    }

    function b() {
      if (!t.params.scrollbar.el || !t.scrollbar.el) return;
      const {scrollbar: e} = t, {dragEl: s, el: a} = e;
      s.style.width = "", s.style.height = "", p = t.isHorizontal() ? a.offsetWidth : a.offsetHeight, u = t.size / (t.virtualSize + t.params.slidesOffsetBefore - (t.params.centeredSlides ? t.snapGrid[0] : 0)), c = "auto" === t.params.scrollbar.dragSize ? p * u : parseInt(t.params.scrollbar.dragSize, 10), t.isHorizontal() ? s.style.width = `${c}px` : s.style.height = `${c}px`, a.style.display = u >= 1 ? "none" : "", t.params.scrollbar.hide && (a.style.opacity = 0), t.params.watchOverflow && t.enabled && e.el.classList[t.isLocked ? "add" : "remove"](t.params.scrollbar.lockClass)
    }

    function y(e) {
      return t.isHorizontal() ? e.clientX : e.clientY
    }

    function E(e) {
      const {scrollbar: s, rtlTranslate: a} = t, {el: i} = s;
      let r;
      r = (y(e) - w(i)[t.isHorizontal() ? "left" : "top"] - (null !== d ? d : c / 2)) / (p - c), r = Math.max(Math.min(r, 1), 0), a && (r = 1 - r);
      const n = t.minTranslate() + (t.maxTranslate() - t.minTranslate()) * r;
      t.updateProgress(n), t.setTranslate(n), t.updateActiveIndex(), t.updateSlidesClasses()
    }

    function x(e) {
      const s = t.params.scrollbar, {scrollbar: a, wrapperEl: i} = t, {el: n, dragEl: l} = a;
      m = !0, d = e.target === l ? y(e) - e.target.getBoundingClientRect()[t.isHorizontal() ? "left" : "top"] : null, e.preventDefault(), e.stopPropagation(), i.style.transitionDuration = "100ms", l.style.transitionDuration = "100ms", E(e), clearTimeout(f), n.style.transitionDuration = "0ms", s.hide && (n.style.opacity = 1), t.params.cssMode && (t.wrapperEl.style["scroll-snap-type"] = "none"), r("scrollbarDragStart", e)
    }

    function S(e) {
      const {scrollbar: s, wrapperEl: a} = t, {el: i, dragEl: n} = s;
      m && (e.preventDefault && e.cancelable ? e.preventDefault() : e.returnValue = !1, E(e), a.style.transitionDuration = "0ms", i.style.transitionDuration = "0ms", n.style.transitionDuration = "0ms", r("scrollbarDragMove", e))
    }

    function M(e) {
      const s = t.params.scrollbar, {scrollbar: a, wrapperEl: i} = t, {el: n} = a;
      m && (m = !1, t.params.cssMode && (t.wrapperEl.style["scroll-snap-type"] = "", i.style.transitionDuration = ""), s.hide && (clearTimeout(f), f = l((() => {
        n.style.opacity = 0, n.style.transitionDuration = "400ms"
      }), 1e3)), r("scrollbarDragEnd", e), s.snapOnRelease && t.slideToClosest())
    }

    function C(e) {
      const {scrollbar: s, params: a} = t, i = s.el;
      if (!i) return;
      const r = i, n = !!a.passiveListeners && {passive: !1, capture: !1},
        l = !!a.passiveListeners && {passive: !0, capture: !1};
      if (!r) return;
      const d = "on" === e ? "addEventListener" : "removeEventListener";
      r[d]("pointerdown", x, n), o[d]("pointermove", S, n), o[d]("pointerup", M, l)
    }

    function P() {
      const {scrollbar: e, el: s} = t;
      t.params.scrollbar = re(t, t.originalParams.scrollbar, t.params.scrollbar, {el: "swiper-scrollbar"});
      const a = t.params.scrollbar;
      if (!a.el) return;
      let i, r;
      if ("string" == typeof a.el && t.isElement && (i = t.el.querySelector(a.el)), i || "string" != typeof a.el) i || (i = a.el); else if (i = o.querySelectorAll(a.el), !i.length) return;
      t.params.uniqueNavElements && "string" == typeof a.el && i.length > 1 && 1 === s.querySelectorAll(a.el).length && (i = s.querySelector(a.el)), i.length > 0 && (i = i[0]), i.classList.add(t.isHorizontal() ? a.horizontalClass : a.verticalClass), i && (r = i.querySelector(ne(t.params.scrollbar.dragClass)), r || (r = v("div", t.params.scrollbar.dragClass), i.append(r))), Object.assign(e, {
        el: i,
        dragEl: r
      }), a.draggable && t.params.scrollbar.el && t.scrollbar.el && C("on"), i && i.classList[t.enabled ? "remove" : "add"](...n(t.params.scrollbar.lockClass))
    }

    function L() {
      const e = t.params.scrollbar, s = t.scrollbar.el;
      s && s.classList.remove(...n(t.isHorizontal() ? e.horizontalClass : e.verticalClass)), t.params.scrollbar.el && t.scrollbar.el && C("off")
    }

    s({
      scrollbar: {
        el: null,
        dragSize: "auto",
        hide: !1,
        draggable: !1,
        snapOnRelease: !0,
        lockClass: "swiper-scrollbar-lock",
        dragClass: "swiper-scrollbar-drag",
        scrollbarDisabledClass: "swiper-scrollbar-disabled",
        horizontalClass: "swiper-scrollbar-horizontal",
        verticalClass: "swiper-scrollbar-vertical"
      }
    }), t.scrollbar = {el: null, dragEl: null}, i("changeDirection", (() => {
      if (!t.scrollbar || !t.scrollbar.el) return;
      const e = t.params.scrollbar;
      let {el: s} = t.scrollbar;
      s = T(s), s.forEach((s => {
        s.classList.remove(e.horizontalClass, e.verticalClass), s.classList.add(t.isHorizontal() ? e.horizontalClass : e.verticalClass)
      }))
    })), i("init", (() => {
      !1 === t.params.scrollbar.enabled ? I() : (P(), b(), g())
    })), i("update resize observerUpdate lock unlock changeDirection", (() => {
      b()
    })), i("setTranslate", (() => {
      g()
    })), i("setTransition", ((e, s) => {
      !function (e) {
        t.params.scrollbar.el && t.scrollbar.el && (t.scrollbar.dragEl.style.transitionDuration = `${e}ms`)
      }(s)
    })), i("enable disable", (() => {
      const {el: e} = t.scrollbar;
      e && e.classList[t.enabled ? "remove" : "add"](...n(t.params.scrollbar.lockClass))
    })), i("destroy", (() => {
      L()
    }));
    const I = () => {
      t.el.classList.add(...n(t.params.scrollbar.scrollbarDisabledClass)), t.scrollbar.el && t.scrollbar.el.classList.add(...n(t.params.scrollbar.scrollbarDisabledClass)), L()
    };
    Object.assign(t.scrollbar, {
      enable: () => {
        t.el.classList.remove(...n(t.params.scrollbar.scrollbarDisabledClass)), t.scrollbar.el && t.scrollbar.el.classList.remove(...n(t.params.scrollbar.scrollbarDisabledClass)), P(), b(), g()
      }, disable: I, updateSize: b, setTranslate: g, init: P, destroy: L
    })
  }, function (e) {
    let {swiper: t, extendParams: s, on: a} = e;
    s({parallax: {enabled: !1}});
    const i = "[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]",
      r = (e, s) => {
        const {rtl: a} = t, i = a ? -1 : 1, r = e.getAttribute("data-swiper-parallax") || "0";
        let n = e.getAttribute("data-swiper-parallax-x"), l = e.getAttribute("data-swiper-parallax-y");
        const o = e.getAttribute("data-swiper-parallax-scale"), d = e.getAttribute("data-swiper-parallax-opacity"),
          c = e.getAttribute("data-swiper-parallax-rotate");
        if (n || l ? (n = n || "0", l = l || "0") : t.isHorizontal() ? (n = r, l = "0") : (l = r, n = "0"), n = n.indexOf("%") >= 0 ? parseInt(n, 10) * s * i + "%" : n * s * i + "px", l = l.indexOf("%") >= 0 ? parseInt(l, 10) * s + "%" : l * s + "px", null != d) {
          const t = d - (d - 1) * (1 - Math.abs(s));
          e.style.opacity = t
        }
        let p = `translate3d(${n}, ${l}, 0px)`;
        if (null != o) {
          p += ` scale(${o - (o - 1) * (1 - Math.abs(s))})`
        }
        if (c && null != c) {
          p += ` rotate(${c * s * -1}deg)`
        }
        e.style.transform = p
      }, n = () => {
        const {el: e, slides: s, progress: a, snapGrid: n, isElement: l} = t, o = f(e, i);
        t.isElement && o.push(...f(t.hostEl, i)), o.forEach((e => {
          r(e, a)
        })), s.forEach(((e, s) => {
          let l = e.progress;
          t.params.slidesPerGroup > 1 && "auto" !== t.params.slidesPerView && (l += Math.ceil(s / 2) - a * (n.length - 1)), l = Math.min(Math.max(l, -1), 1), e.querySelectorAll(`${i}, [data-swiper-parallax-rotate]`).forEach((e => {
            r(e, l)
          }))
        }))
      };
    a("beforeInit", (() => {
      t.params.parallax.enabled && (t.params.watchSlidesProgress = !0, t.originalParams.watchSlidesProgress = !0)
    })), a("init", (() => {
      t.params.parallax.enabled && n()
    })), a("setTranslate", (() => {
      t.params.parallax.enabled && n()
    })), a("setTransition", ((e, s) => {
      t.params.parallax.enabled && function (e) {
        void 0 === e && (e = t.params.speed);
        const {el: s, hostEl: a} = t, r = [...s.querySelectorAll(i)];
        t.isElement && r.push(...a.querySelectorAll(i)), r.forEach((t => {
          let s = parseInt(t.getAttribute("data-swiper-parallax-duration"), 10) || e;
          0 === e && (s = 0), t.style.transitionDuration = `${s}ms`
        }))
      }(s)
    }))
  }, function (e) {
    let {swiper: t, extendParams: s, on: a, emit: i} = e;
    const n = r();
    s({
      zoom: {
        enabled: !1,
        limitToOriginalSize: !1,
        maxRatio: 3,
        minRatio: 1,
        toggle: !0,
        containerClass: "swiper-zoom-container",
        zoomedSlideClass: "swiper-slide-zoomed"
      }
    }), t.zoom = {enabled: !1};
    let l, o, c = 1, p = !1;
    const u = [], m = {
      originX: 0,
      originY: 0,
      slideEl: void 0,
      slideWidth: void 0,
      slideHeight: void 0,
      imageEl: void 0,
      imageWrapEl: void 0,
      maxRatio: 3
    }, h = {
      isTouched: void 0,
      isMoved: void 0,
      currentX: void 0,
      currentY: void 0,
      minX: void 0,
      minY: void 0,
      maxX: void 0,
      maxY: void 0,
      width: void 0,
      height: void 0,
      startX: void 0,
      startY: void 0,
      touchesStart: {},
      touchesCurrent: {}
    }, g = {x: void 0, y: void 0, prevPositionX: void 0, prevPositionY: void 0, prevTime: void 0};
    let v, b = 1;

    function y() {
      if (u.length < 2) return 1;
      const e = u[0].pageX, t = u[0].pageY, s = u[1].pageX, a = u[1].pageY;
      return Math.sqrt((s - e) ** 2 + (a - t) ** 2)
    }

    function x() {
      const e = t.params.zoom, s = m.imageWrapEl.getAttribute("data-swiper-zoom") || e.maxRatio;
      if (e.limitToOriginalSize && m.imageEl && m.imageEl.naturalWidth) {
        const e = m.imageEl.naturalWidth / m.imageEl.offsetWidth;
        return Math.min(e, s)
      }
      return s
    }

    function S(e) {
      const s = t.isElement ? "swiper-slide" : `.${t.params.slideClass}`;
      return !!e.target.matches(s) || t.slides.filter((t => t.contains(e.target))).length > 0
    }

    function T(e) {
      if ("mouse" === e.pointerType && u.splice(0, u.length), !S(e)) return;
      const s = t.params.zoom;
      if (l = !1, o = !1, u.push(e), !(u.length < 2)) {
        if (l = !0, m.scaleStart = y(), !m.slideEl) {
          m.slideEl = e.target.closest(`.${t.params.slideClass}, swiper-slide`), m.slideEl || (m.slideEl = t.slides[t.activeIndex]);
          let a = m.slideEl.querySelector(`.${s.containerClass}`);
          if (a && (a = a.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]), m.imageEl = a, m.imageWrapEl = a ? E(m.imageEl, `.${s.containerClass}`)[0] : void 0, !m.imageWrapEl) return void (m.imageEl = void 0);
          m.maxRatio = x()
        }
        if (m.imageEl) {
          const [e, t] = function () {
            if (u.length < 2) return {x: null, y: null};
            const e = m.imageEl.getBoundingClientRect();
            return [(u[0].pageX + (u[1].pageX - u[0].pageX) / 2 - e.x - n.scrollX) / c, (u[0].pageY + (u[1].pageY - u[0].pageY) / 2 - e.y - n.scrollY) / c]
          }();
          m.originX = e, m.originY = t, m.imageEl.style.transitionDuration = "0ms"
        }
        p = !0
      }
    }

    function M(e) {
      if (!S(e)) return;
      const s = t.params.zoom, a = t.zoom, i = u.findIndex((t => t.pointerId === e.pointerId));
      i >= 0 && (u[i] = e), u.length < 2 || (o = !0, m.scaleMove = y(), m.imageEl && (a.scale = m.scaleMove / m.scaleStart * c, a.scale > m.maxRatio && (a.scale = m.maxRatio - 1 + (a.scale - m.maxRatio + 1) ** .5), a.scale < s.minRatio && (a.scale = s.minRatio + 1 - (s.minRatio - a.scale + 1) ** .5), m.imageEl.style.transform = `translate3d(0,0,0) scale(${a.scale})`))
    }

    function C(e) {
      if (!S(e)) return;
      if ("mouse" === e.pointerType && "pointerout" === e.type) return;
      const s = t.params.zoom, a = t.zoom, i = u.findIndex((t => t.pointerId === e.pointerId));
      i >= 0 && u.splice(i, 1), l && o && (l = !1, o = !1, m.imageEl && (a.scale = Math.max(Math.min(a.scale, m.maxRatio), s.minRatio), m.imageEl.style.transitionDuration = `${t.params.speed}ms`, m.imageEl.style.transform = `translate3d(0,0,0) scale(${a.scale})`, c = a.scale, p = !1, a.scale > 1 && m.slideEl ? m.slideEl.classList.add(`${s.zoomedSlideClass}`) : a.scale <= 1 && m.slideEl && m.slideEl.classList.remove(`${s.zoomedSlideClass}`), 1 === a.scale && (m.originX = 0, m.originY = 0, m.slideEl = void 0)))
    }

    function P() {
      t.touchEventsData.preventTouchMoveFromPointerMove = !1
    }

    function L(e) {
      if (!S(e) || !function (e) {
        const s = `.${t.params.zoom.containerClass}`;
        return !!e.target.matches(s) || [...t.hostEl.querySelectorAll(s)].filter((t => t.contains(e.target))).length > 0
      }(e)) return;
      const s = t.zoom;
      if (!m.imageEl) return;
      if (!h.isTouched || !m.slideEl) return;
      h.isMoved || (h.width = m.imageEl.offsetWidth || m.imageEl.clientWidth, h.height = m.imageEl.offsetHeight || m.imageEl.clientHeight, h.startX = d(m.imageWrapEl, "x") || 0, h.startY = d(m.imageWrapEl, "y") || 0, m.slideWidth = m.slideEl.offsetWidth, m.slideHeight = m.slideEl.offsetHeight, m.imageWrapEl.style.transitionDuration = "0ms");
      const a = h.width * s.scale, i = h.height * s.scale;
      h.minX = Math.min(m.slideWidth / 2 - a / 2, 0), h.maxX = -h.minX, h.minY = Math.min(m.slideHeight / 2 - i / 2, 0), h.maxY = -h.minY, h.touchesCurrent.x = u.length > 0 ? u[0].pageX : e.pageX, h.touchesCurrent.y = u.length > 0 ? u[0].pageY : e.pageY;
      if (Math.max(Math.abs(h.touchesCurrent.x - h.touchesStart.x), Math.abs(h.touchesCurrent.y - h.touchesStart.y)) > 5 && (t.allowClick = !1), !h.isMoved && !p) {
        if (t.isHorizontal() && (Math.floor(h.minX) === Math.floor(h.startX) && h.touchesCurrent.x < h.touchesStart.x || Math.floor(h.maxX) === Math.floor(h.startX) && h.touchesCurrent.x > h.touchesStart.x)) return h.isTouched = !1, void P();
        if (!t.isHorizontal() && (Math.floor(h.minY) === Math.floor(h.startY) && h.touchesCurrent.y < h.touchesStart.y || Math.floor(h.maxY) === Math.floor(h.startY) && h.touchesCurrent.y > h.touchesStart.y)) return h.isTouched = !1, void P()
      }
      e.cancelable && e.preventDefault(), e.stopPropagation(), clearTimeout(v), t.touchEventsData.preventTouchMoveFromPointerMove = !0, v = setTimeout((() => {
        t.destroyed || P()
      })), h.isMoved = !0;
      const r = (s.scale - c) / (m.maxRatio - t.params.zoom.minRatio), {originX: n, originY: l} = m;
      h.currentX = h.touchesCurrent.x - h.touchesStart.x + h.startX + r * (h.width - 2 * n), h.currentY = h.touchesCurrent.y - h.touchesStart.y + h.startY + r * (h.height - 2 * l), h.currentX < h.minX && (h.currentX = h.minX + 1 - (h.minX - h.currentX + 1) ** .8), h.currentX > h.maxX && (h.currentX = h.maxX - 1 + (h.currentX - h.maxX + 1) ** .8), h.currentY < h.minY && (h.currentY = h.minY + 1 - (h.minY - h.currentY + 1) ** .8), h.currentY > h.maxY && (h.currentY = h.maxY - 1 + (h.currentY - h.maxY + 1) ** .8), g.prevPositionX || (g.prevPositionX = h.touchesCurrent.x), g.prevPositionY || (g.prevPositionY = h.touchesCurrent.y), g.prevTime || (g.prevTime = Date.now()), g.x = (h.touchesCurrent.x - g.prevPositionX) / (Date.now() - g.prevTime) / 2, g.y = (h.touchesCurrent.y - g.prevPositionY) / (Date.now() - g.prevTime) / 2, Math.abs(h.touchesCurrent.x - g.prevPositionX) < 2 && (g.x = 0), Math.abs(h.touchesCurrent.y - g.prevPositionY) < 2 && (g.y = 0), g.prevPositionX = h.touchesCurrent.x, g.prevPositionY = h.touchesCurrent.y, g.prevTime = Date.now(), m.imageWrapEl.style.transform = `translate3d(${h.currentX}px, ${h.currentY}px,0)`
    }

    function I() {
      const e = t.zoom;
      m.slideEl && t.activeIndex !== t.slides.indexOf(m.slideEl) && (m.imageEl && (m.imageEl.style.transform = "translate3d(0,0,0) scale(1)"), m.imageWrapEl && (m.imageWrapEl.style.transform = "translate3d(0,0,0)"), m.slideEl.classList.remove(`${t.params.zoom.zoomedSlideClass}`), e.scale = 1, c = 1, m.slideEl = void 0, m.imageEl = void 0, m.imageWrapEl = void 0, m.originX = 0, m.originY = 0)
    }

    function z(e) {
      const s = t.zoom, a = t.params.zoom;
      if (!m.slideEl) {
        e && e.target && (m.slideEl = e.target.closest(`.${t.params.slideClass}, swiper-slide`)), m.slideEl || (t.params.virtual && t.params.virtual.enabled && t.virtual ? m.slideEl = f(t.slidesEl, `.${t.params.slideActiveClass}`)[0] : m.slideEl = t.slides[t.activeIndex]);
        let s = m.slideEl.querySelector(`.${a.containerClass}`);
        s && (s = s.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]), m.imageEl = s, m.imageWrapEl = s ? E(m.imageEl, `.${a.containerClass}`)[0] : void 0
      }
      if (!m.imageEl || !m.imageWrapEl) return;
      let i, r, l, o, d, p, u, g, v, b, y, S, T, M, C, P, L, I;
      t.params.cssMode && (t.wrapperEl.style.overflow = "hidden", t.wrapperEl.style.touchAction = "none"), m.slideEl.classList.add(`${a.zoomedSlideClass}`), void 0 === h.touchesStart.x && e ? (i = e.pageX, r = e.pageY) : (i = h.touchesStart.x, r = h.touchesStart.y);
      const z = "number" == typeof e ? e : null;
      1 === c && z && (i = void 0, r = void 0, h.touchesStart.x = void 0, h.touchesStart.y = void 0);
      const A = x();
      s.scale = z || A, c = z || A, !e || 1 === c && z ? (u = 0, g = 0) : (L = m.slideEl.offsetWidth, I = m.slideEl.offsetHeight, l = w(m.slideEl).left + n.scrollX, o = w(m.slideEl).top + n.scrollY, d = l + L / 2 - i, p = o + I / 2 - r, v = m.imageEl.offsetWidth || m.imageEl.clientWidth, b = m.imageEl.offsetHeight || m.imageEl.clientHeight, y = v * s.scale, S = b * s.scale, T = Math.min(L / 2 - y / 2, 0), M = Math.min(I / 2 - S / 2, 0), C = -T, P = -M, u = d * s.scale, g = p * s.scale, u < T && (u = T), u > C && (u = C), g < M && (g = M), g > P && (g = P)), z && 1 === s.scale && (m.originX = 0, m.originY = 0), m.imageWrapEl.style.transitionDuration = "300ms", m.imageWrapEl.style.transform = `translate3d(${u}px, ${g}px,0)`, m.imageEl.style.transitionDuration = "300ms", m.imageEl.style.transform = `translate3d(0,0,0) scale(${s.scale})`
    }

    function A() {
      const e = t.zoom, s = t.params.zoom;
      if (!m.slideEl) {
        t.params.virtual && t.params.virtual.enabled && t.virtual ? m.slideEl = f(t.slidesEl, `.${t.params.slideActiveClass}`)[0] : m.slideEl = t.slides[t.activeIndex];
        let e = m.slideEl.querySelector(`.${s.containerClass}`);
        e && (e = e.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]), m.imageEl = e, m.imageWrapEl = e ? E(m.imageEl, `.${s.containerClass}`)[0] : void 0
      }
      m.imageEl && m.imageWrapEl && (t.params.cssMode && (t.wrapperEl.style.overflow = "", t.wrapperEl.style.touchAction = ""), e.scale = 1, c = 1, h.touchesStart.x = void 0, h.touchesStart.y = void 0, m.imageWrapEl.style.transitionDuration = "300ms", m.imageWrapEl.style.transform = "translate3d(0,0,0)", m.imageEl.style.transitionDuration = "300ms", m.imageEl.style.transform = "translate3d(0,0,0) scale(1)", m.slideEl.classList.remove(`${s.zoomedSlideClass}`), m.slideEl = void 0, m.originX = 0, m.originY = 0)
    }

    function $(e) {
      const s = t.zoom;
      s.scale && 1 !== s.scale ? A() : z(e)
    }

    function k() {
      return {
        passiveListener: !!t.params.passiveListeners && {passive: !0, capture: !1},
        activeListenerWithCapture: !t.params.passiveListeners || {passive: !1, capture: !0}
      }
    }

    function O() {
      const e = t.zoom;
      if (e.enabled) return;
      e.enabled = !0;
      const {passiveListener: s, activeListenerWithCapture: a} = k();
      t.wrapperEl.addEventListener("pointerdown", T, s), t.wrapperEl.addEventListener("pointermove", M, a), ["pointerup", "pointercancel", "pointerout"].forEach((e => {
        t.wrapperEl.addEventListener(e, C, s)
      })), t.wrapperEl.addEventListener("pointermove", L, a)
    }

    function D() {
      const e = t.zoom;
      if (!e.enabled) return;
      e.enabled = !1;
      const {passiveListener: s, activeListenerWithCapture: a} = k();
      t.wrapperEl.removeEventListener("pointerdown", T, s), t.wrapperEl.removeEventListener("pointermove", M, a), ["pointerup", "pointercancel", "pointerout"].forEach((e => {
        t.wrapperEl.removeEventListener(e, C, s)
      })), t.wrapperEl.removeEventListener("pointermove", L, a)
    }

    Object.defineProperty(t.zoom, "scale", {
      get: () => b, set(e) {
        if (b !== e) {
          const t = m.imageEl, s = m.slideEl;
          i("zoomChange", e, t, s)
        }
        b = e
      }
    }), a("init", (() => {
      t.params.zoom.enabled && O()
    })), a("destroy", (() => {
      D()
    })), a("touchStart", ((e, s) => {
      t.zoom.enabled && function (e) {
        const s = t.device;
        if (!m.imageEl) return;
        if (h.isTouched) return;
        s.android && e.cancelable && e.preventDefault(), h.isTouched = !0;
        const a = u.length > 0 ? u[0] : e;
        h.touchesStart.x = a.pageX, h.touchesStart.y = a.pageY
      }(s)
    })), a("touchEnd", ((e, s) => {
      t.zoom.enabled && function () {
        const e = t.zoom;
        if (!m.imageEl) return;
        if (!h.isTouched || !h.isMoved) return h.isTouched = !1, void (h.isMoved = !1);
        h.isTouched = !1, h.isMoved = !1;
        let s = 300, a = 300;
        const i = g.x * s, r = h.currentX + i, n = g.y * a, l = h.currentY + n;
        0 !== g.x && (s = Math.abs((r - h.currentX) / g.x)), 0 !== g.y && (a = Math.abs((l - h.currentY) / g.y));
        const o = Math.max(s, a);
        h.currentX = r, h.currentY = l;
        const d = h.width * e.scale, c = h.height * e.scale;
        h.minX = Math.min(m.slideWidth / 2 - d / 2, 0), h.maxX = -h.minX, h.minY = Math.min(m.slideHeight / 2 - c / 2, 0), h.maxY = -h.minY, h.currentX = Math.max(Math.min(h.currentX, h.maxX), h.minX), h.currentY = Math.max(Math.min(h.currentY, h.maxY), h.minY), m.imageWrapEl.style.transitionDuration = `${o}ms`, m.imageWrapEl.style.transform = `translate3d(${h.currentX}px, ${h.currentY}px,0)`
      }()
    })), a("doubleTap", ((e, s) => {
      !t.animating && t.params.zoom.enabled && t.zoom.enabled && t.params.zoom.toggle && $(s)
    })), a("transitionEnd", (() => {
      t.zoom.enabled && t.params.zoom.enabled && I()
    })), a("slideChange", (() => {
      t.zoom.enabled && t.params.zoom.enabled && t.params.cssMode && I()
    })), Object.assign(t.zoom, {enable: O, disable: D, in: z, out: A, toggle: $})
  }, function (e) {
    let {swiper: t, extendParams: s, on: a} = e;

    function i(e, t) {
      const s = function () {
        let e, t, s;
        return (a, i) => {
          for (t = -1, e = a.length; e - t > 1;) s = e + t >> 1, a[s] <= i ? t = s : e = s;
          return e
        }
      }();
      let a, i;
      return this.x = e, this.y = t, this.lastIndex = e.length - 1, this.interpolate = function (e) {
        return e ? (i = s(this.x, e), a = i - 1, (e - this.x[a]) * (this.y[i] - this.y[a]) / (this.x[i] - this.x[a]) + this.y[a]) : 0
      }, this
    }

    function r() {
      t.controller.control && t.controller.spline && (t.controller.spline = void 0, delete t.controller.spline)
    }

    s({
      controller: {
        control: void 0,
        inverse: !1,
        by: "slide"
      }
    }), t.controller = {control: void 0}, a("beforeInit", (() => {
      if ("undefined" != typeof window && ("string" == typeof t.params.controller.control || t.params.controller.control instanceof HTMLElement)) {
        ("string" == typeof t.params.controller.control ? [...document.querySelectorAll(t.params.controller.control)] : [t.params.controller.control]).forEach((e => {
          if (t.controller.control || (t.controller.control = []), e && e.swiper) t.controller.control.push(e.swiper); else if (e) {
            const s = `${t.params.eventsPrefix}init`, a = i => {
              t.controller.control.push(i.detail[0]), t.update(), e.removeEventListener(s, a)
            };
            e.addEventListener(s, a)
          }
        }))
      } else t.controller.control = t.params.controller.control
    })), a("update", (() => {
      r()
    })), a("resize", (() => {
      r()
    })), a("observerUpdate", (() => {
      r()
    })), a("setTranslate", ((e, s, a) => {
      t.controller.control && !t.controller.control.destroyed && t.controller.setTranslate(s, a)
    })), a("setTransition", ((e, s, a) => {
      t.controller.control && !t.controller.control.destroyed && t.controller.setTransition(s, a)
    })), Object.assign(t.controller, {
      setTranslate: function (e, s) {
        const a = t.controller.control;
        let r, n;
        const l = t.constructor;

        function o(e) {
          if (e.destroyed) return;
          const s = t.rtlTranslate ? -t.translate : t.translate;
          "slide" === t.params.controller.by && (!function (e) {
            t.controller.spline = t.params.loop ? new i(t.slidesGrid, e.slidesGrid) : new i(t.snapGrid, e.snapGrid)
          }(e), n = -t.controller.spline.interpolate(-s)), n && "container" !== t.params.controller.by || (r = (e.maxTranslate() - e.minTranslate()) / (t.maxTranslate() - t.minTranslate()), !Number.isNaN(r) && Number.isFinite(r) || (r = 1), n = (s - t.minTranslate()) * r + e.minTranslate()), t.params.controller.inverse && (n = e.maxTranslate() - n), e.updateProgress(n), e.setTranslate(n, t), e.updateActiveIndex(), e.updateSlidesClasses()
        }

        if (Array.isArray(a)) for (let e = 0; e < a.length; e += 1) a[e] !== s && a[e] instanceof l && o(a[e]); else a instanceof l && s !== a && o(a)
      }, setTransition: function (e, s) {
        const a = t.constructor, i = t.controller.control;
        let r;

        function n(s) {
          s.destroyed || (s.setTransition(e, t), 0 !== e && (s.transitionStart(), s.params.autoHeight && l((() => {
            s.updateAutoHeight()
          })), x(s.wrapperEl, (() => {
            i && s.transitionEnd()
          }))))
        }

        if (Array.isArray(i)) for (r = 0; r < i.length; r += 1) i[r] !== s && i[r] instanceof a && n(i[r]); else i instanceof a && s !== i && n(i)
      }
    })
  }, function (e) {
    let {swiper: t, extendParams: s, on: i} = e;
    s({
      a11y: {
        enabled: !0,
        notificationClass: "swiper-notification",
        prevSlideMessage: "Previous slide",
        nextSlideMessage: "Next slide",
        firstSlideMessage: "This is the first slide",
        lastSlideMessage: "This is the last slide",
        paginationBulletMessage: "Go to slide {{index}}",
        slideLabelMessage: "{{index}} / {{slidesLength}}",
        containerMessage: null,
        containerRoleDescriptionMessage: null,
        containerRole: null,
        itemRoleDescriptionMessage: null,
        slideRole: "group",
        id: null,
        scrollOnFocus: !0
      }
    }), t.a11y = {clicked: !1};
    let r, n, l = null, o = (new Date).getTime();

    function d(e) {
      const t = l;
      0 !== t.length && (t.innerHTML = "", t.innerHTML = e)
    }

    function c(e) {
      (e = T(e)).forEach((e => {
        e.setAttribute("tabIndex", "0")
      }))
    }

    function p(e) {
      (e = T(e)).forEach((e => {
        e.setAttribute("tabIndex", "-1")
      }))
    }

    function u(e, t) {
      (e = T(e)).forEach((e => {
        e.setAttribute("role", t)
      }))
    }

    function m(e, t) {
      (e = T(e)).forEach((e => {
        e.setAttribute("aria-roledescription", t)
      }))
    }

    function h(e, t) {
      (e = T(e)).forEach((e => {
        e.setAttribute("aria-label", t)
      }))
    }

    function f(e) {
      (e = T(e)).forEach((e => {
        e.setAttribute("aria-disabled", !0)
      }))
    }

    function g(e) {
      (e = T(e)).forEach((e => {
        e.setAttribute("aria-disabled", !1)
      }))
    }

    function w(e) {
      if (13 !== e.keyCode && 32 !== e.keyCode) return;
      const s = t.params.a11y, a = e.target;
      if (!t.pagination || !t.pagination.el || a !== t.pagination.el && !t.pagination.el.contains(e.target) || e.target.matches(ne(t.params.pagination.bulletClass))) {
        if (t.navigation && t.navigation.prevEl && t.navigation.nextEl) {
          const e = T(t.navigation.prevEl);
          T(t.navigation.nextEl).includes(a) && (t.isEnd && !t.params.loop || t.slideNext(), t.isEnd ? d(s.lastSlideMessage) : d(s.nextSlideMessage)), e.includes(a) && (t.isBeginning && !t.params.loop || t.slidePrev(), t.isBeginning ? d(s.firstSlideMessage) : d(s.prevSlideMessage))
        }
        t.pagination && a.matches(ne(t.params.pagination.bulletClass)) && a.click()
      }
    }

    function b() {
      return t.pagination && t.pagination.bullets && t.pagination.bullets.length
    }

    function E() {
      return b() && t.params.pagination.clickable
    }

    const x = (e, t, s) => {
      c(e), "BUTTON" !== e.tagName && (u(e, "button"), e.addEventListener("keydown", w)), h(e, s), function (e, t) {
        (e = T(e)).forEach((e => {
          e.setAttribute("aria-controls", t)
        }))
      }(e, t)
    }, S = e => {
      n && n !== e.target && !n.contains(e.target) && (r = !0), t.a11y.clicked = !0
    }, M = () => {
      r = !1, requestAnimationFrame((() => {
        requestAnimationFrame((() => {
          t.destroyed || (t.a11y.clicked = !1)
        }))
      }))
    }, C = e => {
      o = (new Date).getTime()
    }, P = e => {
      if (t.a11y.clicked || !t.params.a11y.scrollOnFocus) return;
      if ((new Date).getTime() - o < 100) return;
      const s = e.target.closest(`.${t.params.slideClass}, swiper-slide`);
      if (!s || !t.slides.includes(s)) return;
      n = s;
      const a = t.slides.indexOf(s) === t.activeIndex,
        i = t.params.watchSlidesProgress && t.visibleSlides && t.visibleSlides.includes(s);
      a || i || e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents || (t.isHorizontal() ? t.el.scrollLeft = 0 : t.el.scrollTop = 0, requestAnimationFrame((() => {
        r || (t.params.loop ? t.slideToLoop(parseInt(s.getAttribute("data-swiper-slide-index")), 0) : t.slideTo(t.slides.indexOf(s), 0), r = !1)
      })))
    }, L = () => {
      const e = t.params.a11y;
      e.itemRoleDescriptionMessage && m(t.slides, e.itemRoleDescriptionMessage), e.slideRole && u(t.slides, e.slideRole);
      const s = t.slides.length;
      e.slideLabelMessage && t.slides.forEach(((a, i) => {
        const r = t.params.loop ? parseInt(a.getAttribute("data-swiper-slide-index"), 10) : i;
        h(a, e.slideLabelMessage.replace(/\{\{index\}\}/, r + 1).replace(/\{\{slidesLength\}\}/, s))
      }))
    }, I = () => {
      const e = t.params.a11y;
      t.el.append(l);
      const s = t.el;
      e.containerRoleDescriptionMessage && m(s, e.containerRoleDescriptionMessage), e.containerMessage && h(s, e.containerMessage), e.containerRole && u(s, e.containerRole);
      const i = t.wrapperEl,
        r = e.id || i.getAttribute("id") || `swiper-wrapper-${n = 16, void 0 === n && (n = 16), "x".repeat(n).replace(/x/g, (() => Math.round(16 * Math.random()).toString(16)))}`;
      var n;
      const o = t.params.autoplay && t.params.autoplay.enabled ? "off" : "polite";
      var d;
      d = r, T(i).forEach((e => {
        e.setAttribute("id", d)
      })), function (e, t) {
        (e = T(e)).forEach((e => {
          e.setAttribute("aria-live", t)
        }))
      }(i, o), L();
      let {nextEl: c, prevEl: p} = t.navigation ? t.navigation : {};
      if (c = T(c), p = T(p), c && c.forEach((t => x(t, r, e.nextSlideMessage))), p && p.forEach((t => x(t, r, e.prevSlideMessage))), E()) {
        T(t.pagination.el).forEach((e => {
          e.addEventListener("keydown", w)
        }))
      }
      a().addEventListener("visibilitychange", C), t.el.addEventListener("focus", P, !0), t.el.addEventListener("focus", P, !0), t.el.addEventListener("pointerdown", S, !0), t.el.addEventListener("pointerup", M, !0)
    };
    i("beforeInit", (() => {
      l = v("span", t.params.a11y.notificationClass), l.setAttribute("aria-live", "assertive"), l.setAttribute("aria-atomic", "true")
    })), i("afterInit", (() => {
      t.params.a11y.enabled && I()
    })), i("slidesLengthChange snapGridLengthChange slidesGridLengthChange", (() => {
      t.params.a11y.enabled && L()
    })), i("fromEdge toEdge afterInit lock unlock", (() => {
      t.params.a11y.enabled && function () {
        if (t.params.loop || t.params.rewind || !t.navigation) return;
        const {nextEl: e, prevEl: s} = t.navigation;
        s && (t.isBeginning ? (f(s), p(s)) : (g(s), c(s))), e && (t.isEnd ? (f(e), p(e)) : (g(e), c(e)))
      }()
    })), i("paginationUpdate", (() => {
      t.params.a11y.enabled && function () {
        const e = t.params.a11y;
        b() && t.pagination.bullets.forEach((s => {
          t.params.pagination.clickable && (c(s), t.params.pagination.renderBullet || (u(s, "button"), h(s, e.paginationBulletMessage.replace(/\{\{index\}\}/, y(s) + 1)))), s.matches(ne(t.params.pagination.bulletActiveClass)) ? s.setAttribute("aria-current", "true") : s.removeAttribute("aria-current")
        }))
      }()
    })), i("destroy", (() => {
      t.params.a11y.enabled && function () {
        l && l.remove();
        let {nextEl: e, prevEl: s} = t.navigation ? t.navigation : {};
        e = T(e), s = T(s), e && e.forEach((e => e.removeEventListener("keydown", w))), s && s.forEach((e => e.removeEventListener("keydown", w))), E() && T(t.pagination.el).forEach((e => {
          e.removeEventListener("keydown", w)
        }));
        a().removeEventListener("visibilitychange", C), t.el && "string" != typeof t.el && (t.el.removeEventListener("focus", P, !0), t.el.removeEventListener("pointerdown", S, !0), t.el.removeEventListener("pointerup", M, !0))
      }()
    }))
  }, function (e) {
    let {swiper: t, extendParams: s, on: a} = e;
    s({history: {enabled: !1, root: "", replaceState: !1, key: "slides", keepQuery: !1}});
    let i = !1, n = {};
    const l = e => e.toString().replace(/\s+/g, "-").replace(/[^\w-]+/g, "").replace(/--+/g, "-").replace(/^-+/, "").replace(/-+$/, ""),
      o = e => {
        const t = r();
        let s;
        s = e ? new URL(e) : t.location;
        const a = s.pathname.slice(1).split("/").filter((e => "" !== e)), i = a.length;
        return {key: a[i - 2], value: a[i - 1]}
      }, d = (e, s) => {
        const a = r();
        if (!i || !t.params.history.enabled) return;
        let n;
        n = t.params.url ? new URL(t.params.url) : a.location;
        const o = t.virtual && t.params.virtual.enabled ? t.slidesEl.querySelector(`[data-swiper-slide-index="${s}"]`) : t.slides[s];
        let d = l(o.getAttribute("data-history"));
        if (t.params.history.root.length > 0) {
          let s = t.params.history.root;
          "/" === s[s.length - 1] && (s = s.slice(0, s.length - 1)), d = `${s}/${e ? `${e}/` : ""}${d}`
        } else n.pathname.includes(e) || (d = `${e ? `${e}/` : ""}${d}`);
        t.params.history.keepQuery && (d += n.search);
        const c = a.history.state;
        c && c.value === d || (t.params.history.replaceState ? a.history.replaceState({value: d}, null, d) : a.history.pushState({value: d}, null, d))
      }, c = (e, s, a) => {
        if (s) for (let i = 0, r = t.slides.length; i < r; i += 1) {
          const r = t.slides[i];
          if (l(r.getAttribute("data-history")) === s) {
            const s = t.getSlideIndex(r);
            t.slideTo(s, e, a)
          }
        } else t.slideTo(0, e, a)
      }, p = () => {
        n = o(t.params.url), c(t.params.speed, n.value, !1)
      };
    a("init", (() => {
      t.params.history.enabled && (() => {
        const e = r();
        if (t.params.history) {
          if (!e.history || !e.history.pushState) return t.params.history.enabled = !1, void (t.params.hashNavigation.enabled = !0);
          i = !0, n = o(t.params.url), n.key || n.value ? (c(0, n.value, t.params.runCallbacksOnInit), t.params.history.replaceState || e.addEventListener("popstate", p)) : t.params.history.replaceState || e.addEventListener("popstate", p)
        }
      })()
    })), a("destroy", (() => {
      t.params.history.enabled && (() => {
        const e = r();
        t.params.history.replaceState || e.removeEventListener("popstate", p)
      })()
    })), a("transitionEnd _freeModeNoMomentumRelease", (() => {
      i && d(t.params.history.key, t.activeIndex)
    })), a("slideChange", (() => {
      i && t.params.cssMode && d(t.params.history.key, t.activeIndex)
    }))
  }, function (e) {
    let {swiper: t, extendParams: s, emit: i, on: n} = e, l = !1;
    const o = a(), d = r();
    s({
      hashNavigation: {
        enabled: !1, replaceState: !1, watchState: !1, getSlideIndex(e, s) {
          if (t.virtual && t.params.virtual.enabled) {
            const e = t.slides.filter((e => e.getAttribute("data-hash") === s))[0];
            if (!e) return 0;
            return parseInt(e.getAttribute("data-swiper-slide-index"), 10)
          }
          return t.getSlideIndex(f(t.slidesEl, `.${t.params.slideClass}[data-hash="${s}"], swiper-slide[data-hash="${s}"]`)[0])
        }
      }
    });
    const c = () => {
      i("hashChange");
      const e = o.location.hash.replace("#", ""),
        s = t.virtual && t.params.virtual.enabled ? t.slidesEl.querySelector(`[data-swiper-slide-index="${t.activeIndex}"]`) : t.slides[t.activeIndex];
      if (e !== (s ? s.getAttribute("data-hash") : "")) {
        const s = t.params.hashNavigation.getSlideIndex(t, e);
        if (void 0 === s || Number.isNaN(s)) return;
        t.slideTo(s)
      }
    }, p = () => {
      if (!l || !t.params.hashNavigation.enabled) return;
      const e = t.virtual && t.params.virtual.enabled ? t.slidesEl.querySelector(`[data-swiper-slide-index="${t.activeIndex}"]`) : t.slides[t.activeIndex],
        s = e ? e.getAttribute("data-hash") || e.getAttribute("data-history") : "";
      t.params.hashNavigation.replaceState && d.history && d.history.replaceState ? (d.history.replaceState(null, null, `#${s}` || ""), i("hashSet")) : (o.location.hash = s || "", i("hashSet"))
    };
    n("init", (() => {
      t.params.hashNavigation.enabled && (() => {
        if (!t.params.hashNavigation.enabled || t.params.history && t.params.history.enabled) return;
        l = !0;
        const e = o.location.hash.replace("#", "");
        if (e) {
          const s = 0, a = t.params.hashNavigation.getSlideIndex(t, e);
          t.slideTo(a || 0, s, t.params.runCallbacksOnInit, !0)
        }
        t.params.hashNavigation.watchState && d.addEventListener("hashchange", c)
      })()
    })), n("destroy", (() => {
      t.params.hashNavigation.enabled && t.params.hashNavigation.watchState && d.removeEventListener("hashchange", c)
    })), n("transitionEnd _freeModeNoMomentumRelease", (() => {
      l && p()
    })), n("slideChange", (() => {
      l && t.params.cssMode && p()
    }))
  }, function (e) {
    let t, s, {swiper: i, extendParams: r, on: n, emit: l, params: o} = e;
    i.autoplay = {running: !1, paused: !1, timeLeft: 0}, r({
      autoplay: {
        enabled: !1,
        delay: 3e3,
        waitForTransition: !0,
        disableOnInteraction: !1,
        stopOnLastSlide: !1,
        reverseDirection: !1,
        pauseOnMouseEnter: !1
      }
    });
    let d, c, p, u, m, h, f, g, v = o && o.autoplay ? o.autoplay.delay : 3e3,
      w = o && o.autoplay ? o.autoplay.delay : 3e3, b = (new Date).getTime();

    function y(e) {
      i && !i.destroyed && i.wrapperEl && e.target === i.wrapperEl && (i.wrapperEl.removeEventListener("transitionend", y), g || e.detail && e.detail.bySwiperTouchMove || C())
    }

    const E = () => {
      if (i.destroyed || !i.autoplay.running) return;
      i.autoplay.paused ? c = !0 : c && (w = d, c = !1);
      const e = i.autoplay.paused ? d : b + w - (new Date).getTime();
      i.autoplay.timeLeft = e, l("autoplayTimeLeft", e, e / v), s = requestAnimationFrame((() => {
        E()
      }))
    }, x = e => {
      if (i.destroyed || !i.autoplay.running) return;
      cancelAnimationFrame(s), E();
      let a = void 0 === e ? i.params.autoplay.delay : e;
      v = i.params.autoplay.delay, w = i.params.autoplay.delay;
      const r = (() => {
        let e;
        if (e = i.virtual && i.params.virtual.enabled ? i.slides.filter((e => e.classList.contains("swiper-slide-active")))[0] : i.slides[i.activeIndex], !e) return;
        return parseInt(e.getAttribute("data-swiper-autoplay"), 10)
      })();
      !Number.isNaN(r) && r > 0 && void 0 === e && (a = r, v = r, w = r), d = a;
      const n = i.params.speed, o = () => {
        i && !i.destroyed && (i.params.autoplay.reverseDirection ? !i.isBeginning || i.params.loop || i.params.rewind ? (i.slidePrev(n, !0, !0), l("autoplay")) : i.params.autoplay.stopOnLastSlide || (i.slideTo(i.slides.length - 1, n, !0, !0), l("autoplay")) : !i.isEnd || i.params.loop || i.params.rewind ? (i.slideNext(n, !0, !0), l("autoplay")) : i.params.autoplay.stopOnLastSlide || (i.slideTo(0, n, !0, !0), l("autoplay")), i.params.cssMode && (b = (new Date).getTime(), requestAnimationFrame((() => {
          x()
        }))))
      };
      return a > 0 ? (clearTimeout(t), t = setTimeout((() => {
        o()
      }), a)) : requestAnimationFrame((() => {
        o()
      })), a
    }, S = () => {
      b = (new Date).getTime(), i.autoplay.running = !0, x(), l("autoplayStart")
    }, T = () => {
      i.autoplay.running = !1, clearTimeout(t), cancelAnimationFrame(s), l("autoplayStop")
    }, M = (e, s) => {
      if (i.destroyed || !i.autoplay.running) return;
      clearTimeout(t), e || (f = !0);
      const a = () => {
        l("autoplayPause"), i.params.autoplay.waitForTransition ? i.wrapperEl.addEventListener("transitionend", y) : C()
      };
      if (i.autoplay.paused = !0, s) return h && (d = i.params.autoplay.delay), h = !1, void a();
      const r = d || i.params.autoplay.delay;
      d = r - ((new Date).getTime() - b), i.isEnd && d < 0 && !i.params.loop || (d < 0 && (d = 0), a())
    }, C = () => {
      i.isEnd && d < 0 && !i.params.loop || i.destroyed || !i.autoplay.running || (b = (new Date).getTime(), f ? (f = !1, x(d)) : x(), i.autoplay.paused = !1, l("autoplayResume"))
    }, P = () => {
      if (i.destroyed || !i.autoplay.running) return;
      const e = a();
      "hidden" === e.visibilityState && (f = !0, M(!0)), "visible" === e.visibilityState && C()
    }, L = e => {
      "mouse" === e.pointerType && (f = !0, g = !0, i.animating || i.autoplay.paused || M(!0))
    }, I = e => {
      "mouse" === e.pointerType && (g = !1, i.autoplay.paused && C())
    };
    n("init", (() => {
      i.params.autoplay.enabled && (i.params.autoplay.pauseOnMouseEnter && (i.el.addEventListener("pointerenter", L), i.el.addEventListener("pointerleave", I)), a().addEventListener("visibilitychange", P), S())
    })), n("destroy", (() => {
      i.el && "string" != typeof i.el && (i.el.removeEventListener("pointerenter", L), i.el.removeEventListener("pointerleave", I)), a().removeEventListener("visibilitychange", P), i.autoplay.running && T()
    })), n("_freeModeStaticRelease", (() => {
      (u || f) && C()
    })), n("_freeModeNoMomentumRelease", (() => {
      i.params.autoplay.disableOnInteraction ? T() : M(!0, !0)
    })), n("beforeTransitionStart", ((e, t, s) => {
      !i.destroyed && i.autoplay.running && (s || !i.params.autoplay.disableOnInteraction ? M(!0, !0) : T())
    })), n("sliderFirstMove", (() => {
      !i.destroyed && i.autoplay.running && (i.params.autoplay.disableOnInteraction ? T() : (p = !0, u = !1, f = !1, m = setTimeout((() => {
        f = !0, u = !0, M(!0)
      }), 200)))
    })), n("touchEnd", (() => {
      if (!i.destroyed && i.autoplay.running && p) {
        if (clearTimeout(m), clearTimeout(t), i.params.autoplay.disableOnInteraction) return u = !1, void (p = !1);
        u && i.params.cssMode && C(), u = !1, p = !1
      }
    })), n("slideChange", (() => {
      !i.destroyed && i.autoplay.running && (h = !0)
    })), Object.assign(i.autoplay, {start: S, stop: T, pause: M, resume: C})
  }, function (e) {
    let {swiper: t, extendParams: s, on: i} = e;
    s({
      thumbs: {
        swiper: null,
        multipleActiveThumbs: !0,
        autoScrollOffset: 0,
        slideThumbActiveClass: "swiper-slide-thumb-active",
        thumbsContainerClass: "swiper-thumbs"
      }
    });
    let r = !1, n = !1;

    function l() {
      const e = t.thumbs.swiper;
      if (!e || e.destroyed) return;
      const s = e.clickedIndex, a = e.clickedSlide;
      if (a && a.classList.contains(t.params.thumbs.slideThumbActiveClass)) return;
      if (null == s) return;
      let i;
      i = e.params.loop ? parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"), 10) : s, t.params.loop ? t.slideToLoop(i) : t.slideTo(i)
    }

    function o() {
      const {thumbs: e} = t.params;
      if (r) return !1;
      r = !0;
      const s = t.constructor;
      if (e.swiper instanceof s) t.thumbs.swiper = e.swiper, Object.assign(t.thumbs.swiper.originalParams, {
        watchSlidesProgress: !0,
        slideToClickedSlide: !1
      }), Object.assign(t.thumbs.swiper.params, {
        watchSlidesProgress: !0,
        slideToClickedSlide: !1
      }), t.thumbs.swiper.update(); else if (c(e.swiper)) {
        const a = Object.assign({}, e.swiper);
        Object.assign(a, {watchSlidesProgress: !0, slideToClickedSlide: !1}), t.thumbs.swiper = new s(a), n = !0
      }
      return t.thumbs.swiper.el.classList.add(t.params.thumbs.thumbsContainerClass), t.thumbs.swiper.on("tap", l), !0
    }

    function d(e) {
      const s = t.thumbs.swiper;
      if (!s || s.destroyed) return;
      const a = "auto" === s.params.slidesPerView ? s.slidesPerViewDynamic() : s.params.slidesPerView;
      let i = 1;
      const r = t.params.thumbs.slideThumbActiveClass;
      if (t.params.slidesPerView > 1 && !t.params.centeredSlides && (i = t.params.slidesPerView), t.params.thumbs.multipleActiveThumbs || (i = 1), i = Math.floor(i), s.slides.forEach((e => e.classList.remove(r))), s.params.loop || s.params.virtual && s.params.virtual.enabled) for (let e = 0; e < i; e += 1) f(s.slidesEl, `[data-swiper-slide-index="${t.realIndex + e}"]`).forEach((e => {
        e.classList.add(r)
      })); else for (let e = 0; e < i; e += 1) s.slides[t.realIndex + e] && s.slides[t.realIndex + e].classList.add(r);
      const n = t.params.thumbs.autoScrollOffset, l = n && !s.params.loop;
      if (t.realIndex !== s.realIndex || l) {
        const i = s.activeIndex;
        let r, o;
        if (s.params.loop) {
          const e = s.slides.filter((e => e.getAttribute("data-swiper-slide-index") === `${t.realIndex}`))[0];
          r = s.slides.indexOf(e), o = t.activeIndex > t.previousIndex ? "next" : "prev"
        } else r = t.realIndex, o = r > t.previousIndex ? "next" : "prev";
        l && (r += "next" === o ? n : -1 * n), s.visibleSlidesIndexes && s.visibleSlidesIndexes.indexOf(r) < 0 && (s.params.centeredSlides ? r = r > i ? r - Math.floor(a / 2) + 1 : r + Math.floor(a / 2) - 1 : r > i && s.params.slidesPerGroup, s.slideTo(r, e ? 0 : void 0))
      }
    }

    t.thumbs = {swiper: null}, i("beforeInit", (() => {
      const {thumbs: e} = t.params;
      if (e && e.swiper) if ("string" == typeof e.swiper || e.swiper instanceof HTMLElement) {
        const s = a(), i = () => {
          const a = "string" == typeof e.swiper ? s.querySelector(e.swiper) : e.swiper;
          if (a && a.swiper) e.swiper = a.swiper, o(), d(!0); else if (a) {
            const s = `${t.params.eventsPrefix}init`, i = r => {
              e.swiper = r.detail[0], a.removeEventListener(s, i), o(), d(!0), e.swiper.update(), t.update()
            };
            a.addEventListener(s, i)
          }
          return a
        }, r = () => {
          if (t.destroyed) return;
          i() || requestAnimationFrame(r)
        };
        requestAnimationFrame(r)
      } else o(), d(!0)
    })), i("slideChange update resize observerUpdate", (() => {
      d()
    })), i("setTransition", ((e, s) => {
      const a = t.thumbs.swiper;
      a && !a.destroyed && a.setTransition(s)
    })), i("beforeDestroy", (() => {
      const e = t.thumbs.swiper;
      e && !e.destroyed && n && e.destroy()
    })), Object.assign(t.thumbs, {init: o, update: d})
  }, function (e) {
    let {swiper: t, extendParams: s, emit: a, once: i} = e;
    s({
      freeMode: {
        enabled: !1,
        momentum: !0,
        momentumRatio: 1,
        momentumBounce: !0,
        momentumBounceRatio: 1,
        momentumVelocityRatio: 1,
        sticky: !1,
        minimumVelocity: .02
      }
    }), Object.assign(t, {
      freeMode: {
        onTouchStart: function () {
          if (t.params.cssMode) return;
          const e = t.getTranslate();
          t.setTranslate(e), t.setTransition(0), t.touchEventsData.velocities.length = 0, t.freeMode.onTouchEnd({currentPos: t.rtl ? t.translate : -t.translate})
        }, onTouchMove: function () {
          if (t.params.cssMode) return;
          const {touchEventsData: e, touches: s} = t;
          0 === e.velocities.length && e.velocities.push({
            position: s[t.isHorizontal() ? "startX" : "startY"],
            time: e.touchStartTime
          }), e.velocities.push({position: s[t.isHorizontal() ? "currentX" : "currentY"], time: o()})
        }, onTouchEnd: function (e) {
          let {currentPos: s} = e;
          if (t.params.cssMode) return;
          const {params: r, wrapperEl: n, rtlTranslate: l, snapGrid: d, touchEventsData: c} = t,
            p = o() - c.touchStartTime;
          if (s < -t.minTranslate()) t.slideTo(t.activeIndex); else if (s > -t.maxTranslate()) t.slides.length < d.length ? t.slideTo(d.length - 1) : t.slideTo(t.slides.length - 1); else {
            if (r.freeMode.momentum) {
              if (c.velocities.length > 1) {
                const e = c.velocities.pop(), s = c.velocities.pop(), a = e.position - s.position, i = e.time - s.time;
                t.velocity = a / i, t.velocity /= 2, Math.abs(t.velocity) < r.freeMode.minimumVelocity && (t.velocity = 0), (i > 150 || o() - e.time > 300) && (t.velocity = 0)
              } else t.velocity = 0;
              t.velocity *= r.freeMode.momentumVelocityRatio, c.velocities.length = 0;
              let e = 1e3 * r.freeMode.momentumRatio;
              const s = t.velocity * e;
              let p = t.translate + s;
              l && (p = -p);
              let u, m = !1;
              const h = 20 * Math.abs(t.velocity) * r.freeMode.momentumBounceRatio;
              let f;
              if (p < t.maxTranslate()) r.freeMode.momentumBounce ? (p + t.maxTranslate() < -h && (p = t.maxTranslate() - h), u = t.maxTranslate(), m = !0, c.allowMomentumBounce = !0) : p = t.maxTranslate(), r.loop && r.centeredSlides && (f = !0); else if (p > t.minTranslate()) r.freeMode.momentumBounce ? (p - t.minTranslate() > h && (p = t.minTranslate() + h), u = t.minTranslate(), m = !0, c.allowMomentumBounce = !0) : p = t.minTranslate(), r.loop && r.centeredSlides && (f = !0); else if (r.freeMode.sticky) {
                let e;
                for (let t = 0; t < d.length; t += 1) if (d[t] > -p) {
                  e = t;
                  break
                }
                p = Math.abs(d[e] - p) < Math.abs(d[e - 1] - p) || "next" === t.swipeDirection ? d[e] : d[e - 1], p = -p
              }
              if (f && i("transitionEnd", (() => {
                t.loopFix()
              })), 0 !== t.velocity) {
                if (e = l ? Math.abs((-p - t.translate) / t.velocity) : Math.abs((p - t.translate) / t.velocity), r.freeMode.sticky) {
                  const s = Math.abs((l ? -p : p) - t.translate), a = t.slidesSizesGrid[t.activeIndex];
                  e = s < a ? r.speed : s < 2 * a ? 1.5 * r.speed : 2.5 * r.speed
                }
              } else if (r.freeMode.sticky) return void t.slideToClosest();
              r.freeMode.momentumBounce && m ? (t.updateProgress(u), t.setTransition(e), t.setTranslate(p), t.transitionStart(!0, t.swipeDirection), t.animating = !0, x(n, (() => {
                t && !t.destroyed && c.allowMomentumBounce && (a("momentumBounce"), t.setTransition(r.speed), setTimeout((() => {
                  t.setTranslate(u), x(n, (() => {
                    t && !t.destroyed && t.transitionEnd()
                  }))
                }), 0))
              }))) : t.velocity ? (a("_freeModeNoMomentumRelease"), t.updateProgress(p), t.setTransition(e), t.setTranslate(p), t.transitionStart(!0, t.swipeDirection), t.animating || (t.animating = !0, x(n, (() => {
                t && !t.destroyed && t.transitionEnd()
              })))) : t.updateProgress(p), t.updateActiveIndex(), t.updateSlidesClasses()
            } else {
              if (r.freeMode.sticky) return void t.slideToClosest();
              r.freeMode && a("_freeModeNoMomentumRelease")
            }
            (!r.freeMode.momentum || p >= r.longSwipesMs) && (a("_freeModeStaticRelease"), t.updateProgress(), t.updateActiveIndex(), t.updateSlidesClasses())
          }
        }
      }
    })
  }, function (e) {
    let t, s, a, i, {swiper: r, extendParams: n, on: l} = e;
    n({grid: {rows: 1, fill: "column"}});
    const o = () => {
      let e = r.params.spaceBetween;
      return "string" == typeof e && e.indexOf("%") >= 0 ? e = parseFloat(e.replace("%", "")) / 100 * r.size : "string" == typeof e && (e = parseFloat(e)), e
    };
    l("init", (() => {
      i = r.params.grid && r.params.grid.rows > 1
    })), l("update", (() => {
      const {params: e, el: t} = r, s = e.grid && e.grid.rows > 1;
      i && !s ? (t.classList.remove(`${e.containerModifierClass}grid`, `${e.containerModifierClass}grid-column`), a = 1, r.emitContainerClasses()) : !i && s && (t.classList.add(`${e.containerModifierClass}grid`), "column" === e.grid.fill && t.classList.add(`${e.containerModifierClass}grid-column`), r.emitContainerClasses()), i = s
    })), r.grid = {
      initSlides: e => {
        const {slidesPerView: i} = r.params, {rows: n, fill: l} = r.params.grid,
          o = r.virtual && r.params.virtual.enabled ? r.virtual.slides.length : e.length;
        a = Math.floor(o / n), t = Math.floor(o / n) === o / n ? o : Math.ceil(o / n) * n, "auto" !== i && "row" === l && (t = Math.max(t, i * n)), s = t / n
      }, unsetSlides: () => {
        r.slides && r.slides.forEach((e => {
          e.swiperSlideGridSet && (e.style.height = "", e.style[r.getDirectionLabel("margin-top")] = "")
        }))
      }, updateSlide: (e, i, n) => {
        const {slidesPerGroup: l} = r.params, d = o(), {rows: c, fill: p} = r.params.grid,
          u = r.virtual && r.params.virtual.enabled ? r.virtual.slides.length : n.length;
        let m, h, f;
        if ("row" === p && l > 1) {
          const s = Math.floor(e / (l * c)), a = e - c * l * s,
            r = 0 === s ? l : Math.min(Math.ceil((u - s * c * l) / c), l);
          f = Math.floor(a / r), h = a - f * r + s * l, m = h + f * t / c, i.style.order = m
        } else "column" === p ? (h = Math.floor(e / c), f = e - h * c, (h > a || h === a && f === c - 1) && (f += 1, f >= c && (f = 0, h += 1))) : (f = Math.floor(e / s), h = e - f * s);
        i.row = f, i.column = h, i.style.height = `calc((100% - ${(c - 1) * d}px) / ${c})`, i.style[r.getDirectionLabel("margin-top")] = 0 !== f ? d && `${d}px` : "", i.swiperSlideGridSet = !0
      }, updateWrapperSize: (e, s) => {
        const {centeredSlides: a, roundLengths: i} = r.params, n = o(), {rows: l} = r.params.grid;
        if (r.virtualSize = (e + n) * t, r.virtualSize = Math.ceil(r.virtualSize / l) - n, r.params.cssMode || (r.wrapperEl.style[r.getDirectionLabel("width")] = `${r.virtualSize + n}px`), a) {
          const e = [];
          for (let t = 0; t < s.length; t += 1) {
            let a = s[t];
            i && (a = Math.floor(a)), s[t] < r.virtualSize + s[0] && e.push(a)
          }
          s.splice(0, s.length), s.push(...e)
        }
      }
    }
  }, function (e) {
    let {swiper: t} = e;
    Object.assign(t, {
      appendSlide: le.bind(t),
      prependSlide: oe.bind(t),
      addSlide: de.bind(t),
      removeSlide: ce.bind(t),
      removeAllSlides: pe.bind(t)
    })
  }, function (e) {
    let {swiper: t, extendParams: s, on: a} = e;
    s({fadeEffect: {crossFade: !1}}), ue({
      effect: "fade",
      swiper: t,
      on: a,
      setTranslate: () => {
        const {slides: e} = t;
        t.params.fadeEffect;
        for (let s = 0; s < e.length; s += 1) {
          const e = t.slides[s];
          let a = -e.swiperSlideOffset;
          t.params.virtualTranslate || (a -= t.translate);
          let i = 0;
          t.isHorizontal() || (i = a, a = 0);
          const r = t.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(e.progress), 0) : 1 + Math.min(Math.max(e.progress, -1), 0),
            n = me(0, e);
          n.style.opacity = r, n.style.transform = `translate3d(${a}px, ${i}px, 0px)`
        }
      },
      setTransition: e => {
        const s = t.slides.map((e => h(e)));
        s.forEach((t => {
          t.style.transitionDuration = `${e}ms`
        })), he({swiper: t, duration: e, transformElements: s, allSlides: !0})
      },
      overwriteParams: () => ({
        slidesPerView: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: !0,
        spaceBetween: 0,
        virtualTranslate: !t.params.cssMode
      })
    })
  }, function (e) {
    let {swiper: t, extendParams: s, on: a} = e;
    s({cubeEffect: {slideShadows: !0, shadow: !0, shadowOffset: 20, shadowScale: .94}});
    const i = (e, t, s) => {
      let a = s ? e.querySelector(".swiper-slide-shadow-left") : e.querySelector(".swiper-slide-shadow-top"),
        i = s ? e.querySelector(".swiper-slide-shadow-right") : e.querySelector(".swiper-slide-shadow-bottom");
      a || (a = v("div", ("swiper-slide-shadow-cube swiper-slide-shadow-" + (s ? "left" : "top")).split(" ")), e.append(a)), i || (i = v("div", ("swiper-slide-shadow-cube swiper-slide-shadow-" + (s ? "right" : "bottom")).split(" ")), e.append(i)), a && (a.style.opacity = Math.max(-t, 0)), i && (i.style.opacity = Math.max(t, 0))
    };
    ue({
      effect: "cube",
      swiper: t,
      on: a,
      setTranslate: () => {
        const {el: e, wrapperEl: s, slides: a, width: r, height: n, rtlTranslate: l, size: o, browser: d} = t, c = M(t),
          p = t.params.cubeEffect, u = t.isHorizontal(), m = t.virtual && t.params.virtual.enabled;
        let h, f = 0;
        p.shadow && (u ? (h = t.wrapperEl.querySelector(".swiper-cube-shadow"), h || (h = v("div", "swiper-cube-shadow"), t.wrapperEl.append(h)), h.style.height = `${r}px`) : (h = e.querySelector(".swiper-cube-shadow"), h || (h = v("div", "swiper-cube-shadow"), e.append(h))));
        for (let e = 0; e < a.length; e += 1) {
          const t = a[e];
          let s = e;
          m && (s = parseInt(t.getAttribute("data-swiper-slide-index"), 10));
          let r = 90 * s, n = Math.floor(r / 360);
          l && (r = -r, n = Math.floor(-r / 360));
          const d = Math.max(Math.min(t.progress, 1), -1);
          let h = 0, g = 0, v = 0;
          s % 4 == 0 ? (h = 4 * -n * o, v = 0) : (s - 1) % 4 == 0 ? (h = 0, v = 4 * -n * o) : (s - 2) % 4 == 0 ? (h = o + 4 * n * o, v = o) : (s - 3) % 4 == 0 && (h = -o, v = 3 * o + 4 * o * n), l && (h = -h), u || (g = h, h = 0);
          const w = `rotateX(${c(u ? 0 : -r)}deg) rotateY(${c(u ? r : 0)}deg) translate3d(${h}px, ${g}px, ${v}px)`;
          d <= 1 && d > -1 && (f = 90 * s + 90 * d, l && (f = 90 * -s - 90 * d)), t.style.transform = w, p.slideShadows && i(t, d, u)
        }
        if (s.style.transformOrigin = `50% 50% -${o / 2}px`, s.style["-webkit-transform-origin"] = `50% 50% -${o / 2}px`, p.shadow) if (u) h.style.transform = `translate3d(0px, ${r / 2 + p.shadowOffset}px, ${-r / 2}px) rotateX(89.99deg) rotateZ(0deg) scale(${p.shadowScale})`; else {
          const e = Math.abs(f) - 90 * Math.floor(Math.abs(f) / 90),
            t = 1.5 - (Math.sin(2 * e * Math.PI / 360) / 2 + Math.cos(2 * e * Math.PI / 360) / 2), s = p.shadowScale,
            a = p.shadowScale / t, i = p.shadowOffset;
          h.style.transform = `scale3d(${s}, 1, ${a}) translate3d(0px, ${n / 2 + i}px, ${-n / 2 / a}px) rotateX(-89.99deg)`
        }
        const g = (d.isSafari || d.isWebView) && d.needPerspectiveFix ? -o / 2 : 0;
        s.style.transform = `translate3d(0px,0,${g}px) rotateX(${c(t.isHorizontal() ? 0 : f)}deg) rotateY(${c(t.isHorizontal() ? -f : 0)}deg)`, s.style.setProperty("--swiper-cube-translate-z", `${g}px`)
      },
      setTransition: e => {
        const {el: s, slides: a} = t;
        if (a.forEach((t => {
          t.style.transitionDuration = `${e}ms`, t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t => {
            t.style.transitionDuration = `${e}ms`
          }))
        })), t.params.cubeEffect.shadow && !t.isHorizontal()) {
          const t = s.querySelector(".swiper-cube-shadow");
          t && (t.style.transitionDuration = `${e}ms`)
        }
      },
      recreateShadows: () => {
        const e = t.isHorizontal();
        t.slides.forEach((t => {
          const s = Math.max(Math.min(t.progress, 1), -1);
          i(t, s, e)
        }))
      },
      getEffectParams: () => t.params.cubeEffect,
      perspective: () => !0,
      overwriteParams: () => ({
        slidesPerView: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: !0,
        resistanceRatio: 0,
        spaceBetween: 0,
        centeredSlides: !1,
        virtualTranslate: !0
      })
    })
  }, function (e) {
    let {swiper: t, extendParams: s, on: a} = e;
    s({flipEffect: {slideShadows: !0, limitRotation: !0}});
    const i = (e, s) => {
      let a = t.isHorizontal() ? e.querySelector(".swiper-slide-shadow-left") : e.querySelector(".swiper-slide-shadow-top"),
        i = t.isHorizontal() ? e.querySelector(".swiper-slide-shadow-right") : e.querySelector(".swiper-slide-shadow-bottom");
      a || (a = fe("flip", e, t.isHorizontal() ? "left" : "top")), i || (i = fe("flip", e, t.isHorizontal() ? "right" : "bottom")), a && (a.style.opacity = Math.max(-s, 0)), i && (i.style.opacity = Math.max(s, 0))
    };
    ue({
      effect: "flip",
      swiper: t,
      on: a,
      setTranslate: () => {
        const {slides: e, rtlTranslate: s} = t, a = t.params.flipEffect, r = M(t);
        for (let n = 0; n < e.length; n += 1) {
          const l = e[n];
          let o = l.progress;
          t.params.flipEffect.limitRotation && (o = Math.max(Math.min(l.progress, 1), -1));
          const d = l.swiperSlideOffset;
          let c = -180 * o, p = 0, u = t.params.cssMode ? -d - t.translate : -d, m = 0;
          t.isHorizontal() ? s && (c = -c) : (m = u, u = 0, p = -c, c = 0), l.style.zIndex = -Math.abs(Math.round(o)) + e.length, a.slideShadows && i(l, o);
          const h = `translate3d(${u}px, ${m}px, 0px) rotateX(${r(p)}deg) rotateY(${r(c)}deg)`;
          me(0, l).style.transform = h
        }
      },
      setTransition: e => {
        const s = t.slides.map((e => h(e)));
        s.forEach((t => {
          t.style.transitionDuration = `${e}ms`, t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t => {
            t.style.transitionDuration = `${e}ms`
          }))
        })), he({swiper: t, duration: e, transformElements: s})
      },
      recreateShadows: () => {
        t.params.flipEffect, t.slides.forEach((e => {
          let s = e.progress;
          t.params.flipEffect.limitRotation && (s = Math.max(Math.min(e.progress, 1), -1)), i(e, s)
        }))
      },
      getEffectParams: () => t.params.flipEffect,
      perspective: () => !0,
      overwriteParams: () => ({
        slidesPerView: 1,
        slidesPerGroup: 1,
        watchSlidesProgress: !0,
        spaceBetween: 0,
        virtualTranslate: !t.params.cssMode
      })
    })
  }, function (e) {
    let {swiper: t, extendParams: s, on: a} = e;
    s({coverflowEffect: {rotate: 50, stretch: 0, depth: 100, scale: 1, modifier: 1, slideShadows: !0}}), ue({
      effect: "coverflow", swiper: t, on: a, setTranslate: () => {
        const {width: e, height: s, slides: a, slidesSizesGrid: i} = t, r = t.params.coverflowEffect,
          n = t.isHorizontal(), l = t.translate, o = n ? e / 2 - l : s / 2 - l, d = n ? r.rotate : -r.rotate,
          c = r.depth, p = M(t);
        for (let e = 0, t = a.length; e < t; e += 1) {
          const t = a[e], s = i[e], l = (o - t.swiperSlideOffset - s / 2) / s,
            u = "function" == typeof r.modifier ? r.modifier(l) : l * r.modifier;
          let m = n ? d * u : 0, h = n ? 0 : d * u, f = -c * Math.abs(u), g = r.stretch;
          "string" == typeof g && -1 !== g.indexOf("%") && (g = parseFloat(r.stretch) / 100 * s);
          let v = n ? 0 : g * u, w = n ? g * u : 0, b = 1 - (1 - r.scale) * Math.abs(u);
          Math.abs(w) < .001 && (w = 0), Math.abs(v) < .001 && (v = 0), Math.abs(f) < .001 && (f = 0), Math.abs(m) < .001 && (m = 0), Math.abs(h) < .001 && (h = 0), Math.abs(b) < .001 && (b = 0);
          const y = `translate3d(${w}px,${v}px,${f}px)  rotateX(${p(h)}deg) rotateY(${p(m)}deg) scale(${b})`;
          if (me(0, t).style.transform = y, t.style.zIndex = 1 - Math.abs(Math.round(u)), r.slideShadows) {
            let e = n ? t.querySelector(".swiper-slide-shadow-left") : t.querySelector(".swiper-slide-shadow-top"),
              s = n ? t.querySelector(".swiper-slide-shadow-right") : t.querySelector(".swiper-slide-shadow-bottom");
            e || (e = fe("coverflow", t, n ? "left" : "top")), s || (s = fe("coverflow", t, n ? "right" : "bottom")), e && (e.style.opacity = u > 0 ? u : 0), s && (s.style.opacity = -u > 0 ? -u : 0)
          }
        }
      }, setTransition: e => {
        t.slides.map((e => h(e))).forEach((t => {
          t.style.transitionDuration = `${e}ms`, t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t => {
            t.style.transitionDuration = `${e}ms`
          }))
        }))
      }, perspective: () => !0, overwriteParams: () => ({watchSlidesProgress: !0})
    })
  }, function (e) {
    let {swiper: t, extendParams: s, on: a} = e;
    s({
      creativeEffect: {
        limitProgress: 1,
        shadowPerProgress: !1,
        progressMultiplier: 1,
        perspective: !0,
        prev: {translate: [0, 0, 0], rotate: [0, 0, 0], opacity: 1, scale: 1},
        next: {translate: [0, 0, 0], rotate: [0, 0, 0], opacity: 1, scale: 1}
      }
    });
    const i = e => "string" == typeof e ? e : `${e}px`;
    ue({
      effect: "creative",
      swiper: t,
      on: a,
      setTranslate: () => {
        const {slides: e, wrapperEl: s, slidesSizesGrid: a} = t,
          r = t.params.creativeEffect, {progressMultiplier: n} = r, l = t.params.centeredSlides, o = M(t);
        if (l) {
          const e = a[0] / 2 - t.params.slidesOffsetBefore || 0;
          s.style.transform = `translateX(calc(50% - ${e}px))`
        }
        for (let s = 0; s < e.length; s += 1) {
          const a = e[s], d = a.progress, c = Math.min(Math.max(a.progress, -r.limitProgress), r.limitProgress);
          let p = c;
          l || (p = Math.min(Math.max(a.originalProgress, -r.limitProgress), r.limitProgress));
          const u = a.swiperSlideOffset, m = [t.params.cssMode ? -u - t.translate : -u, 0, 0], h = [0, 0, 0];
          let f = !1;
          t.isHorizontal() || (m[1] = m[0], m[0] = 0);
          let g = {translate: [0, 0, 0], rotate: [0, 0, 0], scale: 1, opacity: 1};
          c < 0 ? (g = r.next, f = !0) : c > 0 && (g = r.prev, f = !0), m.forEach(((e, t) => {
            m[t] = `calc(${e}px + (${i(g.translate[t])} * ${Math.abs(c * n)}))`
          })), h.forEach(((e, t) => {
            let s = g.rotate[t] * Math.abs(c * n);
            h[t] = s
          })), a.style.zIndex = -Math.abs(Math.round(d)) + e.length;
          const v = m.join(", "), w = `rotateX(${o(h[0])}deg) rotateY(${o(h[1])}deg) rotateZ(${o(h[2])}deg)`,
            b = p < 0 ? `scale(${1 + (1 - g.scale) * p * n})` : `scale(${1 - (1 - g.scale) * p * n})`,
            y = p < 0 ? 1 + (1 - g.opacity) * p * n : 1 - (1 - g.opacity) * p * n, E = `translate3d(${v}) ${w} ${b}`;
          if (f && g.shadow || !f) {
            let e = a.querySelector(".swiper-slide-shadow");
            if (!e && g.shadow && (e = fe("creative", a)), e) {
              const t = r.shadowPerProgress ? c * (1 / r.limitProgress) : c;
              e.style.opacity = Math.min(Math.max(Math.abs(t), 0), 1)
            }
          }
          const x = me(0, a);
          x.style.transform = E, x.style.opacity = y, g.origin && (x.style.transformOrigin = g.origin)
        }
      },
      setTransition: e => {
        const s = t.slides.map((e => h(e)));
        s.forEach((t => {
          t.style.transitionDuration = `${e}ms`, t.querySelectorAll(".swiper-slide-shadow").forEach((t => {
            t.style.transitionDuration = `${e}ms`
          }))
        })), he({swiper: t, duration: e, transformElements: s, allSlides: !0})
      },
      perspective: () => t.params.creativeEffect.perspective,
      overwriteParams: () => ({watchSlidesProgress: !0, virtualTranslate: !t.params.cssMode})
    })
  }, function (e) {
    let {swiper: t, extendParams: s, on: a} = e;
    s({cardsEffect: {slideShadows: !0, rotate: !0, perSlideRotate: 2, perSlideOffset: 8}}), ue({
      effect: "cards", swiper: t, on: a, setTranslate: () => {
        const {slides: e, activeIndex: s, rtlTranslate: a} = t, i = t.params.cardsEffect, {
          startTranslate: r,
          isTouched: n
        } = t.touchEventsData, l = a ? -t.translate : t.translate;
        for (let o = 0; o < e.length; o += 1) {
          const d = e[o], c = d.progress, p = Math.min(Math.max(c, -4), 4);
          let u = d.swiperSlideOffset;
          t.params.centeredSlides && !t.params.cssMode && (t.wrapperEl.style.transform = `translateX(${t.minTranslate()}px)`), t.params.centeredSlides && t.params.cssMode && (u -= e[0].swiperSlideOffset);
          let m = t.params.cssMode ? -u - t.translate : -u, h = 0;
          const f = -100 * Math.abs(p);
          let g = 1, v = -i.perSlideRotate * p, w = i.perSlideOffset - .75 * Math.abs(p);
          const b = t.virtual && t.params.virtual.enabled ? t.virtual.from + o : o,
            y = (b === s || b === s - 1) && p > 0 && p < 1 && (n || t.params.cssMode) && l < r,
            E = (b === s || b === s + 1) && p < 0 && p > -1 && (n || t.params.cssMode) && l > r;
          if (y || E) {
            const e = (1 - Math.abs((Math.abs(p) - .5) / .5)) ** .5;
            v += -28 * p * e, g += -.5 * e, w += 96 * e, h = -25 * e * Math.abs(p) + "%"
          }
          if (m = p < 0 ? `calc(${m}px ${a ? "-" : "+"} (${w * Math.abs(p)}%))` : p > 0 ? `calc(${m}px ${a ? "-" : "+"} (-${w * Math.abs(p)}%))` : `${m}px`, !t.isHorizontal()) {
            const e = h;
            h = m, m = e
          }
          const x = p < 0 ? "" + (1 + (1 - g) * p) : "" + (1 - (1 - g) * p),
            S = `\n        translate3d(${m}, ${h}, ${f}px)\n        rotateZ(${i.rotate ? a ? -v : v : 0}deg)\n        scale(${x})\n      `;
          if (i.slideShadows) {
            let e = d.querySelector(".swiper-slide-shadow");
            e || (e = fe("cards", d)), e && (e.style.opacity = Math.min(Math.max((Math.abs(p) - .5) / .5, 0), 1))
          }
          d.style.zIndex = -Math.abs(Math.round(c)) + e.length;
          me(0, d).style.transform = S
        }
      }, setTransition: e => {
        const s = t.slides.map((e => h(e)));
        s.forEach((t => {
          t.style.transitionDuration = `${e}ms`, t.querySelectorAll(".swiper-slide-shadow").forEach((t => {
            t.style.transitionDuration = `${e}ms`
          }))
        })), he({swiper: t, duration: e, transformElements: s})
      }, perspective: () => !0, overwriteParams: () => ({watchSlidesProgress: !0, virtualTranslate: !t.params.cssMode})
    })
  }];
  return ie.use(ge), ie
}();
//# sourceMappingURL=swiper-bundle.min.js.map


/***/ }),

/***/ "./src/libraries/wow.min.js":
/*!**********************************!*\
  !*** ./src/libraries/wow.min.js ***!
  \**********************************/
/***/ (() => {

function isIn(t,e){return e.indexOf(t)>=0}function extend(t,e){for(const n in e)if(null==t[n]){const i=e[n];t[n]=i}return t}function isMobile(t){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(t)}function createEvent(t,e=!1,n=!1,i=null){let s;return null!=document.createEvent?(s=document.createEvent("CustomEvent"),s.initCustomEvent(t,e,n,i)):null!=document.createEventObject?(s=document.createEventObject(),s.eventType=t):s.eventName=t,s}function emitEvent(t,e){null!=t.dispatchEvent?t.dispatchEvent(e):e in(null!=t)?t[e]():`on${e}`in(null!=t)&&t[`on${e}`]()}function addEvent(t,e,n){null!=t.addEventListener?t.addEventListener(e,n,!1):null!=t.attachEvent?t.attachEvent(`on${e}`,n):t[e]=n}function removeEvent(t,e,n){null!=t.removeEventListener?t.removeEventListener(e,n,!1):null!=t.detachEvent?t.detachEvent(`on${e}`,n):delete t[e]}function getInnerHeight(){return"innerHeight"in window?window.innerHeight:document.documentElement.clientHeight}const WeakMap=window.WeakMap||window.MozWeakMap||class{constructor(){this.keys=[],this.values=[]}get(t){for(let e=0;e<this.keys.length;e++){if(this.keys[e]===t)return this.values[e]}}set(t,e){for(let n=0;n<this.keys.length;n++){if(this.keys[n]===t)return this.values[n]=e,this}return this.keys.push(t),this.values.push(e),this}},MutationObserver=window.MutationObserver||window.WebkitMutationObserver||window.MozMutationObserver||class{constructor(){"undefined"!=typeof console&&null!==console&&(console.warn("MutationObserver is not supported by your browser."),console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content."))}static notSupported=!0;observe(){}},getComputedStyle=window.getComputedStyle||function(t){const e=/(\-([a-z]){1})/g;return{getPropertyValue(n){"float"===n&&(n="styleFloat"),e.test(n)&&n.replace(e,((t,e)=>e.toUpperCase()));const{currentStyle:i}=t;return(null!=i?i[n]:void 0)||null}}};class WOW{defaults={boxClass:"wow",animateClass:"animated",offset:0,mobile:!0,live:!0,callback:null,scrollContainer:null,resetAnimation:!0};constructor(t={}){this.start=this.start.bind(this),this.resetAnimation=this.resetAnimation.bind(this),this.scrollHandler=this.scrollHandler.bind(this),this.scrollCallback=this.scrollCallback.bind(this),this.scrolled=!0,this.config=extend(t,this.defaults),null!=t.scrollContainer&&(this.config.scrollContainer=document.querySelector(t.scrollContainer)),this.animationNameCache=new WeakMap,this.wowEvent=createEvent(this.config.boxClass)}init(){this.element=window.document.documentElement,isIn(document.readyState,["interactive","complete"])?this.start():addEvent(document,"DOMContentLoaded",this.start),this.finished=[]}start(){if(this.stopped=!1,this.boxes=[].slice.call(this.element.querySelectorAll(`.${this.config.boxClass}`)),this.all=this.boxes.slice(0),this.boxes.length)if(this.disabled())this.resetStyle();else for(let t=0;t<this.boxes.length;t++){const e=this.boxes[t];this.applyStyle(e,!0)}if(this.disabled()||(addEvent(this.config.scrollContainer||window,"scroll",this.scrollHandler),addEvent(window,"resize",this.scrollHandler),this.interval=setInterval(this.scrollCallback,50)),this.config.live){new MutationObserver((t=>{for(let e=0;e<t.length;e++){const n=t[e];for(let t=0;t<n.addedNodes.length;t++){const e=n.addedNodes[t];this.doSync(e)}}})).observe(document.body,{childList:!0,subtree:!0})}}stop(){this.stopped=!0,removeEvent(this.config.scrollContainer||window,"scroll",this.scrollHandler),removeEvent(window,"resize",this.scrollHandler),null!=this.interval&&clearInterval(this.interval)}sync(){MutationObserver.notSupported&&this.doSync(this.element)}doSync(t){if(null==t&&({element:t}=this),1!==t.nodeType)return;const e=(t=t.parentNode||t).querySelectorAll(`.${this.config.boxClass}`);for(let t=0;t<e.length;t++){const n=e[t];isIn(n,this.all)||(this.boxes.push(n),this.all.push(n),this.stopped||this.disabled()?this.resetStyle():this.applyStyle(n,!0),this.scrolled=!0)}}show(t){return this.applyStyle(t),t.className=`${t.className} ${this.config.animateClass}`,null!=this.config.callback&&this.config.callback(t),emitEvent(t,this.wowEvent),this.config.resetAnimation&&(addEvent(t,"animationend",this.resetAnimation),addEvent(t,"oanimationend",this.resetAnimation),addEvent(t,"webkitAnimationEnd",this.resetAnimation),addEvent(t,"MSAnimationEnd",this.resetAnimation)),t}applyStyle(t,e){const n=t.getAttribute("data-wow-duration"),i=t.getAttribute("data-wow-delay"),s=t.getAttribute("data-wow-iteration");return this.animate((()=>this.customStyle(t,e,n,i,s)))}animate=function(){return"requestAnimationFrame"in window?t=>window.requestAnimationFrame(t):t=>t()}();resetStyle(){for(let t=0;t<this.boxes.length;t++){this.boxes[t].style.visibility="visible"}}resetAnimation(t){if(t.type.toLowerCase().indexOf("animationend")>=0){const e=t.target||t.srcElement;e.className=e.className.replace(this.config.animateClass,"").trim()}}customStyle(t,e,n,i,s){return e&&this.cacheAnimationName(t),n&&this.vendorSet(t.style,{animationDuration:n}),i&&this.vendorSet(t.style,{animationDelay:i}),s&&this.vendorSet(t.style,{animationIterationCount:s}),this.vendorSet(t.style,{animationName:e?"none":this.cachedAnimationName(t)}),t.style.visibility=e?"hidden":"visible",t}vendors=["moz","webkit"];vendorSet(t,e){for(const n in e)if(e.hasOwnProperty(n)){const i=e[n];t[`${n}`]=i;for(let e=0;e<this.vendors.length;e++){t[`${this.vendors[e]}${n.charAt(0).toUpperCase()}${n.substr(1)}`]=i}}}vendorCSS(t,e){const n=getComputedStyle(t);let i=n.getPropertyCSSValue(e);for(let t=0;t<this.vendors.length;t++){const s=this.vendors[t];i=i||n.getPropertyCSSValue(`-${s}-${e}`)}return i}animationName(t){let e;try{e=this.vendorCSS(t,"animation-name").cssText}catch(n){e=getComputedStyle(t).getPropertyValue("animation-name")}return"none"===e?"":e}cacheAnimationName(t){return this.animationNameCache.set(t,this.animationName(t))}cachedAnimationName(t){return this.animationNameCache.get(t)}scrollHandler(){this.scrolled=!0}scrollCallback(){if(this.scrolled){this.scrolled=!1;const t=[];for(let e=0;e<this.boxes.length;e++){const n=this.boxes[e];if(n){if(this.isVisible(n)){this.show(n);continue}t.push(n)}}this.boxes=t,this.boxes.length||this.config.live||this.stop()}}offsetTop(t){for(;void 0===t.offsetTop;)t=t.parentNode;let e=t.offsetTop;for(;t.offsetParent;)e+=(t=t.offsetParent).offsetTop;return e}isVisible(t){const e=t.getAttribute("data-wow-offset")||this.config.offset,n=this.config.scrollContainer&&this.config.scrollContainer.scrollTop||window.pageYOffset,i=n+Math.min(this.element.clientHeight,getInnerHeight())-e,s=this.offsetTop(t),o=s+t.clientHeight;return s<=i&&o>=n}disabled(){return!this.config.mobile&&isMobile(navigator.userAgent)}}window.WOW=WOW;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/getFullHash */
/******/ 	(() => {
/******/ 		__webpack_require__.h = () => ("0416280e3d0c2e2facc8")
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var __webpack_exports__ = {};
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8081&pathname=%2Fws&logging=info&reconnect=10 ***!
  \********************************************************************************************************************************************/
var __resourceQuery = "?protocol=ws%3A&hostname=0.0.0.0&port=8081&pathname=%2Fws&logging=info&reconnect=10";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webpack/hot/log.js */ "./node_modules/webpack/hot/log.js");
/* harmony import */ var webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_stripAnsi_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/stripAnsi.js */ "./node_modules/webpack-dev-server/client/utils/stripAnsi.js");
/* harmony import */ var _utils_parseURL_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/parseURL.js */ "./node_modules/webpack-dev-server/client/utils/parseURL.js");
/* harmony import */ var _socket_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./socket.js */ "./node_modules/webpack-dev-server/client/socket.js");
/* harmony import */ var _overlay_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./overlay.js */ "./node_modules/webpack-dev-server/client/overlay.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
/* harmony import */ var _utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/sendMessage.js */ "./node_modules/webpack-dev-server/client/utils/sendMessage.js");
/* harmony import */ var _utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/reloadApp.js */ "./node_modules/webpack-dev-server/client/utils/reloadApp.js");
/* harmony import */ var _utils_createSocketURL_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/createSocketURL.js */ "./node_modules/webpack-dev-server/client/utils/createSocketURL.js");
/* global __resourceQuery, __webpack_hash__ */
/// <reference types="webpack/module" />









/**
 * @typedef {Object} Options
 * @property {boolean} hot
 * @property {boolean} liveReload
 * @property {boolean} progress
 * @property {boolean | { warnings?: boolean, errors?: boolean, trustedTypesPolicyName?: string }} overlay
 * @property {string} [logging]
 * @property {number} [reconnect]
 */

/**
 * @typedef {Object} Status
 * @property {boolean} isUnloading
 * @property {string} currentHash
 * @property {string} [previousHash]
 */

/**
 * @type {Status}
 */

var status = {
  isUnloading: false,
  // TODO Workaround for webpack v4, `__webpack_hash__` is not replaced without HotModuleReplacement
  // eslint-disable-next-line camelcase
  currentHash:  true ? __webpack_require__.h() : 0
};
/** @type {Options} */

var options = {
  hot: false,
  liveReload: false,
  progress: false,
  overlay: false
};
var parsedResourceQuery = (0,_utils_parseURL_js__WEBPACK_IMPORTED_MODULE_2__["default"])(__resourceQuery);

if (parsedResourceQuery.hot === "true") {
  options.hot = true;
  _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Hot Module Replacement enabled.");
}

if (parsedResourceQuery["live-reload"] === "true") {
  options.liveReload = true;
  _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Live Reloading enabled.");
}

if (parsedResourceQuery.logging) {
  options.logging = parsedResourceQuery.logging;
}

if (typeof parsedResourceQuery.reconnect !== "undefined") {
  options.reconnect = Number(parsedResourceQuery.reconnect);
}
/**
 * @param {string} level
 */


function setAllLogLevel(level) {
  // This is needed because the HMR logger operate separately from dev server logger
  webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0___default().setLogLevel(level === "verbose" || level === "log" ? "info" : level);
  (0,_utils_log_js__WEBPACK_IMPORTED_MODULE_5__.setLogLevel)(level);
}

if (options.logging) {
  setAllLogLevel(options.logging);
}

self.addEventListener("beforeunload", function () {
  status.isUnloading = true;
});
var onSocketMessage = {
  hot: function hot() {
    if (parsedResourceQuery.hot === "false") {
      return;
    }

    options.hot = true;
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Hot Module Replacement enabled.");
  },
  liveReload: function liveReload() {
    if (parsedResourceQuery["live-reload"] === "false") {
      return;
    }

    options.liveReload = true;
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Live Reloading enabled.");
  },
  invalid: function invalid() {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("App updated. Recompiling..."); // Fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.

    if (options.overlay) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
    }

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Invalid");
  },

  /**
   * @param {string} hash
   */
  hash: function hash(_hash) {
    status.previousHash = status.currentHash;
    status.currentHash = _hash;
  },
  logging: setAllLogLevel,

  /**
   * @param {boolean} value
   */
  overlay: function overlay(value) {
    if (typeof document === "undefined") {
      return;
    }

    options.overlay = value;
  },

  /**
   * @param {number} value
   */
  reconnect: function reconnect(value) {
    if (parsedResourceQuery.reconnect === "false") {
      return;
    }

    options.reconnect = value;
  },

  /**
   * @param {boolean} value
   */
  progress: function progress(value) {
    options.progress = value;
  },

  /**
   * @param {{ pluginName?: string, percent: number, msg: string }} data
   */
  "progress-update": function progressUpdate(data) {
    if (options.progress) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("".concat(data.pluginName ? "[".concat(data.pluginName, "] ") : "").concat(data.percent, "% - ").concat(data.msg, "."));
    }

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Progress", data);
  },
  "still-ok": function stillOk() {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Nothing changed.");

    if (options.overlay) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
    }

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("StillOk");
  },
  ok: function ok() {
    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Ok");

    if (options.overlay) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
    }

    (0,_utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__["default"])(options, status);
  },
  // TODO: remove in v5 in favor of 'static-changed'

  /**
   * @param {string} file
   */
  "content-changed": function contentChanged(file) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("".concat(file ? "\"".concat(file, "\"") : "Content", " from static directory was changed. Reloading..."));
    self.location.reload();
  },

  /**
   * @param {string} file
   */
  "static-changed": function staticChanged(file) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("".concat(file ? "\"".concat(file, "\"") : "Content", " from static directory was changed. Reloading..."));
    self.location.reload();
  },

  /**
   * @param {Error[]} warnings
   * @param {any} params
   */
  warnings: function warnings(_warnings, params) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.warn("Warnings while compiling.");

    var printableWarnings = _warnings.map(function (error) {
      var _formatProblem = (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.formatProblem)("warning", error),
          header = _formatProblem.header,
          body = _formatProblem.body;

      return "".concat(header, "\n").concat((0,_utils_stripAnsi_js__WEBPACK_IMPORTED_MODULE_1__["default"])(body));
    });

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Warnings", printableWarnings);

    for (var i = 0; i < printableWarnings.length; i++) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.warn(printableWarnings[i]);
    }

    var needShowOverlayForWarnings = typeof options.overlay === "boolean" ? options.overlay : options.overlay && options.overlay.warnings;

    if (needShowOverlayForWarnings) {
      var trustedTypesPolicyName = typeof options.overlay === "object" && options.overlay.trustedTypesPolicyName;
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.show)("warning", _warnings, trustedTypesPolicyName || null);
    }

    if (params && params.preventReloading) {
      return;
    }

    (0,_utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__["default"])(options, status);
  },

  /**
   * @param {Error[]} errors
   */
  errors: function errors(_errors) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.error("Errors while compiling. Reload prevented.");

    var printableErrors = _errors.map(function (error) {
      var _formatProblem2 = (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.formatProblem)("error", error),
          header = _formatProblem2.header,
          body = _formatProblem2.body;

      return "".concat(header, "\n").concat((0,_utils_stripAnsi_js__WEBPACK_IMPORTED_MODULE_1__["default"])(body));
    });

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Errors", printableErrors);

    for (var i = 0; i < printableErrors.length; i++) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.error(printableErrors[i]);
    }

    var needShowOverlayForErrors = typeof options.overlay === "boolean" ? options.overlay : options.overlay && options.overlay.errors;

    if (needShowOverlayForErrors) {
      var trustedTypesPolicyName = typeof options.overlay === "object" && options.overlay.trustedTypesPolicyName;
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.show)("error", _errors, trustedTypesPolicyName || null);
    }
  },

  /**
   * @param {Error} error
   */
  error: function error(_error) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.error(_error);
  },
  close: function close() {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Disconnected!");

    if (options.overlay) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
    }

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Close");
  }
};
var socketURL = (0,_utils_createSocketURL_js__WEBPACK_IMPORTED_MODULE_8__["default"])(parsedResourceQuery);
(0,_socket_js__WEBPACK_IMPORTED_MODULE_3__["default"])(socketURL, onSocketMessage, options.reconnect);
})();

// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**************************!*\
  !*** ./src/js/common.js ***!
  \**************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _libraries_gsap_min__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../libraries/gsap.min */ "./src/libraries/gsap.min.js");
/* harmony import */ var _libraries_gsap_min__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_libraries_gsap_min__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _libraries_lodash_min__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../libraries/lodash.min */ "./src/libraries/lodash.min.js");
/* harmony import */ var _libraries_lodash_min__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_libraries_lodash_min__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _libraries_scroll_trigger_min__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../libraries/scroll-trigger.min */ "./src/libraries/scroll-trigger.min.js");
/* harmony import */ var _libraries_scroll_trigger_min__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_libraries_scroll_trigger_min__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _libraries_wow_min__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../libraries/wow.min */ "./src/libraries/wow.min.js");
/* harmony import */ var _libraries_wow_min__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_libraries_wow_min__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _libraries_input_mask_min_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../libraries/input-mask.min.js */ "./src/libraries/input-mask.min.js");
/* harmony import */ var _libraries_input_mask_min_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_libraries_input_mask_min_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _libraries_file_saver_min__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../libraries/file-saver.min */ "./src/libraries/file-saver.min.js");
/* harmony import */ var _libraries_file_saver_min__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_libraries_file_saver_min__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _libraries_swiper_bundle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../libraries/swiper-bundle */ "./src/libraries/swiper-bundle.js");
/* harmony import */ var _libraries_swiper_bundle__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_libraries_swiper_bundle__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util */ "./src/js/util.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_util__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _video__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./video */ "./src/js/video.js");
/* harmony import */ var _video__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_video__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _utm__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utm */ "./src/js/utm.js");
/* harmony import */ var _utm__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_utm__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _form__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./form */ "./src/js/form.js");
/* harmony import */ var _form__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_form__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./button */ "./src/js/button.js");
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_button__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _animation__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./animation */ "./src/js/animation.js");
/* harmony import */ var _animation__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_animation__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var _step_animation__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./step-animation */ "./src/js/step-animation.js");
/* harmony import */ var _step_animation__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_step_animation__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./map */ "./src/js/map.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_map__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var _timer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./timer */ "./src/js/timer.js");
/* harmony import */ var _timer__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_timer__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _slider__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./slider */ "./src/js/slider.js");
/* harmony import */ var _slider__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_slider__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var _zoom__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./zoom */ "./src/js/zoom.js");
/* harmony import */ var _zoom__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_zoom__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var _collections__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./collections */ "./src/js/collections/index.js");



















})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidjIvanMvY29tbW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBWTs7QUFFWjs7QUFFQTtBQUNBLG1EQUFtRCxJQUFJLFNBQVMsTUFBTSxJQUFJOztBQUUxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUM7QUFDRDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQ7QUFDM0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIsR0FBRztBQUNIO0FBQ0EsdUJBQXVCO0FBQ3ZCLEdBQUc7QUFDSCxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1Q0FBdUMsVUFBVSwrQkFBK0I7QUFDaEY7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7Ozs7OztBQzlLQSxJQUFNQSxHQUFHLEdBQUdBLENBQUEsS0FBTTtFQUNoQkMsUUFBUSxDQUFDQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQ0MsT0FBTyxDQUFDQyxDQUFDLElBQUk7SUFDN0NBLENBQUMsQ0FBQ0MsS0FBSyxDQUFDQyxVQUFVLEdBQUcsUUFBUTtFQUMvQixDQUFDLENBQUM7RUFDRixJQUFJQyxHQUFHLENBQUMsQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQztBQUNsQixDQUFDO0FBRURQLFFBQVEsQ0FBQ1EsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUVULEdBQUcsQ0FBQzs7Ozs7Ozs7OztBQ1JsRCxDQUFDLFlBQVc7RUFDVixZQUFZOztFQUVaLElBQU1VLGNBQWMsR0FBR0MsTUFBTSxDQUFDQyxXQUFXLENBQUNDLElBQUksQ0FBQ0gsY0FBYztFQUM3RCxJQUFNSSxTQUFTLEdBQUdILE1BQU0sQ0FBQ0MsV0FBVyxDQUFDQyxJQUFJLENBQUNDLFNBQVM7RUFFbkQsSUFBTUMsZUFBZSxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztFQUVuSixTQUFTQyxVQUFVQSxDQUFBLEVBQUk7SUFDckJDLE9BQU8sQ0FBQ0MsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFakIsUUFBUSxDQUFDa0IsS0FBSyxFQUFFUixNQUFNLENBQUNTLFFBQVEsQ0FBQ0MsUUFBUSxHQUM3RFYsTUFBTSxDQUFDUyxRQUFRLENBQUNFLE1BQU0sQ0FBQztFQUM3QjtFQUVBLE1BQU1DLE1BQU0sQ0FBQztJQUVYQyxXQUFXQSxDQUFFQyxFQUFFLEVBQUU7TUFDZixJQUFJLENBQUNBLEVBQUUsR0FBR0EsRUFBRTtNQUNaLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUcsSUFBSSxDQUFDQyxXQUFXLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7TUFDckQsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSTtNQUN2QixJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJLENBQUNMLEVBQUUsQ0FBQ00sT0FBTyxDQUFDRCxZQUFZO01BQ2hELElBQUksQ0FBQ0UsV0FBVyxHQUFHLElBQUksQ0FBQ1AsRUFBRSxDQUFDTSxPQUFPLENBQUNDLFdBQVcsSUFBSUMsSUFBSSxDQUFDQyxLQUFLLENBQUN4QixjQUFjLENBQUMsSUFBSSxDQUFDZSxFQUFFLENBQUNNLE9BQU8sQ0FBQ0MsV0FBVyxDQUFDLENBQUM7TUFFekcsSUFBSSxDQUFDRyxlQUFlLEdBQUcsSUFBSSxDQUFDVixFQUFFLENBQUNNLE9BQU8sQ0FBQ0ssSUFBSTtNQUMzQyxJQUFJLENBQUNDLGlCQUFpQixHQUFHLElBQUksQ0FBQ1osRUFBRSxDQUFDTSxPQUFPLENBQUNPLE1BQU07TUFFL0MsSUFBSSxDQUFDQyxZQUFZLEdBQUcsSUFBSSxDQUFDZCxFQUFFLENBQUNlLE9BQU8sQ0FBQ0MsV0FBVyxDQUFDLENBQUMsS0FBSyxHQUFHO01BQ3pELElBQUksQ0FBQ0MsWUFBWSxHQUFHLElBQUksQ0FBQ2pCLEVBQUUsQ0FBQ00sT0FBTyxDQUFDWSxVQUFVLEtBQUssTUFBTTtNQUN6RCxJQUFJLENBQUNDLFVBQVUsR0FBRyxJQUFJLENBQUNuQixFQUFFLENBQUNNLE9BQU8sQ0FBQ2MsSUFBSSxLQUFLLFdBQVc7SUFDeEQ7SUFFQXJDLElBQUlBLENBQUEsRUFBSTtNQUNOLElBQUksQ0FBQyxJQUFJLENBQUNpQixFQUFFLEVBQUU7O01BRWQ7TUFDQSxJQUFJLENBQUNBLEVBQUUsQ0FBQ2hCLGdCQUFnQixDQUFDLE9BQU8sRUFBR0wsQ0FBQyxJQUFLO1FBQ3ZDLElBQUksQ0FBQzBDLFVBQVUsQ0FBQzFDLENBQUMsQ0FBQztNQUNwQixDQUFDLENBQUM7O01BR0Y7TUFDQSxJQUFJLElBQUksQ0FBQytCLGVBQWUsRUFBRTtRQUN4QixJQUFNQyxJQUFJLEdBQUcsSUFBSSxDQUFDRCxlQUFlO1FBRWpDLElBQU1ZLG9CQUFvQixHQUFJWCxJQUFJLENBQUNZLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQ0MsTUFBTSxDQUFDYixJQUFJLENBQUMsSUFBTUEsSUFBSSxDQUFDWSxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQ1osSUFBSSxDQUFDWSxVQUFVLENBQUMsTUFBTSxDQUFFO1FBRWxJLElBQUlELG9CQUFvQixFQUFFO1VBQ3hCLElBQU1HLE9BQU8sa0VBQUFDLE1BQUEsQ0FBa0VmLElBQUksVUFBQWUsTUFBQSxDQUFPLElBQUksQ0FBQ2QsaUJBQWlCLElBQUksT0FBTyxPQUFJO1VBQy9ILElBQUksQ0FBQ1osRUFBRSxDQUFDMkIsWUFBWSxDQUFDLFNBQVMsRUFBRUYsT0FBTyxDQUFDO1VBQ3hDO1FBQ0Y7TUFDRjs7TUFFQTtNQUNBLElBQUksQ0FBQ3pCLEVBQUUsQ0FBQ2hCLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUNpQixrQkFBa0IsQ0FBQztJQUM1RDs7SUFFQTtJQUNBb0IsVUFBVUEsQ0FBRTFDLENBQUMsRUFBRTtNQUViLElBQUlPLE1BQU0sQ0FBQzBDLEVBQUUsSUFBSSxJQUFJLENBQUN2QixZQUFZLEVBQUU7UUFDbEN3QixFQUFFLENBQUMzQyxNQUFNLENBQUMwQyxFQUFFLENBQUNFLFFBQVEsQ0FBQ0MsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsRUFBRSxFQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMzQixZQUFZLENBQUM7TUFDM0U7TUFFQSxJQUFJbkIsTUFBTSxDQUFDK0MsSUFBSSxJQUFJLElBQUksQ0FBQzFCLFdBQVcsRUFBRTtRQUNuQ3JCLE1BQU0sQ0FBQytDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDMUIsV0FBVyxDQUFDMkIsV0FBVyxFQUFFO1VBQ2pELGdCQUFnQixFQUFFLElBQUksQ0FBQzNCLFdBQVcsQ0FBQzRCLGFBQWE7VUFDaEQsYUFBYSxFQUFFLElBQUksQ0FBQzVCLFdBQVcsQ0FBQzZCO1FBQ2xDLENBQUMsQ0FBQztNQUNKO01BRUEsSUFBTUMsSUFBSSxHQUFHMUQsQ0FBQyxDQUFDa0MsTUFBTSxDQUFDeUIsT0FBTyxDQUFDLDhCQUE4QixDQUFDO01BRTdELElBQUlELElBQUksRUFBRTtRQUNSbkQsTUFBTSxDQUFDQyxXQUFXLENBQUNDLElBQUksQ0FBQ21ELFFBQVEsQ0FBQ0YsSUFBSSxDQUFDO01BQ3hDO0lBRUY7SUFFQW5DLFdBQVdBLENBQUV2QixDQUFDLEVBQUU7TUFDZEEsQ0FBQyxDQUFDNkQsZUFBZSxDQUFDLENBQUM7O01BRW5CO01BQ0EsSUFBSSxJQUFJLENBQUN2QixZQUFZLEVBQUU7UUFDckJ0QyxDQUFDLENBQUM4RCxjQUFjLENBQUMsQ0FBQztRQUNsQixJQUFNO1VBQUVDLFdBQVc7VUFBRUMsa0JBQWtCO1VBQUVDLFlBQVk7VUFBRUM7UUFBYSxDQUFDLEdBQUcsSUFBSSxDQUFDN0MsRUFBRSxDQUFDTSxPQUFPO1FBQ3ZGLElBQU13QyxPQUFPLEdBQUcsSUFBSSxDQUFDOUMsRUFBRSxDQUFDc0MsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUUxQyxJQUFNUyxjQUFjLEdBQUcsSUFBSSxDQUFDL0MsRUFBRSxDQUFDc0MsT0FBTyxDQUFDLDJDQUEyQyxDQUFDO1FBRW5GLElBQU1VLE1BQU0sR0FBRztVQUNiTixXQUFXLEVBQUVyRCxTQUFTLENBQUNxRCxXQUFXLENBQUM7VUFDbkNDLGtCQUFrQixFQUFFdEQsU0FBUyxDQUFDc0Qsa0JBQWtCLENBQUM7VUFDakRDLFlBQVksRUFBRXZELFNBQVMsQ0FBQ3VELFlBQVksQ0FBQztVQUNyQ0MsWUFBWSxFQUFFeEQsU0FBUyxDQUFDd0QsWUFBWSxDQUFDO1VBQ3JDYixFQUFFLEVBQUUsSUFBSSxDQUFDaEMsRUFBRSxDQUFDZ0MsRUFBRSxHQUFHLEdBQUcsR0FBR2MsT0FBTyxDQUFDeEMsT0FBTyxDQUFDMkMsTUFBTTtVQUM3Q0MsUUFBUSxFQUFFSixPQUFPLENBQUN4QyxPQUFPLENBQUMyQztRQUM1QixDQUFDOztRQUVEO1FBQ0EsSUFBSUYsY0FBYyxFQUFFO1VBQ2xCQyxNQUFNLENBQUNHLGFBQWEsR0FBR0osY0FBYyxDQUFDekMsT0FBTyxDQUFDOEMsR0FBRztVQUNqREosTUFBTSxDQUFDSyxrQkFBa0IsR0FBR04sY0FBYyxDQUFDekMsT0FBTyxDQUFDZ0QsT0FBTztVQUMxRE4sTUFBTSxDQUFDaEIsRUFBRSxHQUFHLElBQUksQ0FBQ2hDLEVBQUUsQ0FBQ2dDLEVBQUUsR0FBRyxHQUFHLEdBQUdlLGNBQWMsQ0FBQ3pDLE9BQU8sQ0FBQ2dELE9BQU87UUFDL0Q7UUFFQSxJQUFNQyxLQUFLLEdBQUcsSUFBSUMsV0FBVyxDQUFDLG9CQUFvQixFQUFFO1VBQUVSO1FBQU8sQ0FBQyxDQUFDO1FBRS9EeEUsUUFBUSxDQUFDaUYsYUFBYSxDQUFDRixLQUFLLENBQUM7UUFDN0I7TUFDRjtNQUVBLElBQUksSUFBSSxDQUFDcEMsVUFBVSxFQUFFO1FBQ25CLElBQU11QyxJQUFJLEdBQUdsRixRQUFRLENBQUNtRixhQUFhLENBQUMsb0JBQW9CLENBQUM7UUFFekQsSUFBSUQsSUFBSSxFQUFFO1VBQ1IvRSxDQUFDLENBQUM4RCxjQUFjLENBQUMsQ0FBQztVQUNsQixJQUFJLENBQUNyQyxXQUFXLEdBQUdzRCxJQUFJO1VBQ3ZCeEUsTUFBTSxDQUFDQyxXQUFXLENBQUNDLElBQUksQ0FBQ3dFLFNBQVMsQ0FBQ0YsSUFBSSxDQUFDO1VBQ3ZDO1FBQ0Y7TUFDRjtNQUdBLElBQUk7UUFBRUc7TUFBSyxDQUFDLEdBQUcsSUFBSSxDQUFDN0QsRUFBRTtNQUN0QixJQUFJVyxJQUFJLEdBQUcsSUFBSSxDQUFDWCxFQUFFLENBQUM4RCxZQUFZLENBQUMsTUFBTSxDQUFDO01BQ3ZDLElBQUlDLFVBQVUsR0FBRyxJQUFJLENBQUMvRCxFQUFFLENBQUNhLE1BQU07TUFHL0IsSUFBSSxDQUFDLElBQUksQ0FBQ0MsWUFBWSxJQUFJLElBQUksQ0FBQ0osZUFBZSxFQUFFO1FBQzlDQyxJQUFJLEdBQUcsSUFBSSxDQUFDRCxlQUFlO1FBQzNCcUQsVUFBVSxHQUFHLElBQUksQ0FBQ25ELGlCQUFpQjtRQUNuQ2lELElBQUksR0FBRyxHQUFHLEdBQUdsRCxJQUFJLENBQUNxRCxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ2pDO01BRUEsSUFBTUMsR0FBRyxHQUFHdEQsSUFBSSxJQUFJQSxJQUFJLENBQUN1RCxJQUFJLENBQUMsQ0FBQzs7TUFFL0I7TUFDQSxJQUFJLENBQUNELEdBQUcsSUFBSUEsR0FBRyxLQUFLLEVBQUUsSUFBSUEsR0FBRyxLQUFLLEdBQUcsRUFBRTtRQUNyQ3RGLENBQUMsQ0FBQzhELGNBQWMsQ0FBQyxDQUFDO1FBQ2xCO01BQ0Y7TUFHQSxJQUFJLElBQUksQ0FBQ2pCLE1BQU0sQ0FBQ2IsSUFBSSxDQUFDLEVBQUU7UUFFckJoQyxDQUFDLENBQUM4RCxjQUFjLENBQUMsQ0FBQztRQUVsQixJQUFJc0IsVUFBVSxLQUFLLFFBQVEsRUFBRTtVQUMzQjdFLE1BQU0sQ0FBQ2lGLE1BQU0sQ0FBQ3hELElBQUksRUFBRUEsSUFBSSxDQUFDcUQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDSSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVDLENBQUMsTUFBTTtVQUNMbEYsTUFBTSxDQUFDbUYsSUFBSSxDQUFDMUQsSUFBSSxFQUFFLFFBQVEsQ0FBQztRQUM3QjtRQUVBO01BQ0Y7TUFFQSxJQUFJRSxNQUFNLEdBQUcsSUFBSTtNQUNqQixJQUFJO1FBQ0ZBLE1BQU0sR0FBR2dELElBQUksSUFBSXJGLFFBQVEsQ0FBQ21GLGFBQWEsQ0FBQ0UsSUFBSSxDQUFDO01BQy9DLENBQUMsQ0FBQyxPQUFPbEYsQ0FBQyxFQUFFO1FBQ1YyRixPQUFPLENBQUNDLEdBQUcsQ0FBQzVGLENBQUMsQ0FBQztNQUNoQjs7TUFFQTtNQUNBLElBQU02RixTQUFTLEdBQUcsQ0FBQzNELE1BQU0sSUFBSTNCLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDQyxJQUFJLENBQUNvRixTQUFTLENBQUMsSUFBSSxDQUFDeEUsRUFBRSxDQUFDO01BRXZFLElBQUl3RSxTQUFTLEVBQUU7UUFDYjdGLENBQUMsQ0FBQzhELGNBQWMsQ0FBQyxDQUFDO1FBQ2xCO01BQ0Y7TUFFQSxJQUFJLENBQUM1QixNQUFNLEVBQUU7O01BRWI7O01BRUFsQyxDQUFDLENBQUM4RCxjQUFjLENBQUMsQ0FBQztNQUVsQixJQUFJNUIsTUFBTSxDQUFDUCxPQUFPLENBQUNtRSxLQUFLLEVBQUU7UUFDeEIsSUFBSSxDQUFDckUsV0FBVyxHQUFHUyxNQUFNO1FBQ3pCM0IsTUFBTSxDQUFDQyxXQUFXLENBQUNDLElBQUksQ0FBQ3dFLFNBQVMsQ0FBQy9DLE1BQU0sQ0FBQztRQUN6QztNQUNGO01BRUEzQixNQUFNLENBQUNDLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDc0YsUUFBUSxDQUFDN0QsTUFBTSxDQUFDO0lBQzFDO0lBRUFXLE1BQU1BLENBQUViLElBQUksRUFBRTtNQUNaLE9BQU9yQixlQUFlLENBQUNxRixRQUFRLENBQUNoRSxJQUFJLENBQUNxRCxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUNJLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEQ7SUFHQSxPQUFPN0YsR0FBR0EsQ0FBQSxFQUErQjtNQUFBLElBQTdCcUcsV0FBVyxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBR3JHLFFBQVEsQ0FBQ3dHLElBQUk7TUFFckMsSUFBTUMsS0FBSyxHQUFHLENBQ1osR0FBR0wsV0FBVyxDQUFDbkcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEVBQ3BDLEdBQUdtRyxXQUFXLENBQUNuRyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FDL0M7TUFFRHdHLEtBQUssQ0FBQ3ZHLE9BQU8sQ0FBQ3dHLENBQUMsSUFBSTtRQUNqQixJQUFNQyxNQUFNLEdBQUcsSUFBSXJGLE1BQU0sQ0FBQ29GLENBQUMsQ0FBQztRQUM1QkMsTUFBTSxDQUFDcEcsSUFBSSxDQUFDLENBQUM7TUFDZixDQUFDLENBQUM7SUFDSjtFQUNGO0VBRUFQLFFBQVEsQ0FBQ1EsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsTUFBTTtJQUVsRCxJQUFNb0csVUFBVSxHQUFHbEcsTUFBTSxDQUFDUyxRQUFRLENBQUNrRSxJQUFJO0lBRXZDLElBQUl1QixVQUFVLEVBQUU7TUFDZDtNQUNBN0YsVUFBVSxDQUFDLENBQUM7TUFDWixJQUFNc0IsTUFBTSxHQUFHckMsUUFBUSxDQUFDbUYsYUFBYSxDQUFDeUIsVUFBVSxDQUFDO01BQ2pELElBQUksQ0FBQ3ZFLE1BQU0sRUFBRTtNQUNiLElBQUlBLE1BQU0sQ0FBQ1AsT0FBTyxDQUFDbUUsS0FBSyxFQUFFO1FBQ3hCdkYsTUFBTSxDQUFDQyxXQUFXLENBQUNDLElBQUksQ0FBQ3dFLFNBQVMsQ0FBQy9DLE1BQU0sQ0FBQztNQUMzQyxDQUFDLE1BQU07UUFDTHdFLFlBQVksQ0FBQ0MsT0FBTyxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQztRQUMvQ3BHLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDQyxJQUFJLENBQUNzRixRQUFRLENBQUM3RCxNQUFNLEVBQUUsTUFBTXdFLFlBQVksQ0FBQ0UsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUM7TUFDOUY7SUFDRjtJQUVBekYsTUFBTSxDQUFDdkIsR0FBRyxDQUFDLENBQUM7RUFFZCxDQUFDLENBQUM7RUFFRlcsTUFBTSxDQUFDQyxXQUFXLEdBQUdELE1BQU0sQ0FBQ0MsV0FBVyxJQUFJLENBQUMsQ0FBQztFQUM3Q0QsTUFBTSxDQUFDQyxXQUFXLENBQUNXLE1BQU0sR0FBR0EsTUFBTTtBQUVwQyxDQUFDLEVBQUUsQ0FBQzs7Ozs7Ozs7Ozs7O0FDck9KOztBQUVDLGFBQVU7RUFFVCxJQUFNVixJQUFJLEdBQUdGLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDQyxJQUFJO0VBQ3BDLElBQU1ILGNBQWMsR0FBR0csSUFBSSxDQUFDSCxjQUFjO0VBQzFDLElBQU11Ryx1Q0FBdUMsR0FBR3BHLElBQUksQ0FBQ29HLHVDQUF1QztFQUU1RixTQUFTQyxlQUFlQSxDQUFDQyxPQUFPLEVBQUU7SUFDaEMsSUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUNFLHFCQUFxQixDQUFDLENBQUM7SUFDNUMsSUFBTUMsWUFBWSxHQUFHM0csTUFBTSxDQUFDNEcsV0FBVzs7SUFFdkM7SUFDQSxJQUFNQyxlQUFlLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFDRCxJQUFJLENBQUNFLEdBQUcsQ0FBQ1AsSUFBSSxDQUFDUSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUVOLFlBQVksQ0FBQztJQUNyRSxJQUFNTyxrQkFBa0IsR0FBR0osSUFBSSxDQUFDQyxHQUFHLENBQUNELElBQUksQ0FBQ0UsR0FBRyxDQUFDUCxJQUFJLENBQUNVLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRVIsWUFBWSxDQUFDO0lBQzNFLElBQUlTLGFBQWEsR0FBR0Ysa0JBQWtCLEdBQUdMLGVBQWU7O0lBRXhEO0lBQ0EsSUFBSU8sYUFBYSxHQUFHLENBQUMsRUFBRTtNQUNyQkEsYUFBYSxHQUFHLENBQUM7SUFDbkI7O0lBRUE7SUFDQSxJQUFJQSxhQUFhLEdBQUdYLElBQUksQ0FBQ1ksTUFBTSxHQUFHLEdBQUcsRUFBRTtNQUNyQ2IsT0FBTyxDQUFDYyxjQUFjLENBQUM7UUFDckJDLFFBQVEsRUFBRSxRQUFRO1FBQ2xCQyxLQUFLLEVBQUU7TUFDVCxDQUFDLENBQUM7SUFDSjtFQUNGO0VBRUEsU0FBU0MsbUJBQW1CQSxDQUFFQyxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsU0FBUyxFQUFFQyxjQUFjLEVBQUVDLGVBQWUsRUFBQztJQUUxRixJQUFJQyxNQUFNLEdBQUc7TUFDWEMsUUFBUSxFQUFFTjtJQUNaLENBQUM7SUFFRCxJQUFJQyxTQUFTLEtBQUssTUFBTSxFQUFFO01BQ3hCSSxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsVUFBVSxHQUFHL0gsSUFBSSxDQUFDZ0ksbUJBQW1CLENBQUNDLE1BQU07TUFFNUQsSUFBSVAsU0FBUyxLQUFLMUgsSUFBSSxDQUFDa0ksd0JBQXdCLENBQUNDLE1BQU0sRUFBRTtRQUN0RE4sTUFBTSxDQUFDTyxPQUFPLEdBQUcsSUFBSTtRQUNyQlAsTUFBTSxDQUFDQyxRQUFRLENBQUNDLFVBQVUsR0FBRy9ILElBQUksQ0FBQ2dJLG1CQUFtQixDQUFDSyxPQUFPO01BQy9ELENBQUMsTUFBTSxJQUFJWCxTQUFTLEtBQUsxSCxJQUFJLENBQUNrSSx3QkFBd0IsQ0FBQ0ksVUFBVSxFQUFFO1FBQ2pFVCxNQUFNLENBQUNPLE9BQU8sR0FBRyxLQUFLO1FBQ3RCUCxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsVUFBVSxHQUFHL0gsSUFBSSxDQUFDZ0ksbUJBQW1CLENBQUNLLE9BQU87TUFDL0QsQ0FBQyxNQUFNO1FBQ0wsSUFBSUUsUUFBUSxHQUFHWixjQUFjLEtBQUssSUFBSSxHQUFHQSxjQUFjLEdBQUcsRUFBRTtRQUM1RCxJQUFJQyxlQUFlLEVBQUU7VUFDbkIsSUFBSUEsZUFBZSxDQUFDNUYsSUFBSSxLQUFLaEMsSUFBSSxDQUFDd0ksZ0JBQWdCLENBQUNDLHVCQUF1QixFQUFFO1lBQzFFLElBQUliLGVBQWUsQ0FBQ2MsT0FBTyxLQUFLLE1BQU0sSUFBSWQsZUFBZSxDQUFDYyxPQUFPLEtBQUssTUFBTSxFQUFFO2NBQzVFSCxRQUFRLGNBQUFqRyxNQUFBLENBQWNzRixlQUFlLENBQUNjLE9BQU8sUUFBSztZQUNwRCxDQUFDLE1BQU07Y0FDTEgsUUFBUSxxQkFBQWpHLE1BQUEsQ0FBcUJzRixlQUFlLENBQUNjLE9BQU8sY0FBVztZQUNqRTtVQUNGO1FBQ0Y7UUFDQSxJQUFJaEIsU0FBUyxLQUFLMUgsSUFBSSxDQUFDa0ksd0JBQXdCLENBQUNTLEtBQUssRUFBRTtVQUNyRGQsTUFBTSxDQUFDZSxHQUFHLEdBQUdMLFFBQVE7UUFDdkIsQ0FBQyxNQUFNLElBQUliLFNBQVMsS0FBSzFILElBQUksQ0FBQ2tJLHdCQUF3QixDQUFDVyxTQUFTLEVBQUU7VUFDaEVoQixNQUFNLENBQUNpQixHQUFHLEdBQUdQLFFBQVE7UUFDdkIsQ0FBQyxNQUFNLElBQUliLFNBQVMsS0FBSzFILElBQUksQ0FBQ2tJLHdCQUF3QixDQUFDYSxRQUFRLEVBQUU7VUFDL0RsQixNQUFNLENBQUNtQixNQUFNLFFBQUExRyxNQUFBLENBQVFpRyxRQUFRLE9BQUk7UUFDbkMsQ0FBQyxNQUFNLElBQUliLFNBQVMsS0FBSzFILElBQUksQ0FBQ2tJLHdCQUF3QixDQUFDZSxZQUFZLEVBQUU7VUFDbkVwQixNQUFNLENBQUNxQixRQUFRLFFBQUE1RyxNQUFBLENBQVFpRyxRQUFRLE9BQUk7UUFDckMsQ0FBQyxNQUFNLElBQUliLFNBQVMsS0FBSzFILElBQUksQ0FBQ2tJLHdCQUF3QixDQUFDaUIsV0FBVyxFQUFFO1VBQ2xFdEIsTUFBTSxDQUFDbUIsTUFBTSxNQUFBMUcsTUFBQSxDQUFNaUcsUUFBUSxPQUFJO1FBQ2pDLENBQUMsTUFBTSxJQUFJYixTQUFTLEtBQUsxSCxJQUFJLENBQUNrSSx3QkFBd0IsQ0FBQ2tCLFNBQVMsRUFBRTtVQUNoRXZCLE1BQU0sQ0FBQ21CLE1BQU0sUUFBQTFHLE1BQUEsQ0FBUWlHLFFBQVEsQ0FBRTtRQUNqQyxDQUFDLE1BQU0sSUFBSWIsU0FBUyxLQUFLMUgsSUFBSSxDQUFDa0ksd0JBQXdCLENBQUNtQixlQUFlLEVBQUU7VUFDdEV4QixNQUFNLENBQUNxQixRQUFRLE1BQUE1RyxNQUFBLENBQU1pRyxRQUFRLE9BQUk7UUFDbkMsQ0FBQyxNQUFNLElBQUliLFNBQVMsS0FBSzFILElBQUksQ0FBQ2tJLHdCQUF3QixDQUFDb0IsYUFBYSxFQUFFO1VBQ3BFekIsTUFBTSxDQUFDcUIsUUFBUSxRQUFBNUcsTUFBQSxDQUFRaUcsUUFBUSxDQUFFO1FBQ25DLENBQUMsTUFBTTtVQUNMLE1BQU0sSUFBSWdCLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQztRQUMvRDtNQUNGO0lBQ0YsQ0FBQyxNQUFNLElBQUk5QixTQUFTLEtBQUssS0FBSyxFQUFFO01BQzlCSSxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsVUFBVSxHQUFHL0gsSUFBSSxDQUFDZ0ksbUJBQW1CLENBQUN3QixHQUFHO01BRXpELElBQUk5QixTQUFTLEtBQUsxSCxJQUFJLENBQUNrSSx3QkFBd0IsQ0FBQ0MsTUFBTSxFQUFFO1FBQ3RETixNQUFNLENBQUNPLE9BQU8sR0FBRyxJQUFJO1FBQ3JCUCxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsVUFBVSxHQUFHL0gsSUFBSSxDQUFDZ0ksbUJBQW1CLENBQUNLLE9BQU87TUFDL0QsQ0FBQyxNQUFNLElBQUlYLFNBQVMsS0FBSzFILElBQUksQ0FBQ2tJLHdCQUF3QixDQUFDSSxVQUFVLEVBQUU7UUFDakVULE1BQU0sQ0FBQ08sT0FBTyxHQUFHLEtBQUs7UUFDdEJQLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDQyxVQUFVLEdBQUcvSCxJQUFJLENBQUNnSSxtQkFBbUIsQ0FBQ0ssT0FBTztNQUMvRCxDQUFDLE1BQU07UUFDTCxJQUFJRSxTQUFRLEdBQUdaLGNBQWMsS0FBSyxJQUFJLEdBQUdBLGNBQWMsR0FBRyxDQUFDO1FBQzNELElBQUlDLGVBQWUsRUFBRTtVQUNuQixJQUFJQSxlQUFlLENBQUM1RixJQUFJLEtBQUtoQyxJQUFJLENBQUN5SixlQUFlLENBQUNoQix1QkFBdUIsRUFBRTtZQUN6RUYsU0FBUSxxQkFBQWpHLE1BQUEsQ0FBcUJzRixlQUFlLENBQUNjLE9BQU8sY0FBVztVQUNqRTtRQUNGO1FBQ0EsSUFBSWhCLFNBQVMsS0FBSzFILElBQUksQ0FBQ2tJLHdCQUF3QixDQUFDUyxLQUFLLEVBQUU7VUFDckRkLE1BQU0sQ0FBQ2UsR0FBRyxHQUFHTCxTQUFRO1FBQ3ZCLENBQUMsTUFBTSxJQUFJYixTQUFTLEtBQUsxSCxJQUFJLENBQUNrSSx3QkFBd0IsQ0FBQ1csU0FBUyxFQUFFO1VBQ2hFaEIsTUFBTSxDQUFDaUIsR0FBRyxHQUFHUCxTQUFRO1FBQ3ZCLENBQUMsTUFBTSxJQUFJYixTQUFTLEtBQUsxSCxJQUFJLENBQUNrSSx3QkFBd0IsQ0FBQ3dCLFlBQVksRUFBRTtVQUNuRTdCLE1BQU0sQ0FBQzhCLEdBQUcsR0FBR3BCLFNBQVE7UUFDdkIsQ0FBQyxNQUFNLElBQUliLFNBQVMsS0FBSzFILElBQUksQ0FBQ2tJLHdCQUF3QixDQUFDMEIsa0JBQWtCLEVBQUU7VUFDekUvQixNQUFNLENBQUNnQyxJQUFJLEdBQUd0QixTQUFRO1FBQ3hCLENBQUMsTUFBTSxJQUFJYixTQUFTLEtBQUsxSCxJQUFJLENBQUNrSSx3QkFBd0IsQ0FBQzRCLFNBQVMsRUFBRTtVQUNoRWpDLE1BQU0sQ0FBQ2tDLEdBQUcsR0FBR3hCLFNBQVE7UUFDdkIsQ0FBQyxNQUFNLElBQUliLFNBQVMsS0FBSzFILElBQUksQ0FBQ2tJLHdCQUF3QixDQUFDOEIsZUFBZSxFQUFFO1VBQ3RFbkMsTUFBTSxDQUFDb0MsSUFBSSxHQUFHMUIsU0FBUTtRQUN4QixDQUFDLE1BQU07VUFDTCxNQUFNLElBQUlnQixLQUFLLENBQUMsNENBQTRDLENBQUM7UUFDL0Q7TUFDRjtJQUNGO0lBRUEsT0FBTzFCLE1BQU07RUFDZjtFQUVBLFNBQVNxQyxnQkFBZ0JBLENBQUV0SixFQUFFLEVBQUU7SUFDN0IsSUFBSWQsTUFBTSxDQUFDQyxXQUFXLElBQUlhLEVBQUUsRUFBRTtNQUM1QnVKLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDdEssTUFBTSxDQUFDQyxXQUFXLENBQUMsQ0FBQ1QsT0FBTyxDQUFDK0ssTUFBTSxJQUFJO1FBQUEsSUFBQUMsV0FBQTtRQUNsRCxDQUFBQSxXQUFBLEdBQUFELE1BQU0sQ0FBQ2xMLEdBQUcsY0FBQW1MLFdBQUEsdUJBQVZBLFdBQUEsQ0FBQUMsSUFBQSxDQUFBRixNQUFNLEVBQU96SixFQUFFLENBQUM7TUFDbEIsQ0FBQyxDQUFDO0lBQ0o7RUFDRjtFQUVBLE1BQU00SixJQUFJLENBQUM7SUFDVDdKLFdBQVdBLENBQUVDLEVBQUUsRUFBRTtNQUNmLElBQUksQ0FBQ0EsRUFBRSxHQUFHQSxFQUFFO01BQ1osSUFBSSxDQUFDaUQsTUFBTSxHQUFHakQsRUFBRSxDQUFDTSxPQUFPLENBQUMyQyxNQUFNO01BQy9CLElBQUksQ0FBQzlDLElBQUksR0FBR0ssSUFBSSxDQUFDQyxLQUFLLENBQUN4QixjQUFjLENBQUNlLEVBQUUsQ0FBQ00sT0FBTyxDQUFDSCxJQUFJLENBQUMsQ0FBQztNQUN2RCxJQUFJLENBQUMwSixTQUFTLEdBQUcsRUFBRTtJQUNyQjtJQUVNOUssSUFBSUEsQ0FBQSxFQUFJO01BQUEsSUFBQStLLEtBQUE7TUFBQSxPQUFBQyxpQkFBQTtRQUNaLElBQU1DLFFBQVEsR0FBR1QsTUFBTSxDQUFDVSxPQUFPLENBQUNILEtBQUksQ0FBQzNKLElBQUksQ0FBQyxDQUFDK0osR0FBRztVQUFBLElBQUFDLEtBQUEsR0FBQUosaUJBQUEsQ0FBQyxXQUFBSyxJQUFBLEVBQWdDO1lBQUEsSUFBekIsQ0FBQ0MsU0FBUyxFQUFFQyxPQUFPLENBQUMsR0FBQUYsSUFBQTtZQUN4RSxJQUFNRyxRQUFRLEdBQUcsSUFBSXJMLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDcUwsUUFBUSxDQUFDSCxTQUFTLEVBQUVDLE9BQU8sQ0FBQztZQUNwRVIsS0FBSSxDQUFDRCxTQUFTLENBQUNZLElBQUksQ0FBQ0YsUUFBUSxDQUFDO1lBQzdCQSxRQUFRLENBQUN4TCxJQUFJLENBQUMsQ0FBQztVQUNqQixDQUFDO1VBQUEsaUJBQUEyTCxFQUFBO1lBQUEsT0FBQVAsS0FBQSxDQUFBUSxLQUFBLE9BQUE5RixTQUFBO1VBQUE7UUFBQSxJQUFDO1FBRUYsTUFBTStGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDYixRQUFRLENBQUM7UUFDM0IsTUFBTUYsS0FBSSxDQUFDZ0IsTUFBTSxDQUFDLENBQUM7UUFFbkI1TCxNQUFNLENBQUNGLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxNQUFNO1VBQ3hDOEssS0FBSSxDQUFDZ0IsTUFBTSxDQUFDLENBQUM7UUFDZixDQUFDLENBQUM7TUFBQTtJQUNKOztJQUVBO0lBQ0E7SUFDTUEsTUFBTUEsQ0FBQSxFQUFJO01BQUEsSUFBQUMsTUFBQTtNQUFBLE9BQUFoQixpQkFBQTtRQUVkLElBQUlnQixNQUFJLENBQUMvSyxFQUFFLENBQUNwQixLQUFLLENBQUNvTSxPQUFPLEtBQUssTUFBTSxFQUFFO1VBQ3BDO1FBQ0Y7UUFFQSxJQUFNQyxTQUFTLEdBQUcsSUFBSUMsZUFBZSxDQUFDaE0sTUFBTSxDQUFDUyxRQUFRLENBQUNFLE1BQU0sQ0FBQztRQUU3RCxJQUFNc0wsS0FBSyxHQUFHRixTQUFTLENBQUNHLEdBQUcsQ0FBQyxTQUFTLENBQUM7UUFFdEMsSUFBSSxDQUFDRCxLQUFLLEVBQUU7VUFDVjtRQUNGO1FBRUEsSUFBTUUsT0FBTyxHQUFHN0ssSUFBSSxDQUFDQyxLQUFLLENBQUN4QixjQUFjLENBQUNrTSxLQUFLLENBQUMsQ0FBQztRQUVqRDVCLE1BQU0sQ0FBQ1UsT0FBTyxDQUFDb0IsT0FBTyxDQUFDLENBQUMzTSxPQUFPLENBQUM0TSxLQUFBLElBQWtCO1VBQUEsSUFBakIsQ0FBQ0MsR0FBRyxFQUFFQyxLQUFLLENBQUMsR0FBQUYsS0FBQTtVQUMzQyxJQUFJQyxHQUFHLENBQUM1RyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDekIsSUFBTSxDQUFDM0MsRUFBRSxDQUFDLEdBQUd1SixHQUFHLENBQUN2SCxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQzNCK0csTUFBSSxDQUFDVSxnQkFBZ0IsQ0FBQ3pKLEVBQUUsRUFBRXdKLEtBQUssQ0FBQztVQUNsQyxDQUFDLE1BQU07WUFDTFQsTUFBSSxDQUFDVyxhQUFhLENBQUMsR0FBRyxHQUFHSCxHQUFHLEVBQUVDLEtBQUssQ0FBQztVQUN0QztRQUNGLENBQUMsQ0FBQzs7UUFHRjtRQUNBakMsTUFBTSxDQUFDVSxPQUFPLENBQUNjLE1BQUksQ0FBQzVLLElBQUksQ0FBQyxDQUFDekIsT0FBTyxDQUFDaU4sS0FBQSxJQUEwQjtVQUFBLElBQXpCLENBQUN0QixTQUFTLEVBQUVDLE9BQU8sQ0FBQyxHQUFBcUIsS0FBQTtVQUNyRCxJQUFNcEIsUUFBUSxHQUFHUSxNQUFJLENBQUNsQixTQUFTLENBQUMrQixJQUFJLENBQUNqTixDQUFDLElBQUlBLENBQUMsQ0FBQzBMLFNBQVMsS0FBS0EsU0FBUyxDQUFDO1VBQ3BFRSxRQUFRLENBQUNPLE1BQU0sQ0FBQ1IsT0FBTyxDQUFDO1FBQzFCLENBQUMsQ0FBQztRQUVGLE1BQU1TLE1BQUksQ0FBQ2MsTUFBTSxDQUFDLENBQUM7TUFBQTtJQUVyQjtJQUVBSixnQkFBZ0JBLENBQUVLLFVBQVUsRUFBRUMsSUFBSSxFQUFFO01BQ2xDLElBQU1DLElBQUksR0FBRyxJQUFJLENBQUM3TCxJQUFJLENBQUMyTCxVQUFVLENBQUM7TUFFbEMsSUFBSUUsSUFBSSxFQUFFO1FBQ1JBLElBQUksQ0FBQ0MsVUFBVSxDQUFDQyxNQUFNLEdBQUlILElBQUksR0FBR0MsSUFBSSxDQUFDQyxVQUFVLENBQUNFLEtBQUssR0FBSUgsSUFBSSxDQUFDQyxVQUFVLENBQUNFLEtBQUs7TUFDakY7SUFDRjs7SUFFQTtJQUNBO0lBQ0FULGFBQWFBLENBQUVVLFFBQVEsRUFBRVosS0FBSyxFQUFFO01BQzlCakMsTUFBTSxDQUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDckosSUFBSSxDQUFDLENBQUN6QixPQUFPLENBQUMyTixLQUFBLElBQTJCO1FBQUEsSUFBMUI7VUFBRWhCLE9BQU8sRUFBRTtZQUFFaUI7VUFBSztRQUFFLENBQUMsR0FBQUQsS0FBQTtRQUNyREMsSUFBSSxDQUFDNU4sT0FBTyxDQUFDNk4sS0FBQSxJQUFhO1VBQUEsSUFBWjtZQUFFQztVQUFJLENBQUMsR0FBQUQsS0FBQTtVQUNuQkMsR0FBRyxDQUFDOU4sT0FBTyxDQUFDK04sQ0FBQyxJQUFJLElBQUksQ0FBQ0MsWUFBWSxDQUFDRCxDQUFDLEVBQUVMLFFBQVEsRUFBRVosS0FBSyxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDO01BQ0osQ0FBQyxDQUFDO0lBQ0o7SUFFQWtCLFlBQVlBLENBQUVDLE1BQU0sRUFBRVAsUUFBUSxFQUFFWixLQUFLLEVBQUU7TUFDckNqQyxNQUFNLENBQUNVLE9BQU8sQ0FBQzBDLE1BQU0sQ0FBQyxDQUFDak8sT0FBTyxDQUFDa08sS0FBQSxJQUF1QjtRQUFBLElBQXRCLENBQUNDLENBQUMsRUFBRTtVQUFFM0Y7UUFBUyxDQUFDLENBQUMsR0FBQTBGLEtBQUE7UUFDL0MsSUFBTVosSUFBSSxHQUFHOUUsUUFBUSxhQUFSQSxRQUFRLHVCQUFSQSxRQUFRLENBQUU0RixzQkFBc0I7UUFDN0MsSUFBSSxDQUFBZCxJQUFJLGFBQUpBLElBQUksdUJBQUpBLElBQUksQ0FBRWUsZUFBZSxNQUFLWCxRQUFRLEVBQUU7VUFDdENPLE1BQU0sQ0FBQ0UsQ0FBQyxDQUFDLEdBQUdsRyxtQkFBbUIsQ0FBQ08sUUFBUSxFQUFFOEUsSUFBSSxDQUFDbkYsU0FBUyxFQUFFbUYsSUFBSSxDQUFDbEYsU0FBUyxFQUFFMEUsS0FBSyxFQUFFUSxJQUFJLENBQUNoRixlQUFlLENBQUM7UUFDeEc7TUFDRixDQUFDLENBQUM7SUFDSjtJQUVNZ0csVUFBVUEsQ0FBQSxFQUFJO01BQUEsSUFBQUMsTUFBQTtNQUFBLE9BQUFsRCxpQkFBQTtRQUVsQixJQUFNbUQsV0FBVyxHQUFHMU0sSUFBSSxDQUFDQyxLQUFLLENBQUNELElBQUksQ0FBQzJNLFNBQVMsQ0FBQ0YsTUFBSSxDQUFDOU0sSUFBSSxDQUFDLENBQUM7UUFDekRvSixNQUFNLENBQUNVLE9BQU8sQ0FBQ2lELFdBQVcsQ0FBQyxDQUFDeE8sT0FBTyxDQUFDME8sS0FBQSxJQUEwQjtVQUFBLElBQXpCLENBQUMvQyxTQUFTLEVBQUVnRCxPQUFPLENBQUMsR0FBQUQsS0FBQTtVQUN2REMsT0FBTyxDQUFDaEMsT0FBTyxHQUFHN0YsdUNBQXVDLENBQUM2SCxPQUFPLENBQUNoQyxPQUFPLEVBQUVuTSxNQUFNLENBQUNvTyxPQUFPLENBQUM7UUFDNUYsQ0FBQyxDQUFDO1FBRUYsSUFBTXRJLElBQUksR0FBRztVQUNYdUksTUFBTSxFQUFFLGFBQWE7VUFDckJDLFFBQVEsRUFBRVAsTUFBSSxDQUFDaEssTUFBTTtVQUNyQndLLEdBQUcsRUFBRXZPLE1BQU0sQ0FBQ29PLE9BQU8sSUFBSSxDQUFDLENBQUM7VUFDekJuTixJQUFJLEVBQUUrTTtRQUVSLENBQUM7UUFFRCxJQUFNUSxRQUFRLFNBQVNDLEtBQUssQ0FBQyw0QkFBNEIsRUFBRTtVQUN6REMsT0FBTyxFQUFFO1lBQUUsY0FBYyxFQUFFO1VBQWlDLENBQUM7VUFDN0RDLFdBQVcsRUFBRSxTQUFTO1VBQ3RCQyxNQUFNLEVBQUUsTUFBTTtVQUNkOUksSUFBSSxFQUFFeEUsSUFBSSxDQUFDMk0sU0FBUyxDQUFDbkksSUFBSTtRQUMzQixDQUFDLENBQUM7UUFFRixhQUFhMEksUUFBUSxDQUFDSyxJQUFJLENBQUMsQ0FBQztNQUFBO0lBQzlCO0lBRU1sQyxNQUFNQSxDQUFBLEVBQUk7TUFBQSxJQUFBbUMsTUFBQTtNQUFBLE9BQUFqRSxpQkFBQTtRQUVkLElBQU1rRSxJQUFJLEdBQUd6UCxRQUFRLENBQUMwUCxhQUFhLENBQUMsS0FBSyxDQUFDO1FBQzFDRCxJQUFJLENBQUNFLFNBQVMsU0FBU0gsTUFBSSxDQUFDaEIsVUFBVSxDQUFDLENBQUM7UUFDeEMsSUFBTW9CLFFBQVEsR0FBR0gsSUFBSSxDQUFDSSxVQUFVO1FBR2hDOUUsTUFBTSxDQUFDK0UsSUFBSSxDQUFDTixNQUFJLENBQUM3TixJQUFJLENBQUMsQ0FBQ3pCLE9BQU8sQ0FBQzJMLFNBQVMsSUFBSTtVQUFBLElBQUFrRSxjQUFBLEVBQUFDLGNBQUE7VUFDMUMsSUFBTUMsWUFBWSxHQUFHQyxLQUFLLENBQUNDLElBQUksQ0FBQ1YsSUFBSSxDQUFDeFAsZ0JBQWdCLDJCQUFBaUQsTUFBQSxDQUEwQjJJLFNBQVMsUUFBSSxDQUFDLENBQUM7VUFDOUYsSUFBTXVFLFlBQVksR0FBR0YsS0FBSyxDQUFDQyxJQUFJLENBQUNYLE1BQUksQ0FBQ2hPLEVBQUUsQ0FBQ3ZCLGdCQUFnQiwyQkFBQWlELE1BQUEsQ0FBMEIySSxTQUFTLFFBQUksQ0FBQyxDQUFDO1VBRWpHLElBQU13RSxTQUFTLElBQUFOLGNBQUEsR0FBR0UsWUFBWSxDQUFDLENBQUMsQ0FBQyxjQUFBRixjQUFBLHVCQUFmQSxjQUFBLENBQWlCTyxVQUFVO1VBQzdDLElBQU1DLFNBQVMsSUFBQVAsY0FBQSxHQUFHSSxZQUFZLENBQUMsQ0FBQyxDQUFDLGNBQUFKLGNBQUEsdUJBQWZBLGNBQUEsQ0FBaUJNLFVBQVU7O1VBRTdDO1VBQ0EsSUFBSSxDQUFDQyxTQUFTLEVBQUU7WUFDZCxJQUFNblEsS0FBSyxHQUFHb1AsTUFBSSxDQUFDaE8sRUFBRSxDQUFDcEIsS0FBSztZQUMzQm9QLE1BQUksQ0FBQ2hPLEVBQUUsQ0FBQzhPLFVBQVUsQ0FBQ0UsWUFBWSxDQUFDWixRQUFRLEVBQUVKLE1BQUksQ0FBQ2hPLEVBQUUsQ0FBQztZQUNsRGdPLE1BQUksQ0FBQ2hPLEVBQUUsR0FBR29PLFFBQVE7WUFDbEJKLE1BQUksQ0FBQ2hPLEVBQUUsQ0FBQ3BCLEtBQUssR0FBR0EsS0FBSztZQUNyQjBLLGdCQUFnQixDQUFDOEUsUUFBUSxDQUFDO1lBQzFCO1VBQ0Y7O1VBRUE7VUFDQSxJQUFJLENBQUNTLFNBQVMsRUFBRTtZQUNkRSxTQUFTLENBQUNaLFNBQVMsR0FBRyxFQUFFO1lBQ3hCO1VBQ0Y7O1VBRUE7VUFDQSxJQUFJWSxTQUFTLENBQUNaLFNBQVMsS0FBS1UsU0FBUyxDQUFDVixTQUFTLEVBQUU7WUFDL0NZLFNBQVMsQ0FBQ1osU0FBUyxHQUFHVSxTQUFTLENBQUNWLFNBQVM7WUFFekMsSUFBTWMsb0JBQW9CLEdBQUdGLFNBQVMsQ0FBQ3BMLGFBQWEsMkJBQUFqQyxNQUFBLENBQTBCMkksU0FBUyxRQUFJLENBQUM7WUFFNUYsSUFBSTRFLG9CQUFvQixFQUFFO2NBQ3hCeEosZUFBZSxDQUFDd0osb0JBQW9CLENBQUM7WUFDdkM7WUFDQTNGLGdCQUFnQixDQUFDeUYsU0FBUyxDQUFDO1VBQzdCO1VBRUFkLElBQUksQ0FBQ2lCLE1BQU0sQ0FBQyxDQUFDO1FBQ2YsQ0FBQyxDQUFDO01BQUE7SUFDSjtJQUlBLE9BQU8zUSxHQUFHQSxDQUFBLEVBQXdCO01BQUEsSUFBdEI0USxJQUFJLEdBQUF0SyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBR3JHLFFBQVEsQ0FBQ3dHLElBQUk7TUFFOUIsSUFBTW9LLE1BQU0sR0FBR0QsSUFBSSxDQUFDMVEsZ0JBQWdCLENBQUMscUNBQXFDLENBQUM7TUFFM0UyUSxNQUFNLENBQUMxUSxPQUFPLENBQUNDLENBQUMsSUFBSTtRQUNsQixJQUFNd0IsSUFBSSxHQUFHLElBQUl5SixJQUFJLENBQUNqTCxDQUFDLENBQUM7UUFDeEJ3QixJQUFJLENBQUNwQixJQUFJLENBQUMsQ0FBQztNQUNiLENBQUMsQ0FBQztJQUNKO0VBQ0Y7RUFFQVAsUUFBUSxDQUFDUSxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRSxNQUFNO0lBQ2xENEssSUFBSSxDQUFDckwsR0FBRyxDQUFDLENBQUM7RUFDWixDQUFDLENBQUM7RUFFRlcsTUFBTSxDQUFDQyxXQUFXLEdBQUdELE1BQU0sQ0FBQ0MsV0FBVyxJQUFJLENBQUMsQ0FBQztFQUM3Q0QsTUFBTSxDQUFDQyxXQUFXLENBQUN5SyxJQUFJLEdBQUdBLElBQUk7QUFHaEMsQ0FBQyxFQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7OztBQzlTRixhQUFVO0VBRVQsSUFBTXlGLFFBQVEsR0FBR25RLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDQyxJQUFJLENBQUNpUSxRQUFRO0VBQ2pELElBQU1wUSxjQUFjLEdBQUdDLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDQyxJQUFJLENBQUNILGNBQWM7RUFDN0QsSUFBTXFRLGNBQWMsR0FBR3BRLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDQyxJQUFJLENBQUNrUSxjQUFjOztFQUcvRDtBQUNBO0FBQ0E7QUFDQTs7RUFFQSxNQUFNQyxjQUFjLENBQUM7SUFFbkJ4UCxXQUFXQSxDQUFFc0ssU0FBUyxFQUFFa0IsR0FBRyxFQUFFO01BQzNCLElBQUksQ0FBQ2xCLFNBQVMsR0FBR0EsU0FBUztNQUMxQixJQUFJLENBQUNrQixHQUFHLEdBQUdBLEdBQUc7SUFDaEI7SUFFQSxJQUFJRixPQUFPQSxDQUFBLEVBQUk7TUFDYixJQUFNRixLQUFLLEdBQUcsSUFBSUQsZUFBZSxDQUFDaE0sTUFBTSxDQUFDUyxRQUFRLENBQUNFLE1BQU0sQ0FBQyxDQUFDdUwsR0FBRyxDQUFDLFNBQVMsQ0FBQztNQUN4RSxPQUFPRCxLQUFLLEdBQUczSyxJQUFJLENBQUNDLEtBQUssQ0FBQ3hCLGNBQWMsQ0FBQ2tNLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZEO0lBRUEsSUFBSUssS0FBS0EsQ0FBQSxFQUFJO01BQ1gsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBQyxJQUFJLENBQUNFLEdBQUcsQ0FBQztJQUMvQjtJQUVBVCxNQUFNQSxDQUFFMEUsTUFBTSxFQUFFO01BRWQsSUFBTXZMLEdBQUcsR0FBRyxJQUFJd0wsR0FBRyxDQUFDdlEsTUFBTSxDQUFDUyxRQUFRLENBQUM7TUFFcEMsSUFBTTtRQUFFZ0IsSUFBSTtRQUFFa0Q7TUFBSyxDQUFDLEdBQUdJLEdBQUc7TUFDMUJBLEdBQUcsQ0FBQ0osSUFBSSxHQUFHLEVBQUU7TUFFYixJQUFNNkwsTUFBTSxHQUFHSixjQUFjLENBQUM5TyxJQUFJLENBQUMyTSxTQUFTLENBQUF3QyxhQUFBLENBQUFBLGFBQUEsS0FBSyxJQUFJLENBQUN0RSxPQUFPLEdBQUttRSxNQUFNLENBQUUsQ0FBQyxDQUFDO01BQzVFdkwsR0FBRyxDQUFDMkwsWUFBWSxDQUFDQyxHQUFHLENBQUMsU0FBUyxFQUFFSCxNQUFNLENBQUM7TUFFdkMsSUFBSS9PLElBQUksS0FBS3NELEdBQUcsQ0FBQ3RELElBQUksRUFBRTtRQUNyQnNELEdBQUcsQ0FBQ0osSUFBSSxHQUFHQSxJQUFJO1FBQ2YzRSxNQUFNLENBQUNNLE9BQU8sQ0FBQ3NRLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUU3TCxHQUFHLENBQUM7UUFDckMvRSxNQUFNLENBQUN1RSxhQUFhLENBQUMsSUFBSXNNLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztNQUNyRDtJQUNGO0VBQ0Y7O0VBRUE7QUFDQTtBQUNBOztFQUVBLE1BQU1DLGtCQUFrQixTQUFTVCxjQUFjLENBQUM7SUFDOUN4UCxXQUFXQSxDQUFDc0ssU0FBUyxFQUFFNEYsT0FBTyxFQUFFQyxLQUFLLEVBQUU7TUFDckMsSUFBTTNFLEdBQUcsTUFBQTdKLE1BQUEsQ0FBTTJJLFNBQVMsVUFBTztNQUMvQixLQUFLLENBQUNBLFNBQVMsRUFBRWtCLEdBQUcsQ0FBQztNQUNyQixJQUFJLENBQUMyRSxLQUFLLEdBQUdBLEtBQUs7TUFDbEIsSUFBSSxDQUFDRCxPQUFPLEdBQUdBLE9BQU87SUFDeEI7SUFFQSxJQUFJRSxXQUFXQSxDQUFBLEVBQUk7TUFDakIsT0FBTyxJQUFJLENBQUMzRSxLQUFLLEdBQUc0RSxNQUFNLENBQUMsSUFBSSxDQUFDNUUsS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUM1QztJQUVBLElBQUk2RSxPQUFPQSxDQUFBLEVBQUk7TUFDYixPQUFPckssSUFBSSxDQUFDc0ssSUFBSSxDQUFDLElBQUksQ0FBQ0osS0FBSyxHQUFHLElBQUksQ0FBQ0QsT0FBTyxDQUFDO0lBQzdDO0lBRUFNLE9BQU9BLENBQUN4RSxJQUFJLEVBQUU7TUFFWixJQUFJQSxJQUFJLEdBQUcsQ0FBQyxFQUFFO1FBQ1osSUFBSSxDQUFDakIsTUFBTSxDQUFDO1VBQUUsQ0FBQyxJQUFJLENBQUNTLEdBQUcsR0FBRztRQUFFLENBQUMsQ0FBQztRQUM5QjtNQUNGO01BRUEsSUFBSVEsSUFBSSxHQUFHLElBQUksQ0FBQ3NFLE9BQU8sRUFBRTtRQUN2QixJQUFJLENBQUN2RixNQUFNLENBQUM7VUFBRSxDQUFDLElBQUksQ0FBQ1MsR0FBRyxHQUFHLElBQUksQ0FBQzhFO1FBQVEsQ0FBRSxDQUFDO1FBQzFDO01BQ0Y7TUFFQSxJQUFJLENBQUN2RixNQUFNLENBQUM7UUFBRSxDQUFDLElBQUksQ0FBQ1MsR0FBRyxHQUFHUTtNQUFLLENBQUMsQ0FBQztJQUNuQztJQUVBeUUsUUFBUUEsQ0FBQ04sS0FBSyxFQUFFO01BQ2QsSUFBSSxDQUFDQSxLQUFLLEdBQUdBLEtBQUs7SUFDcEI7RUFDRjs7RUFFQTtBQUNBO0FBQ0E7O0VBRUEsTUFBTU8sMEJBQTBCLFNBQVNULGtCQUFrQixDQUFDO0lBQzFEalEsV0FBV0EsQ0FBQ3NLLFNBQVMsRUFBRTRGLE9BQU8sRUFBRUMsS0FBSyxFQUFFNUYsT0FBTyxFQUFFO01BQzlDLEtBQUssQ0FBQ0QsU0FBUyxFQUFFNEYsT0FBTyxFQUFFQyxLQUFLLENBQUM7TUFDaEMsSUFBSSxDQUFDNUYsT0FBTyxHQUFHQSxPQUFPO01BQ3RCLElBQUksQ0FBQ3ZMLElBQUksQ0FBQyxDQUFDO0lBQ2I7SUFFQUEsSUFBSUEsQ0FBQSxFQUFJO01BRU4sSUFBSSxDQUFDLElBQUksQ0FBQ3VMLE9BQU8sRUFBRTtRQUNqQjtNQUNGO01BRUEsSUFBTXRLLEVBQUUsR0FBR3hCLFFBQVEsQ0FBQ21GLGFBQWEsQ0FBQyxJQUFJLENBQUMyRyxPQUFPLENBQUN5QyxlQUFlLENBQUM7TUFHL0QsSUFBSS9NLEVBQUUsRUFBRTtRQUNOQSxFQUFFLENBQUNoQixnQkFBZ0IsQ0FBQyxJQUFJLENBQUNzTCxPQUFPLENBQUNvRyxPQUFPLEVBQUcvUixDQUFDLElBQUs7VUFDL0NBLENBQUMsQ0FBQzhELGNBQWMsQ0FBQyxDQUFDO1VBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUM2SCxPQUFPLENBQUNxRyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQztNQUNKO0lBQ0Y7SUFFQUMsUUFBUUEsQ0FBQSxFQUFJO01BQ1YsSUFBSSxDQUFDTCxPQUFPLENBQUMsSUFBSSxDQUFDSixXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDO0lBRUFVLFFBQVFBLENBQUEsRUFBSTtNQUNWLElBQUksQ0FBQ04sT0FBTyxDQUFDLElBQUksQ0FBQ0osV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNwQztFQUVGOztFQUVBO0FBQ0E7QUFDQTs7RUFFQSxNQUFNVyxtQkFBbUIsU0FBU3ZCLGNBQWMsQ0FBQztJQUMvQ3hQLFdBQVdBLENBQUNzSyxTQUFTLEVBQUVDLE9BQU8sRUFBRTtNQUM5QixJQUFNaUIsR0FBRyxHQUFHakIsT0FBTyxDQUFDeUMsZUFBZSxDQUFDZ0UsVUFBVSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7TUFDdkQsS0FBSyxDQUFDMUcsU0FBUyxFQUFFa0IsR0FBRyxDQUFDO01BQ3JCLElBQUksQ0FBQ2xCLFNBQVMsR0FBR0EsU0FBUztNQUMxQixJQUFJLENBQUNDLE9BQU8sR0FBR0EsT0FBTztNQUN0QixJQUFJLENBQUMwRyxjQUFjLEdBQUczQixRQUFRLENBQUMsSUFBSSxDQUFDeFAsTUFBTSxDQUFDTSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDO01BQzNELElBQUksQ0FBQ3BCLElBQUksQ0FBQyxDQUFDO0lBQ2I7SUFFQUEsSUFBSUEsQ0FBQSxFQUFJO01BR04sSUFBSSxDQUFDLElBQUksQ0FBQ3VMLE9BQU8sRUFBRTtRQUNqQjtNQUNGO01BRUEsSUFBTXRLLEVBQUUsR0FBR3hCLFFBQVEsQ0FBQ21GLGFBQWEsQ0FBQyxJQUFJLENBQUMyRyxPQUFPLENBQUN5QyxlQUFlLENBQUM7TUFFL0QsSUFBSS9NLEVBQUUsRUFBRTtRQUNOQSxFQUFFLENBQUNoQixnQkFBZ0IsQ0FBQyxPQUFPLEVBQUdMLENBQUMsSUFBSztVQUNsQ0EsQ0FBQyxDQUFDOEQsY0FBYyxDQUFDLENBQUM7VUFDbEIsSUFBSSxDQUFDdU8sY0FBYyxDQUFDclMsQ0FBQyxDQUFDa0MsTUFBTSxDQUFDMkssS0FBSyxDQUFDO1FBQ3JDLENBQUMsQ0FBQztRQUVGeEwsRUFBRSxDQUFDaEIsZ0JBQWdCLENBQUMsU0FBUyxFQUFHTCxDQUFDLElBQUs7VUFDcEMsSUFBSUEsQ0FBQyxDQUFDNE0sR0FBRyxLQUFLLE9BQU8sRUFBRTtZQUNyQjVNLENBQUMsQ0FBQzhELGNBQWMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksQ0FBQzVDLE1BQU0sQ0FBQ2xCLENBQUMsQ0FBQ2tDLE1BQU0sQ0FBQzJLLEtBQUssQ0FBQztVQUM3QjtRQUNGLENBQUMsQ0FBQzs7UUFFRjtRQUNBLElBQUksSUFBSSxDQUFDQSxLQUFLLEtBQUt6RyxTQUFTLElBQUksSUFBSSxDQUFDdUYsT0FBTyxDQUFDdkQsY0FBYyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUN1RCxPQUFPLENBQUN2RCxjQUFjLEtBQUssRUFBRSxFQUFFO1VBQzFHLElBQUksQ0FBQ2xILE1BQU0sQ0FBQyxJQUFJLENBQUN5SyxPQUFPLENBQUN2RCxjQUFjLENBQUM7VUFDeEMvRyxFQUFFLENBQUN3TCxLQUFLLEdBQUcsSUFBSSxDQUFDbEIsT0FBTyxDQUFDdkQsY0FBYztVQUN0QztRQUNGO1FBRUEvRyxFQUFFLENBQUN3TCxLQUFLLEdBQUd5RixNQUFNLENBQUMsSUFBSSxDQUFDekYsS0FBSyxJQUFJLEVBQUUsQ0FBQztNQUVyQztJQUNGO0lBRUEzTCxNQUFNQSxDQUFFbEIsQ0FBQyxFQUFFO01BQ1QsSUFBSSxPQUFPQSxDQUFDLEtBQUssUUFBUSxJQUFJLE9BQU9BLENBQUMsS0FBSyxRQUFRLEVBQUU7TUFDcEQsSUFBSXVTLFlBQVksR0FBR3ZTLENBQUM7TUFDcEIsSUFBSSxJQUFJLENBQUMyTCxPQUFPLElBQUksSUFBSSxDQUFDQSxPQUFPLENBQUN6RCxTQUFTLEtBQUssS0FBSyxFQUFFO1FBQ3BEcUssWUFBWSxHQUFHQyxRQUFRLENBQUNGLE1BQU0sQ0FBQ0MsWUFBWSxDQUFDLENBQUM7UUFFN0MsSUFBSSxDQUFDRSxRQUFRLENBQUNGLFlBQVksQ0FBQyxFQUFFO1VBQzNCQSxZQUFZLEdBQUcsQ0FBQztRQUNsQjtNQUNGO01BQ0E7TUFDQSxJQUFNRyxhQUFhLE1BQUEzUCxNQUFBLENBQU0sSUFBSSxDQUFDMkksU0FBUyxVQUFPO01BQzlDLElBQUksQ0FBQ1MsTUFBTSxDQUFDO1FBQUUsQ0FBQyxJQUFJLENBQUNTLEdBQUcsR0FBRzJGLFlBQVk7UUFBRSxDQUFDRyxhQUFhLEdBQUc7TUFBRSxDQUFDLENBQUM7SUFDL0Q7RUFDRjtFQUVFblMsTUFBTSxDQUFDQyxXQUFXLEdBQUdELE1BQU0sQ0FBQ0MsV0FBVyxJQUFJLENBQUMsQ0FBQztFQUM3Q0QsTUFBTSxDQUFDQyxXQUFXLENBQUNzUiwwQkFBMEIsR0FBR0EsMEJBQTBCO0VBQzFFdlIsTUFBTSxDQUFDQyxXQUFXLENBQUMyUixtQkFBbUIsR0FBR0EsbUJBQW1CO0FBRTlELENBQUMsRUFBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNoTWU7QUFDQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDQWxCLGFBQVU7RUFFVCxJQUFNdEwsdUNBQXVDLEdBQUd0RyxNQUFNLENBQUNDLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDb0csdUNBQXVDO0VBRS9HLE1BQU1nRixRQUFRLENBQUM7SUFDYnpLLFdBQVdBLENBQUNzSyxTQUFTLEVBQUVDLE9BQU8sRUFBRTtNQUM5QixJQUFJLENBQUNELFNBQVMsR0FBR0EsU0FBUztNQUMxQixJQUFJLENBQUNDLE9BQU8sR0FBR0EsT0FBTztNQUN0QixJQUFJLENBQUNnSCxXQUFXLEdBQUcsRUFBRTtNQUNyQixJQUFJLENBQUNDLE1BQU0sR0FBRyxFQUFFO0lBQ2xCO0lBRU14UyxJQUFJQSxDQUFBLEVBQUk7TUFBQSxJQUFBK0ssS0FBQTtNQUFBLE9BQUFDLGlCQUFBO1FBQ1pELEtBQUksQ0FBQ29HLEtBQUssU0FBU3BHLEtBQUksQ0FBQzBILFFBQVEsQ0FBQzFILEtBQUksQ0FBQ1EsT0FBTyxDQUFDO1FBQzlDUixLQUFJLENBQUN3SCxXQUFXLEdBQUd4SCxLQUFJLENBQUMySCxjQUFjLENBQUMsQ0FBQztRQUN4QzNILEtBQUksQ0FBQ3lILE1BQU0sR0FBR3pILEtBQUksQ0FBQzRILFlBQVksQ0FBQyxDQUFDO01BQUE7SUFDbkM7SUFFQUQsY0FBY0EsQ0FBQSxFQUFJO01BQUEsSUFBQUUscUJBQUE7TUFDaEIsSUFBTUMsY0FBYyxHQUFHLEVBQUFELHFCQUFBLE9BQUksQ0FBQ3JILE9BQU8sQ0FBQzJCLFVBQVUsQ0FBQy9FLFFBQVEsY0FBQXlLLHFCQUFBLHVCQUFoQ0EscUJBQUEsQ0FBa0NFLDJCQUEyQixLQUFJLEVBQUU7TUFDMUYsT0FBT0QsY0FBYyxDQUFDMUgsR0FBRyxDQUFDdkwsQ0FBQyxJQUFJLElBQUlPLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDc1IsMEJBQTBCLENBQUMsSUFBSSxDQUFDcEcsU0FBUyxFQUFFLElBQUksQ0FBQ0MsT0FBTyxDQUFDMkIsVUFBVSxDQUFDRSxLQUFLLEVBQUUsSUFBSSxDQUFDK0QsS0FBSyxFQUFFdlIsQ0FBQyxDQUFDLENBQUM7SUFDako7O0lBRUE7SUFDQStTLFlBQVlBLENBQUEsRUFBSTtNQUVkLElBQUksQ0FBQyxJQUFJLENBQUNwSCxPQUFPLENBQUNlLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQ2YsT0FBTyxDQUFDZSxPQUFPLENBQUNpQixJQUFJLEVBQUU7UUFDdkQsT0FBTyxFQUFFO01BQ1g7TUFFQSxJQUFNd0YsdUJBQXVCLEdBQUcsSUFBSSxDQUFDeEgsT0FBTyxDQUFDZSxPQUFPLENBQUNpQixJQUFJLENBQUNwQyxHQUFHLENBQUM2SCxHQUFHLElBQUk7UUFDbkUsT0FBT0EsR0FBRyxDQUFDdkYsR0FBRyxDQUFDdEMsR0FBRyxDQUFDOEgsRUFBRSxJQUFJekksTUFBTSxDQUFDQyxNQUFNLENBQUN3SSxFQUFFLENBQUMsQ0FBQzlILEdBQUcsQ0FBQ3ZMLENBQUM7VUFBQSxJQUFBc1QsV0FBQTtVQUFBLFFBQUFBLFdBQUEsR0FBSXRULENBQUMsQ0FBQ3VJLFFBQVEsY0FBQStLLFdBQUEsdUJBQVZBLFdBQUEsQ0FBWW5GLHNCQUFzQjtRQUFBLEVBQUMsQ0FBQztNQUMxRixDQUFDLENBQUMsQ0FBQ29GLElBQUksQ0FBQ0MsUUFBUSxDQUFDO01BRWpCLElBQU1DLGlDQUFpQyxHQUFHTix1QkFBdUIsQ0FBQ25GLE1BQU0sQ0FBQ2hPLENBQUMsSUFBSUEsQ0FBQyxDQUFDb08sZUFBZSxLQUFLcE8sQ0FBQyxDQUFDa0ksU0FBUyxLQUFLLE1BQU0sSUFBSWxJLENBQUMsQ0FBQ2tJLFNBQVMsS0FBSyxLQUFLLENBQUMsQ0FBQztNQUNySixPQUFPLENBQ0wsR0FBR3VMLGlDQUFpQyxDQUFDbEksR0FBRyxDQUFDdkwsQ0FBQyxJQUFJLElBQUlPLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDMlIsbUJBQW1CLENBQUMsSUFBSSxDQUFDekcsU0FBUyxFQUFFMUwsQ0FBQyxDQUFDLENBQUMsQ0FDN0c7SUFDSDtJQUVNbU0sTUFBTUEsQ0FBRVIsT0FBTyxFQUFFO01BQUEsSUFBQVMsTUFBQTtNQUFBLE9BQUFoQixpQkFBQTtRQUNyQmdCLE1BQUksQ0FBQ1QsT0FBTyxHQUFHQSxPQUFPO1FBQ3RCUyxNQUFJLENBQUNtRixLQUFLLFNBQVNuRixNQUFJLENBQUN5RyxRQUFRLENBQUMsQ0FBQztRQUNsQ3pHLE1BQUksQ0FBQ3VHLFdBQVcsQ0FBQzVTLE9BQU8sQ0FBQ0MsQ0FBQyxJQUFJQSxDQUFDLENBQUM2UixRQUFRLENBQUN6RixNQUFJLENBQUNtRixLQUFLLENBQUMsQ0FBQztNQUFBO0lBQ3ZEOztJQUVBO0lBQ01zQixRQUFRQSxDQUFBLEVBQUk7TUFBQSxJQUFBdkUsTUFBQTtNQUFBLE9BQUFsRCxpQkFBQTtRQUNoQixJQUFNc0ksY0FBYyxHQUFHN1IsSUFBSSxDQUFDQyxLQUFLLENBQUNELElBQUksQ0FBQzJNLFNBQVMsQ0FBQ0YsTUFBSSxDQUFDM0MsT0FBTyxDQUFDLENBQUM7UUFFL0QrSCxjQUFjLENBQUNoSCxPQUFPLEdBQUc3Rix1Q0FBdUMsQ0FBQzZNLGNBQWMsQ0FBQ2hILE9BQU8sRUFBRW5NLE1BQU0sQ0FBQ29PLE9BQU8sQ0FBQztRQUV4RyxJQUFNSSxRQUFRLFNBQVMsT0FBT0MsS0FBSyxDQUFDLHVDQUF1QyxFQUFFO1VBQzNFQyxPQUFPLEVBQUU7WUFBRSxjQUFjLEVBQUU7VUFBaUMsQ0FBQztVQUM3REMsV0FBVyxFQUFFLFNBQVM7VUFDdEJDLE1BQU0sRUFBRSxNQUFNO1VBQ2Q5SSxJQUFJLEVBQUV4RSxJQUFJLENBQUMyTSxTQUFTLENBQUF3QyxhQUFBLENBQUFBLGFBQUEsS0FBSzBDLGNBQWM7WUFBRUMsTUFBTSxFQUFFO1VBQU8sRUFBQztRQUMzRCxDQUFDLENBQUMsRUFBRXZFLElBQUksQ0FBQyxDQUFDO1FBRVYsT0FBT0wsUUFBUSxDQUFDd0MsS0FBSztNQUFBO0lBQ3ZCO0VBRUY7RUFHQWhSLE1BQU0sQ0FBQ0MsV0FBVyxHQUFHRCxNQUFNLENBQUNDLFdBQVcsSUFBSSxDQUFDLENBQUM7RUFDN0NELE1BQU0sQ0FBQ0MsV0FBVyxDQUFDcUwsUUFBUSxHQUFHQSxRQUFRO0FBRXhDLENBQUMsRUFBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7QUNwRUgsQ0FBQyxZQUFXO0VBQ1YsWUFBWTs7RUFFWixJQUFNdkwsY0FBYyxHQUFHQyxNQUFNLENBQUNDLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDSCxjQUFjO0VBRTdELElBQU1zVCxRQUFRLEdBQUdyVCxNQUFNLENBQUNTLFFBQVEsQ0FBQzZTLE1BQU0sR0FBRyxtQkFBbUI7RUFDN0Q7O0VBRUEsSUFBTUMsYUFBYSxHQUFHRixRQUFRLEdBQUcsUUFBUTtFQUN6QyxJQUFNRyxhQUFhLEdBQUdILFFBQVEsR0FBRyxZQUFZO0VBQzdDLElBQU1JLHlCQUF5QixHQUFHLG1CQUFtQjs7RUFFckQ7RUFDQSxJQUFNQyxrQkFBa0IsR0FBRyx1REFBdUQ7RUFDbEYsSUFBTUMscUJBQXFCLEdBQUcsZ0NBQWdDO0VBQzlELElBQU1DLGtCQUFrQiwyRUFBQXBSLE1BQUEsQ0FBMkVtUixxQkFBcUIsQ0FBRTtFQUMxSCxJQUFNRSwyQkFBMkIsR0FBRyxvQkFBb0I7RUFFeEQsSUFBTUMsS0FBSyxHQUFHLEVBQUU7RUFDaEIsSUFBTUMsZUFBZSxHQUFHelUsUUFBUSxDQUFDMFUsSUFBSSxDQUFDelUsZ0JBQWdCLENBQUMsc0JBQXNCLENBQUM7RUFFOUVTLE1BQU0sQ0FBQzJULHFCQUFxQixDQUFDLEdBQUcsTUFBTTtJQUNwQyxJQUFJLENBQUMzVCxNQUFNLENBQUNpVSxZQUFZLElBQUlILEtBQUssQ0FBQ2xPLE1BQU0sS0FBSyxDQUFDLEVBQUU7SUFDaERrTyxLQUFLLENBQUN0VSxPQUFPLENBQUMwVSxJQUFJLElBQUk7TUFDcEJBLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUMsQ0FBQztJQUN6QixDQUFDLENBQUM7RUFDSixDQUFDO0VBRUQsU0FBU0MsYUFBYUEsQ0FBQ0MsUUFBUSxFQUFFO0lBQy9CLElBQU07TUFBRUM7SUFBUyxDQUFDLEdBQUdELFFBQVE7SUFFN0IsSUFBTUUsaUJBQWlCLEdBQUcvRSxLQUFLLENBQUNDLElBQUksQ0FBQzZFLFFBQVEsQ0FBQyxDQUMzQ0UsTUFBTSxDQUFDLENBQUNDLEdBQUcsRUFBRWpPLE9BQU8sS0FBSztNQUN4QixJQUFJLENBQUNBLE9BQU8sQ0FBQ2tPLElBQUksSUFBSWxPLE9BQU8sQ0FBQ2tPLElBQUksS0FBSyxhQUFhLEVBQUUsT0FBT0QsR0FBRztNQUUvRCxJQUFNO1FBQUVDLElBQUk7UUFBRXhTLElBQUk7UUFBRXlTLE9BQU87UUFBRXJJO01BQU0sQ0FBQyxHQUFHOUYsT0FBTztNQUM5QztNQUNBLElBQUl0RSxJQUFJLEtBQUssWUFBWSxFQUFFO1FBQ3pCLE9BQU8sQ0FBQyxHQUFHdVMsR0FBRyxFQUFFO1VBQUVDLElBQUk7VUFBRXBJLEtBQUs7VUFBRXBLLElBQUksRUFBRTtRQUFPLENBQUMsQ0FBQztNQUNoRDtNQUVBLElBQUlBLElBQUksS0FBSyxVQUFVLElBQUlBLElBQUksS0FBSyxPQUFPLEVBQUU7UUFFM0M7UUFDQSxJQUFNMFMsUUFBUSxHQUFHcE8sT0FBTyxDQUFDcEQsT0FBTyxDQUFDLFVBQVUsQ0FBQztRQUU1QyxJQUFJLENBQUN3UixRQUFRLEVBQUUsT0FBT0gsR0FBRztRQUV6QixJQUFNSSxNQUFNLEdBQUdELFFBQVEsQ0FBQ25RLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFFL0MsSUFBTXFRLGlCQUFpQixHQUFHRCxNQUFNLEdBQUdBLE1BQU0sQ0FBQ0UsV0FBVyxHQUFHSCxRQUFRLENBQUM5UixFQUFFOztRQUVuRTtRQUNBLElBQUlaLElBQUksS0FBSyxVQUFVLEVBQUU7VUFFdkIsSUFBSSxDQUFDeVMsT0FBTyxFQUFFLE9BQU9GLEdBQUc7VUFDeEIsSUFBTU8sS0FBSyxHQUFHUCxHQUFHLENBQUMvSCxJQUFJLENBQUNqTixDQUFDLElBQUlBLENBQUMsQ0FBQ3lDLElBQUksS0FBSyxNQUFNLElBQUl6QyxDQUFDLENBQUN3VixNQUFNLEtBQUtQLElBQUksQ0FBQztVQUVuRSxJQUFJTSxLQUFLLEVBQUU7WUFDVEEsS0FBSyxDQUFDMUksS0FBSyxDQUFDZixJQUFJLENBQUNlLEtBQUssQ0FBQztZQUN2QixPQUFPbUksR0FBRztVQUNaLENBQUMsTUFBTTtZQUNMLE9BQU8sQ0FBQyxHQUFHQSxHQUFHLEVBQUU7Y0FBRUMsSUFBSSxFQUFFSSxpQkFBaUI7Y0FBRXhJLEtBQUssRUFBRSxDQUFDQSxLQUFLLENBQUM7Y0FBRXBLLElBQUksRUFBRSxNQUFNO2NBQUUrUyxNQUFNLEVBQUVQO1lBQUssQ0FBQyxDQUFDO1VBQzFGO1FBRUY7UUFFQSxJQUFJeFMsSUFBSSxLQUFLLE9BQU8sRUFBRTtVQUNwQixJQUFJLENBQUN5UyxPQUFPLEVBQUUsT0FBT0YsR0FBRztVQUN4QixPQUFPLENBQUMsR0FBR0EsR0FBRyxFQUFFO1lBQUVDLElBQUksRUFBRUksaUJBQWlCO1lBQUV4SSxLQUFLO1lBQUVwSyxJQUFJLEVBQUU7VUFBTyxDQUFDLENBQUM7UUFDbkU7TUFDRjtNQUVBLE9BQU8sQ0FBQyxHQUFHdVMsR0FBRyxFQUFFO1FBQUVDLElBQUk7UUFBRXBJLEtBQUs7UUFBRXBLO01BQUssQ0FBQyxDQUFDO0lBQ3hDLENBQUMsRUFBRSxFQUFFLENBQUM7SUFFTixJQUFNNkYsTUFBTSxHQUFHd00saUJBQWlCLENBQUN2SixHQUFHLENBQUNFLElBQUE7TUFBQSxJQUFDO1VBQUUrSjtRQUFnQixDQUFDLEdBQUEvSixJQUFBO1FBQU5nSyxJQUFJLEdBQUFDLHdCQUFBLENBQUFqSyxJQUFBLEVBQUFrSyxTQUFBO01BQUEsT0FBT0YsSUFBSTtJQUFBLEVBQUM7SUFFbkUsT0FBT25OLE1BQU07RUFDakI7RUFFQSxTQUFTc04sU0FBU0EsQ0FBRXZTLEVBQUUsRUFBRTtJQUN0QixPQUFPQSxFQUFFLENBQUNnQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzFCO0VBRUEsU0FBU3dRLGdCQUFnQkEsQ0FBQSxFQUFJO0lBQzNCLElBQU0vSyxNQUFNLEdBQUdqTCxRQUFRLENBQUMwUCxhQUFhLENBQUMsUUFBUSxDQUFDO0lBQy9DekUsTUFBTSxDQUFDZ0wsR0FBRyxHQUFHM0Isa0JBQWtCO0lBQy9CckosTUFBTSxDQUFDaUwsS0FBSyxHQUFHLElBQUk7SUFDbkJsVyxRQUFRLENBQUMwVSxJQUFJLENBQUN5QixXQUFXLENBQUNsTCxNQUFNLENBQUM7RUFDbkM7RUFHQSxTQUFTbUwsZ0JBQWdCQSxDQUFBLEVBQUc7SUFDMUIsT0FBTzNCLGVBQWUsQ0FBQ25PLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHbU8sZUFBZSxDQUFDLENBQUM0QixJQUFJLENBQUNDLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxPQUFPLEtBQUssTUFBTSxDQUFDO0VBQy9GO0VBRUEsTUFBTUMsSUFBSSxDQUFDO0lBRVRqVixXQUFXQSxDQUFFQyxFQUFFLEVBQUU7TUFDZixJQUFJLENBQUNBLEVBQUUsR0FBR0EsRUFBRTtNQUNaLElBQUksQ0FBQ21GLE1BQU0sR0FBR25GLEVBQUUsQ0FBQzJELGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQztNQUNqRCxJQUFJLENBQUNzUixVQUFVLEdBQUdqVixFQUFFLENBQUNNLE9BQU8sQ0FBQzRVLGNBQWM7TUFDM0MsSUFBSSxDQUFDQyxXQUFXLEdBQUduVixFQUFFLENBQUNNLE9BQU8sQ0FBQzhVLGVBQWU7TUFDN0MsSUFBSSxDQUFDQyxPQUFPLEdBQUdyVixFQUFFLENBQUNNLE9BQU8sQ0FBQ2dWLFdBQVc7TUFDckMsSUFBSSxDQUFDQyxjQUFjLEdBQUd2VixFQUFFLENBQUN2QixnQkFBZ0IsQ0FBQyxZQUFZLENBQUM7TUFDdkQsSUFBSSxDQUFDOFMsTUFBTSxHQUFHdlIsRUFBRSxDQUFDdkIsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO01BQzFDLElBQUksQ0FBQzRCLFlBQVksR0FBRyxJQUFJLENBQUM4RSxNQUFNLElBQUksSUFBSSxDQUFDQSxNQUFNLENBQUM3RSxPQUFPLENBQUNELFlBQVk7TUFDbkUsSUFBSSxDQUFDRSxXQUFXLEdBQUcsSUFBSSxDQUFDNEUsTUFBTSxJQUFJLElBQUksQ0FBQ0EsTUFBTSxDQUFDN0UsT0FBTyxDQUFDQyxXQUFXLElBQUlDLElBQUksQ0FBQ0MsS0FBSyxDQUFDeEIsY0FBYyxDQUFDLElBQUksQ0FBQ2tHLE1BQU0sQ0FBQzdFLE9BQU8sQ0FBQ0MsV0FBVyxDQUFDLENBQUM7TUFDaEksSUFBSSxDQUFDaVYsb0JBQW9CLEdBQUcsSUFBSTtNQUNoQyxJQUFJLENBQUNDLHVCQUF1QixHQUFHMUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDL1EsRUFBRTtNQUNwRSxJQUFJLENBQUMwVCx1QkFBdUIsR0FBRyxJQUFJO0lBQ3JDO0lBRUEsSUFBSUMsaUJBQWlCQSxDQUFBLEVBQUk7TUFDdkIsT0FBTyxDQUFDLElBQUksQ0FBQ1YsVUFBVSxLQUFLLGtCQUFrQixJQUFJLElBQUksQ0FBQ0EsVUFBVSxLQUFLLGtCQUFrQixLQUFLLElBQUksQ0FBQ0UsV0FBVztJQUMvRztJQUVBLElBQUlTLGdCQUFnQkEsQ0FBQSxFQUFJO01BQ3RCLE9BQU8sSUFBSSxDQUFDWCxVQUFVLEtBQUssY0FBYyxJQUFJLElBQUksQ0FBQ0ksT0FBTztJQUMzRDtJQUVBLElBQUkzUixJQUFJQSxDQUFBLEVBQUk7TUFDVixJQUFNZ0QsS0FBSyxHQUFHLElBQUksQ0FBQzFHLEVBQUUsQ0FBQ3NDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztNQUNyRCxPQUFPb0UsS0FBSyxJQUFJQSxLQUFLLENBQUMvQyxhQUFhLENBQUMsNEJBQTRCLENBQUM7SUFDbkU7SUFFQSxJQUFJYyxLQUFLQSxDQUFBLEVBQUk7TUFDWCxPQUFPLElBQUksQ0FBQ3pFLEVBQUUsQ0FBQ3NDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztJQUMvQztJQUlBLElBQUlOLEVBQUVBLENBQUEsRUFBSTtNQUNSLE9BQU91UyxTQUFTLENBQUMsSUFBSSxDQUFDdlUsRUFBRSxDQUFDZ0MsRUFBRSxDQUFDO0lBQzlCO0lBRUE2VCxLQUFLQSxDQUFBLEVBQUk7TUFDUCxJQUFJLENBQUM3VixFQUFFLENBQUM2VixLQUFLLENBQUMsQ0FBQztNQUNmLElBQU1DLFVBQVUsR0FBRyxJQUFJLENBQUM5VixFQUFFLENBQUN2QixnQkFBZ0IsQ0FBQyx3QkFBd0IsQ0FBQztNQUNyRXFYLFVBQVUsQ0FBQ3BYLE9BQU8sQ0FBQ3dHLENBQUMsSUFBSUEsQ0FBQyxDQUFDMk8sT0FBTyxHQUFHLEtBQUssQ0FBQztJQUM1QztJQUVBa0MsYUFBYUEsQ0FBQSxFQUFJO01BQ2YsSUFBSSxDQUFDRixLQUFLLENBQUMsQ0FBQztNQUVaLElBQUkzVyxNQUFNLENBQUMwQyxFQUFFLElBQUksSUFBSSxDQUFDdkIsWUFBWSxJQUFJLE9BQU93QixFQUFFLEtBQUssV0FBVyxFQUFFO1FBQy9EQSxFQUFFLENBQUMzQyxNQUFNLENBQUMwQyxFQUFFLENBQUNFLFFBQVEsQ0FBQ0MsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsRUFBRSxFQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMzQixZQUFZLENBQUM7TUFDM0U7TUFFQSxJQUFJbkIsTUFBTSxDQUFDK0MsSUFBSSxJQUFJLElBQUksQ0FBQzFCLFdBQVcsRUFBRTtRQUNuQ3JCLE1BQU0sQ0FBQytDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDMUIsV0FBVyxDQUFDMkIsV0FBVyxFQUFFO1VBQ2pELGdCQUFnQixFQUFFLElBQUksQ0FBQzNCLFdBQVcsQ0FBQzRCLGFBQWE7VUFDaEQsYUFBYSxFQUFFLElBQUksQ0FBQzVCLFdBQVcsQ0FBQzZCO1FBQ2xDLENBQUMsQ0FBQztNQUNKOztNQUVBOztNQUVBLElBQUksSUFBSSxDQUFDcUMsS0FBSyxFQUFFO1FBQ2R2RixNQUFNLENBQUNDLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDNFcsU0FBUyxDQUFDLElBQUksQ0FBQ3ZSLEtBQUssQ0FBQztNQUMvQzs7TUFFQTtNQUNBLElBQUksSUFBSSxDQUFDZixJQUFJLEVBQUU7UUFDYixJQUFNSCxLQUFLLEdBQUcsSUFBSUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDO1FBQ2xEaEYsUUFBUSxDQUFDaUYsYUFBYSxDQUFDRixLQUFLLENBQUM7UUFDN0I7UUFDQSxJQUFJLElBQUksQ0FBQ3ZELEVBQUUsQ0FBQ00sT0FBTyxDQUFDMlYsT0FBTyxFQUFFO1VBQzNCO1FBQ0Y7TUFDRjtNQUVBLElBQUksSUFBSSxDQUFDTixpQkFBaUIsRUFBRTtRQUMxQnpXLE1BQU0sQ0FBQ1MsUUFBUSxDQUFDdVcsTUFBTSxDQUFDLElBQUksQ0FBQ2YsV0FBVyxDQUFDO01BQzFDO01BRUEsSUFBSSxJQUFJLENBQUNTLGdCQUFnQixFQUFFO1FBRXpCLElBQU0sQ0FBQ08sT0FBTyxFQUFFQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUNmLE9BQU8sQ0FBQ3JSLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFFbkQsSUFBSW1TLE9BQU8sSUFBSUEsT0FBTyxLQUFLRSxrQkFBa0IsQ0FBQ25YLE1BQU0sQ0FBQ1MsUUFBUSxDQUFDQyxRQUFRLENBQUMsRUFBRTtVQUN2RVYsTUFBTSxDQUFDUyxRQUFRLENBQUN1VyxNQUFNLENBQUMsSUFBSSxDQUFDYixPQUFPLENBQUM7UUFDdEMsQ0FBQyxNQUFNO1VBQ0wsSUFBTXhVLE1BQU0sR0FBR3VWLFFBQVEsSUFBSTVYLFFBQVEsQ0FBQ21GLGFBQWEsQ0FBQyxHQUFHLEdBQUd5UyxRQUFRLENBQUM7VUFDakUsSUFBSXZWLE1BQU0sRUFBRTNCLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDQyxJQUFJLENBQUN3RSxTQUFTLENBQUMvQyxNQUFNLENBQUM7UUFDdkQ7TUFFRjtJQUVGO0lBRUF5VixhQUFhQSxDQUFFQyxRQUFRLEVBQUU7TUFDdkIsSUFBTUMsWUFBWSxHQUFHLElBQUksQ0FBQ3hXLEVBQUUsQ0FBQzJELGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQztNQUV4RSxJQUFJNlMsWUFBWSxJQUFJLENBQUNBLFlBQVksQ0FBQzNDLE9BQU8sRUFBRTtRQUN6QztNQUNGO01BRUEsSUFBTTRDLE9BQU8sR0FBR2pZLFFBQVEsQ0FBQzBQLGFBQWEsQ0FBQyxLQUFLLENBQUM7TUFDN0N1SSxPQUFPLENBQUN0SSxTQUFTLElBQUlvSSxRQUFRO01BQzdCL1gsUUFBUSxDQUFDd0csSUFBSSxDQUFDMlAsV0FBVyxDQUFDOEIsT0FBTyxDQUFDO01BQ2xDQSxPQUFPLENBQUM5UyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMrUyxNQUFNLENBQUMsQ0FBQztJQUN4QztJQUVBQywyQkFBMkJBLENBQUEsRUFBRztNQUM1QjtNQUNBLElBQU1DLGdCQUFnQixHQUFHcFksUUFBUSxDQUFDMFAsYUFBYSxDQUFDLEtBQUssQ0FBQztNQUN0RDBJLGdCQUFnQixDQUFDNVUsRUFBRSxHQUFHLElBQUksQ0FBQ3lULHVCQUF1QjtNQUNsRCxJQUFJLENBQUNDLHVCQUF1QixDQUFDZixXQUFXLENBQUNpQyxnQkFBZ0IsQ0FBQztJQUM1RDtJQUVBQyxrQkFBa0JBLENBQUEsRUFBRztNQUNuQixJQUFJLENBQUNuQix1QkFBdUIsQ0FBQ29CLFNBQVMsQ0FBQzVILE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQztNQUN2RSxJQUFJLENBQUM2SCx3QkFBd0IsQ0FBQyxDQUFDO0lBQ2pDO0lBRUFBLHdCQUF3QkEsQ0FBQSxFQUFHO01BQ3pCLElBQUksQ0FBQ3JCLHVCQUF1QixDQUFDc0IsbUJBQW1CLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQ0MseUJBQXlCLENBQUM5VyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUc7SUFFQThXLHlCQUF5QkEsQ0FBQ3RZLENBQUMsRUFBRTtNQUMzQixJQUFJQSxDQUFDLENBQUNrQyxNQUFNLEtBQUssSUFBSSxDQUFDNlUsdUJBQXVCLEVBQUU7UUFDN0MsSUFBSSxDQUFDbUIsa0JBQWtCLENBQUMsQ0FBQztNQUMzQjtJQUNGO0lBRUFLLGtCQUFrQkEsQ0FBQSxFQUFHO01BQ25CLElBQUksQ0FBQ3hCLHVCQUF1QixDQUFDb0IsU0FBUyxDQUFDSyxHQUFHLENBQUMsd0JBQXdCLENBQUM7TUFDcEUsSUFBSSxDQUFDekIsdUJBQXVCLENBQUMxVyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDaVkseUJBQXlCLENBQUM5VyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkc7SUFHQWtULGdCQUFnQkEsQ0FBQSxFQUFHO01BQ2pCLElBQUksQ0FBQ3NELDJCQUEyQixDQUFDLENBQUM7TUFDbEMsSUFBTVMsY0FBYyxHQUFHO1FBQ3JCQyxPQUFPLEVBQUV6RSxrQkFBa0I7UUFDM0IwRSxRQUFRLEVBQUUsSUFBSSxDQUFDQyxRQUFRLENBQUNwWCxJQUFJLENBQUMsSUFBSTtNQUNuQyxDQUFDO01BQ0QsSUFBSSxDQUFDcVYsb0JBQW9CLEdBQUd0VyxNQUFNLENBQUNpVSxZQUFZLENBQUN0SCxNQUFNLENBQUMsSUFBSSxDQUFDNEosdUJBQXVCLEVBQUUyQixjQUFjLENBQUM7SUFDdEc7SUFFTUcsUUFBUUEsQ0FBQSxFQUFnQjtNQUFBLElBQUFDLFVBQUEsR0FBQTNTLFNBQUE7UUFBQWlGLEtBQUE7TUFBQSxPQUFBQyxpQkFBQTtRQUFBLElBQWQwTixLQUFLLEdBQUFELFVBQUEsQ0FBQTFTLE1BQUEsUUFBQTBTLFVBQUEsUUFBQXpTLFNBQUEsR0FBQXlTLFVBQUEsTUFBRyxJQUFJO1FBQzFCMU4sS0FBSSxDQUFDK00sa0JBQWtCLENBQUMsQ0FBQzs7UUFFekI7UUFDQSxJQUFNN0ssSUFBSSxHQUFHc0gsYUFBYSxDQUFDeEosS0FBSSxDQUFDOUosRUFBRSxDQUFDO1FBRW5DLElBQU04QyxPQUFPLEdBQUdnSCxLQUFJLENBQUM5SixFQUFFLENBQUNzQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBRTFDLElBQU1vVixPQUFPLEdBQUc7VUFBRTFWLEVBQUUsRUFBRThILEtBQUksQ0FBQzlILEVBQUU7VUFBRWdLLElBQUk7VUFBRTlJLFFBQVEsRUFBRUosT0FBTyxJQUFJQSxPQUFPLENBQUN4QyxPQUFPLENBQUMyQyxNQUFNO1VBQUV3VTtRQUFNLENBQUM7O1FBRXpGO1FBQ0EsSUFBTUUsU0FBUyxHQUFHelksTUFBTSxDQUFDQyxXQUFXLENBQUN3WSxTQUFTO1FBQzlDLElBQU1DLElBQUksR0FBR0QsU0FBUyxDQUFDRSxRQUFRLENBQUMsQ0FBQztRQUNqQyxJQUFJRCxJQUFJLEVBQUU7VUFDUkYsT0FBTyxDQUFDSSxHQUFHLEdBQUdGLElBQUk7UUFDcEI7UUFFQSxJQUFJOU4sS0FBSSxDQUFDcEcsSUFBSSxFQUFFO1VBQ2IsSUFBTXFVLEtBQUssR0FBSTFTLFlBQVksQ0FBQzBTLEtBQUssSUFBSXZYLElBQUksQ0FBQ0MsS0FBSyxDQUFDNEUsWUFBWSxDQUFDMFMsS0FBSyxDQUFDLElBQUssQ0FBQyxDQUFDO1VBQzFFLElBQU1DLFFBQVEsR0FBR0QsS0FBSyxDQUFDak8sS0FBSSxDQUFDcEcsSUFBSSxDQUFDMUIsRUFBRSxDQUFDLElBQUksRUFBRTtVQUUxQzBWLE9BQU8sQ0FBQ00sUUFBUSxHQUFHQSxRQUFRLENBQUM5TixHQUFHLENBQUN2TCxDQUFDLElBQUk7WUFFbkMsSUFBSUEsQ0FBQyxDQUFDMEUsa0JBQWtCLEVBQUU7Y0FDeEIsT0FBTztnQkFDTDRVLE1BQU0sRUFBRSxZQUFZO2dCQUNwQjVVLGtCQUFrQixFQUFFMUUsQ0FBQyxDQUFDMEUsa0JBQWtCO2dCQUN4Q0YsYUFBYSxFQUFFeEUsQ0FBQyxDQUFDd0UsYUFBYTtnQkFDOUIrVSxLQUFLLEVBQUV2WixDQUFDLENBQUN3WjtjQUNYLENBQUM7WUFDSCxDQUFDLE1BQU07Y0FDTCxPQUFPO2dCQUNMRixNQUFNLEVBQUUsTUFBTTtnQkFDZGpXLEVBQUUsRUFBRXVTLFNBQVMsQ0FBQzVWLENBQUMsQ0FBQ3FELEVBQUUsQ0FBQztnQkFDbkJrVyxLQUFLLEVBQUV2WixDQUFDLENBQUN3WixlQUFlO2dCQUN4QmpWLFFBQVEsRUFBRXZFLENBQUMsQ0FBQ3VFO2NBQ2QsQ0FBQztZQUNIO1VBRUYsQ0FBQyxDQUFDO1VBRUYsSUFBSTRHLEtBQUksQ0FBQzlKLEVBQUUsQ0FBQ00sT0FBTyxDQUFDMlYsT0FBTyxLQUFLLFdBQVcsSUFBSW5NLEtBQUksQ0FBQzlKLEVBQUUsQ0FBQ00sT0FBTyxDQUFDMlYsT0FBTyxLQUFLLFFBQVEsRUFBRXlCLE9BQU8sQ0FBQ3pCLE9BQU8sR0FBRyxJQUFJO1FBQzdHO1FBRUEsSUFBTWhTLEdBQUcsR0FBRzZGLEtBQUksQ0FBQ3BHLElBQUksR0FBR2dQLGFBQWEsR0FBR0QsYUFBYTtRQUVyRCxJQUFJO1VBQ0YzSSxLQUFJLENBQUMzRSxNQUFNLENBQUMyUixTQUFTLENBQUNLLEdBQUcsQ0FBQyxTQUFTLENBQUM7VUFDcEMsSUFBTXpKLFFBQVEsU0FBU0MsS0FBSyxDQUFDMUosR0FBRyxFQUFFO1lBQ2hDNkosTUFBTSxFQUFFLE1BQU07WUFDZDlJLElBQUksRUFBRXhFLElBQUksQ0FBQzJNLFNBQVMsQ0FBQ3VLLE9BQU8sQ0FBQztZQUM3QjlKLE9BQU8sRUFBRTtjQUFDLGNBQWMsRUFBRTtZQUFnQztVQUM1RCxDQUFDLENBQUM7VUFFRixJQUFNd0ssWUFBWSxTQUFTMUssUUFBUSxDQUFDSyxJQUFJLENBQUMsQ0FBQztVQUUxQ2pFLEtBQUksQ0FBQzNFLE1BQU0sQ0FBQzJSLFNBQVMsQ0FBQzVILE1BQU0sQ0FBQyxTQUFTLENBQUM7VUFDdkMsSUFBSXhCLFFBQVEsQ0FBQzJLLEVBQUUsRUFBRTtZQUNmVixTQUFTLENBQUNXLEtBQUssQ0FBQyxDQUFDO1lBR2pCLElBQUlGLFlBQVksRUFBRTtjQUNoQixJQUFJdE8sS0FBSSxDQUFDOUosRUFBRSxDQUFDTSxPQUFPLENBQUMyVixPQUFPLEtBQUssUUFBUSxJQUFJbUMsWUFBWSxDQUFDRyxZQUFZLEVBQUU7Z0JBQ3JFLElBQU1DLElBQUksR0FBR2hhLFFBQVEsQ0FBQzBQLGFBQWEsQ0FBQyxHQUFHLENBQUM7Z0JBQ3hDc0ssSUFBSSxDQUFDN1gsSUFBSSxHQUFHeVgsWUFBWSxDQUFDRyxZQUFZO2dCQUNyQ0MsSUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQztnQkFDWkQsSUFBSSxDQUFDdEosTUFBTSxDQUFDLENBQUM7Y0FDZjtjQUNBLElBQUlwRixLQUFJLENBQUM5SixFQUFFLENBQUNNLE9BQU8sQ0FBQzJWLE9BQU8sS0FBSyxXQUFXLElBQUltQyxZQUFZLENBQUNNLElBQUksRUFBRTtnQkFDaEU1TyxLQUFJLENBQUN3TSxhQUFhLENBQUM4QixZQUFZLENBQUNNLElBQUksQ0FBQztjQUN2QztZQUNGO1lBRUE1TyxLQUFJLENBQUNpTSxhQUFhLENBQUMsQ0FBQztVQUN0QjtRQUNGLENBQUMsQ0FBQyxPQUFPcFgsQ0FBQyxFQUFFO1VBQ1YyRixPQUFPLENBQUNxVSxLQUFLLENBQUNoYSxDQUFDLENBQUM7VUFDaEJtTCxLQUFJLENBQUMzRSxNQUFNLENBQUMyUixTQUFTLENBQUM1SCxNQUFNLENBQUMsU0FBUyxDQUFDO1FBQ3pDO01BQUM7SUFDSDtJQUdBMEosUUFBUUEsQ0FBQSxFQUFJO01BRVYsSUFBTUMsTUFBTSxHQUFHLElBQUksQ0FBQzdZLEVBQUUsQ0FBQ3ZCLGdCQUFnQixDQUFDLHNDQUFzQyxDQUFDOztNQUUvRTtNQUNBb2EsTUFBTSxDQUFDbmEsT0FBTyxDQUFDb2EsQ0FBQyxJQUFJO1FBQ2xCO1FBQ0FBLENBQUMsQ0FBQ0MsT0FBTyxVQUFVO1FBRW5CLElBQU1DLElBQUksR0FBR0YsQ0FBQyxDQUFDeFksT0FBTyxDQUFDMFksSUFBSTtRQUMzQixJQUFNQyxNQUFNLEdBQUdELElBQUksQ0FBQ0UsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7O1FBRW5DO1FBQ0EsSUFBSUYsSUFBSSxDQUFDclUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJcVUsSUFBSSxDQUFDbFUsTUFBTSxLQUFLLENBQUMsRUFBRTtVQUMzQyxJQUFNcVUsV0FBVyxNQUFBelgsTUFBQSxDQUFNdVgsTUFBTSxxQkFBa0I7VUFDL0NILENBQUMsQ0FBQ3hZLE9BQU8sQ0FBQzBZLElBQUksR0FBR0csV0FBVztVQUM1QmphLE1BQU0sQ0FBQ2thLFNBQVMsQ0FBQztZQUFFSixJQUFJLEVBQUVHO1VBQVksQ0FBQyxDQUFDLENBQUNILElBQUksQ0FBQ0YsQ0FBQyxDQUFDO1VBQy9DO1FBQ0Y7UUFDQTVaLE1BQU0sQ0FBQ2thLFNBQVMsQ0FBQ0osSUFBSSxDQUFDLENBQUNBLElBQUksQ0FBQ0YsQ0FBQyxDQUFDO01BQ2hDLENBQUMsQ0FBQztJQUNKO0lBRUFPLFVBQVVBLENBQUEsRUFBSTtNQUNaLElBQU0vTyxPQUFPLEdBQUcsSUFBSSxDQUFDdEssRUFBRSxDQUFDdkIsZ0JBQWdCLENBQUMsZUFBZSxDQUFDO01BQ3pENkwsT0FBTyxDQUFDNUwsT0FBTyxDQUFDNGEsQ0FBQyxJQUFJO1FBQ25CLElBQUlBLENBQUMsQ0FBQ3JGLFdBQVcsS0FBS3FGLENBQUMsQ0FBQ0MsS0FBSyxFQUFFRCxDQUFDLENBQUNyRixXQUFXLEdBQUdxRixDQUFDLENBQUNDLEtBQUs7TUFDeEQsQ0FBQyxDQUFDO0lBQ0o7SUFFQUMsMkJBQTJCQSxDQUFBLEVBQUc7TUFDNUIsSUFBTTlELHVCQUF1QixHQUFHbFgsUUFBUSxDQUFDMFAsYUFBYSxDQUFDLEtBQUssQ0FBQztNQUM3RHdILHVCQUF1QixDQUFDb0IsU0FBUyxDQUFDSyxHQUFHLENBQUMsMkJBQTJCLENBQUM7TUFDbEUsSUFBSSxDQUFDekIsdUJBQXVCLEdBQUdBLHVCQUF1QjtNQUN0RCxJQUFJLENBQUMxVixFQUFFLENBQUMyVSxXQUFXLENBQUNlLHVCQUF1QixDQUFDO0lBQzlDOztJQUVBO0FBQ0o7QUFDQTtJQUNJK0QsNEJBQTRCQSxDQUFBLEVBQUc7TUFDN0IsSUFBSSxDQUFDbEUsY0FBYyxDQUFDN1csT0FBTyxDQUFDb1YsUUFBUSxJQUFJO1FBQ3RDQSxRQUFRLENBQUM5VSxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsTUFBTSxJQUFJLENBQUMwYSxvQkFBb0IsQ0FBQzVGLFFBQVEsQ0FBQyxDQUFDO01BQ2hGLENBQUMsQ0FBQztJQUNKO0lBRUE0RixvQkFBb0JBLENBQUM1RixRQUFRLEVBQUU7TUFDN0IsSUFBTTZGLFNBQVMsR0FBRzdGLFFBQVEsQ0FBQ25RLGFBQWEsQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLElBQUksQ0FBQ2lXLGVBQWUsQ0FBQ2pILHlCQUF5QixDQUFDO01BQzFILElBQUksQ0FBQ21CLFFBQVEsQ0FBQytGLFFBQVEsQ0FBQ0YsU0FBUyxDQUFDLEVBQUU3RixRQUFRLENBQUNhLFdBQVcsQ0FBQ2dGLFNBQVMsQ0FBQztNQUNsRUEsU0FBUyxDQUFDL2EsS0FBSyxDQUFDb00sT0FBTyxHQUFHLElBQUksQ0FBQzhPLHVCQUF1QixDQUFDaEcsUUFBUSxDQUFDLEdBQUcsTUFBTSxHQUFHLE9BQU87SUFDckY7SUFFQWdHLHVCQUF1QkEsQ0FBRTlaLEVBQUUsRUFBRTtNQUMzQixJQUFJLENBQUNBLEVBQUUsRUFBRSxPQUFPLEtBQUs7TUFFckIsSUFBTThVLEdBQUcsR0FBRzlVLEVBQUUsQ0FBQ2UsT0FBTyxDQUFDQyxXQUFXLENBQUMsQ0FBQztNQUNwQyxJQUFJOFQsR0FBRyxLQUFLLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQzlVLEVBQUUsQ0FBQ3dMLEtBQUs7TUFFdEMsSUFBSXNKLEdBQUcsS0FBSyxVQUFVLEVBQUUsT0FBT3BHLEtBQUssQ0FBQ0MsSUFBSSxDQUFDM08sRUFBRSxDQUFDdkIsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQ29XLElBQUksQ0FBQ2tGLEtBQUssSUFBSUEsS0FBSyxDQUFDbEcsT0FBTyxDQUFDO01BRXBHLElBQUlpQixHQUFHLEtBQUssUUFBUSxFQUFFO1FBQ3BCLElBQU1rRixNQUFNLEdBQUdoYSxFQUFFLENBQUNzSyxPQUFPLENBQUN0SyxFQUFFLENBQUNpYSxhQUFhLENBQUM7UUFDM0MzVixPQUFPLENBQUNDLEdBQUcsQ0FBQyxhQUFhLEVBQUV5VixNQUFNLENBQUN4TyxLQUFLLENBQUM7UUFDeEMsT0FBTyxDQUFDLEVBQUV3TyxNQUFNLElBQUlBLE1BQU0sQ0FBQ3hPLEtBQUssQ0FBQztNQUNuQztJQUNGO0lBRUFvTyxlQUFlQSxDQUFDTSxJQUFJLEVBQUU7TUFDcEIsSUFBTVAsU0FBUyxHQUFHbmIsUUFBUSxDQUFDMFAsYUFBYSxDQUFDLEtBQUssQ0FBQztNQUMvQ3lMLFNBQVMsQ0FBQzdDLFNBQVMsQ0FBQ0ssR0FBRyxDQUFDLDRCQUE0QixDQUFDO01BQ3JEd0MsU0FBUyxDQUFDeEwsU0FBUyxHQUFHK0wsSUFBSTtNQUMxQlAsU0FBUyxDQUFDL2EsS0FBSyxDQUFDb00sT0FBTyxHQUFHLE1BQU07TUFDaEMsT0FBTzJPLFNBQVM7SUFDbEI7O0lBRUE7QUFDSjtBQUNBO0lBQ0lRLG1CQUFtQkEsQ0FBQSxFQUFHO01BQ3BCLElBQU1DLFFBQVEsR0FBRyxJQUFJLENBQUNDLGNBQWMsQ0FBQyxDQUFDO01BQ3RDLElBQUksQ0FBQ2xWLE1BQU0sQ0FBQ21WLFFBQVEsR0FBRyxJQUFJO01BQzNCLElBQUlGLFFBQVEsRUFBRSxJQUFJLENBQUNHLG1CQUFtQixDQUFDSCxRQUFRLEVBQUUsSUFBSSxDQUFDcGEsRUFBRSxDQUFDO0lBQzNEO0lBRUFxYSxjQUFjQSxDQUFDRyxHQUFHLEVBQUU7TUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQ3JWLE1BQU0sRUFBRTtNQUVsQixJQUFNaVYsUUFBUSxHQUFHLElBQUksQ0FBQ2pWLE1BQU0sQ0FBQ3NWLFNBQVMsQ0FBQyxJQUFJLENBQUM7TUFDNUMsSUFBSSxDQUFDdFYsTUFBTSxDQUFDdkcsS0FBSyxDQUFDOGIsUUFBUSxHQUFHLFVBQVU7TUFDdkNOLFFBQVEsQ0FBQ08sZUFBZSxDQUFDLE1BQU0sQ0FBQztNQUNoQ1AsUUFBUSxDQUFDdEQsU0FBUyxDQUFDSyxHQUFHLENBQUMsV0FBVyxDQUFDO01BQ25DaUQsUUFBUSxDQUFDeGIsS0FBSyxDQUFDOGIsUUFBUSxHQUFHLFVBQVU7TUFDcENOLFFBQVEsQ0FBQ3hiLEtBQUssQ0FBQ3VILEdBQUcsR0FBRyxLQUFLO01BQzFCaVUsUUFBUSxDQUFDeGIsS0FBSyxDQUFDZ2MsSUFBSSxHQUFHLEtBQUs7TUFDM0JSLFFBQVEsQ0FBQ3hiLEtBQUssQ0FBQ2ljLEtBQUssR0FBRyxJQUFJLENBQUMxVixNQUFNLENBQUMyVixXQUFXLEdBQUcsSUFBSTtNQUNyRFYsUUFBUSxDQUFDeGIsS0FBSyxDQUFDbWMsT0FBTyxHQUFHLEdBQUc7TUFDNUIsSUFBSSxDQUFDNVYsTUFBTSxDQUFDd1AsV0FBVyxDQUFDeUYsUUFBUSxDQUFDO01BRWpDLE9BQU9BLFFBQVE7SUFDakI7SUFFQUcsbUJBQW1CQSxDQUFDQyxHQUFHLEVBQUVwSCxJQUFJLEVBQUU7TUFDN0JBLElBQUksQ0FBQ3BVLGdCQUFnQixDQUFDLFNBQVMsRUFBR3VFLEtBQUssSUFBSztRQUMxQyxJQUFNeVgsWUFBWSxHQUFHLEVBQUU7UUFDdkIsSUFBSXpYLEtBQUssQ0FBQzBYLE9BQU8sS0FBS0QsWUFBWSxFQUFFO1VBQ2xDLElBQUksQ0FBQ0UsY0FBYyxDQUFDM1gsS0FBSyxDQUFDO1FBQzVCO01BQ0YsQ0FBQyxDQUFDO01BRUZpWCxHQUFHLENBQUN4YixnQkFBZ0IsQ0FBQyxPQUFPLEVBQUd1RSxLQUFLLElBQUs7UUFDdkMsSUFBSSxDQUFDMlgsY0FBYyxDQUFDM1gsS0FBSyxDQUFDO01BQzVCLENBQUMsQ0FBQztJQUNKO0lBRUEyWCxjQUFjQSxDQUFDM1gsS0FBSyxFQUFFO01BQ3BCLElBQU00WCxPQUFPLEdBQUcsSUFBSSxDQUFDbmIsRUFBRSxDQUFDb2IsYUFBYSxDQUFDLENBQUMsSUFBSTFNLEtBQUssQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQzRHLGNBQWMsQ0FBQyxDQUFDOEYsS0FBSyxDQUFDMWMsQ0FBQyxJQUFJLElBQUksQ0FBQ21iLHVCQUF1QixDQUFDbmIsQ0FBQyxDQUFDLENBQUM7TUFDdEgyRixPQUFPLENBQUNDLEdBQUcsQ0FBQyw4QkFBOEIsRUFBRTRXLE9BQU8sQ0FBQztNQUVwRCxJQUFJLENBQUNBLE9BQU8sRUFBRTtRQUNaLElBQUksQ0FBQzVGLGNBQWMsQ0FBQzdXLE9BQU8sQ0FBRW9WLFFBQVEsSUFBSyxJQUFJLENBQUM0RixvQkFBb0IsQ0FBQzVGLFFBQVEsQ0FBQyxDQUFDO1FBQzlFLElBQUksQ0FBQzlULEVBQUUsQ0FBQ3NiLGNBQWMsQ0FBQyxDQUFDO1FBQ3hCL1gsS0FBSyxDQUFDZCxjQUFjLENBQUMsQ0FBQztRQUN0QmMsS0FBSyxDQUFDZixlQUFlLENBQUMsQ0FBQztRQUN2QjtNQUNGO01BRUEsSUFBSSxDQUFDMkMsTUFBTSxDQUFDbVYsUUFBUSxHQUFHLEtBQUs7SUFDOUI7SUFFQXZiLElBQUlBLENBQUEsRUFBSTtNQUFBLElBQUFnTSxNQUFBO01BQ04sSUFBSSxDQUFDME8sNEJBQTRCLENBQUMsQ0FBQztNQUNuQyxJQUFJLENBQUNiLFFBQVEsQ0FBQyxDQUFDO01BQ2YsSUFBSSxDQUFDUyxVQUFVLENBQUMsQ0FBQztNQUNqQixJQUFJLENBQUNHLDJCQUEyQixDQUFDLENBQUM7TUFDbEMsSUFBSSxDQUFDVyxtQkFBbUIsQ0FBQyxDQUFDO01BRTFCLElBQUksQ0FBQ25hLEVBQUUsQ0FBQ2hCLGdCQUFnQixDQUFDLFFBQVE7UUFBQSxJQUFBbUwsS0FBQSxHQUFBSixpQkFBQSxDQUFFLFdBQU9wTCxDQUFDLEVBQUs7VUFDOUMyRixPQUFPLENBQUNDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQztVQUN6QzVGLENBQUMsQ0FBQzhELGNBQWMsQ0FBQyxDQUFDOztVQUVsQjtVQUNBLElBQUltUyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUk1QixLQUFLLENBQUNsTyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQUEsSUFBQXlXLG9CQUFBO1lBQzFDLElBQUksQ0FBQ3JjLE1BQU0sQ0FBQ2lVLFlBQVksRUFBRTtjQUN4QnFCLGdCQUFnQixDQUFDLENBQUM7WUFDcEI7WUFFQSxJQUFNaUQsS0FBSyxJQUFBOEQsb0JBQUEsR0FBR3JjLE1BQU0sQ0FBQ2lVLFlBQVksY0FBQW9JLG9CQUFBLHVCQUFuQkEsb0JBQUEsQ0FBcUJDLFdBQVcsQ0FBQ3pRLE1BQUksQ0FBQ3lLLG9CQUFvQixDQUFDO1lBQ3pFLElBQUksQ0FBQ2lDLEtBQUssRUFBRTtjQUNWMU0sTUFBSSxDQUFDbU0sa0JBQWtCLENBQUMsQ0FBQztZQUMzQixDQUFDLE1BQU07Y0FDTCxNQUFNbk0sTUFBSSxDQUFDd00sUUFBUSxDQUFDRSxLQUFLLENBQUM7WUFDNUI7VUFDRixDQUFDLE1BQU07WUFDTCxNQUFNMU0sTUFBSSxDQUFDd00sUUFBUSxDQUFDLENBQUM7VUFDdkI7UUFDRixDQUFDO1FBQUEsaUJBQUE3TSxFQUFBO1VBQUEsT0FBQVAsS0FBQSxDQUFBUSxLQUFBLE9BQUE5RixTQUFBO1FBQUE7TUFBQSxJQUFDO0lBQ0o7SUFFQSxPQUFPdEcsR0FBR0EsQ0FBQSxFQUErQjtNQUFBLElBQTdCcUcsV0FBVyxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBR3JHLFFBQVEsQ0FBQ3dHLElBQUk7TUFDckMsSUFBTXlXLFFBQVEsR0FBRyxzQkFBc0I7TUFDdkMsSUFBTXhXLEtBQUssR0FBRyxDQUFDLEdBQUdMLFdBQVcsQ0FBQ25HLGdCQUFnQixDQUFDZ2QsUUFBUSxDQUFDLENBQUM7TUFFekR4VyxLQUFLLENBQUN2RyxPQUFPLENBQUN3RyxDQUFDLElBQUk7UUFDakIsSUFBTWtPLElBQUksR0FBRyxJQUFJNEIsSUFBSSxDQUFDOVAsQ0FBQyxDQUFDO1FBQ3hCa08sSUFBSSxDQUFDclUsSUFBSSxDQUFDLENBQUM7UUFDWGlVLEtBQUssQ0FBQ3ZJLElBQUksQ0FBQzJJLElBQUksQ0FBQztNQUNsQixDQUFDLENBQUM7O01BRUY7TUFDQSxJQUFNc0ksbUJBQW1CLEdBQUcsd0JBQXdCO01BQ3BELElBQU01RixVQUFVLEdBQUcsQ0FBQyxHQUFHbFIsV0FBVyxDQUFDbkcsZ0JBQWdCLENBQUNpZCxtQkFBbUIsQ0FBQyxDQUFDO01BRXpFNUYsVUFBVSxDQUFDcFgsT0FBTyxDQUFDd0csQ0FBQyxJQUFJQSxDQUFDLENBQUMyTyxPQUFPLEdBQUcsS0FBSyxDQUFDOztNQUUxQztNQUNBLElBQU04SCxjQUFjLEdBQUcscUJBQXFCO01BQzVDLElBQU1DLEtBQUssR0FBRyxDQUFDLEdBQUdoWCxXQUFXLENBQUNuRyxnQkFBZ0IsQ0FBQ2tkLGNBQWMsQ0FBQyxDQUFDO01BRS9ELElBQU1FLHFCQUFxQixHQUFHLDJCQUEyQjtNQUN6RCxJQUFNQyxXQUFXLEdBQUcsQ0FBQyxHQUFHbFgsV0FBVyxDQUFDbkcsZ0JBQWdCLENBQUNvZCxxQkFBcUIsQ0FBQyxDQUFDO01BRTVFLENBQUMsR0FBR0QsS0FBSyxFQUFFLEdBQUdFLFdBQVcsQ0FBQyxDQUFDcGQsT0FBTyxDQUFDb1YsUUFBUSxJQUFJO1FBQzdDLElBQU12QyxNQUFNLEdBQUd1QyxRQUFRLENBQUNyVixnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQztRQUMvRDhTLE1BQU0sQ0FBQzdTLE9BQU8sQ0FBQ3dHLENBQUMsSUFBSUEsQ0FBQyxDQUFDeVYsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2pELElBQUlwSixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVBLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQ3NDLE9BQU8sR0FBRyxJQUFJO01BQ3pDLENBQUMsQ0FBQztJQUNKO0VBRUY7RUFHQXJWLFFBQVEsQ0FBQ1EsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsTUFBTTtJQUNsRGdXLElBQUksQ0FBQ3pXLEdBQUcsQ0FBQyxDQUFDO0VBQ1osQ0FBQyxDQUFDO0VBRUZXLE1BQU0sQ0FBQ0MsV0FBVyxHQUFHRCxNQUFNLENBQUNDLFdBQVcsSUFBSSxDQUFDLENBQUM7RUFDN0NELE1BQU0sQ0FBQ0MsV0FBVyxDQUFDNlYsSUFBSSxHQUFHQSxJQUFJO0FBRWhDLENBQUMsRUFBRSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7OztBQzNnQkosQ0FBQyxZQUFXO0VBQ1YsWUFBWTs7RUFFWixJQUFNL1YsY0FBYyxHQUFHQyxNQUFNLENBQUNDLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDSCxjQUFjO0VBRTdELE1BQU04YyxHQUFHLENBQUM7SUFDUmhjLFdBQVdBLENBQUVDLEVBQUUsRUFBRTtNQUNmLElBQUksQ0FBQ0EsRUFBRSxHQUFHQSxFQUFFO01BQ1osSUFBSSxDQUFDZ2MsR0FBRyxHQUFHaGMsRUFBRSxDQUFDMkQsYUFBYSxDQUFDLGdCQUFnQixDQUFDO01BQzdDLElBQUksQ0FBQ3NZLE1BQU0sR0FBR2pjLEVBQUUsQ0FBQzJELGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQztNQUNwRCxJQUFJLENBQUN1RyxHQUFHLEdBQUcsSUFBSTtNQUNmLElBQUksQ0FBQ0ksT0FBTyxHQUFHOUosSUFBSSxDQUFDQyxLQUFLLENBQUN4QixjQUFjLENBQUNlLEVBQUUsQ0FBQ00sT0FBTyxDQUFDZ0ssT0FBTyxDQUFDLENBQUM7TUFHN0QsSUFBSSxDQUFDNFIsVUFBVSxHQUFHO1FBQ2hCQyxVQUFVLEVBQUUsMEJBQTBCO1FBQ3RDQyxhQUFhLEVBQUUsRUFBRTtRQUNqQkMsYUFBYSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUN2QkMsZUFBZSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDM0JDLFdBQVcsRUFBRSxTQUFTO1FBQ3RCQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekJDLGFBQWEsRUFBRSxJQUFJLENBQUNULEdBQUcsSUFBSSxJQUFJLENBQUNBLEdBQUcsQ0FBQ1U7TUFDdEMsQ0FBQztJQUNIO0lBRUFDLGdCQUFnQkEsQ0FBQXZTLElBQUEsRUFBbUM7TUFBQSxJQUFqQztRQUFFd0osSUFBSTtRQUFFbFUsS0FBSztRQUFFa2QsUUFBUTtRQUFFMUM7TUFBSyxDQUFDLEdBQUE5UCxJQUFBO01BQy9DLElBQU15UyxlQUFlLEdBQUczZCxNQUFNLENBQUM0ZCxLQUFLLENBQUNDLHFCQUFxQixDQUFDQyxXQUFXLENBQUMsSUFBSSxDQUFDZixNQUFNLENBQUNTLFNBQVMsRUFDMUY7UUFFRU8sS0FBSyxFQUFFLFNBQUFBLE1BQUEsRUFBWTtVQUNqQixJQUFJLENBQUNsZCxXQUFXLENBQUNtZCxVQUFVLENBQUNELEtBQUssQ0FBQ3RULElBQUksQ0FBQyxJQUFJLENBQUM7VUFFNUMsSUFBTXdULE1BQU0sR0FBRyxJQUFJLENBQUNDLGdCQUFnQixDQUFDLENBQUM7VUFDdEMsSUFBTUMsT0FBTyxHQUFHRixNQUFNLENBQUN4WixhQUFhLENBQUMsb0JBQW9CLENBQUM7VUFFMUQsSUFBTTJaLEtBQUssR0FBR0QsT0FBTyxDQUFDMVosYUFBYSxDQUFDLHNCQUFzQixDQUFDO1VBQzNELElBQU00WixHQUFHLEdBQUdGLE9BQU8sQ0FBQzFaLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQztVQUMzRCxJQUFNNlosTUFBTSxHQUFHSCxPQUFPLENBQUMxWixhQUFhLENBQUMseUJBQXlCLENBQUM7O1VBRS9EO1VBQ0EwWixPQUFPLENBQUMxWixhQUFhLENBQUMsc0JBQXNCLENBQUMsQ0FBQ3NRLFdBQVcsR0FBR0wsSUFBSTtVQUVoRSxJQUFJMkosR0FBRyxFQUFFO1lBQ1BBLEdBQUcsQ0FBQ3RKLFdBQVcsR0FBR3ZVLEtBQUs7WUFDdkI2ZCxHQUFHLENBQUM1YyxJQUFJLFVBQUFlLE1BQUEsQ0FBVWhDLEtBQUssQ0FBRTtVQUMzQjtVQUVBLElBQUk0ZCxLQUFLLEVBQUU7WUFDVEEsS0FBSyxDQUFDckosV0FBVyxHQUFHMkksUUFBUTtZQUM1QlUsS0FBSyxDQUFDM2MsSUFBSSxhQUFBZSxNQUFBLENBQWFrYixRQUFRLENBQUU7VUFDbkM7VUFFQSxJQUFJWSxNQUFNLEVBQUU7WUFDVkEsTUFBTSxDQUFDdkosV0FBVyxHQUFHaUcsSUFBSTtZQUN6QnNELE1BQU0sQ0FBQzVlLEtBQUssQ0FBQ29NLE9BQU8sR0FBRyxJQUFJO1VBQzdCO1VBRUFtUyxNQUFNLENBQUNNLE1BQU0sQ0FBQ0osT0FBTyxDQUFDO1VBQ3RCLElBQUksQ0FBQ0ssU0FBUyxHQUFHTCxPQUFPO1VBQ3hCLElBQUksQ0FBQ00sa0JBQWtCLENBQUMsQ0FBQztVQUV6QixJQUFNQyxLQUFLLEdBQUcsSUFBSSxDQUFDRixTQUFTLENBQUMvWixhQUFhLENBQUMsMEJBQTBCLENBQUM7VUFDdEVpYSxLQUFLLENBQUM1ZSxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsTUFBTTtZQUNwQyxJQUFJLENBQUM2ZSxZQUFZLENBQUMsSUFBSSxDQUFDO1VBQ3pCLENBQUMsQ0FBQztRQUNKLENBQUM7UUFFRHZGLEtBQUssRUFBRSxTQUFBQSxNQUFBLEVBQVk7VUFDakIsSUFBSSxJQUFJLENBQUN3RixPQUFPLENBQUNDLFNBQVMsRUFBRSxJQUFJLENBQUNoZSxXQUFXLENBQUNtZCxVQUFVLENBQUM1RSxLQUFLLENBQUMzTyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzFFLENBQUM7UUFFRHFVLHFCQUFxQixFQUFFLFNBQUFBLHNCQUFBLEVBQVk7VUFDakNuQixlQUFlLENBQUNLLFVBQVUsQ0FBQ2MscUJBQXFCLENBQUNyVCxLQUFLLENBQUMsSUFBSSxFQUFFOUYsU0FBUyxDQUFDO1VBQ3ZFLElBQUksQ0FBQzhZLGtCQUFrQixDQUFDLENBQUM7VUFDekIsSUFBSSxDQUFDTSxNQUFNLENBQUNDLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDakMsQ0FBQztRQUVEUCxrQkFBa0IsRUFBRSxTQUFBQSxtQkFBQSxFQUFZO1VBQzlCLElBQU1RLEtBQUssR0FBSSxJQUFJLENBQUNULFNBQVMsQ0FBQy9aLGFBQWEsQ0FBQyxRQUFRLENBQUM7VUFDckQsSUFBSSxDQUFDK1osU0FBUyxDQUFDOWUsS0FBSyxDQUFDZ2MsSUFBSSxHQUFHLEVBQUUsSUFBSSxDQUFDOEMsU0FBUyxDQUFDNUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUk7VUFDcEUsSUFBSSxDQUFDNEMsU0FBUyxDQUFDOWUsS0FBSyxDQUFDdUgsR0FBRyxHQUFHLEVBQUUsSUFBSSxDQUFDdVgsU0FBUyxDQUFDVSxZQUFZLEdBQUdELEtBQUssQ0FBQ0MsWUFBWSxDQUFDLEdBQUcsSUFBSTtRQUN2RixDQUFDO1FBRURQLFlBQVksRUFBRSxTQUFBQSxhQUFVbGYsQ0FBQyxFQUFFO1VBQ3pCQSxDQUFDLENBQUNzZixNQUFNLENBQUNDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDNUIsQ0FBQztRQUVERyxRQUFRLEVBQUUsU0FBQUEsU0FBQSxFQUFZO1VBRXBCLElBQU0zRCxRQUFRLEdBQUc7WUFDZkUsSUFBSSxFQUFFLElBQUksQ0FBQzhDLFNBQVMsQ0FBQzllLEtBQUssQ0FBQ2djLElBQUk7WUFDL0J6VSxHQUFHLEVBQUUsSUFBSSxDQUFDdVgsU0FBUyxDQUFDOWUsS0FBSyxDQUFDdUg7VUFDNUIsQ0FBQztVQUVELE9BQU8sSUFBSWpILE1BQU0sQ0FBQzRkLEtBQUssQ0FBQ3dCLEtBQUssQ0FBQ0MsU0FBUyxDQUFDLElBQUlyZixNQUFNLENBQUM0ZCxLQUFLLENBQUMwQixRQUFRLENBQUNDLEtBQUssQ0FBQ0YsU0FBUyxDQUFDLENBQ2hGLENBQUM3RCxRQUFRLENBQUNFLElBQUksRUFBRUYsUUFBUSxDQUFDdlUsR0FBRyxDQUFDLEVBQUUsQ0FDN0J1VSxRQUFRLENBQUNFLElBQUksR0FBRyxJQUFJLENBQUM4QyxTQUFTLENBQUM1QyxXQUFXLEVBQzFDSixRQUFRLENBQUN2VSxHQUFHLEdBQUcsSUFBSSxDQUFDdVgsU0FBUyxDQUFDVSxZQUFZLEdBQUcsSUFBSSxDQUFDVixTQUFTLENBQUMvWixhQUFhLENBQUMsUUFBUSxDQUFDLENBQUN5YSxZQUFZLENBQ2pHLENBQ0YsQ0FBQyxDQUFDO1FBQ0w7TUFDRixDQUFDLENBQUM7TUFFSixPQUFPdkIsZUFBZTtJQUN4QjtJQUVBOWQsSUFBSUEsQ0FBQSxFQUEwQjtNQUFBLElBQXhCdUwsT0FBTyxHQUFBekYsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsSUFBSSxDQUFDeUYsT0FBTztNQUMxQixPQUFPLElBQUlNLE9BQU8sQ0FBQzhULE9BQU8sSUFBSTtRQUM1QnhmLE1BQU0sQ0FBQzRkLEtBQUssQ0FBQzZCLEtBQUssQ0FBQyxNQUFNO1VBQ3ZCO1VBQ0EsSUFBTUMsUUFBUSxHQUFHMWYsTUFBTSxDQUFDQyxXQUFXLENBQUNDLElBQUksQ0FBQ3dmLFFBQVEsQ0FBQyxDQUFDOztVQUVuRDtVQUNBLElBQUksQ0FBQzFVLEdBQUcsR0FBRyxJQUFJaEwsTUFBTSxDQUFDNGQsS0FBSyxDQUFDZixHQUFHLENBQUMsSUFBSSxDQUFDL2IsRUFBRSxFQUFBMlAsYUFBQSxDQUFBQSxhQUFBLEtBQU9yRixPQUFPO1lBQUd1VSxTQUFTLEVBQUVELFFBQVEsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsTUFBTTtVQUFDLEVBQUcsQ0FBQzs7VUFHM0c7VUFDQTFmLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDQyxJQUFJLENBQUMwZixzQkFBc0IsQ0FBQyxJQUFJLENBQUM5ZSxFQUFFLEVBQUUsTUFBTTtZQUM1RCxJQUFJLENBQUNrSyxHQUFHLENBQUM2VSxTQUFTLENBQUNDLGFBQWEsQ0FBQyxDQUFDO1VBQ3BDLENBQUMsQ0FBQzs7VUFJRjtVQUNBLElBQU07WUFBRW5FLEtBQUs7WUFBRXRVO1VBQU8sQ0FBQyxHQUFHMFksZ0JBQWdCLENBQUMsSUFBSSxDQUFDakQsR0FBRyxDQUFDO1VBRXBELElBQU1HLFVBQVUsR0FBRyxJQUFJLENBQUNILEdBQUcsQ0FBQ1UsU0FBUztVQUVyQyxJQUFNd0MsVUFBVSxHQUFHO1lBQ2pCL0MsVUFBVSxFQUFFLDBCQUEwQjtZQUN0Q0MsYUFBYSxFQUFFLEVBQUU7WUFDakJDLGFBQWEsRUFBRSxDQUFDbEwsUUFBUSxDQUFDMEosS0FBSyxDQUFDLEVBQUUxSixRQUFRLENBQUM1SyxNQUFNLENBQUMsQ0FBQztZQUNsRCtWLGVBQWUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdkI7WUFDQTZDLHNCQUFzQixFQUFFLENBQUM7WUFDekIzQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDekJ6SCxPQUFPLEVBQUU7VUFDWCxDQUFDO1VBR0R6SyxPQUFPLENBQUM4VSxNQUFNLENBQUMxZ0IsT0FBTyxDQUFDMmdCLENBQUMsSUFBSTtZQUMxQixJQUFNQyxXQUFXLEdBQUEzUCxhQUFBLENBQUFBLGFBQUEsS0FDWnVQLFVBQVU7Y0FDYkssaUJBQWlCLEVBQUVyZ0IsTUFBTSxDQUFDNGQsS0FBSyxDQUFDQyxxQkFBcUIsQ0FBQ0MsV0FBVyxDQUFDYixVQUFVLENBQUM7Y0FDN0VxRCxhQUFhLEVBQUVsVixPQUFPLENBQUNtVixXQUFXLEdBQUcsSUFBSSxDQUFDOUMsZ0JBQWdCLENBQUM7Z0JBQUUvSSxJQUFJLEVBQUV5TCxDQUFDLENBQUN6TCxJQUFJLElBQUksRUFBRTtnQkFBRWxVLEtBQUssRUFBRTJmLENBQUMsQ0FBQzNmLEtBQUssSUFBSSxFQUFFO2dCQUFFa2QsUUFBUSxFQUFFeUMsQ0FBQyxDQUFDekMsUUFBUSxJQUFJLEVBQUU7Z0JBQUUxQyxJQUFJLEVBQUVtRixDQUFDLENBQUNuRixJQUFJLElBQUk7Y0FBRyxDQUFDLENBQUMsR0FBRztZQUFFLEVBQzlKO1lBRUQsSUFBTXdGLElBQUksR0FBRyxJQUFJNUMsS0FBSyxDQUFDNkMsU0FBUyxDQUFDTixDQUFDLENBQUNPLFdBQVcsRUFBRSxDQUFDLENBQUMsRUFBRU4sV0FBVyxDQUFDO1lBQ2hFLElBQUksQ0FBQ3BWLEdBQUcsQ0FBQzJWLFVBQVUsQ0FBQzFJLEdBQUcsQ0FBQ3VJLElBQUksQ0FBQztVQUMvQixDQUFDLENBQUM7VUFFRmhCLE9BQU8sQ0FBQyxDQUFDO1FBQ1gsQ0FBQyxDQUFDO01BQ0osQ0FBQyxDQUFDO0lBQ0o7SUFFQSxPQUFPbmdCLEdBQUdBLENBQUEsRUFBK0I7TUFBQSxJQUE3QnFHLFdBQVcsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUdyRyxRQUFRLENBQUN3RyxJQUFJO01BRXJDO01BQ0E7TUFDQSxJQUFNOGEsVUFBVSxHQUFHLHNDQUFzQztNQUN6RDtNQUNBLElBQU1DLFVBQVUsR0FBRyxzQ0FBc0M7TUFFekQsSUFBTUMsT0FBTyxHQUFHRCxVQUFVO01BQzFCO01BQ0EsSUFBTUUsb0JBQW9CLEdBQUcsR0FBRztNQUNoQztNQUNBLElBQU1DLGtCQUFrQixHQUFHLEdBQUc7TUFFOUIsSUFBTXpFLFFBQVEsR0FBRyxxQkFBcUI7TUFDdEMsSUFBTTBFLElBQUksR0FBRyxDQUFDLEdBQUd2YixXQUFXLENBQUNuRyxnQkFBZ0IsQ0FBQ2dkLFFBQVEsQ0FBQyxDQUFDO01BRXhELElBQU0yRSxZQUFZLEdBQUlsVyxHQUFHLElBQUs7UUFBRUEsR0FBRyxDQUFDbkwsSUFBSSxDQUFDLENBQUM7TUFBQyxDQUFDO01BRTVDLElBQU1zaEIsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO01BQzVCLElBQU1DLFVBQVUsR0FBSUMsTUFBTSxJQUFLO1FBQzdCLElBQUksQ0FBQ0YsaUJBQWlCLENBQUNFLE1BQU0sQ0FBQyxFQUFFO1VBQzlCRixpQkFBaUIsQ0FBQ0UsTUFBTSxDQUFDLEdBQUcsSUFBSTNWLE9BQU8sQ0FBQyxDQUFDNFYsR0FBRyxFQUFFQyxHQUFHLEtBQUs7WUFDcEQsSUFBSXZoQixNQUFNLENBQUM0ZCxLQUFLLEVBQUUsT0FBTzBELEdBQUcsQ0FBQyxDQUFDO1lBQzlCLElBQU1FLGNBQWMsd0RBQUFoZixNQUFBLENBQXdENmUsTUFBTSxDQUFFO1lBQ3BGLElBQU1JLGVBQWUsR0FBR25pQixRQUFRLENBQUMwUCxhQUFhLENBQUMsUUFBUSxDQUFDO1lBQ3hEeVMsZUFBZSxDQUFDaGYsWUFBWSxDQUFDLEtBQUssRUFBRStlLGNBQWMsQ0FBQztZQUNuRGxpQixRQUFRLENBQUMwVSxJQUFJLENBQUN5QixXQUFXLENBQUNnTSxlQUFlLENBQUM7WUFDMUNBLGVBQWUsQ0FBQ0MsTUFBTSxHQUFHLE1BQU07Y0FBRTFoQixNQUFNLENBQUM0ZCxLQUFLLENBQUM2QixLQUFLLENBQUMsTUFBTTZCLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFBQyxDQUFDO1lBQ2xFRyxlQUFlLENBQUNFLE9BQU8sR0FBR0osR0FBRztVQUMvQixDQUFDLENBQUM7UUFDSjtRQUNBLE9BQU9KLGlCQUFpQixDQUFDRSxNQUFNLENBQUM7TUFDbEMsQ0FBQztNQUVESixJQUFJLENBQUN6aEIsT0FBTztRQUFBLElBQUF5TCxLQUFBLEdBQUFKLGlCQUFBLENBQUMsV0FBTytXLENBQUMsRUFBSztVQUN4QixJQUFNQyxVQUFVLEdBQUd2Z0IsSUFBSSxDQUFDQyxLQUFLLENBQUN4QixjQUFjLENBQUM2aEIsQ0FBQyxDQUFDeGdCLE9BQU8sQ0FBQ2dLLE9BQU8sQ0FBQyxDQUFDO1VBQ2hFLElBQU1pVyxNQUFNLEdBQUdRLFVBQVUsQ0FBQ1IsTUFBTSxHQUFHUSxVQUFVLENBQUNSLE1BQU0sR0FBR1AsT0FBTztVQUU5RCxJQUFNOVYsR0FBRyxHQUFHLElBQUk2UixHQUFHLENBQUMrRSxDQUFDLENBQUM7VUFDdEIsSUFBTUUsUUFBUSxHQUFHL0IsZ0JBQWdCLENBQUM2QixDQUFDLENBQUM7VUFFcEMsSUFBTWpHLEtBQUssR0FBRzFKLFFBQVEsQ0FBQzZQLFFBQVEsQ0FBQ25HLEtBQUssQ0FBQztVQUN0QyxJQUFNdFUsTUFBTSxHQUFHNEssUUFBUSxDQUFDNlAsUUFBUSxDQUFDemEsTUFBTSxDQUFDLElBQUkyWixrQkFBa0I7VUFHOUQsSUFBSWhoQixNQUFNLENBQUNDLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDb0YsU0FBUyxDQUFDc2MsQ0FBQyxDQUFDLElBQUlqRyxLQUFLLEdBQUdvRixvQkFBb0IsRUFBRTtZQUN4RSxNQUFNSyxVQUFVLENBQUNDLE1BQU0sQ0FBQztZQUN4QkgsWUFBWSxDQUFDbFcsR0FBRyxDQUFDO1lBQ2pCO1VBQ0Y7O1VBRUE7VUFDQTs7VUFFQTtVQUNBLElBQU0rVyxXQUFXLEdBQUdGLFVBQVUsQ0FBQzNCLE1BQU0sQ0FBQ2xWLEdBQUcsQ0FBQ29CLEtBQUEsSUFBbUI7WUFBQSxJQUFsQjtjQUFDc1U7WUFBVyxDQUFDLEdBQUF0VSxLQUFBO1lBQ3RELGFBQUE1SixNQUFBLENBQWFrZSxXQUFXLENBQUMsQ0FBQyxDQUFDLE9BQUFsZSxNQUFBLENBQUlrZSxXQUFXLENBQUMsQ0FBQyxDQUFDO1VBQy9DLENBQUMsQ0FBQyxDQUFDc0IsSUFBSSxDQUFDLEdBQUcsQ0FBQzs7VUFFWjtVQUNBLElBQU1DLFNBQVMsR0FBR25iLElBQUksQ0FBQ0MsR0FBRyxDQUFDNFUsS0FBSyxFQUFFLEdBQUcsQ0FBQztVQUN0QyxJQUFNdUcsVUFBVSxHQUFHcGIsSUFBSSxDQUFDQyxHQUFHLENBQUNNLE1BQU0sRUFBRSxHQUFHLENBQUM7VUFHeEMsSUFBTThhLGFBQWEsR0FBRzdpQixRQUFRLENBQUMwUCxhQUFhLENBQUMsS0FBSyxDQUFDO1VBQ25EbVQsYUFBYSxDQUFDNU0sR0FBRyw0Q0FBQS9TLE1BQUEsQ0FBNENxZixVQUFVLENBQUNPLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBQTVmLE1BQUEsQ0FBSXFmLFVBQVUsQ0FBQ08sTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFBNWYsTUFBQSxDQUFNcWYsVUFBVSxDQUFDUSxJQUFJLGtCQUFBN2YsTUFBQSxDQUFleWYsU0FBUyxPQUFBemYsTUFBQSxDQUFJMGYsVUFBVSxPQUFBMWYsTUFBQSxDQUFJdWYsV0FBVyxXQUFRO1VBRTNMSSxhQUFhLENBQUM5YSxNQUFNLEdBQUc2YSxVQUFVO1VBQ2pDQyxhQUFhLENBQUN4RyxLQUFLLEdBQUdzRyxTQUFTO1VBRS9CTCxDQUFDLENBQUNyRCxNQUFNLENBQUM0RCxhQUFhLENBQUM7O1VBR3ZCO1VBQ0E7VUFDQSxJQUFNL1csT0FBTyxHQUFHO1lBQ2Q2RSxJQUFJLEVBQUUsSUFBSTtZQUNWcVMsVUFBVSxFQUFFLE9BQU87WUFDbkJDLFNBQVMsRUFBRTtVQUNiLENBQUM7VUFFRCxJQUFNQyxtQkFBbUI7WUFBQSxJQUFBL1YsS0FBQSxHQUFBNUIsaUJBQUEsQ0FBRyxXQUFPRSxPQUFPLEVBQUs7Y0FDN0MsSUFBSUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDMFgsY0FBYyxFQUFFO2dCQUM3QixNQUFNckIsVUFBVSxDQUFDQyxNQUFNLENBQUM7Z0JBQ3hCYyxhQUFhLENBQUNuUyxNQUFNLENBQUMsQ0FBQztnQkFDdEJrUixZQUFZLENBQUNsVyxHQUFHLENBQUM7Z0JBQ2pCMFgsUUFBUSxDQUFDQyxTQUFTLENBQUNmLENBQUMsQ0FBQztjQUN2QjtZQUNGLENBQUM7WUFBQSxnQkFQS1ksbUJBQW1CQSxDQUFBSSxHQUFBO2NBQUEsT0FBQW5XLEtBQUEsQ0FBQWhCLEtBQUEsT0FBQTlGLFNBQUE7WUFBQTtVQUFBLEdBT3hCO1VBRUQsSUFBTStjLFFBQVEsR0FBRyxJQUFJRyxvQkFBb0IsQ0FBQ0wsbUJBQW1CLEVBQUVwWCxPQUFPLENBQUM7VUFDdkVzWCxRQUFRLENBQUNJLE9BQU8sQ0FBQ2xCLENBQUMsQ0FBQztRQUNyQixDQUFDO1FBQUEsaUJBQUFwVyxFQUFBO1VBQUEsT0FBQVAsS0FBQSxDQUFBUSxLQUFBLE9BQUE5RixTQUFBO1FBQUE7TUFBQSxJQUFDO0lBRUo7RUFDRjtFQUdBckcsUUFBUSxDQUFDUSxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRSxNQUFNO0lBQ2xEK2MsR0FBRyxDQUFDeGQsR0FBRyxDQUFDLENBQUM7RUFDWCxDQUFDLENBQUM7RUFHRlcsTUFBTSxDQUFDQyxXQUFXLEdBQUdELE1BQU0sQ0FBQ0MsV0FBVyxJQUFJLENBQUMsQ0FBQztFQUM3Q0QsTUFBTSxDQUFDQyxXQUFXLENBQUM0YyxHQUFHLEdBQUdBLEdBQUc7QUFFOUIsQ0FBQyxFQUFFLENBQUM7Ozs7Ozs7Ozs7Ozs7OztBQ3ZRSixDQUFDLFlBQVc7RUFDVixZQUFZOztFQUVaLElBQU05YyxjQUFjLEdBQUdDLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDQyxJQUFJLENBQUNILGNBQWM7RUFFN0QsTUFBTWdqQixNQUFNLENBQUM7SUFDWGxpQixXQUFXQSxDQUFFQyxFQUFFLEVBQUU7TUFDZixJQUFJLENBQUNBLEVBQUUsR0FBR0EsRUFBRTtNQUNaLElBQUksQ0FBQ2tpQixNQUFNLEdBQUcsSUFBSTtNQUNsQixJQUFJLENBQUNyaEIsTUFBTSxHQUFHYixFQUFFLENBQUMyRCxhQUFhLENBQUMsU0FBUyxDQUFDO01BQ3pDLElBQUksQ0FBQzJHLE9BQU8sR0FBRzlKLElBQUksQ0FBQ0MsS0FBSyxDQUFDeEIsY0FBYyxDQUFDZSxFQUFFLENBQUNNLE9BQU8sQ0FBQ2dLLE9BQU8sQ0FBQyxDQUFDO0lBQy9EO0lBR0E2WCxZQUFZQSxDQUFFdEgsS0FBSyxFQUFFO01BQ25CO01BQ0EsSUFBSSxDQUFDLElBQUksQ0FBQ3FILE1BQU0sQ0FBQ0UsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDRixNQUFNLENBQUNFLFlBQVksQ0FBQ0MsV0FBVyxFQUFFO01BQ3hFO01BQ0EsSUFBTUEsV0FBVyxHQUFHOVksTUFBTSxDQUFDK0UsSUFBSSxDQUFDLElBQUksQ0FBQzRULE1BQU0sQ0FBQ0UsWUFBWSxDQUFDQyxXQUFXLENBQUMsQ0FBQ25ZLEdBQUcsQ0FBQ3ZMLENBQUMsSUFBSXlSLE1BQU0sQ0FBQ3pSLENBQUMsQ0FBQyxDQUFDO01BQ3pGLElBQU00TSxHQUFHLEdBQUc4VyxXQUFXLENBQUNDLElBQUksQ0FBQyxDQUFDQyxDQUFDLEVBQUVDLENBQUMsS0FBS3hjLElBQUksQ0FBQ3ljLEdBQUcsQ0FBQzVILEtBQUssR0FBRzBILENBQUMsQ0FBQyxHQUFHdmMsSUFBSSxDQUFDeWMsR0FBRyxDQUFDNUgsS0FBSyxHQUFHMkgsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDcEYsSUFBTTtRQUFFRSxhQUFhO1FBQUVDO01BQWEsQ0FBQyxHQUFHLElBQUksQ0FBQ1QsTUFBTSxDQUFDRSxZQUFZLENBQUNDLFdBQVcsQ0FBQzlXLEdBQUcsQ0FBQztNQUNqRixJQUFJLENBQUMyVyxNQUFNLENBQUMxUyxNQUFNLENBQUNrVCxhQUFhLEdBQUdBLGFBQWE7TUFDaEQsSUFBSSxDQUFDUixNQUFNLENBQUMxUyxNQUFNLENBQUNtVCxZQUFZLEdBQUdBLFlBQVk7TUFDOUMsSUFBSSxDQUFDVCxNQUFNLENBQUNwWCxNQUFNLENBQUMsQ0FBQztJQUV0QjtJQUVBOFgsWUFBWUEsQ0FBRUMsTUFBTSxFQUFFO01BQ3BCLElBQUksQ0FBQ1gsTUFBTSxDQUFDWSxRQUFRLENBQUNDLEtBQUssQ0FBQyxDQUFDO01BQzVCLElBQUlGLE1BQU0sSUFBSSxDQUFDQSxNQUFNLENBQUNoaUIsTUFBTSxDQUFDaVcsU0FBUyxDQUFDK0MsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQ3FJLE1BQU0sQ0FBQ1ksUUFBUSxDQUFDRSxJQUFJLENBQUMsQ0FBQztJQUN0RjtJQUVBQyw0QkFBNEJBLENBQUEsRUFBSTtNQUFBLElBQUFDLFlBQUE7TUFDOUIsSUFBSSxHQUFBQSxZQUFBLEdBQUMsSUFBSSxDQUFDaEIsTUFBTSxjQUFBZ0IsWUFBQSxlQUFYQSxZQUFBLENBQWFDLE1BQU0sR0FBRTtNQUMxQixJQUFJLENBQUNqQixNQUFNLENBQUNpQixNQUFNLENBQUN6a0IsT0FBTyxDQUFDMGtCLEtBQUssSUFBSTtRQUNsQyxJQUFJQSxLQUFLLENBQUN0TSxTQUFTLENBQUMrQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUV1SixLQUFLLENBQUN0TSxTQUFTLENBQUM1SCxNQUFNLENBQUMsTUFBTSxDQUFDO01BQ3RFLENBQUMsQ0FBQztJQUNKO0lBRUFuUSxJQUFJQSxDQUFBLEVBQTBCO01BQUEsSUFBeEJ1TCxPQUFPLEdBQUF6RixTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxJQUFJLENBQUN5RixPQUFPO01BQzFCLElBQUksQ0FBQzRYLE1BQU0sR0FBRyxJQUFJbUIsTUFBTSxDQUFDLElBQUksQ0FBQ3hpQixNQUFNLEVBQUE4TyxhQUFBLENBQUFBLGFBQUE7UUFDbEMxRCxVQUFVLEVBQUU7VUFDVmpNLEVBQUUsRUFBRSxvQkFBb0I7VUFDeEJzakIsY0FBYyxFQUFFLElBQUk7VUFDcEJDLGtCQUFrQixFQUFFLENBQUM7VUFDckJDLFNBQVMsRUFBRTtRQUNiLENBQUM7UUFDREMsVUFBVSxFQUFFO1VBQ1ZDLE1BQU0sRUFBRSxxQkFBcUI7VUFDN0JDLE1BQU0sRUFBRTtRQUNWLENBQUM7UUFDREMsRUFBRSxFQUFFO1VBQ0ZDLHNCQUFzQixFQUFFQSxDQUFBLEtBQU07WUFDNUIsSUFBSSxDQUFDWiw0QkFBNEIsQ0FBQyxDQUFDO1VBQ3JDO1FBQ0Y7TUFBQyxHQUNFM1ksT0FBTztRQUNWc1gsUUFBUSxFQUFFLElBQUk7UUFDZGtDLGNBQWMsRUFBRTtNQUFJLEVBQ3JCLENBQUM7TUFFRixJQUFJNWtCLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDQyxJQUFJLENBQUNvRixTQUFTLENBQUMsSUFBSSxDQUFDeEUsRUFBRSxDQUFDLEVBQUU7UUFDOUNkLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDQyxJQUFJLENBQUMwZixzQkFBc0IsQ0FBQyxJQUFJLENBQUM5ZSxFQUFFLENBQUNzQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUd1Z0IsTUFBTSxJQUFLO1VBQ3JGLElBQUksQ0FBQ1YsWUFBWSxDQUFDVSxNQUFNLENBQUNrQixXQUFXLENBQUNsSixLQUFLLENBQUM7UUFDN0MsQ0FBQyxDQUFDO01BQ0o7TUFFQSxJQUFJdlEsT0FBTyxDQUFDd1ksUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDWixNQUFNLENBQUNZLFFBQVEsQ0FBQ2tCLE9BQU8sRUFBRTtRQUNyRDlrQixNQUFNLENBQUNDLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDNmtCLG1CQUFtQixDQUFDLElBQUksQ0FBQ2prQixFQUFFLENBQUNzQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxDQUFDc2dCLFlBQVksQ0FBQ3ppQixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7TUFDdkc7TUFFQSxPQUFPLElBQUksQ0FBQytoQixNQUFNO0lBQ3BCO0lBR0EsT0FBTzNqQixHQUFHQSxDQUFBLEVBQStCO01BQUEsSUFBN0JxRyxXQUFXLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHckcsUUFBUSxDQUFDd0csSUFBSTtNQUNyQyxJQUFNeVcsUUFBUSxHQUFHLHdCQUF3QjtNQUN6QyxJQUFNeUksT0FBTyxHQUFHLENBQUMsR0FBR3RmLFdBQVcsQ0FBQ25HLGdCQUFnQixDQUFDZ2QsUUFBUSxDQUFDLENBQUM7TUFFM0R5SSxPQUFPLENBQUN4bEIsT0FBTyxDQUFDb2lCLENBQUMsSUFBSTtRQUNuQixJQUFNcUQsTUFBTSxHQUFHLElBQUlsQyxNQUFNLENBQUNuQixDQUFDLENBQUM7UUFDNUJxRCxNQUFNLENBQUNwbEIsSUFBSSxDQUFDLENBQUM7TUFDZixDQUFDLENBQUM7SUFDSjtFQUNGO0VBS0FQLFFBQVEsQ0FBQ1EsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsTUFBTTtJQUNsRGlqQixNQUFNLENBQUMxakIsR0FBRyxDQUFDLENBQUM7RUFDZCxDQUFDLENBQUM7RUFJRlcsTUFBTSxDQUFDQyxXQUFXLEdBQUdELE1BQU0sQ0FBQ0MsV0FBVyxJQUFJLENBQUMsQ0FBQztFQUM3Q0QsTUFBTSxDQUFDQyxXQUFXLENBQUM4aUIsTUFBTSxHQUFHQSxNQUFNO0FBSXBDLENBQUMsRUFBRSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7OztBQ3BHSixDQUFDLFlBQVc7RUFDVixZQUFZOztFQUVaLElBQU1oakIsY0FBYyxHQUFHQyxNQUFNLENBQUNDLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDSCxjQUFjO0VBRTdELElBQU1tbEIsTUFBTSxHQUFHO0lBQ2JDLE1BQU0sRUFBRSxRQUFRO0lBQ2hCNUwsS0FBSyxFQUFFLE9BQU87SUFDZDZMLFVBQVUsRUFBRSxZQUFZO0lBQ3hCQyxlQUFlLEVBQUUsaUJBQWlCO0lBQ2xDQyxhQUFhLEVBQUU7RUFDakIsQ0FBQztFQUdELE1BQU1DLGFBQWEsQ0FBQztJQUVsQjFrQixXQUFXQSxDQUFFQyxFQUFFLEVBQUU7TUFDZixJQUFNMGtCLEtBQUssR0FBRzFrQixFQUFFLENBQUNNLE9BQU8sQ0FBQ3FrQixrQkFBa0I7TUFDM0MsSUFBSSxDQUFDM2tCLEVBQUUsR0FBR0EsRUFBRTtNQUNaLElBQUksQ0FBQzRrQixNQUFNLEdBQUd6VCxRQUFRLENBQUNuUixFQUFFLENBQUNNLE9BQU8sQ0FBQ3VrQixtQkFBbUIsQ0FBQyxJQUFJLENBQUM7TUFDM0QsSUFBSSxDQUFDempCLElBQUksR0FBR3BCLEVBQUUsQ0FBQ00sT0FBTyxDQUFDd2tCLGlCQUFpQjtNQUN4QyxJQUFJLENBQUNKLEtBQUssR0FBR0EsS0FBSyxHQUFHbGtCLElBQUksQ0FBQ0MsS0FBSyxDQUFDeEIsY0FBYyxDQUFDeWxCLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRTtNQUMzRCxJQUFJLENBQUN4WSxNQUFNLEdBQUdpRixRQUFRLENBQUNuUixFQUFFLENBQUNNLE9BQU8sQ0FBQ3lrQixtQkFBbUIsQ0FBQyxJQUFJLENBQUM7TUFDM0QsSUFBSSxDQUFDclUsT0FBTyxHQUFHMVEsRUFBRSxDQUFDTSxPQUFPLENBQUMwa0Isb0JBQW9CLElBQUksUUFBUTtNQUMxRCxJQUFJLENBQUNDLFdBQVcsR0FBR2psQixFQUFFLENBQUNzQyxPQUFPLENBQUMsWUFBWSxDQUFDO01BQzNDLElBQUksQ0FBQzRpQixRQUFRLEdBQUcsSUFBSTtJQUN0QjtJQUVBLElBQUlDLFlBQVlBLENBQUEsRUFBSTtNQUNsQixPQUFPLElBQUksQ0FBQy9qQixJQUFJLEtBQUtnakIsTUFBTSxDQUFDM0wsS0FBSyxJQUFJLElBQUksQ0FBQ3JYLElBQUksS0FBS2dqQixNQUFNLENBQUNFLFVBQVU7SUFDdEU7SUFFQSxJQUFJYyxXQUFXQSxDQUFBLEVBQUk7TUFDakIsT0FBTyxJQUFJLENBQUNoa0IsSUFBSSxLQUFLZ2pCLE1BQU0sQ0FBQ0csZUFBZSxJQUFJLElBQUksQ0FBQ25qQixJQUFJLEtBQUtnakIsTUFBTSxDQUFDSSxhQUFhO0lBQ25GO0lBRUEsSUFBSWEsY0FBY0EsQ0FBQSxFQUFJO01BQ3BCLE9BQU8sSUFBSSxDQUFDM1UsT0FBTyxLQUFLLFFBQVEsR0FBRyxJQUFJLEdBQUcsSUFBSTtJQUNoRDtJQUVBLElBQUk3UCxNQUFNQSxDQUFBLEVBQUk7TUFDWixPQUFPLElBQUksQ0FBQ08sSUFBSSxLQUFLZ2pCLE1BQU0sQ0FBQ0ksYUFBYSxHQUFHLElBQUksQ0FBQ1MsV0FBVyxHQUFHLElBQUksQ0FBQ2psQixFQUFFO0lBQ3hFO0lBR0FzbEIsY0FBY0EsQ0FBQSxFQUFJO01BQ2hCLElBQUksSUFBSSxDQUFDSCxZQUFZLEVBQUU7UUFDckIsSUFBSVAsTUFBTSxHQUFHLElBQUksQ0FBQ0EsTUFBTTtRQUN4QixJQUFNVyxJQUFJLEdBQUcsSUFBSTtRQUVqQixJQUFNQyxVQUFVLEdBQUcsU0FBYkEsVUFBVUEsQ0FBQSxFQUFlO1VBQzdCO1VBQ0EsSUFBSUQsSUFBSSxDQUFDbmtCLElBQUksS0FBS2dqQixNQUFNLENBQUMzTCxLQUFLLElBQUk4TSxJQUFJLENBQUNYLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbkQsSUFBSSxDQUFDYSxPQUFPLENBQUMsQ0FBQyxDQUFDQyxLQUFLLENBQUMsQ0FBQztVQUN4QjtRQUNGLENBQUM7UUFFRCxJQUFJZCxNQUFNLEtBQUssQ0FBQyxFQUFFO1VBQ2hCQSxNQUFNLEdBQUcsQ0FBQyxFQUFDO1FBQ2I7O1FBRUEsT0FBT2UsSUFBSSxDQUFDVCxRQUFRLENBQUM7VUFBQ1UsTUFBTSxFQUFFLElBQUk7VUFBRWhCLE1BQU07VUFBRWlCLElBQUksRUFBRSxJQUFJO1VBQUVMO1FBQVUsQ0FBQyxDQUFDO01BQ3RFO01BSUEsSUFBSSxJQUFJLENBQUNKLFdBQVcsRUFBRTtRQUNwQixJQUFNVSxhQUFhLEdBQUc7VUFDcEJwVixPQUFPLEVBQUUsSUFBSSxDQUFDN1AsTUFBTTtVQUNwQmtpQixLQUFLLFNBQUFyaEIsTUFBQSxDQUFTLElBQUksQ0FBQ2dQLE9BQU8sRUFBQWhQLE1BQUEsQ0FBRyxJQUFJLENBQUMyakIsY0FBYyxFQUFBM2pCLE1BQUEsQ0FBRyxJQUFJLENBQUN3SyxNQUFNO1FBQ2hFLENBQUM7UUFFRCxPQUFPeVosSUFBSSxDQUFDVCxRQUFRLENBQUM7VUFBRVUsTUFBTSxFQUFFLElBQUk7VUFBRWhCLE1BQU0sRUFBRSxJQUFJLENBQUNBLE1BQU07VUFBRWtCO1FBQWMsQ0FBQyxDQUFDO01BQzVFO01BRUEsT0FBT0gsSUFBSSxDQUFDVCxRQUFRLENBQUM7UUFBRVUsTUFBTSxFQUFFLElBQUk7UUFBRWhCLE1BQU0sRUFBRSxJQUFJLENBQUNBO01BQU8sQ0FBQyxDQUFDO0lBQzdEO0lBRUFtQixxQkFBcUJBLENBQUEsRUFBSTtNQUN2QixJQUFNQyxVQUFVLEdBQUcsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDO01BRXRDLElBQUksQ0FBQ3RCLEtBQUssQ0FBQ2htQixPQUFPLENBQUMsQ0FBQ3VuQixJQUFJLEVBQUVuTixDQUFDLEtBQUs7UUFDOUIsSUFBTW9OLFFBQVEsR0FBR0QsSUFBSSxDQUFDRSxHQUFHLEdBQUloVixRQUFRLENBQUM4VSxJQUFJLENBQUNHLENBQUMsQ0FBQyxHQUFHalYsUUFBUSxDQUFDOFUsSUFBSSxDQUFDQyxRQUFRLENBQUMsR0FBSUQsSUFBSSxDQUFDQyxRQUFRO1FBR3hGLElBQU01YixPQUFPLEdBQUdmLE1BQU0sQ0FBQ1UsT0FBTyxDQUFDZ2MsSUFBSSxDQUFDLENBQUN2UyxNQUFNLENBQUMsQ0FBQ0MsR0FBRyxFQUFBdkosSUFBQSxLQUFtQjtVQUFBLElBQWpCLENBQUNtQixHQUFHLEVBQUVDLEtBQUssQ0FBQyxHQUFBcEIsSUFBQTtVQUM1RCxPQUFPNGIsVUFBVSxDQUFDcmhCLFFBQVEsQ0FBQzRHLEdBQUcsQ0FBQyxHQUFHb0ksR0FBRyxHQUFBaEUsYUFBQSxDQUFBQSxhQUFBLEtBQU9nRSxHQUFHO1lBQUUsQ0FBQ3BJLEdBQUcsR0FBR0M7VUFBSyxFQUFDO1FBQ2hFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUdOLElBQUksSUFBSSxDQUFDcEssSUFBSSxLQUFLZ2pCLE1BQU0sQ0FBQ0MsTUFBTSxFQUFFO1VBRS9CO1VBQ0EsSUFBTWdDLFNBQVMsR0FBRyxJQUFJLENBQUMzQixLQUFLLENBQUMvWCxNQUFNLENBQUMsQ0FBQ2hPLENBQUMsRUFBRTJuQixLQUFLLEtBQUtBLEtBQUssR0FBR3hOLENBQUMsQ0FBQztVQUM1RCxJQUFNeU4sY0FBYyxHQUFHRixTQUFTLENBQUMzUyxNQUFNLENBQUMsQ0FBQ0MsR0FBRyxFQUFFNlMsSUFBSSxLQUFLN1MsR0FBRyxHQUFHNlMsSUFBSSxDQUFDTixRQUFRLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDaGEsTUFBTTtVQUU1RjVCLE9BQU8sQ0FBQ3diLGFBQWEsR0FBRztZQUN0QlcsZUFBZSxFQUFFLEtBQUs7WUFDdEIvVixPQUFPLEVBQUUsSUFBSSxDQUFDN1AsTUFBTTtZQUNwQmtpQixLQUFLLFNBQUFyaEIsTUFBQSxDQUFTLElBQUksQ0FBQ2dQLE9BQU8sUUFBQWhQLE1BQUEsQ0FBSzZrQixjQUFjLENBQUU7WUFDL0NHLEdBQUcsT0FBQWhsQixNQUFBLENBQU93a0IsUUFBUSxDQUFFO1lBQ3BCUyxLQUFLLEVBQUU7VUFDVCxDQUFDO1FBRUg7UUFHQSxJQUFJLENBQUN6QixRQUFRLENBQUMwQixFQUFFLENBQUMsSUFBSSxDQUFDNW1CLEVBQUUsRUFBRXNLLE9BQU8sQ0FBQztNQUNwQyxDQUFDLENBQUM7SUFDSjtJQUVNdWMsaUJBQWlCQSxDQUFBLEVBQUk7TUFBQSxJQUFBL2MsS0FBQTtNQUFBLE9BQUFDLGlCQUFBO1FBQ3pCRCxLQUFJLENBQUNvYixRQUFRLENBQUM0QixPQUFPLENBQUMsQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQztNQUFBO0lBQ2hDO0lBRU1DLHFCQUFxQkEsQ0FBQSxFQUFJO01BQUEsSUFBQWpjLE1BQUE7TUFBQSxPQUFBaEIsaUJBQUE7UUFDN0IsSUFBSWdCLE1BQUksQ0FBQzZaLE1BQU0sS0FBSyxDQUFDLENBQUMsRUFBRTtVQUFFO1VBQ3hCLE1BQU03WixNQUFJLENBQUNtYSxRQUFRLENBQUM0QixPQUFPLENBQUMsQ0FBQyxDQUFDcEIsS0FBSyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxNQUFNO1VBQ0wsTUFBTTNhLE1BQUksQ0FBQ21hLFFBQVEsQ0FBQ08sT0FBTyxDQUFDLENBQUM7UUFDL0I7TUFBQztJQUNIO0lBRUExbUIsSUFBSUEsQ0FBQSxFQUFJO01BQUEsSUFBQWtPLE1BQUE7TUFDTjBZLElBQUksQ0FBQ3NCLGNBQWMsQ0FBQ0MsYUFBYSxDQUFDO01BRWxDQSxhQUFhLENBQUNDLFFBQVEsQ0FBQztRQUFDQyxRQUFRLEVBQUVsb0IsTUFBTSxDQUFDQyxXQUFXLENBQUNDLElBQUksQ0FBQ2lvQixrQkFBa0IsQ0FBQyxJQUFJLENBQUNybkIsRUFBRTtNQUFDLENBQUMsQ0FBQztNQUV2RixJQUFJLENBQUNrbEIsUUFBUSxHQUFHLElBQUksQ0FBQ0ksY0FBYyxDQUFDLENBQUM7TUFFckMsSUFBSSxDQUFDUyxxQkFBcUIsQ0FBQyxDQUFDO01BRTVCLElBQUksSUFBSSxDQUFDWixZQUFZLEVBQUU7UUFFckIsSUFBSSxDQUFDbmxCLEVBQUUsQ0FBQ2hCLGdCQUFnQixDQUFDLElBQUksQ0FBQ29DLElBQUk7VUFBQSxJQUFBK0ksS0FBQSxHQUFBSixpQkFBQSxDQUFFLFdBQU9wTCxDQUFDLEVBQUs7WUFDL0MsSUFBSSxDQUFDc08sTUFBSSxDQUFDaVksUUFBUSxDQUFDb0MsUUFBUSxDQUFDLENBQUMsRUFBRTtjQUM3QixJQUFNQyxjQUFjLEdBQUd0YSxNQUFJLENBQUNqTixFQUFFLENBQUM4RCxZQUFZLENBQUMsTUFBTSxDQUFDOztjQUVuRDtjQUNBLElBQUksQ0FBQ3lqQixjQUFjLEVBQUU7Z0JBQ25CNW9CLENBQUMsQ0FBQzhELGNBQWMsQ0FBQyxDQUFDO2NBQ3BCO2NBQ0EsTUFBTXdLLE1BQUksQ0FBQzRaLGlCQUFpQixDQUFDLENBQUM7WUFDaEM7VUFDRixDQUFDO1VBQUEsaUJBQUFuYyxFQUFBO1lBQUEsT0FBQVAsS0FBQSxDQUFBUSxLQUFBLE9BQUE5RixTQUFBO1VBQUE7UUFBQSxJQUFDO01BRUo7SUFFRjtJQUVBLE9BQU90RyxHQUFHQSxDQUFBLEVBQStCO01BQUEsSUFBN0JxRyxXQUFXLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHckcsUUFBUSxDQUFDd0csSUFBSTtNQUNyQztNQUNBO01BQ0E7TUFDQSxJQUFNd2lCLE9BQU8sR0FBR0MsV0FBVyxDQUFDLE1BQU07UUFDaEMsSUFBSSxDQUFDam5CLElBQUksQ0FBQ0MsS0FBSyxDQUFDNEUsWUFBWSxDQUFDcWlCLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLEVBQUU7VUFDMUQsSUFBTWpNLFFBQVEsR0FBRywrREFBK0Q7VUFDaEYsSUFBTXhXLEtBQUssR0FBRyxDQUFDLEdBQUdMLFdBQVcsQ0FBQ25HLGdCQUFnQixDQUFDZ2QsUUFBUSxDQUFDLENBQUM7VUFFekR4VyxLQUFLLENBQUN2RyxPQUFPLENBQUN3RyxDQUFDLElBQUk7WUFDakIsSUFBTWxGLEVBQUUsR0FBRyxJQUFJeWtCLGFBQWEsQ0FBQ3ZmLENBQUMsQ0FBQztZQUMvQmxGLEVBQUUsQ0FBQ2pCLElBQUksQ0FBQyxDQUFDO1VBQ1gsQ0FBQyxDQUFDO1VBQ0Y0b0IsYUFBYSxDQUFDSCxPQUFPLENBQUM7UUFDeEI7TUFDRixDQUFDLEVBQUUsR0FBRyxDQUFDO0lBQ1Q7RUFDRjtFQUtBaHBCLFFBQVEsQ0FBQ1EsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsTUFBTTtJQUNsRHlsQixhQUFhLENBQUNsbUIsR0FBRyxDQUFDLENBQUM7RUFDckIsQ0FBQyxDQUFDO0VBRUZXLE1BQU0sQ0FBQ0MsV0FBVyxHQUFHRCxNQUFNLENBQUNDLFdBQVcsSUFBSSxDQUFDLENBQUM7RUFDN0NELE1BQU0sQ0FBQ0MsV0FBVyxDQUFDc2xCLGFBQWEsR0FBR0EsYUFBYTtBQUdsRCxDQUFDLEVBQUUsQ0FBQzs7Ozs7Ozs7OztBQ3BMSixDQUFDLFlBQVU7RUFDVCxZQUFZOztFQUNaLE1BQU1tRCxLQUFLLENBQUM7SUFDVjduQixXQUFXQSxDQUFDQyxFQUFFLEVBQUU7TUFDZCxJQUFJLENBQUNBLEVBQUUsR0FBR0EsRUFBRTtNQUNaLElBQUksQ0FBQzZuQixRQUFRLEdBQUcsSUFBSTtNQUNwQixJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJQyxJQUFJLENBQUNBLElBQUksQ0FBQ3RuQixLQUFLLENBQUNULEVBQUUsQ0FBQzhELFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO01BQ3BFLElBQUksQ0FBQ2trQixLQUFLLEdBQUdob0IsRUFBRSxDQUFDMkQsYUFBYSxDQUFDLHdCQUF3QixDQUFDO01BQ3ZELElBQUksQ0FBQ3NrQixPQUFPLEdBQUdqb0IsRUFBRSxDQUFDMkQsYUFBYSxDQUFDLDBCQUEwQixDQUFDO01BQzNELElBQUksQ0FBQ3VrQixTQUFTLEdBQUdsb0IsRUFBRSxDQUFDMkQsYUFBYSxDQUFDLDRCQUE0QixDQUFDO01BQy9ELElBQUksQ0FBQ3drQixTQUFTLEdBQUdub0IsRUFBRSxDQUFDMkQsYUFBYSxDQUFDLDRCQUE0QixDQUFDO0lBQ2pFO0lBR0F5a0IsSUFBSUEsQ0FBQSxFQUFJO01BQ04sSUFBTUMsR0FBRyxHQUFHLElBQUlOLElBQUksQ0FBQyxDQUFDO01BQ3RCLElBQU1PLFVBQVUsR0FBRyxJQUFJLENBQUNSLFNBQVMsQ0FBQ1MsT0FBTyxDQUFDLENBQUMsR0FBR0YsR0FBRyxDQUFDRSxPQUFPLENBQUMsQ0FBQztNQUMzRCxJQUFNQyxTQUFTLEdBQUd4aUIsSUFBSSxDQUFDeWlCLEtBQUssQ0FBQ0gsVUFBVSxHQUFHLElBQUksQ0FBQztNQUMvQyxJQUFNSSxRQUFRLEdBQUcxaUIsSUFBSSxDQUFDMmlCLEtBQUssQ0FBQ0gsU0FBUyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7TUFFaEQsSUFBSSxDQUFDUixLQUFLLENBQUMvVCxXQUFXLEdBQUdoRCxNQUFNLENBQUNqTCxJQUFJLENBQUMyaUIsS0FBSyxDQUFDRCxRQUFRLEdBQUcsRUFBRSxDQUFDLENBQUM7TUFDMUQsSUFBSSxDQUFDVCxPQUFPLENBQUNoVSxXQUFXLEdBQUdoRCxNQUFNLENBQUN5WCxRQUFRLEdBQUcsRUFBRSxDQUFDO01BQ2hELElBQUksQ0FBQ1IsU0FBUyxDQUFDalUsV0FBVyxHQUFHaEQsTUFBTSxDQUFDakwsSUFBSSxDQUFDMmlCLEtBQUssQ0FBQ0gsU0FBUyxHQUFHLEVBQUUsQ0FBQyxHQUFJRSxRQUFRLEdBQUcsRUFBRyxDQUFDO01BQ2pGLElBQUksQ0FBQ1AsU0FBUyxDQUFDbFUsV0FBVyxHQUFHaEQsTUFBTSxDQUFDdVgsU0FBUyxHQUFHLEVBQUUsQ0FBQztNQUVuRCxJQUFJRixVQUFVLElBQUksQ0FBQyxFQUFHO1FBQ3BCLElBQUksQ0FBQ3RGLElBQUksQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDNEYsT0FBTyxDQUFDLENBQUM7TUFDaEI7SUFDRjtJQUdBN3BCLElBQUlBLENBQUEsRUFBSTtNQUNOLElBQUksQ0FBQ2lrQixJQUFJLENBQUMsQ0FBQztNQUNYLElBQUksQ0FBQzhFLFNBQVMsR0FBRyxJQUFJQyxJQUFJLENBQUNBLElBQUksQ0FBQ3RuQixLQUFLLENBQUMsSUFBSSxDQUFDVCxFQUFFLENBQUM4RCxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztNQUN6RSxJQUFNc2tCLElBQUksR0FBRyxJQUFJLENBQUNBLElBQUksQ0FBQ2pvQixJQUFJLENBQUMsSUFBSSxDQUFDO01BQ2pDLElBQUksQ0FBQ2lvQixJQUFJLENBQUMsQ0FBQztNQUNYLElBQUksQ0FBQ1AsUUFBUSxHQUFHSixXQUFXLENBQUNXLElBQUksRUFBRSxJQUFJLENBQUM7SUFDekM7SUFHQXBGLElBQUlBLENBQUEsRUFBSTtNQUNOLElBQUksQ0FBQzZFLFFBQVEsR0FBRyxJQUFJO0lBQ3RCO0lBRUFlLE9BQU9BLENBQUEsRUFBSTtNQUNULElBQUksQ0FBQ1osS0FBSyxDQUFDL1QsV0FBVyxHQUFHLEdBQUc7TUFDNUIsSUFBSSxDQUFDZ1UsT0FBTyxDQUFDaFUsV0FBVyxHQUFHLEdBQUc7TUFDOUIsSUFBSSxDQUFDaVUsU0FBUyxDQUFDalUsV0FBVyxHQUFHLEdBQUc7TUFDaEMsSUFBSSxDQUFDa1UsU0FBUyxDQUFDbFUsV0FBVyxHQUFHLEdBQUc7SUFDbEM7SUFFQSxPQUFPMVYsR0FBR0EsQ0FBQSxFQUErQjtNQUFBLElBQTdCcUcsV0FBVyxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBR3JHLFFBQVEsQ0FBQ3dHLElBQUk7TUFDckMsSUFBTXlXLFFBQVEsR0FBRyx1QkFBdUI7TUFDeEMsSUFBTW9OLE1BQU0sR0FBRyxDQUFDLEdBQUdqa0IsV0FBVyxDQUFDbkcsZ0JBQWdCLENBQUNnZCxRQUFRLENBQUMsQ0FBQztNQUUxRG9OLE1BQU0sQ0FBQ25xQixPQUFPLENBQUNvcUIsQ0FBQyxJQUFJO1FBQ2xCLElBQU1DLEtBQUssR0FBRyxJQUFJbkIsS0FBSyxDQUFDa0IsQ0FBQyxDQUFDO1FBQzFCQyxLQUFLLENBQUNocUIsSUFBSSxDQUFDLENBQUM7TUFDZCxDQUFDLENBQUM7SUFDSjtFQUNGO0VBRUFQLFFBQVEsQ0FBQ1EsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsTUFBTTtJQUNsRDRvQixLQUFLLENBQUNycEIsR0FBRyxDQUFDLENBQUM7RUFDYixDQUFDLENBQUM7RUFHRlcsTUFBTSxDQUFDQyxXQUFXLEdBQUdELE1BQU0sQ0FBQ0MsV0FBVyxJQUFJLENBQUMsQ0FBQztFQUM3Q0QsTUFBTSxDQUFDQyxXQUFXLENBQUN5b0IsS0FBSyxHQUFHQSxLQUFLO0FBQ2xDLENBQUMsRUFBRSxDQUFDOzs7Ozs7Ozs7O0FDdEVKLENBQUMsWUFBVTtFQUNULFlBQVk7O0VBRVosSUFBTW9CLGVBQWUsR0FBRyxhQUFhO0VBQ3JDLElBQU1DLHdCQUF3QixHQUFHLG9CQUFvQjtFQUVyRCxNQUFNN3BCLElBQUksQ0FBQztJQUVULE9BQU9vRixTQUFTQSxDQUFFeEUsRUFBRSxFQUFFO01BQ3BCLElBQUksQ0FBQ0EsRUFBRSxFQUFFO01BQ1QsT0FBTyxDQUFDLENBQUNBLEVBQUUsQ0FBQ3NDLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDN0I7SUFFQSxPQUFPK2tCLGtCQUFrQkEsQ0FBQ3JuQixFQUFFLEVBQUU7TUFDNUIsT0FBTyxJQUFJLENBQUN3RSxTQUFTLENBQUN4RSxFQUFFLENBQUMsR0FBR3hCLFFBQVEsQ0FBQ21GLGFBQWEsQ0FBQ3NsQix3QkFBd0IsQ0FBQyxHQUFHenFCLFFBQVEsQ0FBQzBxQixlQUFlO0lBQ3pHO0lBRUEsT0FBT0MsZUFBZUEsQ0FBQ25wQixFQUFFLEVBQUVvcEIsRUFBRSxFQUFFO01BQzdCLElBQU1DLFlBQVksR0FBRyxJQUFJLENBQUNoQyxrQkFBa0IsQ0FBQ3JuQixFQUFFLENBQUM7TUFDaEQsSUFBTXNwQixnQkFBZ0IsR0FBR0QsWUFBWSxDQUFDRSxTQUFTO01BQy9DLElBQUlDLFNBQVMsR0FBRyxDQUFDO01BQ2pCLElBQU1DLFlBQVksR0FBR2pyQixRQUFRLENBQUNtRixhQUFhLENBQUNxbEIsZUFBZSxDQUFDO01BRTVELElBQUlTLFlBQVksRUFBRTtRQUNoQixJQUFNQyxjQUFjLEdBQUd6SyxnQkFBZ0IsQ0FBQ3dLLFlBQVksQ0FBQyxDQUFDbGpCLE1BQU07UUFDNURpakIsU0FBUyxHQUFHRSxjQUFjLEtBQUssTUFBTSxHQUFHLENBQUMsR0FBR3ZZLFFBQVEsQ0FBQ3VZLGNBQWMsQ0FBQztNQUN0RTtNQUVBLElBQU0vakIsSUFBSSxHQUFHM0YsRUFBRSxDQUFDNEYscUJBQXFCLENBQUMsQ0FBQztNQUN2QyxJQUFNc0csTUFBTSxHQUFHdkcsSUFBSSxDQUFDUSxHQUFHLEdBQUdxakIsU0FBUztNQUNuQyxJQUFNcmpCLEdBQUcsR0FBRytGLE1BQU0sR0FBRyxDQUFDLEdBQ2xCbEcsSUFBSSxDQUFDeWMsR0FBRyxDQUFDNkcsZ0JBQWdCLEdBQUd0akIsSUFBSSxDQUFDeWMsR0FBRyxDQUFDdlcsTUFBTSxDQUFDLENBQUMsR0FDN0NsRyxJQUFJLENBQUN5YyxHQUFHLENBQUM2RyxnQkFBZ0IsR0FBR3RqQixJQUFJLENBQUN5YyxHQUFHLENBQUN2VyxNQUFNLENBQUMsQ0FBQztNQUNqRCxJQUFNd0wsT0FBTyxHQUFHO1FBQUV2UixHQUFHO1FBQUVNLFFBQVEsRUFBRTtNQUFRLENBQUM7TUFDMUM0aUIsWUFBWSxDQUFDM2tCLFFBQVEsQ0FBQ2dULE9BQU8sQ0FBQztNQUM5QixJQUFJMFIsRUFBRSxFQUFFQSxFQUFFLENBQUMsQ0FBQztJQUNkO0lBRUEsT0FBT08sY0FBY0EsQ0FBQzNwQixFQUFFLEVBQUVvcEIsRUFBRSxFQUFFO01BQzVCLElBQUk1cUIsUUFBUSxDQUFDb3JCLFVBQVUsS0FBSyxVQUFVLEVBQUU7UUFDdEM7UUFDQSxJQUFJLENBQUNULGVBQWUsQ0FBQ25wQixFQUFFLEVBQUVvcEIsRUFBRSxDQUFDO01BQzlCLENBQUMsTUFBTTtRQUNMO1FBQ0FscUIsTUFBTSxDQUFDRixnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsTUFBTTtVQUNwQztVQUNBNnFCLHFCQUFxQixDQUFDLE1BQU0sSUFBSSxDQUFDVixlQUFlLENBQUNucEIsRUFBRSxFQUFFb3BCLEVBQUUsQ0FBQyxDQUFDO1FBQzNELENBQUMsRUFBRTtVQUFFVSxJQUFJLEVBQUU7UUFBSyxDQUFDLENBQUM7TUFDcEI7SUFDRjtJQUVBLE9BQU9wbEIsUUFBUUEsQ0FBQzFFLEVBQUUsRUFBRW9wQixFQUFFLEVBQUU7TUFDdEIsSUFBSSxDQUFDTyxjQUFjLENBQUMzcEIsRUFBRSxFQUFFb3BCLEVBQUUsQ0FBQztJQUM3QjtJQUVBLE9BQU94bEIsU0FBU0EsQ0FBRTVELEVBQUUsRUFBRTtNQUNwQkEsRUFBRSxDQUFDOFcsU0FBUyxDQUFDSyxHQUFHLENBQUMsTUFBTSxDQUFDO01BQ3hCLElBQU1rUyxZQUFZLEdBQUcsSUFBSSxDQUFDaEMsa0JBQWtCLENBQUNybkIsRUFBRSxDQUFDO01BRWhELElBQUcsSUFBSSxDQUFDd0UsU0FBUyxDQUFDeEUsRUFBRSxDQUFDLEVBQUU7UUFDckJxcEIsWUFBWSxDQUFDenFCLEtBQUssQ0FBQ21yQixPQUFPLEdBQUcsUUFBUTtRQUNyQy9wQixFQUFFLENBQUNwQixLQUFLLENBQUN1SCxHQUFHLE1BQUF6RSxNQUFBLENBQU0ybkIsWUFBWSxDQUFDRSxTQUFTLE9BQUk7TUFDOUM7TUFFQUYsWUFBWSxDQUFDenFCLEtBQUssQ0FBQ29yQixRQUFRLEdBQUcsUUFBUTs7TUFFdEM7TUFDQSxJQUFNcE0sS0FBSyxHQUFHNWQsRUFBRSxDQUFDMkQsYUFBYSxDQUFDLG9CQUFvQixDQUFDO01BRXBELElBQU1zbUIsV0FBVyxHQUFHQSxDQUFBLEtBQU07UUFDeEJyTSxLQUFLLENBQUM1RyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUVrVCxZQUFZLENBQUM7UUFDaERscUIsRUFBRSxDQUFDZ1gsbUJBQW1CLENBQUMsV0FBVyxFQUFFbVQsV0FBVyxDQUFDO01BQ2xELENBQUM7TUFFRCxJQUFNRCxZQUFZLEdBQUl2ckIsQ0FBQyxJQUFLO1FBQzFCQSxDQUFDLENBQUM2RCxlQUFlLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUN3VCxTQUFTLENBQUNoVyxFQUFFLENBQUM7UUFDbEJpcUIsV0FBVyxDQUFDLENBQUM7TUFDZixDQUFDOztNQUVEO01BQ0EsSUFBTUUsV0FBVyxHQUFJeHJCLENBQUMsSUFBSztRQUN6QixJQUFJcUIsRUFBRSxLQUFLckIsQ0FBQyxDQUFDa0MsTUFBTSxFQUFFO1VBQ25CLElBQUksQ0FBQ21WLFNBQVMsQ0FBQ2hXLEVBQUUsQ0FBQztVQUNsQmlxQixXQUFXLENBQUMsQ0FBQztRQUNmO01BQ0YsQ0FBQztNQUVEck0sS0FBSyxDQUFDNWUsZ0JBQWdCLENBQUMsT0FBTyxFQUFFa3JCLFlBQVksQ0FBQztNQUM3Q2xxQixFQUFFLENBQUNoQixnQkFBZ0IsQ0FBQyxXQUFXLEVBQUVtckIsV0FBVyxDQUFDO0lBQy9DO0lBRUEsT0FBT25VLFNBQVNBLENBQUVoVyxFQUFFLEVBQUU7TUFDcEJBLEVBQUUsQ0FBQzhXLFNBQVMsQ0FBQzVILE1BQU0sQ0FBQyxNQUFNLENBQUM7TUFDM0IsSUFBTW1hLFlBQVksR0FBRyxJQUFJLENBQUNoQyxrQkFBa0IsQ0FBQ3JuQixFQUFFLENBQUM7TUFFaEQsSUFBRyxJQUFJLENBQUN3RSxTQUFTLENBQUN4RSxFQUFFLENBQUMsRUFBRTtRQUNyQkEsRUFBRSxDQUFDcEIsS0FBSyxDQUFDdUgsR0FBRyxHQUFHLENBQUM7UUFDaEJrakIsWUFBWSxDQUFDenFCLEtBQUssQ0FBQ21yQixPQUFPLEdBQUcsSUFBSTtNQUNuQztNQUVBVixZQUFZLENBQUN6cUIsS0FBSyxDQUFDb3JCLFFBQVEsR0FBRyxJQUFJO0lBQ3BDO0lBRUEsT0FBT2xMLHNCQUFzQkEsQ0FBRTllLEVBQUUsRUFBRW9wQixFQUFFLEVBQUU7TUFDckM7TUFDQSxJQUFNZ0IsYUFBYSxHQUFHLElBQUlDLGNBQWMsQ0FBQ0MsT0FBTyxJQUFJO1FBQ2xEbEIsRUFBRSxDQUFDa0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ2hCLENBQUMsQ0FBQztNQUNGRixhQUFhLENBQUNwSSxPQUFPLENBQUNoaUIsRUFBRSxDQUFDO0lBQzNCO0lBRUEsT0FBT2lrQixtQkFBbUJBLENBQUVqa0IsRUFBRSxFQUFFb3BCLEVBQUUsRUFBRTtNQUNsQyxJQUFNeEgsUUFBUSxHQUFHLElBQUkySSxnQkFBZ0IsQ0FBRUMsYUFBYSxJQUFLO1FBQ3ZEcEIsRUFBRSxDQUFDb0IsYUFBYSxDQUFDN2QsTUFBTSxDQUFDbU0sQ0FBQyxJQUFJOVksRUFBRSxLQUFLOFksQ0FBQyxDQUFDalksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDbkQsQ0FBQyxDQUFDO01BRUYsSUFBTTRwQixNQUFNLEdBQUc7UUFBRUMsVUFBVSxFQUFFLElBQUk7UUFBRUMsZUFBZSxFQUFFLENBQUMsT0FBTyxDQUFDO1FBQUVDLE9BQU8sRUFBRTtNQUFLLENBQUM7TUFDOUVoSixRQUFRLENBQUNJLE9BQU8sQ0FBQ2hpQixFQUFFLEVBQUV5cUIsTUFBTSxDQUFDO0lBQzlCO0lBRUEsT0FBT2xvQixRQUFRQSxDQUFFRixJQUFJLEVBQUU7TUFDckJBLElBQUksQ0FBQ3lVLFNBQVMsQ0FBQzVILE1BQU0sQ0FBQyxRQUFRLENBQUM7TUFDL0IsSUFBTTZQLFNBQVMsR0FBRyxJQUFJLENBQUNzSSxrQkFBa0IsQ0FBQ2hsQixJQUFJLENBQUM7TUFDL0MwYyxTQUFTLENBQUNuZ0IsS0FBSyxDQUFDb3JCLFFBQVEsR0FBRyxJQUFJO01BQy9CakwsU0FBUyxDQUFDbmdCLEtBQUssQ0FBQ2lzQixXQUFXLEdBQUcsSUFBSTtJQUNwQztJQUVBLE9BQU9DLFFBQVFBLENBQUV6b0IsSUFBSSxFQUFFO01BQ3JCQSxJQUFJLENBQUN5VSxTQUFTLENBQUNLLEdBQUcsQ0FBQyxRQUFRLENBQUM7TUFDNUIsSUFBTTRILFNBQVMsR0FBRyxJQUFJLENBQUNzSSxrQkFBa0IsQ0FBQ2hsQixJQUFJLENBQUM7TUFDL0MwYyxTQUFTLENBQUNuZ0IsS0FBSyxDQUFDb3JCLFFBQVEsR0FBRyxRQUFRO01BQ25DO01BQ0FqTCxTQUFTLENBQUNuZ0IsS0FBSyxDQUFDaXNCLFdBQVcsR0FBRyxNQUFNO01BQ3BDO01BQ0E7SUFDRjs7SUFFQSxPQUFPak0sUUFBUUEsQ0FBQSxFQUFHO01BQ2hCLElBQU1tTSxPQUFPLEdBQUcsQ0FDZCxVQUFVLEVBQ1YsUUFBUSxFQUNSLFNBQVMsRUFDVCxPQUFPLEVBQ1AsT0FBTyxFQUNQLGFBQWEsRUFDYixnQkFBZ0IsQ0FDakI7TUFFRCxPQUFPQSxPQUFPLENBQUNsVyxJQUFJLENBQUVtVyxXQUFXLElBQUs7UUFDbkMsT0FBT0MsU0FBUyxDQUFDQyxTQUFTLENBQUNoWCxLQUFLLENBQUM4VyxXQUFXLENBQUM7TUFDL0MsQ0FBQyxDQUFDO0lBQ0o7SUFFQSxPQUFPL3JCLGNBQWNBLENBQUV5USxNQUFNLEVBQUU7TUFDN0IsSUFBTXliLFFBQVEsR0FBR0MsR0FBRyxJQUFJLE9BQU9BLEdBQUcsS0FBSyxRQUFRLElBQUksb0JBQW9CLENBQUNDLElBQUksQ0FBQ0QsR0FBRyxDQUFDO01BRWpGLElBQUksT0FBTzFiLE1BQU0sS0FBSyxRQUFRLEVBQUU7UUFDOUIsT0FBT0EsTUFBTTtNQUNmO01BQ0EsSUFBSSxDQUFDeWIsUUFBUSxDQUFDemIsTUFBTSxDQUFDLEVBQUU7UUFDckIsT0FBT0EsTUFBTTtNQUNmO01BQ0EsT0FBTyxJQUFJNGIsV0FBVyxDQUFDLENBQUMsQ0FBQ0MsTUFBTSxDQUFDQyxVQUFVLENBQUM3YyxJQUFJLENBQUM4YyxJQUFJLENBQUMvYixNQUFNLENBQUMsRUFBRWdjLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RjtJQUVBLE9BQU9yYyxjQUFjQSxDQUFFc2MsR0FBRyxFQUFFO01BQzFCLElBQUksT0FBT0EsR0FBRyxLQUFLLFFBQVEsRUFBRTtRQUMzQixPQUFPQSxHQUFHO01BQ1o7TUFDQSxPQUFPQyxJQUFJLENBQUM1YSxNQUFNLENBQUM2YSxhQUFhLENBQUMsR0FBRyxJQUFJQyxXQUFXLENBQUMsQ0FBQyxDQUFDQyxNQUFNLENBQUNKLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckU7SUFHQSxPQUFPdmMsUUFBUUEsQ0FBRTRjLElBQUksRUFBRUMsSUFBSSxFQUFxQjtNQUFBLElBQW5CQyxTQUFTLEdBQUF0bkIsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsS0FBSztNQUM1QyxJQUFJdW5CLE9BQU87TUFDWCxPQUFPLFlBQWE7UUFBQSxTQUFBQyxJQUFBLEdBQUF4bkIsU0FBQSxDQUFBQyxNQUFBLEVBQVR3bkIsSUFBSSxPQUFBNWQsS0FBQSxDQUFBMmQsSUFBQSxHQUFBRSxJQUFBLE1BQUFBLElBQUEsR0FBQUYsSUFBQSxFQUFBRSxJQUFBO1VBQUpELElBQUksQ0FBQUMsSUFBQSxJQUFBMW5CLFNBQUEsQ0FBQTBuQixJQUFBO1FBQUE7UUFDYixJQUFNQyxLQUFLLEdBQUdBLENBQUEsS0FBTTtVQUNsQkosT0FBTyxHQUFHLElBQUk7VUFDZCxJQUFJLENBQUNELFNBQVMsRUFBRUYsSUFBSSxDQUFDLEdBQUdLLElBQUksQ0FBQztRQUMvQixDQUFDO1FBQ0QsSUFBTUcsT0FBTyxHQUFHTixTQUFTLElBQUksQ0FBQ0MsT0FBTztRQUNyQ00sWUFBWSxDQUFDTixPQUFPLENBQUM7UUFDckJBLE9BQU8sR0FBR08sVUFBVSxDQUFDSCxLQUFLLEVBQUVOLElBQUksQ0FBQztRQUNqQyxJQUFJTyxPQUFPLEVBQUVSLElBQUksQ0FBQyxHQUFHSyxJQUFJLENBQUM7TUFDNUIsQ0FBQztJQUNIOztJQUVBO0lBQ0EsT0FBTzltQix1Q0FBdUNBLENBQUU2RixPQUFPLEVBQUV1aEIsZUFBZSxFQUFFO01BQ3hFLElBQU1DLFVBQVUsR0FBR3JzQixJQUFJLENBQUNDLEtBQUssQ0FBQ0QsSUFBSSxDQUFDMk0sU0FBUyxDQUFDOUIsT0FBTyxDQUFDLENBQUM7TUFFdEQsU0FBU3loQixVQUFVQSxDQUFFdGhCLEtBQUssRUFBRTtRQUMxQixPQUFPQSxLQUFLLENBQUM3RyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUk2RyxLQUFLLENBQUM3RyxRQUFRLENBQUMsS0FBSyxDQUFDO01BQ3ZEO01BRUEsU0FBU29vQixnQkFBZ0JBLENBQUVuQixHQUFHLEVBQUVvQixRQUFRLEVBQUU7UUFDeEMsSUFBTUMsS0FBSyxHQUFHLHNCQUFzQjtRQUNwQyxPQUFPckIsR0FBRyxDQUFDc0IsT0FBTyxDQUFDRCxLQUFLLEVBQUUsQ0FBQ3BnQixDQUFDLEVBQUVzZ0IsWUFBWSxLQUFLSCxRQUFRLENBQUNHLFlBQVksQ0FBQyxDQUFDO01BQ3hFO01BRUEsU0FBU0MsZ0JBQWdCQSxDQUFFeEIsR0FBRyxFQUFFeUIsT0FBTyxFQUFFO1FBRXZDLElBQUksQ0FBQ3pCLEdBQUcsSUFBSSxDQUFDeUIsT0FBTyxFQUFFO1VBQ3BCLE9BQU8sRUFBRTtRQUNYO1FBRUEsSUFBTUMsSUFBSSxHQUFHMUIsR0FBRyxDQUFDc0IsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQ2hwQixJQUFJLENBQUMsQ0FBQztRQUM1QyxJQUFNb0ssSUFBSSxHQUFHZ2YsSUFBSSxDQUFDdHBCLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDNUIsT0FBT3NLLElBQUksQ0FBQ29GLE1BQU0sQ0FBQyxDQUFDQyxHQUFHLEVBQUVwSSxHQUFHLEtBQUtvSSxHQUFHLElBQUlBLEdBQUcsQ0FBQ3BJLEdBQUcsQ0FBQyxFQUFFOGhCLE9BQU8sQ0FBQztNQUM1RDtNQUVBUixVQUFVLENBQUN2Z0IsSUFBSSxDQUFDNU4sT0FBTyxDQUFDNnVCLE1BQU0sSUFBSTtRQUNoQ0EsTUFBTSxDQUFDL2dCLEdBQUcsQ0FBQzlOLE9BQU8sQ0FBQzh1QixZQUFZLElBQUk7VUFDakNqa0IsTUFBTSxDQUFDVSxPQUFPLENBQUN1akIsWUFBWSxDQUFDLENBQUM5dUIsT0FBTyxDQUFDMEwsSUFBQSxJQUE0QjtZQUFBLElBQTNCLENBQUNxakIsUUFBUSxFQUFFQyxVQUFVLENBQUMsR0FBQXRqQixJQUFBO1lBQzFEYixNQUFNLENBQUNVLE9BQU8sQ0FBQ3lqQixVQUFVLENBQUMsQ0FBQ2h2QixPQUFPLENBQUN5TCxLQUFBLElBQW9DO2NBQUEsSUFBbkMsQ0FBQ3dqQixZQUFZLEVBQUU1bUIsY0FBYyxDQUFDLEdBQUFvRCxLQUFBO2NBQ2hFLElBQ0UsT0FBT3BELGNBQWMsS0FBSyxRQUFRLElBQ2xDLENBQUMrbEIsVUFBVSxDQUFDL2xCLGNBQWMsQ0FBQyxJQUMzQjRtQixZQUFZLEtBQUssVUFBVSxFQUMzQjtjQUVGLElBQU1YLFFBQVEsR0FBR1ksUUFBUSxJQUFJUixnQkFBZ0IsQ0FBQ1EsUUFBUSxFQUFFaEIsZUFBZSxDQUFDO2NBQ3hFLElBQUlpQixpQkFBaUIsR0FBR2QsZ0JBQWdCLENBQUNobUIsY0FBYyxFQUFFaW1CLFFBQVEsQ0FBQztjQUVsRSxJQUFJYyxTQUFTLEdBQUcxdUIsSUFBSSxDQUFDZ0ksbUJBQW1CLENBQUNDLE1BQU07Y0FFL0MsSUFBSXFtQixVQUFVLENBQUN4bUIsUUFBUSxJQUFJd21CLFVBQVUsQ0FBQ3htQixRQUFRLENBQUNDLFVBQVUsRUFBRTtnQkFDekQybUIsU0FBUyxHQUFHSixVQUFVLENBQUN4bUIsUUFBUSxDQUFDQyxVQUFVO2NBQzVDO2NBRUEsSUFBSTJtQixTQUFTLEtBQUsxdUIsSUFBSSxDQUFDZ0ksbUJBQW1CLENBQUNLLE9BQU8sRUFBRTtnQkFDbERvbUIsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDQSxpQkFBaUI7Y0FDekMsQ0FBQyxNQUFNLElBQUlDLFNBQVMsS0FBSzF1QixJQUFJLENBQUNnSSxtQkFBbUIsQ0FBQ3dCLEdBQUcsRUFBRTtnQkFDckRpbEIsaUJBQWlCLEdBQUcxYyxRQUFRLENBQUMwYyxpQkFBaUIsQ0FBQztjQUNqRDtjQUVBSCxVQUFVLENBQUNDLFlBQVksQ0FBQyxHQUFHRSxpQkFBaUI7WUFDOUMsQ0FBQyxDQUFDO1VBQ0osQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDO01BQ0osQ0FBQyxDQUFDO01BRUYsT0FBT2hCLFVBQVU7SUFDbkI7SUFDQTs7SUFFQSxPQUFPeHRCLFNBQVNBLENBQUUwdUIsQ0FBQyxFQUFjO01BQUEsSUFBWmpaLEdBQUcsR0FBQWpRLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLElBQUk7TUFDN0IsSUFBSWtwQixDQUFDLElBQUksT0FBT0EsQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUM5QixJQUFNZCxLQUFLLEdBQUduWSxHQUFHLEdBQUcsSUFBSWtaLE1BQU0sUUFBQXRzQixNQUFBLENBQVNvVCxHQUFHLDJCQUF5QixJQUFJLENBQUMsR0FBRyxlQUFlO1FBQzFGLE9BQU9pWixDQUFDLENBQUNiLE9BQU8sQ0FBQ0QsS0FBSyxFQUFFLEVBQUUsQ0FBQztNQUM3QixDQUFDLE1BQU07UUFDTCxPQUFPYyxDQUFDO01BQ1Y7SUFDRjtFQUNGOztFQUVBO0VBQ0EzdUIsSUFBSSxDQUFDa0ksd0JBQXdCLEdBQUc7SUFDOUJhLFFBQVEsRUFBRSxVQUFVO0lBQ3BCRSxZQUFZLEVBQUUsYUFBYTtJQUMzQkUsV0FBVyxFQUFFLFlBQVk7SUFDekJFLGVBQWUsRUFBRSxlQUFlO0lBQ2hDRCxTQUFTLEVBQUUsVUFBVTtJQUNyQkUsYUFBYSxFQUFFLGFBQWE7SUFDNUJuQixNQUFNLEVBQUUsUUFBUTtJQUNoQkcsVUFBVSxFQUFFLFdBQVc7SUFDdkJLLEtBQUssRUFBRSxPQUFPO0lBQ2RFLFNBQVMsRUFBRSxVQUFVO0lBQ3JCZ21CLFFBQVEsRUFBRSxVQUFVO0lBQ3BCQyxZQUFZLEVBQUUsYUFBYTtJQUMzQnBsQixZQUFZLEVBQUUsYUFBYTtJQUMzQkUsa0JBQWtCLEVBQUUsa0JBQWtCO0lBQ3RDRSxTQUFTLEVBQUUsVUFBVTtJQUNyQkUsZUFBZSxFQUFFO0VBQ25CLENBQUM7RUFFRGhLLElBQUksQ0FBQ2dJLG1CQUFtQixHQUFHO0lBQ3pCQyxNQUFNLEVBQUUsTUFBTTtJQUNkSSxPQUFPLEVBQUUsU0FBUztJQUNsQm1CLEdBQUcsRUFBRTtFQUNQLENBQUM7RUFFRHhKLElBQUksQ0FBQ3dJLGdCQUFnQixHQUFHO0lBQ3RCdW1CLG9CQUFvQixFQUFFLG1CQUFtQjtJQUN6Q3RtQix1QkFBdUIsRUFBRTtFQUMzQixDQUFDO0VBRUR6SSxJQUFJLENBQUN5SixlQUFlLEdBQUc7SUFDckJzbEIsb0JBQW9CLEVBQUUsbUJBQW1CO0lBQ3pDdG1CLHVCQUF1QixFQUFFO0VBQzNCLENBQUM7RUFDRDs7RUFFQTNJLE1BQU0sQ0FBQ0MsV0FBVyxHQUFHRCxNQUFNLENBQUNDLFdBQVcsSUFBSSxDQUFDLENBQUM7RUFDN0NELE1BQU0sQ0FBQ0MsV0FBVyxDQUFDQyxJQUFJLEdBQUdBLElBQUk7QUFDaEMsQ0FBQyxFQUFFLENBQUM7Ozs7Ozs7Ozs7QUN4U0osQ0FBQyxZQUFZO0VBQ1gsWUFBWTs7RUFFWixJQUFNZ3ZCLEtBQUssR0FBRyxZQUFZO0VBRTFCLE1BQU16VyxTQUFTLENBQUM7SUFFZDVYLFdBQVdBLENBQUEsRUFBRyxDQUFDO0lBRWYsT0FBT3N1QixVQUFVQSxDQUFBLEVBQUk7TUFDcEIsSUFBTXZaLEdBQUcsR0FBR3RXLFFBQVEsQ0FBQzBVLElBQUksQ0FBQ3ZQLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQztNQUNqRSxPQUFPbVIsR0FBRyxJQUFJQSxHQUFHLENBQUNDLE9BQU8sSUFBSUQsR0FBRyxDQUFDQyxPQUFPLEtBQUssS0FBSztJQUNuRDtJQUVBLE9BQU91WixjQUFjQSxDQUFBLEVBQUk7TUFDdkIsT0FBTy9rQixNQUFNLENBQUNnbEIsV0FBVyxDQUFDLENBQUMsR0FBRyxJQUFJcmpCLGVBQWUsQ0FBQ2hNLE1BQU0sQ0FBQ1MsUUFBUSxDQUFDRSxNQUFNLENBQUMsQ0FBQ29LLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQzBDLE1BQU0sQ0FBRTZoQixLQUFLLElBQUlBLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQ2p0QixVQUFVLENBQUMsTUFBTSxDQUFFLENBQUMsQ0FBQztJQUN0STtJQUVBLE9BQU9rdEIsSUFBSUEsQ0FBQSxFQUFJO01BQ2IsSUFBTWpmLE1BQU0sR0FBR21JLFNBQVMsQ0FBQzJXLGNBQWMsQ0FBQyxDQUFDO01BQ3pDLElBQUksQ0FBQy9rQixNQUFNLENBQUMrRSxJQUFJLENBQUNrQixNQUFNLENBQUMsQ0FBQzFLLE1BQU0sRUFBRTtNQUNqQ08sWUFBWSxDQUFDQyxPQUFPLENBQUM4b0IsS0FBSyxFQUFFNXRCLElBQUksQ0FBQzJNLFNBQVMsQ0FBQ3FDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JEO0lBRUEsT0FBTzhJLEtBQUtBLENBQUEsRUFBSTtNQUNkalQsWUFBWSxDQUFDRSxVQUFVLENBQUM2b0IsS0FBSyxDQUFDO0lBQ2hDO0lBRUEsT0FBT3ZXLFFBQVFBLENBQUEsRUFBSTtNQUNqQixPQUFPclgsSUFBSSxDQUFDQyxLQUFLLENBQUM0RSxZQUFZLENBQUNxaUIsT0FBTyxDQUFDMEcsS0FBSyxDQUFDLENBQUM7SUFDaEQ7SUFFQSxPQUFPcnZCLElBQUlBLENBQUEsRUFBRztNQUNaLElBQUc0WSxTQUFTLENBQUMwVyxVQUFVLENBQUMsQ0FBQyxFQUFFO1FBQ3pCMVcsU0FBUyxDQUFDOFcsSUFBSSxDQUFDLENBQUM7TUFDbEI7SUFDRjtFQUNGO0VBRUE5VyxTQUFTLENBQUM1WSxJQUFJLENBQUMsQ0FBQztFQUVoQkcsTUFBTSxDQUFDQyxXQUFXLEdBQUdELE1BQU0sQ0FBQ0MsV0FBVyxJQUFJLENBQUMsQ0FBQztFQUM3Q0QsTUFBTSxDQUFDQyxXQUFXLENBQUN3WSxTQUFTLEdBQUdBLFNBQVM7QUFDMUMsQ0FBQyxFQUFFLENBQUM7Ozs7Ozs7Ozs7Ozs7OztBQzNDSixDQUFDLFlBQVk7RUFDWCxZQUFZOztFQUNaLElBQU0rVyxjQUFjLEdBQUcsQ0FDckI7SUFDRUMsT0FBTyxFQUFFLFNBQVM7SUFDbEJDLElBQUksRUFBRSxnQ0FBZ0M7SUFDdENDLE1BQU0sRUFBRSxtR0FBbUc7SUFDM0dDLEtBQUssRUFBRSx5RUFBeUU7SUFDaEZDLFlBQVksRUFBRSwwR0FBMEc7SUFDeEhDLGlCQUFpQixFQUFFO01BQ2pCbE0sUUFBUSxFQUFFLFVBQVU7TUFDcEJtTSxJQUFJLEVBQUUsTUFBTTtNQUNaQyxJQUFJLEVBQUUsTUFBTTtNQUNaQyxRQUFRLEVBQUU7SUFDWixDQUFDO0lBQ0RDLFlBQVksRUFBRTtNQUNackksSUFBSSxFQUFFLGtEQUFrRDtNQUN4RHJCLEtBQUssRUFBRTtJQUNUO0VBQ0YsQ0FBQyxFQUNEO0lBQ0VpSixPQUFPLEVBQUUsUUFBUTtJQUNqQkMsSUFBSSxFQUFFLCtCQUErQjtJQUNyQ0MsTUFBTSxFQUFFLHlDQUF5QztJQUNqREMsS0FBSyxFQUFFLHVEQUF1RDtJQUM5REMsWUFBWSxFQUFFLEdBQUc7SUFDakI7SUFDQTtJQUNBQyxpQkFBaUIsRUFBRTtNQUNqQmxNLFFBQVEsRUFBRSxVQUFVO01BQ3BCbU0sSUFBSSxFQUFFLE1BQU07TUFDWkMsSUFBSSxFQUFFLE1BQU07TUFDWkMsUUFBUSxFQUFFO0lBQ1osQ0FBQztJQUNEQyxZQUFZLEVBQUU7TUFDWnJJLElBQUksRUFBRSx3QkFBd0I7TUFDOUJyQixLQUFLLEVBQUUseUJBQXlCO01BQ2hDdUosSUFBSSxFQUFFO0lBQ1I7RUFDRixDQUFDLEVBQ0Q7SUFDRU4sT0FBTyxFQUFFLE9BQU87SUFDaEJDLElBQUksRUFBRSxpQ0FBaUM7SUFDdkNDLE1BQU0sRUFBRSw0QkFBNEI7SUFDcENDLEtBQUssRUFBRSx5Q0FBeUM7SUFDaEQ7SUFDQUMsWUFBWSxFQUFFLGNBQWM7SUFDNUJDLGlCQUFpQixFQUFFO01BQ2pCbE0sUUFBUSxFQUFFLFVBQVU7TUFDcEJtTSxJQUFJLEVBQUUsT0FBTztNQUNiQyxJQUFJLEVBQUUsTUFBTTtNQUNaQyxRQUFRLEVBQUU7SUFDWixDQUFDO0lBQ0RDLFlBQVksRUFBRTtNQUNackksSUFBSSxFQUFFLG1CQUFtQjtNQUN6QnJCLEtBQUssRUFBRTtJQUNUO0VBQ0YsQ0FBQyxFQUNEO0lBQ0VpSixPQUFPLEVBQUUsWUFBWTtJQUNyQkMsSUFBSSxFQUFFLHdCQUF3QjtJQUM5QkMsTUFBTSxFQUFFLHlCQUF5QjtJQUNqQ0MsS0FBSyxFQUFFLHNDQUFzQztJQUM3Q0MsWUFBWSxFQUFFLEdBQUc7SUFDakJDLGlCQUFpQixFQUFFO01BQ2pCbE0sUUFBUSxFQUFFLFVBQVU7TUFDcEJtTSxJQUFJLEVBQUUsTUFBTTtNQUNaQyxJQUFJLEVBQUUsTUFBTTtNQUNaQyxRQUFRLEVBQUU7SUFDWixDQUFDO0lBQ0RDLFlBQVksRUFBRTtNQUNackksSUFBSSxFQUFFLG1CQUFtQjtNQUN6QnJCLEtBQUssRUFBRTtJQUNUO0VBQ0YsQ0FBQyxFQUNEO0lBQ0VpSixPQUFPLEVBQUUsSUFBSTtJQUNiQyxJQUFJLEVBQUUsaUJBQWlCO0lBQ3ZCQyxNQUFNLEVBQUUscUNBQXFDO0lBQzdDQyxLQUFLLEVBQUUsbUVBQW1FO0lBQzFFQyxZQUFZLEVBQUUsR0FBRztJQUNqQkMsaUJBQWlCLEVBQUU7TUFDakJsTSxRQUFRLEVBQUUsVUFBVTtNQUNwQm1NLElBQUksRUFBRSxPQUFPO01BQ2JDLElBQUksRUFBRTtJQUNSLENBQUM7SUFDREUsWUFBWSxFQUFFO01BQ1pySSxJQUFJLEVBQUUsbUJBQW1CO01BQ3pCckIsS0FBSyxFQUFFO0lBQ1Q7RUFDRixDQUFDLENBQ0Y7RUFFRCxJQUFNMkoscUJBQXFCLEdBQUdBLENBQUNwckIsR0FBRyxFQUFFc0gsR0FBRyxLQUFLO0lBQzFDLElBQU0rYSxLQUFLLEdBQUdyaUIsR0FBRyxDQUFDcXJCLE9BQU8sQ0FBQy9qQixHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ3BDLE9BQU82RSxNQUFNLENBQUNuTSxHQUFHLENBQUNxaUIsS0FBSyxHQUFHL2EsR0FBRyxDQUFDekcsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQzVDLENBQUM7RUFFRCxJQUFNeXFCLFFBQVEsR0FBSXRyQixHQUFHLElBQUs7SUFDeEIsSUFBSSxDQUFDQSxHQUFHLEVBQUUsT0FBTyxJQUFJO0lBQ3JCLElBQU11ckIsWUFBWSxHQUFHZCxjQUFjLENBQUM5aUIsSUFBSSxDQUFDa04sQ0FBQyxJQUFJN1UsR0FBRyxDQUFDaVEsS0FBSyxDQUFDNEUsQ0FBQyxDQUFDK1YsTUFBTSxDQUFDLENBQUM7SUFDbEUsSUFBSTVxQixHQUFHLElBQUl1ckIsWUFBWSxFQUFFO01BQ3ZCLElBQU10YixLQUFLLEdBQUdqUSxHQUFHLENBQUNpUSxLQUFLLENBQUNzYixZQUFZLENBQUNWLEtBQUssQ0FBQztNQUMzQyxPQUFBbmYsYUFBQTtRQUNFMUwsR0FBRyxFQUFFaVEsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNibFMsRUFBRSxFQUFFeXRCLFlBQVksQ0FBQ0QsWUFBWSxDQUFDYixPQUFPLEVBQUV6YSxLQUFLO01BQUMsR0FDMUNzYixZQUFZO0lBRW5CO0lBQ0EsT0FBTyxJQUFJO0VBQ2IsQ0FBQztFQUVELElBQU1DLFlBQVksR0FBR0EsQ0FBQ2QsT0FBTyxFQUFFemEsS0FBSyxLQUFLO0lBQ3ZDLElBQUl5YSxPQUFPLEtBQUssSUFBSSxFQUFFO01BQ3BCLE9BQU96YSxLQUFLLHlCQUFBeFMsTUFBQSxDQUF5QndTLEtBQUssQ0FBQyxDQUFDLENBQUMsVUFBQXhTLE1BQUEsQ0FBT3dTLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBRTtJQUNoRTtJQUVBLE9BQU9BLEtBQUssSUFBSUEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDZ1osT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7RUFDM0MsQ0FBQztFQUdELE1BQU13QyxLQUFLLENBQUM7SUFDVjN2QixXQUFXQSxDQUFFQyxFQUFFLEVBQUU7TUFDZixJQUFNMnZCLE1BQU0sR0FBRzN2QixFQUFFLENBQUMyRCxhQUFhLENBQUMsUUFBUSxDQUFDO01BQ3pDLElBQUksQ0FBQzNELEVBQUUsR0FBR0EsRUFBRTtNQUNaLElBQUksQ0FBQzJ2QixNQUFNLEdBQUdBLE1BQU07TUFDcEIsSUFBSSxDQUFDMXJCLEdBQUcsR0FBRzByQixNQUFNLENBQUNydkIsT0FBTyxDQUFDc3ZCLFNBQVMsSUFBSUQsTUFBTSxDQUFDbGIsR0FBRztNQUNqRCxJQUFJLENBQUNvYixlQUFlLEdBQUcsSUFBSSxDQUFDN3ZCLEVBQUUsQ0FBQ3NDLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQztNQUN6RSxJQUFJLENBQUN3dEIsY0FBYyxHQUFHUCxRQUFRLENBQUMsSUFBSSxDQUFDdHJCLEdBQUcsQ0FBQztNQUN4QyxJQUFJLENBQUM4ckIsYUFBYSxHQUFHLElBQUksQ0FBQ0QsY0FBYyxJQUFJLElBQUksQ0FBQ0EsY0FBYyxDQUFDbkIsT0FBTyxLQUFLLFFBQVE7TUFDcEYsSUFBSSxDQUFDcUIsY0FBYyxHQUFHLElBQUksQ0FBQ0YsY0FBYyxJQUFJLElBQUksQ0FBQ0EsY0FBYyxDQUFDbkIsT0FBTyxLQUFLLFNBQVM7TUFDdEYsSUFBSSxDQUFDc0IsU0FBUyxHQUFHLElBQUksQ0FBQ0gsY0FBYyxJQUFJLElBQUksQ0FBQ0EsY0FBYyxDQUFDbkIsT0FBTyxLQUFLLElBQUk7TUFDNUUsSUFBSSxDQUFDeHBCLE1BQU0sR0FBR25GLEVBQUUsQ0FBQzJELGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQztNQUNyRCxJQUFNdXNCLFdBQVcsR0FBRyxJQUFJLENBQUNKLGNBQWMsSUFBSSxJQUFJLENBQUNBLGNBQWMsQ0FBQ2QsaUJBQWlCLENBQUNsTSxRQUFRO01BQ3pGLElBQUksQ0FBQ3FOLGFBQWEsR0FBR0QsV0FBVyxHQUFHYixxQkFBcUIsQ0FBQyxJQUFJLENBQUNwckIsR0FBRyxFQUFFaXNCLFdBQVcsQ0FBQyxHQUFHLENBQUM7TUFDbkYsSUFBSSxDQUFDRSxpQkFBaUIsR0FBR3B3QixFQUFFLENBQUMyRCxhQUFhLENBQUMsc0JBQXNCLENBQUM7TUFDakUsSUFBSSxDQUFDMHNCLGNBQWMsR0FBRyxJQUFJO01BQzFCLElBQUksQ0FBQ0Msb0JBQW9CLEdBQUcsS0FBSztNQUNqQyxJQUFJLENBQUNDLE9BQU8sR0FBRyxLQUFLO01BQ3BCLElBQUksQ0FBQ0MscUJBQXFCLEdBQUcsSUFBSTtJQUNuQztJQUVBampCLE1BQU1BLENBQUVrakIsT0FBTyxFQUFFO01BQUEsSUFBQUMsWUFBQTtNQUNmLEtBQUFBLFlBQUEsR0FBSSxJQUFJLENBQUNmLE1BQU0sY0FBQWUsWUFBQSxlQUFYQSxZQUFBLENBQWFDLGFBQWEsRUFBRTtRQUFBLElBQUFDLHFCQUFBO1FBQzlCLENBQUFBLHFCQUFBLE9BQUksQ0FBQ2pCLE1BQU0sQ0FBQ2dCLGFBQWEsY0FBQUMscUJBQUEsdUJBQXpCQSxxQkFBQSxDQUEyQkMsV0FBVyxDQUFDSixPQUFPLEVBQUUsR0FBRyxDQUFDO01BQ3REO0lBQ0Y7SUFFQTFKLElBQUlBLENBQUEsRUFBSTtNQUFBLElBQUErSixhQUFBO01BQ04sSUFBSSxDQUFDUCxPQUFPLEdBQUcsSUFBSTtNQUNuQixJQUFJLENBQUN2d0IsRUFBRSxDQUFDOFcsU0FBUyxDQUFDSyxHQUFHLENBQUMsTUFBTSxDQUFDO01BQzdCLElBQUksR0FBQTJaLGFBQUEsR0FBQyxJQUFJLENBQUNuQixNQUFNLGNBQUFtQixhQUFBLGVBQVhBLGFBQUEsQ0FBYWh0QixZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUU7UUFDckMsSUFBSSxDQUFDNnJCLE1BQU0sQ0FBQ2xiLEdBQUcsR0FBRyxJQUFJLENBQUN4USxHQUFHO01BQzVCO01BRUEsSUFBSSxJQUFJLENBQUNnc0IsU0FBUyxJQUFJLElBQUksQ0FBQ08scUJBQXFCLEVBQUU7UUFDaEQsSUFBSSxDQUFDQSxxQkFBcUIsQ0FBQ3pKLElBQUksQ0FBQyxDQUFDO01BQ25DO01BRUEsSUFBTTBKLE9BQU8sR0FBRyxJQUFJLENBQUNYLGNBQWMsQ0FBQ1YsWUFBWSxDQUFDckksSUFBSTs7TUFFckQ7TUFDQTtNQUNBLElBQUksQ0FBQyxJQUFJLENBQUNpSixjQUFjLEVBQUU7UUFDeEIsSUFBSSxDQUFDTCxNQUFNLENBQUMvTyxNQUFNLEdBQUcsTUFBTTtVQUN6QixJQUFJLENBQUNyVCxNQUFNLENBQUNrakIsT0FBTyxDQUFDO1FBQ3RCLENBQUM7TUFDSDtNQUNBLElBQUksQ0FBQ2xqQixNQUFNLENBQUNrakIsT0FBTyxDQUFDO01BQ3BCLElBQUksQ0FBQyxJQUFJLENBQUNWLGFBQWEsSUFBSSxDQUFDLElBQUksQ0FBQ08sb0JBQW9CLEVBQUU7UUFDckQsSUFBSSxDQUFDQSxvQkFBb0IsR0FBRyxJQUFJO1FBQ2hDLElBQUksQ0FBQ0QsY0FBYyxHQUFHNUksV0FBVyxDQUFDLE1BQU0sSUFBSSxDQUFDbGEsTUFBTSxDQUFDa2pCLE9BQU8sQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUNsRTlELFVBQVUsQ0FBQyxNQUFNLElBQUksQ0FBQzBELGNBQWMsS0FBSyxJQUFJLElBQUkxSSxhQUFhLENBQUMsSUFBSSxDQUFDMEksY0FBYyxDQUFDLEVBQUUsSUFBSSxDQUFDO01BQzVGO0lBQ0Y7SUFFQTNLLEtBQUtBLENBQUEsRUFBSTtNQUNQLElBQUksQ0FBQzZLLE9BQU8sR0FBRyxLQUFLO01BQ3BCLElBQUksQ0FBQ3Z3QixFQUFFLENBQUM4VyxTQUFTLENBQUM1SCxNQUFNLENBQUMsTUFBTSxDQUFDO01BQ2hDLElBQUksSUFBSSxDQUFDbWhCLGNBQWMsS0FBSyxJQUFJLEVBQUU7UUFDaEMxSSxhQUFhLENBQUMsSUFBSSxDQUFDMEksY0FBYyxDQUFDO1FBQ2xDLElBQUksQ0FBQ0EsY0FBYyxHQUFHLElBQUk7TUFDNUI7TUFFQSxJQUFNSSxPQUFPLEdBQUcsSUFBSSxDQUFDWCxjQUFjLENBQUNWLFlBQVksQ0FBQzFKLEtBQUs7TUFDdEQsSUFBSSxDQUFDblksTUFBTSxDQUFDa2pCLE9BQU8sQ0FBQztNQUVwQixJQUFJLElBQUksQ0FBQ1IsU0FBUyxJQUFJLElBQUksQ0FBQ08scUJBQXFCLEVBQUU7UUFDaEQsSUFBSSxDQUFDQSxxQkFBcUIsQ0FBQzlLLEtBQUssQ0FBQyxDQUFDO01BQ3BDO0lBQ0Y7SUFFQXVKLElBQUlBLENBQUEsRUFBSTtNQUVOLElBQU13QixPQUFPLEdBQUcsSUFBSSxDQUFDWCxjQUFjLENBQUNWLFlBQVksQ0FBQ0gsSUFBSTtNQUNyRCxJQUFJLENBQUMxaEIsTUFBTSxDQUFDa2pCLE9BQU8sQ0FBQztNQUVwQixJQUFJLElBQUksQ0FBQ1IsU0FBUyxJQUFJLElBQUksQ0FBQ08scUJBQXFCLEVBQUU7UUFDaEQsSUFBSSxDQUFDQSxxQkFBcUIsQ0FBQ3ZCLElBQUksQ0FBQyxDQUFDO01BQ25DO0lBQ0Y7SUFFQThCLFVBQVVBLENBQUEsRUFBSTtNQUNaLElBQU10bkIsTUFBTSxHQUFHakwsUUFBUSxDQUFDMFAsYUFBYSxDQUFDLFFBQVEsQ0FBQztNQUMvQ3pFLE1BQU0sQ0FBQ2dMLEdBQUcsR0FBRyxzQ0FBc0M7TUFDbkRoTCxNQUFNLENBQUN1bkIsS0FBSyxHQUFHLElBQUk7TUFDbkJ2bkIsTUFBTSxDQUFDbVgsTUFBTSxHQUFHLE1BQU07UUFDcEIsSUFBSSxDQUFDcVEsY0FBYyxDQUFDLENBQUM7TUFDdkIsQ0FBQztNQUNEenlCLFFBQVEsQ0FBQ3dHLElBQUksQ0FBQzJQLFdBQVcsQ0FBQ2xMLE1BQU0sQ0FBQztJQUNuQztJQUVBd25CLGNBQWNBLENBQUEsRUFBSTtNQUNoQixJQUFJLENBQUN0QixNQUFNLENBQUNsYixHQUFHLEdBQUcsSUFBSSxDQUFDa2IsTUFBTSxDQUFDN3JCLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQztNQUU3RCxJQUFJLENBQUMwc0IscUJBQXFCLEdBQUdVLEVBQUUsQ0FBQ0MsV0FBVyxDQUFDLElBQUksQ0FBQ3hCLE1BQU0sQ0FBQztNQUV4RCxJQUFNeUIsU0FBUyxHQUFHLElBQUkzaEIsR0FBRyxDQUFDLElBQUksQ0FBQ2tnQixNQUFNLENBQUNsYixHQUFHLENBQUM7TUFDMUMsSUFBTWpGLE1BQU0sR0FBRyxJQUFJdEUsZUFBZSxDQUFDa21CLFNBQVMsQ0FBQ3Z4QixNQUFNLENBQUM7TUFDcEQsSUFBTXd4QixVQUFVLEdBQUc3aEIsTUFBTSxDQUFDcEUsR0FBRyxDQUFDLE9BQU8sQ0FBQztNQUV0QyxJQUFJaW1CLFVBQVUsS0FBSyxHQUFHLEVBQUU7UUFDdEIsSUFBSSxDQUFDcEMsSUFBSSxDQUFDLENBQUM7TUFDYjtJQUNGO0lBRUFsd0IsSUFBSUEsQ0FBQSxFQUFJO01BQ04sSUFBSSxJQUFJLENBQUNreEIsU0FBUyxFQUFFO1FBQ2xCLElBQUksQ0FBQ2MsVUFBVSxDQUFDLENBQUM7TUFDbkI7O01BRUE7TUFDQSxJQUFNM0csYUFBYSxHQUFHLElBQUlHLGdCQUFnQixDQUFDRCxPQUFPLElBQUk7UUFDcERBLE9BQU8sQ0FBQzVyQixPQUFPLENBQUMwTCxJQUFBLElBQWdCO1VBQUEsSUFBZjtZQUFFdko7VUFBTyxDQUFDLEdBQUF1SixJQUFBO1VBQ3pCLElBQU1vYyxJQUFJLEdBQUczbEIsTUFBTSxDQUFDaVcsU0FBUyxDQUFDK0MsUUFBUSxDQUFDLE1BQU0sQ0FBQztVQUM5QyxJQUFJLElBQUksQ0FBQzBXLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMvSixJQUFJLEVBQUU7Y0FDVCxJQUFJLENBQUN4bUIsRUFBRSxDQUFDOFcsU0FBUyxDQUFDSyxHQUFHLENBQUMsTUFBTSxDQUFDO1lBQy9CO1VBQ0YsQ0FBQyxNQUFNO1lBQ0wsSUFBSXFQLElBQUksRUFBRTtjQUNSLElBQUksQ0FBQ3htQixFQUFFLENBQUM4VyxTQUFTLENBQUM1SCxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ2xDO1VBQ0Y7UUFDRixDQUFDLENBQUM7TUFDSixDQUFDLENBQUM7O01BRUY7TUFDQSxJQUFNb2lCLGVBQWUsR0FBRyxJQUFJdlAsb0JBQW9CLENBQUU5WCxPQUFPLElBQUs7UUFDNUQsSUFBSUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDMFgsY0FBYyxFQUFFO1VBQzdCLElBQUksSUFBSSxDQUFDd08sYUFBYSxJQUFJLENBQUMsSUFBSSxDQUFDSSxPQUFPLEVBQUU7WUFDdkMsSUFBSSxDQUFDeEosSUFBSSxDQUFDLENBQUM7VUFDYjtRQUNGLENBQUMsTUFBTTtVQUNMLElBQUksSUFBSSxDQUFDd0osT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQzdLLEtBQUssQ0FBQyxDQUFDO1VBQ2Q7UUFDRjtNQUNGLENBQUMsRUFBRTtRQUFFakUsU0FBUyxFQUFFLENBQUM7UUFBRUQsVUFBVSxFQUFFO01BQXdCLENBQUMsQ0FBQztNQUV6RDRJLGFBQWEsQ0FBQ3BJLE9BQU8sQ0FBQyxJQUFJLENBQUNoaUIsRUFBRSxFQUFFO1FBQUUwcUIsVUFBVSxFQUFFLElBQUk7UUFBRUMsZUFBZSxFQUFFLENBQUMsT0FBTztNQUFFLENBQUMsQ0FBQztNQUNoRjJHLGVBQWUsQ0FBQ3RQLE9BQU8sQ0FBQyxJQUFJLENBQUNoaUIsRUFBRSxDQUFDO01BRWhDLElBQUksQ0FBQ21GLE1BQU0sSUFBSSxJQUFJLENBQUNBLE1BQU0sQ0FBQ25HLGdCQUFnQixDQUFDLE9BQU8sRUFBR0wsQ0FBQyxJQUFLO1FBQzFEQSxDQUFDLENBQUM2RCxlQUFlLENBQUMsQ0FBQztRQUNuQixJQUFJLElBQUksQ0FBQyt0QixPQUFPLEVBQUU7VUFDaEIsSUFBSSxDQUFDN0ssS0FBSyxDQUFDLENBQUM7UUFDZCxDQUFDLE1BQU07VUFDTCxJQUFJLENBQUNxQixJQUFJLENBQUMsQ0FBQztRQUNiO01BQ0YsQ0FBQyxDQUFDO01BRUYsSUFBSSxDQUFDL21CLEVBQUUsQ0FBQ2hCLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxNQUFNO1FBQ3RDLElBQUksQ0FBQzBtQixLQUFLLENBQUMsQ0FBQztNQUNkLENBQUMsQ0FBQztNQUVGLElBQU02TCxVQUFVLEdBQUcsSUFBSUMsZUFBZSxDQUFDLENBQUM7TUFFeEN0eUIsTUFBTSxDQUFDRixnQkFBZ0IsQ0FBQyxTQUFTLEVBQUdMLENBQUMsSUFBSztRQUN4QztRQUNBLElBQUksQ0FBQyxJQUFJLENBQUNneEIsTUFBTSxDQUFDcnRCLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtVQUNoQ2l2QixVQUFVLENBQUNFLEtBQUssQ0FBQyxDQUFDO1VBQ2xCO1FBQ0Y7UUFDQTtRQUNBLElBQUk5eUIsQ0FBQyxDQUFDc1osTUFBTSxLQUFLLElBQUksQ0FBQzBYLE1BQU0sQ0FBQ2dCLGFBQWEsRUFBRTtVQUMxQyxJQUFJO1lBQ0Y7WUFDQSxJQUFNdGIsT0FBTyxHQUFHN1UsSUFBSSxDQUFDQyxLQUFLLENBQUM5QixDQUFDLENBQUNxTixJQUFJLENBQUM7WUFDbEMsSUFBSSxJQUFJLENBQUMrakIsYUFBYSxFQUFFO2NBQ3RCLElBQUksSUFBSSxDQUFDSSxhQUFhLEVBQUU7Z0JBQ3RCLElBQUk5YSxPQUFPLENBQUNqVSxJQUFJLEtBQUssY0FBYyxJQUFJaVUsT0FBTyxDQUFDalUsSUFBSSxLQUFLLHFCQUFxQixFQUFFO2tCQUM3RSxJQUFJLENBQUM2dEIsSUFBSSxDQUFDLENBQUM7a0JBQ1gsSUFBSSxDQUFDMWhCLE1BQU0sQ0FBQyxJQUFJLENBQUN1aUIsY0FBYyxDQUFDVixZQUFZLENBQUNySSxJQUFJLENBQUM7Z0JBQ3BEO2NBQ0Y7WUFDRjtVQUNGLENBQUMsQ0FBQyxPQUFBMkssT0FBQSxFQUFNLENBQUM7UUFDWDtNQUNGLENBQUMsRUFBRTtRQUFFQyxNQUFNLEVBQUVKLFVBQVUsQ0FBQ0k7TUFBTyxDQUFDLENBQUM7O01BRWpDO01BQ0EsSUFBSSxDQUFDLElBQUksQ0FBQzlCLGVBQWUsSUFBSSxDQUFDLElBQUksQ0FBQ08saUJBQWlCLEVBQUU7UUFDcEQsSUFBTXdCLDRCQUE0QixHQUFHLElBQUk7UUFFekNqRixVQUFVLENBQUMsTUFBTTtVQUNmLElBQUksQ0FBQyxJQUFJLENBQUNnRCxNQUFNLElBQUksSUFBSSxDQUFDQSxNQUFNLENBQUNsYixHQUFHLEtBQUssSUFBSSxDQUFDeFEsR0FBRyxFQUFFO1VBQ2xELElBQUksQ0FBQ2pFLEVBQUUsQ0FBQzhXLFNBQVMsQ0FBQ0ssR0FBRyxDQUFDLGdCQUFnQixDQUFDO1VBQ3ZDLElBQUksQ0FBQ3dZLE1BQU0sQ0FBQ2xiLEdBQUcsR0FBRyxJQUFJLENBQUN4USxHQUFHO1FBQzVCLENBQUMsRUFBRTJ0Qiw0QkFBNEIsQ0FBQztNQUNsQztJQUNGO0lBRUEsT0FBT3J6QixHQUFHQSxDQUFBLEVBQStCO01BQUEsSUFBN0JxRyxXQUFXLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHckcsUUFBUSxDQUFDd0csSUFBSTtNQUNyQyxJQUFNeVcsUUFBUSxHQUFHLHVCQUF1QjtNQUN4QyxJQUFNb1csTUFBTSxHQUFHLENBQUMsR0FBR2p0QixXQUFXLENBQUNuRyxnQkFBZ0IsQ0FBQ2dkLFFBQVEsQ0FBQyxDQUFDO01BRTFEb1csTUFBTSxDQUFDbnpCLE9BQU8sQ0FBQ29xQixDQUFDLElBQUk7UUFDbEIsSUFBTWdKLEtBQUssR0FBRyxJQUFJcEMsS0FBSyxDQUFDNUcsQ0FBQyxDQUFDO1FBQzFCZ0osS0FBSyxDQUFDL3lCLElBQUksQ0FBQyxDQUFDO01BQ2QsQ0FBQyxDQUFDO0lBQ0o7RUFDRjtFQUVBUCxRQUFRLENBQUNRLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLE1BQU07SUFDbEQwd0IsS0FBSyxDQUFDbnhCLEdBQUcsQ0FBQyxDQUFDO0VBQ2IsQ0FBQyxDQUFDO0VBR0ZXLE1BQU0sQ0FBQ0MsV0FBVyxHQUFHRCxNQUFNLENBQUNDLFdBQVcsSUFBSSxDQUFDLENBQUM7RUFDN0NELE1BQU0sQ0FBQ0MsV0FBVyxDQUFDdXdCLEtBQUssR0FBR0EsS0FBSztBQUNsQyxDQUFDLEVBQUUsQ0FBQzs7Ozs7Ozs7OztBQzNVSixJQUFNcUMsU0FBUyxHQUNiLHNVQUFzVTtBQUV4VSxJQUFNQyxTQUFTLEdBQ2Isd1VBQXdVO0FBRTFVLElBQU1DLG9CQUFvQiw0T0FBQXZ3QixNQUFBLENBSXNDcXdCLFNBQVMsaUpBQUFyd0IsTUFBQSxDQUdUc3dCLFNBQVMscVFBT2hFO0FBRVQsSUFBTUUsa0JBQWtCLHFSQU9mO0FBRVQsSUFBTUMscUJBQXFCLEdBQUc7RUFDNUJsbUIsVUFBVSxFQUFFO0lBQ1ZqTSxFQUFFLEVBQUUsb0JBQW9CO0lBQ3hCc2pCLGNBQWMsRUFBRSxJQUFJO0lBQ3BCQyxrQkFBa0IsRUFBRSxDQUFDO0lBQ3JCQyxTQUFTLEVBQUU7RUFDYixDQUFDO0VBQ0RDLFVBQVUsRUFBRTtJQUNWQyxNQUFNLEVBQUUsb0NBQW9DO0lBQzVDQyxNQUFNLEVBQUU7RUFDVixDQUFDO0VBQ0R1TCxJQUFJLEVBQUU7QUFDUixDQUFDO0FBRUQsQ0FBQyxZQUFZO0VBQ1gsTUFBTWtELFNBQVMsQ0FBQztJQUNkcnlCLFdBQVdBLENBQUEsRUFBRztNQUNaLElBQUksQ0FBQzBFLEtBQUssR0FBRyxJQUFJO01BQ2pCLElBQUksQ0FBQ3lkLE1BQU0sR0FBRyxJQUFJO01BQ2xCLElBQUksQ0FBQ21RLFdBQVcsR0FBSTF6QixDQUFDLElBQUssSUFBSSxDQUFDMnpCLElBQUksQ0FBQzN6QixDQUFDLENBQUNrQyxNQUFNLENBQUM7SUFDL0M7SUFFQTB4QixNQUFNQSxDQUFBLEVBQUc7TUFDUCxJQUFNeFQsU0FBUyxHQUFHdmdCLFFBQVEsQ0FBQzBQLGFBQWEsQ0FBQyxLQUFLLENBQUM7TUFDL0M2USxTQUFTLENBQUNqSSxTQUFTLENBQUNLLEdBQUcsQ0FBQyxZQUFZLENBQUM7TUFDckM0SCxTQUFTLENBQUNuZ0IsS0FBSyxDQUFDb00sT0FBTyxHQUFHLE1BQU07TUFDaEMsSUFBSSxDQUFDdkcsS0FBSyxHQUFHc2EsU0FBUztNQUN0QixPQUFPQSxTQUFTO0lBQ2xCO0lBRUF5VCxZQUFZQSxDQUFDM3hCLE1BQU0sRUFBRTtNQUNuQixJQUFNc2MsTUFBTSxHQUFHdGMsTUFBTSxDQUFDeUIsT0FBTyxDQUFDLFNBQVMsQ0FBQztNQUN4QyxJQUFNbXdCLE1BQU0sR0FBR3RWLE1BQU0sQ0FBQzFlLGdCQUFnQixDQUFDLG9CQUFvQixDQUFDO01BQzVELElBQU1pMEIsZ0JBQWdCLEdBQUd2VixNQUFNLENBQUN4WixhQUFhLENBQUMsd0NBQXdDLENBQUM7TUFDdkYsSUFBSTJHLE9BQU8sR0FBRyxDQUFDLENBQUM7TUFDaEIsSUFBSW1vQixNQUFNLENBQUMzdEIsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNyQndGLE9BQU8sR0FBRzZuQixxQkFBcUI7UUFDL0IsSUFBSSxDQUFDMXRCLEtBQUssQ0FBQzBKLFNBQVMsR0FBRzhqQixvQkFBb0I7UUFDM0MsSUFBSVMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDanVCLEtBQUssQ0FBQ2QsYUFBYSxDQUFDLGdDQUFnQyxDQUFDLENBQUMzQixFQUFFLEdBQUcwd0IsZ0JBQWdCLENBQUMxd0IsRUFBRTtNQUMzRyxDQUFDLE1BQU07UUFDTCxJQUFJLENBQUN5QyxLQUFLLENBQUMwSixTQUFTLEdBQUcrakIsa0JBQWtCO01BQzNDO01BQ0EsSUFBTS9PLE1BQU0sR0FBR3pVLEtBQUssQ0FBQ0MsSUFBSSxDQUFDOGpCLE1BQU0sQ0FBQyxDQUFDdm9CLEdBQUcsQ0FBQ3lvQixLQUFLLElBQUk7UUFDN0MsSUFBTTtVQUFFbGUsR0FBRztVQUFFbWU7UUFBSSxDQUFDLEdBQUdELEtBQUs7UUFDMUIsSUFBTWp6QixLQUFLLEdBQUdpekIsS0FBSyxDQUFDN3VCLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQztRQUNuRCxPQUFPLElBQUksQ0FBQyt1QixXQUFXLENBQUNwZSxHQUFHLEVBQUVtZSxHQUFHLEVBQUVsekIsS0FBSyxDQUFDO01BQzFDLENBQUMsQ0FBQztNQUNGLElBQU1vekIsYUFBYSxHQUFHLElBQUksQ0FBQ3J1QixLQUFLLENBQUNkLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQztNQUNqRXdmLE1BQU0sQ0FBQ3prQixPQUFPLENBQUMwa0IsS0FBSyxJQUFJMFAsYUFBYSxDQUFDbmUsV0FBVyxDQUFDeU8sS0FBSyxDQUFDLENBQUM7TUFDekQsSUFBSSxDQUFDbEIsTUFBTSxHQUFHLElBQUltQixNQUFNLENBQUMsSUFBSSxDQUFDNWUsS0FBSyxDQUFDZCxhQUFhLENBQUMsU0FBUyxDQUFDLEVBQUUyRyxPQUFPLENBQUM7TUFDdEUsSUFBSSxDQUFDNFgsTUFBTSxDQUFDNlEsV0FBVyxDQUFDcmtCLEtBQUssQ0FBQ0MsSUFBSSxDQUFDOGpCLE1BQU0sQ0FBQyxDQUFDbkQsT0FBTyxDQUFDenVCLE1BQU0sQ0FBQyxDQUFDO0lBQzdEO0lBRUFneUIsV0FBV0EsQ0FBRXBlLEdBQUcsRUFBRW1lLEdBQUcsRUFBYztNQUFBLElBQVpsekIsS0FBSyxHQUFBbUYsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsRUFBRTtNQUMvQixJQUFNdWUsS0FBSyxHQUFHNWtCLFFBQVEsQ0FBQzBQLGFBQWEsQ0FBQyxLQUFLLENBQUM7TUFDM0NrVixLQUFLLENBQUM0UCxTQUFTLEdBQUcsdUNBQXVDO01BRXpELElBQU1DLGNBQWMsR0FBR3owQixRQUFRLENBQUMwUCxhQUFhLENBQUMsUUFBUSxDQUFDO01BQ3ZEK2tCLGNBQWMsQ0FBQ0QsU0FBUyxHQUFHLDBCQUEwQjtNQUVyRCxJQUFNTCxLQUFLLEdBQUduMEIsUUFBUSxDQUFDMFAsYUFBYSxDQUFDLEtBQUssQ0FBQztNQUMzQ3lrQixLQUFLLENBQUNsZSxHQUFHLEdBQUdBLEdBQUc7TUFDZmtlLEtBQUssQ0FBQ0MsR0FBRyxHQUFHQSxHQUFHO01BRWZLLGNBQWMsQ0FBQ3RlLFdBQVcsQ0FBQ2dlLEtBQUssQ0FBQztNQUVqQyxJQUFJanpCLEtBQUssRUFBRTtRQUNULElBQU13ekIsVUFBVSxHQUFHMTBCLFFBQVEsQ0FBQzBQLGFBQWEsQ0FBQyxZQUFZLENBQUM7UUFDdkRnbEIsVUFBVSxDQUFDamYsV0FBVyxHQUFHdlUsS0FBSztRQUM5Qnd6QixVQUFVLENBQUNwYyxTQUFTLENBQUNLLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQztRQUNwRDhiLGNBQWMsQ0FBQ3RlLFdBQVcsQ0FBQ3VlLFVBQVUsQ0FBQztNQUN4QztNQUdBOVAsS0FBSyxDQUFDek8sV0FBVyxDQUFDc2UsY0FBYyxDQUFDO01BRWpDLE9BQU83UCxLQUFLO0lBQ2Q7SUFFQStQLElBQUlBLENBQUN0eUIsTUFBTSxFQUFFO01BQ1gsSUFBSSxDQUFDMnhCLFlBQVksQ0FBQzN4QixNQUFNLENBQUM7TUFDekIsSUFBSSxDQUFDNEQsS0FBSyxDQUFDekYsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQ3F6QixXQUFXLENBQUM7TUFDdEQsSUFBSSxDQUFDNXRCLEtBQUssQ0FBQzdGLEtBQUssQ0FBQ29NLE9BQU8sR0FBRyxNQUFNO0lBQ25DO0lBRUFzbkIsSUFBSUEsQ0FBQ3p4QixNQUFNLEVBQUU7TUFDWCxJQUFNdXlCLGFBQWEsR0FBR3Z5QixNQUFNLENBQUNpVyxTQUFTLENBQUMrQyxRQUFRLENBQUMsbUJBQW1CLENBQUM7TUFDcEUsSUFBTXdaLGdCQUFnQixHQUFHeHlCLE1BQU0sQ0FBQ2lXLFNBQVMsQ0FBQytDLFFBQVEsQ0FBQyw2QkFBNkIsQ0FBQztNQUNqRixJQUFJLENBQUN3WixnQkFBZ0IsSUFBSSxDQUFDRCxhQUFhLEVBQUU7TUFDekMsSUFBSSxDQUFDM3VCLEtBQUssQ0FBQzdGLEtBQUssQ0FBQ29NLE9BQU8sR0FBRyxNQUFNO01BQ2pDLElBQUksQ0FBQ2tYLE1BQU0sQ0FBQ29SLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO01BQ2pDLElBQUksQ0FBQzd1QixLQUFLLENBQUN1UyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDcWIsV0FBVyxDQUFDO0lBQzNEO0lBRUEsT0FBT2lCLE9BQU9BLENBQUEsRUFBRztNQUNmLElBQU03dUIsS0FBSyxHQUFHakcsUUFBUSxDQUFDbUYsYUFBYSxDQUFDLGFBQWEsQ0FBQztNQUNuRCxJQUFJYyxLQUFLLEVBQUVBLEtBQUssQ0FBQ3lLLE1BQU0sQ0FBQyxDQUFDO0lBQzNCO0VBQ0Y7RUFFQSxNQUFNcWtCLFdBQVcsQ0FBQztJQUNoQnh6QixXQUFXQSxDQUFDQyxFQUFFLEVBQUV5RSxLQUFLLEVBQUU7TUFDckIsSUFBSSxDQUFDekUsRUFBRSxHQUFHQSxFQUFFO01BQ1osSUFBSSxDQUFDeUUsS0FBSyxHQUFHQSxLQUFLO0lBQ3BCO0lBRUExRixJQUFJQSxDQUFBLEVBQUc7TUFDTCxJQUFJLENBQUNpQixFQUFFLENBQUNoQixnQkFBZ0IsQ0FBQyxPQUFPLEVBQUdMLENBQUMsSUFBSztRQUN2Q0EsQ0FBQyxDQUFDOEQsY0FBYyxDQUFDLENBQUM7UUFDbEI5RCxDQUFDLENBQUM2RCxlQUFlLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUNpQyxLQUFLLENBQUMwdUIsSUFBSSxDQUFDeDBCLENBQUMsQ0FBQ2tDLE1BQU0sQ0FBQztNQUMzQixDQUFDLENBQUM7SUFDSjtJQUVBLE9BQU90QyxHQUFHQSxDQUFBLEVBQStCO01BQUEsSUFBN0JxRyxXQUFXLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHckcsUUFBUSxDQUFDd0csSUFBSTtNQUNyQyxJQUFNeVcsUUFBUSxHQUFHLG9CQUFvQjtNQUNyQyxJQUFNZ1gsTUFBTSxHQUFHLENBQUMsR0FBRzd0QixXQUFXLENBQUNuRyxnQkFBZ0IsQ0FBQ2dkLFFBQVEsQ0FBQyxDQUFDO01BRTFELElBQUlnWCxNQUFNLENBQUMzdEIsTUFBTSxLQUFLLENBQUMsRUFBRTtNQUV6QixJQUFNTCxLQUFLLEdBQUcsSUFBSTJ0QixTQUFTLENBQUMsQ0FBQztNQUM3QixJQUFNcHlCLEVBQUUsR0FBR3lFLEtBQUssQ0FBQzh0QixNQUFNLENBQUMsQ0FBQztNQUN6QjN0QixXQUFXLENBQUMrUCxXQUFXLENBQUMzVSxFQUFFLENBQUM7TUFFM0J5eUIsTUFBTSxDQUFDL3pCLE9BQU8sQ0FBRW9xQixDQUFDLElBQUs7UUFDcEIsSUFBTTBLLElBQUksR0FBRyxJQUFJRCxXQUFXLENBQUN6SyxDQUFDLEVBQUVya0IsS0FBSyxDQUFDO1FBQ3RDK3VCLElBQUksQ0FBQ3owQixJQUFJLENBQUMsQ0FBQztNQUNiLENBQUMsQ0FBQztJQUNKO0lBRUEsT0FBT2lrQixJQUFJQSxDQUFBLEVBQUc7TUFDWm9QLFNBQVMsQ0FBQ2tCLE9BQU8sQ0FBQyxDQUFDO0lBQ3JCO0VBQ0Y7RUFFQTkwQixRQUFRLENBQUNRLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLE1BQU07SUFDbER1MEIsV0FBVyxDQUFDaDFCLEdBQUcsQ0FBQyxDQUFDO0VBQ25CLENBQUMsQ0FBQztFQUVGVyxNQUFNLENBQUNDLFdBQVcsR0FBR0QsTUFBTSxDQUFDQyxXQUFXLElBQUksQ0FBQyxDQUFDO0VBQzdDRCxNQUFNLENBQUNDLFdBQVcsQ0FBQ28wQixXQUFXLEdBQUdBLFdBQVc7QUFDOUMsQ0FBQyxFQUNDLENBQUM7Ozs7Ozs7Ozs7O0FDN0tIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1COztBQUVuQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixzQkFBc0I7QUFDeEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjs7QUFFQSxrQ0FBa0MsUUFBUTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLHVDQUF1QyxRQUFRO0FBQy9DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsT0FBTztBQUN6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTLHlCQUF5QjtBQUNsQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4REFBOEQsWUFBWTtBQUMxRTtBQUNBLDhEQUE4RCxZQUFZO0FBQzFFO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsWUFBWTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ2hmYTtBQUNiO0FBQ0E7QUFDQSxpREFBaUQsT0FBTztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QixtQkFBTyxDQUFDLGdGQUFvQjtBQUNyRCw0QkFBNEIsbUJBQU8sQ0FBQyxzRkFBdUI7QUFDM0Qsd0JBQXdCLG1CQUFPLENBQUMsOEVBQW1CO0FBQ25ELDZDQUE2Qyx5Q0FBeUMsK0NBQStDO0FBQ3JJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUY7QUFDckY7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3RELDBEQUEwRDtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3Qyx3QkFBd0IsOEJBQThCO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxLQUNpQyxFQUFFLEVBR3RDO0FBQ0wsYUFBYSxLQUM0QixFQUFFLEVBR3RDO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7Ozs7Ozs7Ozs7OztBQ3RNRCw4Q0FBMkMsQ0FBQyxXQUFXLEVBQUMsQ0FBQyxtQkFBbUIsRUFBRSw2Q0FBNkMsa0JBQWtCLDJuQkFBMm5CLHNCQUFzQixTQUFTLGdCQUFnQixPQUFPLFFBQVEsUUFBUSxTQUFTLFVBQVUsWUFBWSxTQUFTLFNBQVMsWUFBWSxhQUFhLFVBQVUsU0FBUyxPQUFPLFFBQVEsUUFBUSxTQUFTLFNBQVMsU0FBUyxVQUFVLFNBQVMsT0FBTyxRQUFRLFFBQVEsUUFBUSxTQUFTLFdBQVcsVUFBVSxVQUFVLFVBQVUsUUFBUSxVQUFVLFVBQVUsVUFBVSxXQUFXLFNBQVMsV0FBVyxTQUFTLG1wQkFBbXBCLEtBQUssdUJBQXVCLEVBQUUsS0FBSyxVQUFVLEtBQUssV0FBVyxhQUFhLGFBQWEsWUFBWSxNQUFNLGFBQWEsU0FBUyxXQUFXLGFBQWEsYUFBYSxZQUFZLEdBQUcsUUFBUSxVQUFVLE9BQU8seUJBQXlCLDJCQUEyQix5QkFBeUIsMkJBQTJCLDZCQUE2Qix1QkFBdUIsNkJBQTZCLHlCQUF5Qix1QkFBdUIseUJBQXlCLHlCQUF5QiwyQkFBMkIsdUJBQXVCLHVCQUF1Qix1QkFBdUIseUJBQXlCLHVCQUF1Qiw2QkFBNkIseUJBQXlCLHlCQUF5QiwyQkFBMkIsMkJBQTJCLHlCQUF5Qiw2QkFBNkIsMkJBQTJCLHlCQUF5Qix5QkFBeUIsMkJBQTJCLDZCQUE2Qiw2QkFBNkIsNkJBQTZCLDZCQUE2Qiw2QkFBNkIsNkJBQTZCLDJCQUEyQiw2QkFBNkIseUJBQXlCLDJCQUEyQiwyQkFBMkIsNkJBQTZCLDZCQUE2Qiw2QkFBNkIsMkJBQTJCLHlCQUF5Qiw2QkFBNkIsNkJBQTZCLDJCQUEyQix5QkFBeUIsdUJBQXVCLDZCQUE2Qiw2QkFBNkIsNkJBQTZCLDJCQUEyQiw2QkFBNkIseUJBQXlCLDJCQUEyQiw2QkFBNkIsNkJBQTZCLDZCQUE2QiwyQkFBMkIseUJBQXlCLDZCQUE2QiwyQkFBMkIsMkJBQTJCLDZCQUE2Qiw2QkFBNkIsMkJBQTJCLDZCQUE2Qix5QkFBeUIsMkJBQTJCLDJCQUEyQiw2QkFBNkIsNkJBQTZCLDZCQUE2QiwyQkFBMkIseUJBQXlCLDZCQUE2Qiw2QkFBNkIsMkJBQTJCLHlCQUF5Qix1QkFBdUIsNkJBQTZCLDZCQUE2Qiw2QkFBNkIsMkJBQTJCLDZCQUE2Qix5QkFBeUIsNkJBQTZCLDZCQUE2Qiw2QkFBNkIsNkJBQTZCLDJCQUEyQix5QkFBeUIsNkJBQTZCLDJCQUEyQix5QkFBeUIseUJBQXlCLHVCQUF1QixxQkFBcUIscUJBQXFCLGNBQWMsY0FBYyxlQUFlLGVBQWUsYUFBYSxhQUFhLGNBQWMsYUFBYSxhQUFhLGVBQWUsYUFBYSxZQUFZLFlBQVksWUFBWSxjQUFjLGNBQWMsY0FBYyxjQUFjLGNBQWMsY0FBYyxjQUFjLGNBQWMsZUFBZSxlQUFlLGVBQWUsZUFBZSxlQUFlLGFBQWEsYUFBYSxjQUFjLGFBQWEsY0FBYyxjQUFjLGdCQUFnQixhQUFhLFlBQVksY0FBYyxhQUFhLGNBQWMsZUFBZSxXQUFXLFdBQVcsV0FBVyxnQkFBZ0IsV0FBVyxZQUFZLGNBQWMsWUFBWSxnQkFBZ0IsWUFBWSxZQUFZLFlBQVksY0FBYyxjQUFjLGFBQWEsY0FBYyxjQUFjLGdCQUFnQixhQUFhLFlBQVksY0FBYyxhQUFhLGNBQWMsZUFBZSxXQUFXLFdBQVcsV0FBVyxnQkFBZ0IsV0FBVyxZQUFZLGVBQWUsY0FBYyxZQUFZLGdCQUFnQixZQUFZLFlBQVksWUFBWSxjQUFjLGlCQUFpQixjQUFjLFlBQVksYUFBYSxlQUFlLGNBQWMsY0FBYyxjQUFjLGNBQWMsZUFBZSxjQUFjLGFBQWEsY0FBYyxnQkFBZ0IsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGNBQWMsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGVBQWUsYUFBYSxjQUFjLGNBQWMsY0FBYyxhQUFhLGNBQWMsV0FBVyxhQUFhLFlBQVksY0FBYyxlQUFlLGNBQWMsYUFBYSxjQUFjLFlBQVksWUFBWSxXQUFXLFlBQVksWUFBWSxZQUFZLGVBQWUsWUFBWSxhQUFhLGNBQWMsV0FBVyxjQUFjLFdBQVcsV0FBVyxZQUFZLFlBQVksYUFBYSxhQUFhLGFBQWEsY0FBYyxlQUFlLGFBQWEsYUFBYSxjQUFjLGNBQWMsZUFBZSxlQUFlLGFBQWEsYUFBYSxZQUFZLGVBQWUsY0FBYyxlQUFlLGNBQWMsTUFBTSxhQUFhLFdBQVcsYUFBYSxjQUFjLGFBQWEsY0FBYyxlQUFlLFlBQVksZUFBZSxhQUFhLFlBQVksYUFBYSxhQUFhLGNBQWMsWUFBWSxZQUFZLFlBQVksYUFBYSxZQUFZLGVBQWUsYUFBYSxhQUFhLGNBQWMsY0FBYyxhQUFhLGVBQWUsY0FBYyxhQUFhLGFBQWEsY0FBYyxlQUFlLGVBQWUsZUFBZSxlQUFlLGVBQWUsZUFBZSxjQUFjLGVBQWUsYUFBYSxjQUFjLGNBQWMsZUFBZSxlQUFlLGVBQWUsY0FBYyxhQUFhLGVBQWUsZUFBZSxjQUFjLGFBQWEsWUFBWSxlQUFlLGVBQWUsZUFBZSxjQUFjLGVBQWUsYUFBYSxjQUFjLGVBQWUsZUFBZSxlQUFlLGNBQWMsYUFBYSxlQUFlLGNBQWMsY0FBYyxlQUFlLGVBQWUsY0FBYyxlQUFlLGFBQWEsY0FBYyxjQUFjLGVBQWUsZUFBZSxlQUFlLGNBQWMsYUFBYSxlQUFlLGVBQWUsY0FBYyxhQUFhLFlBQVksZUFBZSxlQUFlLGVBQWUsY0FBYyxlQUFlLGFBQWEsZUFBZSxlQUFlLGVBQWUsZUFBZSxjQUFjLGFBQWEsZUFBZSxjQUFjLGFBQWEsYUFBYSxZQUFZLFdBQVcsV0FBVyxjQUFjLGNBQWMsZUFBZSxlQUFlLGFBQWEsYUFBYSxjQUFjLGFBQWEsYUFBYSxlQUFlLGFBQWEsWUFBWSxZQUFZLFlBQVksY0FBYyxjQUFjLGNBQWMsY0FBYyxjQUFjLGNBQWMsY0FBYyxjQUFjLGVBQWUsZUFBZSxlQUFlLGVBQWUsZUFBZSxhQUFhLGFBQWEsY0FBYyxhQUFhLGNBQWMsY0FBYyxnQkFBZ0IsYUFBYSxZQUFZLGNBQWMsYUFBYSxjQUFjLGVBQWUsV0FBVyxXQUFXLFdBQVcsZ0JBQWdCLFdBQVcsWUFBWSxjQUFjLFlBQVksZ0JBQWdCLFlBQVksWUFBWSxZQUFZLGNBQWMsY0FBYyxhQUFhLGNBQWMsY0FBYyxnQkFBZ0IsYUFBYSxZQUFZLGNBQWMsYUFBYSxjQUFjLGVBQWUsV0FBVyxXQUFXLFdBQVcsZ0JBQWdCLFdBQVcsWUFBWSxlQUFlLGNBQWMsWUFBWSxnQkFBZ0IsWUFBWSxZQUFZLFlBQVksY0FBYyxpQkFBaUIsY0FBYyxZQUFZLGFBQWEsZUFBZSxjQUFjLGNBQWMsY0FBYyxjQUFjLGVBQWUsY0FBYyxhQUFhLGNBQWMsZ0JBQWdCLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxjQUFjLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxlQUFlLGFBQWEsY0FBYyxjQUFjLGNBQWMsYUFBYSxjQUFjLFdBQVcsYUFBYSxZQUFZLGNBQWMsZUFBZSxjQUFjLGFBQWEsY0FBYyxZQUFZLFlBQVksV0FBVyxZQUFZLFlBQVksWUFBWSxlQUFlLFlBQVksYUFBYSxjQUFjLFdBQVcsY0FBYyxXQUFXLFdBQVcsWUFBWSxZQUFZLGFBQWEsYUFBYSxhQUFhLGNBQWMsZUFBZSxhQUFhLGFBQWEs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YyxjQUFjLGFBQWEsYUFBYSxlQUFlLGVBQWUsWUFBWSxhQUFhLGFBQWEsZUFBZSxpQkFBaUIsY0FBYyxlQUFlLGVBQWUsZUFBZSxhQUFhLFlBQVksY0FBYyxZQUFZLGNBQWMsYUFBYSxlQUFlLGNBQWMsY0FBYyxjQUFjLGNBQWMsY0FBYyxlQUFlLGFBQWEsaUJBQWlCLGFBQWEsY0FBYyxhQUFhLHNCQUFzQixpQkFBaUIsaUJBQWlCLGlCQUFpQixpQkFBaUIsaUJBQWlCLGlCQUFpQixpQkFBaUIsaUJBQWlCLGNBQWMsZ0JBQWdCLGlCQUFpQixlQUFlLGdCQUFnQixjQUFjLGNBQWMsWUFBWSxlQUFlLGlCQUFpQixhQUFhLGFBQWEsY0FBYyxjQUFjLGVBQWUsZUFBZSxhQUFhLGNBQWMsYUFBYSxjQUFjLGNBQWMsZUFBZSxhQUFhLGNBQWMsZUFBZSxpQkFBaUIsaUJBQWlCLFlBQVksZUFBZSxnQkFBZ0IsYUFBYSxhQUFhLGNBQWMsYUFBYSxjQUFjLGNBQWMsZUFBZSxlQUFlLGVBQWUsY0FBYyxjQUFjLGNBQWMsZUFBZSxjQUFjLGFBQWEsY0FBYyxjQUFjLGNBQWMsY0FBYyxjQUFjLGNBQWMsY0FBYyxjQUFjLGNBQWMsYUFBYSxpQkFBaUIsYUFBYSxjQUFjLGVBQWUsY0FBYyxjQUFjLGNBQWMsY0FBYyxhQUFhLGNBQWMsY0FBYyxjQUFjLGNBQWMsY0FBYyxjQUFjLGNBQWMsY0FBYyxhQUFhLGNBQWMsY0FBYyxjQUFjLGNBQWMsY0FBYyxjQUFjLGVBQWUsY0FBYyxjQUFjLGNBQWMsY0FBYyxjQUFjLGNBQWMsY0FBYyxjQUFjLGVBQWUsY0FBYyxlQUFlLGNBQWMsY0FBYyxjQUFjLGNBQWMsYUFBYSxjQUFjLGNBQWMsY0FBYyxjQUFjLGNBQWMsY0FBYyxlQUFlLGNBQWMsY0FBYyxjQUFjLGNBQWMsaUJBQWlCLGVBQWUsY0FBYyxlQUFlLFlBQVksZUFBZSxpQkFBaUIsZUFBZSxlQUFlLGVBQWUsY0FBYyxjQUFjLGNBQWMsZUFBZSxlQUFlLGNBQWMsY0FBYyxnQkFBZ0IsYUFBYSxnQkFBZ0IsYUFBYSxhQUFhLGFBQWEsa0JBQWtCLFlBQVksWUFBWSxhQUFhLGFBQWEsYUFBYSxjQUFjLGNBQWMsV0FBVyxhQUFhLGFBQWEsY0FBYyxpQkFBaUIsZUFBZSxnQkFBZ0IsaUJBQWlCLGNBQWMsY0FBYyxlQUFlLG1CQUFtQixnQkFBZ0IsY0FBYyxlQUFlLGNBQWMsY0FBYyxjQUFjLGFBQWEsY0FBYyxhQUFhLGNBQWMsY0FBYyxnQkFBZ0IsZ0JBQWdCLG9CQUFvQixvQkFBb0IsdUJBQXVCLGdCQUFnQixZQUFZLGlCQUFpQixlQUFlLGVBQWUsZUFBZSxjQUFjLGNBQWMsd0JBQXdCLGdCQUFnQixjQUFjLGNBQWMsZUFBZSxjQUFjLGVBQWUsYUFBYSxlQUFlLGVBQWUsZUFBZSxjQUFjLGVBQWUsWUFBWSx1QkFBdUIsY0FBYyxZQUFZLGNBQWMsZ0JBQWdCLGVBQWUsYUFBYSxjQUFjLGVBQWUsY0FBYyxlQUFlLGVBQWUsYUFBYSxpQkFBaUIsZUFBZSxhQUFhLGNBQWMsYUFBYSxlQUFlLGVBQWUsY0FBYyxpQkFBaUIsZUFBZSxjQUFjLGFBQWEsYUFBYSxlQUFlLGNBQWMscUJBQXFCLGdCQUFnQixhQUFhLGlCQUFpQixlQUFlLGVBQWUsZUFBZSxlQUFlLGNBQWMsZ0JBQWdCLFlBQVksYUFBYSxzQkFBc0IsYUFBYSxXQUFXLGVBQWUsbUJBQW1CLGVBQWUsV0FBVyxpQkFBaUIsWUFBWSxvQkFBb0IsZUFBZSxjQUFjLG1CQUFtQixlQUFlLGVBQWUsYUFBYSxZQUFZLGFBQWEsY0FBYyxjQUFjLGFBQWEsZUFBZSxjQUFjLGdCQUFnQixtQkFBbUIsZUFBZSxnQkFBZ0IsZ0JBQWdCLGlCQUFpQixxQkFBcUIsY0FBYyxhQUFhLFlBQVksWUFBWSxhQUFhLGFBQWEsYUFBYSxZQUFZLGVBQWUsZUFBZSxjQUFjLGVBQWUsYUFBYSxjQUFjLGFBQWEsYUFBYSxjQUFjLGNBQWMsYUFBYSxjQUFjLGtCQUFrQixjQUFjLGlCQUFpQixhQUFhLGVBQWUsZUFBZSxlQUFlLGVBQWUsZUFBZSxlQUFlLGVBQWUsZUFBZSxlQUFlLGVBQWUsZUFBZSxlQUFlLGVBQWUsZUFBZSxjQUFjLGVBQWUsY0FBYyxtQkFBbUIsZUFBZSxjQUFjLGtCQUFrQixlQUFlLGNBQWMsWUFBWSxhQUFhLGNBQWMsZUFBZSxnQkFBZ0IsaUJBQWlCLGNBQWMsZUFBZSxhQUFhLGNBQWMsYUFBYSxZQUFZLFlBQVksWUFBWSxjQUFjLGlCQUFpQixhQUFhLGNBQWMsY0FBYyxhQUFhLGNBQWMsY0FBYyxhQUFhLGNBQWMsZUFBZSxlQUFlLGdCQUFnQixlQUFlLGNBQWMsZUFBZSxnQkFBZ0IsNEJBQTRCLGVBQWUsY0FBYyxrQkFBa0IsYUFBYSxlQUFlLGFBQWEsZUFBZSxlQUFlLGNBQWMsZUFBZSxlQUFlLGVBQWUsY0FBYyxlQUFlLGNBQWMsZUFBZSxlQUFlLGVBQWUsY0FBYyxZQUFZLGFBQWEsY0FBYyxhQUFhLGVBQWUsYUFBYSxhQUFhLGVBQWUsY0FBYyxjQUFjLGNBQWMsZUFBZSxhQUFhLGNBQWMsZUFBZSxjQUFjLGlCQUFpQixpQkFBaUIsaUJBQWlCLGNBQWMsYUFBYSxjQUFjLGNBQWMsYUFBYSxlQUFlLGNBQWMsY0FBYyxnQkFBZ0IsY0FBYyxlQUFlLGVBQWUsY0FBYyxhQUFhLGNBQWMsWUFBWSxhQUFhLGNBQWMsY0FBYyxjQUFjLGVBQWUsY0FBYyxjQUFjLGlCQUFpQixlQUFlLFlBQVksYUFBYSxlQUFlLGFBQWEsYUFBYSxjQUFjLGNBQWMsZUFBZSxjQUFjLG1CQUFtQixhQUFhLGVBQWUsaUJBQWlCLGVBQWUsY0FBYyxtQkFBbUIsY0FBYyxnQkFBZ0IsZUFBZSxzQkFBc0IsZUFBZSxnQkFBZ0Isc0JBQXNCLFlBQVksZUFBZSxhQUFhLGVBQWUsY0FBYyxjQUFjLElBQUksU0FBUyxhQUFhLGNBQWMsZ0JBQWdCLGdCQUFnQixlQUFlLGVBQWUsWUFBWSxhQUFhLGdCQUFnQixpQkFBaUIsYUFBYSxZQUFZLGNBQWMsZUFBZSxjQUFjLGVBQWUsZ0JBQWdCLGlCQUFpQixjQUFjLGVBQWUsY0FBYyxlQUFlLGFBQWEsWUFBWSxlQUFlLGNBQWMsYUFBYSxlQUFlLGNBQWMsZUFBZSxtQkFBbUIsY0FBYyxpQkFBaUIsYUFBYSxjQUFjLGNBQWMsY0FBYyxhQUFhLGVBQWUsY0FBYyxjQUFjLGVBQWUsZ0JBQWdCLGVBQWUsZ0JBQWdCLGFBQWEsZUFBZSxlQUFlLFlBQVksY0FBYyxlQUFlLGNBQWMsY0FBYyxjQUFjLGNBQWMsZUFBZSxhQUFhLGNBQWMsZUFBZSxlQUFlLGdCQUFnQixlQUFlLHFCQUFxQixpQkFBaUIsZ0JBQWdCLGNBQWMsY0FBYyxjQUFjLGFBQWEsZ0JBQWdCLGVBQWUsZUFBZSxZQUFZLGNBQWMsYUFBYSxZQUFZLGNBQWMsZUFBZSxjQUFjLGdCQUFnQixhQUFhLGVBQWUsY0FBYyxjQUFjLFdBQVcsY0FBYyxhQUFhLGFBQWEsY0FBYyxjQUFjLGFBQWEsYUFBYSxjQUFjLGVBQWUsZUFBZSxlQUFlLGNBQWMsY0FBYyxlQUFlLGNBQWMsZ0JBQWdCLGFBQWEsZUFBZSxlQUFlLGtCQUFrQixhQUFhLFlBQVksY0FBYyxjQUFjLGVBQWUsZUFBZSxhQUFhLGFBQWEsd0JBQXdCLGNBQWMsWUFBWSxhQUFhLGFBQWEsZUFBZSxtQkFBbUIsYUFBYSxjQUFjLFlBQVksZ0JBQWdCLGtCQUFrQixnQkFBZ0IsZ0JBQWdCLGdCQUFnQixnQkFBZ0IsZ0JBQWdCLGVBQWUsZ0JBQWdCLG9CQUFvQixnQkFBZ0IsZ0JBQWdCLGNBQWMsYUFBYSxvQkFBb0IsYUFBYSxvQkFBb0IsZUFBZSxXQUFXLFlBQVksZUFBZSxjQUFjLGVBQWUsZUFBZSxjQUFjLGVBQWUsY0FBYyxjQUFjLGdCQUFnQixlQUFlLGNBQWMsY0FBYyxpQkFBaUIsZUFBZSxpQkFBaUIsZUFBZSxjQUFjLGVBQWUsZUFBZSxlQUFlLGNBQWMsWUFBWSxlQUFlLGFBQWEsZUFBZSxjQUFjLGNBQWMsYUFBYSxhQUFhLGVBQWUsWUFBWSxjQUFjLGNBQWMsZ0JBQWdCLFlBQVksY0FBYyxjQUFjLGdCQUFnQixhQUFhLGNBQWMsYUFBYSxjQUFjLFlBQVksWUFBWSxhQUFhLGFBQWEsYUFBYSxlQUFlLGFBQWEsZ0JBQWdCLFlBQVksZUFBZSxhQUFhLGVBQWUsaUJBQWlCLGFBQWEsY0FB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Q0E7QUFDQSxJQUFJLG1EQUFRO0FBQ1o7QUFDQSxHQUFHOztBQUVIO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0EsSUFBSSxtREFBUTs7QUFFWjtBQUNBLDJCQUEyQiwwREFBYTtBQUN4QztBQUNBOztBQUVBLDRDQUE0QywrREFBUztBQUNyRCxLQUFLOztBQUVMLElBQUksaUVBQVc7O0FBRWYsb0JBQW9CLDhCQUE4QjtBQUNsRCxNQUFNLG1EQUFRO0FBQ2Q7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLE1BQU0saURBQUk7QUFDVjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSSwrREFBUztBQUNiLEdBQUc7O0FBRUg7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBLElBQUksb0RBQVM7O0FBRWI7QUFDQSw0QkFBNEIsMERBQWE7QUFDekM7QUFDQTs7QUFFQSw0Q0FBNEMsK0RBQVM7QUFDckQsS0FBSzs7QUFFTCxJQUFJLGlFQUFXOztBQUVmLG9CQUFvQiw0QkFBNEI7QUFDaEQsTUFBTSxvREFBUztBQUNmOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxNQUFNLGlEQUFJO0FBQ1Y7QUFDQSxHQUFHOztBQUVIO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQSxJQUFJLG9EQUFTO0FBQ2IsR0FBRztBQUNIO0FBQ0EsSUFBSSxtREFBUTs7QUFFWjtBQUNBLE1BQU0saURBQUk7QUFDVjs7QUFFQSxJQUFJLGlFQUFXO0FBQ2Y7QUFDQTtBQUNBLGdCQUFnQixxRUFBZTtBQUMvQixzREFBTSxnRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsUndCO0FBQ0U7QUFDUTtBQUNYO0FBQ1U7QUFDSDtBQUNEO0FBQ3BCO0FBQ0M7QUFDRjtBQUNDO0FBQ0U7QUFDRztBQUNLO0FBQ1g7QUFDRTtBQUNDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2Fuc2ktaHRtbC1jb21tdW5pdHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9qcy9hbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9qcy9idXR0b24uanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9qcy9jb2xsZWN0aW9ucy9iaW5kLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9zcmMvanMvY29sbGVjdGlvbnMvZmlsdGVycy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL2pzL2NvbGxlY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9zcmMvanMvY29sbGVjdGlvbnMvcmVwZWF0ZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9qcy9mb3JtLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9zcmMvanMvbWFwLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9zcmMvanMvc2xpZGVyLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9zcmMvanMvc3RlcC1hbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9qcy90aW1lci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL2pzL3V0aWwuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9qcy91dG0uanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9qcy92aWRlby5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL2pzL3pvb20uanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9uYW1lZC1yZWZlcmVuY2VzLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvbnVtZXJpYy11bmljb2RlLW1hcC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL3N1cnJvZ2F0ZS1wYWlycy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L21vZHVsZXMvbG9nZ2VyL2luZGV4LmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9vdmVybGF5LmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9zb2NrZXQuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2NyZWF0ZVNvY2tldFVSTC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvZ2V0Q3VycmVudFNjcmlwdFNvdXJjZS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvbG9nLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9wYXJzZVVSTC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvcmVsb2FkQXBwLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9zZW5kTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvc3RyaXBBbnNpLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvZW1pdHRlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2xvZy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL2xpYnJhcmllcy9maWxlLXNhdmVyLm1pbi5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL2xpYnJhcmllcy9nc2FwLm1pbi5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL2xpYnJhcmllcy9pbnB1dC1tYXNrLm1pbi5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL2xpYnJhcmllcy9sb2Rhc2gubWluLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9zcmMvbGlicmFyaWVzL3Njcm9sbC10cmlnZ2VyLm1pbi5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL2xpYnJhcmllcy9zd2lwZXItYnVuZGxlLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9zcmMvbGlicmFyaWVzL3dvdy5taW4uanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvd2VicGFjay9ydW50aW1lL25vZGUgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9qcy9jb21tb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYW5zaUhUTUxcblxuLy8gUmVmZXJlbmNlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvYW5zaS1yZWdleFxudmFyIF9yZWdBTlNJID0gLyg/Oig/OlxcdTAwMWJcXFspfFxcdTAwOWIpKD86KD86WzAtOV17MSwzfSk/KD86KD86O1swLTldezAsM30pKik/W0EtTXxmLW1dKXxcXHUwMDFiW0EtTV0vXG5cbnZhciBfZGVmQ29sb3JzID0ge1xuICByZXNldDogWydmZmYnLCAnMDAwJ10sIC8vIFtGT1JFR1JPVURfQ09MT1IsIEJBQ0tHUk9VTkRfQ09MT1JdXG4gIGJsYWNrOiAnMDAwJyxcbiAgcmVkOiAnZmYwMDAwJyxcbiAgZ3JlZW46ICcyMDk4MDUnLFxuICB5ZWxsb3c6ICdlOGJmMDMnLFxuICBibHVlOiAnMDAwMGZmJyxcbiAgbWFnZW50YTogJ2ZmMDBmZicsXG4gIGN5YW46ICcwMGZmZWUnLFxuICBsaWdodGdyZXk6ICdmMGYwZjAnLFxuICBkYXJrZ3JleTogJzg4OCdcbn1cbnZhciBfc3R5bGVzID0ge1xuICAzMDogJ2JsYWNrJyxcbiAgMzE6ICdyZWQnLFxuICAzMjogJ2dyZWVuJyxcbiAgMzM6ICd5ZWxsb3cnLFxuICAzNDogJ2JsdWUnLFxuICAzNTogJ21hZ2VudGEnLFxuICAzNjogJ2N5YW4nLFxuICAzNzogJ2xpZ2h0Z3JleSdcbn1cbnZhciBfb3BlblRhZ3MgPSB7XG4gICcxJzogJ2ZvbnQtd2VpZ2h0OmJvbGQnLCAvLyBib2xkXG4gICcyJzogJ29wYWNpdHk6MC41JywgLy8gZGltXG4gICczJzogJzxpPicsIC8vIGl0YWxpY1xuICAnNCc6ICc8dT4nLCAvLyB1bmRlcnNjb3JlXG4gICc4JzogJ2Rpc3BsYXk6bm9uZScsIC8vIGhpZGRlblxuICAnOSc6ICc8ZGVsPicgLy8gZGVsZXRlXG59XG52YXIgX2Nsb3NlVGFncyA9IHtcbiAgJzIzJzogJzwvaT4nLCAvLyByZXNldCBpdGFsaWNcbiAgJzI0JzogJzwvdT4nLCAvLyByZXNldCB1bmRlcnNjb3JlXG4gICcyOSc6ICc8L2RlbD4nIC8vIHJlc2V0IGRlbGV0ZVxufVxuXG47WzAsIDIxLCAyMiwgMjcsIDI4LCAzOSwgNDldLmZvckVhY2goZnVuY3Rpb24gKG4pIHtcbiAgX2Nsb3NlVGFnc1tuXSA9ICc8L3NwYW4+J1xufSlcblxuLyoqXG4gKiBDb252ZXJ0cyB0ZXh0IHdpdGggQU5TSSBjb2xvciBjb2RlcyB0byBIVE1MIG1hcmt1cC5cbiAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZnVuY3Rpb24gYW5zaUhUTUwgKHRleHQpIHtcbiAgLy8gUmV0dXJucyB0aGUgdGV4dCBpZiB0aGUgc3RyaW5nIGhhcyBubyBBTlNJIGVzY2FwZSBjb2RlLlxuICBpZiAoIV9yZWdBTlNJLnRlc3QodGV4dCkpIHtcbiAgICByZXR1cm4gdGV4dFxuICB9XG5cbiAgLy8gQ2FjaGUgb3BlbmVkIHNlcXVlbmNlLlxuICB2YXIgYW5zaUNvZGVzID0gW11cbiAgLy8gUmVwbGFjZSB3aXRoIG1hcmt1cC5cbiAgdmFyIHJldCA9IHRleHQucmVwbGFjZSgvXFwwMzNcXFsoXFxkKyltL2csIGZ1bmN0aW9uIChtYXRjaCwgc2VxKSB7XG4gICAgdmFyIG90ID0gX29wZW5UYWdzW3NlcV1cbiAgICBpZiAob3QpIHtcbiAgICAgIC8vIElmIGN1cnJlbnQgc2VxdWVuY2UgaGFzIGJlZW4gb3BlbmVkLCBjbG9zZSBpdC5cbiAgICAgIGlmICghIX5hbnNpQ29kZXMuaW5kZXhPZihzZXEpKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0XG4gICAgICAgIGFuc2lDb2Rlcy5wb3AoKVxuICAgICAgICByZXR1cm4gJzwvc3Bhbj4nXG4gICAgICB9XG4gICAgICAvLyBPcGVuIHRhZy5cbiAgICAgIGFuc2lDb2Rlcy5wdXNoKHNlcSlcbiAgICAgIHJldHVybiBvdFswXSA9PT0gJzwnID8gb3QgOiAnPHNwYW4gc3R5bGU9XCInICsgb3QgKyAnO1wiPidcbiAgICB9XG5cbiAgICB2YXIgY3QgPSBfY2xvc2VUYWdzW3NlcV1cbiAgICBpZiAoY3QpIHtcbiAgICAgIC8vIFBvcCBzZXF1ZW5jZVxuICAgICAgYW5zaUNvZGVzLnBvcCgpXG4gICAgICByZXR1cm4gY3RcbiAgICB9XG4gICAgcmV0dXJuICcnXG4gIH0pXG5cbiAgLy8gTWFrZSBzdXJlIHRhZ3MgYXJlIGNsb3NlZC5cbiAgdmFyIGwgPSBhbnNpQ29kZXMubGVuZ3RoXG4gIDsobCA+IDApICYmIChyZXQgKz0gQXJyYXkobCArIDEpLmpvaW4oJzwvc3Bhbj4nKSlcblxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogQ3VzdG9taXplIGNvbG9ycy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb2xvcnMgcmVmZXJlbmNlIHRvIF9kZWZDb2xvcnNcbiAqL1xuYW5zaUhUTUwuc2V0Q29sb3JzID0gZnVuY3Rpb24gKGNvbG9ycykge1xuICBpZiAodHlwZW9mIGNvbG9ycyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Bjb2xvcnNgIHBhcmFtZXRlciBtdXN0IGJlIGFuIE9iamVjdC4nKVxuICB9XG5cbiAgdmFyIF9maW5hbENvbG9ycyA9IHt9XG4gIGZvciAodmFyIGtleSBpbiBfZGVmQ29sb3JzKSB7XG4gICAgdmFyIGhleCA9IGNvbG9ycy5oYXNPd25Qcm9wZXJ0eShrZXkpID8gY29sb3JzW2tleV0gOiBudWxsXG4gICAgaWYgKCFoZXgpIHtcbiAgICAgIF9maW5hbENvbG9yc1trZXldID0gX2RlZkNvbG9yc1trZXldXG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAoJ3Jlc2V0JyA9PT0ga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGhleCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaGV4ID0gW2hleF1cbiAgICAgIH1cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShoZXgpIHx8IGhleC5sZW5ndGggPT09IDAgfHwgaGV4LnNvbWUoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBoICE9PSAnc3RyaW5nJ1xuICAgICAgfSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdmFsdWUgb2YgYCcgKyBrZXkgKyAnYCBwcm9wZXJ0eSBtdXN0IGJlIGFuIEFycmF5IGFuZCBlYWNoIGl0ZW0gY291bGQgb25seSBiZSBhIGhleCBzdHJpbmcsIGUuZy46IEZGMDAwMCcpXG4gICAgICB9XG4gICAgICB2YXIgZGVmSGV4Q29sb3IgPSBfZGVmQ29sb3JzW2tleV1cbiAgICAgIGlmICghaGV4WzBdKSB7XG4gICAgICAgIGhleFswXSA9IGRlZkhleENvbG9yWzBdXG4gICAgICB9XG4gICAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gMSB8fCAhaGV4WzFdKSB7XG4gICAgICAgIGhleCA9IFtoZXhbMF1dXG4gICAgICAgIGhleC5wdXNoKGRlZkhleENvbG9yWzFdKVxuICAgICAgfVxuXG4gICAgICBoZXggPSBoZXguc2xpY2UoMCwgMilcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBoZXggIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB2YWx1ZSBvZiBgJyArIGtleSArICdgIHByb3BlcnR5IG11c3QgYmUgYSBoZXggc3RyaW5nLCBlLmcuOiBGRjAwMDAnKVxuICAgIH1cbiAgICBfZmluYWxDb2xvcnNba2V5XSA9IGhleFxuICB9XG4gIF9zZXRUYWdzKF9maW5hbENvbG9ycylcbn1cblxuLyoqXG4gKiBSZXNldCBjb2xvcnMuXG4gKi9cbmFuc2lIVE1MLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICBfc2V0VGFncyhfZGVmQ29sb3JzKVxufVxuXG4vKipcbiAqIEV4cG9zZSB0YWdzLCBpbmNsdWRpbmcgb3BlbiBhbmQgY2xvc2UuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5hbnNpSFRNTC50YWdzID0ge31cblxuaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYW5zaUhUTUwudGFncywgJ29wZW4nLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfb3BlblRhZ3MgfVxuICB9KVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYW5zaUhUTUwudGFncywgJ2Nsb3NlJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX2Nsb3NlVGFncyB9XG4gIH0pXG59IGVsc2Uge1xuICBhbnNpSFRNTC50YWdzLm9wZW4gPSBfb3BlblRhZ3NcbiAgYW5zaUhUTUwudGFncy5jbG9zZSA9IF9jbG9zZVRhZ3Ncbn1cblxuZnVuY3Rpb24gX3NldFRhZ3MgKGNvbG9ycykge1xuICAvLyByZXNldCBhbGxcbiAgX29wZW5UYWdzWycwJ10gPSAnZm9udC13ZWlnaHQ6bm9ybWFsO29wYWNpdHk6MTtjb2xvcjojJyArIGNvbG9ycy5yZXNldFswXSArICc7YmFja2dyb3VuZDojJyArIGNvbG9ycy5yZXNldFsxXVxuICAvLyBpbnZlcnNlXG4gIF9vcGVuVGFnc1snNyddID0gJ2NvbG9yOiMnICsgY29sb3JzLnJlc2V0WzFdICsgJztiYWNrZ3JvdW5kOiMnICsgY29sb3JzLnJlc2V0WzBdXG4gIC8vIGRhcmsgZ3JleVxuICBfb3BlblRhZ3NbJzkwJ10gPSAnY29sb3I6IycgKyBjb2xvcnMuZGFya2dyZXlcblxuICBmb3IgKHZhciBjb2RlIGluIF9zdHlsZXMpIHtcbiAgICB2YXIgY29sb3IgPSBfc3R5bGVzW2NvZGVdXG4gICAgdmFyIG9yaUNvbG9yID0gY29sb3JzW2NvbG9yXSB8fCAnMDAwJ1xuICAgIF9vcGVuVGFnc1tjb2RlXSA9ICdjb2xvcjojJyArIG9yaUNvbG9yXG4gICAgY29kZSA9IHBhcnNlSW50KGNvZGUpXG4gICAgX29wZW5UYWdzWyhjb2RlICsgMTApLnRvU3RyaW5nKCldID0gJ2JhY2tncm91bmQ6IycgKyBvcmlDb2xvclxuICB9XG59XG5cbmFuc2lIVE1MLnJlc2V0KClcbiIsIlxuY29uc3QgcnVuID0gKCkgPT4ge1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcud293JykuZm9yRWFjaChlID0+IHtcbiAgICBlLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJ1xuICB9KVxuICBuZXcgV09XKCkuaW5pdCgpXG59XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBydW4pXG4iLCIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBjb25zdCBiYXNlNjRUb1N0cmluZyA9IHdpbmRvdy51c2VyU2NyaXB0cy5VdGlsLmJhc2U2NFRvU3RyaW5nXG4gIGNvbnN0IGNsZWFyVGFncyA9IHdpbmRvdy51c2VyU2NyaXB0cy5VdGlsLmNsZWFyVGFnc1xuXG4gIGNvbnN0IEZJTEVfUEVSTUlTU0lPTiA9IFsncGRmJywgJ2RvY3gnLCAnZG9jJywgJ2NzdicsICd4bHN4JywgJ3hscycsICd6aXAnLCAnb2R0JywgJ2pwZycsICdwbmcnLCAnd2VicCcsICdpY28nLCAnc3ZnJywgJ2pwZWcnLCAnZ2lmJywgJ3R4dCcsICdyYXInXVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUhhc2ggKCkge1xuICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCBkb2N1bWVudC50aXRsZSwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICB9XG5cbiAgY2xhc3MgQnV0dG9uIHtcblxuICAgIGNvbnN0cnVjdG9yIChlbCkge1xuICAgICAgdGhpcy5lbCA9IGVsXG4gICAgICB0aGlzLmJ1dHRvbkNsaWNrSGFuZGxlciA9IHRoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKVxuICAgICAgdGhpcy5vcGVuZWRQb3B1cCA9IG51bGxcbiAgICAgIHRoaXMueWFuZGV4R29hbElkID0gdGhpcy5lbC5kYXRhc2V0LnlhbmRleEdvYWxJZFxuICAgICAgdGhpcy5nb29nbGVFdmVudCA9IHRoaXMuZWwuZGF0YXNldC5nb29nbGVFdmVudCAmJiBKU09OLnBhcnNlKGJhc2U2NFRvU3RyaW5nKHRoaXMuZWwuZGF0YXNldC5nb29nbGVFdmVudCkpXG5cbiAgICAgIHRoaXMuZGF0YU9uY2xpY2tIcmVmID0gdGhpcy5lbC5kYXRhc2V0LmhyZWZcbiAgICAgIHRoaXMuZGF0YU9uY2xpY2tUYXJnZXQgPSB0aGlzLmVsLmRhdGFzZXQudGFyZ2V0XG5cbiAgICAgIHRoaXMuaXNOYXRpdmVMaW5rID0gdGhpcy5lbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdhJ1xuICAgICAgdGhpcy5pc0NhcnRBY3Rpb24gPSB0aGlzLmVsLmRhdGFzZXQuYWN0aW9uQ2FydCA9PT0gJ3RydWUnXG4gICAgICB0aGlzLmlzQ2FydExpbmsgPSB0aGlzLmVsLmRhdGFzZXQudHlwZSA9PT0gJ2NhcnQtaWNvbidcbiAgICB9XG5cbiAgICBpbml0ICgpIHtcbiAgICAgIGlmICghdGhpcy5lbCkgcmV0dXJuXG5cbiAgICAgIC8vIGRlZmF1bHRcbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmUoZSlcbiAgICAgIH0pXG5cblxuICAgICAgLy8g0LXRgdC70Lgg0Y3RgtC+INCy0L3QtdGI0L3Rj9GPINC40LvQuCDQstC90YPRgtGA0LXQvdC90Y/RjyDRgdGB0YvQu9C60LAg0YfQtdGA0LXQtyBvbmNsaWNrXG4gICAgICBpZiAodGhpcy5kYXRhT25jbGlja0hyZWYpIHtcbiAgICAgICAgY29uc3QgaHJlZiA9IHRoaXMuZGF0YU9uY2xpY2tIcmVmXG5cbiAgICAgICAgY29uc3QgaXNFeHRlcm5hbE9ySW50ZXJuYWwgPSAoaHJlZi5zdGFydHNXaXRoKCdodHRwJykgJiYgIXRoaXMuaXNGaWxlKGhyZWYpKSB8fCAoaHJlZi5zdGFydHNXaXRoKCcvJykgJiYgIWhyZWYuc3RhcnRzV2l0aCgnLyNuLScpKVxuXG4gICAgICAgIGlmIChpc0V4dGVybmFsT3JJbnRlcm5hbCkge1xuICAgICAgICAgIGNvbnN0IG9uY2xpY2sgPSBgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7ZXZlbnQucHJldmVudERlZmF1bHQoKTt3aW5kb3cub3BlbignJHtocmVmfScsICcke3RoaXMuZGF0YU9uY2xpY2tUYXJnZXQgfHwgJ19zZWxmJ30nKWBcbiAgICAgICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSgnb25jbGljaycsIG9uY2xpY2spXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8g0LLQviDQstGB0LXRhSDQvtGB0YLQsNC70YzQvdGL0YUg0YHQu9GD0YfQsNGP0YVcbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmJ1dHRvbkNsaWNrSGFuZGxlcilcbiAgICB9XG5cbiAgICAvLyDQvtCx0YDQsNCx0L7RgtC60LAg0LLQtdGI0LDQtdGC0YHRjyDQstGB0LXQs9C00LAg0Lgg0LTQu9GPIGEg0Lgg0LTQu9GPIG9uY2xpY2tcbiAgICBtaWRkbGV3YXJlIChlKSB7XG5cbiAgICAgIGlmICh3aW5kb3cuWWEgJiYgdGhpcy55YW5kZXhHb2FsSWQpIHtcbiAgICAgICAgeW0od2luZG93LllhLl9tZXRyaWthLmdldENvdW50ZXJzKClbMF0uaWQsJ3JlYWNoR29hbCcsIHRoaXMueWFuZGV4R29hbElkKVxuICAgICAgfVxuXG4gICAgICBpZiAod2luZG93Lmd0YWcgJiYgdGhpcy5nb29nbGVFdmVudCkge1xuICAgICAgICB3aW5kb3cuZ3RhZygnZXZlbnQnLCB0aGlzLmdvb2dsZUV2ZW50LmV2ZW50QWN0aW9uLCB7XG4gICAgICAgICAgJ2V2ZW50X2NhdGVnb3J5JzogdGhpcy5nb29nbGVFdmVudC5ldmVudENhdGVnb3J5LFxuICAgICAgICAgICdldmVudF9sYWJlbCc6IHRoaXMuZ29vZ2xlRXZlbnQuZXZlbnRMYWJlbFxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBjb25zdCBtZW51ID0gZS50YXJnZXQuY2xvc2VzdCgnW2RhdGEtcHVibGljLW1vYmlsZS1jb250ZW50XScpXG5cbiAgICAgIGlmIChtZW51KSB7XG4gICAgICAgIHdpbmRvdy51c2VyU2NyaXB0cy5VdGlsLmhpZGVNZW51KG1lbnUpXG4gICAgICB9XG5cbiAgICB9XG5cbiAgICBoYW5kbGVDbGljayAoZSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuXG4gICAgICAvLyBhZGQgdG8gY2FydFxuICAgICAgaWYgKHRoaXMuaXNDYXJ0QWN0aW9uKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICBjb25zdCB7IHByb2R1Y3ROYW1lLCBwcm9kdWN0RGVzY3JpcHRpb24sIHByb2R1Y3RQcmljZSwgcHJvZHVjdEltYWdlIH0gPSB0aGlzLmVsLmRhdGFzZXRcbiAgICAgICAgY29uc3Qgc2VjdGlvbiA9IHRoaXMuZWwuY2xvc2VzdCgnc2VjdGlvbicpXG5cbiAgICAgICAgY29uc3QgY29sbGVjdGlvbkl0ZW0gPSB0aGlzLmVsLmNsb3Nlc3QoJ1tkYXRhLWMtaXRlbS1pZF06bm90KFtkYXRhLWMtaXRlbS1pZD1cIlwiXSknKVxuXG4gICAgICAgIGNvbnN0IGRldGFpbCA9IHtcbiAgICAgICAgICBwcm9kdWN0TmFtZTogY2xlYXJUYWdzKHByb2R1Y3ROYW1lKSxcbiAgICAgICAgICBwcm9kdWN0RGVzY3JpcHRpb246IGNsZWFyVGFncyhwcm9kdWN0RGVzY3JpcHRpb24pLFxuICAgICAgICAgIHByb2R1Y3RQcmljZTogY2xlYXJUYWdzKHByb2R1Y3RQcmljZSksXG4gICAgICAgICAgcHJvZHVjdEltYWdlOiBjbGVhclRhZ3MocHJvZHVjdEltYWdlKSxcbiAgICAgICAgICBpZDogdGhpcy5lbC5pZCArICcvJyArIHNlY3Rpb24uZGF0YXNldC5yb290SWQsXG4gICAgICAgICAgYmxvY2tfaWQ6IHNlY3Rpb24uZGF0YXNldC5yb290SWRcbiAgICAgICAgfVxuXG4gICAgICAgIC8vINC10YHQu9C4INGN0YLQviDRgtC+0LLQsNGAINCy0L3Rg9GC0YDQuCDRgNC10L/QuNGC0LXRgNCwINC60L7Qu9C70LXQutGG0LjQuFxuICAgICAgICBpZiAoY29sbGVjdGlvbkl0ZW0pIHtcbiAgICAgICAgICBkZXRhaWwuY29sbGVjdGlvbl9pZCA9IGNvbGxlY3Rpb25JdGVtLmRhdGFzZXQuY0lkXG4gICAgICAgICAgZGV0YWlsLmNvbGxlY3Rpb25faXRlbV9pZCA9IGNvbGxlY3Rpb25JdGVtLmRhdGFzZXQuY0l0ZW1JZFxuICAgICAgICAgIGRldGFpbC5pZCA9IHRoaXMuZWwuaWQgKyAnLycgKyBjb2xsZWN0aW9uSXRlbS5kYXRhc2V0LmNJdGVtSWRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdwdWJsaWMtYWRkLXRvLWNhcnQnLCB7IGRldGFpbCB9KVxuXG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNDYXJ0TGluaykge1xuICAgICAgICBjb25zdCBjYXJ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtY2FydD1cInRydWVcIl0nKVxuXG4gICAgICAgIGlmIChjYXJ0KSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgdGhpcy5vcGVuZWRQb3B1cCA9IGNhcnRcbiAgICAgICAgICB3aW5kb3cudXNlclNjcmlwdHMuVXRpbC5zaG93UG9wdXAoY2FydClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIGxldCB7IGhhc2ggfSA9IHRoaXMuZWxcbiAgICAgIGxldCBocmVmID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpXG4gICAgICBsZXQgdGFyZ2V0QXR0ciA9IHRoaXMuZWwudGFyZ2V0XG5cblxuICAgICAgaWYgKCF0aGlzLmlzTmF0aXZlTGluayAmJiB0aGlzLmRhdGFPbmNsaWNrSHJlZikge1xuICAgICAgICBocmVmID0gdGhpcy5kYXRhT25jbGlja0hyZWZcbiAgICAgICAgdGFyZ2V0QXR0ciA9IHRoaXMuZGF0YU9uY2xpY2tUYXJnZXRcbiAgICAgICAgaGFzaCA9ICcjJyArIGhyZWYuc3BsaXQoJyMnKVsxXVxuICAgICAgfVxuXG4gICAgICBjb25zdCB1cmwgPSBocmVmICYmIGhyZWYudHJpbSgpXG5cbiAgICAgIC8vIGVtcHR5IGxpbmtzXG4gICAgICBpZiAoIXVybCB8fCB1cmwgPT09ICcnIHx8IHVybCA9PT0gJyMnKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuXG4gICAgICBpZiAodGhpcy5pc0ZpbGUoaHJlZikpIHtcblxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICAgICBpZiAodGFyZ2V0QXR0ciAhPT0gJ19ibGFuaycpIHtcbiAgICAgICAgICB3aW5kb3cuc2F2ZUFzKGhyZWYsIGhyZWYuc3BsaXQoJy8nKS5wb3AoKSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aW5kb3cub3BlbihocmVmLCAnX2JsYW5rJylcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBsZXQgdGFyZ2V0ID0gbnVsbFxuICAgICAgdHJ5IHtcbiAgICAgICAgdGFyZ2V0ID0gaGFzaCAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGhhc2gpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgICB9XG5cbiAgICAgIC8vIGV4dGVybmFsIG9yIGludGVybmFsIGluIEJ1aWxkZXJcbiAgICAgIGNvbnN0IGlzQnVpbGRlciA9ICF0YXJnZXQgJiYgd2luZG93LnVzZXJTY3JpcHRzLlV0aWwuaXNCdWlsZGVyKHRoaXMuZWwpXG5cbiAgICAgIGlmIChpc0J1aWxkZXIpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoIXRhcmdldCkgcmV0dXJuXG5cbiAgICAgIC8vIG9wZW4gcG9wdXAgYW5kIGFuY2hvclxuXG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICAgaWYgKHRhcmdldC5kYXRhc2V0LnBvcHVwKSB7XG4gICAgICAgIHRoaXMub3BlbmVkUG9wdXAgPSB0YXJnZXRcbiAgICAgICAgd2luZG93LnVzZXJTY3JpcHRzLlV0aWwuc2hvd1BvcHVwKHRhcmdldClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIHdpbmRvdy51c2VyU2NyaXB0cy5VdGlsLnNjcm9sbFRvKHRhcmdldClcbiAgICB9XG5cbiAgICBpc0ZpbGUgKGhyZWYpIHtcbiAgICAgIHJldHVybiBGSUxFX1BFUk1JU1NJT04uaW5jbHVkZXMoaHJlZi5zcGxpdCgnLicpLnBvcCgpKVxuICAgIH1cblxuXG4gICAgc3RhdGljIHJ1biAocm9vdEVsZW1lbnQgPSBkb2N1bWVudC5ib2R5KSB7XG5cbiAgICAgIGNvbnN0IGl0ZW1zID0gW1xuICAgICAgICAuLi5yb290RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhJyksXG4gICAgICAgIC4uLnJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWhyZWZdJyksXG4gICAgICBdXG5cbiAgICAgIGl0ZW1zLmZvckVhY2goYyA9PiB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IG5ldyBCdXR0b24oYylcbiAgICAgICAgYnV0dG9uLmluaXQoKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuXG4gICAgY29uc3Qgd2luZG93SGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoXG5cbiAgICBpZiAod2luZG93SGFzaCkge1xuICAgICAgLy8g0L7RgtC80LXQvdGP0LXQvCDQvdCw0YLQuNCy0L3Ri9C5INGB0LrRgNC+0LvQuyDQv9C+INGP0LrQvtGA0Y5cbiAgICAgIHJlbW92ZUhhc2goKVxuICAgICAgY29uc3QgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih3aW5kb3dIYXNoKVxuICAgICAgaWYgKCF0YXJnZXQpIHJldHVyblxuICAgICAgaWYgKHRhcmdldC5kYXRhc2V0LnBvcHVwKSB7XG4gICAgICAgIHdpbmRvdy51c2VyU2NyaXB0cy5VdGlsLnNob3dQb3B1cCh0YXJnZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc2Nyb2xsaW5nVG9BbmNob3InLCB0cnVlKVxuICAgICAgICB3aW5kb3cudXNlclNjcmlwdHMuVXRpbC5zY3JvbGxUbyh0YXJnZXQsICgpID0+IGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdzY3JvbGxpbmdUb0FuY2hvcicpKVxuICAgICAgfVxuICAgIH1cblxuICAgIEJ1dHRvbi5ydW4oKVxuXG4gIH0pXG5cbiAgd2luZG93LnVzZXJTY3JpcHRzID0gd2luZG93LnVzZXJTY3JpcHRzIHx8IHt9XG4gIHdpbmRvdy51c2VyU2NyaXB0cy5CdXR0b24gPSBCdXR0b25cblxufSkoKVxuIiwiLy8gVE9ETyDQodC00LXQu9Cw0YLRjCDRh9GC0L7QsdGLINGB0YLRgNCw0L3QuNGG0LAg0L3QtSDRgdC60LDQutCw0LvQsCDQtdGB0LvQuCDRjdGC0L4g0L3QtSDQv9C10YDQstCw0Y8g0YHRgtGA0LDQvdC40YbQsCDQuNC70Lgg0LXRgdGC0Ywg0YTQuNC70YzRgtGA0Ysg0LIgdXJsLCDQutCw0Log0LLRgNC40LDQvdGCINGB0LrRgNGL0LLQsNGC0Ywg0YDQtdC/0LjRgtC10YAg0LjQt9C90LDRh9Cw0LvRjNC90L4g0Lgg0L7RgtC+0LHRgNCw0LbQsNGC0Ywg0L/QvtGB0LvQtSDQv9GA0LjQvNC10L3QtdC90LjRjyDRhNC40LvRjNGC0YDQvtCyIC1cblxuKGZ1bmN0aW9uKCl7XG5cbiAgY29uc3QgVXRpbCA9IHdpbmRvdy51c2VyU2NyaXB0cy5VdGlsXG4gIGNvbnN0IGJhc2U2NFRvU3RyaW5nID0gVXRpbC5iYXNlNjRUb1N0cmluZ1xuICBjb25zdCBnZXRGaWx0ZXJzV2l0aFJlcGxhY2VkVGVtcGxhdGVWYXJpYWJsZXMgPSBVdGlsLmdldEZpbHRlcnNXaXRoUmVwbGFjZWRUZW1wbGF0ZVZhcmlhYmxlc1xuXG4gIGZ1bmN0aW9uIHNjcm9sbFRvRWxlbWVudChlbGVtZW50KSB7XG4gICAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICBjb25zdCB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHRcblxuICAgIC8vINCS0YvRh9C40YHQu9GP0LXQvCDQstC40LTQuNC80YPRjiDRh9Cw0YHRgtGMINGN0LvQtdC80LXQvdGC0LBcbiAgICBjb25zdCB2aXNpYmxlUGFydFRvcFkgPSBNYXRoLm1pbihNYXRoLm1heChyZWN0LnRvcCwgMCksIHdpbmRvd0hlaWdodClcbiAgICBjb25zdCB2aXNpYmxlUGFydEJvdHRvbVkgPSBNYXRoLm1pbihNYXRoLm1heChyZWN0LmJvdHRvbSwgMCksIHdpbmRvd0hlaWdodClcbiAgICBsZXQgdmlzaWJsZUhlaWdodCA9IHZpc2libGVQYXJ0Qm90dG9tWSAtIHZpc2libGVQYXJ0VG9wWVxuXG4gICAgLy8gUm91bmRpbmcgZXJyb3JcbiAgICBpZiAodmlzaWJsZUhlaWdodCA8IDApIHtcbiAgICAgIHZpc2libGVIZWlnaHQgPSAwXG4gICAgfVxuXG4gICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8LCDRgdC+0YHRgtCw0LLQu9GP0LXRgiDQu9C4INCy0LjQtNC40LzQsNGPINGH0LDRgdGC0Ywg0Y3Qu9C10LzQtdC90YLQsCDQvNC10L3QtdC1IHglXG4gICAgaWYgKHZpc2libGVIZWlnaHQgPCByZWN0LmhlaWdodCAqIDAuOCkge1xuICAgICAgZWxlbWVudC5zY3JvbGxJbnRvVmlldyh7XG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJyxcbiAgICAgICAgYmxvY2s6ICdjZW50ZXInXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRGaWx0ZXJDb25kaXRpb25zIChzeXN0ZW0sIGZpZWxkVHlwZSwgY29uZGl0aW9uLCBjb25kaXRpb25WYWx1ZSwgZHluYW1pY1R5cGVEYXRhKXtcblxuICAgIGxldCByZXN1bHQgPSB7XG4gICAgICBfX3N5c3RlbTogc3lzdGVtXG4gICAgfVxuXG4gICAgaWYgKGZpZWxkVHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICByZXN1bHQuX19zeXN0ZW0udmFsdWVfdHlwZSA9IFV0aWwuRUNvbmRpdGlvblZhbHVlVHlwZS5TVFJJTkdcblxuICAgICAgaWYgKGNvbmRpdGlvbiA9PT0gVXRpbC5FRmlsdGVyTWV0aG9kc0NvbmRpdGlvbnMuRVhJU1RTKSB7XG4gICAgICAgIHJlc3VsdC4kZXhpc3RzID0gdHJ1ZVxuICAgICAgICByZXN1bHQuX19zeXN0ZW0udmFsdWVfdHlwZSA9IFV0aWwuRUNvbmRpdGlvblZhbHVlVHlwZS5CT09MRUFOXG4gICAgICB9IGVsc2UgaWYgKGNvbmRpdGlvbiA9PT0gVXRpbC5FRmlsdGVyTWV0aG9kc0NvbmRpdGlvbnMuTk9UX0VYSVNUUykge1xuICAgICAgICByZXN1bHQuJGV4aXN0cyA9IGZhbHNlXG4gICAgICAgIHJlc3VsdC5fX3N5c3RlbS52YWx1ZV90eXBlID0gVXRpbC5FQ29uZGl0aW9uVmFsdWVUeXBlLkJPT0xFQU5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCByYXdWYWx1ZSA9IGNvbmRpdGlvblZhbHVlICE9PSBudWxsID8gY29uZGl0aW9uVmFsdWUgOiAnJ1xuICAgICAgICBpZiAoZHluYW1pY1R5cGVEYXRhKSB7XG4gICAgICAgICAgaWYgKGR5bmFtaWNUeXBlRGF0YS50eXBlID09PSBVdGlsLkVUZXh0RHluYW1pY1R5cGUuQ1VSUkVOVF9QQUdFX0lURU1fRklFTEQpIHtcbiAgICAgICAgICAgIGlmIChkeW5hbWljVHlwZURhdGEuZmllbGRJZCA9PT0gJ25hbWUnIHx8IGR5bmFtaWNUeXBlRGF0YS5maWVsZElkID09PSAnc2x1ZycpIHtcbiAgICAgICAgICAgICAgcmF3VmFsdWUgPSBge3sgaXRlbS4ke2R5bmFtaWNUeXBlRGF0YS5maWVsZElkfSB9fWBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJhd1ZhbHVlID0gYHt7IGl0ZW0udmFsdWVzLiR7ZHluYW1pY1R5cGVEYXRhLmZpZWxkSWR9LnZhbHVlIH19YFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZGl0aW9uID09PSBVdGlsLkVGaWx0ZXJNZXRob2RzQ29uZGl0aW9ucy5FUVVBTCkge1xuICAgICAgICAgIHJlc3VsdC4kZXEgPSByYXdWYWx1ZVxuICAgICAgICB9IGVsc2UgaWYgKGNvbmRpdGlvbiA9PT0gVXRpbC5FRmlsdGVyTWV0aG9kc0NvbmRpdGlvbnMuTk9UX0VRVUFMKSB7XG4gICAgICAgICAgcmVzdWx0LiRuZSA9IHJhd1ZhbHVlXG4gICAgICAgIH0gZWxzZSBpZiAoY29uZGl0aW9uID09PSBVdGlsLkVGaWx0ZXJNZXRob2RzQ29uZGl0aW9ucy5JTkNMVURFUykge1xuICAgICAgICAgIHJlc3VsdC4kcmVnZXggPSBgLioke3Jhd1ZhbHVlfS4qYFxuICAgICAgICB9IGVsc2UgaWYgKGNvbmRpdGlvbiA9PT0gVXRpbC5FRmlsdGVyTWV0aG9kc0NvbmRpdGlvbnMuTk9UX0lOQ0xVREVTKSB7XG4gICAgICAgICAgcmVzdWx0LiRuZXJlZ2V4ID0gYC4qJHtyYXdWYWx1ZX0uKmBcbiAgICAgICAgfSBlbHNlIGlmIChjb25kaXRpb24gPT09IFV0aWwuRUZpbHRlck1ldGhvZHNDb25kaXRpb25zLlNUQVJUU19XSVRIKSB7XG4gICAgICAgICAgcmVzdWx0LiRyZWdleCA9IGAke3Jhd1ZhbHVlfS4qYFxuICAgICAgICB9IGVsc2UgaWYgKGNvbmRpdGlvbiA9PT0gVXRpbC5FRmlsdGVyTWV0aG9kc0NvbmRpdGlvbnMuRU5EU19XSVRIKSB7XG4gICAgICAgICAgcmVzdWx0LiRyZWdleCA9IGAuKiR7cmF3VmFsdWV9YFxuICAgICAgICB9IGVsc2UgaWYgKGNvbmRpdGlvbiA9PT0gVXRpbC5FRmlsdGVyTWV0aG9kc0NvbmRpdGlvbnMuTk9UX1NUQVJUU19XSVRIKSB7XG4gICAgICAgICAgcmVzdWx0LiRuZXJlZ2V4ID0gYCR7cmF3VmFsdWV9LipgXG4gICAgICAgIH0gZWxzZSBpZiAoY29uZGl0aW9uID09PSBVdGlsLkVGaWx0ZXJNZXRob2RzQ29uZGl0aW9ucy5OT1RfRU5EU19XSVRIKSB7XG4gICAgICAgICAgcmVzdWx0LiRuZXJlZ2V4ID0gYC4qJHtyYXdWYWx1ZX1gXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmhhbmRsZWQgZmlsdGVyTWV0aG9kc1N0cnVjdHVyZSBjb25kaXRpb24nKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmaWVsZFR5cGUgPT09ICdpbnQnKSB7XG4gICAgICByZXN1bHQuX19zeXN0ZW0udmFsdWVfdHlwZSA9IFV0aWwuRUNvbmRpdGlvblZhbHVlVHlwZS5JTlRcblxuICAgICAgaWYgKGNvbmRpdGlvbiA9PT0gVXRpbC5FRmlsdGVyTWV0aG9kc0NvbmRpdGlvbnMuRVhJU1RTKSB7XG4gICAgICAgIHJlc3VsdC4kZXhpc3RzID0gdHJ1ZVxuICAgICAgICByZXN1bHQuX19zeXN0ZW0udmFsdWVfdHlwZSA9IFV0aWwuRUNvbmRpdGlvblZhbHVlVHlwZS5CT09MRUFOXG4gICAgICB9IGVsc2UgaWYgKGNvbmRpdGlvbiA9PT0gVXRpbC5FRmlsdGVyTWV0aG9kc0NvbmRpdGlvbnMuTk9UX0VYSVNUUykge1xuICAgICAgICByZXN1bHQuJGV4aXN0cyA9IGZhbHNlXG4gICAgICAgIHJlc3VsdC5fX3N5c3RlbS52YWx1ZV90eXBlID0gVXRpbC5FQ29uZGl0aW9uVmFsdWVUeXBlLkJPT0xFQU5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCByYXdWYWx1ZSA9IGNvbmRpdGlvblZhbHVlICE9PSBudWxsID8gY29uZGl0aW9uVmFsdWUgOiAwXG4gICAgICAgIGlmIChkeW5hbWljVHlwZURhdGEpIHtcbiAgICAgICAgICBpZiAoZHluYW1pY1R5cGVEYXRhLnR5cGUgPT09IFV0aWwuRUludER5bmFtaWNUeXBlLkNVUlJFTlRfUEFHRV9JVEVNX0ZJRUxEKSB7XG4gICAgICAgICAgICByYXdWYWx1ZSA9IGB7eyBpdGVtLnZhbHVlcy4ke2R5bmFtaWNUeXBlRGF0YS5maWVsZElkfS52YWx1ZSB9fWBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmRpdGlvbiA9PT0gVXRpbC5FRmlsdGVyTWV0aG9kc0NvbmRpdGlvbnMuRVFVQUwpIHtcbiAgICAgICAgICByZXN1bHQuJGVxID0gcmF3VmFsdWVcbiAgICAgICAgfSBlbHNlIGlmIChjb25kaXRpb24gPT09IFV0aWwuRUZpbHRlck1ldGhvZHNDb25kaXRpb25zLk5PVF9FUVVBTCkge1xuICAgICAgICAgIHJlc3VsdC4kbmUgPSByYXdWYWx1ZVxuICAgICAgICB9IGVsc2UgaWYgKGNvbmRpdGlvbiA9PT0gVXRpbC5FRmlsdGVyTWV0aG9kc0NvbmRpdGlvbnMuR1JFQVRFUl9USEFOKSB7XG4gICAgICAgICAgcmVzdWx0LiRndCA9IHJhd1ZhbHVlXG4gICAgICAgIH0gZWxzZSBpZiAoY29uZGl0aW9uID09PSBVdGlsLkVGaWx0ZXJNZXRob2RzQ29uZGl0aW9ucy5HUkVBVEVSX1RIQU5fRVFVQUwpIHtcbiAgICAgICAgICByZXN1bHQuJGd0ZSA9IHJhd1ZhbHVlXG4gICAgICAgIH0gZWxzZSBpZiAoY29uZGl0aW9uID09PSBVdGlsLkVGaWx0ZXJNZXRob2RzQ29uZGl0aW9ucy5MRVNTX1RIQU4pIHtcbiAgICAgICAgICByZXN1bHQuJGx0ID0gcmF3VmFsdWVcbiAgICAgICAgfSBlbHNlIGlmIChjb25kaXRpb24gPT09IFV0aWwuRUZpbHRlck1ldGhvZHNDb25kaXRpb25zLkxFU1NfVEhBTl9FUVVBTCkge1xuICAgICAgICAgIHJlc3VsdC4kbHRlID0gcmF3VmFsdWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuaGFuZGxlZCBmaWx0ZXJNZXRob2RzU3RydWN0dXJlIGNvbmRpdGlvbicpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBmdW5jdGlvbiByZXJ1blVzZXJTY3JpcHRzIChlbCkge1xuICAgIGlmICh3aW5kb3cudXNlclNjcmlwdHMgJiYgZWwpIHtcbiAgICAgIE9iamVjdC52YWx1ZXMod2luZG93LnVzZXJTY3JpcHRzKS5mb3JFYWNoKHNjcmlwdCA9PiB7XG4gICAgICAgIHNjcmlwdC5ydW4/LihlbClcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgY2xhc3MgQmluZCB7XG4gICAgY29uc3RydWN0b3IgKGVsKSB7XG4gICAgICB0aGlzLmVsID0gZWxcbiAgICAgIHRoaXMucm9vdElkID0gZWwuZGF0YXNldC5yb290SWRcbiAgICAgIHRoaXMuYmluZCA9IEpTT04ucGFyc2UoYmFzZTY0VG9TdHJpbmcoZWwuZGF0YXNldC5iaW5kKSlcbiAgICAgIHRoaXMucmVwZWF0ZXJzID0gW11cbiAgICB9XG5cbiAgICBhc3luYyBpbml0ICgpIHtcbiAgICAgIGNvbnN0IHByb21pc2VzID0gT2JqZWN0LmVudHJpZXModGhpcy5iaW5kKS5tYXAoYXN5bmMgKFtyZXF1ZXN0SWQsIG9wdGlvbnNdKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcGVhdGVyID0gbmV3IHdpbmRvdy51c2VyU2NyaXB0cy5SZXBlYXRlcihyZXF1ZXN0SWQsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnJlcGVhdGVycy5wdXNoKHJlcGVhdGVyKVxuICAgICAgICByZXBlYXRlci5pbml0KClcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoKVxuXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMudXBkYXRlKClcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8ga2V5IC0g0LrQu9GO0Ycg0YTQuNC70YzRgtGA0LAsINC60L7RgtC+0YDRi9C5INC40LfQvNC10L3QuNC7IHVybFxuICAgIC8vIHJlcXVlc3RJZCAtINC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINGA0L7QtNC40YLQtdC70YzRgdC60L7Qs9C+INGA0LXQv9C40YLQtdGA0LBcbiAgICBhc3luYyB1cGRhdGUgKCkge1xuXG4gICAgICBpZiAodGhpcy5lbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaClcblxuICAgICAgY29uc3QgcXVlcnkgPSB1cmxQYXJhbXMuZ2V0KCdmaWx0ZXJzJylcblxuICAgICAgaWYgKCFxdWVyeSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3QgZmlsdGVycyA9IEpTT04ucGFyc2UoYmFzZTY0VG9TdHJpbmcocXVlcnkpKVxuXG4gICAgICBPYmplY3QuZW50cmllcyhmaWx0ZXJzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgaWYgKGtleS5pbmNsdWRlcygnX3BhZ2UnKSkge1xuICAgICAgICAgIGNvbnN0IFtpZF0gPSBrZXkuc3BsaXQoJ18nKVxuICAgICAgICAgIHRoaXMudXBkYXRlUGFnaW5hdGlvbihpZCwgdmFsdWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVGaWx0ZXJzKCcjJyArIGtleSwgdmFsdWUpXG4gICAgICAgIH1cbiAgICAgIH0pXG5cblxuICAgICAgLy8g0L7QsdC90L7QstC70Y/QtdC8INGA0LXQv9C40YLQtdGA0YtcbiAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMuYmluZCkuZm9yRWFjaCgoW3JlcXVlc3RJZCwgb3B0aW9uc10pID0+IHtcbiAgICAgICAgY29uc3QgcmVwZWF0ZXIgPSB0aGlzLnJlcGVhdGVycy5maW5kKGUgPT4gZS5yZXF1ZXN0SWQgPT09IHJlcXVlc3RJZClcbiAgICAgICAgcmVwZWF0ZXIudXBkYXRlKG9wdGlvbnMpXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCB0aGlzLnJlbmRlcigpXG5cbiAgICB9XG5cbiAgICB1cGRhdGVQYWdpbmF0aW9uIChyZXBlYXRlcklkLCBwYWdlKSB7XG4gICAgICBjb25zdCBkYXRhID0gdGhpcy5iaW5kW3JlcGVhdGVySWRdXG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGRhdGEucGFnaW5hdGlvbi5vZmZzZXQgPSAocGFnZSAqIGRhdGEucGFnaW5hdGlvbi5saW1pdCkgLSBkYXRhLnBhZ2luYXRpb24ubGltaXRcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDRgyDQvdCw0YEg0Log0L7QtNC90L7QvNGDINGE0LjQu9GM0YLRgNGDIChpbnB1dCwgcmFkaW8pINC80L7QttC10YIg0LHRi9GC0Ywg0L/RgNC40LLRj9C30LDQvdC+INC90LXRgdC60L7Qu9GM0LrQviAkb3Ig0YTQuNC70YzRgtGA0L7QsiDQuCDQvdC10YHQutC+0LvRjNC60L4g0YDQtdC/0LjRgtC10YDQvtCyXG4gICAgLy8g0L/QvtGN0YLQvtC80YMg0L3QsNC00L4g0L7QsdC90L7QstC70Y/RgtGMINGE0LjQu9GM0YLRgCDQtNC70Y8g0LrQsNC20LTQvtCz0L4g0YDQtdC/0LjRgtC10YDQsFxuICAgIHVwZGF0ZUZpbHRlcnMgKHNlbGVjdG9yLCB2YWx1ZSkge1xuICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzLmJpbmQpLmZvckVhY2goKHsgZmlsdGVyczogeyAkYW5kIH0gfSkgPT4ge1xuICAgICAgICAkYW5kLmZvckVhY2goKHsgJG9yIH0pID0+IHtcbiAgICAgICAgICAkb3IuZm9yRWFjaChmID0+IHRoaXMudXBkYXRlRmlsdGVyKGYsIHNlbGVjdG9yLCB2YWx1ZSkpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cblxuICAgIHVwZGF0ZUZpbHRlciAoZmlsdGVyLCBzZWxlY3RvciwgdmFsdWUpIHtcbiAgICAgIE9iamVjdC5lbnRyaWVzKGZpbHRlcikuZm9yRWFjaCgoW18sIHsgX19zeXN0ZW0gfV0pID0+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IF9fc3lzdGVtPy5maWx0ZXJNZXRob2RzU3RydWN0dXJlO1xuICAgICAgICBpZiAoZGF0YT8uZWxlbWVudFNlbGVjdG9yID09PSBzZWxlY3Rvcikge1xuICAgICAgICAgIGZpbHRlcltfXSA9IGdldEZpbHRlckNvbmRpdGlvbnMoX19zeXN0ZW0sIGRhdGEuZmllbGRUeXBlLCBkYXRhLmNvbmRpdGlvbiwgdmFsdWUsIGRhdGEuZHluYW1pY1R5cGVEYXRhKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIGFzeW5jIGdldENvbnRlbnQgKCkge1xuXG4gICAgICBjb25zdCByZWZpbmVkQmluZCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5iaW5kKSlcbiAgICAgIE9iamVjdC5lbnRyaWVzKHJlZmluZWRCaW5kKS5mb3JFYWNoKChbcmVxdWVzdElkLCByZXF1ZXN0XSkgPT4ge1xuICAgICAgICByZXF1ZXN0LmZpbHRlcnMgPSBnZXRGaWx0ZXJzV2l0aFJlcGxhY2VkVGVtcGxhdGVWYXJpYWJsZXMocmVxdWVzdC5maWx0ZXJzLCB3aW5kb3cuUGFnZUN0eClcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgIGFjdGlvbjogJ2J1aWxkX2Jsb2NrJyxcbiAgICAgICAgaWRlbnRpdHk6IHRoaXMucm9vdElkLFxuICAgICAgICBjdHg6IHdpbmRvdy5QYWdlQ3R4IHx8IHt9LFxuICAgICAgICBiaW5kOiByZWZpbmVkQmluZFxuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy91c2VyLXdlYnNpdGUtYXBpL2J1aWxkZXIvJywge1xuICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04JyB9LFxuICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSlcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICB9XG5cbiAgICBhc3luYyByZW5kZXIgKCkge1xuXG4gICAgICBjb25zdCB0ZW1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIHRlbXAuaW5uZXJIVE1MID0gYXdhaXQgdGhpcy5nZXRDb250ZW50KClcbiAgICAgIGNvbnN0IG5ld0Jsb2NrID0gdGVtcC5maXJzdENoaWxkXG5cblxuICAgICAgT2JqZWN0LmtleXModGhpcy5iaW5kKS5mb3JFYWNoKHJlcXVlc3RJZCA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1JlcGVhdGVycyA9IEFycmF5LmZyb20odGVtcC5xdWVyeVNlbGVjdG9yQWxsKGBbZGF0YS1jLXJlcGVhdGVyKj1cImluICR7cmVxdWVzdElkfVwiXWApKVxuICAgICAgICBjb25zdCBvbGRSZXBlYXRlcnMgPSBBcnJheS5mcm9tKHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbChgW2RhdGEtYy1yZXBlYXRlcio9XCJpbiAke3JlcXVlc3RJZH1cIl1gKSlcblxuICAgICAgICBjb25zdCBuZXdQYXJlbnQgPSBuZXdSZXBlYXRlcnNbMF0/LnBhcmVudE5vZGVcbiAgICAgICAgY29uc3Qgb2xkUGFyZW50ID0gb2xkUmVwZWF0ZXJzWzBdPy5wYXJlbnROb2RlXG5cbiAgICAgICAgLy8g0JXRgdC70Lgg0L3QtdGCINGB0YLQsNGA0L7Qs9C+INGB0L/QuNGB0LrQsCwg0L/QtdGA0LXRgNC40YHQvtCy0YvQstCw0LXQvCDQstC10YHRjCDQsdC70L7QulxuICAgICAgICBpZiAoIW9sZFBhcmVudCkge1xuICAgICAgICAgIGNvbnN0IHN0eWxlID0gdGhpcy5lbC5zdHlsZVxuICAgICAgICAgIHRoaXMuZWwucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3QmxvY2ssIHRoaXMuZWwpXG4gICAgICAgICAgdGhpcy5lbCA9IG5ld0Jsb2NrXG4gICAgICAgICAgdGhpcy5lbC5zdHlsZSA9IHN0eWxlXG4gICAgICAgICAgcmVydW5Vc2VyU2NyaXB0cyhuZXdCbG9jaylcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vINCV0YHQu9C4INC90LXRgiDQvdC+0LLQvtCz0L4g0YDQtdC/0LjRgtC10YDQsCwg0L7Rh9C40YnQsNC10Lwg0YHRgtCw0YDRi9C5XG4gICAgICAgIGlmICghbmV3UGFyZW50KSB7XG4gICAgICAgICAgb2xkUGFyZW50LmlubmVySFRNTCA9ICcnXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICAvLyDQldGB0LvQuCDRgdC+0LTQtdGA0LbQuNC80L7QtSDQuNC30LzQtdC90LjQu9C+0YHRjCwg0L7QsdC90L7QstC70Y/QtdC8INGB0YLQsNGA0YvQuSDRgdC/0LjRgdC+0Log0Lgg0LLRi9C30YvQstCw0LXQvCDQv9C+0LvRjNC30L7QstCw0YLQtdC70YzRgdC60LjQtSDRgdC60YDQuNC/0YLRi1xuICAgICAgICBpZiAob2xkUGFyZW50LmlubmVySFRNTCAhPT0gbmV3UGFyZW50LmlubmVySFRNTCkge1xuICAgICAgICAgIG9sZFBhcmVudC5pbm5lckhUTUwgPSBuZXdQYXJlbnQuaW5uZXJIVE1MXG5cbiAgICAgICAgICBjb25zdCBmaXJzdFJlcGVhdGVyRWxlbWVudCA9IG9sZFBhcmVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1jLXJlcGVhdGVyKj1cImluICR7cmVxdWVzdElkfVwiXWApXG5cbiAgICAgICAgICBpZiAoZmlyc3RSZXBlYXRlckVsZW1lbnQpIHtcbiAgICAgICAgICAgIHNjcm9sbFRvRWxlbWVudChmaXJzdFJlcGVhdGVyRWxlbWVudClcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVydW5Vc2VyU2NyaXB0cyhvbGRQYXJlbnQpXG4gICAgICAgIH1cblxuICAgICAgICB0ZW1wLnJlbW92ZSgpXG4gICAgICB9KVxuICAgIH1cblxuXG5cbiAgICBzdGF0aWMgcnVuIChyb290ID0gZG9jdW1lbnQuYm9keSkge1xuXG4gICAgICBjb25zdCBibG9ja3MgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWJpbmRdOm5vdChbZGF0YS1iaW5kPVwiZTMwPVwiXSknKVxuXG4gICAgICBibG9ja3MuZm9yRWFjaChlID0+IHtcbiAgICAgICAgY29uc3QgYmluZCA9IG5ldyBCaW5kKGUpXG4gICAgICAgIGJpbmQuaW5pdCgpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gICAgQmluZC5ydW4oKVxuICB9KVxuXG4gIHdpbmRvdy51c2VyU2NyaXB0cyA9IHdpbmRvdy51c2VyU2NyaXB0cyB8fCB7fVxuICB3aW5kb3cudXNlclNjcmlwdHMuQmluZCA9IEJpbmRcblxuXG59KCkpXG5cblxuXG5cblxuXG4iLCIoZnVuY3Rpb24oKXtcblxuICBjb25zdCBkZWJvdW5jZSA9IHdpbmRvdy51c2VyU2NyaXB0cy5VdGlsLmRlYm91bmNlXG4gIGNvbnN0IGJhc2U2NFRvU3RyaW5nID0gd2luZG93LnVzZXJTY3JpcHRzLlV0aWwuYmFzZTY0VG9TdHJpbmdcbiAgY29uc3Qgc3RyaW5nVG9CYXNlNjQgPSB3aW5kb3cudXNlclNjcmlwdHMuVXRpbC5zdHJpbmdUb0Jhc2U2NFxuXG5cbi8qKlxuICog0JHQsNC30L7QstGL0Lkg0LrQu9Cw0YHRgSDQu9GO0LHQvtCz0L4g0YTQuNC70YzRgtGA0LBcbiAqINCe0L0g0YPQvNC10LXRgiDQv9C+0LvRg9GH0LDRgtGMINC30L3QsNGH0LXQvdC40LUg0YTQuNC70YzRgtGA0LAg0LjQtyBVUkwg0Lgg0L7QsdC90L7QstC70Y/RgtGMINC10LPQvlxuICovXG5cbmNsYXNzIFJlcGVhdGVyRmlsdGVyIHtcblxuICBjb25zdHJ1Y3RvciAocmVxdWVzdElkLCBrZXkpIHtcbiAgICB0aGlzLnJlcXVlc3RJZCA9IHJlcXVlc3RJZFxuICAgIHRoaXMua2V5ID0ga2V5XG4gIH1cblxuICBnZXQgZmlsdGVycyAoKSB7XG4gICAgY29uc3QgcXVlcnkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpLmdldCgnZmlsdGVycycpXG4gICAgcmV0dXJuIHF1ZXJ5ID8gSlNPTi5wYXJzZShiYXNlNjRUb1N0cmluZyhxdWVyeSkpIDoge31cbiAgfVxuXG4gIGdldCB2YWx1ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyc1t0aGlzLmtleV1cbiAgfVxuXG4gIHVwZGF0ZSAocGFyYW1zKSB7XG5cbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbilcblxuICAgIGNvbnN0IHsgaHJlZiwgaGFzaCB9ID0gdXJsXG4gICAgdXJsLmhhc2ggPSAnJ1xuXG4gICAgY29uc3QgYmFzZTY0ID0gc3RyaW5nVG9CYXNlNjQoSlNPTi5zdHJpbmdpZnkoey4uLnRoaXMuZmlsdGVycywgLi4ucGFyYW1zIH0pKVxuICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCdmaWx0ZXJzJywgYmFzZTY0KVxuXG4gICAgaWYgKGhyZWYgIT09IHVybC5ocmVmKSB7XG4gICAgICB1cmwuaGFzaCA9IGhhc2hcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsIHVybClcbiAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBQb3BTdGF0ZUV2ZW50KCdwb3BzdGF0ZScpKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqINCR0LDQt9C+0LLRi9C5INC60LvQsNGB0YEg0L/QsNCz0LjQvdCw0YbQuNC4LCDQvtGCINC90LXQs9C+INC90LDRgdC70LXQtNGD0Y7RgtGB0Y8g0LLRgdC1INC+0YHRgtCw0LvRjNC90YvQtSDQstC40LTRiyDQv9Cw0LPQuNC90LDRhtC40LhcbiAqL1xuXG5jbGFzcyBSZXBlYXRlclBhZ2luYXRpb24gZXh0ZW5kcyBSZXBlYXRlckZpbHRlciB7XG4gIGNvbnN0cnVjdG9yKHJlcXVlc3RJZCwgcGVyUGFnZSwgdG90YWwpIHtcbiAgICBjb25zdCBrZXkgPSBgJHtyZXF1ZXN0SWR9X3BhZ2VgXG4gICAgc3VwZXIocmVxdWVzdElkLCBrZXkpXG4gICAgdGhpcy50b3RhbCA9IHRvdGFsXG4gICAgdGhpcy5wZXJQYWdlID0gcGVyUGFnZVxuICB9XG5cbiAgZ2V0IGN1cnJlbnRQYWdlICgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZSA/IE51bWJlcih0aGlzLnZhbHVlKSA6IDFcbiAgfVxuXG4gIGdldCBtYXhQYWdlICgpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMudG90YWwgLyB0aGlzLnBlclBhZ2UpXG4gIH1cblxuICBzZXRQYWdlKHBhZ2UpIHtcblxuICAgIGlmIChwYWdlIDwgMSkge1xuICAgICAgdGhpcy51cGRhdGUoeyBbdGhpcy5rZXldOiAxIH0pXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAocGFnZSA+IHRoaXMubWF4UGFnZSkge1xuICAgICAgdGhpcy51cGRhdGUoeyBbdGhpcy5rZXldOiB0aGlzLm1heFBhZ2UgfSApXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZSh7IFt0aGlzLmtleV06IHBhZ2UgfSlcbiAgfVxuXG4gIHNldFRvdGFsKHRvdGFsKSB7XG4gICAgdGhpcy50b3RhbCA9IHRvdGFsXG4gIH1cbn1cblxuLyoqXG4gKiDQn9Cw0LPQuNC90LDRhtC40Y8g0YEg0LrQvdC+0L/QutCw0LzQuCDQktC/0LXRgNC10LQt0J3QsNC30LDQtFxuICovXG5cbmNsYXNzIFJlcGVhdGVyUHJldk5leHRQYWdpbmF0aW9uIGV4dGVuZHMgUmVwZWF0ZXJQYWdpbmF0aW9uIHtcbiAgY29uc3RydWN0b3IocmVxdWVzdElkLCBwZXJQYWdlLCB0b3RhbCwgb3B0aW9ucykge1xuICAgIHN1cGVyKHJlcXVlc3RJZCwgcGVyUGFnZSwgdG90YWwpXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICAgIHRoaXMuaW5pdCgpXG4gIH1cblxuICBpbml0ICgpIHtcblxuICAgIGlmICghdGhpcy5vcHRpb25zKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5vcHRpb25zLmVsZW1lbnRTZWxlY3RvcilcblxuXG4gICAgaWYgKGVsKSB7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRoaXMub3B0aW9ucy50cmlnZ2VyLCAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgdGhpc1t0aGlzLm9wdGlvbnMuZWZmZWN0XSgpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHByZXZQYWdlICgpIHtcbiAgICB0aGlzLnNldFBhZ2UodGhpcy5jdXJyZW50UGFnZSAtIDEpXG4gIH1cblxuICBuZXh0UGFnZSAoKSB7XG4gICAgdGhpcy5zZXRQYWdlKHRoaXMuY3VycmVudFBhZ2UgKyAxKVxuICB9XG5cbn1cblxuLyoqXG4gKiDQmNC90L/Rg9GCINGBINGC0LjQv9C+0Lwg0LrQvtGC0L7RgNGL0Lkg0L/QvtC00LTQtdGA0LbQuNCy0LDQtdGCINC/0L7QuNGB0Lo6INGC0LXQutGB0YIsINGG0LXQu9C+0LUuLi5cbiAqL1xuXG5jbGFzcyBSZXBlYXRlclNlYXJjaElucHV0IGV4dGVuZHMgUmVwZWF0ZXJGaWx0ZXIge1xuICBjb25zdHJ1Y3RvcihyZXF1ZXN0SWQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBrZXkgPSBvcHRpb25zLmVsZW1lbnRTZWxlY3Rvci5yZXBsYWNlQWxsKCcjJywgJycpXG4gICAgc3VwZXIocmVxdWVzdElkLCBrZXkpXG4gICAgdGhpcy5yZXF1ZXN0SWQgPSByZXF1ZXN0SWRcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zXG4gICAgdGhpcy5kZWJvdW5jZVNlYXJjaCA9IGRlYm91bmNlKHRoaXMuc2VhcmNoLmJpbmQodGhpcyksIDcwMClcbiAgICB0aGlzLmluaXQoKVxuICB9XG5cbiAgaW5pdCAoKSB7XG5cblxuICAgIGlmICghdGhpcy5vcHRpb25zKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5vcHRpb25zLmVsZW1lbnRTZWxlY3RvcilcblxuICAgIGlmIChlbCkge1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgdGhpcy5kZWJvdW5jZVNlYXJjaChlLnRhcmdldC52YWx1ZSlcbiAgICAgIH0pXG5cbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4ge1xuICAgICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICB0aGlzLnNlYXJjaChlLnRhcmdldC52YWx1ZSlcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgLy8g0LXRgdC70Lgg0LXRgdGC0Ywg0LfQvdCw0YfQtdC90LjQtSDQv9C+INGD0LzQvtC70YfQsNC90LjRjlxuICAgICAgaWYgKHRoaXMudmFsdWUgPT09IHVuZGVmaW5lZCAmJiB0aGlzLm9wdGlvbnMuY29uZGl0aW9uVmFsdWUgIT09IG51bGwgJiYgdGhpcy5vcHRpb25zLmNvbmRpdGlvblZhbHVlICE9PSAnJykge1xuICAgICAgICB0aGlzLnNlYXJjaCh0aGlzLm9wdGlvbnMuY29uZGl0aW9uVmFsdWUpXG4gICAgICAgIGVsLnZhbHVlID0gdGhpcy5vcHRpb25zLmNvbmRpdGlvblZhbHVlXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBlbC52YWx1ZSA9IFN0cmluZyh0aGlzLnZhbHVlIHx8ICcnKVxuXG4gICAgfVxuICB9XG5cbiAgc2VhcmNoIChlKSB7XG4gICAgaWYgKHR5cGVvZiBlICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgZSAhPT0gJ251bWJlcicpIHJldHVyblxuICAgIGxldCByZWZpbmVkVmFsdWUgPSBlXG4gICAgaWYgKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMuZmllbGRUeXBlID09PSAnaW50Jykge1xuICAgICAgcmVmaW5lZFZhbHVlID0gcGFyc2VJbnQoU3RyaW5nKHJlZmluZWRWYWx1ZSkpXG5cbiAgICAgIGlmICghaXNGaW5pdGUocmVmaW5lZFZhbHVlKSkge1xuICAgICAgICByZWZpbmVkVmFsdWUgPSAwXG4gICAgICB9XG4gICAgfVxuICAgIC8vINC/0YDQuCDQuNC30LzQtdC90LXQvdC40Lgg0YTQuNC70YzRgtGA0LAsINGB0LHRgNCw0YHRi9Cy0LDQtdC8INC/0LDQs9C40L3QsNGG0LjRjlxuICAgIGNvbnN0IHBhZ2luYXRpb25LZXkgPSBgJHt0aGlzLnJlcXVlc3RJZH1fcGFnZWBcbiAgICB0aGlzLnVwZGF0ZSh7IFt0aGlzLmtleV06IHJlZmluZWRWYWx1ZSwgW3BhZ2luYXRpb25LZXldOiAxIH0pXG4gIH1cbn1cblxuICB3aW5kb3cudXNlclNjcmlwdHMgPSB3aW5kb3cudXNlclNjcmlwdHMgfHwge31cbiAgd2luZG93LnVzZXJTY3JpcHRzLlJlcGVhdGVyUHJldk5leHRQYWdpbmF0aW9uID0gUmVwZWF0ZXJQcmV2TmV4dFBhZ2luYXRpb25cbiAgd2luZG93LnVzZXJTY3JpcHRzLlJlcGVhdGVyU2VhcmNoSW5wdXQgPSBSZXBlYXRlclNlYXJjaElucHV0XG5cbn0oKSk7XG4iLCJpbXBvcnQgJy4vZmlsdGVycydcbmltcG9ydCAnLi9yZXBlYXRlcidcbmltcG9ydCAnLi9iaW5kJ1xuIiwiXG4oZnVuY3Rpb24oKXtcblxuICBjb25zdCBnZXRGaWx0ZXJzV2l0aFJlcGxhY2VkVGVtcGxhdGVWYXJpYWJsZXMgPSB3aW5kb3cudXNlclNjcmlwdHMuVXRpbC5nZXRGaWx0ZXJzV2l0aFJlcGxhY2VkVGVtcGxhdGVWYXJpYWJsZXNcblxuICBjbGFzcyBSZXBlYXRlciB7XG4gICAgY29uc3RydWN0b3IocmVxdWVzdElkLCBvcHRpb25zKSB7XG4gICAgICB0aGlzLnJlcXVlc3RJZCA9IHJlcXVlc3RJZFxuICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICAgICAgdGhpcy5wYWdpbmF0aW9ucyA9IFtdXG4gICAgICB0aGlzLmlucHV0cyA9IFtdXG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdCAoKSB7XG4gICAgICB0aGlzLnRvdGFsID0gYXdhaXQgdGhpcy5nZXRUb3RhbCh0aGlzLm9wdGlvbnMpXG4gICAgICB0aGlzLnBhZ2luYXRpb25zID0gdGhpcy5pbml0UGFnaW5hdGlvbigpXG4gICAgICB0aGlzLmlucHV0cyA9IHRoaXMuaW5pdFNlYXJjaGVzKClcbiAgICB9XG5cbiAgICBpbml0UGFnaW5hdGlvbiAoKSB7XG4gICAgICBjb25zdCBwYWdpbmF0aW9uRGF0YSA9IHRoaXMub3B0aW9ucy5wYWdpbmF0aW9uLl9fc3lzdGVtPy5wYWdpbmF0aW9uTWV0aG9kc1N0cnVjdHVyZXMgfHwgW11cbiAgICAgIHJldHVybiBwYWdpbmF0aW9uRGF0YS5tYXAoZSA9PiBuZXcgd2luZG93LnVzZXJTY3JpcHRzLlJlcGVhdGVyUHJldk5leHRQYWdpbmF0aW9uKHRoaXMucmVxdWVzdElkLCB0aGlzLm9wdGlvbnMucGFnaW5hdGlvbi5saW1pdCwgdGhpcy50b3RhbCwgZSkpXG4gICAgfVxuXG4gICAgLy8g0LjQvdC40YbQuNCw0LvQuNC30LjRgNGD0LXQvCDQstGB0LUg0LjQvdC/0YPRgtGLINGBIGZpZWxkVHlwZTogdGV4dCDQuCDQv9C+0LTQvtCx0L3Ri9C1XG4gICAgaW5pdFNlYXJjaGVzICgpIHtcblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZmlsdGVycyB8fCAhdGhpcy5vcHRpb25zLmZpbHRlcnMuJGFuZCkge1xuICAgICAgICByZXR1cm4gW11cbiAgICAgIH1cblxuICAgICAgY29uc3QgZmlsdGVyTWV0aG9kc1N0cnVjdHVyZXMgPSB0aGlzLm9wdGlvbnMuZmlsdGVycy4kYW5kLm1hcChhbmQgPT4ge1xuICAgICAgICByZXR1cm4gYW5kLiRvci5tYXAob3IgPT4gT2JqZWN0LnZhbHVlcyhvcikubWFwKGUgPT4gZS5fX3N5c3RlbT8uZmlsdGVyTWV0aG9kc1N0cnVjdHVyZSkpXG4gICAgICB9KS5mbGF0KEluZmluaXR5KVxuXG4gICAgICBjb25zdCBzZWFyY2hhYmxlRmlsdGVyTWV0aG9kc1N0cnVjdHVyZXMgPSBmaWx0ZXJNZXRob2RzU3RydWN0dXJlcy5maWx0ZXIoZSA9PiBlLmVsZW1lbnRTZWxlY3RvciAmJiAoZS5maWVsZFR5cGUgPT09ICd0ZXh0JyB8fCBlLmZpZWxkVHlwZSA9PT0gJ2ludCcpKVxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgLi4uc2VhcmNoYWJsZUZpbHRlck1ldGhvZHNTdHJ1Y3R1cmVzLm1hcChlID0+IG5ldyB3aW5kb3cudXNlclNjcmlwdHMuUmVwZWF0ZXJTZWFyY2hJbnB1dCh0aGlzLnJlcXVlc3RJZCwgZSkpLFxuICAgICAgXVxuICAgIH1cblxuICAgIGFzeW5jIHVwZGF0ZSAob3B0aW9ucykge1xuICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICAgICAgdGhpcy50b3RhbCA9IGF3YWl0IHRoaXMuZ2V0VG90YWwoKVxuICAgICAgdGhpcy5wYWdpbmF0aW9ucy5mb3JFYWNoKGUgPT4gZS5zZXRUb3RhbCh0aGlzLnRvdGFsKSlcbiAgICB9XG5cbiAgICAvLyBUT0RPINCx0Y3QuiDQtNC+0LHQsNCy0LjRgiB0b3RhbCDQtNC70Y8g0LrQsNC20LTQvtCz0L4g0YDQtdC/0LjRgtC10YDQsCDQsiDQsNGC0YDQuNCx0YPRgiwg0YfRgtC+0LHRiyDQvdC1INC00LXQu9Cw0YLRjCDRjdGC0L7RgiDQt9Cw0L/RgNC+0YFcbiAgICBhc3luYyBnZXRUb3RhbCAoKSB7XG4gICAgICBjb25zdCByZWZpbmVkT3B0aW9ucyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5vcHRpb25zKSlcblxuICAgICAgcmVmaW5lZE9wdGlvbnMuZmlsdGVycyA9IGdldEZpbHRlcnNXaXRoUmVwbGFjZWRUZW1wbGF0ZVZhcmlhYmxlcyhyZWZpbmVkT3B0aW9ucy5maWx0ZXJzLCB3aW5kb3cuUGFnZUN0eClcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoYXdhaXQgZmV0Y2goJy91c2VyLXdlYnNpdGUtYXBpL2NvbGxlY3Rpb25zL3NlYXJjaC8nLCB7XG4gICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgnIH0sXG4gICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7Li4ucmVmaW5lZE9wdGlvbnMsIGZvcm1hdDogJ2NvdW50J30pXG4gICAgICB9KSkuanNvbigpXG5cbiAgICAgIHJldHVybiByZXNwb25zZS50b3RhbFxuICAgIH1cblxuICB9XG5cblxuICB3aW5kb3cudXNlclNjcmlwdHMgPSB3aW5kb3cudXNlclNjcmlwdHMgfHwge31cbiAgd2luZG93LnVzZXJTY3JpcHRzLlJlcGVhdGVyID0gUmVwZWF0ZXJcblxufSgpKTtcblxuXG5cblxuXG5cblxuIiwiXG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBjb25zdCBiYXNlNjRUb1N0cmluZyA9IHdpbmRvdy51c2VyU2NyaXB0cy5VdGlsLmJhc2U2NFRvU3RyaW5nXG5cbiAgY29uc3QgRU5EUE9JTlQgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgJy91c2VyLXdlYnNpdGUtYXBpJ1xuICAvLyBjb25zdCBFTkRQT0lOVCA9ICdodHRwczovL3FmNDQ1MC5jcmFmdHVtLmlvJyArICcvdXNlci13ZWJzaXRlLWFwaSdcblxuICBjb25zdCBGT1JNX0VORFBPSU5UID0gRU5EUE9JTlQgKyAnL2Zvcm0vJ1xuICBjb25zdCBDQVJUX0VORFBPSU5UID0gRU5EUE9JTlQgKyAnL2NoZWNrb3V0LydcbiAgY29uc3QgUkVRVUlSRURfRklFTERfRVJST1JfVEVYVCA9ICfQntCx0Y/Qt9Cw0YLQtdC70YzQvdC+0LUg0L/QvtC70LUnXG5cbiAgLy8gWWFuZGV4IENhcHRjaGFcbiAgY29uc3QgS0VZX1lBTkRFWF9DQVBUQ0hBID0gJ3lzYzFfZ3gzR3Q4Z1J3RmR4Um9sTlN0S1RXZVFrUmlxNWxvTmNSSG1udXRsYjY2YjhiMTA2J1xuICBjb25zdCBPTkxPQURfWUFOREVYX0NBUFRDSEEgPSAncmVuZGVyQWZ0ZXJMb2FkaW5nU21hcnRDYXB0Y2hhJ1xuICBjb25zdCBTUkNfWUFOREVYX0NBUFRDSEEgPSBgaHR0cHM6Ly9zbWFydGNhcHRjaGEueWFuZGV4Y2xvdWQubmV0L2NhcHRjaGEuanM/cmVuZGVyPW9ubG9hZCZvbmxvYWQ9JHtPTkxPQURfWUFOREVYX0NBUFRDSEF9YFxuICBjb25zdCBDT05UQUlORVJfSURfWUFOREVYX0NBUFRDSEEgPSAnY2FwdGNoYS1jb250YWluZXItJ1xuXG4gIGNvbnN0IGZvcm1zID0gW11cbiAgY29uc3QgbWV0YVRhZ3NDYXB0Y2hhID0gZG9jdW1lbnQuaGVhZC5xdWVyeVNlbGVjdG9yQWxsKCdtZXRhW25hbWU9XCJjYXB0Y2hhXCJdJylcblxuICB3aW5kb3dbT05MT0FEX1lBTkRFWF9DQVBUQ0hBXSA9ICgpID0+IHtcbiAgICBpZiAoIXdpbmRvdy5zbWFydENhcHRjaGEgfHwgZm9ybXMubGVuZ3RoID09PSAwKSByZXR1cm5cbiAgICBmb3Jtcy5mb3JFYWNoKGZvcm0gPT4ge1xuICAgICAgZm9ybS5pbml0U21hcnRDYXB0Y2hhKClcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gc2VyaWFsaXplRm9ybShmb3JtTm9kZSkge1xuICAgIGNvbnN0IHsgZWxlbWVudHMgfSA9IGZvcm1Ob2RlXG5cbiAgICBjb25zdCByZXN1bHRXaXRoVGVtcElkcyA9IEFycmF5LmZyb20oZWxlbWVudHMpXG4gICAgICAucmVkdWNlKChhY2MsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgaWYgKCFlbGVtZW50Lm5hbWUgfHwgZWxlbWVudC5uYW1lID09PSAnc21hcnQtdG9rZW4nKSByZXR1cm4gYWNjXG5cbiAgICAgICAgY29uc3QgeyBuYW1lLCB0eXBlLCBjaGVja2VkLCB2YWx1ZSB9ID0gZWxlbWVudFxuICAgICAgICAvLyDRgyBzZWxlY3Qg0YLQuNC/INC90LAg0LHRjdC60LUgdGV4dFxuICAgICAgICBpZiAodHlwZSA9PT0gJ3NlbGVjdC1vbmUnKSB7XG4gICAgICAgICAgcmV0dXJuIFsuLi5hY2MsIHsgbmFtZSwgdmFsdWUsIHR5cGU6ICd0ZXh0JyB9XVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjaGVja2JveCcgfHwgdHlwZSA9PT0gJ3JhZGlvJykge1xuXG4gICAgICAgICAgLy8gbmFtZSDRgdC+0LTQtdGA0LbQuNGCINCw0LnQtNC40YjQvdC40Log0LPRgNGD0L/Qv9GLLCDRgtCw0Log0YfRgtC+INC40LzRjyDQvdGD0LbQvdC+INCx0YDQsNGC0Ywg0LjQtyBsZWdlbmRcbiAgICAgICAgICBjb25zdCBmaWVsZHNldCA9IGVsZW1lbnQuY2xvc2VzdCgnZmllbGRzZXQnKVxuXG4gICAgICAgICAgaWYgKCFmaWVsZHNldCkgcmV0dXJuIGFjY1xuXG4gICAgICAgICAgY29uc3QgbGVnZW5kID0gZmllbGRzZXQucXVlcnlTZWxlY3RvcignbGVnZW5kJylcblxuICAgICAgICAgIGNvbnN0IGxlZ2VuZFRleHRDb250ZW50ID0gbGVnZW5kID8gbGVnZW5kLnRleHRDb250ZW50IDogZmllbGRzZXQuaWRcblxuICAgICAgICAgIC8vINC80LDRgdGB0LjQsiDRgdGC0YDQvtC6INGB0L4g0LfQvdCw0YfQtdC90LjRj9C80LhcbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuXG4gICAgICAgICAgICBpZiAoIWNoZWNrZWQpIHJldHVybiBhY2NcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gYWNjLmZpbmQoZSA9PiBlLnR5cGUgPT09ICdsaXN0JyAmJiBlLnRlbXBJZCA9PT0gbmFtZSlcblxuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgIG1hdGNoLnZhbHVlLnB1c2godmFsdWUpXG4gICAgICAgICAgICAgIHJldHVybiBhY2NcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBbLi4uYWNjLCB7IG5hbWU6IGxlZ2VuZFRleHRDb250ZW50LCB2YWx1ZTogW3ZhbHVlXSwgdHlwZTogJ2xpc3QnLCB0ZW1wSWQ6IG5hbWUgfV1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgICAgICBpZiAoIWNoZWNrZWQpIHJldHVybiBhY2NcbiAgICAgICAgICAgIHJldHVybiBbLi4uYWNjLCB7IG5hbWU6IGxlZ2VuZFRleHRDb250ZW50LCB2YWx1ZSwgdHlwZTogJ3RleHQnIH1dXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFsuLi5hY2MsIHsgbmFtZSwgdmFsdWUsIHR5cGUgfV1cbiAgICAgIH0sIFtdKVxuXG4gICAgICBjb25zdCByZXN1bHQgPSByZXN1bHRXaXRoVGVtcElkcy5tYXAoKHsgdGVtcElkLCAuLi5yZXN0IH0pID0+IHJlc3QpXG5cbiAgICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFB1cmVJZCAoaWQpIHtcbiAgICByZXR1cm4gaWQuc3BsaXQoJ24tJylbMV1cbiAgfVxuXG4gIGZ1bmN0aW9uIGxvYWRTbWFydENhcHRjaGEgKCkge1xuICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpXG4gICAgc2NyaXB0LnNyYyA9IFNSQ19ZQU5ERVhfQ0FQVENIQVxuICAgIHNjcmlwdC5kZWZlciA9IHRydWVcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdClcbiAgfVxuXG5cbiAgZnVuY3Rpb24gaXNDYXB0Y2hhRW5hYmxlZCgpIHtcbiAgICByZXR1cm4gbWV0YVRhZ3NDYXB0Y2hhLmxlbmd0aCA+IDAgJiYgWy4uLm1ldGFUYWdzQ2FwdGNoYV0uc29tZSh0YWcgPT4gdGFnLmNvbnRlbnQgIT09ICdudWxsJylcbiAgfVxuXG4gIGNsYXNzIEZvcm0ge1xuXG4gICAgY29uc3RydWN0b3IgKGVsKSB7XG4gICAgICB0aGlzLmVsID0gZWxcbiAgICAgIHRoaXMuYnV0dG9uID0gZWwucXVlcnlTZWxlY3RvcignW3R5cGU9XCJzdWJtaXRcIl0nKVxuICAgICAgdGhpcy5hY3Rpb25UeXBlID0gZWwuZGF0YXNldC5mb3JtQWN0aW9uVHlwZVxuICAgICAgdGhpcy5yZWRpcmVjdFVybCA9IGVsLmRhdGFzZXQuZm9ybVJlZGlyZWN0VXJsXG4gICAgICB0aGlzLm1lc3NhZ2UgPSBlbC5kYXRhc2V0LmZvcm1NZXNzYWdlXG4gICAgICB0aGlzLnJlcXVpcmVkRmllbGRzID0gZWwucXVlcnlTZWxlY3RvckFsbCgnW3JlcXVpcmVkXScpXG4gICAgICB0aGlzLmlucHV0cyA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JylcbiAgICAgIHRoaXMueWFuZGV4R29hbElkID0gdGhpcy5idXR0b24gJiYgdGhpcy5idXR0b24uZGF0YXNldC55YW5kZXhHb2FsSWRcbiAgICAgIHRoaXMuZ29vZ2xlRXZlbnQgPSB0aGlzLmJ1dHRvbiAmJiB0aGlzLmJ1dHRvbi5kYXRhc2V0Lmdvb2dsZUV2ZW50ICYmIEpTT04ucGFyc2UoYmFzZTY0VG9TdHJpbmcodGhpcy5idXR0b24uZGF0YXNldC5nb29nbGVFdmVudCkpXG4gICAgICB0aGlzLndpZGdldFNtYXJ0Q2FwdGNoYUlkID0gbnVsbFxuICAgICAgdGhpcy5zbWFydENhcHRjaGFDb250YWluZXJJZCA9IENPTlRBSU5FUl9JRF9ZQU5ERVhfQ0FQVENIQSArIHRoaXMuaWRcbiAgICAgIHRoaXMud3JhcHBlckNhcHRjaGFDb250YWluZXIgPSBudWxsXG4gICAgfVxuXG4gICAgZ2V0IHJlZGlyZWN0QWZ0ZXJTZW5kICgpIHtcbiAgICAgIHJldHVybiAodGhpcy5hY3Rpb25UeXBlID09PSAncmVkaXJlY3RfdG9fcGFnZScgfHwgdGhpcy5hY3Rpb25UeXBlID09PSAncmVkaXJlY3RfdG9fc2l0ZScpICYmIHRoaXMucmVkaXJlY3RVcmxcbiAgICB9XG5cbiAgICBnZXQgbWVzc2FnZUFmdGVyU2VuZCAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hY3Rpb25UeXBlID09PSAnc2hvd19tZXNzYWdlJyAmJiB0aGlzLm1lc3NhZ2VcbiAgICB9XG5cbiAgICBnZXQgY2FydCAoKSB7XG4gICAgICBjb25zdCBibG9jayA9IHRoaXMuZWwuY2xvc2VzdCgnW2RhdGEtYmxvY2stY29udGVudF0nKVxuICAgICAgcmV0dXJuIGJsb2NrICYmIGJsb2NrLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXNjcmlwdD1cImNhcnQtaXRlbXNcIl0nKVxuICAgIH1cblxuICAgIGdldCBwb3B1cCAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbC5jbG9zZXN0KCdbZGF0YS1wb3B1cD1cInRydWVcIl0nKVxuICAgIH1cblxuXG5cbiAgICBnZXQgaWQgKCkge1xuICAgICAgcmV0dXJuIGdldFB1cmVJZCh0aGlzLmVsLmlkKVxuICAgIH1cblxuICAgIHJlc2V0ICgpIHtcbiAgICAgIHRoaXMuZWwucmVzZXQoKVxuICAgICAgY29uc3QgY2hlY2tib3hlcyA9IHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJylcbiAgICAgIGNoZWNrYm94ZXMuZm9yRWFjaChjID0+IGMuY2hlY2tlZCA9IGZhbHNlKVxuICAgIH1cblxuICAgIHN1Y2Nlc3NIYW5kbGUgKCkge1xuICAgICAgdGhpcy5yZXNldCgpXG5cbiAgICAgIGlmICh3aW5kb3cuWWEgJiYgdGhpcy55YW5kZXhHb2FsSWQgJiYgdHlwZW9mIHltICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB5bSh3aW5kb3cuWWEuX21ldHJpa2EuZ2V0Q291bnRlcnMoKVswXS5pZCwncmVhY2hHb2FsJywgdGhpcy55YW5kZXhHb2FsSWQpXG4gICAgICB9XG5cbiAgICAgIGlmICh3aW5kb3cuZ3RhZyAmJiB0aGlzLmdvb2dsZUV2ZW50KSB7XG4gICAgICAgIHdpbmRvdy5ndGFnKCdldmVudCcsIHRoaXMuZ29vZ2xlRXZlbnQuZXZlbnRBY3Rpb24sIHtcbiAgICAgICAgICAnZXZlbnRfY2F0ZWdvcnknOiB0aGlzLmdvb2dsZUV2ZW50LmV2ZW50Q2F0ZWdvcnksXG4gICAgICAgICAgJ2V2ZW50X2xhYmVsJzogdGhpcy5nb29nbGVFdmVudC5ldmVudExhYmVsXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIC8vINC10YHQu9C4INGN0YLQviBwb3B1cCwg0LfQsNC60YDRi9Cy0LDQtdC8INC10LPQvlxuXG4gICAgICBpZiAodGhpcy5wb3B1cCkge1xuICAgICAgICB3aW5kb3cudXNlclNjcmlwdHMuVXRpbC5oaWRlUG9wdXAodGhpcy5wb3B1cClcbiAgICAgIH1cblxuICAgICAgLy8g0LXRgdC70Lgg0LrQvtGA0LfQuNC90LAgLSDRh9C40YHRgtC40LxcbiAgICAgIGlmICh0aGlzLmNhcnQpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ3B1YmxpYy1jbGVhci1jYXJ0JylcbiAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChldmVudClcbiAgICAgICAgLy8g0LXRgdC70Lgg0L/QvtC00LrQu9GO0YfQtdC90LAg0L/Qu9Cw0YLQtdC20L3QsNGPINGB0LjRgdGC0LXQvNCwINC40LPQvdC+0YDQuNGA0YPQtdC8INC00YDRg9Cz0LjQtSDQtNC10LnRgdGC0LLQuNGPXG4gICAgICAgIGlmICh0aGlzLmVsLmRhdGFzZXQucGF5bWVudCkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnJlZGlyZWN0QWZ0ZXJTZW5kKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24odGhpcy5yZWRpcmVjdFVybClcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubWVzc2FnZUFmdGVyU2VuZCkge1xuXG4gICAgICAgIGNvbnN0IFtwYWdlVXJsLCB0YXJnZXRJZF0gPSB0aGlzLm1lc3NhZ2Uuc3BsaXQoJyMnKVxuXG4gICAgICAgIGlmIChwYWdlVXJsICYmIHBhZ2VVcmwgIT09IGRlY29kZVVSSUNvbXBvbmVudCh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih0aGlzLm1lc3NhZ2UpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGFyZ2V0SWQgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyB0YXJnZXRJZClcbiAgICAgICAgICBpZiAodGFyZ2V0KSB3aW5kb3cudXNlclNjcmlwdHMuVXRpbC5zaG93UG9wdXAodGFyZ2V0KVxuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgIH1cblxuICAgIGhhbmRsZVBheW1lbnQgKGZvcm1IdG1sKSB7XG4gICAgICBjb25zdCBwYXltZW50SW5wdXQgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXBheW1lbnQtbGFiZWxdIGlucHV0JylcblxuICAgICAgaWYgKHBheW1lbnRJbnB1dCAmJiAhcGF5bWVudElucHV0LmNoZWNrZWQpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGZvcm1EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgZm9ybURpdi5pbm5lckhUTUwgKz0gZm9ybUh0bWxcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybURpdilcbiAgICAgIGZvcm1EaXYucXVlcnlTZWxlY3RvcignZm9ybScpLnN1Ym1pdCgpXG4gICAgfVxuXG4gICAgY3JlYXRlU21hcnRDYXB0Y2hhQ29udGFpbmVyKCkge1xuICAgICAgLy8g0LrQvtC90YLQtdC50L3QtdGAINC00LvRjyDQutCw0L/Rh9C4XG4gICAgICBjb25zdCBjYXB0Y2hhQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIGNhcHRjaGFDb250YWluZXIuaWQgPSB0aGlzLnNtYXJ0Q2FwdGNoYUNvbnRhaW5lcklkXG4gICAgICB0aGlzLndyYXBwZXJDYXB0Y2hhQ29udGFpbmVyLmFwcGVuZENoaWxkKGNhcHRjaGFDb250YWluZXIpXG4gICAgfVxuXG4gICAgaGlkZUNhcHRjaGFXcmFwcGVyKCkge1xuICAgICAgdGhpcy53cmFwcGVyQ2FwdGNoYUNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdzaG93LWNhcHRjaGEtY29udGFpbmVyJylcbiAgICAgIHRoaXMuY2xlYXJFdmVudENhcHRjaGFXcmFwcGVyKClcbiAgICB9XG5cbiAgICBjbGVhckV2ZW50Q2FwdGNoYVdyYXBwZXIoKSB7XG4gICAgICB0aGlzLndyYXBwZXJDYXB0Y2hhQ29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuZmFkZUhhbmRsZXJDYXB0Y2hhV3JhcHBlci5iaW5kKHRoaXMpKVxuICAgIH1cblxuICAgIGZhZGVIYW5kbGVyQ2FwdGNoYVdyYXBwZXIoZSkge1xuICAgICAgaWYgKGUudGFyZ2V0ID09PSB0aGlzLndyYXBwZXJDYXB0Y2hhQ29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuaGlkZUNhcHRjaGFXcmFwcGVyKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzaG93Q2FwdGNoYVdyYXBwZXIoKSB7XG4gICAgICB0aGlzLndyYXBwZXJDYXB0Y2hhQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3Nob3ctY2FwdGNoYS1jb250YWluZXInKVxuICAgICAgdGhpcy53cmFwcGVyQ2FwdGNoYUNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLmZhZGVIYW5kbGVyQ2FwdGNoYVdyYXBwZXIuYmluZCh0aGlzKSlcbiAgICB9XG5cblxuICAgIGluaXRTbWFydENhcHRjaGEoKSB7XG4gICAgICB0aGlzLmNyZWF0ZVNtYXJ0Q2FwdGNoYUNvbnRhaW5lcigpXG4gICAgICBjb25zdCBjYXB0Y2hhT3B0aW9ucyA9IHtcbiAgICAgICAgc2l0ZWtleTogS0VZX1lBTkRFWF9DQVBUQ0hBLFxuICAgICAgICBjYWxsYmFjazogdGhpcy5vblN1Ym1pdC5iaW5kKHRoaXMpXG4gICAgICB9XG4gICAgICB0aGlzLndpZGdldFNtYXJ0Q2FwdGNoYUlkID0gd2luZG93LnNtYXJ0Q2FwdGNoYS5yZW5kZXIodGhpcy5zbWFydENhcHRjaGFDb250YWluZXJJZCwgY2FwdGNoYU9wdGlvbnMpXG4gICAgfVxuXG4gICAgYXN5bmMgb25TdWJtaXQgKHRva2VuID0gbnVsbCkge1xuICAgICAgdGhpcy5oaWRlQ2FwdGNoYVdyYXBwZXIoKVxuXG4gICAgICAvLyDRgdC+0LHQuNGA0LDQtdC8INC00LDQvdC90YvQtSDRgSDQv9C+0LvQtdC5INGE0L7RgNC80YtcbiAgICAgIGNvbnN0IGRhdGEgPSBzZXJpYWxpemVGb3JtKHRoaXMuZWwpXG5cbiAgICAgIGNvbnN0IHNlY3Rpb24gPSB0aGlzLmVsLmNsb3Nlc3QoJ3NlY3Rpb24nKVxuXG4gICAgICBjb25zdCBwYXlsb2FkID0geyBpZDogdGhpcy5pZCwgZGF0YSwgYmxvY2tfaWQ6IHNlY3Rpb24gJiYgc2VjdGlvbi5kYXRhc2V0LnJvb3RJZCwgdG9rZW4gfVxuXG4gICAgICAvLyDRgdC+0LHQuNGA0LDQtdC8IFVUTSDQtNCw0L3QvdGL0LVcbiAgICAgIGNvbnN0IFVUTUhlbHBlciA9IHdpbmRvdy51c2VyU2NyaXB0cy5VVE1IZWxwZXJcbiAgICAgIGNvbnN0IHV0bXMgPSBVVE1IZWxwZXIuZ2V0SXRlbXMoKVxuICAgICAgaWYgKHV0bXMpIHtcbiAgICAgICAgcGF5bG9hZC51dG0gPSB1dG1zXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmNhcnQpIHtcbiAgICAgICAgY29uc3QgY2FydHMgPSAobG9jYWxTdG9yYWdlLmNhcnRzICYmIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmNhcnRzKSkgfHwge31cbiAgICAgICAgY29uc3QgcHJvZHVjdHMgPSBjYXJ0c1t0aGlzLmNhcnQuaWRdIHx8IFtdXG5cbiAgICAgICAgcGF5bG9hZC5wcm9kdWN0cyA9IHByb2R1Y3RzLm1hcChlID0+IHtcblxuICAgICAgICAgIGlmIChlLmNvbGxlY3Rpb25faXRlbV9pZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgc291cmNlOiBcImNvbGxlY3Rpb25cIixcbiAgICAgICAgICAgICAgY29sbGVjdGlvbl9pdGVtX2lkOiBlLmNvbGxlY3Rpb25faXRlbV9pZCxcbiAgICAgICAgICAgICAgY29sbGVjdGlvbl9pZDogZS5jb2xsZWN0aW9uX2lkLFxuICAgICAgICAgICAgICBjb3VudDogZS5wcm9kdWN0UXVhbnRpdHlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgc291cmNlOiBcIm5vZGVcIixcbiAgICAgICAgICAgICAgaWQ6IGdldFB1cmVJZChlLmlkKSxcbiAgICAgICAgICAgICAgY291bnQ6IGUucHJvZHVjdFF1YW50aXR5LFxuICAgICAgICAgICAgICBibG9ja19pZDogZS5ibG9ja19pZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICB9KVxuXG4gICAgICAgIGlmICh0aGlzLmVsLmRhdGFzZXQucGF5bWVudCA9PT0gJ3JvYm9rYXNzYScgfHwgdGhpcy5lbC5kYXRhc2V0LnBheW1lbnQgPT09ICd1a2Fzc2EnKSBwYXlsb2FkLnBheW1lbnQgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHVybCA9IHRoaXMuY2FydCA/IENBUlRfRU5EUE9JTlQgOiBGT1JNX0VORFBPSU5UXG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2xvYWRpbmcnKVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpLFxuICAgICAgICAgIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOCd9XG4gICAgICAgIH0pXG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2VKc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG5cbiAgICAgICAgdGhpcy5idXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnbG9hZGluZycpXG4gICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgIFVUTUhlbHBlci5jbGVhcigpXG5cblxuICAgICAgICAgIGlmIChyZXNwb25zZUpzb24pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVsLmRhdGFzZXQucGF5bWVudCA9PT0gJ3VrYXNzYScgJiYgcmVzcG9uc2VKc29uLnJlZGlyZWN0X3VyaSkge1xuICAgICAgICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpXG4gICAgICAgICAgICAgIGxpbmsuaHJlZiA9IHJlc3BvbnNlSnNvbi5yZWRpcmVjdF91cmlcbiAgICAgICAgICAgICAgbGluay5jbGljaygpXG4gICAgICAgICAgICAgIGxpbmsucmVtb3ZlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmVsLmRhdGFzZXQucGF5bWVudCA9PT0gJ3JvYm9rYXNzYScgJiYgcmVzcG9uc2VKc29uLmh0bWwpIHtcbiAgICAgICAgICAgICAgdGhpcy5oYW5kbGVQYXltZW50KHJlc3BvbnNlSnNvbi5odG1sKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuc3VjY2Vzc0hhbmRsZSgpXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlKVxuICAgICAgICB0aGlzLmJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdsb2FkaW5nJylcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGluaXRNYXNrICgpIHtcblxuICAgICAgY29uc3QgbWFza2VkID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFtkYXRhLW1hc2tdOm5vdChbZGF0YS1tYXNrPVwiXCJdKScpXG5cbiAgICAgIC8vINC/0L7QtNC60LvRjtGH0LDQtdC8INC80LDRgdC60YMg0LXRgdC70Lgg0L3Rg9C20L3QvlxuICAgICAgbWFza2VkLmZvckVhY2goaSA9PiB7XG4gICAgICAgIC8vINC10YHQu9C4INC+0YHRgtCw0LvRgdGPINGB0LjQvNCy0L7QuyBfINC30L3QsNGH0LjRgiDQvdC1INC/0L7Qu9C90L7RgdGC0YzRjiDQstCy0LXQu9C4INC90L7QvNC10YBcbiAgICAgICAgaS5wYXR0ZXJuID0gYFteX10qYFxuXG4gICAgICAgIGNvbnN0IG1hc2sgPSBpLmRhdGFzZXQubWFza1xuICAgICAgICBjb25zdCBwcmVmaXggPSBtYXNrLnN1YnN0cmluZygwLCAyKVxuXG4gICAgICAgIC8vINC80LDRgdC60LAg0YHQvtGB0YLQvtC40YIg0YLQvtC70YzQutC+INC40Lcg0L/RgNC10YTQuNC60YHQsCArOVxuICAgICAgICBpZiAobWFzay5pbmNsdWRlcygnKycpICYmIG1hc2subGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgY29uc3QgZGVmYXVsdE1hc2sgPSBgJHtwcmVmaXh9ICg5OTkpIDk5OSA5OSA5OWBcbiAgICAgICAgICBpLmRhdGFzZXQubWFzayA9IGRlZmF1bHRNYXNrXG4gICAgICAgICAgd2luZG93LklucHV0bWFzayh7IG1hc2s6IGRlZmF1bHRNYXNrIH0pLm1hc2soaSlcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICB3aW5kb3cuSW5wdXRtYXNrKG1hc2spLm1hc2soaSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaW5pdFNlbGVjdCAoKSB7XG4gICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCdzZWxlY3Qgb3B0aW9uJylcbiAgICAgIG9wdGlvbnMuZm9yRWFjaChvID0+IHtcbiAgICAgICAgaWYgKG8udGV4dENvbnRlbnQgIT09IG8ubGFiZWwpIG8udGV4dENvbnRlbnQgPSBvLmxhYmVsXG4gICAgICB9KVxuICAgIH1cblxuICAgIGluaXRXcmFwcGVyQ2FwdGNoYUNvbnRhaW5lcigpIHtcbiAgICAgIGNvbnN0IHdyYXBwZXJDYXB0Y2hhQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIHdyYXBwZXJDYXB0Y2hhQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3dyYXBwZXItY2FwdGNoYS1jb250YWluZXInKVxuICAgICAgdGhpcy53cmFwcGVyQ2FwdGNoYUNvbnRhaW5lciA9IHdyYXBwZXJDYXB0Y2hhQ29udGFpbmVyXG4gICAgICB0aGlzLmVsLmFwcGVuZENoaWxkKHdyYXBwZXJDYXB0Y2hhQ29udGFpbmVyKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqINCS0LDQu9C40LTQsNGG0LjRjyDQvtCx0Y/Qt9Cw0YLQtdC70YzQvdGL0YUg0L/QvtC70LXQuVxuICAgICAqL1xuICAgIGFkZFJlcXVpcmVkRmllbGRzZXRMaXN0ZW5lcnMoKSB7XG4gICAgICB0aGlzLnJlcXVpcmVkRmllbGRzLmZvckVhY2goZmllbGRzZXQgPT4ge1xuICAgICAgICBmaWVsZHNldC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB0aGlzLnVwZGF0ZVJlcXVpcmVkSW5wdXRzKGZpZWxkc2V0KSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdXBkYXRlUmVxdWlyZWRJbnB1dHMoZmllbGRzZXQpIHtcbiAgICAgIGNvbnN0IGVycm9yVGV4dCA9IGZpZWxkc2V0LnF1ZXJ5U2VsZWN0b3IoJy5lcnJvci1yZXF1aXJlZC1pbnB1dF9fdGV4dCcpIHx8IHRoaXMuY3JlYXRlRXJyb3JUZXh0KFJFUVVJUkVEX0ZJRUxEX0VSUk9SX1RFWFQpXG4gICAgICBpZiAoIWZpZWxkc2V0LmNvbnRhaW5zKGVycm9yVGV4dCkpIGZpZWxkc2V0LmFwcGVuZENoaWxkKGVycm9yVGV4dClcbiAgICAgIGVycm9yVGV4dC5zdHlsZS5kaXNwbGF5ID0gdGhpcy5yZXF1aXJlZEZpZWxkSXNOb3RFbXB0eShmaWVsZHNldCkgPyAnbm9uZScgOiAnYmxvY2snXG4gICAgfVxuXG4gICAgcmVxdWlyZWRGaWVsZElzTm90RW1wdHkgKGVsKSB7XG4gICAgICBpZiAoIWVsKSByZXR1cm4gZmFsc2VcblxuICAgICAgY29uc3QgdGFnID0gZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICBpZiAodGFnID09PSAnaW5wdXQnKSByZXR1cm4gISFlbC52YWx1ZVxuXG4gICAgICBpZiAodGFnID09PSAnZmllbGRzZXQnKSByZXR1cm4gQXJyYXkuZnJvbShlbC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpKS5zb21lKGlucHV0ID0+IGlucHV0LmNoZWNrZWQpXG5cbiAgICAgIGlmICh0YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGVsLm9wdGlvbnNbZWwuc2VsZWN0ZWRJbmRleF1cbiAgICAgICAgY29uc29sZS5sb2coJ29wdGlvbiA6Pj4gJywgb3B0aW9uLnZhbHVlKTtcbiAgICAgICAgcmV0dXJuICEhKG9wdGlvbiAmJiBvcHRpb24udmFsdWUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlRXJyb3JUZXh0KHRleHQpIHtcbiAgICAgIGNvbnN0IGVycm9yVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICBlcnJvclRleHQuY2xhc3NMaXN0LmFkZCgnZXJyb3ItcmVxdWlyZWQtaW5wdXRfX3RleHQnKVxuICAgICAgZXJyb3JUZXh0LmlubmVySFRNTCA9IHRleHRcbiAgICAgIGVycm9yVGV4dC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgICByZXR1cm4gZXJyb3JUZXh0XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog0J/QtdGA0LXRhdCy0LDRgiDRgdC+0LHRi9GC0LjRjywg0YfRgtC+0LHRiyDQvdC1INGA0LXQs9C40YHRgtGA0LjRgNC+0LLQsNGC0Ywg0YHQvtCx0YvRgtC40Y8g0Y8u0LzQtdGC0YDQuNC60Lgg0L/RgNC4INC90LXQstCw0LvQuNC00L3QvtC5INGE0L7RgNC80LVcbiAgICAgKi9cbiAgICBpbml0SGlkZGVuU3VibWl0QnRuKCkge1xuICAgICAgY29uc3QgY2xvbmVCdG4gPSB0aGlzLmNyZWF0ZUNsb25lQnRuKCk7XG4gICAgICB0aGlzLmJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICBpZiAoY2xvbmVCdG4pIHRoaXMuaW50ZXJjZXB0U3VibWl0Rm9ybShjbG9uZUJ0biwgdGhpcy5lbCk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xvbmVCdG4oYnRuKSB7XG4gICAgICBpZiAoIXRoaXMuYnV0dG9uKSByZXR1cm5cblxuICAgICAgY29uc3QgY2xvbmVCdG4gPSB0aGlzLmJ1dHRvbi5jbG9uZU5vZGUodHJ1ZSlcbiAgICAgIHRoaXMuYnV0dG9uLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJyBcbiAgICAgIGNsb25lQnRuLnJlbW92ZUF0dHJpYnV0ZSgndHlwZScpO1xuICAgICAgY2xvbmVCdG4uY2xhc3NMaXN0LmFkZCgnY2xvbmUtYnRuJylcbiAgICAgIGNsb25lQnRuLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgIGNsb25lQnRuLnN0eWxlLnRvcCA9ICcwcHgnO1xuICAgICAgY2xvbmVCdG4uc3R5bGUubGVmdCA9ICcwcHgnO1xuICAgICAgY2xvbmVCdG4uc3R5bGUud2lkdGggPSB0aGlzLmJ1dHRvbi5vZmZzZXRXaWR0aCArICdweCc7XG4gICAgICBjbG9uZUJ0bi5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgICAgdGhpcy5idXR0b24uYXBwZW5kQ2hpbGQoY2xvbmVCdG4pO1xuXG4gICAgICByZXR1cm4gY2xvbmVCdG5cbiAgICB9XG5cbiAgICBpbnRlcmNlcHRTdWJtaXRGb3JtKGJ0biwgZm9ybSkge1xuICAgICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGtleUNvZGVFbnRlciA9IDEzXG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBrZXlDb2RlRW50ZXIpIHtcbiAgICAgICAgICB0aGlzLmZvcm1WYWxpZGF0aW9uKGV2ZW50KVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIHRoaXMuZm9ybVZhbGlkYXRpb24oZXZlbnQpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGZvcm1WYWxpZGF0aW9uKGV2ZW50KSB7XG4gICAgICBjb25zdCBpc1ZhbGlkID0gdGhpcy5lbC5jaGVja1ZhbGlkaXR5KCkgJiYgQXJyYXkuZnJvbSh0aGlzLnJlcXVpcmVkRmllbGRzKS5ldmVyeShlID0+IHRoaXMucmVxdWlyZWRGaWVsZElzTm90RW1wdHkoZSkpXG4gICAgICBjb25zb2xlLmxvZygnPD09PfCflLcgZm9ybVZhbGlkYXRpb24g8J+Utz09PT4nLCBpc1ZhbGlkKTtcblxuICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgIHRoaXMucmVxdWlyZWRGaWVsZHMuZm9yRWFjaCgoZmllbGRzZXQpID0+IHRoaXMudXBkYXRlUmVxdWlyZWRJbnB1dHMoZmllbGRzZXQpKVxuICAgICAgICB0aGlzLmVsLnJlcG9ydFZhbGlkaXR5KCk7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzLmJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGluaXQgKCkge1xuICAgICAgdGhpcy5hZGRSZXF1aXJlZEZpZWxkc2V0TGlzdGVuZXJzKClcbiAgICAgIHRoaXMuaW5pdE1hc2soKVxuICAgICAgdGhpcy5pbml0U2VsZWN0KClcbiAgICAgIHRoaXMuaW5pdFdyYXBwZXJDYXB0Y2hhQ29udGFpbmVyKClcbiAgICAgIHRoaXMuaW5pdEhpZGRlblN1Ym1pdEJ0bigpXG5cbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgYXN5bmMgKGUpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJzw9PT3wn5S3IG9uU3VibWl0Rm9ybSDwn5S3PT09PicpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICAgICAvLyDQuNC90LjRhtC40LDQu9C40LfQuNGA0YPQtdC8INC60LDQv9GH0YMg0LXRgdC70Lgg0LLQutC70Y7Rh9C10L3QsFxuICAgICAgICBpZiAoaXNDYXB0Y2hhRW5hYmxlZCgpICYmIGZvcm1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAoIXdpbmRvdy5zbWFydENhcHRjaGEpIHtcbiAgICAgICAgICAgIGxvYWRTbWFydENhcHRjaGEoKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHRva2VuID0gd2luZG93LnNtYXJ0Q2FwdGNoYT8uZ2V0UmVzcG9uc2UodGhpcy53aWRnZXRTbWFydENhcHRjaGFJZClcbiAgICAgICAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dDYXB0Y2hhV3JhcHBlcigpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMub25TdWJtaXQodG9rZW4pXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGF3YWl0IHRoaXMub25TdWJtaXQoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIHN0YXRpYyBydW4gKHJvb3RFbGVtZW50ID0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgY29uc3QgU0VMRUNUT1IgPSAnW2RhdGEtc2NyaXB0PVwiZm9ybVwiXSdcbiAgICAgIGNvbnN0IGl0ZW1zID0gWy4uLnJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1IpXVxuXG4gICAgICBpdGVtcy5mb3JFYWNoKGMgPT4ge1xuICAgICAgICBjb25zdCBmb3JtID0gbmV3IEZvcm0oYylcbiAgICAgICAgZm9ybS5pbml0KClcbiAgICAgICAgZm9ybXMucHVzaChmb3JtKVxuICAgICAgfSlcblxuICAgICAgLy8g0LLRi9C60LvRjtGH0LDQtdC8INCy0YHQtSDRh9C10LrQsdC+0LrRgdGLICjRhNC+0YDQvNGLLCDQsNC60LrQvtGA0LTQtdC+0L0pXG4gICAgICBjb25zdCBDSEVDS0JPWEVTX1NFTEVDVE9SID0gJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXSdcbiAgICAgIGNvbnN0IGNoZWNrYm94ZXMgPSBbLi4ucm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChDSEVDS0JPWEVTX1NFTEVDVE9SKV1cblxuICAgICAgY2hlY2tib3hlcy5mb3JFYWNoKGMgPT4gYy5jaGVja2VkID0gZmFsc2UpXG5cbiAgICAgIC8vINCy0YvQsdC40YDQsNC10Lwg0L/QtdGA0LLRi9C5INGA0LDQtNC40L5cbiAgICAgIGNvbnN0IFJBRElPX1NFTEVDVE9SID0gJ1tkYXRhLXR5cGU9XCJyYWRpb1wiXSdcbiAgICAgIGNvbnN0IHJhZGlvID0gWy4uLnJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoUkFESU9fU0VMRUNUT1IpXVxuXG4gICAgICBjb25zdCBJVEVNX1BJQ0tFUlNfU0VMRUNUT1IgPSAnW2RhdGEtdHlwZT1cIml0ZW0tcGlja2VyXCJdJ1xuICAgICAgY29uc3QgaXRlbVBpY2tlcnMgPSBbLi4ucm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChJVEVNX1BJQ0tFUlNfU0VMRUNUT1IpXTtcblxuICAgICAgWy4uLnJhZGlvLCAuLi5pdGVtUGlja2Vyc10uZm9yRWFjaChmaWVsZHNldCA9PiB7XG4gICAgICAgIGNvbnN0IGlucHV0cyA9IGZpZWxkc2V0LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXScpXG4gICAgICAgIGlucHV0cy5mb3JFYWNoKGMgPT4gYy5yZW1vdmVBdHRyaWJ1dGUoJ2NoZWNrZWQnKSlcbiAgICAgICAgaWYgKGlucHV0c1swXSkgaW5wdXRzWzBdLmNoZWNrZWQgPSB0cnVlXG4gICAgICB9KVxuICAgIH1cblxuICB9XG5cblxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgIEZvcm0ucnVuKClcbiAgfSlcblxuICB3aW5kb3cudXNlclNjcmlwdHMgPSB3aW5kb3cudXNlclNjcmlwdHMgfHwge31cbiAgd2luZG93LnVzZXJTY3JpcHRzLkZvcm0gPSBGb3JtXG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBjb25zdCBiYXNlNjRUb1N0cmluZyA9IHdpbmRvdy51c2VyU2NyaXB0cy5VdGlsLmJhc2U2NFRvU3RyaW5nXG5cbiAgY2xhc3MgTWFwIHtcbiAgICBjb25zdHJ1Y3RvciAoZWwpIHtcbiAgICAgIHRoaXMuZWwgPSBlbFxuICAgICAgdGhpcy5waW4gPSBlbC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1tYXAtcGluXScpXG4gICAgICB0aGlzLmJhbGxvbiA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW1hcC1iYWxsb29uXScpXG4gICAgICB0aGlzLm1hcCA9IG51bGxcbiAgICAgIHRoaXMub3B0aW9ucyA9IEpTT04ucGFyc2UoYmFzZTY0VG9TdHJpbmcoZWwuZGF0YXNldC5vcHRpb25zKSlcblxuXG4gICAgICB0aGlzLm1hcmtlckljb24gPSB7XG4gICAgICAgIGljb25MYXlvdXQ6ICdkZWZhdWx0I2ltYWdlV2l0aENvbnRlbnQnLFxuICAgICAgICBpY29uSW1hZ2VIcmVmOiAnJyxcbiAgICAgICAgaWNvbkltYWdlU2l6ZTogWzI0LCAyNF0sXG4gICAgICAgIGljb25JbWFnZU9mZnNldDogWy0xMiwgLTEyXSxcbiAgICAgICAgaWNvbkNvbnRlbnQ6ICdjb250ZW50JyxcbiAgICAgICAgaWNvbkNvbnRlbnRPZmZzZXQ6IFswLCAwXSxcbiAgICAgICAgY29udGVudExheW91dDogdGhpcy5waW4gJiYgdGhpcy5waW4ub3V0ZXJIVE1MXG4gICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Q3VzdG9tQmFsbG9vbiAoeyBuYW1lLCB0aXRsZSwgc3VidGl0bGUsIHRleHQgfSkge1xuICAgICAgY29uc3QgTXlCYWxsb29uTGF5b3V0ID0gd2luZG93LnltYXBzLnRlbXBsYXRlTGF5b3V0RmFjdG9yeS5jcmVhdGVDbGFzcyh0aGlzLmJhbGxvbi5vdXRlckhUTUwsXG4gICAgICAgIHtcblxuICAgICAgICAgIGJ1aWxkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLnN1cGVyY2xhc3MuYnVpbGQuY2FsbCh0aGlzKVxuXG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLmdldFBhcmVudEVsZW1lbnQoKVxuICAgICAgICAgICAgY29uc3QgYmFsbG9vbiA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1tYXAtYmFsbG9vbl0nKVxuXG4gICAgICAgICAgICBjb25zdCBlbWFpbCA9IGJhbGxvb24ucXVlcnlTZWxlY3RvcignW2RhdGEtdGl0bGU9XCJFbWFpbFwiXScpXG4gICAgICAgICAgICBjb25zdCB0ZWwgPSBiYWxsb29uLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXRpdGxlPVwi0KLQtdC70LXRhNC+0L1cIl0nKVxuICAgICAgICAgICAgY29uc3QgdGV4dEVsID0gYmFsbG9vbi5xdWVyeVNlbGVjdG9yKCdbZGF0YS10aXRsZT1cItCe0L/QuNGB0LDQvdC40LVcIl0nKVxuXG4gICAgICAgICAgICAvLyDQv9GA0Lgg0L7RgtC60YDRi9GC0LjQuCDQsdCw0LvRg9C90LAg0L/QvtC00YHRgtCw0LLQu9GP0LXQvCDQtNCw0L3QvdGL0LUg0LzQtdGC0LrQuFxuICAgICAgICAgICAgYmFsbG9vbi5xdWVyeVNlbGVjdG9yKCdbZGF0YS10aXRsZT1cItCQ0LTRgNC10YFcIl0nKS50ZXh0Q29udGVudCA9IG5hbWVcblxuICAgICAgICAgICAgaWYgKHRlbCkge1xuICAgICAgICAgICAgICB0ZWwudGV4dENvbnRlbnQgPSB0aXRsZVxuICAgICAgICAgICAgICB0ZWwuaHJlZiA9IGB0ZWw6JHt0aXRsZX1gXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlbWFpbCkge1xuICAgICAgICAgICAgICBlbWFpbC50ZXh0Q29udGVudCA9IHN1YnRpdGxlXG4gICAgICAgICAgICAgIGVtYWlsLmhyZWYgPSBgbWFpbHRvOiR7c3VidGl0bGV9YFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGV4dEVsKSB7XG4gICAgICAgICAgICAgIHRleHRFbC50ZXh0Q29udGVudCA9IHRleHRcbiAgICAgICAgICAgICAgdGV4dEVsLnN0eWxlLmRpc3BsYXkgPSBudWxsXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhcmVudC5hcHBlbmQoYmFsbG9vbilcbiAgICAgICAgICAgIHRoaXMuXyRlbGVtZW50ID0gYmFsbG9vblxuICAgICAgICAgICAgdGhpcy5hcHBseUVsZW1lbnRPZmZzZXQoKVxuXG4gICAgICAgICAgICBjb25zdCBjbG9zZSA9IHRoaXMuXyRlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW1hcC1iYWxsb29uLWNsb3NlXScpXG4gICAgICAgICAgICBjbG9zZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5vbkNsb3NlQ2xpY2sodGhpcylcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5nZXREYXRhLmdlb09iamVjdCkgdGhpcy5jb25zdHJ1Y3Rvci5zdXBlcmNsYXNzLmNsZWFyLmNhbGwodGhpcylcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgb25TdWJsYXlvdXRTaXplQ2hhbmdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBNeUJhbGxvb25MYXlvdXQuc3VwZXJjbGFzcy5vblN1YmxheW91dFNpemVDaGFuZ2UuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICAgICAgdGhpcy5hcHBseUVsZW1lbnRPZmZzZXQoKVxuICAgICAgICAgICAgdGhpcy5ldmVudHMuZmlyZSgnc2hhcGVjaGFuZ2UnKVxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBhcHBseUVsZW1lbnRPZmZzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGFycm93ID0gIHRoaXMuXyRlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcnJvdycpXG4gICAgICAgICAgICB0aGlzLl8kZWxlbWVudC5zdHlsZS5sZWZ0ID0gLSh0aGlzLl8kZWxlbWVudC5vZmZzZXRXaWR0aCAvIDIpICsgJ3B4J1xuICAgICAgICAgICAgdGhpcy5fJGVsZW1lbnQuc3R5bGUudG9wID0gLSh0aGlzLl8kZWxlbWVudC5vZmZzZXRIZWlnaHQgKyBhcnJvdy5vZmZzZXRIZWlnaHQpICsgJ3B4J1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBvbkNsb3NlQ2xpY2s6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLmV2ZW50cy5maXJlKCd1c2VyY2xvc2UnKVxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBnZXRTaGFwZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHtcbiAgICAgICAgICAgICAgbGVmdDogdGhpcy5fJGVsZW1lbnQuc3R5bGUubGVmdCxcbiAgICAgICAgICAgICAgdG9wOiB0aGlzLl8kZWxlbWVudC5zdHlsZS50b3BcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cueW1hcHMuc2hhcGUuUmVjdGFuZ2xlKG5ldyB3aW5kb3cueW1hcHMuZ2VvbWV0cnkucGl4ZWwuUmVjdGFuZ2xlKFtcbiAgICAgICAgICAgICAgW3Bvc2l0aW9uLmxlZnQsIHBvc2l0aW9uLnRvcF0sIFtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbi5sZWZ0ICsgdGhpcy5fJGVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgICAgICAgICAgICAgcG9zaXRpb24udG9wICsgdGhpcy5fJGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgdGhpcy5fJGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmFycm93Jykub2Zmc2V0SGVpZ2h0XG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0pKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgcmV0dXJuIE15QmFsbG9vbkxheW91dFxuICAgIH1cblxuICAgIGluaXQgKG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgd2luZG93LnltYXBzLnJlYWR5KCgpID0+IHtcbiAgICAgICAgICAvL9Cf0YDQvtCy0LXRgNGP0Lwg0L3QsCDQvNC+0LHQuNC70YzQvdC+0LUg0YPRgdGC0YDQvtC50YHRgtCy0L5cbiAgICAgICAgICBjb25zdCBpc01vYmlsZSA9IHdpbmRvdy51c2VyU2NyaXB0cy5VdGlsLmlzTW9iaWxlKCk7XG5cbiAgICAgICAgICAvLyDRgdC+0LfQtNCw0LXQvCDQutCw0YDRgtGDXG4gICAgICAgICAgdGhpcy5tYXAgPSBuZXcgd2luZG93LnltYXBzLk1hcCh0aGlzLmVsLCB7IC4uLm9wdGlvbnMsICBiZWhhdmlvcnM6IGlzTW9iaWxlID8gW1wibXVsdGlUb3VjaFwiXSA6IFtcImRyYWdcIl0sIH0pXG5cblxuICAgICAgICAgIC8vXG4gICAgICAgICAgd2luZG93LnVzZXJTY3JpcHRzLlV0aWwucHJldmlld0NoYW5nZVN1YnNjcmliZSh0aGlzLmVsLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1hcC5jb250YWluZXIuZml0VG9WaWV3cG9ydCgpXG4gICAgICAgICAgfSlcblxuXG5cbiAgICAgICAgICAvLyDQvtC/0YbQuNC4INC60LDRgdGC0L7QvNC90L7QuSDQuNC60L7QvdC60LhcbiAgICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGdldENvbXB1dGVkU3R5bGUodGhpcy5waW4pXG5cbiAgICAgICAgICBjb25zdCBpY29uTGF5b3V0ID0gdGhpcy5waW4ub3V0ZXJIVE1MXG5cbiAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgaWNvbkxheW91dDogJ2RlZmF1bHQjaW1hZ2VXaXRoQ29udGVudCcsXG4gICAgICAgICAgICBpY29uSW1hZ2VIcmVmOiAnJyxcbiAgICAgICAgICAgIGljb25JbWFnZVNpemU6IFtwYXJzZUludCh3aWR0aCksIHBhcnNlSW50KGhlaWdodCldLFxuICAgICAgICAgICAgaWNvbkltYWdlT2Zmc2V0OiBbMCwgMF0sXG4gICAgICAgICAgICAvLyDQvtGC0LrQu9GO0YfQsNC10Lwg0L/QvtCy0LXQtNC10L3QuNC1INC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOLCDQv9GA0Lgg0LrQvtGC0L7RgNC+0Lwg0L3QsCAzMjBweCDQutCw0YHRgtC+0LzQvdGL0Lkg0LHQsNC70YPQvSDQvdC1INC+0YLQvtCx0YDQsNC20LDQtdGC0YHRj1xuICAgICAgICAgICAgYmFsbG9vblBhbmVsTWF4TWFwQXJlYTogMCxcbiAgICAgICAgICAgIGljb25Db250ZW50T2Zmc2V0OiBbMCwgMF0sXG4gICAgICAgICAgICBjb250ZW50OiAnJ1xuICAgICAgICAgIH1cblxuXG4gICAgICAgICAgb3B0aW9ucy5wb2ludHMuZm9yRWFjaChwID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGljb25PcHRpb25zID0ge1xuICAgICAgICAgICAgICAuLi5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgICBpY29uQ29udGVudExheW91dDogd2luZG93LnltYXBzLnRlbXBsYXRlTGF5b3V0RmFjdG9yeS5jcmVhdGVDbGFzcyhpY29uTGF5b3V0KSxcbiAgICAgICAgICAgICAgYmFsbG9vbkxheW91dDogb3B0aW9ucy53aXRoQmFsbG9vbiA/IHRoaXMuZ2V0Q3VzdG9tQmFsbG9vbih7IG5hbWU6IHAubmFtZSB8fCAnJywgdGl0bGU6IHAudGl0bGUgfHwgJycsIHN1YnRpdGxlOiBwLnN1YnRpdGxlIHx8ICcnLCB0ZXh0OiBwLnRleHQgfHwgJycgfSkgOiAnJ1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBtYXJrID0gbmV3IHltYXBzLlBsYWNlbWFyayhwLmNvb3JkaW5hdGVzLCB7fSwgaWNvbk9wdGlvbnMpXG4gICAgICAgICAgICB0aGlzLm1hcC5nZW9PYmplY3RzLmFkZChtYXJrKVxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgc3RhdGljIHJ1biAocm9vdEVsZW1lbnQgPSBkb2N1bWVudC5ib2R5KSB7XG5cbiAgICAgIC8vIGtleVxuICAgICAgLy8gQXBpIGtleSDQtNC70Y8geWFuZGV4IG1hcHMgMVxuICAgICAgY29uc3QgQVBJX0tFWV9WMSA9ICczMjkwYWVmNS1hOTkxLTQ1YmEtOWEyNS1hY2UwMzFlYzNkMTEnXG4gICAgICAvLyBBcGkga2V5INC00LvRjyB5YW5kZXggbWFwcyAyXG4gICAgICBjb25zdCBBUElfS0VZX1YyID0gJ2M0MzI0YTExLTNhY2QtNGI2YS1iYzAwLTUzYTI5NDk1MDczYydcblxuICAgICAgY29uc3QgQVBJX0tFWSA9IEFQSV9LRVlfVjJcbiAgICAgIC8vINGA0LXQsNC70LjQt9C+0LLQsNGC0Ywg0YHRgtCw0YLQuNGH0LXRgdC60YPRjiDRhNC10LnQutC+0LLRg9GOINC60LDRgNGC0YMg0LzQvtC20L3QviDQtNC+IDY1MHB4XG4gICAgICBjb25zdCBNQVhfU1RBVElDX01BUF9XSURUSCA9IDY1MFxuICAgICAgLy8g0LLRi9GB0L7RgtCwINC60LDRgNGC0Ysg0L/QviDRg9C80L7Qu9GH0LDQvdC40Y5cbiAgICAgIGNvbnN0IERFRkFVTFRfTUFQX0hFSUdIVCA9IDI4MFxuXG4gICAgICBjb25zdCBTRUxFQ1RPUiA9ICdbZGF0YS1zY3JpcHQ9XCJtYXBcIl0nXG4gICAgICBjb25zdCBtYXBzID0gWy4uLnJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1IpXVxuXG4gICAgICBjb25zdCBzdGFydExhenlNYXAgPSAobWFwKSA9PiB7IG1hcC5pbml0KCkgfVxuXG4gICAgICBjb25zdCBtYXBMb2FkZXJQcm9taXNlcyA9IHt9XG4gICAgICBjb25zdCB5bWFwTG9hZGVyID0gKGFwaUtleSkgPT4ge1xuICAgICAgICBpZiAoIW1hcExvYWRlclByb21pc2VzW2FwaUtleV0pIHtcbiAgICAgICAgICBtYXBMb2FkZXJQcm9taXNlc1thcGlLZXldID0gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgICAgICAgICBpZiAod2luZG93LnltYXBzKSByZXR1cm4gcmVzKClcbiAgICAgICAgICAgIGNvbnN0IE1BUF9CVU5ETEVfVVJMID0gYGh0dHBzOi8vYXBpLW1hcHMueWFuZGV4LnJ1LzIuMS8/bGFuZz1ydV9SVSZhcGlrZXk9JHthcGlLZXl9YFxuICAgICAgICAgICAgY29uc3QgeWFuZGV4TWFwU2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnU0NSSVBUJylcbiAgICAgICAgICAgIHlhbmRleE1hcFNjcmlwdC5zZXRBdHRyaWJ1dGUoJ3NyYycsIE1BUF9CVU5ETEVfVVJMKVxuICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh5YW5kZXhNYXBTY3JpcHQpXG4gICAgICAgICAgICB5YW5kZXhNYXBTY3JpcHQub25sb2FkID0gKCkgPT4geyB3aW5kb3cueW1hcHMucmVhZHkoKCkgPT4gcmVzKCkpIH1cbiAgICAgICAgICAgIHlhbmRleE1hcFNjcmlwdC5vbmVycm9yID0gcmVqXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwTG9hZGVyUHJvbWlzZXNbYXBpS2V5XVxuICAgICAgfVxuXG4gICAgICBtYXBzLmZvckVhY2goYXN5bmMgKHMpID0+IHtcbiAgICAgICAgY29uc3QgbWFwT3B0aW9ucyA9IEpTT04ucGFyc2UoYmFzZTY0VG9TdHJpbmcocy5kYXRhc2V0Lm9wdGlvbnMpKVxuICAgICAgICBjb25zdCBhcGlLZXkgPSBtYXBPcHRpb25zLmFwaUtleSA/IG1hcE9wdGlvbnMuYXBpS2V5IDogQVBJX0tFWVxuXG4gICAgICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAocylcbiAgICAgICAgY29uc3QgY29tcHV0ZWQgPSBnZXRDb21wdXRlZFN0eWxlKHMpXG5cbiAgICAgICAgY29uc3Qgd2lkdGggPSBwYXJzZUludChjb21wdXRlZC53aWR0aClcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gcGFyc2VJbnQoY29tcHV0ZWQuaGVpZ2h0KSB8fCBERUZBVUxUX01BUF9IRUlHSFRcblxuXG4gICAgICAgIGlmICh3aW5kb3cudXNlclNjcmlwdHMuVXRpbC5pc0J1aWxkZXIocykgfHwgd2lkdGggPiBNQVhfU1RBVElDX01BUF9XSURUSCkge1xuICAgICAgICAgIGF3YWl0IHltYXBMb2FkZXIoYXBpS2V5KVxuICAgICAgICAgIHN0YXJ0TGF6eU1hcChtYXApXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICAvLyDRgNC10LDQu9C40LfRg9C10Lwg0YTQtdC50LrQvtCy0YPRjiDQutCw0YDRgtC40L3QutGDINC/0YDQuCDQt9Cw0LPRgNGD0LfQutC1INGB0YLQsNC90LjRhtGLINC00LvRjyDQvNC+0LHQuNC70L7QulxuICAgICAgICAvLyDQv9GA0Lgg0L/QvtGP0LLQu9C10L3QuNC4INGN0LvQtdC80LXQvdGC0LAg0LIg0L/QvtC70LUg0LLQuNC00LjQvNC+0YHRgtC4INGA0LXQsNC70YzQvdCw0Y8g0LrQsNGA0YLQsCDQt9Cw0LPRgNGD0LbQsNC10YLRgdGPXG5cbiAgICAgICAgLy8g0YHRgtGA0L7QutCwINGBINGC0L7Rh9C60LDQvNC4XG4gICAgICAgIGNvbnN0IHBvaW50c1F1ZXJ5ID0gbWFwT3B0aW9ucy5wb2ludHMubWFwKCh7Y29vcmRpbmF0ZXN9KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGBwdD0ke2Nvb3JkaW5hdGVzWzBdfSwke2Nvb3JkaW5hdGVzWzFdfWBcbiAgICAgICAgfSkuam9pbignficpXG5cbiAgICAgICAgLy8gV3JvbmcgaW1hZ2Ugc2l6ZSAzMjAsIDUwMC4gU2l6ZSBtdXN0IGJlIGluIHJhbmdlOiAwIDwgd2lkdGggPD0gNjUwLCAwIDwgaGVpZ2h0IDw9IDQ1MFxuICAgICAgICBjb25zdCBjb21wV2lkdGggPSBNYXRoLm1pbih3aWR0aCwgNjUwKVxuICAgICAgICBjb25zdCBjb21wSGVpZ2h0ID0gTWF0aC5taW4oaGVpZ2h0LCA0NTApXG5cblxuICAgICAgICBjb25zdCBzdGF0aWNGYWtlTWFwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJylcbiAgICAgICAgc3RhdGljRmFrZU1hcC5zcmMgPSBgaHR0cHM6Ly9zdGF0aWMtbWFwcy55YW5kZXgucnUvMS54Lz9sbD0ke21hcE9wdGlvbnMuY2VudGVyWzFdfSwke21hcE9wdGlvbnMuY2VudGVyWzBdfSZ6PSR7bWFwT3B0aW9ucy56b29tfSZsPW1hcCZzaXplPSR7Y29tcFdpZHRofSwke2NvbXBIZWlnaHR9JiR7cG9pbnRzUXVlcnl9LHlhX3J1YFxuXG4gICAgICAgIHN0YXRpY0Zha2VNYXAuaGVpZ2h0ID0gY29tcEhlaWdodFxuICAgICAgICBzdGF0aWNGYWtlTWFwLndpZHRoID0gY29tcFdpZHRoXG5cbiAgICAgICAgcy5hcHBlbmQoc3RhdGljRmFrZU1hcClcblxuXG4gICAgICAgIC8vIEludGVyc2VjdGlvbiBPYnNlcnZlclxuICAgICAgICAvLyDQt9CwIDMwMHB4INC00L4g0LrQsNGA0YLRiyDQvdCw0YfQuNC90LDRgtGMINCz0YDRg9C30LjRgtGMXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgcm9vdDogbnVsbCxcbiAgICAgICAgICByb290TWFyZ2luOiAnMzAwcHgnLFxuICAgICAgICAgIHRocmVzaG9sZDogMC4wXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpbnRlcnNlY3Rpb25IYW5kbGVyID0gYXN5bmMgKGVudHJpZXMpID0+IHtcbiAgICAgICAgICBpZiAoZW50cmllc1swXS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgICAgYXdhaXQgeW1hcExvYWRlcihhcGlLZXkpXG4gICAgICAgICAgICBzdGF0aWNGYWtlTWFwLnJlbW92ZSgpXG4gICAgICAgICAgICBzdGFydExhenlNYXAobWFwKVxuICAgICAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKHMpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoaW50ZXJzZWN0aW9uSGFuZGxlciwgb3B0aW9ucylcbiAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShzKVxuICAgICAgfSlcblxuICAgIH1cbiAgfVxuXG5cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICBNYXAucnVuKClcbiAgfSlcblxuXG4gIHdpbmRvdy51c2VyU2NyaXB0cyA9IHdpbmRvdy51c2VyU2NyaXB0cyB8fCB7fVxuICB3aW5kb3cudXNlclNjcmlwdHMuTWFwID0gTWFwXG5cbn0pKClcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGNvbnN0IGJhc2U2NFRvU3RyaW5nID0gd2luZG93LnVzZXJTY3JpcHRzLlV0aWwuYmFzZTY0VG9TdHJpbmdcblxuICBjbGFzcyBTbGlkZXIge1xuICAgIGNvbnN0cnVjdG9yIChlbCkge1xuICAgICAgdGhpcy5lbCA9IGVsXG4gICAgICB0aGlzLnN3aXBlciA9IG51bGxcbiAgICAgIHRoaXMudGFyZ2V0ID0gZWwucXVlcnlTZWxlY3RvcignLnN3aXBlcicpXG4gICAgICB0aGlzLm9wdGlvbnMgPSBKU09OLnBhcnNlKGJhc2U2NFRvU3RyaW5nKGVsLmRhdGFzZXQub3B0aW9ucykpXG4gICAgfVxuXG5cbiAgICByZXNpemVIYW5kbGUgKHdpZHRoKSB7XG4gICAgICAvLyB3aWR0aCAtIHBhcmVudCBibG9jayB3aWR0aFxuICAgICAgaWYgKCF0aGlzLnN3aXBlci5wYXNzZWRQYXJhbXMgfHwgIXRoaXMuc3dpcGVyLnBhc3NlZFBhcmFtcy5icmVha3BvaW50cykgcmV0dXJuXG4gICAgICAvLyBmaW5kIGFuZCBzZXQgdGhlIG5lYXJlc3QgYnJlYWtwb2ludCBpbiB0aGUgc2xpZGVyIHBhcmFtc1xuICAgICAgY29uc3QgYnJlYWtwb2ludHMgPSBPYmplY3Qua2V5cyh0aGlzLnN3aXBlci5wYXNzZWRQYXJhbXMuYnJlYWtwb2ludHMpLm1hcChlID0+IE51bWJlcihlKSlcbiAgICAgIGNvbnN0IGtleSA9IGJyZWFrcG9pbnRzLnNvcnQoKGEsIGIpID0+IE1hdGguYWJzKHdpZHRoIC0gYSkgLSBNYXRoLmFicyh3aWR0aCAtIGIpKVswXVxuICAgICAgY29uc3QgeyBzbGlkZXNQZXJWaWV3LCBzcGFjZUJldHdlZW4gfSA9IHRoaXMuc3dpcGVyLnBhc3NlZFBhcmFtcy5icmVha3BvaW50c1trZXldXG4gICAgICB0aGlzLnN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9IHNsaWRlc1BlclZpZXdcbiAgICAgIHRoaXMuc3dpcGVyLnBhcmFtcy5zcGFjZUJldHdlZW4gPSBzcGFjZUJldHdlZW5cbiAgICAgIHRoaXMuc3dpcGVyLnVwZGF0ZSgpXG5cbiAgICB9XG5cbiAgICBhdXRvcGxheUluaXQgKGNoYW5nZSkge1xuICAgICAgdGhpcy5zd2lwZXIuYXV0b3BsYXkuc3RhcnQoKVxuICAgICAgaWYgKGNoYW5nZSAmJiAhY2hhbmdlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3Nob3cnKSkgdGhpcy5zd2lwZXIuYXV0b3BsYXkuc3RvcCgpXG4gICAgfVxuXG4gICAgcmVtb3ZlUGxheUNsYXNzRnJvbUFsbFNsaWRlcyAoKSB7XG4gICAgICBpZiAoIXRoaXMuc3dpcGVyPy5zbGlkZXMpIHJldHVyblxuICAgICAgdGhpcy5zd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGUgPT4ge1xuICAgICAgICBpZiAoc2xpZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdwbGF5JykpIHNsaWRlLmNsYXNzTGlzdC5yZW1vdmUoJ3BsYXknKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpbml0IChvcHRpb25zID0gdGhpcy5vcHRpb25zKSB7XG4gICAgICB0aGlzLnN3aXBlciA9IG5ldyBTd2lwZXIodGhpcy50YXJnZXQsIHtcbiAgICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICAgIGVsOiAnLnN3aXBlci1wYWdpbmF0aW9uJyxcbiAgICAgICAgICBkeW5hbWljQnVsbGV0czogdHJ1ZSxcbiAgICAgICAgICBkeW5hbWljTWFpbkJ1bGxldHM6IDcsXG4gICAgICAgICAgY2xpY2thYmxlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIG5hdmlnYXRpb246IHtcbiAgICAgICAgICBuZXh0RWw6ICcuc3dpcGVyLWJ1dHRvbi1uZXh0JyxcbiAgICAgICAgICBwcmV2RWw6ICcuc3dpcGVyLWJ1dHRvbi1wcmV2JyxcbiAgICAgICAgfSxcbiAgICAgICAgb246IHtcbiAgICAgICAgICBiZWZvcmVTbGlkZUNoYW5nZVN0YXJ0OiAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZVBsYXlDbGFzc0Zyb21BbGxTbGlkZXMoKVxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIG9ic2VydmVyOiB0cnVlLFxuICAgICAgICBvYnNlcnZlUGFyZW50czogdHJ1ZVxuICAgICAgfSlcblxuICAgICAgaWYgKHdpbmRvdy51c2VyU2NyaXB0cy5VdGlsLmlzQnVpbGRlcih0aGlzLmVsKSkge1xuICAgICAgICB3aW5kb3cudXNlclNjcmlwdHMuVXRpbC5wcmV2aWV3Q2hhbmdlU3Vic2NyaWJlKHRoaXMuZWwuY2xvc2VzdCgnc2VjdGlvbicpLCAoY2hhbmdlKSA9PiB7XG4gICAgICAgICAgdGhpcy5yZXNpemVIYW5kbGUoY2hhbmdlLmNvbnRlbnRSZWN0LndpZHRoKVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5hdXRvcGxheSAmJiAhdGhpcy5zd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgICB3aW5kb3cudXNlclNjcmlwdHMuVXRpbC5vYnNlcnZlQ2xhc3NDaGFuZ2VzKHRoaXMuZWwuY2xvc2VzdCgnc2VjdGlvbicpLCB0aGlzLmF1dG9wbGF5SW5pdC5iaW5kKHRoaXMpKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5zd2lwZXJcbiAgICB9XG5cblxuICAgIHN0YXRpYyBydW4gKHJvb3RFbGVtZW50ID0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgY29uc3QgU0VMRUNUT1IgPSAnW2RhdGEtc2NyaXB0PVwic2xpZGVyXCJdJ1xuICAgICAgY29uc3Qgc2xpZGVycyA9IFsuLi5yb290RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SKV1cblxuICAgICAgc2xpZGVycy5mb3JFYWNoKHMgPT4ge1xuICAgICAgICBjb25zdCBzbGlkZXIgPSBuZXcgU2xpZGVyKHMpXG4gICAgICAgIHNsaWRlci5pbml0KClcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cblxuXG5cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICBTbGlkZXIucnVuKClcbiAgfSlcblxuXG5cbiAgd2luZG93LnVzZXJTY3JpcHRzID0gd2luZG93LnVzZXJTY3JpcHRzIHx8IHt9XG4gIHdpbmRvdy51c2VyU2NyaXB0cy5TbGlkZXIgPSBTbGlkZXJcblxuXG5cbn0pKClcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGNvbnN0IGJhc2U2NFRvU3RyaW5nID0gd2luZG93LnVzZXJTY3JpcHRzLlV0aWwuYmFzZTY0VG9TdHJpbmdcblxuICBjb25zdCBFVkVOVFMgPSB7XG4gICAgc2Nyb2xsOiAnc2Nyb2xsJyxcbiAgICBjbGljazogJ2NsaWNrJyxcbiAgICBtb3VzZWVudGVyOiAnbW91c2VlbnRlcicsXG4gICAgZWxlbWVudE9uU2NyZWVuOiAnZWxlbWVudE9uU2NyZWVuJyxcbiAgICBibG9ja09uU2NyZWVuOiAnYmxvY2tPblNjcmVlbidcbiAgfVxuXG5cbiAgY2xhc3MgU3RlcEFuaW1hdGlvbiB7XG5cbiAgICBjb25zdHJ1Y3RvciAoZWwpIHtcbiAgICAgIGNvbnN0IHN0ZXBzID0gZWwuZGF0YXNldC5zdGVwQW5pbWF0aW9uU3RlcHNcbiAgICAgIHRoaXMuZWwgPSBlbFxuICAgICAgdGhpcy5yZXBlYXQgPSBwYXJzZUludChlbC5kYXRhc2V0LnN0ZXBBbmltYXRpb25SZXBlYXQpIHx8IDBcbiAgICAgIHRoaXMudHlwZSA9IGVsLmRhdGFzZXQuc3RlcEFuaW1hdGlvblR5cGVcbiAgICAgIHRoaXMuc3RlcHMgPSBzdGVwcyA/IEpTT04ucGFyc2UoYmFzZTY0VG9TdHJpbmcoc3RlcHMpKSA6IFtdXG4gICAgICB0aGlzLm9mZnNldCA9IHBhcnNlSW50KGVsLmRhdGFzZXQuc3RlcEFuaW1hdGlvbk9mZnNldCkgfHwgMFxuICAgICAgdGhpcy50cmlnZ2VyID0gZWwuZGF0YXNldC5zdGVwQW5pbWF0aW9uVHJpZ2dlciB8fCAnYm90dG9tJ1xuICAgICAgdGhpcy5ibG9ja1BhcmVudCA9IGVsLmNsb3Nlc3QoJy5jbGktYmxvY2snKVxuICAgICAgdGhpcy50aW1lbGluZSA9IG51bGxcbiAgICB9XG5cbiAgICBnZXQgaXNUb3VjaEV2ZW50ICgpIHtcbiAgICAgIHJldHVybiB0aGlzLnR5cGUgPT09IEVWRU5UUy5jbGljayB8fCB0aGlzLnR5cGUgPT09IEVWRU5UUy5tb3VzZWVudGVyXG4gICAgfVxuXG4gICAgZ2V0IGlzU2hvd0V2ZW50ICgpIHtcbiAgICAgIHJldHVybiB0aGlzLnR5cGUgPT09IEVWRU5UUy5lbGVtZW50T25TY3JlZW4gfHwgdGhpcy50eXBlID09PSBFVkVOVFMuYmxvY2tPblNjcmVlblxuICAgIH1cblxuICAgIGdldCBvZmZzZXRPcGVyYXRvciAoKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmlnZ2VyID09PSAnYm90dG9tJyA/ICctPScgOiAnKz0nXG4gICAgfVxuXG4gICAgZ2V0IHRhcmdldCAoKSB7XG4gICAgICByZXR1cm4gdGhpcy50eXBlID09PSBFVkVOVFMuYmxvY2tPblNjcmVlbiA/IHRoaXMuYmxvY2tQYXJlbnQgOiB0aGlzLmVsXG4gICAgfVxuXG5cbiAgICBjcmVhdGVUaW1lbGluZSAoKSB7XG4gICAgICBpZiAodGhpcy5pc1RvdWNoRXZlbnQpIHtcbiAgICAgICAgbGV0IHJlcGVhdCA9IHRoaXMucmVwZWF0XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgICAgICAgY29uc3Qgb25Db21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyB0aGlzIC0gdGltZWxpbmVcbiAgICAgICAgICBpZiAoc2VsZi50eXBlID09PSBFVkVOVFMuY2xpY2sgJiYgc2VsZi5yZXBlYXQgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucmV2ZXJzZSgpLnBhdXNlKClcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVwZWF0ID09PSAwKSB7XG4gICAgICAgICAgcmVwZWF0ID0gMSAvLyB5b3lvIHJldmVyc2UgcmVxdWlyZVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdzYXAudGltZWxpbmUoe3BhdXNlZDogdHJ1ZSwgcmVwZWF0LCB5b3lvOiB0cnVlLCBvbkNvbXBsZXRlfSlcbiAgICAgIH1cblxuXG5cbiAgICAgIGlmICh0aGlzLmlzU2hvd0V2ZW50KSB7XG4gICAgICAgIGNvbnN0IHNjcm9sbFRyaWdnZXIgPSB7XG4gICAgICAgICAgdHJpZ2dlcjogdGhpcy50YXJnZXQsXG4gICAgICAgICAgc3RhcnQ6IGB0b3AgJHt0aGlzLnRyaWdnZXJ9JHt0aGlzLm9mZnNldE9wZXJhdG9yfSR7dGhpcy5vZmZzZXR9YFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdzYXAudGltZWxpbmUoeyBwYXVzZWQ6IHRydWUsIHJlcGVhdDogdGhpcy5yZXBlYXQsIHNjcm9sbFRyaWdnZXIgfSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdzYXAudGltZWxpbmUoeyBwYXVzZWQ6IHRydWUsIHJlcGVhdDogdGhpcy5yZXBlYXQgfSlcbiAgICB9XG5cbiAgICBhcHBlbmRTdGVwc1RvVGltZWxpbmUgKCkge1xuICAgICAgY29uc3QgZXhjZXB0aW9ucyA9IFsnZGlzdGFuY2UnLCAnZml4J11cblxuICAgICAgdGhpcy5zdGVwcy5mb3JFYWNoKChzdGVwLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gc3RlcC5maXggPyAocGFyc2VJbnQoc3RlcC55KSArIHBhcnNlSW50KHN0ZXAuZGlzdGFuY2UpKSA6IHN0ZXAuZGlzdGFuY2VcblxuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuZW50cmllcyhzdGVwKS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGV4Y2VwdGlvbnMuaW5jbHVkZXMoa2V5KSA/IGFjYyA6IHsuLi5hY2MsIFtrZXldOiB2YWx1ZX1cbiAgICAgICAgfSwge30pXG5cblxuICAgICAgICBpZiAodGhpcy50eXBlID09PSBFVkVOVFMuc2Nyb2xsKSB7XG5cbiAgICAgICAgICAvLyDQtNC40YHRgtCw0L3RhtC40Y8g0L/RgNC10LTRi9C00YPRidC40YUg0YjQsNCz0L7QslxuICAgICAgICAgIGNvbnN0IHByZXZTdGVwcyA9IHRoaXMuc3RlcHMuZmlsdGVyKChlLCBpbmRleCkgPT4gaW5kZXggPCBpKVxuICAgICAgICAgIGNvbnN0IHBhc3NlZERpc3RhbmNlID0gcHJldlN0ZXBzLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiBhY2MgKyBjdXJyLmRpc3RhbmNlLCAwKSAtIHRoaXMub2Zmc2V0XG5cbiAgICAgICAgICBvcHRpb25zLnNjcm9sbFRyaWdnZXIgPSB7XG4gICAgICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IGZhbHNlLFxuICAgICAgICAgICAgdHJpZ2dlcjogdGhpcy50YXJnZXQsXG4gICAgICAgICAgICBzdGFydDogYHRvcCAke3RoaXMudHJpZ2dlcn0tPSR7cGFzc2VkRGlzdGFuY2V9YCxcbiAgICAgICAgICAgIGVuZDogYCs9JHtkaXN0YW5jZX1gLFxuICAgICAgICAgICAgc2NydWI6IHRydWVcbiAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG5cbiAgICAgICAgdGhpcy50aW1lbGluZS50byh0aGlzLmVsLCBvcHRpb25zKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBhc3luYyB0b3VjaEV2ZW50SGFuZGxlciAoKSB7XG4gICAgICB0aGlzLnRpbWVsaW5lLnJlc3RhcnQoKS5wbGF5KClcbiAgICB9XG5cbiAgICBhc3luYyBzdG9wVG91Y2hFdmVudEhhbmRsZXIgKCkge1xuICAgICAgaWYgKHRoaXMucmVwZWF0ID09PSAtMSkgeyAvLyBsb29wXG4gICAgICAgIGF3YWl0IHRoaXMudGltZWxpbmUucmVzdGFydCgpLnBhdXNlKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF3YWl0IHRoaXMudGltZWxpbmUucmV2ZXJzZSgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaW5pdCAoKSB7XG4gICAgICBnc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpXG5cbiAgICAgIFNjcm9sbFRyaWdnZXIuZGVmYXVsdHMoe3Njcm9sbGVyOiB3aW5kb3cudXNlclNjcmlwdHMuVXRpbC5nZXRTY3JvbGxDb250YWluZXIodGhpcy5lbCl9KVxuXG4gICAgICB0aGlzLnRpbWVsaW5lID0gdGhpcy5jcmVhdGVUaW1lbGluZSgpXG5cbiAgICAgIHRoaXMuYXBwZW5kU3RlcHNUb1RpbWVsaW5lKClcblxuICAgICAgaWYgKHRoaXMuaXNUb3VjaEV2ZW50KSB7XG5cbiAgICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKHRoaXMudHlwZSwgYXN5bmMgKGUpID0+IHtcbiAgICAgICAgICBpZiAoIXRoaXMudGltZWxpbmUuaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgY29uc3QgaGFzRWxlbWVudEhyZWYgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZSgnaHJlZicpXG5cbiAgICAgICAgICAgIC8vINC+0YLRgNCw0LHQsNGC0YvQstCw0L3QuNC1INCw0L3QuNC80LDRhtC40Lgg0L3QsCDRgdGB0YvQu9C60LDRhVxuICAgICAgICAgICAgaWYgKCFoYXNFbGVtZW50SHJlZikge1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMudG91Y2hFdmVudEhhbmRsZXIoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgfVxuXG4gICAgfVxuXG4gICAgc3RhdGljIHJ1biAocm9vdEVsZW1lbnQgPSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAvLyDQtNC70Y8g0L7RgtC60LvQsNC00YvQstCw0L3QuNGPINCw0L3QuNC80LDRhtC40LhcbiAgICAgIC8vINC/0YDQuCDQv9C10YDQtdGF0L7QtNC1INC90LAg0YHRgtGA0LDQvdC40YbRgyDRgSDRj9C60L7RgNC10LxcbiAgICAgIC8vINC40L3QsNGH0LUg0L3QtSDRgdC60YDQvtC70LvQuNGC0YHRjyDQuiDRj9C60L7RgNC90L7QvNGDINCx0LvQvtC60YNcbiAgICAgIGNvbnN0IHRpbWVySWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGlmICghSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2Nyb2xsaW5nVG9BbmNob3InKSkpIHtcbiAgICAgICAgICBjb25zdCBTRUxFQ1RPUiA9ICdbZGF0YS1zdGVwLWFuaW1hdGlvbi10eXBlXTpub3QoW2RhdGEtc3RlcC1hbmltYXRpb24tdHlwZT1cIlwiXSknXG4gICAgICAgICAgY29uc3QgaXRlbXMgPSBbLi4ucm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUildXG5cbiAgICAgICAgICBpdGVtcy5mb3JFYWNoKGMgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWwgPSBuZXcgU3RlcEFuaW1hdGlvbihjKVxuICAgICAgICAgICAgZWwuaW5pdCgpXG4gICAgICAgICAgfSlcbiAgICAgICAgICBjbGVhckludGVydmFsKHRpbWVySWQpO1xuICAgICAgICB9XG4gICAgICB9LCA1MDApXG4gICAgfVxuICB9XG5cblxuXG5cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICBTdGVwQW5pbWF0aW9uLnJ1bigpXG4gIH0pO1xuXG4gIHdpbmRvdy51c2VyU2NyaXB0cyA9IHdpbmRvdy51c2VyU2NyaXB0cyB8fCB7fVxuICB3aW5kb3cudXNlclNjcmlwdHMuU3RlcEFuaW1hdGlvbiA9IFN0ZXBBbmltYXRpb25cblxuXG59KSgpXG5cblxuIiwiKGZ1bmN0aW9uKCl7XG4gICd1c2Ugc3RyaWN0JztcbiAgY2xhc3MgVGltZXIge1xuICAgIGNvbnN0cnVjdG9yKGVsKSB7XG4gICAgICB0aGlzLmVsID0gZWxcbiAgICAgIHRoaXMuaW50ZXJ2YWwgPSBudWxsXG4gICAgICB0aGlzLmV2ZW50RGF0ZSA9IG5ldyBEYXRlKERhdGUucGFyc2UoZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXRpbWVyJykpKVxuICAgICAgdGhpcy5kYXlFbCA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXRpbWVyLWRheS12YWx1ZV0nKVxuICAgICAgdGhpcy5ob3Vyc0VsID0gZWwucXVlcnlTZWxlY3RvcignW2RhdGEtdGltZXItaG91cnMtdmFsdWVdJylcbiAgICAgIHRoaXMubWludXRlc0VsID0gZWwucXVlcnlTZWxlY3RvcignW2RhdGEtdGltZXItbWludXRlcy12YWx1ZV0nKVxuICAgICAgdGhpcy5zZWNvbmRzRWwgPSBlbC5xdWVyeVNlbGVjdG9yKCdbZGF0YS10aW1lci1zZWNvbmRzLXZhbHVlXScpXG4gICAgfVxuXG5cbiAgICB0aWNrICgpIHtcbiAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKClcbiAgICAgIGNvbnN0IGRpZmZJblRpbWUgPSB0aGlzLmV2ZW50RGF0ZS5nZXRUaW1lKCkgLSBub3cuZ2V0VGltZSgpXG4gICAgICBjb25zdCB0aW1lc3RhbXAgPSBNYXRoLnRydW5jKGRpZmZJblRpbWUgLyAxMDAwKVxuICAgICAgY29uc3QgYWxsSG91cnMgPSBNYXRoLmZsb29yKHRpbWVzdGFtcCAvIDYwIC8gNjApXG5cbiAgICAgIHRoaXMuZGF5RWwudGV4dENvbnRlbnQgPSBTdHJpbmcoTWF0aC5mbG9vcihhbGxIb3VycyAvIDI0KSlcbiAgICAgIHRoaXMuaG91cnNFbC50ZXh0Q29udGVudCA9IFN0cmluZyhhbGxIb3VycyAlIDI0KVxuICAgICAgdGhpcy5taW51dGVzRWwudGV4dENvbnRlbnQgPSBTdHJpbmcoTWF0aC5mbG9vcih0aW1lc3RhbXAgLyA2MCkgLSAoYWxsSG91cnMgKiA2MCkpXG4gICAgICB0aGlzLnNlY29uZHNFbC50ZXh0Q29udGVudCA9IFN0cmluZyh0aW1lc3RhbXAgJSA2MClcblxuICAgICAgaWYgKGRpZmZJblRpbWUgPD0gMCApIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIHRoaXMuZXhwaXJlZCgpO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgaW5pdCAoKSB7XG4gICAgICB0aGlzLnN0b3AoKVxuICAgICAgdGhpcy5ldmVudERhdGUgPSBuZXcgRGF0ZShEYXRlLnBhcnNlKHRoaXMuZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXRpbWVyJykpKVxuICAgICAgY29uc3QgdGljayA9IHRoaXMudGljay5iaW5kKHRoaXMpXG4gICAgICB0aGlzLnRpY2soKVxuICAgICAgdGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKHRpY2ssIDEwMDApXG4gICAgfVxuXG5cbiAgICBzdG9wICgpIHtcbiAgICAgIHRoaXMuaW50ZXJ2YWwgPSBudWxsXG4gICAgfVxuXG4gICAgZXhwaXJlZCAoKSB7XG4gICAgICB0aGlzLmRheUVsLnRleHRDb250ZW50ID0gJzAnXG4gICAgICB0aGlzLmhvdXJzRWwudGV4dENvbnRlbnQgPSAnMCdcbiAgICAgIHRoaXMubWludXRlc0VsLnRleHRDb250ZW50ID0gJzAnXG4gICAgICB0aGlzLnNlY29uZHNFbC50ZXh0Q29udGVudCA9ICcwJ1xuICAgIH1cblxuICAgIHN0YXRpYyBydW4gKHJvb3RFbGVtZW50ID0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgY29uc3QgU0VMRUNUT1IgPSAnW2RhdGEtc2NyaXB0PVwidGltZXJcIl0nXG4gICAgICBjb25zdCB0aW1lcnMgPSBbLi4ucm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUildXG5cbiAgICAgIHRpbWVycy5mb3JFYWNoKHQgPT4ge1xuICAgICAgICBjb25zdCB0aW1lciA9IG5ldyBUaW1lcih0KVxuICAgICAgICB0aW1lci5pbml0KClcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICBUaW1lci5ydW4oKVxuICB9KVxuXG5cbiAgd2luZG93LnVzZXJTY3JpcHRzID0gd2luZG93LnVzZXJTY3JpcHRzIHx8IHt9XG4gIHdpbmRvdy51c2VyU2NyaXB0cy5UaW1lciA9IFRpbWVyXG59KSgpXG4iLCIoZnVuY3Rpb24oKXtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGNvbnN0IFNUSUNLWV9TRUxFQ1RPUiA9ICcuY2xpLXN0aWNreSdcbiAgY29uc3QgQlVJTERFUl9QUkVWSUVXX1NFTEVDVE9SID0gJ1tkYXRhLXB1YmxpYy1wYWdlXSdcblxuICBjbGFzcyBVdGlsIHtcblxuICAgIHN0YXRpYyBpc0J1aWxkZXIgKGVsKSB7XG4gICAgICBpZiAoIWVsKSByZXR1cm5cbiAgICAgIHJldHVybiAhIWVsLmNsb3Nlc3QoJyNhcHAnKVxuICAgIH1cblxuICAgIHN0YXRpYyBnZXRTY3JvbGxDb250YWluZXIoZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzQnVpbGRlcihlbCkgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKEJVSUxERVJfUFJFVklFV19TRUxFQ1RPUikgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRcbiAgICB9XG5cbiAgICBzdGF0aWMgc2Nyb2xsQWZ0ZXJMb2FkKGVsLCBjYikge1xuICAgICAgY29uc3Qgc2Nyb2xsVGFyZ2V0ID0gdGhpcy5nZXRTY3JvbGxDb250YWluZXIoZWwpXG4gICAgICBjb25zdCBjdXJyZW50U2Nyb2xsVG9wID0gc2Nyb2xsVGFyZ2V0LnNjcm9sbFRvcFxuICAgICAgbGV0IHRvcE9mZnNldCA9IDBcbiAgICAgIGNvbnN0IHN0aWNreUhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU1RJQ0tZX1NFTEVDVE9SKVxuXG4gICAgICBpZiAoc3RpY2t5SGVhZGVyKSB7XG4gICAgICAgIGNvbnN0IGNvbXB1dGVkSGVpZ2h0ID0gZ2V0Q29tcHV0ZWRTdHlsZShzdGlja3lIZWFkZXIpLmhlaWdodFxuICAgICAgICB0b3BPZmZzZXQgPSBjb21wdXRlZEhlaWdodCA9PT0gJ2F1dG8nID8gMCA6IHBhcnNlSW50KGNvbXB1dGVkSGVpZ2h0KVxuICAgICAgfVxuXG4gICAgICBjb25zdCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgIGNvbnN0IG9mZnNldCA9IHJlY3QudG9wIC0gdG9wT2Zmc2V0XG4gICAgICBjb25zdCB0b3AgPSBvZmZzZXQgPiAwXG4gICAgICAgID8gTWF0aC5hYnMoY3VycmVudFNjcm9sbFRvcCArIE1hdGguYWJzKG9mZnNldCkpXG4gICAgICAgIDogTWF0aC5hYnMoY3VycmVudFNjcm9sbFRvcCAtIE1hdGguYWJzKG9mZnNldCkpXG4gICAgICBjb25zdCBwYXlsb2FkID0geyB0b3AsIGJlaGF2aW9yOiAnc21vb3RoJ31cbiAgICAgIHNjcm9sbFRhcmdldC5zY3JvbGxUbyhwYXlsb2FkKVxuICAgICAgaWYgKGNiKSBjYigpXG4gICAgfVxuXG4gICAgc3RhdGljIGNoZWNrQW5kU2Nyb2xsKGVsLCBjYikge1xuICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgLy8g0JXRgdC70Lgg0YHRgtGA0LDQvdC40YbQsCDRg9C20LUg0LfQsNCz0YDRg9C20LXQvdCwLCDRgdGA0LDQt9GDINCy0YvQt9GL0LLQsNC10Lwgc2Nyb2xsQWZ0ZXJMb2FkXG4gICAgICAgIHRoaXMuc2Nyb2xsQWZ0ZXJMb2FkKGVsLCBjYilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vINCV0YHQu9C4INGB0YLRgNCw0L3QuNGG0LAg0LXRidC1INC30LDQs9GA0YPQttCw0LXRgtGB0Y8sINC20LTQtdC8INC/0L7Qu9C90L7QuSDQt9Cw0LPRgNGD0LfQutC4XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICAgIC8vINCY0YHQv9C+0LvRjNC30YPQtdC8IHJlcXVlc3RBbmltYXRpb25GcmFtZSDQtNC70Y8g0L7RgtC70L7QttC10L3QvdC+0LPQviDQstGL0L/QvtC70L3QtdC90LjRj1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnNjcm9sbEFmdGVyTG9hZChlbCwgY2IpKVxuICAgICAgICB9LCB7IG9uY2U6IHRydWUgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgc2Nyb2xsVG8oZWwsIGNiKSB7XG4gICAgICB0aGlzLmNoZWNrQW5kU2Nyb2xsKGVsLCBjYilcbiAgICB9XG5cbiAgICBzdGF0aWMgc2hvd1BvcHVwIChlbCkge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnc2hvdycpXG4gICAgICBjb25zdCBzY3JvbGxUYXJnZXQgPSB0aGlzLmdldFNjcm9sbENvbnRhaW5lcihlbClcblxuICAgICAgaWYodGhpcy5pc0J1aWxkZXIoZWwpKSB7XG4gICAgICAgIHNjcm9sbFRhcmdldC5zdHlsZS5jb250YWluID0gJ2xheW91dCdcbiAgICAgICAgZWwuc3R5bGUudG9wID0gYCR7c2Nyb2xsVGFyZ2V0LnNjcm9sbFRvcH1weGBcbiAgICAgIH1cblxuICAgICAgc2Nyb2xsVGFyZ2V0LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbidcblxuICAgICAgLy8g0LrQvdC+0L/QutCwINCy0L3Rg9GC0YDQuCDQv9C+0L/QsNC/0LBcbiAgICAgIGNvbnN0IGNsb3NlID0gZWwucXVlcnlTZWxlY3RvcignW2RhdGEtcG9wdXAtY2xvc2VdJylcblxuICAgICAgY29uc3QgY2xlYXJFdmVudHMgPSAoKSA9PiB7XG4gICAgICAgIGNsb3NlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xvc2VIYW5kbGVyKVxuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmYWRlSGFuZGxlcilcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2xvc2VIYW5kbGVyID0gKGUpID0+IHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICB0aGlzLmhpZGVQb3B1cChlbClcbiAgICAgICAgY2xlYXJFdmVudHMoKVxuICAgICAgfVxuXG4gICAgICAvLyDQutC70LjQuiDQv9C+INC+0LLQtdGA0LvQtdGOINCy0L7QvtC60YDRg9CzINC/0L7Qv9Cw0L/QsFxuICAgICAgY29uc3QgZmFkZUhhbmRsZXIgPSAoZSkgPT4ge1xuICAgICAgICBpZiAoZWwgPT09IGUudGFyZ2V0KSB7XG4gICAgICAgICAgdGhpcy5oaWRlUG9wdXAoZWwpXG4gICAgICAgICAgY2xlYXJFdmVudHMoKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xvc2VIYW5kbGVyKVxuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZmFkZUhhbmRsZXIpXG4gICAgfVxuXG4gICAgc3RhdGljIGhpZGVQb3B1cCAoZWwpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKVxuICAgICAgY29uc3Qgc2Nyb2xsVGFyZ2V0ID0gdGhpcy5nZXRTY3JvbGxDb250YWluZXIoZWwpXG5cbiAgICAgIGlmKHRoaXMuaXNCdWlsZGVyKGVsKSkge1xuICAgICAgICBlbC5zdHlsZS50b3AgPSAwXG4gICAgICAgIHNjcm9sbFRhcmdldC5zdHlsZS5jb250YWluID0gbnVsbFxuICAgICAgfVxuXG4gICAgICBzY3JvbGxUYXJnZXQuc3R5bGUub3ZlcmZsb3cgPSBudWxsXG4gICAgfVxuXG4gICAgc3RhdGljIHByZXZpZXdDaGFuZ2VTdWJzY3JpYmUgKGVsLCBjYikge1xuICAgICAgLy8gY2hhbmdlIGJyZWFrcG9pbnRzIGluIGJ1aWxkZXIgcHJldmlld1xuICAgICAgY29uc3QgY2xhc3NPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihjaGFuZ2VzID0+IHtcbiAgICAgICAgY2IoY2hhbmdlc1swXSlcbiAgICAgIH0pXG4gICAgICBjbGFzc09ic2VydmVyLm9ic2VydmUoZWwpXG4gICAgfVxuXG4gICAgc3RhdGljIG9ic2VydmVDbGFzc0NoYW5nZXMgKGVsLCBjYikge1xuICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zTGlzdCkgPT4ge1xuICAgICAgICBjYihtdXRhdGlvbnNMaXN0LmZpbHRlcihpID0+IGVsID09PSBpLnRhcmdldClbMF0pXG4gICAgICB9KVxuXG4gICAgICBjb25zdCBjb25maWcgPSB7IGF0dHJpYnV0ZXM6IHRydWUsIGF0dHJpYnV0ZUZpbHRlcjogWydjbGFzcyddLCBzdWJ0cmVlOiB0cnVlIH1cbiAgICAgIG9ic2VydmVyLm9ic2VydmUoZWwsIGNvbmZpZylcbiAgICB9XG5cbiAgICBzdGF0aWMgaGlkZU1lbnUgKG1lbnUpIHtcbiAgICAgIG1lbnUuY2xhc3NMaXN0LnJlbW92ZSgnb3BlbmVkJylcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuZ2V0U2Nyb2xsQ29udGFpbmVyKG1lbnUpXG4gICAgICBjb250YWluZXIuc3R5bGUub3ZlcmZsb3cgPSBudWxsXG4gICAgICBjb250YWluZXIuc3R5bGUudG91Y2hBY3Rpb24gPSBudWxsXG4gICAgfVxuXG4gICAgc3RhdGljIHNob3dNZW51IChtZW51KSB7XG4gICAgICBtZW51LmNsYXNzTGlzdC5hZGQoJ29wZW5lZCcpXG4gICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmdldFNjcm9sbENvbnRhaW5lcihtZW51KVxuICAgICAgY29udGFpbmVyLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbidcbiAgICAgIC8vIG1vYmlsZSBzYWZhcmkgZml4XG4gICAgICBjb250YWluZXIuc3R5bGUudG91Y2hBY3Rpb24gPSAnbm9uZSdcbiAgICAgIC8vIGNvbnN0IHNjcm9sbCA9IHRoaXMubW9iaWxlTWVudS5vZmZzZXRIZWlnaHQgPCB0aGlzLm1vYmlsZU1lbnUuc2Nyb2xsSGVpZ2h0XG4gICAgICAvLyBzY3JvbGwgPyB0aGlzLm1vYmlsZU1lbnUuc3R5bGUuc2V0UHJvcGVydHkoJ2p1c3RpZnktY29udGVudCcsICdmbGV4LXN0YXJ0JywgJ2ltcG9ydGFudCcpIDogdGhpcy5tb2JpbGVNZW51LnN0eWxlWydqdXN0aWZ5LWNvbnRlbnQnXSA9IG51bGxcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNNb2JpbGUoKSB7XG4gICAgICBjb25zdCB0b01hdGNoID0gW1xuICAgICAgICAvQW5kcm9pZC9pLFxuICAgICAgICAvd2ViT1MvaSxcbiAgICAgICAgL2lQaG9uZS9pLFxuICAgICAgICAvaVBhZC9pLFxuICAgICAgICAvaVBvZC9pLFxuICAgICAgICAvQmxhY2tCZXJyeS9pLFxuICAgICAgICAvV2luZG93cyBQaG9uZS9pLFxuICAgICAgXTtcblxuICAgICAgcmV0dXJuIHRvTWF0Y2guc29tZSgodG9NYXRjaEl0ZW0pID0+IHtcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2godG9NYXRjaEl0ZW0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGJhc2U2NFRvU3RyaW5nIChiYXNlNjQpIHtcbiAgICAgIGNvbnN0IGlzQmFzZTY0ID0gdmFsID0+IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnICYmIC9eW0EtWmEtejAtOSsvXSs9KiQvLnRlc3QodmFsKVxuXG4gICAgICBpZiAodHlwZW9mIGJhc2U2NCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGJhc2U2NFxuICAgICAgfVxuICAgICAgaWYgKCFpc0Jhc2U2NChiYXNlNjQpKSB7XG4gICAgICAgIHJldHVybiBiYXNlNjRcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoVWludDhBcnJheS5mcm9tKGF0b2IoYmFzZTY0KSwgbSA9PiBtLmNvZGVQb2ludEF0KDApKSlcbiAgICB9XG5cbiAgICBzdGF0aWMgc3RyaW5nVG9CYXNlNjQgKHN0cikge1xuICAgICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBzdHJcbiAgICAgIH1cbiAgICAgIHJldHVybiBidG9hKFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLm5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzdHIpKSlcbiAgICB9XG5cblxuICAgIHN0YXRpYyBkZWJvdW5jZSAoZnVuYywgd2FpdCwgaW1tZWRpYXRlID0gZmFsc2UpIHtcbiAgICAgIGxldCB0aW1lb3V0XG4gICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgbGF0ZXIgPSAoKSA9PiB7XG4gICAgICAgICAgdGltZW91dCA9IG51bGxcbiAgICAgICAgICBpZiAoIWltbWVkaWF0ZSkgZnVuYyguLi5hcmdzKVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXRcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpXG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KVxuICAgICAgICBpZiAoY2FsbE5vdykgZnVuYyguLi5hcmdzKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbGxlY3Rpb24gdXRpbHNcbiAgICBzdGF0aWMgZ2V0RmlsdGVyc1dpdGhSZXBsYWNlZFRlbXBsYXRlVmFyaWFibGVzIChmaWx0ZXJzLCB0ZW1wbGF0ZUNvbnRleHQpIHtcbiAgICAgIGNvbnN0IG5ld0ZpbHRlcnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGZpbHRlcnMpKVxuXG4gICAgICBmdW5jdGlvbiBpc1ZhcmlhYmxlICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUuaW5jbHVkZXMoJ3t7ICcpICYmIHZhbHVlLmluY2x1ZGVzKCcgfX0nKVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZXBsYWNlVmFyaWFibGVzIChzdHIsIGdldFZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gL3t7XFxzKihbXFx3Li1dKylcXHMqfX0vZ1xuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UocmVnZXgsIChfLCB2YXJpYWJsZU5hbWUpID0+IGdldFZhbHVlKHZhcmlhYmxlTmFtZSkpXG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldFZhbHVlRnJvbVBhdGggKHN0ciwgY29udGV4dCkge1xuXG4gICAgICAgIGlmICghc3RyIHx8ICFjb250ZXh0KSB7XG4gICAgICAgICAgcmV0dXJuICcnXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXRoID0gc3RyLnJlcGxhY2UoL1t7fV0vZywgJycpLnRyaW0oKVxuICAgICAgICBjb25zdCBrZXlzID0gcGF0aC5zcGxpdCgnLicpO1xuICAgICAgICByZXR1cm4ga2V5cy5yZWR1Y2UoKGFjYywga2V5KSA9PiBhY2MgJiYgYWNjW2tleV0sIGNvbnRleHQpXG4gICAgICB9XG5cbiAgICAgIG5ld0ZpbHRlcnMuJGFuZC5mb3JFYWNoKGFuZE9iaiA9PiB7XG4gICAgICAgIGFuZE9iai4kb3IuZm9yRWFjaChvckNvbmRpdGlvbnMgPT4ge1xuICAgICAgICAgIE9iamVjdC5lbnRyaWVzKG9yQ29uZGl0aW9ucykuZm9yRWFjaCgoW19maWVsZElkLCBjb25kaXRpb25zXSkgPT4ge1xuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoY29uZGl0aW9ucykuZm9yRWFjaCgoW2NvbmRpdGlvbktleSwgY29uZGl0aW9uVmFsdWVdKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uZGl0aW9uVmFsdWUgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAgICAgIWlzVmFyaWFibGUoY29uZGl0aW9uVmFsdWUpIHx8XG4gICAgICAgICAgICAgICAgY29uZGl0aW9uS2V5ID09PSAnX19zeXN0ZW0nXG4gICAgICAgICAgICAgICkgcmV0dXJuXG5cbiAgICAgICAgICAgICAgY29uc3QgZ2V0VmFsdWUgPSB2YXJpYWJsZSA9PiBnZXRWYWx1ZUZyb21QYXRoKHZhcmlhYmxlLCB0ZW1wbGF0ZUNvbnRleHQpXG4gICAgICAgICAgICAgIGxldCBuZXdDb25kaXRpb25WYWx1ZSA9IHJlcGxhY2VWYXJpYWJsZXMoY29uZGl0aW9uVmFsdWUsIGdldFZhbHVlKVxuXG4gICAgICAgICAgICAgIGxldCB2YWx1ZVR5cGUgPSBVdGlsLkVDb25kaXRpb25WYWx1ZVR5cGUuU1RSSU5HXG5cbiAgICAgICAgICAgICAgaWYgKGNvbmRpdGlvbnMuX19zeXN0ZW0gJiYgY29uZGl0aW9ucy5fX3N5c3RlbS52YWx1ZV90eXBlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVUeXBlID0gY29uZGl0aW9ucy5fX3N5c3RlbS52YWx1ZV90eXBlXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAodmFsdWVUeXBlID09PSBVdGlsLkVDb25kaXRpb25WYWx1ZVR5cGUuQk9PTEVBTikge1xuICAgICAgICAgICAgICAgIG5ld0NvbmRpdGlvblZhbHVlID0gISFuZXdDb25kaXRpb25WYWx1ZVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlVHlwZSA9PT0gVXRpbC5FQ29uZGl0aW9uVmFsdWVUeXBlLklOVCkge1xuICAgICAgICAgICAgICAgIG5ld0NvbmRpdGlvblZhbHVlID0gcGFyc2VJbnQobmV3Q29uZGl0aW9uVmFsdWUpXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb25kaXRpb25zW2NvbmRpdGlvbktleV0gPSBuZXdDb25kaXRpb25WYWx1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIG5ld0ZpbHRlcnNcbiAgICB9XG4gICAgLy8gY29sbGVjdGlvbiB1dGlscyBFTkRcblxuICAgIHN0YXRpYyBjbGVhclRhZ3MgKHYsIHRhZyA9IG51bGwpIHtcbiAgICAgIGlmICh2ICYmIHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCByZWdleCA9IHRhZyA/IG5ldyBSZWdFeHAoYCg8XFwvPyR7dGFnfSg/PSggfD58XFwvKSkoW14+XSopPilgLCAnaWcnKSA6IC8oPChbXj5dKik+KS9pZ1xuICAgICAgICByZXR1cm4gdi5yZXBsYWNlKHJlZ2V4LCAnJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gY29sbGVjdGlvbiB1dGlsc1xuICBVdGlsLkVGaWx0ZXJNZXRob2RzQ29uZGl0aW9ucyA9IHtcbiAgICBJTkNMVURFUzogJ2luY2x1ZGVzJyxcbiAgICBOT1RfSU5DTFVERVM6ICdub3RJbmNsdWRlcycsXG4gICAgU1RBUlRTX1dJVEg6ICdzdGFydHNXaXRoJyxcbiAgICBOT1RfU1RBUlRTX1dJVEg6ICdub3RTdGFydHNXaXRoJyxcbiAgICBFTkRTX1dJVEg6ICdlbmRzV2l0aCcsXG4gICAgTk9UX0VORFNfV0lUSDogJ25vdEVuZHNXaXRoJyxcbiAgICBFWElTVFM6ICdleGlzdHMnLFxuICAgIE5PVF9FWElTVFM6ICdub3RFeGlzdHMnLFxuICAgIEVRVUFMOiAnZXF1YWwnLFxuICAgIE5PVF9FUVVBTDogJ25vdEVxdWFsJyxcbiAgICBDT05UQUlOUzogJ2NvbnRhaW5zJyxcbiAgICBOT1RfQ09OVEFJTlM6ICdub3RDb250YWlucycsXG4gICAgR1JFQVRFUl9USEFOOiAnZ3JlYXRlclRoYW4nLFxuICAgIEdSRUFURVJfVEhBTl9FUVVBTDogJ2dyZWF0ZXJUaGFuRXF1YWwnLFxuICAgIExFU1NfVEhBTjogJ2xlc3NUaGFuJyxcbiAgICBMRVNTX1RIQU5fRVFVQUw6ICdsZXNzVGhhbkVxdWFsJyxcbiAgfVxuXG4gIFV0aWwuRUNvbmRpdGlvblZhbHVlVHlwZSA9IHtcbiAgICBTVFJJTkc6ICd0ZXh0JyxcbiAgICBCT09MRUFOOiAnYm9vbGVhbicsXG4gICAgSU5UOiAnaW50JyxcbiAgfVxuXG4gIFV0aWwuRVRleHREeW5hbWljVHlwZSA9IHtcbiAgICBGUk9NX0VMRU1FTlRfSU5fUEFHRTogJ2Zyb21FbGVtZW50SW5QYWdlJyxcbiAgICBDVVJSRU5UX1BBR0VfSVRFTV9GSUVMRDogJ2N1cnJlbnRQYWdlSXRlbUZpZWxkJyxcbiAgfVxuXG4gIFV0aWwuRUludER5bmFtaWNUeXBlID0ge1xuICAgIEZST01fRUxFTUVOVF9JTl9QQUdFOiAnZnJvbUVsZW1lbnRJblBhZ2UnLFxuICAgIENVUlJFTlRfUEFHRV9JVEVNX0ZJRUxEOiAnY3VycmVudFBhZ2VJdGVtRmllbGQnLFxuICB9XG4gIC8vIGNvbGxlY3Rpb24gdXRpbHMgRU5EXG5cbiAgd2luZG93LnVzZXJTY3JpcHRzID0gd2luZG93LnVzZXJTY3JpcHRzIHx8IHt9XG4gIHdpbmRvdy51c2VyU2NyaXB0cy5VdGlsID0gVXRpbFxufSkoKVxuIiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgY29uc3QgTFNLZXkgPSAnVVRNX3BhcmFtcydcblxuICBjbGFzcyBVVE1IZWxwZXIge1xuXG4gICAgY29uc3RydWN0b3IoKSB7fVxuXG4gICAgc3RhdGljIGhhc01ldGFUYWcgKCkge1xuICAgICBjb25zdCB0YWcgPSBkb2N1bWVudC5oZWFkLnF1ZXJ5U2VsZWN0b3IoJ21ldGFbbmFtZT1cImFuYWx5dGljc1wiXScpXG4gICAgIHJldHVybiB0YWcgJiYgdGFnLmNvbnRlbnQgJiYgdGFnLmNvbnRlbnQgPT09ICd1dG0nXG4gICAgfVxuXG4gICAgc3RhdGljIGdldFF1ZXJ5UGFyYW1zICgpIHtcbiAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoWy4uLm5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCkuZW50cmllcygpXS5maWx0ZXIoIHBhcmFtID0+IHBhcmFtWzBdLnN0YXJ0c1dpdGgoJ3V0bV8nKSApKVxuICAgIH1cblxuICAgIHN0YXRpYyBzYXZlICgpIHtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IFVUTUhlbHBlci5nZXRRdWVyeVBhcmFtcygpXG4gICAgICBpZiAoIU9iamVjdC5rZXlzKHBhcmFtcykubGVuZ3RoKSByZXR1cm5cbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKExTS2V5LCBKU09OLnN0cmluZ2lmeShwYXJhbXMpKVxuICAgIH1cblxuICAgIHN0YXRpYyBjbGVhciAoKSB7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShMU0tleSlcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0SXRlbXMgKCkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oTFNLZXkpKVxuICAgIH1cblxuICAgIHN0YXRpYyBpbml0KCkge1xuICAgICAgaWYoVVRNSGVscGVyLmhhc01ldGFUYWcoKSkge1xuICAgICAgICBVVE1IZWxwZXIuc2F2ZSgpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgVVRNSGVscGVyLmluaXQoKVxuXG4gIHdpbmRvdy51c2VyU2NyaXB0cyA9IHdpbmRvdy51c2VyU2NyaXB0cyB8fCB7fVxuICB3aW5kb3cudXNlclNjcmlwdHMuVVRNSGVscGVyID0gVVRNSGVscGVyXG59KSgpXG4iLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGNvbnN0IFZJREVPX1NFUlZJQ0VTID0gW1xuICAgIHtcbiAgICAgIHNlcnZpY2U6ICd5b3V0dWJlJyxcbiAgICAgIGJhc2U6ICdodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8nLFxuICAgICAgdXJsUmVnOiAvKD86eW91dHViZVxcLmNvbVxcLyg/OlteXStcXC8uK1xcL3woPzp2fGUoPzptYmVkKT8pXFwvfHNob3J0c1xcL3wuKls/Jl12PSl8eW91dHVcXC5iZVxcLykoW15cIiY/XFxzXXsxMX0pL2dpLFxuICAgICAgaWRSZWc6IC8uKig/OnlvdXR1XFwuYmVcXC98dlxcL3x1XFwvXFx3XFwvfGVtYmVkXFwvfHNob3J0c1xcL3x3YXRjaFxcP3Y9KShbXiNcXFxcJlxcXFw/XSopLiovLFxuICAgICAgbGlua0NvbnN0YW50OiAnP2VuYWJsZWpzYXBpPTEmdmVyc2lvbj0zJnBsYXllcmFwaWlkPXl0cGxheWVyJnN0YXJ0PTEmbW9kZXN0YnJhbmRpbmc9MSZzaG93aW5mbz0wJnJlbD0wJml2X2xvYWRfcG9saWN5PTMnLFxuICAgICAgbGlua0R5bmFtaWNQYXJhbXM6IHtcbiAgICAgICAgYXV0b3BsYXk6ICdhdXRvcGxheScsXG4gICAgICAgIG11dGU6ICdtdXRlJyxcbiAgICAgICAgbG9vcDogJ2xvb3AnLFxuICAgICAgICBjb250cm9sczogJ2NvbnRyb2xzJ1xuICAgICAgfSxcbiAgICAgIHBvc3RNZXNzYWdlczoge1xuICAgICAgICBwbGF5OiAne1wiZXZlbnRcIjpcImNvbW1hbmRcIixcImZ1bmNcIjpcInBsYXlWaWRlb1wiLFwiYXJnc1wiOlwiXCJ9JyxcbiAgICAgICAgcGF1c2U6ICd7XCJldmVudFwiOlwiY29tbWFuZFwiLFwiZnVuY1wiOlwicGF1c2VWaWRlb1wiLFwiYXJnc1wiOlwiXCJ9J1xuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgc2VydmljZTogJ3J1dHViZScsXG4gICAgICBiYXNlOiAnaHR0cHM6Ly9ydXR1YmUucnUvcGxheS9lbWJlZC8nLFxuICAgICAgdXJsUmVnOiAvcnV0dWJlXFwucnVcXC8odmlkZW9cXC98cGxheVxcL2VtYmVkXFwvKS4qL2dpLFxuICAgICAgaWRSZWc6IC8uKig/OnJ1dHViZVxcLnJ1XFwvfHBsYXlcXC9lbWJlZFxcL3x2aWRlb1xcLykoW14jXFxcXCZcXFxcP10qKS8sXG4gICAgICBsaW5rQ29uc3RhbnQ6ICc/JyxcbiAgICAgIC8vINCf0LDRgNCw0LzQtdGC0YDRiyDQvdC40LbQtSDQsiDQv9C70LXQtdGA0LUgcnV0dWJlINC90LUg0YDQsNCx0L7RgtCw0Y7RgixcbiAgICAgIC8vINC90L4g0L7QvdC4INC90YPQttC90Ysg0LTQu9GPINC90LDRgdGC0YDQvtC50LrQuCDQstC40LTQtdC+INGH0LXRgNC10LcgcG9zdE1lc3NhZ2VcbiAgICAgIGxpbmtEeW5hbWljUGFyYW1zOiB7XG4gICAgICAgIGF1dG9wbGF5OiAnYXV0b3BsYXknLFxuICAgICAgICBtdXRlOiAnbXV0ZScsXG4gICAgICAgIGxvb3A6ICdsb29wJyxcbiAgICAgICAgY29udHJvbHM6ICdjb250cm9scydcbiAgICAgIH0sXG4gICAgICBwb3N0TWVzc2FnZXM6IHtcbiAgICAgICAgcGxheTogJ3tcInR5cGVcIjpcInBsYXllcjpwbGF5XCJ9JyxcbiAgICAgICAgcGF1c2U6ICd7XCJ0eXBlXCI6XCJwbGF5ZXI6cGF1c2VcIn0nLFxuICAgICAgICBtdXRlOiAne1widHlwZVwiOlwicGxheWVyOm11dGVcIn0nXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBzZXJ2aWNlOiAndmltZW8nLFxuICAgICAgYmFzZTogJ2h0dHBzOi8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8nLFxuICAgICAgdXJsUmVnOiAvdmltZW9cXC5jb21cXC8odmlkZW9cXC8pPy4qL2dpLFxuICAgICAgaWRSZWc6IC8uKig/OnZpbWVvXFwuY29tXFwvfHZpZGVvXFwvKShbXiNcXFxcJlxcXFw/XSopLyxcbiAgICAgIC8vINC+0YLQutC70Y7Rh9C10L3QuNC1INC/0L7QstC10LTQtdC90LjRjyDQutC+0LPQtNCwINC+0LTQvdC+INCy0LjQtNC10L4g0L3QsNGH0LjQvdCw0LXRgiDQv9GA0L7QuNCz0YDRi9Cy0LDRgtGM0YHRjywg0YLQviDQtNGA0YPQs9C40LUg0YHRgtCw0LLRj9GC0YHRjyDQvdCwINC/0LDRg9C30YNcbiAgICAgIGxpbmtDb25zdGFudDogJz9hdXRvcGF1c2U9MCcsXG4gICAgICBsaW5rRHluYW1pY1BhcmFtczoge1xuICAgICAgICBhdXRvcGxheTogJ2F1dG9wbGF5JyxcbiAgICAgICAgbXV0ZTogJ211dGVkJyxcbiAgICAgICAgbG9vcDogJ2xvb3AnLFxuICAgICAgICBjb250cm9sczogJ2NvbnRyb2xzJ1xuICAgICAgfSxcbiAgICAgIHBvc3RNZXNzYWdlczoge1xuICAgICAgICBwbGF5OiAne1wibWV0aG9kXCI6XCJwbGF5XCJ9JyxcbiAgICAgICAgcGF1c2U6ICd7XCJtZXRob2RcIjpcInBhdXNlXCJ9J1xuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgc2VydmljZTogJ3plbi55YW5kZXgnLFxuICAgICAgYmFzZTogJ2h0dHBzOi8vZHplbi5ydS9lbWJlZC8nLFxuICAgICAgdXJsUmVnOiAvZHplblxcLnJ1XFwvKGVtYmVkXFwvKS4qL2dpLFxuICAgICAgaWRSZWc6IC8uKig/OmR6ZW5cXC5ydVxcL2VtYmVkXFwvKShbXiNcXFxcJlxcXFw/XSopLyxcbiAgICAgIGxpbmtDb25zdGFudDogJz8nLFxuICAgICAgbGlua0R5bmFtaWNQYXJhbXM6IHtcbiAgICAgICAgYXV0b3BsYXk6ICdhdXRvcGxheScsXG4gICAgICAgIG11dGU6ICdtdXRlJyxcbiAgICAgICAgbG9vcDogJ2xvb3AnLFxuICAgICAgICBjb250cm9sczogJ3R2J1xuICAgICAgfSxcbiAgICAgIHBvc3RNZXNzYWdlczoge1xuICAgICAgICBwbGF5OiAne1wibWV0aG9kXCI6XCJwbGF5XCJ9JyxcbiAgICAgICAgcGF1c2U6ICd7XCJtZXRob2RcIjpcInBhdXNlXCJ9J1xuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgc2VydmljZTogJ3ZrJyxcbiAgICAgIGJhc2U6ICdodHRwczovL3ZrLmNvbS8nLFxuICAgICAgdXJsUmVnOiAvKHZrXFwuY29tfHZrdmlkZW9cXC5ydSlcXC8odmlkZW8pPy4qL2dpLFxuICAgICAgaWRSZWc6IC8oaHR0cHM6XFwvXFwvdmtcXC5jb218aHR0cHM6XFwvXFwvdmt2aWRlb1xcLnJ1KVxcLyh2aWRlb19leHRcXC5waHApP1teXCJdKi8sXG4gICAgICBsaW5rQ29uc3RhbnQ6ICc/JyxcbiAgICAgIGxpbmtEeW5hbWljUGFyYW1zOiB7XG4gICAgICAgIGF1dG9wbGF5OiAnYXV0b3BsYXknLFxuICAgICAgICBtdXRlOiAnbXV0ZWQnLFxuICAgICAgICBsb29wOiAnbG9vcCcsXG4gICAgICB9LFxuICAgICAgcG9zdE1lc3NhZ2VzOiB7XG4gICAgICAgIHBsYXk6ICd7XCJtZXRob2RcIjpcInBsYXlcIn0nLFxuICAgICAgICBwYXVzZTogJ3tcIm1ldGhvZFwiOlwicGF1c2VcIn0nXG4gICAgICB9XG4gICAgfVxuICBdXG5cbiAgY29uc3QgZ2V0QmluYXJ5RnJvbVVybEJ5S2V5ID0gKHVybCwga2V5KSA9PiB7XG4gICAgY29uc3QgaW5kZXggPSB1cmwuaW5kZXhPZihrZXkgKyAnPScpXG4gICAgcmV0dXJuIE51bWJlcih1cmxbaW5kZXggKyBrZXkubGVuZ3RoICsgMV0pXG4gIH1cblxuICBjb25zdCBwYXJzZVVybCA9ICh1cmwpID0+IHtcbiAgICBpZiAoIXVybCkgcmV0dXJuIG51bGxcbiAgICBjb25zdCB2aWRlb1NlcnZpY2UgPSBWSURFT19TRVJWSUNFUy5maW5kKGkgPT4gdXJsLm1hdGNoKGkudXJsUmVnKSlcbiAgICBpZiAodXJsICYmIHZpZGVvU2VydmljZSkge1xuICAgICAgY29uc3QgbWF0Y2ggPSB1cmwubWF0Y2godmlkZW9TZXJ2aWNlLmlkUmVnKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdXJsOiBtYXRjaFswXSxcbiAgICAgICAgaWQ6IGdldFNlcnZpY2VJZCh2aWRlb1NlcnZpY2Uuc2VydmljZSwgbWF0Y2gpLFxuICAgICAgICAuLi52aWRlb1NlcnZpY2VcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGNvbnN0IGdldFNlcnZpY2VJZCA9IChzZXJ2aWNlLCBtYXRjaCkgPT4ge1xuICAgIGlmIChzZXJ2aWNlID09PSAndmsnKSB7XG4gICAgICByZXR1cm4gbWF0Y2ggJiYgYHZpZGVvX2V4dC5waHA/b2lkPSR7bWF0Y2hbMV19JmlkPSR7bWF0Y2hbMl19YFxuICAgIH1cblxuICAgIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXS5yZXBsYWNlKCcvJywgJycpXG4gIH1cblxuXG4gIGNsYXNzIFZpZGVvIHtcbiAgICBjb25zdHJ1Y3RvciAoZWwpIHtcbiAgICAgIGNvbnN0IGlmcmFtZSA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ2lmcmFtZScpXG4gICAgICB0aGlzLmVsID0gZWxcbiAgICAgIHRoaXMuaWZyYW1lID0gaWZyYW1lXG4gICAgICB0aGlzLnVybCA9IGlmcmFtZS5kYXRhc2V0LmlmcmFtZVNyYyB8fCBpZnJhbWUuc3JjXG4gICAgICB0aGlzLmJhY2tncm91bmRWaWRlbyA9IHRoaXMuZWwuY2xvc2VzdCgnW2RhdGEtZGVzaWduLXR5cGU9XCJiYWNrZ3JvdW5kXCJdJylcbiAgICAgIHRoaXMuc2VydmljZU9wdGlvbnMgPSBwYXJzZVVybCh0aGlzLnVybClcbiAgICAgIHRoaXMuaXNSdXR1YmVWaWRlbyA9IHRoaXMuc2VydmljZU9wdGlvbnMgJiYgdGhpcy5zZXJ2aWNlT3B0aW9ucy5zZXJ2aWNlID09PSAncnV0dWJlJ1xuICAgICAgdGhpcy5pc1lvdXR1YmVWaWRlbyA9IHRoaXMuc2VydmljZU9wdGlvbnMgJiYgdGhpcy5zZXJ2aWNlT3B0aW9ucy5zZXJ2aWNlID09PSAneW91dHViZSdcbiAgICAgIHRoaXMuaXNWa1ZpZGVvID0gdGhpcy5zZXJ2aWNlT3B0aW9ucyAmJiB0aGlzLnNlcnZpY2VPcHRpb25zLnNlcnZpY2UgPT09ICd2aydcbiAgICAgIHRoaXMuYnV0dG9uID0gZWwucXVlcnlTZWxlY3RvcignW2RhdGEtdmlkZW8tYnV0dG9uXScpXG4gICAgICBjb25zdCBhdXRvcGxheUtleSA9IHRoaXMuc2VydmljZU9wdGlvbnMgJiYgdGhpcy5zZXJ2aWNlT3B0aW9ucy5saW5rRHluYW1pY1BhcmFtcy5hdXRvcGxheVxuICAgICAgdGhpcy5hdXRvcGxheVZhbHVlID0gYXV0b3BsYXlLZXkgPyBnZXRCaW5hcnlGcm9tVXJsQnlLZXkodGhpcy51cmwsIGF1dG9wbGF5S2V5KSA6IDBcbiAgICAgIHRoaXMucHJldmlld0RPTUVsZW1lbnQgPSBlbC5xdWVyeVNlbGVjdG9yKCdbZGF0YS12aWRlby1wcmV2aWV3XScpXG4gICAgICB0aGlzLnBsYXlJbnRlcnZhbElkID0gbnVsbFxuICAgICAgdGhpcy53YXNSZXRyeVBsYXlMYXVuY2hlZCA9IGZhbHNlXG4gICAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZVxuICAgICAgdGhpcy5jdXJyZW50UGxheWVySW5zdGFuY2UgPSBudWxsXG4gICAgfVxuXG4gICAgYWN0aW9uIChjb21tYW5kKSB7XG4gICAgICBpZiAodGhpcy5pZnJhbWU/LmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgICAgdGhpcy5pZnJhbWUuY29udGVudFdpbmRvdz8ucG9zdE1lc3NhZ2UoY29tbWFuZCwgJyonKVxuICAgICAgfVxuICAgIH1cblxuICAgIHBsYXkgKCkge1xuICAgICAgdGhpcy5wbGF5aW5nID0gdHJ1ZVxuICAgICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKCdwbGF5JylcbiAgICAgIGlmICghdGhpcy5pZnJhbWU/LmdldEF0dHJpYnV0ZSgnc3JjJykpIHtcbiAgICAgICAgdGhpcy5pZnJhbWUuc3JjID0gdGhpcy51cmxcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNWa1ZpZGVvICYmIHRoaXMuY3VycmVudFBsYXllckluc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFBsYXllckluc3RhbmNlLnBsYXkoKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBjb21tYW5kID0gdGhpcy5zZXJ2aWNlT3B0aW9ucy5wb3N0TWVzc2FnZXMucGxheVxuXG4gICAgICAvLyDRgyBpZnJhbWUg0Y7RgtGD0LHQsCBldmVudCBsb2FkINC+0YLRgNCw0LHQsNGC0YvQstCw0LXRgiDRgSDRgdGD0YnQtdGB0YLQstC10L3QvdC+0Lkg0LfQsNC00LXRgNC20LrQvtC5LCDQv9C+0YDQvtC5INCyIDEwLTE1INGB0LXQutGD0L3QtCwg0L/QvtGN0YLQvtC80YMg0L3QsCDQvdC10LPQviDQvtC/0LjRgNCw0YLRjNGB0Y8g0L3QtdC70YzQt9GPXG4gICAgICAvLyBCVUlMREVSLTk5N1xuICAgICAgaWYgKCF0aGlzLmlzWW91dHViZVZpZGVvKSB7XG4gICAgICAgIHRoaXMuaWZyYW1lLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmFjdGlvbihjb21tYW5kKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmFjdGlvbihjb21tYW5kKVxuICAgICAgaWYgKCF0aGlzLmlzUnV0dWJlVmlkZW8gJiYgIXRoaXMud2FzUmV0cnlQbGF5TGF1bmNoZWQpIHtcbiAgICAgICAgdGhpcy53YXNSZXRyeVBsYXlMYXVuY2hlZCA9IHRydWVcbiAgICAgICAgdGhpcy5wbGF5SW50ZXJ2YWxJZCA9IHNldEludGVydmFsKCgpID0+IHRoaXMuYWN0aW9uKGNvbW1hbmQpLCAzMDApXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5wbGF5SW50ZXJ2YWxJZCAhPT0gbnVsbCAmJiBjbGVhckludGVydmFsKHRoaXMucGxheUludGVydmFsSWQpLCAxNTAwKVxuICAgICAgfVxuICAgIH1cblxuICAgIHBhdXNlICgpIHtcbiAgICAgIHRoaXMucGxheWluZyA9IGZhbHNlXG4gICAgICB0aGlzLmVsLmNsYXNzTGlzdC5yZW1vdmUoJ3BsYXknKVxuICAgICAgaWYgKHRoaXMucGxheUludGVydmFsSWQgIT09IG51bGwpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnBsYXlJbnRlcnZhbElkKVxuICAgICAgICB0aGlzLnBsYXlJbnRlcnZhbElkID0gbnVsbFxuICAgICAgfVxuXG4gICAgICBjb25zdCBjb21tYW5kID0gdGhpcy5zZXJ2aWNlT3B0aW9ucy5wb3N0TWVzc2FnZXMucGF1c2VcbiAgICAgIHRoaXMuYWN0aW9uKGNvbW1hbmQpXG5cbiAgICAgIGlmICh0aGlzLmlzVmtWaWRlbyAmJiB0aGlzLmN1cnJlbnRQbGF5ZXJJbnN0YW5jZSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRQbGF5ZXJJbnN0YW5jZS5wYXVzZSgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgbXV0ZSAoKSB7XG5cbiAgICAgIGNvbnN0IGNvbW1hbmQgPSB0aGlzLnNlcnZpY2VPcHRpb25zLnBvc3RNZXNzYWdlcy5tdXRlXG4gICAgICB0aGlzLmFjdGlvbihjb21tYW5kKVxuXG4gICAgICBpZiAodGhpcy5pc1ZrVmlkZW8gJiYgdGhpcy5jdXJyZW50UGxheWVySW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50UGxheWVySW5zdGFuY2UubXV0ZSgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgYWRkVmtWaWRlbyAoKSB7XG4gICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuICAgICAgc2NyaXB0LnNyYyA9ICdodHRwczovL3ZrLmNvbS9qcy9hcGkvdmlkZW9wbGF5ZXIuanMnXG4gICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlXG4gICAgICBzY3JpcHQub25sb2FkID0gKCkgPT4ge1xuICAgICAgICB0aGlzLm9uU2NyaXB0TG9hZGVkKClcbiAgICAgIH1cbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KVxuICAgIH1cblxuICAgIG9uU2NyaXB0TG9hZGVkICgpIHtcbiAgICAgIHRoaXMuaWZyYW1lLnNyYyA9IHRoaXMuaWZyYW1lLmdldEF0dHJpYnV0ZSgnZGF0YS1pZnJhbWUtc3JjJyk7XG5cbiAgICAgIHRoaXMuY3VycmVudFBsYXllckluc3RhbmNlID0gVksuVmlkZW9QbGF5ZXIodGhpcy5pZnJhbWUpO1xuXG4gICAgICBjb25zdCBwYXJzZWRVcmwgPSBuZXcgVVJMKHRoaXMuaWZyYW1lLnNyYyk7XG4gICAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHBhcnNlZFVybC5zZWFyY2gpO1xuICAgICAgY29uc3QgbXV0ZWRWYWx1ZSA9IHBhcmFtcy5nZXQoJ211dGVkJyk7XG5cbiAgICAgIGlmIChtdXRlZFZhbHVlID09PSAnMScpIHtcbiAgICAgICAgdGhpcy5tdXRlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW5pdCAoKSB7XG4gICAgICBpZiAodGhpcy5pc1ZrVmlkZW8pIHtcbiAgICAgICAgdGhpcy5hZGRWa1ZpZGVvKClcbiAgICAgIH1cblxuICAgICAgLy8g0YHQuNC90YXRgNC+0L3QuNC30LjRgNGD0LXQvCDQutC70LDRgdGBIHBsYXksINC90LDQv9GA0LjQvNC10YAsINC60L7Qs9C00LAg0LvQuNGB0YLQsNC10Lwg0YHQu9Cw0LnQtNC10YBcbiAgICAgIGNvbnN0IGNsYXNzT2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihjaGFuZ2VzID0+IHtcbiAgICAgICAgY2hhbmdlcy5mb3JFYWNoKCh7IHRhcmdldCB9KSA9PiB7XG4gICAgICAgICAgY29uc3QgY3VyciA9IHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3BsYXknKVxuICAgICAgICAgIGlmICh0aGlzLnBsYXlpbmcpIHtcbiAgICAgICAgICAgIGlmICghY3Vycikge1xuICAgICAgICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQoJ3BsYXknKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoY3Vycikge1xuICAgICAgICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5yZW1vdmUoJ3BsYXknKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG5cbiAgICAgIC8vINGB0LvQtdC00LjQvCDQt9CwINGB0LrRgNGL0YLQuNC10Lwv0L7RgtC+0LHRgNCw0LbQtdC90LjQtdC8INGN0LvQtdC80LXQvdGC0LBcbiAgICAgIGNvbnN0IHZpc2libGVPYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgICAgICBpZiAoZW50cmllc1swXS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgIGlmICh0aGlzLmF1dG9wbGF5VmFsdWUgJiYgIXRoaXMucGxheWluZykge1xuICAgICAgICAgICAgdGhpcy5wbGF5KClcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMucGxheWluZykge1xuICAgICAgICAgICAgdGhpcy5wYXVzZSgpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7IHRocmVzaG9sZDogMCwgcm9vdE1hcmdpbjogXCItMjAwcHggMHB4IC0yMDBweCAwcHhcIiB9KVxuXG4gICAgICBjbGFzc09ic2VydmVyLm9ic2VydmUodGhpcy5lbCwgeyBhdHRyaWJ1dGVzOiB0cnVlLCBhdHRyaWJ1dGVGaWx0ZXI6IFsnY2xhc3MnXSB9KVxuICAgICAgdmlzaWJsZU9ic2VydmVyLm9ic2VydmUodGhpcy5lbClcblxuICAgICAgdGhpcy5idXR0b24gJiYgdGhpcy5idXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgIGlmICh0aGlzLnBsYXlpbmcpIHtcbiAgICAgICAgICB0aGlzLnBhdXNlKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnBsYXkoKVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICB0aGlzLnBhdXNlKClcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKClcblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCAoZSkgPT4ge1xuICAgICAgICAvLyDQtdGB0LvQuCBpZnJhbWUg0L3QtdGCINCyIERPTSwg0YLQviDQvtGC0L/QuNGB0YvQstCw0LXQvNGB0Y8g0L7RgiBtZXNzYWdlXG4gICAgICAgIGlmICghdGhpcy5pZnJhbWUuY2xvc2VzdCgnYm9keScpKSB7XG4gICAgICAgICAgY29udHJvbGxlci5hYm9ydCgpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgLy8g0LXRgdC70LggbWVzc2FnZSDQvtGCINC90YPQttC90L7Qs9C+IGlmcmFtZVxuICAgICAgICBpZiAoZS5zb3VyY2UgPT09IHRoaXMuaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8g0JDQstGC0L7QstC+0YHQv9GA0L7QuNC30LLQtdC00LXQvdC40LUg0LLQuNC00LXQviDRgSBSdXR1YmUg0L3QsCDRgdGC0YDQsNC90LjRhtC1XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gSlNPTi5wYXJzZShlLmRhdGEpXG4gICAgICAgICAgICBpZiAodGhpcy5pc1J1dHViZVZpZGVvKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLmF1dG9wbGF5VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS50eXBlID09PSAncGxheWVyOnJlYWR5JyB8fCBtZXNzYWdlLnR5cGUgPT09ICdwbGF5ZXI6cGxheUNvbXBsZXRlJykge1xuICAgICAgICAgICAgICAgICAgdGhpcy5tdXRlKClcbiAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uKHRoaXMuc2VydmljZU9wdGlvbnMucG9zdE1lc3NhZ2VzLnBsYXkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCB7fVxuICAgICAgICB9XG4gICAgICB9LCB7IHNpZ25hbDogY29udHJvbGxlci5zaWduYWwgfSlcblxuICAgICAgLy8g0LTQu9GPIHByZXZpZXcg0LggU0VPINCw0LrRgtC40LLQuNGA0YPQtdC8IGlmcmFtZSDQv9C+0YHQu9C1INC30LDQtNC10YDQttC60LhcbiAgICAgIGlmICghdGhpcy5iYWNrZ3JvdW5kVmlkZW8gJiYgIXRoaXMucHJldmlld0RPTUVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgSUZSQU1FX0FVVE9fQUNUSVZBVElPTl9ERUxBWSA9IDI1MDBcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBpZiAoIXRoaXMuaWZyYW1lIHx8IHRoaXMuaWZyYW1lLnNyYyA9PT0gdGhpcy51cmwpIHJldHVyblxuICAgICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCgnY2xpLXZpZGVvLS1yYXcnKVxuICAgICAgICAgIHRoaXMuaWZyYW1lLnNyYyA9IHRoaXMudXJsXG4gICAgICAgIH0sIElGUkFNRV9BVVRPX0FDVElWQVRJT05fREVMQVkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIHJ1biAocm9vdEVsZW1lbnQgPSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICBjb25zdCBTRUxFQ1RPUiA9ICdbZGF0YS1zY3JpcHQ9XCJ2aWRlb1wiXSdcbiAgICAgIGNvbnN0IHZpZGVvcyA9IFsuLi5yb290RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SKV1cblxuICAgICAgdmlkZW9zLmZvckVhY2godCA9PiB7XG4gICAgICAgIGNvbnN0IHZpZGVvID0gbmV3IFZpZGVvKHQpXG4gICAgICAgIHZpZGVvLmluaXQoKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgIFZpZGVvLnJ1bigpXG4gIH0pXG5cblxuICB3aW5kb3cudXNlclNjcmlwdHMgPSB3aW5kb3cudXNlclNjcmlwdHMgfHwge31cbiAgd2luZG93LnVzZXJTY3JpcHRzLlZpZGVvID0gVmlkZW9cbn0pKClcblxuIiwiY29uc3QgSUNPTl9ORVhUID1cbiAgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBhcmlhLWxhYmVsbGVkYnk9XCJjbGktc3dpcGVyLW5leHRcIiByb2xlPVwicHJlc2VudGF0aW9uXCI+PGcgZmlsbD1cImN1cnJlbnRDb2xvclwiPjxwYXRoIGQ9XCJNMTUuMDkzIDEyTDEwLjA1NDIgNi40MDEzOUwxMC45NDYyIDUuNTk4NjNMMTYuNzA3NCAxMkwxMC45NDYyIDE4LjQwMTRMMTAuMDU0MiAxNy41OTg2TDE1LjA5MyAxMlpcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIgY2xpcC1ydWxlPVwiZXZlbm9kZFwiPjwvcGF0aD48L2c+PC9zdmc+JztcblxuY29uc3QgSUNPTl9QUkVWID1cbiAgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBhcmlhLWxhYmVsbGVkYnk9XCJjbGktc3dpcGVyLXByZXZcIiByb2xlPVwicHJlc2VudGF0aW9uXCI+PGcgZmlsbD1cImN1cnJlbnRDb2xvclwiPjxwYXRoIGQ9XCJNOC45MDcwNCAxMkwxMy45NDU4IDYuNDAxMzlMMTMuMDUzOCA1LjU5ODYzTDcuMjkyNjEgMTJMMTMuMDUzOCAxOC40MDE0TDEzLjk0NTggMTcuNTk4Nkw4LjkwNzA0IDEyWlwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBjbGlwLXJ1bGU9XCJldmVub2RkXCI+PC9wYXRoPjwvZz48L3N2Zz4nO1xuXG5jb25zdCBNQU5ZX0VMRU1FTlRTX1NXSVBFUiA9XG4gIGA8ZGl2IGNsYXNzPVwiem9vbS1wb3B1cC1zbGlkZXIgc3dpcGVyXCI+XG4gICAgPGRpdiBjbGFzcz1cInpvb20tcG9wdXAtc2xpZGVyX193cmFwcGVyIHN3aXBlci13cmFwcGVyXCI+PC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInpvb20tcG9wdXAtc2xpZGVyX19uZXh0LWNvbnRhaW5lclwiPlxuICAgICAgPGRpdiBjbGFzcz1cInpvb20tcG9wdXAtc2xpZGVyX19uZXh0IHN3aXBlci1idXR0b24tbmV4dFwiPiR7SUNPTl9ORVhUfTwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ6b29tLXBvcHVwLXNsaWRlcl9fcHJldi1jb250YWluZXJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ6b29tLXBvcHVwLXNsaWRlcl9fcHJldiBzd2lwZXItYnV0dG9uLXByZXZcIj4ke0lDT05fUFJFVn08L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiem9vbS1wb3B1cC1zbGlkZXJfX3BhZ2luYXRpb24gc3dpcGVyLXBhZ2luYXRpb25cIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiem9vbS1wb3B1cF9fc3ZnLXdyYXBwZXJcIj48L2Rpdj5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJ6b29tLXBvcHVwX19jbG9zZS1jb250YWluZXJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiem9vbS1wb3B1cF9fY2xvc2VcIj48L2Rpdj5cbiAgPC9kaXY+YDtcblxuY29uc3QgT05FX0VMRU1FTlRfU1dJUEVSID1cbiAgYDxkaXYgY2xhc3M9XCJ6b29tLXBvcHVwLXNsaWRlciBzd2lwZXJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiem9vbS1wb3B1cC1zbGlkZXJfX3dyYXBwZXIgc3dpcGVyLXdyYXBwZXJcIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiem9vbS1wb3B1cF9fc3ZnLXdyYXBwZXJcIj48L2Rpdj5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJ6b29tLXBvcHVwX19jbG9zZS1jb250YWluZXJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiem9vbS1wb3B1cF9fY2xvc2VcIj48L2Rpdj5cbiAgPC9kaXY+YDtcblxuY29uc3QgTUFOWV9FTEVNRU5UU19PUFRJT05TID0ge1xuICBwYWdpbmF0aW9uOiB7XG4gICAgZWw6IFwiLnN3aXBlci1wYWdpbmF0aW9uXCIsXG4gICAgZHluYW1pY0J1bGxldHM6IHRydWUsXG4gICAgZHluYW1pY01haW5CdWxsZXRzOiA3LFxuICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgfSxcbiAgbmF2aWdhdGlvbjoge1xuICAgIG5leHRFbDogXCIuem9vbS1wb3B1cC1zbGlkZXJfX25leHQtY29udGFpbmVyXCIsXG4gICAgcHJldkVsOiBcIi56b29tLXBvcHVwLXNsaWRlcl9fcHJldi1jb250YWluZXJcIixcbiAgfSxcbiAgbG9vcDogdHJ1ZSxcbn07XG5cbihmdW5jdGlvbiAoKSB7XG4gIGNsYXNzIFpvb21Qb3B1cCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLnBvcHVwID0gbnVsbFxuICAgICAgdGhpcy5zd2lwZXIgPSBudWxsXG4gICAgICB0aGlzLmhpZGVIYW5kbGVyID0gKGUpID0+IHRoaXMuaGlkZShlLnRhcmdldClcbiAgICB9XG5cbiAgICBjcmVhdGUoKSB7XG4gICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3pvb20tcG9wdXAnKVxuICAgICAgY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgIHRoaXMucG9wdXAgPSBjb250YWluZXJcbiAgICAgIHJldHVybiBjb250YWluZXJcbiAgICB9XG5cbiAgICBjcmVhdGVTbGlkZXIodGFyZ2V0KSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSB0YXJnZXQuY2xvc2VzdCgnc2VjdGlvbicpXG4gICAgICBjb25zdCBpbWFnZXMgPSBwYXJlbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtem9vbT1cInRydWVcIl0nKVxuICAgICAgY29uc3Qgc2xpZGVyUGFnaW5hdGlvbiA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1kZXNpZ24tdHlwZT1cInNsaWRlci1wYWdpbmF0aW9uXCJdJylcbiAgICAgIGxldCBvcHRpb25zID0ge31cbiAgICAgIGlmIChpbWFnZXMubGVuZ3RoID4gMSkge1xuICAgICAgICBvcHRpb25zID0gTUFOWV9FTEVNRU5UU19PUFRJT05TXG4gICAgICAgIHRoaXMucG9wdXAuaW5uZXJIVE1MID0gTUFOWV9FTEVNRU5UU19TV0lQRVJcbiAgICAgICAgaWYgKHNsaWRlclBhZ2luYXRpb24pIHRoaXMucG9wdXAucXVlcnlTZWxlY3RvcignLnpvb20tcG9wdXAtc2xpZGVyX19wYWdpbmF0aW9uJykuaWQgPSBzbGlkZXJQYWdpbmF0aW9uLmlkXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBvcHVwLmlubmVySFRNTCA9IE9ORV9FTEVNRU5UX1NXSVBFUlxuICAgICAgfVxuICAgICAgY29uc3Qgc2xpZGVzID0gQXJyYXkuZnJvbShpbWFnZXMpLm1hcChpbWFnZSA9PiB7XG4gICAgICAgIGNvbnN0IHsgc3JjLCBhbHQgfSA9IGltYWdlXG4gICAgICAgIGNvbnN0IHRpdGxlID0gaW1hZ2UuZ2V0QXR0cmlidXRlKCdkYXRhLXpvb20tdGl0bGUnKVxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVTbGlkZShzcmMsIGFsdCwgdGl0bGUpXG4gICAgICB9KVxuICAgICAgY29uc3Qgc3dpcGVyV3JhcHBlciA9IHRoaXMucG9wdXAucXVlcnlTZWxlY3RvcignLnN3aXBlci13cmFwcGVyJylcbiAgICAgIHNsaWRlcy5mb3JFYWNoKHNsaWRlID0+IHN3aXBlcldyYXBwZXIuYXBwZW5kQ2hpbGQoc2xpZGUpKVxuICAgICAgdGhpcy5zd2lwZXIgPSBuZXcgU3dpcGVyKHRoaXMucG9wdXAucXVlcnlTZWxlY3RvcignLnN3aXBlcicpLCBvcHRpb25zKVxuICAgICAgdGhpcy5zd2lwZXIuc2xpZGVUb0xvb3AoQXJyYXkuZnJvbShpbWFnZXMpLmluZGV4T2YodGFyZ2V0KSlcbiAgICB9XG5cbiAgICBjcmVhdGVTbGlkZSAoc3JjLCBhbHQsIHRpdGxlID0gJycpIHtcbiAgICAgIGNvbnN0IHNsaWRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIHNsaWRlLmNsYXNzTmFtZSA9ICd6b29tLXBvcHVwLXNsaWRlcl9fc2xpZGUgc3dpcGVyLXNsaWRlJ1xuXG4gICAgICBjb25zdCBpbWFnZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ZpZ3VyZScpXG4gICAgICBpbWFnZUNvbnRhaW5lci5jbGFzc05hbWUgPSAnem9vbS1wb3B1cC1zbGlkZXJfX2ltYWdlJ1xuXG4gICAgICBjb25zdCBpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpXG4gICAgICBpbWFnZS5zcmMgPSBzcmNcbiAgICAgIGltYWdlLmFsdCA9IGFsdFxuXG4gICAgICBpbWFnZUNvbnRhaW5lci5hcHBlbmRDaGlsZChpbWFnZSlcblxuICAgICAgaWYgKHRpdGxlKSB7XG4gICAgICAgIGNvbnN0IGZpZ2NhcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmaWdjYXB0aW9uJylcbiAgICAgICAgZmlnY2FwdGlvbi50ZXh0Q29udGVudCA9IHRpdGxlXG4gICAgICAgIGZpZ2NhcHRpb24uY2xhc3NMaXN0LmFkZCgnem9vbS1wb3B1cC1zbGlkZXJfX3RpdGxlJylcbiAgICAgICAgaW1hZ2VDb250YWluZXIuYXBwZW5kQ2hpbGQoZmlnY2FwdGlvbilcbiAgICAgIH1cblxuXG4gICAgICBzbGlkZS5hcHBlbmRDaGlsZChpbWFnZUNvbnRhaW5lcilcblxuICAgICAgcmV0dXJuIHNsaWRlXG4gICAgfVxuXG4gICAgc2hvdyh0YXJnZXQpIHtcbiAgICAgIHRoaXMuY3JlYXRlU2xpZGVyKHRhcmdldClcbiAgICAgIHRoaXMucG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhpZGVIYW5kbGVyKVxuICAgICAgdGhpcy5wb3B1cC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnXG4gICAgfVxuXG4gICAgaGlkZSh0YXJnZXQpIHtcbiAgICAgIGNvbnN0IGlzQ2xvc2VCdXR0b24gPSB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd6b29tLXBvcHVwX19jbG9zZScpXG4gICAgICBjb25zdCBpc0Nsb3NlQ29udGFpbmVyID0gdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnem9vbS1wb3B1cF9fY2xvc2UtY29udGFpbmVyJylcbiAgICAgIGlmICghaXNDbG9zZUNvbnRhaW5lciAmJiAhaXNDbG9zZUJ1dHRvbikgcmV0dXJuXG4gICAgICB0aGlzLnBvcHVwLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgIHRoaXMuc3dpcGVyLmRlc3Ryb3koZmFsc2UsIGZhbHNlKVxuICAgICAgdGhpcy5wb3B1cC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGlkZUhhbmRsZXIpXG4gICAgfVxuXG4gICAgc3RhdGljIGRlc3Ryb3koKSB7XG4gICAgICBjb25zdCBwb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy56b29tLXBvcHVwJylcbiAgICAgIGlmIChwb3B1cCkgcG9wdXAucmVtb3ZlKClcbiAgICB9XG4gIH1cblxuICBjbGFzcyBab29tT25DbGljayB7XG4gICAgY29uc3RydWN0b3IoZWwsIHBvcHVwKSB7XG4gICAgICB0aGlzLmVsID0gZWxcbiAgICAgIHRoaXMucG9wdXAgPSBwb3B1cFxuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgdGhpcy5wb3B1cC5zaG93KGUudGFyZ2V0KVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHJ1biAocm9vdEVsZW1lbnQgPSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICBjb25zdCBTRUxFQ1RPUiA9ICdbZGF0YS16b29tPVwidHJ1ZVwiXSdcbiAgICAgIGNvbnN0IGltYWdlcyA9IFsuLi5yb290RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SKV1cblxuICAgICAgaWYgKGltYWdlcy5sZW5ndGggPT09IDApIHJldHVyblxuXG4gICAgICBjb25zdCBwb3B1cCA9IG5ldyBab29tUG9wdXAoKVxuICAgICAgY29uc3QgZWwgPSBwb3B1cC5jcmVhdGUoKVxuICAgICAgcm9vdEVsZW1lbnQuYXBwZW5kQ2hpbGQoZWwpXG5cbiAgICAgIGltYWdlcy5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBuZXcgWm9vbU9uQ2xpY2sodCwgcG9wdXApXG4gICAgICAgIGl0ZW0uaW5pdCgpXG4gICAgICB9KVxuICAgIH1cblxuICAgIHN0YXRpYyBzdG9wKCkge1xuICAgICAgWm9vbVBvcHVwLmRlc3Ryb3koKVxuICAgIH1cbiAgfVxuXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gICAgWm9vbU9uQ2xpY2sucnVuKClcbiAgfSlcblxuICB3aW5kb3cudXNlclNjcmlwdHMgPSB3aW5kb3cudXNlclNjcmlwdHMgfHwge31cbiAgd2luZG93LnVzZXJTY3JpcHRzLlpvb21PbkNsaWNrID0gWm9vbU9uQ2xpY2tcbn1cbikoKVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbm1vZHVsZS5leHBvcnRzLm9uY2UgPSBvbmNlO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gX2dldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9IF9nZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gb25jZShlbWl0dGVyLCBuYW1lKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnVuY3Rpb24gZXJyb3JMaXN0ZW5lcihlcnIpIHtcbiAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIobmFtZSwgcmVzb2x2ZXIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZXIoKSB7XG4gICAgICBpZiAodHlwZW9mIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9O1xuXG4gICAgZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIHJlc29sdmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgaWYgKG5hbWUgIT09ICdlcnJvcicpIHtcbiAgICAgIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGVycm9yTGlzdGVuZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlbWl0dGVyLCBoYW5kbGVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgJ2Vycm9yJywgaGFuZGxlciwgZmxhZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCBuYW1lLCBsaXN0ZW5lciwgZmxhZ3MpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgIGVtaXR0ZXIub25jZShuYW1lLCBsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVtaXR0ZXIub24obmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gRXZlbnRUYXJnZXQgZG9lcyBub3QgaGF2ZSBgZXJyb3JgIGV2ZW50IHNlbWFudGljcyBsaWtlIE5vZGVcbiAgICAvLyBFdmVudEVtaXR0ZXJzLCB3ZSBkbyBub3QgbGlzdGVuIGZvciBgZXJyb3JgIGV2ZW50cyBoZXJlLlxuICAgIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBmdW5jdGlvbiB3cmFwTGlzdGVuZXIoYXJnKSB7XG4gICAgICAvLyBJRSBkb2VzIG5vdCBoYXZlIGJ1aWx0aW4gYHsgb25jZTogdHJ1ZSB9YCBzdXBwb3J0IHNvIHdlXG4gICAgICAvLyBoYXZlIHRvIGRvIGl0IG1hbnVhbGx5LlxuICAgICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIHdyYXBMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICBsaXN0ZW5lcihhcmcpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImVtaXR0ZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRXZlbnRFbWl0dGVyLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgZW1pdHRlcik7XG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBuYW1lZF9yZWZlcmVuY2VzXzEgPSByZXF1aXJlKFwiLi9uYW1lZC1yZWZlcmVuY2VzXCIpO1xudmFyIG51bWVyaWNfdW5pY29kZV9tYXBfMSA9IHJlcXVpcmUoXCIuL251bWVyaWMtdW5pY29kZS1tYXBcIik7XG52YXIgc3Vycm9nYXRlX3BhaXJzXzEgPSByZXF1aXJlKFwiLi9zdXJyb2dhdGUtcGFpcnNcIik7XG52YXIgYWxsTmFtZWRSZWZlcmVuY2VzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG5hbWVkX3JlZmVyZW5jZXNfMS5uYW1lZFJlZmVyZW5jZXMpLCB7IGFsbDogbmFtZWRfcmVmZXJlbmNlc18xLm5hbWVkUmVmZXJlbmNlcy5odG1sNSB9KTtcbnZhciBlbmNvZGVSZWdFeHBzID0ge1xuICAgIHNwZWNpYWxDaGFyczogL1s8PidcIiZdL2csXG4gICAgbm9uQXNjaWk6IC9bPD4nXCImXFx1MDA4MC1cXHVEN0ZGXFx1RTAwMC1cXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdL2csXG4gICAgbm9uQXNjaWlQcmludGFibGU6IC9bPD4nXCImXFx4MDEtXFx4MDhcXHgxMS1cXHgxNVxceDE3LVxceDFGXFx4N2YtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXS9nLFxuICAgIG5vbkFzY2lpUHJpbnRhYmxlT25seTogL1tcXHgwMS1cXHgwOFxceDExLVxceDE1XFx4MTctXFx4MUZcXHg3Zi1cXHVEN0ZGXFx1RTAwMC1cXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdL2csXG4gICAgZXh0ZW5zaXZlOiAvW1xceDAxLVxceDBjXFx4MGUtXFx4MWZcXHgyMS1cXHgyY1xceDJlLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdkXFx4N2YtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXS9nXG59O1xudmFyIGRlZmF1bHRFbmNvZGVPcHRpb25zID0ge1xuICAgIG1vZGU6ICdzcGVjaWFsQ2hhcnMnLFxuICAgIGxldmVsOiAnYWxsJyxcbiAgICBudW1lcmljOiAnZGVjaW1hbCdcbn07XG4vKiogRW5jb2RlcyBhbGwgdGhlIG5lY2Vzc2FyeSAoc3BlY2lmaWVkIGJ5IGBsZXZlbGApIGNoYXJhY3RlcnMgaW4gdGhlIHRleHQgKi9cbmZ1bmN0aW9uIGVuY29kZSh0ZXh0LCBfYSkge1xuICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyBkZWZhdWx0RW5jb2RlT3B0aW9ucyA6IF9hLCBfYyA9IF9iLm1vZGUsIG1vZGUgPSBfYyA9PT0gdm9pZCAwID8gJ3NwZWNpYWxDaGFycycgOiBfYywgX2QgPSBfYi5udW1lcmljLCBudW1lcmljID0gX2QgPT09IHZvaWQgMCA/ICdkZWNpbWFsJyA6IF9kLCBfZSA9IF9iLmxldmVsLCBsZXZlbCA9IF9lID09PSB2b2lkIDAgPyAnYWxsJyA6IF9lO1xuICAgIGlmICghdGV4dCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHZhciBlbmNvZGVSZWdFeHAgPSBlbmNvZGVSZWdFeHBzW21vZGVdO1xuICAgIHZhciByZWZlcmVuY2VzID0gYWxsTmFtZWRSZWZlcmVuY2VzW2xldmVsXS5jaGFyYWN0ZXJzO1xuICAgIHZhciBpc0hleCA9IG51bWVyaWMgPT09ICdoZXhhZGVjaW1hbCc7XG4gICAgZW5jb2RlUmVnRXhwLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIF9iID0gZW5jb2RlUmVnRXhwLmV4ZWModGV4dCk7XG4gICAgdmFyIF9jO1xuICAgIGlmIChfYikge1xuICAgICAgICBfYyA9ICcnO1xuICAgICAgICB2YXIgX2QgPSAwO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoX2QgIT09IF9iLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgX2MgKz0gdGV4dC5zdWJzdHJpbmcoX2QsIF9iLmluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfZSA9IF9iWzBdO1xuICAgICAgICAgICAgdmFyIHJlc3VsdF8xID0gcmVmZXJlbmNlc1tfZV07XG4gICAgICAgICAgICBpZiAoIXJlc3VsdF8xKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGVfMSA9IF9lLmxlbmd0aCA+IDEgPyBzdXJyb2dhdGVfcGFpcnNfMS5nZXRDb2RlUG9pbnQoX2UsIDApIDogX2UuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICByZXN1bHRfMSA9IChpc0hleCA/ICcmI3gnICsgY29kZV8xLnRvU3RyaW5nKDE2KSA6ICcmIycgKyBjb2RlXzEpICsgJzsnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX2MgKz0gcmVzdWx0XzE7XG4gICAgICAgICAgICBfZCA9IF9iLmluZGV4ICsgX2UubGVuZ3RoO1xuICAgICAgICB9IHdoaWxlICgoX2IgPSBlbmNvZGVSZWdFeHAuZXhlYyh0ZXh0KSkpO1xuICAgICAgICBpZiAoX2QgIT09IHRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICBfYyArPSB0ZXh0LnN1YnN0cmluZyhfZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIF9jID1cbiAgICAgICAgICAgIHRleHQ7XG4gICAgfVxuICAgIHJldHVybiBfYztcbn1cbmV4cG9ydHMuZW5jb2RlID0gZW5jb2RlO1xudmFyIGRlZmF1bHREZWNvZGVPcHRpb25zID0ge1xuICAgIHNjb3BlOiAnYm9keScsXG4gICAgbGV2ZWw6ICdhbGwnXG59O1xudmFyIHN0cmljdCA9IC8mKD86I1xcZCt8I1t4WF1bXFxkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTsvZztcbnZhciBhdHRyaWJ1dGUgPSAvJig/OiNcXGQrfCNbeFhdW1xcZGEtZkEtRl0rfFswLTlhLXpBLVpdKylbOz1dPy9nO1xudmFyIGJhc2VEZWNvZGVSZWdFeHBzID0ge1xuICAgIHhtbDoge1xuICAgICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgICAgYXR0cmlidXRlOiBhdHRyaWJ1dGUsXG4gICAgICAgIGJvZHk6IG5hbWVkX3JlZmVyZW5jZXNfMS5ib2R5UmVnRXhwcy54bWxcbiAgICB9LFxuICAgIGh0bWw0OiB7XG4gICAgICAgIHN0cmljdDogc3RyaWN0LFxuICAgICAgICBhdHRyaWJ1dGU6IGF0dHJpYnV0ZSxcbiAgICAgICAgYm9keTogbmFtZWRfcmVmZXJlbmNlc18xLmJvZHlSZWdFeHBzLmh0bWw0XG4gICAgfSxcbiAgICBodG1sNToge1xuICAgICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgICAgYXR0cmlidXRlOiBhdHRyaWJ1dGUsXG4gICAgICAgIGJvZHk6IG5hbWVkX3JlZmVyZW5jZXNfMS5ib2R5UmVnRXhwcy5odG1sNVxuICAgIH1cbn07XG52YXIgZGVjb2RlUmVnRXhwcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBiYXNlRGVjb2RlUmVnRXhwcyksIHsgYWxsOiBiYXNlRGVjb2RlUmVnRXhwcy5odG1sNSB9KTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyIG91dE9mQm91bmRzQ2hhciA9IGZyb21DaGFyQ29kZSg2NTUzMyk7XG52YXIgZGVmYXVsdERlY29kZUVudGl0eU9wdGlvbnMgPSB7XG4gICAgbGV2ZWw6ICdhbGwnXG59O1xuLyoqIERlY29kZXMgYSBzaW5nbGUgZW50aXR5ICovXG5mdW5jdGlvbiBkZWNvZGVFbnRpdHkoZW50aXR5LCBfYSkge1xuICAgIHZhciBfYiA9IChfYSA9PT0gdm9pZCAwID8gZGVmYXVsdERlY29kZUVudGl0eU9wdGlvbnMgOiBfYSkubGV2ZWwsIGxldmVsID0gX2IgPT09IHZvaWQgMCA/ICdhbGwnIDogX2I7XG4gICAgaWYgKCFlbnRpdHkpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICB2YXIgX2IgPSBlbnRpdHk7XG4gICAgdmFyIGRlY29kZUVudGl0eUxhc3RDaGFyXzEgPSBlbnRpdHlbZW50aXR5Lmxlbmd0aCAtIDFdO1xuICAgIGlmIChmYWxzZVxuICAgICAgICAmJiBkZWNvZGVFbnRpdHlMYXN0Q2hhcl8xID09PSAnPScpIHtcbiAgICAgICAgX2IgPVxuICAgICAgICAgICAgZW50aXR5O1xuICAgIH1cbiAgICBlbHNlIGlmIChmYWxzZVxuICAgICAgICAmJiBkZWNvZGVFbnRpdHlMYXN0Q2hhcl8xICE9PSAnOycpIHtcbiAgICAgICAgX2IgPVxuICAgICAgICAgICAgZW50aXR5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlXzEgPSBhbGxOYW1lZFJlZmVyZW5jZXNbbGV2ZWxdLmVudGl0aWVzW2VudGl0eV07XG4gICAgICAgIGlmIChkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8xKSB7XG4gICAgICAgICAgICBfYiA9IGRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlXzE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZW50aXR5WzBdID09PSAnJicgJiYgZW50aXR5WzFdID09PSAnIycpIHtcbiAgICAgICAgICAgIHZhciBkZWNvZGVTZWNvbmRDaGFyXzEgPSBlbnRpdHlbMl07XG4gICAgICAgICAgICB2YXIgZGVjb2RlQ29kZV8xID0gZGVjb2RlU2Vjb25kQ2hhcl8xID09ICd4JyB8fCBkZWNvZGVTZWNvbmRDaGFyXzEgPT0gJ1gnXG4gICAgICAgICAgICAgICAgPyBwYXJzZUludChlbnRpdHkuc3Vic3RyKDMpLCAxNilcbiAgICAgICAgICAgICAgICA6IHBhcnNlSW50KGVudGl0eS5zdWJzdHIoMikpO1xuICAgICAgICAgICAgX2IgPVxuICAgICAgICAgICAgICAgIGRlY29kZUNvZGVfMSA+PSAweDEwZmZmZlxuICAgICAgICAgICAgICAgICAgICA/IG91dE9mQm91bmRzQ2hhclxuICAgICAgICAgICAgICAgICAgICA6IGRlY29kZUNvZGVfMSA+IDY1NTM1XG4gICAgICAgICAgICAgICAgICAgICAgICA/IHN1cnJvZ2F0ZV9wYWlyc18xLmZyb21Db2RlUG9pbnQoZGVjb2RlQ29kZV8xKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBmcm9tQ2hhckNvZGUobnVtZXJpY191bmljb2RlX21hcF8xLm51bWVyaWNVbmljb2RlTWFwW2RlY29kZUNvZGVfMV0gfHwgZGVjb2RlQ29kZV8xKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX2I7XG59XG5leHBvcnRzLmRlY29kZUVudGl0eSA9IGRlY29kZUVudGl0eTtcbi8qKiBEZWNvZGVzIGFsbCBlbnRpdGllcyBpbiB0aGUgdGV4dCAqL1xuZnVuY3Rpb24gZGVjb2RlKHRleHQsIF9hKSB7XG4gICAgdmFyIGRlY29kZVNlY29uZENoYXJfMSA9IF9hID09PSB2b2lkIDAgPyBkZWZhdWx0RGVjb2RlT3B0aW9ucyA6IF9hLCBkZWNvZGVDb2RlXzEgPSBkZWNvZGVTZWNvbmRDaGFyXzEubGV2ZWwsIGxldmVsID0gZGVjb2RlQ29kZV8xID09PSB2b2lkIDAgPyAnYWxsJyA6IGRlY29kZUNvZGVfMSwgX2IgPSBkZWNvZGVTZWNvbmRDaGFyXzEuc2NvcGUsIHNjb3BlID0gX2IgPT09IHZvaWQgMCA/IGxldmVsID09PSAneG1sJyA/ICdzdHJpY3QnIDogJ2JvZHknIDogX2I7XG4gICAgaWYgKCF0ZXh0KSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIGRlY29kZVJlZ0V4cCA9IGRlY29kZVJlZ0V4cHNbbGV2ZWxdW3Njb3BlXTtcbiAgICB2YXIgcmVmZXJlbmNlcyA9IGFsbE5hbWVkUmVmZXJlbmNlc1tsZXZlbF0uZW50aXRpZXM7XG4gICAgdmFyIGlzQXR0cmlidXRlID0gc2NvcGUgPT09ICdhdHRyaWJ1dGUnO1xuICAgIHZhciBpc1N0cmljdCA9IHNjb3BlID09PSAnc3RyaWN0JztcbiAgICBkZWNvZGVSZWdFeHAubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgcmVwbGFjZU1hdGNoXzEgPSBkZWNvZGVSZWdFeHAuZXhlYyh0ZXh0KTtcbiAgICB2YXIgcmVwbGFjZVJlc3VsdF8xO1xuICAgIGlmIChyZXBsYWNlTWF0Y2hfMSkge1xuICAgICAgICByZXBsYWNlUmVzdWx0XzEgPSAnJztcbiAgICAgICAgdmFyIHJlcGxhY2VMYXN0SW5kZXhfMSA9IDA7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChyZXBsYWNlTGFzdEluZGV4XzEgIT09IHJlcGxhY2VNYXRjaF8xLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmVwbGFjZVJlc3VsdF8xICs9IHRleHQuc3Vic3RyaW5nKHJlcGxhY2VMYXN0SW5kZXhfMSwgcmVwbGFjZU1hdGNoXzEuaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlcGxhY2VJbnB1dF8xID0gcmVwbGFjZU1hdGNoXzFbMF07XG4gICAgICAgICAgICB2YXIgZGVjb2RlUmVzdWx0XzEgPSByZXBsYWNlSW5wdXRfMTtcbiAgICAgICAgICAgIHZhciBkZWNvZGVFbnRpdHlMYXN0Q2hhcl8yID0gcmVwbGFjZUlucHV0XzFbcmVwbGFjZUlucHV0XzEubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAoaXNBdHRyaWJ1dGVcbiAgICAgICAgICAgICAgICAmJiBkZWNvZGVFbnRpdHlMYXN0Q2hhcl8yID09PSAnPScpIHtcbiAgICAgICAgICAgICAgICBkZWNvZGVSZXN1bHRfMSA9IHJlcGxhY2VJbnB1dF8xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNTdHJpY3RcbiAgICAgICAgICAgICAgICAmJiBkZWNvZGVFbnRpdHlMYXN0Q2hhcl8yICE9PSAnOycpIHtcbiAgICAgICAgICAgICAgICBkZWNvZGVSZXN1bHRfMSA9IHJlcGxhY2VJbnB1dF8xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlXzIgPSByZWZlcmVuY2VzW3JlcGxhY2VJbnB1dF8xXTtcbiAgICAgICAgICAgICAgICBpZiAoZGVjb2RlUmVzdWx0QnlSZWZlcmVuY2VfMikge1xuICAgICAgICAgICAgICAgICAgICBkZWNvZGVSZXN1bHRfMSA9IGRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlXzI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlcGxhY2VJbnB1dF8xWzBdID09PSAnJicgJiYgcmVwbGFjZUlucHV0XzFbMV0gPT09ICcjJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVjb2RlU2Vjb25kQ2hhcl8yID0gcmVwbGFjZUlucHV0XzFbMl07XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWNvZGVDb2RlXzIgPSBkZWNvZGVTZWNvbmRDaGFyXzIgPT0gJ3gnIHx8IGRlY29kZVNlY29uZENoYXJfMiA9PSAnWCdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcGFyc2VJbnQocmVwbGFjZUlucHV0XzEuc3Vic3RyKDMpLCAxNilcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcGFyc2VJbnQocmVwbGFjZUlucHV0XzEuc3Vic3RyKDIpKTtcbiAgICAgICAgICAgICAgICAgICAgZGVjb2RlUmVzdWx0XzEgPVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVjb2RlQ29kZV8yID49IDB4MTBmZmZmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvdXRPZkJvdW5kc0NoYXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGRlY29kZUNvZGVfMiA+IDY1NTM1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gc3Vycm9nYXRlX3BhaXJzXzEuZnJvbUNvZGVQb2ludChkZWNvZGVDb2RlXzIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZnJvbUNoYXJDb2RlKG51bWVyaWNfdW5pY29kZV9tYXBfMS5udW1lcmljVW5pY29kZU1hcFtkZWNvZGVDb2RlXzJdIHx8IGRlY29kZUNvZGVfMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVwbGFjZVJlc3VsdF8xICs9IGRlY29kZVJlc3VsdF8xO1xuICAgICAgICAgICAgcmVwbGFjZUxhc3RJbmRleF8xID0gcmVwbGFjZU1hdGNoXzEuaW5kZXggKyByZXBsYWNlSW5wdXRfMS5sZW5ndGg7XG4gICAgICAgIH0gd2hpbGUgKChyZXBsYWNlTWF0Y2hfMSA9IGRlY29kZVJlZ0V4cC5leGVjKHRleHQpKSk7XG4gICAgICAgIGlmIChyZXBsYWNlTGFzdEluZGV4XzEgIT09IHRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXBsYWNlUmVzdWx0XzEgKz0gdGV4dC5zdWJzdHJpbmcocmVwbGFjZUxhc3RJbmRleF8xKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVwbGFjZVJlc3VsdF8xID1cbiAgICAgICAgICAgIHRleHQ7XG4gICAgfVxuICAgIHJldHVybiByZXBsYWNlUmVzdWx0XzE7XG59XG5leHBvcnRzLmRlY29kZSA9IGRlY29kZTtcbiIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5ib2R5UmVnRXhwcz17eG1sOi8mKD86I1xcZCt8I1t4WF1bXFxkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTs/L2csaHRtbDQ6LyZub3Rpbjt8Jig/Om5ic3B8aWV4Y2x8Y2VudHxwb3VuZHxjdXJyZW58eWVufGJydmJhcnxzZWN0fHVtbHxjb3B5fG9yZGZ8bGFxdW98bm90fHNoeXxyZWd8bWFjcnxkZWd8cGx1c21ufHN1cDJ8c3VwM3xhY3V0ZXxtaWNyb3xwYXJhfG1pZGRvdHxjZWRpbHxzdXAxfG9yZG18cmFxdW98ZnJhYzE0fGZyYWMxMnxmcmFjMzR8aXF1ZXN0fEFncmF2ZXxBYWN1dGV8QWNpcmN8QXRpbGRlfEF1bWx8QXJpbmd8QUVsaWd8Q2NlZGlsfEVncmF2ZXxFYWN1dGV8RWNpcmN8RXVtbHxJZ3JhdmV8SWFjdXRlfEljaXJjfEl1bWx8RVRIfE50aWxkZXxPZ3JhdmV8T2FjdXRlfE9jaXJjfE90aWxkZXxPdW1sfHRpbWVzfE9zbGFzaHxVZ3JhdmV8VWFjdXRlfFVjaXJjfFV1bWx8WWFjdXRlfFRIT1JOfHN6bGlnfGFncmF2ZXxhYWN1dGV8YWNpcmN8YXRpbGRlfGF1bWx8YXJpbmd8YWVsaWd8Y2NlZGlsfGVncmF2ZXxlYWN1dGV8ZWNpcmN8ZXVtbHxpZ3JhdmV8aWFjdXRlfGljaXJjfGl1bWx8ZXRofG50aWxkZXxvZ3JhdmV8b2FjdXRlfG9jaXJjfG90aWxkZXxvdW1sfGRpdmlkZXxvc2xhc2h8dWdyYXZlfHVhY3V0ZXx1Y2lyY3x1dW1sfHlhY3V0ZXx0aG9ybnx5dW1sfHF1b3R8YW1wfGx0fGd0fCNcXGQrfCNbeFhdW1xcZGEtZkEtRl0rfFswLTlhLXpBLVpdKyk7Py9nLGh0bWw1Oi8mY2VudGVyZG90O3wmY29weXNyO3wmZGl2aWRlb250aW1lczt8Jmd0Y2M7fCZndGNpcjt8Jmd0ZG90O3wmZ3RsUGFyO3wmZ3RxdWVzdDt8Jmd0cmFwcHJveDt8Jmd0cmFycjt8Jmd0cmRvdDt8Jmd0cmVxbGVzczt8Jmd0cmVxcWxlc3M7fCZndHJsZXNzO3wmZ3Ryc2ltO3wmbHRjYzt8Jmx0Y2lyO3wmbHRkb3Q7fCZsdGhyZWU7fCZsdGltZXM7fCZsdGxhcnI7fCZsdHF1ZXN0O3wmbHRyUGFyO3wmbHRyaTt8Jmx0cmllO3wmbHRyaWY7fCZub3Rpbjt8Jm5vdGluRTt8Jm5vdGluZG90O3wmbm90aW52YTt8Jm5vdGludmI7fCZub3RpbnZjO3wmbm90bmk7fCZub3RuaXZhO3wmbm90bml2Yjt8Jm5vdG5pdmM7fCZwYXJhbGxlbDt8JnRpbWVzYjt8JnRpbWVzYmFyO3wmdGltZXNkO3wmKD86QUVsaWd8QU1QfEFhY3V0ZXxBY2lyY3xBZ3JhdmV8QXJpbmd8QXRpbGRlfEF1bWx8Q09QWXxDY2VkaWx8RVRIfEVhY3V0ZXxFY2lyY3xFZ3JhdmV8RXVtbHxHVHxJYWN1dGV8SWNpcmN8SWdyYXZlfEl1bWx8TFR8TnRpbGRlfE9hY3V0ZXxPY2lyY3xPZ3JhdmV8T3NsYXNofE90aWxkZXxPdW1sfFFVT1R8UkVHfFRIT1JOfFVhY3V0ZXxVY2lyY3xVZ3JhdmV8VXVtbHxZYWN1dGV8YWFjdXRlfGFjaXJjfGFjdXRlfGFlbGlnfGFncmF2ZXxhbXB8YXJpbmd8YXRpbGRlfGF1bWx8YnJ2YmFyfGNjZWRpbHxjZWRpbHxjZW50fGNvcHl8Y3VycmVufGRlZ3xkaXZpZGV8ZWFjdXRlfGVjaXJjfGVncmF2ZXxldGh8ZXVtbHxmcmFjMTJ8ZnJhYzE0fGZyYWMzNHxndHxpYWN1dGV8aWNpcmN8aWV4Y2x8aWdyYXZlfGlxdWVzdHxpdW1sfGxhcXVvfGx0fG1hY3J8bWljcm98bWlkZG90fG5ic3B8bm90fG50aWxkZXxvYWN1dGV8b2NpcmN8b2dyYXZlfG9yZGZ8b3JkbXxvc2xhc2h8b3RpbGRlfG91bWx8cGFyYXxwbHVzbW58cG91bmR8cXVvdHxyYXF1b3xyZWd8c2VjdHxzaHl8c3VwMXxzdXAyfHN1cDN8c3psaWd8dGhvcm58dGltZXN8dWFjdXRlfHVjaXJjfHVncmF2ZXx1bWx8dXVtbHx5YWN1dGV8eWVufHl1bWx8I1xcZCt8I1t4WF1bXFxkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTs/L2d9O2V4cG9ydHMubmFtZWRSZWZlcmVuY2VzPXt4bWw6e2VudGl0aWVzOntcIiZsdDtcIjpcIjxcIixcIiZndDtcIjpcIj5cIixcIiZxdW90O1wiOidcIicsXCImYXBvcztcIjpcIidcIixcIiZhbXA7XCI6XCImXCJ9LGNoYXJhY3RlcnM6e1wiPFwiOlwiJmx0O1wiLFwiPlwiOlwiJmd0O1wiLCdcIic6XCImcXVvdDtcIixcIidcIjpcIiZhcG9zO1wiLFwiJlwiOlwiJmFtcDtcIn19LGh0bWw0OntlbnRpdGllczp7XCImYXBvcztcIjpcIidcIixcIiZuYnNwXCI6XCLCoFwiLFwiJm5ic3A7XCI6XCLCoFwiLFwiJmlleGNsXCI6XCLCoVwiLFwiJmlleGNsO1wiOlwiwqFcIixcIiZjZW50XCI6XCLColwiLFwiJmNlbnQ7XCI6XCLColwiLFwiJnBvdW5kXCI6XCLCo1wiLFwiJnBvdW5kO1wiOlwiwqNcIixcIiZjdXJyZW5cIjpcIsKkXCIsXCImY3VycmVuO1wiOlwiwqRcIixcIiZ5ZW5cIjpcIsKlXCIsXCImeWVuO1wiOlwiwqVcIixcIiZicnZiYXJcIjpcIsKmXCIsXCImYnJ2YmFyO1wiOlwiwqZcIixcIiZzZWN0XCI6XCLCp1wiLFwiJnNlY3Q7XCI6XCLCp1wiLFwiJnVtbFwiOlwiwqhcIixcIiZ1bWw7XCI6XCLCqFwiLFwiJmNvcHlcIjpcIsKpXCIsXCImY29weTtcIjpcIsKpXCIsXCImb3JkZlwiOlwiwqpcIixcIiZvcmRmO1wiOlwiwqpcIixcIiZsYXF1b1wiOlwiwqtcIixcIiZsYXF1bztcIjpcIsKrXCIsXCImbm90XCI6XCLCrFwiLFwiJm5vdDtcIjpcIsKsXCIsXCImc2h5XCI6XCLCrVwiLFwiJnNoeTtcIjpcIsKtXCIsXCImcmVnXCI6XCLCrlwiLFwiJnJlZztcIjpcIsKuXCIsXCImbWFjclwiOlwiwq9cIixcIiZtYWNyO1wiOlwiwq9cIixcIiZkZWdcIjpcIsKwXCIsXCImZGVnO1wiOlwiwrBcIixcIiZwbHVzbW5cIjpcIsKxXCIsXCImcGx1c21uO1wiOlwiwrFcIixcIiZzdXAyXCI6XCLCslwiLFwiJnN1cDI7XCI6XCLCslwiLFwiJnN1cDNcIjpcIsKzXCIsXCImc3VwMztcIjpcIsKzXCIsXCImYWN1dGVcIjpcIsK0XCIsXCImYWN1dGU7XCI6XCLCtFwiLFwiJm1pY3JvXCI6XCLCtVwiLFwiJm1pY3JvO1wiOlwiwrVcIixcIiZwYXJhXCI6XCLCtlwiLFwiJnBhcmE7XCI6XCLCtlwiLFwiJm1pZGRvdFwiOlwiwrdcIixcIiZtaWRkb3Q7XCI6XCLCt1wiLFwiJmNlZGlsXCI6XCLCuFwiLFwiJmNlZGlsO1wiOlwiwrhcIixcIiZzdXAxXCI6XCLCuVwiLFwiJnN1cDE7XCI6XCLCuVwiLFwiJm9yZG1cIjpcIsK6XCIsXCImb3JkbTtcIjpcIsK6XCIsXCImcmFxdW9cIjpcIsK7XCIsXCImcmFxdW87XCI6XCLCu1wiLFwiJmZyYWMxNFwiOlwiwrxcIixcIiZmcmFjMTQ7XCI6XCLCvFwiLFwiJmZyYWMxMlwiOlwiwr1cIixcIiZmcmFjMTI7XCI6XCLCvVwiLFwiJmZyYWMzNFwiOlwiwr5cIixcIiZmcmFjMzQ7XCI6XCLCvlwiLFwiJmlxdWVzdFwiOlwiwr9cIixcIiZpcXVlc3Q7XCI6XCLCv1wiLFwiJkFncmF2ZVwiOlwiw4BcIixcIiZBZ3JhdmU7XCI6XCLDgFwiLFwiJkFhY3V0ZVwiOlwiw4FcIixcIiZBYWN1dGU7XCI6XCLDgVwiLFwiJkFjaXJjXCI6XCLDglwiLFwiJkFjaXJjO1wiOlwiw4JcIixcIiZBdGlsZGVcIjpcIsODXCIsXCImQXRpbGRlO1wiOlwiw4NcIixcIiZBdW1sXCI6XCLDhFwiLFwiJkF1bWw7XCI6XCLDhFwiLFwiJkFyaW5nXCI6XCLDhVwiLFwiJkFyaW5nO1wiOlwiw4VcIixcIiZBRWxpZ1wiOlwiw4ZcIixcIiZBRWxpZztcIjpcIsOGXCIsXCImQ2NlZGlsXCI6XCLDh1wiLFwiJkNjZWRpbDtcIjpcIsOHXCIsXCImRWdyYXZlXCI6XCLDiFwiLFwiJkVncmF2ZTtcIjpcIsOIXCIsXCImRWFjdXRlXCI6XCLDiVwiLFwiJkVhY3V0ZTtcIjpcIsOJXCIsXCImRWNpcmNcIjpcIsOKXCIsXCImRWNpcmM7XCI6XCLDilwiLFwiJkV1bWxcIjpcIsOLXCIsXCImRXVtbDtcIjpcIsOLXCIsXCImSWdyYXZlXCI6XCLDjFwiLFwiJklncmF2ZTtcIjpcIsOMXCIsXCImSWFjdXRlXCI6XCLDjVwiLFwiJklhY3V0ZTtcIjpcIsONXCIsXCImSWNpcmNcIjpcIsOOXCIsXCImSWNpcmM7XCI6XCLDjlwiLFwiJkl1bWxcIjpcIsOPXCIsXCImSXVtbDtcIjpcIsOPXCIsXCImRVRIXCI6XCLDkFwiLFwiJkVUSDtcIjpcIsOQXCIsXCImTnRpbGRlXCI6XCLDkVwiLFwiJk50aWxkZTtcIjpcIsORXCIsXCImT2dyYXZlXCI6XCLDklwiLFwiJk9ncmF2ZTtcIjpcIsOSXCIsXCImT2FjdXRlXCI6XCLDk1wiLFwiJk9hY3V0ZTtcIjpcIsOTXCIsXCImT2NpcmNcIjpcIsOUXCIsXCImT2NpcmM7XCI6XCLDlFwiLFwiJk90aWxkZVwiOlwiw5VcIixcIiZPdGlsZGU7XCI6XCLDlVwiLFwiJk91bWxcIjpcIsOWXCIsXCImT3VtbDtcIjpcIsOWXCIsXCImdGltZXNcIjpcIsOXXCIsXCImdGltZXM7XCI6XCLDl1wiLFwiJk9zbGFzaFwiOlwiw5hcIixcIiZPc2xhc2g7XCI6XCLDmFwiLFwiJlVncmF2ZVwiOlwiw5lcIixcIiZVZ3JhdmU7XCI6XCLDmVwiLFwiJlVhY3V0ZVwiOlwiw5pcIixcIiZVYWN1dGU7XCI6XCLDmlwiLFwiJlVjaXJjXCI6XCLDm1wiLFwiJlVjaXJjO1wiOlwiw5tcIixcIiZVdW1sXCI6XCLDnFwiLFwiJlV1bWw7XCI6XCLDnFwiLFwiJllhY3V0ZVwiOlwiw51cIixcIiZZYWN1dGU7XCI6XCLDnVwiLFwiJlRIT1JOXCI6XCLDnlwiLFwiJlRIT1JOO1wiOlwiw55cIixcIiZzemxpZ1wiOlwiw59cIixcIiZzemxpZztcIjpcIsOfXCIsXCImYWdyYXZlXCI6XCLDoFwiLFwiJmFncmF2ZTtcIjpcIsOgXCIsXCImYWFjdXRlXCI6XCLDoVwiLFwiJmFhY3V0ZTtcIjpcIsOhXCIsXCImYWNpcmNcIjpcIsOiXCIsXCImYWNpcmM7XCI6XCLDolwiLFwiJmF0aWxkZVwiOlwiw6NcIixcIiZhdGlsZGU7XCI6XCLDo1wiLFwiJmF1bWxcIjpcIsOkXCIsXCImYXVtbDtcIjpcIsOkXCIsXCImYXJpbmdcIjpcIsOlXCIsXCImYXJpbmc7XCI6XCLDpVwiLFwiJmFlbGlnXCI6XCLDplwiLFwiJmFlbGlnO1wiOlwiw6ZcIixcIiZjY2VkaWxcIjpcIsOnXCIsXCImY2NlZGlsO1wiOlwiw6dcIixcIiZlZ3JhdmVcIjpcIsOoXCIsXCImZWdyYXZlO1wiOlwiw6hcIixcIiZlYWN1dGVcIjpcIsOpXCIsXCImZWFjdXRlO1wiOlwiw6lcIixcIiZlY2lyY1wiOlwiw6pcIixcIiZlY2lyYztcIjpcIsOqXCIsXCImZXVtbFwiOlwiw6tcIixcIiZldW1sO1wiOlwiw6tcIixcIiZpZ3JhdmVcIjpcIsOsXCIsXCImaWdyYXZlO1wiOlwiw6xcIixcIiZpYWN1dGVcIjpcIsOtXCIsXCImaWFjdXRlO1wiOlwiw61cIixcIiZpY2lyY1wiOlwiw65cIixcIiZpY2lyYztcIjpcIsOuXCIsXCImaXVtbFwiOlwiw69cIixcIiZpdW1sO1wiOlwiw69cIixcIiZldGhcIjpcIsOwXCIsXCImZXRoO1wiOlwiw7BcIixcIiZudGlsZGVcIjpcIsOxXCIsXCImbnRpbGRlO1wiOlwiw7FcIixcIiZvZ3JhdmVcIjpcIsOyXCIsXCImb2dyYXZlO1wiOlwiw7JcIixcIiZvYWN1dGVcIjpcIsOzXCIsXCImb2FjdXRlO1wiOlwiw7NcIixcIiZvY2lyY1wiOlwiw7RcIixcIiZvY2lyYztcIjpcIsO0XCIsXCImb3RpbGRlXCI6XCLDtVwiLFwiJm90aWxkZTtcIjpcIsO1XCIsXCImb3VtbFwiOlwiw7ZcIixcIiZvdW1sO1wiOlwiw7ZcIixcIiZkaXZpZGVcIjpcIsO3XCIsXCImZGl2aWRlO1wiOlwiw7dcIixcIiZvc2xhc2hcIjpcIsO4XCIsXCImb3NsYXNoO1wiOlwiw7hcIixcIiZ1Z3JhdmVcIjpcIsO5XCIsXCImdWdyYXZlO1wiOlwiw7lcIixcIiZ1YWN1dGVcIjpcIsO6XCIsXCImdWFjdXRlO1wiOlwiw7pcIixcIiZ1Y2lyY1wiOlwiw7tcIixcIiZ1Y2lyYztcIjpcIsO7XCIsXCImdXVtbFwiOlwiw7xcIixcIiZ1dW1sO1wiOlwiw7xcIixcIiZ5YWN1dGVcIjpcIsO9XCIsXCImeWFjdXRlO1wiOlwiw71cIixcIiZ0aG9yblwiOlwiw75cIixcIiZ0aG9ybjtcIjpcIsO+XCIsXCImeXVtbFwiOlwiw79cIixcIiZ5dW1sO1wiOlwiw79cIixcIiZxdW90XCI6J1wiJyxcIiZxdW90O1wiOidcIicsXCImYW1wXCI6XCImXCIsXCImYW1wO1wiOlwiJlwiLFwiJmx0XCI6XCI8XCIsXCImbHQ7XCI6XCI8XCIsXCImZ3RcIjpcIj5cIixcIiZndDtcIjpcIj5cIixcIiZPRWxpZztcIjpcIsWSXCIsXCImb2VsaWc7XCI6XCLFk1wiLFwiJlNjYXJvbjtcIjpcIsWgXCIsXCImc2Nhcm9uO1wiOlwixaFcIixcIiZZdW1sO1wiOlwixbhcIixcIiZjaXJjO1wiOlwiy4ZcIixcIiZ0aWxkZTtcIjpcIsucXCIsXCImZW5zcDtcIjpcIuKAglwiLFwiJmVtc3A7XCI6XCLigINcIixcIiZ0aGluc3A7XCI6XCLigIlcIixcIiZ6d25qO1wiOlwi4oCMXCIsXCImendqO1wiOlwi4oCNXCIsXCImbHJtO1wiOlwi4oCOXCIsXCImcmxtO1wiOlwi4oCPXCIsXCImbmRhc2g7XCI6XCLigJNcIixcIiZtZGFzaDtcIjpcIuKAlFwiLFwiJmxzcXVvO1wiOlwi4oCYXCIsXCImcnNxdW87XCI6XCLigJlcIixcIiZzYnF1bztcIjpcIuKAmlwiLFwiJmxkcXVvO1wiOlwi4oCcXCIsXCImcmRxdW87XCI6XCLigJ1cIixcIiZiZHF1bztcIjpcIuKAnlwiLFwiJmRhZ2dlcjtcIjpcIuKAoFwiLFwiJkRhZ2dlcjtcIjpcIuKAoVwiLFwiJnBlcm1pbDtcIjpcIuKAsFwiLFwiJmxzYXF1bztcIjpcIuKAuVwiLFwiJnJzYXF1bztcIjpcIuKAulwiLFwiJmV1cm87XCI6XCLigqxcIixcIiZmbm9mO1wiOlwixpJcIixcIiZBbHBoYTtcIjpcIs6RXCIsXCImQmV0YTtcIjpcIs6SXCIsXCImR2FtbWE7XCI6XCLOk1wiLFwiJkRlbHRhO1wiOlwizpRcIixcIiZFcHNpbG9uO1wiOlwizpVcIixcIiZaZXRhO1wiOlwizpZcIixcIiZFdGE7XCI6XCLOl1wiLFwiJlRoZXRhO1wiOlwizphcIixcIiZJb3RhO1wiOlwizplcIixcIiZLYXBwYTtcIjpcIs6aXCIsXCImTGFtYmRhO1wiOlwizptcIixcIiZNdTtcIjpcIs6cXCIsXCImTnU7XCI6XCLOnVwiLFwiJlhpO1wiOlwizp5cIixcIiZPbWljcm9uO1wiOlwizp9cIixcIiZQaTtcIjpcIs6gXCIsXCImUmhvO1wiOlwizqFcIixcIiZTaWdtYTtcIjpcIs6jXCIsXCImVGF1O1wiOlwizqRcIixcIiZVcHNpbG9uO1wiOlwizqVcIixcIiZQaGk7XCI6XCLOplwiLFwiJkNoaTtcIjpcIs6nXCIsXCImUHNpO1wiOlwizqhcIixcIiZPbWVnYTtcIjpcIs6pXCIsXCImYWxwaGE7XCI6XCLOsVwiLFwiJmJldGE7XCI6XCLOslwiLFwiJmdhbW1hO1wiOlwizrNcIixcIiZkZWx0YTtcIjpcIs60XCIsXCImZXBzaWxvbjtcIjpcIs61XCIsXCImemV0YTtcIjpcIs62XCIsXCImZXRhO1wiOlwizrdcIixcIiZ0aGV0YTtcIjpcIs64XCIsXCImaW90YTtcIjpcIs65XCIsXCIma2FwcGE7XCI6XCLOulwiLFwiJmxhbWJkYTtcIjpcIs67XCIsXCImbXU7XCI6XCLOvFwiLFwiJm51O1wiOlwizr1cIixcIiZ4aTtcIjpcIs6+XCIsXCImb21pY3JvbjtcIjpcIs6/XCIsXCImcGk7XCI6XCLPgFwiLFwiJnJobztcIjpcIs+BXCIsXCImc2lnbWFmO1wiOlwiz4JcIixcIiZzaWdtYTtcIjpcIs+DXCIsXCImdGF1O1wiOlwiz4RcIixcIiZ1cHNpbG9uO1wiOlwiz4VcIixcIiZwaGk7XCI6XCLPhlwiLFwiJmNoaTtcIjpcIs+HXCIsXCImcHNpO1wiOlwiz4hcIixcIiZvbWVnYTtcIjpcIs+JXCIsXCImdGhldGFzeW07XCI6XCLPkVwiLFwiJnVwc2loO1wiOlwiz5JcIixcIiZwaXY7XCI6XCLPllwiLFwiJmJ1bGw7XCI6XCLigKJcIixcIiZoZWxsaXA7XCI6XCLigKZcIixcIiZwcmltZTtcIjpcIuKAslwiLFwiJlByaW1lO1wiOlwi4oCzXCIsXCImb2xpbmU7XCI6XCLigL5cIixcIiZmcmFzbDtcIjpcIuKBhFwiLFwiJndlaWVycDtcIjpcIuKEmFwiLFwiJmltYWdlO1wiOlwi4oSRXCIsXCImcmVhbDtcIjpcIuKEnFwiLFwiJnRyYWRlO1wiOlwi4oSiXCIsXCImYWxlZnN5bTtcIjpcIuKEtVwiLFwiJmxhcnI7XCI6XCLihpBcIixcIiZ1YXJyO1wiOlwi4oaRXCIsXCImcmFycjtcIjpcIuKGklwiLFwiJmRhcnI7XCI6XCLihpNcIixcIiZoYXJyO1wiOlwi4oaUXCIsXCImY3JhcnI7XCI6XCLihrVcIixcIiZsQXJyO1wiOlwi4oeQXCIsXCImdUFycjtcIjpcIuKHkVwiLFwiJnJBcnI7XCI6XCLih5JcIixcIiZkQXJyO1wiOlwi4oeTXCIsXCImaEFycjtcIjpcIuKHlFwiLFwiJmZvcmFsbDtcIjpcIuKIgFwiLFwiJnBhcnQ7XCI6XCLiiIJcIixcIiZleGlzdDtcIjpcIuKIg1wiLFwiJmVtcHR5O1wiOlwi4oiFXCIsXCImbmFibGE7XCI6XCLiiIdcIixcIiZpc2luO1wiOlwi4oiIXCIsXCImbm90aW47XCI6XCLiiIlcIixcIiZuaTtcIjpcIuKIi1wiLFwiJnByb2Q7XCI6XCLiiI9cIixcIiZzdW07XCI6XCLiiJFcIixcIiZtaW51cztcIjpcIuKIklwiLFwiJmxvd2FzdDtcIjpcIuKIl1wiLFwiJnJhZGljO1wiOlwi4oiaXCIsXCImcHJvcDtcIjpcIuKInVwiLFwiJmluZmluO1wiOlwi4oieXCIsXCImYW5nO1wiOlwi4oigXCIsXCImYW5kO1wiOlwi4oinXCIsXCImb3I7XCI6XCLiiKhcIixcIiZjYXA7XCI6XCLiiKlcIixcIiZjdXA7XCI6XCLiiKpcIixcIiZpbnQ7XCI6XCLiiKtcIixcIiZ0aGVyZTQ7XCI6XCLiiLRcIixcIiZzaW07XCI6XCLiiLxcIixcIiZjb25nO1wiOlwi4omFXCIsXCImYXN5bXA7XCI6XCLiiYhcIixcIiZuZTtcIjpcIuKJoFwiLFwiJmVxdWl2O1wiOlwi4omhXCIsXCImbGU7XCI6XCLiiaRcIixcIiZnZTtcIjpcIuKJpVwiLFwiJnN1YjtcIjpcIuKKglwiLFwiJnN1cDtcIjpcIuKKg1wiLFwiJm5zdWI7XCI6XCLiioRcIixcIiZzdWJlO1wiOlwi4oqGXCIsXCImc3VwZTtcIjpcIuKKh1wiLFwiJm9wbHVzO1wiOlwi4oqVXCIsXCImb3RpbWVzO1wiOlwi4oqXXCIsXCImcGVycDtcIjpcIuKKpVwiLFwiJnNkb3Q7XCI6XCLii4VcIixcIiZsY2VpbDtcIjpcIuKMiFwiLFwiJnJjZWlsO1wiOlwi4oyJXCIsXCImbGZsb29yO1wiOlwi4oyKXCIsXCImcmZsb29yO1wiOlwi4oyLXCIsXCImbGFuZztcIjpcIuKMqVwiLFwiJnJhbmc7XCI6XCLijKpcIixcIiZsb3o7XCI6XCLil4pcIixcIiZzcGFkZXM7XCI6XCLimaBcIixcIiZjbHVicztcIjpcIuKZo1wiLFwiJmhlYXJ0cztcIjpcIuKZpVwiLFwiJmRpYW1zO1wiOlwi4pmmXCJ9LGNoYXJhY3RlcnM6e1wiJ1wiOlwiJmFwb3M7XCIsXCLCoFwiOlwiJm5ic3A7XCIsXCLCoVwiOlwiJmlleGNsO1wiLFwiwqJcIjpcIiZjZW50O1wiLFwiwqNcIjpcIiZwb3VuZDtcIixcIsKkXCI6XCImY3VycmVuO1wiLFwiwqVcIjpcIiZ5ZW47XCIsXCLCplwiOlwiJmJydmJhcjtcIixcIsKnXCI6XCImc2VjdDtcIixcIsKoXCI6XCImdW1sO1wiLFwiwqlcIjpcIiZjb3B5O1wiLFwiwqpcIjpcIiZvcmRmO1wiLFwiwqtcIjpcIiZsYXF1bztcIixcIsKsXCI6XCImbm90O1wiLFwiwq1cIjpcIiZzaHk7XCIsXCLCrlwiOlwiJnJlZztcIixcIsKvXCI6XCImbWFjcjtcIixcIsKwXCI6XCImZGVnO1wiLFwiwrFcIjpcIiZwbHVzbW47XCIsXCLCslwiOlwiJnN1cDI7XCIsXCLCs1wiOlwiJnN1cDM7XCIsXCLCtFwiOlwiJmFjdXRlO1wiLFwiwrVcIjpcIiZtaWNybztcIixcIsK2XCI6XCImcGFyYTtcIixcIsK3XCI6XCImbWlkZG90O1wiLFwiwrhcIjpcIiZjZWRpbDtcIixcIsK5XCI6XCImc3VwMTtcIixcIsK6XCI6XCImb3JkbTtcIixcIsK7XCI6XCImcmFxdW87XCIsXCLCvFwiOlwiJmZyYWMxNDtcIixcIsK9XCI6XCImZnJhYzEyO1wiLFwiwr5cIjpcIiZmcmFjMzQ7XCIsXCLCv1wiOlwiJmlxdWVzdDtcIixcIsOAXCI6XCImQWdyYXZlO1wiLFwiw4FcIjpcIiZBYWN1dGU7XCIsXCLDglwiOlwiJkFjaXJjO1wiLFwiw4NcIjpcIiZBdGlsZGU7XCIsXCLDhFwiOlwiJkF1bWw7XCIsXCLDhVwiOlwiJkFyaW5nO1wiLFwiw4ZcIjpcIiZBRWxpZztcIixcIsOHXCI6XCImQ2NlZGlsO1wiLFwiw4hcIjpcIiZFZ3JhdmU7XCIsXCLDiVwiOlwiJkVhY3V0ZTtcIixcIsOKXCI6XCImRWNpcmM7XCIsXCLDi1wiOlwiJkV1bWw7XCIsXCLDjFwiOlwiJklncmF2ZTtcIixcIsONXCI6XCImSWFjdXRlO1wiLFwiw45cIjpcIiZJY2lyYztcIixcIsOPXCI6XCImSXVtbDtcIixcIsOQXCI6XCImRVRIO1wiLFwiw5FcIjpcIiZOdGlsZGU7XCIsXCLDklwiOlwiJk9ncmF2ZTtcIixcIsOTXCI6XCImT2FjdXRlO1wiLFwiw5RcIjpcIiZPY2lyYztcIixcIsOVXCI6XCImT3RpbGRlO1wiLFwiw5ZcIjpcIiZPdW1sO1wiLFwiw5dcIjpcIiZ0aW1lcztcIixcIsOYXCI6XCImT3NsYXNoO1wiLFwiw5lcIjpcIiZVZ3JhdmU7XCIsXCLDmlwiOlwiJlVhY3V0ZTtcIixcIsObXCI6XCImVWNpcmM7XCIsXCLDnFwiOlwiJlV1bWw7XCIsXCLDnVwiOlwiJllhY3V0ZTtcIixcIsOeXCI6XCImVEhPUk47XCIsXCLDn1wiOlwiJnN6bGlnO1wiLFwiw6BcIjpcIiZhZ3JhdmU7XCIsXCLDoVwiOlwiJmFhY3V0ZTtcIixcIsOiXCI6XCImYWNpcmM7XCIsXCLDo1wiOlwiJmF0aWxkZTtcIixcIsOkXCI6XCImYXVtbDtcIixcIsOlXCI6XCImYXJpbmc7XCIsXCLDplwiOlwiJmFlbGlnO1wiLFwiw6dcIjpcIiZjY2VkaWw7XCIsXCLDqFwiOlwiJmVncmF2ZTtcIixcIsOpXCI6XCImZWFjdXRlO1wiLFwiw6pcIjpcIiZlY2lyYztcIixcIsOrXCI6XCImZXVtbDtcIixcIsOsXCI6XCImaWdyYXZlO1wiLFwiw61cIjpcIiZpYWN1dGU7XCIsXCLDrlwiOlwiJmljaXJjO1wiLFwiw69cIjpcIiZpdW1sO1wiLFwiw7BcIjpcIiZldGg7XCIsXCLDsVwiOlwiJm50aWxkZTtcIixcIsOyXCI6XCImb2dyYXZlO1wiLFwiw7NcIjpcIiZvYWN1dGU7XCIsXCLDtFwiOlwiJm9jaXJjO1wiLFwiw7VcIjpcIiZvdGlsZGU7XCIsXCLDtlwiOlwiJm91bWw7XCIsXCLDt1wiOlwiJmRpdmlkZTtcIixcIsO4XCI6XCImb3NsYXNoO1wiLFwiw7lcIjpcIiZ1Z3JhdmU7XCIsXCLDulwiOlwiJnVhY3V0ZTtcIixcIsO7XCI6XCImdWNpcmM7XCIsXCLDvFwiOlwiJnV1bWw7XCIsXCLDvVwiOlwiJnlhY3V0ZTtcIixcIsO+XCI6XCImdGhvcm47XCIsXCLDv1wiOlwiJnl1bWw7XCIsJ1wiJzpcIiZxdW90O1wiLFwiJlwiOlwiJmFtcDtcIixcIjxcIjpcIiZsdDtcIixcIj5cIjpcIiZndDtcIixcIsWSXCI6XCImT0VsaWc7XCIsXCLFk1wiOlwiJm9lbGlnO1wiLFwixaBcIjpcIiZTY2Fyb247XCIsXCLFoVwiOlwiJnNjYXJvbjtcIixcIsW4XCI6XCImWXVtbDtcIixcIsuGXCI6XCImY2lyYztcIixcIsucXCI6XCImdGlsZGU7XCIsXCLigIJcIjpcIiZlbnNwO1wiLFwi4oCDXCI6XCImZW1zcDtcIixcIuKAiVwiOlwiJnRoaW5zcDtcIixcIuKAjFwiOlwiJnp3bmo7XCIsXCLigI1cIjpcIiZ6d2o7XCIsXCLigI5cIjpcIiZscm07XCIsXCLigI9cIjpcIiZybG07XCIsXCLigJNcIjpcIiZuZGFzaDtcIixcIuKAlFwiOlwiJm1kYXNoO1wiLFwi4oCYXCI6XCImbHNxdW87XCIsXCLigJlcIjpcIiZyc3F1bztcIixcIuKAmlwiOlwiJnNicXVvO1wiLFwi4oCcXCI6XCImbGRxdW87XCIsXCLigJ1cIjpcIiZyZHF1bztcIixcIuKAnlwiOlwiJmJkcXVvO1wiLFwi4oCgXCI6XCImZGFnZ2VyO1wiLFwi4oChXCI6XCImRGFnZ2VyO1wiLFwi4oCwXCI6XCImcGVybWlsO1wiLFwi4oC5XCI6XCImbHNhcXVvO1wiLFwi4oC6XCI6XCImcnNhcXVvO1wiLFwi4oKsXCI6XCImZXVybztcIixcIsaSXCI6XCImZm5vZjtcIixcIs6RXCI6XCImQWxwaGE7XCIsXCLOklwiOlwiJkJldGE7XCIsXCLOk1wiOlwiJkdhbW1hO1wiLFwizpRcIjpcIiZEZWx0YTtcIixcIs6VXCI6XCImRXBzaWxvbjtcIixcIs6WXCI6XCImWmV0YTtcIixcIs6XXCI6XCImRXRhO1wiLFwizphcIjpcIiZUaGV0YTtcIixcIs6ZXCI6XCImSW90YTtcIixcIs6aXCI6XCImS2FwcGE7XCIsXCLOm1wiOlwiJkxhbWJkYTtcIixcIs6cXCI6XCImTXU7XCIsXCLOnVwiOlwiJk51O1wiLFwizp5cIjpcIiZYaTtcIixcIs6fXCI6XCImT21pY3JvbjtcIixcIs6gXCI6XCImUGk7XCIsXCLOoVwiOlwiJlJobztcIixcIs6jXCI6XCImU2lnbWE7XCIsXCLOpFwiOlwiJlRhdTtcIixcIs6lXCI6XCImVXBzaWxvbjtcIixcIs6mXCI6XCImUGhpO1wiLFwizqdcIjpcIiZDaGk7XCIsXCLOqFwiOlwiJlBzaTtcIixcIs6pXCI6XCImT21lZ2E7XCIsXCLOsVwiOlwiJmFscGhhO1wiLFwizrJcIjpcIiZiZXRhO1wiLFwizrNcIjpcIiZnYW1tYTtcIixcIs60XCI6XCImZGVsdGE7XCIsXCLOtVwiOlwiJmVwc2lsb247XCIsXCLOtlwiOlwiJnpldGE7XCIsXCLOt1wiOlwiJmV0YTtcIixcIs64XCI6XCImdGhldGE7XCIsXCLOuVwiOlwiJmlvdGE7XCIsXCLOulwiOlwiJmthcHBhO1wiLFwizrtcIjpcIiZsYW1iZGE7XCIsXCLOvFwiOlwiJm11O1wiLFwizr1cIjpcIiZudTtcIixcIs6+XCI6XCImeGk7XCIsXCLOv1wiOlwiJm9taWNyb247XCIsXCLPgFwiOlwiJnBpO1wiLFwiz4FcIjpcIiZyaG87XCIsXCLPglwiOlwiJnNpZ21hZjtcIixcIs+DXCI6XCImc2lnbWE7XCIsXCLPhFwiOlwiJnRhdTtcIixcIs+FXCI6XCImdXBzaWxvbjtcIixcIs+GXCI6XCImcGhpO1wiLFwiz4dcIjpcIiZjaGk7XCIsXCLPiFwiOlwiJnBzaTtcIixcIs+JXCI6XCImb21lZ2E7XCIsXCLPkVwiOlwiJnRoZXRhc3ltO1wiLFwiz5JcIjpcIiZ1cHNpaDtcIixcIs+WXCI6XCImcGl2O1wiLFwi4oCiXCI6XCImYnVsbDtcIixcIuKAplwiOlwiJmhlbGxpcDtcIixcIuKAslwiOlwiJnByaW1lO1wiLFwi4oCzXCI6XCImUHJpbWU7XCIsXCLigL5cIjpcIiZvbGluZTtcIixcIuKBhFwiOlwiJmZyYXNsO1wiLFwi4oSYXCI6XCImd2VpZXJwO1wiLFwi4oSRXCI6XCImaW1hZ2U7XCIsXCLihJxcIjpcIiZyZWFsO1wiLFwi4oSiXCI6XCImdHJhZGU7XCIsXCLihLVcIjpcIiZhbGVmc3ltO1wiLFwi4oaQXCI6XCImbGFycjtcIixcIuKGkVwiOlwiJnVhcnI7XCIsXCLihpJcIjpcIiZyYXJyO1wiLFwi4oaTXCI6XCImZGFycjtcIixcIuKGlFwiOlwiJmhhcnI7XCIsXCLihrVcIjpcIiZjcmFycjtcIixcIuKHkFwiOlwiJmxBcnI7XCIsXCLih5FcIjpcIiZ1QXJyO1wiLFwi4oeSXCI6XCImckFycjtcIixcIuKHk1wiOlwiJmRBcnI7XCIsXCLih5RcIjpcIiZoQXJyO1wiLFwi4oiAXCI6XCImZm9yYWxsO1wiLFwi4oiCXCI6XCImcGFydDtcIixcIuKIg1wiOlwiJmV4aXN0O1wiLFwi4oiFXCI6XCImZW1wdHk7XCIsXCLiiIdcIjpcIiZuYWJsYTtcIixcIuKIiFwiOlwiJmlzaW47XCIsXCLiiIlcIjpcIiZub3RpbjtcIixcIuKIi1wiOlwiJm5pO1wiLFwi4oiPXCI6XCImcHJvZDtcIixcIuKIkVwiOlwiJnN1bTtcIixcIuKIklwiOlwiJm1pbnVzO1wiLFwi4oiXXCI6XCImbG93YXN0O1wiLFwi4oiaXCI6XCImcmFkaWM7XCIsXCLiiJ1cIjpcIiZwcm9wO1wiLFwi4oieXCI6XCImaW5maW47XCIsXCLiiKBcIjpcIiZhbmc7XCIsXCLiiKdcIjpcIiZhbmQ7XCIsXCLiiKhcIjpcIiZvcjtcIixcIuKIqVwiOlwiJmNhcDtcIixcIuKIqlwiOlwiJmN1cDtcIixcIuKIq1wiOlwiJmludDtcIixcIuKItFwiOlwiJnRoZXJlNDtcIixcIuKIvFwiOlwiJnNpbTtcIixcIuKJhVwiOlwiJmNvbmc7XCIsXCLiiYhcIjpcIiZhc3ltcDtcIixcIuKJoFwiOlwiJm5lO1wiLFwi4omhXCI6XCImZXF1aXY7XCIsXCLiiaRcIjpcIiZsZTtcIixcIuKJpVwiOlwiJmdlO1wiLFwi4oqCXCI6XCImc3ViO1wiLFwi4oqDXCI6XCImc3VwO1wiLFwi4oqEXCI6XCImbnN1YjtcIixcIuKKhlwiOlwiJnN1YmU7XCIsXCLiiodcIjpcIiZzdXBlO1wiLFwi4oqVXCI6XCImb3BsdXM7XCIsXCLiipdcIjpcIiZvdGltZXM7XCIsXCLiiqVcIjpcIiZwZXJwO1wiLFwi4ouFXCI6XCImc2RvdDtcIixcIuKMiFwiOlwiJmxjZWlsO1wiLFwi4oyJXCI6XCImcmNlaWw7XCIsXCLijIpcIjpcIiZsZmxvb3I7XCIsXCLijItcIjpcIiZyZmxvb3I7XCIsXCLijKlcIjpcIiZsYW5nO1wiLFwi4oyqXCI6XCImcmFuZztcIixcIuKXilwiOlwiJmxvejtcIixcIuKZoFwiOlwiJnNwYWRlcztcIixcIuKZo1wiOlwiJmNsdWJzO1wiLFwi4pmlXCI6XCImaGVhcnRzO1wiLFwi4pmmXCI6XCImZGlhbXM7XCJ9fSxodG1sNTp7ZW50aXRpZXM6e1wiJkFFbGlnXCI6XCLDhlwiLFwiJkFFbGlnO1wiOlwiw4ZcIixcIiZBTVBcIjpcIiZcIixcIiZBTVA7XCI6XCImXCIsXCImQWFjdXRlXCI6XCLDgVwiLFwiJkFhY3V0ZTtcIjpcIsOBXCIsXCImQWJyZXZlO1wiOlwixIJcIixcIiZBY2lyY1wiOlwiw4JcIixcIiZBY2lyYztcIjpcIsOCXCIsXCImQWN5O1wiOlwi0JBcIixcIiZBZnI7XCI6XCLwnZSEXCIsXCImQWdyYXZlXCI6XCLDgFwiLFwiJkFncmF2ZTtcIjpcIsOAXCIsXCImQWxwaGE7XCI6XCLOkVwiLFwiJkFtYWNyO1wiOlwixIBcIixcIiZBbmQ7XCI6XCLiqZNcIixcIiZBb2dvbjtcIjpcIsSEXCIsXCImQW9wZjtcIjpcIvCdlLhcIixcIiZBcHBseUZ1bmN0aW9uO1wiOlwi4oGhXCIsXCImQXJpbmdcIjpcIsOFXCIsXCImQXJpbmc7XCI6XCLDhVwiLFwiJkFzY3I7XCI6XCLwnZKcXCIsXCImQXNzaWduO1wiOlwi4omUXCIsXCImQXRpbGRlXCI6XCLDg1wiLFwiJkF0aWxkZTtcIjpcIsODXCIsXCImQXVtbFwiOlwiw4RcIixcIiZBdW1sO1wiOlwiw4RcIixcIiZCYWNrc2xhc2g7XCI6XCLiiJZcIixcIiZCYXJ2O1wiOlwi4qunXCIsXCImQmFyd2VkO1wiOlwi4oyGXCIsXCImQmN5O1wiOlwi0JFcIixcIiZCZWNhdXNlO1wiOlwi4oi1XCIsXCImQmVybm91bGxpcztcIjpcIuKErFwiLFwiJkJldGE7XCI6XCLOklwiLFwiJkJmcjtcIjpcIvCdlIVcIixcIiZCb3BmO1wiOlwi8J2UuVwiLFwiJkJyZXZlO1wiOlwiy5hcIixcIiZCc2NyO1wiOlwi4oSsXCIsXCImQnVtcGVxO1wiOlwi4omOXCIsXCImQ0hjeTtcIjpcItCnXCIsXCImQ09QWVwiOlwiwqlcIixcIiZDT1BZO1wiOlwiwqlcIixcIiZDYWN1dGU7XCI6XCLEhlwiLFwiJkNhcDtcIjpcIuKLklwiLFwiJkNhcGl0YWxEaWZmZXJlbnRpYWxEO1wiOlwi4oWFXCIsXCImQ2F5bGV5cztcIjpcIuKErVwiLFwiJkNjYXJvbjtcIjpcIsSMXCIsXCImQ2NlZGlsXCI6XCLDh1wiLFwiJkNjZWRpbDtcIjpcIsOHXCIsXCImQ2NpcmM7XCI6XCLEiFwiLFwiJkNjb25pbnQ7XCI6XCLiiLBcIixcIiZDZG90O1wiOlwixIpcIixcIiZDZWRpbGxhO1wiOlwiwrhcIixcIiZDZW50ZXJEb3Q7XCI6XCLCt1wiLFwiJkNmcjtcIjpcIuKErVwiLFwiJkNoaTtcIjpcIs6nXCIsXCImQ2lyY2xlRG90O1wiOlwi4oqZXCIsXCImQ2lyY2xlTWludXM7XCI6XCLiipZcIixcIiZDaXJjbGVQbHVzO1wiOlwi4oqVXCIsXCImQ2lyY2xlVGltZXM7XCI6XCLiipdcIixcIiZDbG9ja3dpc2VDb250b3VySW50ZWdyYWw7XCI6XCLiiLJcIixcIiZDbG9zZUN1cmx5RG91YmxlUXVvdGU7XCI6XCLigJ1cIixcIiZDbG9zZUN1cmx5UXVvdGU7XCI6XCLigJlcIixcIiZDb2xvbjtcIjpcIuKIt1wiLFwiJkNvbG9uZTtcIjpcIuKptFwiLFwiJkNvbmdydWVudDtcIjpcIuKJoVwiLFwiJkNvbmludDtcIjpcIuKIr1wiLFwiJkNvbnRvdXJJbnRlZ3JhbDtcIjpcIuKIrlwiLFwiJkNvcGY7XCI6XCLihIJcIixcIiZDb3Byb2R1Y3Q7XCI6XCLiiJBcIixcIiZDb3VudGVyQ2xvY2t3aXNlQ29udG91ckludGVncmFsO1wiOlwi4oizXCIsXCImQ3Jvc3M7XCI6XCLiqK9cIixcIiZDc2NyO1wiOlwi8J2SnlwiLFwiJkN1cDtcIjpcIuKLk1wiLFwiJkN1cENhcDtcIjpcIuKJjVwiLFwiJkREO1wiOlwi4oWFXCIsXCImRERvdHJhaGQ7XCI6XCLipJFcIixcIiZESmN5O1wiOlwi0IJcIixcIiZEU2N5O1wiOlwi0IVcIixcIiZEWmN5O1wiOlwi0I9cIixcIiZEYWdnZXI7XCI6XCLigKFcIixcIiZEYXJyO1wiOlwi4oahXCIsXCImRGFzaHY7XCI6XCLiq6RcIixcIiZEY2Fyb247XCI6XCLEjlwiLFwiJkRjeTtcIjpcItCUXCIsXCImRGVsO1wiOlwi4oiHXCIsXCImRGVsdGE7XCI6XCLOlFwiLFwiJkRmcjtcIjpcIvCdlIdcIixcIiZEaWFjcml0aWNhbEFjdXRlO1wiOlwiwrRcIixcIiZEaWFjcml0aWNhbERvdDtcIjpcIsuZXCIsXCImRGlhY3JpdGljYWxEb3VibGVBY3V0ZTtcIjpcIsudXCIsXCImRGlhY3JpdGljYWxHcmF2ZTtcIjpcImBcIixcIiZEaWFjcml0aWNhbFRpbGRlO1wiOlwiy5xcIixcIiZEaWFtb25kO1wiOlwi4ouEXCIsXCImRGlmZmVyZW50aWFsRDtcIjpcIuKFhlwiLFwiJkRvcGY7XCI6XCLwnZS7XCIsXCImRG90O1wiOlwiwqhcIixcIiZEb3REb3Q7XCI6XCLig5xcIixcIiZEb3RFcXVhbDtcIjpcIuKJkFwiLFwiJkRvdWJsZUNvbnRvdXJJbnRlZ3JhbDtcIjpcIuKIr1wiLFwiJkRvdWJsZURvdDtcIjpcIsKoXCIsXCImRG91YmxlRG93bkFycm93O1wiOlwi4oeTXCIsXCImRG91YmxlTGVmdEFycm93O1wiOlwi4oeQXCIsXCImRG91YmxlTGVmdFJpZ2h0QXJyb3c7XCI6XCLih5RcIixcIiZEb3VibGVMZWZ0VGVlO1wiOlwi4qukXCIsXCImRG91YmxlTG9uZ0xlZnRBcnJvdztcIjpcIuKfuFwiLFwiJkRvdWJsZUxvbmdMZWZ0UmlnaHRBcnJvdztcIjpcIuKfulwiLFwiJkRvdWJsZUxvbmdSaWdodEFycm93O1wiOlwi4p+5XCIsXCImRG91YmxlUmlnaHRBcnJvdztcIjpcIuKHklwiLFwiJkRvdWJsZVJpZ2h0VGVlO1wiOlwi4oqoXCIsXCImRG91YmxlVXBBcnJvdztcIjpcIuKHkVwiLFwiJkRvdWJsZVVwRG93bkFycm93O1wiOlwi4oeVXCIsXCImRG91YmxlVmVydGljYWxCYXI7XCI6XCLiiKVcIixcIiZEb3duQXJyb3c7XCI6XCLihpNcIixcIiZEb3duQXJyb3dCYXI7XCI6XCLipJNcIixcIiZEb3duQXJyb3dVcEFycm93O1wiOlwi4oe1XCIsXCImRG93bkJyZXZlO1wiOlwizJFcIixcIiZEb3duTGVmdFJpZ2h0VmVjdG9yO1wiOlwi4qWQXCIsXCImRG93bkxlZnRUZWVWZWN0b3I7XCI6XCLipZ5cIixcIiZEb3duTGVmdFZlY3RvcjtcIjpcIuKGvVwiLFwiJkRvd25MZWZ0VmVjdG9yQmFyO1wiOlwi4qWWXCIsXCImRG93blJpZ2h0VGVlVmVjdG9yO1wiOlwi4qWfXCIsXCImRG93blJpZ2h0VmVjdG9yO1wiOlwi4oeBXCIsXCImRG93blJpZ2h0VmVjdG9yQmFyO1wiOlwi4qWXXCIsXCImRG93blRlZTtcIjpcIuKKpFwiLFwiJkRvd25UZWVBcnJvdztcIjpcIuKGp1wiLFwiJkRvd25hcnJvdztcIjpcIuKHk1wiLFwiJkRzY3I7XCI6XCLwnZKfXCIsXCImRHN0cm9rO1wiOlwixJBcIixcIiZFTkc7XCI6XCLFilwiLFwiJkVUSFwiOlwiw5BcIixcIiZFVEg7XCI6XCLDkFwiLFwiJkVhY3V0ZVwiOlwiw4lcIixcIiZFYWN1dGU7XCI6XCLDiVwiLFwiJkVjYXJvbjtcIjpcIsSaXCIsXCImRWNpcmNcIjpcIsOKXCIsXCImRWNpcmM7XCI6XCLDilwiLFwiJkVjeTtcIjpcItCtXCIsXCImRWRvdDtcIjpcIsSWXCIsXCImRWZyO1wiOlwi8J2UiFwiLFwiJkVncmF2ZVwiOlwiw4hcIixcIiZFZ3JhdmU7XCI6XCLDiFwiLFwiJkVsZW1lbnQ7XCI6XCLiiIhcIixcIiZFbWFjcjtcIjpcIsSSXCIsXCImRW1wdHlTbWFsbFNxdWFyZTtcIjpcIuKXu1wiLFwiJkVtcHR5VmVyeVNtYWxsU3F1YXJlO1wiOlwi4parXCIsXCImRW9nb247XCI6XCLEmFwiLFwiJkVvcGY7XCI6XCLwnZS8XCIsXCImRXBzaWxvbjtcIjpcIs6VXCIsXCImRXF1YWw7XCI6XCLiqbVcIixcIiZFcXVhbFRpbGRlO1wiOlwi4omCXCIsXCImRXF1aWxpYnJpdW07XCI6XCLih4xcIixcIiZFc2NyO1wiOlwi4oSwXCIsXCImRXNpbTtcIjpcIuKps1wiLFwiJkV0YTtcIjpcIs6XXCIsXCImRXVtbFwiOlwiw4tcIixcIiZFdW1sO1wiOlwiw4tcIixcIiZFeGlzdHM7XCI6XCLiiINcIixcIiZFeHBvbmVudGlhbEU7XCI6XCLihYdcIixcIiZGY3k7XCI6XCLQpFwiLFwiJkZmcjtcIjpcIvCdlIlcIixcIiZGaWxsZWRTbWFsbFNxdWFyZTtcIjpcIuKXvFwiLFwiJkZpbGxlZFZlcnlTbWFsbFNxdWFyZTtcIjpcIuKWqlwiLFwiJkZvcGY7XCI6XCLwnZS9XCIsXCImRm9yQWxsO1wiOlwi4oiAXCIsXCImRm91cmllcnRyZjtcIjpcIuKEsVwiLFwiJkZzY3I7XCI6XCLihLFcIixcIiZHSmN5O1wiOlwi0INcIixcIiZHVFwiOlwiPlwiLFwiJkdUO1wiOlwiPlwiLFwiJkdhbW1hO1wiOlwizpNcIixcIiZHYW1tYWQ7XCI6XCLPnFwiLFwiJkdicmV2ZTtcIjpcIsSeXCIsXCImR2NlZGlsO1wiOlwixKJcIixcIiZHY2lyYztcIjpcIsScXCIsXCImR2N5O1wiOlwi0JNcIixcIiZHZG90O1wiOlwixKBcIixcIiZHZnI7XCI6XCLwnZSKXCIsXCImR2c7XCI6XCLii5lcIixcIiZHb3BmO1wiOlwi8J2UvlwiLFwiJkdyZWF0ZXJFcXVhbDtcIjpcIuKJpVwiLFwiJkdyZWF0ZXJFcXVhbExlc3M7XCI6XCLii5tcIixcIiZHcmVhdGVyRnVsbEVxdWFsO1wiOlwi4omnXCIsXCImR3JlYXRlckdyZWF0ZXI7XCI6XCLiqqJcIixcIiZHcmVhdGVyTGVzcztcIjpcIuKJt1wiLFwiJkdyZWF0ZXJTbGFudEVxdWFsO1wiOlwi4qm+XCIsXCImR3JlYXRlclRpbGRlO1wiOlwi4omzXCIsXCImR3NjcjtcIjpcIvCdkqJcIixcIiZHdDtcIjpcIuKJq1wiLFwiJkhBUkRjeTtcIjpcItCqXCIsXCImSGFjZWs7XCI6XCLLh1wiLFwiJkhhdDtcIjpcIl5cIixcIiZIY2lyYztcIjpcIsSkXCIsXCImSGZyO1wiOlwi4oSMXCIsXCImSGlsYmVydFNwYWNlO1wiOlwi4oSLXCIsXCImSG9wZjtcIjpcIuKEjVwiLFwiJkhvcml6b250YWxMaW5lO1wiOlwi4pSAXCIsXCImSHNjcjtcIjpcIuKEi1wiLFwiJkhzdHJvaztcIjpcIsSmXCIsXCImSHVtcERvd25IdW1wO1wiOlwi4omOXCIsXCImSHVtcEVxdWFsO1wiOlwi4omPXCIsXCImSUVjeTtcIjpcItCVXCIsXCImSUpsaWc7XCI6XCLEslwiLFwiJklPY3k7XCI6XCLQgVwiLFwiJklhY3V0ZVwiOlwiw41cIixcIiZJYWN1dGU7XCI6XCLDjVwiLFwiJkljaXJjXCI6XCLDjlwiLFwiJkljaXJjO1wiOlwiw45cIixcIiZJY3k7XCI6XCLQmFwiLFwiJklkb3Q7XCI6XCLEsFwiLFwiJklmcjtcIjpcIuKEkVwiLFwiJklncmF2ZVwiOlwiw4xcIixcIiZJZ3JhdmU7XCI6XCLDjFwiLFwiJkltO1wiOlwi4oSRXCIsXCImSW1hY3I7XCI6XCLEqlwiLFwiJkltYWdpbmFyeUk7XCI6XCLihYhcIixcIiZJbXBsaWVzO1wiOlwi4oeSXCIsXCImSW50O1wiOlwi4oisXCIsXCImSW50ZWdyYWw7XCI6XCLiiKtcIixcIiZJbnRlcnNlY3Rpb247XCI6XCLii4JcIixcIiZJbnZpc2libGVDb21tYTtcIjpcIuKBo1wiLFwiJkludmlzaWJsZVRpbWVzO1wiOlwi4oGiXCIsXCImSW9nb247XCI6XCLErlwiLFwiJklvcGY7XCI6XCLwnZWAXCIsXCImSW90YTtcIjpcIs6ZXCIsXCImSXNjcjtcIjpcIuKEkFwiLFwiJkl0aWxkZTtcIjpcIsSoXCIsXCImSXVrY3k7XCI6XCLQhlwiLFwiJkl1bWxcIjpcIsOPXCIsXCImSXVtbDtcIjpcIsOPXCIsXCImSmNpcmM7XCI6XCLEtFwiLFwiJkpjeTtcIjpcItCZXCIsXCImSmZyO1wiOlwi8J2UjVwiLFwiJkpvcGY7XCI6XCLwnZWBXCIsXCImSnNjcjtcIjpcIvCdkqVcIixcIiZKc2VyY3k7XCI6XCLQiFwiLFwiJkp1a2N5O1wiOlwi0IRcIixcIiZLSGN5O1wiOlwi0KVcIixcIiZLSmN5O1wiOlwi0IxcIixcIiZLYXBwYTtcIjpcIs6aXCIsXCImS2NlZGlsO1wiOlwixLZcIixcIiZLY3k7XCI6XCLQmlwiLFwiJktmcjtcIjpcIvCdlI5cIixcIiZLb3BmO1wiOlwi8J2VglwiLFwiJktzY3I7XCI6XCLwnZKmXCIsXCImTEpjeTtcIjpcItCJXCIsXCImTFRcIjpcIjxcIixcIiZMVDtcIjpcIjxcIixcIiZMYWN1dGU7XCI6XCLEuVwiLFwiJkxhbWJkYTtcIjpcIs6bXCIsXCImTGFuZztcIjpcIuKfqlwiLFwiJkxhcGxhY2V0cmY7XCI6XCLihJJcIixcIiZMYXJyO1wiOlwi4oaeXCIsXCImTGNhcm9uO1wiOlwixL1cIixcIiZMY2VkaWw7XCI6XCLEu1wiLFwiJkxjeTtcIjpcItCbXCIsXCImTGVmdEFuZ2xlQnJhY2tldDtcIjpcIuKfqFwiLFwiJkxlZnRBcnJvdztcIjpcIuKGkFwiLFwiJkxlZnRBcnJvd0JhcjtcIjpcIuKHpFwiLFwiJkxlZnRBcnJvd1JpZ2h0QXJyb3c7XCI6XCLih4ZcIixcIiZMZWZ0Q2VpbGluZztcIjpcIuKMiFwiLFwiJkxlZnREb3VibGVCcmFja2V0O1wiOlwi4p+mXCIsXCImTGVmdERvd25UZWVWZWN0b3I7XCI6XCLipaFcIixcIiZMZWZ0RG93blZlY3RvcjtcIjpcIuKHg1wiLFwiJkxlZnREb3duVmVjdG9yQmFyO1wiOlwi4qWZXCIsXCImTGVmdEZsb29yO1wiOlwi4oyKXCIsXCImTGVmdFJpZ2h0QXJyb3c7XCI6XCLihpRcIixcIiZMZWZ0UmlnaHRWZWN0b3I7XCI6XCLipY5cIixcIiZMZWZ0VGVlO1wiOlwi4oqjXCIsXCImTGVmdFRlZUFycm93O1wiOlwi4oakXCIsXCImTGVmdFRlZVZlY3RvcjtcIjpcIuKlmlwiLFwiJkxlZnRUcmlhbmdsZTtcIjpcIuKKslwiLFwiJkxlZnRUcmlhbmdsZUJhcjtcIjpcIuKnj1wiLFwiJkxlZnRUcmlhbmdsZUVxdWFsO1wiOlwi4oq0XCIsXCImTGVmdFVwRG93blZlY3RvcjtcIjpcIuKlkVwiLFwiJkxlZnRVcFRlZVZlY3RvcjtcIjpcIuKloFwiLFwiJkxlZnRVcFZlY3RvcjtcIjpcIuKGv1wiLFwiJkxlZnRVcFZlY3RvckJhcjtcIjpcIuKlmFwiLFwiJkxlZnRWZWN0b3I7XCI6XCLihrxcIixcIiZMZWZ0VmVjdG9yQmFyO1wiOlwi4qWSXCIsXCImTGVmdGFycm93O1wiOlwi4oeQXCIsXCImTGVmdHJpZ2h0YXJyb3c7XCI6XCLih5RcIixcIiZMZXNzRXF1YWxHcmVhdGVyO1wiOlwi4ouaXCIsXCImTGVzc0Z1bGxFcXVhbDtcIjpcIuKJplwiLFwiJkxlc3NHcmVhdGVyO1wiOlwi4om2XCIsXCImTGVzc0xlc3M7XCI6XCLiqqFcIixcIiZMZXNzU2xhbnRFcXVhbDtcIjpcIuKpvVwiLFwiJkxlc3NUaWxkZTtcIjpcIuKJslwiLFwiJkxmcjtcIjpcIvCdlI9cIixcIiZMbDtcIjpcIuKLmFwiLFwiJkxsZWZ0YXJyb3c7XCI6XCLih5pcIixcIiZMbWlkb3Q7XCI6XCLEv1wiLFwiJkxvbmdMZWZ0QXJyb3c7XCI6XCLin7VcIixcIiZMb25nTGVmdFJpZ2h0QXJyb3c7XCI6XCLin7dcIixcIiZMb25nUmlnaHRBcnJvdztcIjpcIuKftlwiLFwiJkxvbmdsZWZ0YXJyb3c7XCI6XCLin7hcIixcIiZMb25nbGVmdHJpZ2h0YXJyb3c7XCI6XCLin7pcIixcIiZMb25ncmlnaHRhcnJvdztcIjpcIuKfuVwiLFwiJkxvcGY7XCI6XCLwnZWDXCIsXCImTG93ZXJMZWZ0QXJyb3c7XCI6XCLihplcIixcIiZMb3dlclJpZ2h0QXJyb3c7XCI6XCLihphcIixcIiZMc2NyO1wiOlwi4oSSXCIsXCImTHNoO1wiOlwi4oawXCIsXCImTHN0cm9rO1wiOlwixYFcIixcIiZMdDtcIjpcIuKJqlwiLFwiJk1hcDtcIjpcIuKkhVwiLFwiJk1jeTtcIjpcItCcXCIsXCImTWVkaXVtU3BhY2U7XCI6XCLigZ9cIixcIiZNZWxsaW50cmY7XCI6XCLihLNcIixcIiZNZnI7XCI6XCLwnZSQXCIsXCImTWludXNQbHVzO1wiOlwi4oiTXCIsXCImTW9wZjtcIjpcIvCdlYRcIixcIiZNc2NyO1wiOlwi4oSzXCIsXCImTXU7XCI6XCLOnFwiLFwiJk5KY3k7XCI6XCLQilwiLFwiJk5hY3V0ZTtcIjpcIsWDXCIsXCImTmNhcm9uO1wiOlwixYdcIixcIiZOY2VkaWw7XCI6XCLFhVwiLFwiJk5jeTtcIjpcItCdXCIsXCImTmVnYXRpdmVNZWRpdW1TcGFjZTtcIjpcIuKAi1wiLFwiJk5lZ2F0aXZlVGhpY2tTcGFjZTtcIjpcIuKAi1wiLFwiJk5lZ2F0aXZlVGhpblNwYWNlO1wiOlwi4oCLXCIsXCImTmVnYXRpdmVWZXJ5VGhpblNwYWNlO1wiOlwi4oCLXCIsXCImTmVzdGVkR3JlYXRlckdyZWF0ZXI7XCI6XCLiiatcIixcIiZOZXN0ZWRMZXNzTGVzcztcIjpcIuKJqlwiLFwiJk5ld0xpbmU7XCI6XCJcXG5cIixcIiZOZnI7XCI6XCLwnZSRXCIsXCImTm9CcmVhaztcIjpcIuKBoFwiLFwiJk5vbkJyZWFraW5nU3BhY2U7XCI6XCLCoFwiLFwiJk5vcGY7XCI6XCLihJVcIixcIiZOb3Q7XCI6XCLiq6xcIixcIiZOb3RDb25ncnVlbnQ7XCI6XCLiiaJcIixcIiZOb3RDdXBDYXA7XCI6XCLiia1cIixcIiZOb3REb3VibGVWZXJ0aWNhbEJhcjtcIjpcIuKIplwiLFwiJk5vdEVsZW1lbnQ7XCI6XCLiiIlcIixcIiZOb3RFcXVhbDtcIjpcIuKJoFwiLFwiJk5vdEVxdWFsVGlsZGU7XCI6XCLiiYLMuFwiLFwiJk5vdEV4aXN0cztcIjpcIuKIhFwiLFwiJk5vdEdyZWF0ZXI7XCI6XCLiia9cIixcIiZOb3RHcmVhdGVyRXF1YWw7XCI6XCLiibFcIixcIiZOb3RHcmVhdGVyRnVsbEVxdWFsO1wiOlwi4omnzLhcIixcIiZOb3RHcmVhdGVyR3JlYXRlcjtcIjpcIuKJq8y4XCIsXCImTm90R3JlYXRlckxlc3M7XCI6XCLiiblcIixcIiZOb3RHcmVhdGVyU2xhbnRFcXVhbDtcIjpcIuKpvsy4XCIsXCImTm90R3JlYXRlclRpbGRlO1wiOlwi4om1XCIsXCImTm90SHVtcERvd25IdW1wO1wiOlwi4omOzLhcIixcIiZOb3RIdW1wRXF1YWw7XCI6XCLiiY/MuFwiLFwiJk5vdExlZnRUcmlhbmdsZTtcIjpcIuKLqlwiLFwiJk5vdExlZnRUcmlhbmdsZUJhcjtcIjpcIuKnj8y4XCIsXCImTm90TGVmdFRyaWFuZ2xlRXF1YWw7XCI6XCLii6xcIixcIiZOb3RMZXNzO1wiOlwi4omuXCIsXCImTm90TGVzc0VxdWFsO1wiOlwi4omwXCIsXCImTm90TGVzc0dyZWF0ZXI7XCI6XCLiibhcIixcIiZOb3RMZXNzTGVzcztcIjpcIuKJqsy4XCIsXCImTm90TGVzc1NsYW50RXF1YWw7XCI6XCLiqb3MuFwiLFwiJk5vdExlc3NUaWxkZTtcIjpcIuKJtFwiLFwiJk5vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyO1wiOlwi4qqizLhcIixcIiZOb3ROZXN0ZWRMZXNzTGVzcztcIjpcIuKqocy4XCIsXCImTm90UHJlY2VkZXM7XCI6XCLiioBcIixcIiZOb3RQcmVjZWRlc0VxdWFsO1wiOlwi4qqvzLhcIixcIiZOb3RQcmVjZWRlc1NsYW50RXF1YWw7XCI6XCLii6BcIixcIiZOb3RSZXZlcnNlRWxlbWVudDtcIjpcIuKIjFwiLFwiJk5vdFJpZ2h0VHJpYW5nbGU7XCI6XCLii6tcIixcIiZOb3RSaWdodFRyaWFuZ2xlQmFyO1wiOlwi4qeQzLhcIixcIiZOb3RSaWdodFRyaWFuZ2xlRXF1YWw7XCI6XCLii61cIixcIiZOb3RTcXVhcmVTdWJzZXQ7XCI6XCLiio/MuFwiLFwiJk5vdFNxdWFyZVN1YnNldEVxdWFsO1wiOlwi4ouiXCIsXCImTm90U3F1YXJlU3VwZXJzZXQ7XCI6XCLiipDMuFwiLFwiJk5vdFNxdWFyZVN1cGVyc2V0RXF1YWw7XCI6XCLii6NcIixcIiZOb3RTdWJzZXQ7XCI6XCLiioLig5JcIixcIiZOb3RTdWJzZXRFcXVhbDtcIjpcIuKKiFwiLFwiJk5vdFN1Y2NlZWRzO1wiOlwi4oqBXCIsXCImTm90U3VjY2VlZHNFcXVhbDtcIjpcIuKqsMy4XCIsXCImTm90U3VjY2VlZHNTbGFudEVxdWFsO1wiOlwi4ouhXCIsXCImTm90U3VjY2VlZHNUaWxkZTtcIjpcIuKJv8y4XCIsXCImTm90U3VwZXJzZXQ7XCI6XCLiioPig5JcIixcIiZOb3RTdXBlcnNldEVxdWFsO1wiOlwi4oqJXCIsXCImTm90VGlsZGU7XCI6XCLiiYFcIixcIiZOb3RUaWxkZUVxdWFsO1wiOlwi4omEXCIsXCImTm90VGlsZGVGdWxsRXF1YWw7XCI6XCLiiYdcIixcIiZOb3RUaWxkZVRpbGRlO1wiOlwi4omJXCIsXCImTm90VmVydGljYWxCYXI7XCI6XCLiiKRcIixcIiZOc2NyO1wiOlwi8J2SqVwiLFwiJk50aWxkZVwiOlwiw5FcIixcIiZOdGlsZGU7XCI6XCLDkVwiLFwiJk51O1wiOlwizp1cIixcIiZPRWxpZztcIjpcIsWSXCIsXCImT2FjdXRlXCI6XCLDk1wiLFwiJk9hY3V0ZTtcIjpcIsOTXCIsXCImT2NpcmNcIjpcIsOUXCIsXCImT2NpcmM7XCI6XCLDlFwiLFwiJk9jeTtcIjpcItCeXCIsXCImT2RibGFjO1wiOlwixZBcIixcIiZPZnI7XCI6XCLwnZSSXCIsXCImT2dyYXZlXCI6XCLDklwiLFwiJk9ncmF2ZTtcIjpcIsOSXCIsXCImT21hY3I7XCI6XCLFjFwiLFwiJk9tZWdhO1wiOlwizqlcIixcIiZPbWljcm9uO1wiOlwizp9cIixcIiZPb3BmO1wiOlwi8J2VhlwiLFwiJk9wZW5DdXJseURvdWJsZVF1b3RlO1wiOlwi4oCcXCIsXCImT3BlbkN1cmx5UXVvdGU7XCI6XCLigJhcIixcIiZPcjtcIjpcIuKplFwiLFwiJk9zY3I7XCI6XCLwnZKqXCIsXCImT3NsYXNoXCI6XCLDmFwiLFwiJk9zbGFzaDtcIjpcIsOYXCIsXCImT3RpbGRlXCI6XCLDlVwiLFwiJk90aWxkZTtcIjpcIsOVXCIsXCImT3RpbWVzO1wiOlwi4qi3XCIsXCImT3VtbFwiOlwiw5ZcIixcIiZPdW1sO1wiOlwiw5ZcIixcIiZPdmVyQmFyO1wiOlwi4oC+XCIsXCImT3ZlckJyYWNlO1wiOlwi4o+eXCIsXCImT3ZlckJyYWNrZXQ7XCI6XCLijrRcIixcIiZPdmVyUGFyZW50aGVzaXM7XCI6XCLij5xcIixcIiZQYXJ0aWFsRDtcIjpcIuKIglwiLFwiJlBjeTtcIjpcItCfXCIsXCImUGZyO1wiOlwi8J2Uk1wiLFwiJlBoaTtcIjpcIs6mXCIsXCImUGk7XCI6XCLOoFwiLFwiJlBsdXNNaW51cztcIjpcIsKxXCIsXCImUG9pbmNhcmVwbGFuZTtcIjpcIuKEjFwiLFwiJlBvcGY7XCI6XCLihJlcIixcIiZQcjtcIjpcIuKqu1wiLFwiJlByZWNlZGVzO1wiOlwi4om6XCIsXCImUHJlY2VkZXNFcXVhbDtcIjpcIuKqr1wiLFwiJlByZWNlZGVzU2xhbnRFcXVhbDtcIjpcIuKJvFwiLFwiJlByZWNlZGVzVGlsZGU7XCI6XCLiib5cIixcIiZQcmltZTtcIjpcIuKAs1wiLFwiJlByb2R1Y3Q7XCI6XCLiiI9cIixcIiZQcm9wb3J0aW9uO1wiOlwi4oi3XCIsXCImUHJvcG9ydGlvbmFsO1wiOlwi4oidXCIsXCImUHNjcjtcIjpcIvCdkqtcIixcIiZQc2k7XCI6XCLOqFwiLFwiJlFVT1RcIjonXCInLFwiJlFVT1Q7XCI6J1wiJyxcIiZRZnI7XCI6XCLwnZSUXCIsXCImUW9wZjtcIjpcIuKEmlwiLFwiJlFzY3I7XCI6XCLwnZKsXCIsXCImUkJhcnI7XCI6XCLipJBcIixcIiZSRUdcIjpcIsKuXCIsXCImUkVHO1wiOlwiwq5cIixcIiZSYWN1dGU7XCI6XCLFlFwiLFwiJlJhbmc7XCI6XCLin6tcIixcIiZSYXJyO1wiOlwi4oagXCIsXCImUmFycnRsO1wiOlwi4qSWXCIsXCImUmNhcm9uO1wiOlwixZhcIixcIiZSY2VkaWw7XCI6XCLFllwiLFwiJlJjeTtcIjpcItCgXCIsXCImUmU7XCI6XCLihJxcIixcIiZSZXZlcnNlRWxlbWVudDtcIjpcIuKIi1wiLFwiJlJldmVyc2VFcXVpbGlicml1bTtcIjpcIuKHi1wiLFwiJlJldmVyc2VVcEVxdWlsaWJyaXVtO1wiOlwi4qWvXCIsXCImUmZyO1wiOlwi4oScXCIsXCImUmhvO1wiOlwizqFcIixcIiZSaWdodEFuZ2xlQnJhY2tldDtcIjpcIuKfqVwiLFwiJlJpZ2h0QXJyb3c7XCI6XCLihpJcIixcIiZSaWdodEFycm93QmFyO1wiOlwi4oelXCIsXCImUmlnaHRBcnJvd0xlZnRBcnJvdztcIjpcIuKHhFwiLFwiJlJpZ2h0Q2VpbGluZztcIjpcIuKMiVwiLFwiJlJpZ2h0RG91YmxlQnJhY2tldDtcIjpcIuKfp1wiLFwiJlJpZ2h0RG93blRlZVZlY3RvcjtcIjpcIuKlnVwiLFwiJlJpZ2h0RG93blZlY3RvcjtcIjpcIuKHglwiLFwiJlJpZ2h0RG93blZlY3RvckJhcjtcIjpcIuKllVwiLFwiJlJpZ2h0Rmxvb3I7XCI6XCLijItcIixcIiZSaWdodFRlZTtcIjpcIuKKolwiLFwiJlJpZ2h0VGVlQXJyb3c7XCI6XCLihqZcIixcIiZSaWdodFRlZVZlY3RvcjtcIjpcIuKlm1wiLFwiJlJpZ2h0VHJpYW5nbGU7XCI6XCLiirNcIixcIiZSaWdodFRyaWFuZ2xlQmFyO1wiOlwi4qeQXCIsXCImUmlnaHRUcmlhbmdsZUVxdWFsO1wiOlwi4oq1XCIsXCImUmlnaHRVcERvd25WZWN0b3I7XCI6XCLipY9cIixcIiZSaWdodFVwVGVlVmVjdG9yO1wiOlwi4qWcXCIsXCImUmlnaHRVcFZlY3RvcjtcIjpcIuKGvlwiLFwiJlJpZ2h0VXBWZWN0b3JCYXI7XCI6XCLipZRcIixcIiZSaWdodFZlY3RvcjtcIjpcIuKHgFwiLFwiJlJpZ2h0VmVjdG9yQmFyO1wiOlwi4qWTXCIsXCImUmlnaHRhcnJvdztcIjpcIuKHklwiLFwiJlJvcGY7XCI6XCLihJ1cIixcIiZSb3VuZEltcGxpZXM7XCI6XCLipbBcIixcIiZScmlnaHRhcnJvdztcIjpcIuKHm1wiLFwiJlJzY3I7XCI6XCLihJtcIixcIiZSc2g7XCI6XCLihrFcIixcIiZSdWxlRGVsYXllZDtcIjpcIuKntFwiLFwiJlNIQ0hjeTtcIjpcItCpXCIsXCImU0hjeTtcIjpcItCoXCIsXCImU09GVGN5O1wiOlwi0KxcIixcIiZTYWN1dGU7XCI6XCLFmlwiLFwiJlNjO1wiOlwi4qq8XCIsXCImU2Nhcm9uO1wiOlwixaBcIixcIiZTY2VkaWw7XCI6XCLFnlwiLFwiJlNjaXJjO1wiOlwixZxcIixcIiZTY3k7XCI6XCLQoVwiLFwiJlNmcjtcIjpcIvCdlJZcIixcIiZTaG9ydERvd25BcnJvdztcIjpcIuKGk1wiLFwiJlNob3J0TGVmdEFycm93O1wiOlwi4oaQXCIsXCImU2hvcnRSaWdodEFycm93O1wiOlwi4oaSXCIsXCImU2hvcnRVcEFycm93O1wiOlwi4oaRXCIsXCImU2lnbWE7XCI6XCLOo1wiLFwiJlNtYWxsQ2lyY2xlO1wiOlwi4oiYXCIsXCImU29wZjtcIjpcIvCdlYpcIixcIiZTcXJ0O1wiOlwi4oiaXCIsXCImU3F1YXJlO1wiOlwi4pahXCIsXCImU3F1YXJlSW50ZXJzZWN0aW9uO1wiOlwi4oqTXCIsXCImU3F1YXJlU3Vic2V0O1wiOlwi4oqPXCIsXCImU3F1YXJlU3Vic2V0RXF1YWw7XCI6XCLiipFcIixcIiZTcXVhcmVTdXBlcnNldDtcIjpcIuKKkFwiLFwiJlNxdWFyZVN1cGVyc2V0RXF1YWw7XCI6XCLiipJcIixcIiZTcXVhcmVVbmlvbjtcIjpcIuKKlFwiLFwiJlNzY3I7XCI6XCLwnZKuXCIsXCImU3RhcjtcIjpcIuKLhlwiLFwiJlN1YjtcIjpcIuKLkFwiLFwiJlN1YnNldDtcIjpcIuKLkFwiLFwiJlN1YnNldEVxdWFsO1wiOlwi4oqGXCIsXCImU3VjY2VlZHM7XCI6XCLiibtcIixcIiZTdWNjZWVkc0VxdWFsO1wiOlwi4qqwXCIsXCImU3VjY2VlZHNTbGFudEVxdWFsO1wiOlwi4om9XCIsXCImU3VjY2VlZHNUaWxkZTtcIjpcIuKJv1wiLFwiJlN1Y2hUaGF0O1wiOlwi4oiLXCIsXCImU3VtO1wiOlwi4oiRXCIsXCImU3VwO1wiOlwi4ouRXCIsXCImU3VwZXJzZXQ7XCI6XCLiioNcIixcIiZTdXBlcnNldEVxdWFsO1wiOlwi4oqHXCIsXCImU3Vwc2V0O1wiOlwi4ouRXCIsXCImVEhPUk5cIjpcIsOeXCIsXCImVEhPUk47XCI6XCLDnlwiLFwiJlRSQURFO1wiOlwi4oSiXCIsXCImVFNIY3k7XCI6XCLQi1wiLFwiJlRTY3k7XCI6XCLQplwiLFwiJlRhYjtcIjpcIlxcdFwiLFwiJlRhdTtcIjpcIs6kXCIsXCImVGNhcm9uO1wiOlwixaRcIixcIiZUY2VkaWw7XCI6XCLFolwiLFwiJlRjeTtcIjpcItCiXCIsXCImVGZyO1wiOlwi8J2Ul1wiLFwiJlRoZXJlZm9yZTtcIjpcIuKItFwiLFwiJlRoZXRhO1wiOlwizphcIixcIiZUaGlja1NwYWNlO1wiOlwi4oGf4oCKXCIsXCImVGhpblNwYWNlO1wiOlwi4oCJXCIsXCImVGlsZGU7XCI6XCLiiLxcIixcIiZUaWxkZUVxdWFsO1wiOlwi4omDXCIsXCImVGlsZGVGdWxsRXF1YWw7XCI6XCLiiYVcIixcIiZUaWxkZVRpbGRlO1wiOlwi4omIXCIsXCImVG9wZjtcIjpcIvCdlYtcIixcIiZUcmlwbGVEb3Q7XCI6XCLig5tcIixcIiZUc2NyO1wiOlwi8J2Sr1wiLFwiJlRzdHJvaztcIjpcIsWmXCIsXCImVWFjdXRlXCI6XCLDmlwiLFwiJlVhY3V0ZTtcIjpcIsOaXCIsXCImVWFycjtcIjpcIuKGn1wiLFwiJlVhcnJvY2lyO1wiOlwi4qWJXCIsXCImVWJyY3k7XCI6XCLQjlwiLFwiJlVicmV2ZTtcIjpcIsWsXCIsXCImVWNpcmNcIjpcIsObXCIsXCImVWNpcmM7XCI6XCLDm1wiLFwiJlVjeTtcIjpcItCjXCIsXCImVWRibGFjO1wiOlwixbBcIixcIiZVZnI7XCI6XCLwnZSYXCIsXCImVWdyYXZlXCI6XCLDmVwiLFwiJlVncmF2ZTtcIjpcIsOZXCIsXCImVW1hY3I7XCI6XCLFqlwiLFwiJlVuZGVyQmFyO1wiOlwiX1wiLFwiJlVuZGVyQnJhY2U7XCI6XCLij59cIixcIiZVbmRlckJyYWNrZXQ7XCI6XCLijrVcIixcIiZVbmRlclBhcmVudGhlc2lzO1wiOlwi4o+dXCIsXCImVW5pb247XCI6XCLii4NcIixcIiZVbmlvblBsdXM7XCI6XCLiio5cIixcIiZVb2dvbjtcIjpcIsWyXCIsXCImVW9wZjtcIjpcIvCdlYxcIixcIiZVcEFycm93O1wiOlwi4oaRXCIsXCImVXBBcnJvd0JhcjtcIjpcIuKkklwiLFwiJlVwQXJyb3dEb3duQXJyb3c7XCI6XCLih4VcIixcIiZVcERvd25BcnJvdztcIjpcIuKGlVwiLFwiJlVwRXF1aWxpYnJpdW07XCI6XCLipa5cIixcIiZVcFRlZTtcIjpcIuKKpVwiLFwiJlVwVGVlQXJyb3c7XCI6XCLihqVcIixcIiZVcGFycm93O1wiOlwi4oeRXCIsXCImVXBkb3duYXJyb3c7XCI6XCLih5VcIixcIiZVcHBlckxlZnRBcnJvdztcIjpcIuKGllwiLFwiJlVwcGVyUmlnaHRBcnJvdztcIjpcIuKGl1wiLFwiJlVwc2k7XCI6XCLPklwiLFwiJlVwc2lsb247XCI6XCLOpVwiLFwiJlVyaW5nO1wiOlwixa5cIixcIiZVc2NyO1wiOlwi8J2SsFwiLFwiJlV0aWxkZTtcIjpcIsWoXCIsXCImVXVtbFwiOlwiw5xcIixcIiZVdW1sO1wiOlwiw5xcIixcIiZWRGFzaDtcIjpcIuKKq1wiLFwiJlZiYXI7XCI6XCLiq6tcIixcIiZWY3k7XCI6XCLQklwiLFwiJlZkYXNoO1wiOlwi4oqpXCIsXCImVmRhc2hsO1wiOlwi4qumXCIsXCImVmVlO1wiOlwi4ouBXCIsXCImVmVyYmFyO1wiOlwi4oCWXCIsXCImVmVydDtcIjpcIuKAllwiLFwiJlZlcnRpY2FsQmFyO1wiOlwi4oijXCIsXCImVmVydGljYWxMaW5lO1wiOlwifFwiLFwiJlZlcnRpY2FsU2VwYXJhdG9yO1wiOlwi4p2YXCIsXCImVmVydGljYWxUaWxkZTtcIjpcIuKJgFwiLFwiJlZlcnlUaGluU3BhY2U7XCI6XCLigIpcIixcIiZWZnI7XCI6XCLwnZSZXCIsXCImVm9wZjtcIjpcIvCdlY1cIixcIiZWc2NyO1wiOlwi8J2SsVwiLFwiJlZ2ZGFzaDtcIjpcIuKKqlwiLFwiJldjaXJjO1wiOlwixbRcIixcIiZXZWRnZTtcIjpcIuKLgFwiLFwiJldmcjtcIjpcIvCdlJpcIixcIiZXb3BmO1wiOlwi8J2VjlwiLFwiJldzY3I7XCI6XCLwnZKyXCIsXCImWGZyO1wiOlwi8J2Um1wiLFwiJlhpO1wiOlwizp5cIixcIiZYb3BmO1wiOlwi8J2Vj1wiLFwiJlhzY3I7XCI6XCLwnZKzXCIsXCImWUFjeTtcIjpcItCvXCIsXCImWUljeTtcIjpcItCHXCIsXCImWVVjeTtcIjpcItCuXCIsXCImWWFjdXRlXCI6XCLDnVwiLFwiJllhY3V0ZTtcIjpcIsOdXCIsXCImWWNpcmM7XCI6XCLFtlwiLFwiJlljeTtcIjpcItCrXCIsXCImWWZyO1wiOlwi8J2UnFwiLFwiJllvcGY7XCI6XCLwnZWQXCIsXCImWXNjcjtcIjpcIvCdkrRcIixcIiZZdW1sO1wiOlwixbhcIixcIiZaSGN5O1wiOlwi0JZcIixcIiZaYWN1dGU7XCI6XCLFuVwiLFwiJlpjYXJvbjtcIjpcIsW9XCIsXCImWmN5O1wiOlwi0JdcIixcIiZaZG90O1wiOlwixbtcIixcIiZaZXJvV2lkdGhTcGFjZTtcIjpcIuKAi1wiLFwiJlpldGE7XCI6XCLOllwiLFwiJlpmcjtcIjpcIuKEqFwiLFwiJlpvcGY7XCI6XCLihKRcIixcIiZac2NyO1wiOlwi8J2StVwiLFwiJmFhY3V0ZVwiOlwiw6FcIixcIiZhYWN1dGU7XCI6XCLDoVwiLFwiJmFicmV2ZTtcIjpcIsSDXCIsXCImYWM7XCI6XCLiiL5cIixcIiZhY0U7XCI6XCLiiL7Ms1wiLFwiJmFjZDtcIjpcIuKIv1wiLFwiJmFjaXJjXCI6XCLDolwiLFwiJmFjaXJjO1wiOlwiw6JcIixcIiZhY3V0ZVwiOlwiwrRcIixcIiZhY3V0ZTtcIjpcIsK0XCIsXCImYWN5O1wiOlwi0LBcIixcIiZhZWxpZ1wiOlwiw6ZcIixcIiZhZWxpZztcIjpcIsOmXCIsXCImYWY7XCI6XCLigaFcIixcIiZhZnI7XCI6XCLwnZSeXCIsXCImYWdyYXZlXCI6XCLDoFwiLFwiJmFncmF2ZTtcIjpcIsOgXCIsXCImYWxlZnN5bTtcIjpcIuKEtVwiLFwiJmFsZXBoO1wiOlwi4oS1XCIsXCImYWxwaGE7XCI6XCLOsVwiLFwiJmFtYWNyO1wiOlwixIFcIixcIiZhbWFsZztcIjpcIuKov1wiLFwiJmFtcFwiOlwiJlwiLFwiJmFtcDtcIjpcIiZcIixcIiZhbmQ7XCI6XCLiiKdcIixcIiZhbmRhbmQ7XCI6XCLiqZVcIixcIiZhbmRkO1wiOlwi4qmcXCIsXCImYW5kc2xvcGU7XCI6XCLiqZhcIixcIiZhbmR2O1wiOlwi4qmaXCIsXCImYW5nO1wiOlwi4oigXCIsXCImYW5nZTtcIjpcIuKmpFwiLFwiJmFuZ2xlO1wiOlwi4oigXCIsXCImYW5nbXNkO1wiOlwi4oihXCIsXCImYW5nbXNkYWE7XCI6XCLipqhcIixcIiZhbmdtc2RhYjtcIjpcIuKmqVwiLFwiJmFuZ21zZGFjO1wiOlwi4qaqXCIsXCImYW5nbXNkYWQ7XCI6XCLipqtcIixcIiZhbmdtc2RhZTtcIjpcIuKmrFwiLFwiJmFuZ21zZGFmO1wiOlwi4qatXCIsXCImYW5nbXNkYWc7XCI6XCLipq5cIixcIiZhbmdtc2RhaDtcIjpcIuKmr1wiLFwiJmFuZ3J0O1wiOlwi4oifXCIsXCImYW5ncnR2YjtcIjpcIuKKvlwiLFwiJmFuZ3J0dmJkO1wiOlwi4qadXCIsXCImYW5nc3BoO1wiOlwi4oiiXCIsXCImYW5nc3Q7XCI6XCLDhVwiLFwiJmFuZ3phcnI7XCI6XCLijbxcIixcIiZhb2dvbjtcIjpcIsSFXCIsXCImYW9wZjtcIjpcIvCdlZJcIixcIiZhcDtcIjpcIuKJiFwiLFwiJmFwRTtcIjpcIuKpsFwiLFwiJmFwYWNpcjtcIjpcIuKpr1wiLFwiJmFwZTtcIjpcIuKJilwiLFwiJmFwaWQ7XCI6XCLiiYtcIixcIiZhcG9zO1wiOlwiJ1wiLFwiJmFwcHJveDtcIjpcIuKJiFwiLFwiJmFwcHJveGVxO1wiOlwi4omKXCIsXCImYXJpbmdcIjpcIsOlXCIsXCImYXJpbmc7XCI6XCLDpVwiLFwiJmFzY3I7XCI6XCLwnZK2XCIsXCImYXN0O1wiOlwiKlwiLFwiJmFzeW1wO1wiOlwi4omIXCIsXCImYXN5bXBlcTtcIjpcIuKJjVwiLFwiJmF0aWxkZVwiOlwiw6NcIixcIiZhdGlsZGU7XCI6XCLDo1wiLFwiJmF1bWxcIjpcIsOkXCIsXCImYXVtbDtcIjpcIsOkXCIsXCImYXdjb25pbnQ7XCI6XCLiiLNcIixcIiZhd2ludDtcIjpcIuKokVwiLFwiJmJOb3Q7XCI6XCLiq61cIixcIiZiYWNrY29uZztcIjpcIuKJjFwiLFwiJmJhY2tlcHNpbG9uO1wiOlwiz7ZcIixcIiZiYWNrcHJpbWU7XCI6XCLigLVcIixcIiZiYWNrc2ltO1wiOlwi4oi9XCIsXCImYmFja3NpbWVxO1wiOlwi4ouNXCIsXCImYmFydmVlO1wiOlwi4oq9XCIsXCImYmFyd2VkO1wiOlwi4oyFXCIsXCImYmFyd2VkZ2U7XCI6XCLijIVcIixcIiZiYnJrO1wiOlwi4o61XCIsXCImYmJya3Ricms7XCI6XCLijrZcIixcIiZiY29uZztcIjpcIuKJjFwiLFwiJmJjeTtcIjpcItCxXCIsXCImYmRxdW87XCI6XCLigJ5cIixcIiZiZWNhdXM7XCI6XCLiiLVcIixcIiZiZWNhdXNlO1wiOlwi4oi1XCIsXCImYmVtcHR5djtcIjpcIuKmsFwiLFwiJmJlcHNpO1wiOlwiz7ZcIixcIiZiZXJub3U7XCI6XCLihKxcIixcIiZiZXRhO1wiOlwizrJcIixcIiZiZXRoO1wiOlwi4oS2XCIsXCImYmV0d2VlbjtcIjpcIuKJrFwiLFwiJmJmcjtcIjpcIvCdlJ9cIixcIiZiaWdjYXA7XCI6XCLii4JcIixcIiZiaWdjaXJjO1wiOlwi4pevXCIsXCImYmlnY3VwO1wiOlwi4ouDXCIsXCImYmlnb2RvdDtcIjpcIuKogFwiLFwiJmJpZ29wbHVzO1wiOlwi4qiBXCIsXCImYmlnb3RpbWVzO1wiOlwi4qiCXCIsXCImYmlnc3FjdXA7XCI6XCLiqIZcIixcIiZiaWdzdGFyO1wiOlwi4piFXCIsXCImYmlndHJpYW5nbGVkb3duO1wiOlwi4pa9XCIsXCImYmlndHJpYW5nbGV1cDtcIjpcIuKWs1wiLFwiJmJpZ3VwbHVzO1wiOlwi4qiEXCIsXCImYmlndmVlO1wiOlwi4ouBXCIsXCImYmlnd2VkZ2U7XCI6XCLii4BcIixcIiZia2Fyb3c7XCI6XCLipI1cIixcIiZibGFja2xvemVuZ2U7XCI6XCLip6tcIixcIiZibGFja3NxdWFyZTtcIjpcIuKWqlwiLFwiJmJsYWNrdHJpYW5nbGU7XCI6XCLilrRcIixcIiZibGFja3RyaWFuZ2xlZG93bjtcIjpcIuKWvlwiLFwiJmJsYWNrdHJpYW5nbGVsZWZ0O1wiOlwi4peCXCIsXCImYmxhY2t0cmlhbmdsZXJpZ2h0O1wiOlwi4pa4XCIsXCImYmxhbms7XCI6XCLikKNcIixcIiZibGsxMjtcIjpcIuKWklwiLFwiJmJsazE0O1wiOlwi4paRXCIsXCImYmxrMzQ7XCI6XCLilpNcIixcIiZibG9jaztcIjpcIuKWiFwiLFwiJmJuZTtcIjpcIj3ig6VcIixcIiZibmVxdWl2O1wiOlwi4omh4oOlXCIsXCImYm5vdDtcIjpcIuKMkFwiLFwiJmJvcGY7XCI6XCLwnZWTXCIsXCImYm90O1wiOlwi4oqlXCIsXCImYm90dG9tO1wiOlwi4oqlXCIsXCImYm93dGllO1wiOlwi4ouIXCIsXCImYm94REw7XCI6XCLilZdcIixcIiZib3hEUjtcIjpcIuKVlFwiLFwiJmJveERsO1wiOlwi4pWWXCIsXCImYm94RHI7XCI6XCLilZNcIixcIiZib3hIO1wiOlwi4pWQXCIsXCImYm94SEQ7XCI6XCLilaZcIixcIiZib3hIVTtcIjpcIuKVqVwiLFwiJmJveEhkO1wiOlwi4pWkXCIsXCImYm94SHU7XCI6XCLiladcIixcIiZib3hVTDtcIjpcIuKVnVwiLFwiJmJveFVSO1wiOlwi4pWaXCIsXCImYm94VWw7XCI6XCLilZxcIixcIiZib3hVcjtcIjpcIuKVmVwiLFwiJmJveFY7XCI6XCLilZFcIixcIiZib3hWSDtcIjpcIuKVrFwiLFwiJmJveFZMO1wiOlwi4pWjXCIsXCImYm94VlI7XCI6XCLilaBcIixcIiZib3hWaDtcIjpcIuKVq1wiLFwiJmJveFZsO1wiOlwi4pWiXCIsXCImYm94VnI7XCI6XCLilZ9cIixcIiZib3hib3g7XCI6XCLip4lcIixcIiZib3hkTDtcIjpcIuKVlVwiLFwiJmJveGRSO1wiOlwi4pWSXCIsXCImYm94ZGw7XCI6XCLilJBcIixcIiZib3hkcjtcIjpcIuKUjFwiLFwiJmJveGg7XCI6XCLilIBcIixcIiZib3hoRDtcIjpcIuKVpVwiLFwiJmJveGhVO1wiOlwi4pWoXCIsXCImYm94aGQ7XCI6XCLilKxcIixcIiZib3hodTtcIjpcIuKUtFwiLFwiJmJveG1pbnVzO1wiOlwi4oqfXCIsXCImYm94cGx1cztcIjpcIuKKnlwiLFwiJmJveHRpbWVzO1wiOlwi4oqgXCIsXCImYm94dUw7XCI6XCLilZtcIixcIiZib3h1UjtcIjpcIuKVmFwiLFwiJmJveHVsO1wiOlwi4pSYXCIsXCImYm94dXI7XCI6XCLilJRcIixcIiZib3h2O1wiOlwi4pSCXCIsXCImYm94dkg7XCI6XCLilapcIixcIiZib3h2TDtcIjpcIuKVoVwiLFwiJmJveHZSO1wiOlwi4pWeXCIsXCImYm94dmg7XCI6XCLilLxcIixcIiZib3h2bDtcIjpcIuKUpFwiLFwiJmJveHZyO1wiOlwi4pScXCIsXCImYnByaW1lO1wiOlwi4oC1XCIsXCImYnJldmU7XCI6XCLLmFwiLFwiJmJydmJhclwiOlwiwqZcIixcIiZicnZiYXI7XCI6XCLCplwiLFwiJmJzY3I7XCI6XCLwnZK3XCIsXCImYnNlbWk7XCI6XCLigY9cIixcIiZic2ltO1wiOlwi4oi9XCIsXCImYnNpbWU7XCI6XCLii41cIixcIiZic29sO1wiOlwiXFxcXFwiLFwiJmJzb2xiO1wiOlwi4qeFXCIsXCImYnNvbGhzdWI7XCI6XCLin4hcIixcIiZidWxsO1wiOlwi4oCiXCIsXCImYnVsbGV0O1wiOlwi4oCiXCIsXCImYnVtcDtcIjpcIuKJjlwiLFwiJmJ1bXBFO1wiOlwi4qquXCIsXCImYnVtcGU7XCI6XCLiiY9cIixcIiZidW1wZXE7XCI6XCLiiY9cIixcIiZjYWN1dGU7XCI6XCLEh1wiLFwiJmNhcDtcIjpcIuKIqVwiLFwiJmNhcGFuZDtcIjpcIuKphFwiLFwiJmNhcGJyY3VwO1wiOlwi4qmJXCIsXCImY2FwY2FwO1wiOlwi4qmLXCIsXCImY2FwY3VwO1wiOlwi4qmHXCIsXCImY2FwZG90O1wiOlwi4qmAXCIsXCImY2FwcztcIjpcIuKIqe+4gFwiLFwiJmNhcmV0O1wiOlwi4oGBXCIsXCImY2Fyb247XCI6XCLLh1wiLFwiJmNjYXBzO1wiOlwi4qmNXCIsXCImY2Nhcm9uO1wiOlwixI1cIixcIiZjY2VkaWxcIjpcIsOnXCIsXCImY2NlZGlsO1wiOlwiw6dcIixcIiZjY2lyYztcIjpcIsSJXCIsXCImY2N1cHM7XCI6XCLiqYxcIixcIiZjY3Vwc3NtO1wiOlwi4qmQXCIsXCImY2RvdDtcIjpcIsSLXCIsXCImY2VkaWxcIjpcIsK4XCIsXCImY2VkaWw7XCI6XCLCuFwiLFwiJmNlbXB0eXY7XCI6XCLiprJcIixcIiZjZW50XCI6XCLColwiLFwiJmNlbnQ7XCI6XCLColwiLFwiJmNlbnRlcmRvdDtcIjpcIsK3XCIsXCImY2ZyO1wiOlwi8J2UoFwiLFwiJmNoY3k7XCI6XCLRh1wiLFwiJmNoZWNrO1wiOlwi4pyTXCIsXCImY2hlY2ttYXJrO1wiOlwi4pyTXCIsXCImY2hpO1wiOlwiz4dcIixcIiZjaXI7XCI6XCLil4tcIixcIiZjaXJFO1wiOlwi4qeDXCIsXCImY2lyYztcIjpcIsuGXCIsXCImY2lyY2VxO1wiOlwi4omXXCIsXCImY2lyY2xlYXJyb3dsZWZ0O1wiOlwi4oa6XCIsXCImY2lyY2xlYXJyb3dyaWdodDtcIjpcIuKGu1wiLFwiJmNpcmNsZWRSO1wiOlwiwq5cIixcIiZjaXJjbGVkUztcIjpcIuKTiFwiLFwiJmNpcmNsZWRhc3Q7XCI6XCLiiptcIixcIiZjaXJjbGVkY2lyYztcIjpcIuKKmlwiLFwiJmNpcmNsZWRkYXNoO1wiOlwi4oqdXCIsXCImY2lyZTtcIjpcIuKJl1wiLFwiJmNpcmZuaW50O1wiOlwi4qiQXCIsXCImY2lybWlkO1wiOlwi4quvXCIsXCImY2lyc2NpcjtcIjpcIuKnglwiLFwiJmNsdWJzO1wiOlwi4pmjXCIsXCImY2x1YnN1aXQ7XCI6XCLimaNcIixcIiZjb2xvbjtcIjpcIjpcIixcIiZjb2xvbmU7XCI6XCLiiZRcIixcIiZjb2xvbmVxO1wiOlwi4omUXCIsXCImY29tbWE7XCI6XCIsXCIsXCImY29tbWF0O1wiOlwiQFwiLFwiJmNvbXA7XCI6XCLiiIFcIixcIiZjb21wZm47XCI6XCLiiJhcIixcIiZjb21wbGVtZW50O1wiOlwi4oiBXCIsXCImY29tcGxleGVzO1wiOlwi4oSCXCIsXCImY29uZztcIjpcIuKJhVwiLFwiJmNvbmdkb3Q7XCI6XCLiqa1cIixcIiZjb25pbnQ7XCI6XCLiiK5cIixcIiZjb3BmO1wiOlwi8J2VlFwiLFwiJmNvcHJvZDtcIjpcIuKIkFwiLFwiJmNvcHlcIjpcIsKpXCIsXCImY29weTtcIjpcIsKpXCIsXCImY29weXNyO1wiOlwi4oSXXCIsXCImY3JhcnI7XCI6XCLihrVcIixcIiZjcm9zcztcIjpcIuKcl1wiLFwiJmNzY3I7XCI6XCLwnZK4XCIsXCImY3N1YjtcIjpcIuKrj1wiLFwiJmNzdWJlO1wiOlwi4quRXCIsXCImY3N1cDtcIjpcIuKrkFwiLFwiJmNzdXBlO1wiOlwi4quSXCIsXCImY3Rkb3Q7XCI6XCLii69cIixcIiZjdWRhcnJsO1wiOlwi4qS4XCIsXCImY3VkYXJycjtcIjpcIuKktVwiLFwiJmN1ZXByO1wiOlwi4oueXCIsXCImY3Vlc2M7XCI6XCLii59cIixcIiZjdWxhcnI7XCI6XCLihrZcIixcIiZjdWxhcnJwO1wiOlwi4qS9XCIsXCImY3VwO1wiOlwi4oiqXCIsXCImY3VwYnJjYXA7XCI6XCLiqYhcIixcIiZjdXBjYXA7XCI6XCLiqYZcIixcIiZjdXBjdXA7XCI6XCLiqYpcIixcIiZjdXBkb3Q7XCI6XCLiio1cIixcIiZjdXBvcjtcIjpcIuKphVwiLFwiJmN1cHM7XCI6XCLiiKrvuIBcIixcIiZjdXJhcnI7XCI6XCLihrdcIixcIiZjdXJhcnJtO1wiOlwi4qS8XCIsXCImY3VybHllcXByZWM7XCI6XCLii55cIixcIiZjdXJseWVxc3VjYztcIjpcIuKLn1wiLFwiJmN1cmx5dmVlO1wiOlwi4ouOXCIsXCImY3VybHl3ZWRnZTtcIjpcIuKLj1wiLFwiJmN1cnJlblwiOlwiwqRcIixcIiZjdXJyZW47XCI6XCLCpFwiLFwiJmN1cnZlYXJyb3dsZWZ0O1wiOlwi4oa2XCIsXCImY3VydmVhcnJvd3JpZ2h0O1wiOlwi4oa3XCIsXCImY3V2ZWU7XCI6XCLii45cIixcIiZjdXdlZDtcIjpcIuKLj1wiLFwiJmN3Y29uaW50O1wiOlwi4oiyXCIsXCImY3dpbnQ7XCI6XCLiiLFcIixcIiZjeWxjdHk7XCI6XCLijK1cIixcIiZkQXJyO1wiOlwi4oeTXCIsXCImZEhhcjtcIjpcIuKlpVwiLFwiJmRhZ2dlcjtcIjpcIuKAoFwiLFwiJmRhbGV0aDtcIjpcIuKEuFwiLFwiJmRhcnI7XCI6XCLihpNcIixcIiZkYXNoO1wiOlwi4oCQXCIsXCImZGFzaHY7XCI6XCLiiqNcIixcIiZkYmthcm93O1wiOlwi4qSPXCIsXCImZGJsYWM7XCI6XCLLnVwiLFwiJmRjYXJvbjtcIjpcIsSPXCIsXCImZGN5O1wiOlwi0LRcIixcIiZkZDtcIjpcIuKFhlwiLFwiJmRkYWdnZXI7XCI6XCLigKFcIixcIiZkZGFycjtcIjpcIuKHilwiLFwiJmRkb3RzZXE7XCI6XCLiqbdcIixcIiZkZWdcIjpcIsKwXCIsXCImZGVnO1wiOlwiwrBcIixcIiZkZWx0YTtcIjpcIs60XCIsXCImZGVtcHR5djtcIjpcIuKmsVwiLFwiJmRmaXNodDtcIjpcIuKlv1wiLFwiJmRmcjtcIjpcIvCdlKFcIixcIiZkaGFybDtcIjpcIuKHg1wiLFwiJmRoYXJyO1wiOlwi4oeCXCIsXCImZGlhbTtcIjpcIuKLhFwiLFwiJmRpYW1vbmQ7XCI6XCLii4RcIixcIiZkaWFtb25kc3VpdDtcIjpcIuKZplwiLFwiJmRpYW1zO1wiOlwi4pmmXCIsXCImZGllO1wiOlwiwqhcIixcIiZkaWdhbW1hO1wiOlwiz51cIixcIiZkaXNpbjtcIjpcIuKLslwiLFwiJmRpdjtcIjpcIsO3XCIsXCImZGl2aWRlXCI6XCLDt1wiLFwiJmRpdmlkZTtcIjpcIsO3XCIsXCImZGl2aWRlb250aW1lcztcIjpcIuKLh1wiLFwiJmRpdm9ueDtcIjpcIuKLh1wiLFwiJmRqY3k7XCI6XCLRklwiLFwiJmRsY29ybjtcIjpcIuKMnlwiLFwiJmRsY3JvcDtcIjpcIuKMjVwiLFwiJmRvbGxhcjtcIjpcIiRcIixcIiZkb3BmO1wiOlwi8J2VlVwiLFwiJmRvdDtcIjpcIsuZXCIsXCImZG90ZXE7XCI6XCLiiZBcIixcIiZkb3RlcWRvdDtcIjpcIuKJkVwiLFwiJmRvdG1pbnVzO1wiOlwi4oi4XCIsXCImZG90cGx1cztcIjpcIuKIlFwiLFwiJmRvdHNxdWFyZTtcIjpcIuKKoVwiLFwiJmRvdWJsZWJhcndlZGdlO1wiOlwi4oyGXCIsXCImZG93bmFycm93O1wiOlwi4oaTXCIsXCImZG93bmRvd25hcnJvd3M7XCI6XCLih4pcIixcIiZkb3duaGFycG9vbmxlZnQ7XCI6XCLih4NcIixcIiZkb3duaGFycG9vbnJpZ2h0O1wiOlwi4oeCXCIsXCImZHJia2Fyb3c7XCI6XCLipJBcIixcIiZkcmNvcm47XCI6XCLijJ9cIixcIiZkcmNyb3A7XCI6XCLijIxcIixcIiZkc2NyO1wiOlwi8J2SuVwiLFwiJmRzY3k7XCI6XCLRlVwiLFwiJmRzb2w7XCI6XCLip7ZcIixcIiZkc3Ryb2s7XCI6XCLEkVwiLFwiJmR0ZG90O1wiOlwi4ouxXCIsXCImZHRyaTtcIjpcIuKWv1wiLFwiJmR0cmlmO1wiOlwi4pa+XCIsXCImZHVhcnI7XCI6XCLih7VcIixcIiZkdWhhcjtcIjpcIuKlr1wiLFwiJmR3YW5nbGU7XCI6XCLipqZcIixcIiZkemN5O1wiOlwi0Z9cIixcIiZkemlncmFycjtcIjpcIuKfv1wiLFwiJmVERG90O1wiOlwi4qm3XCIsXCImZURvdDtcIjpcIuKJkVwiLFwiJmVhY3V0ZVwiOlwiw6lcIixcIiZlYWN1dGU7XCI6XCLDqVwiLFwiJmVhc3RlcjtcIjpcIuKprlwiLFwiJmVjYXJvbjtcIjpcIsSbXCIsXCImZWNpcjtcIjpcIuKJllwiLFwiJmVjaXJjXCI6XCLDqlwiLFwiJmVjaXJjO1wiOlwiw6pcIixcIiZlY29sb247XCI6XCLiiZVcIixcIiZlY3k7XCI6XCLRjVwiLFwiJmVkb3Q7XCI6XCLEl1wiLFwiJmVlO1wiOlwi4oWHXCIsXCImZWZEb3Q7XCI6XCLiiZJcIixcIiZlZnI7XCI6XCLwnZSiXCIsXCImZWc7XCI6XCLiqppcIixcIiZlZ3JhdmVcIjpcIsOoXCIsXCImZWdyYXZlO1wiOlwiw6hcIixcIiZlZ3M7XCI6XCLiqpZcIixcIiZlZ3Nkb3Q7XCI6XCLiqphcIixcIiZlbDtcIjpcIuKqmVwiLFwiJmVsaW50ZXJzO1wiOlwi4o+nXCIsXCImZWxsO1wiOlwi4oSTXCIsXCImZWxzO1wiOlwi4qqVXCIsXCImZWxzZG90O1wiOlwi4qqXXCIsXCImZW1hY3I7XCI6XCLEk1wiLFwiJmVtcHR5O1wiOlwi4oiFXCIsXCImZW1wdHlzZXQ7XCI6XCLiiIVcIixcIiZlbXB0eXY7XCI6XCLiiIVcIixcIiZlbXNwMTM7XCI6XCLigIRcIixcIiZlbXNwMTQ7XCI6XCLigIVcIixcIiZlbXNwO1wiOlwi4oCDXCIsXCImZW5nO1wiOlwixYtcIixcIiZlbnNwO1wiOlwi4oCCXCIsXCImZW9nb247XCI6XCLEmVwiLFwiJmVvcGY7XCI6XCLwnZWWXCIsXCImZXBhcjtcIjpcIuKLlVwiLFwiJmVwYXJzbDtcIjpcIuKno1wiLFwiJmVwbHVzO1wiOlwi4qmxXCIsXCImZXBzaTtcIjpcIs61XCIsXCImZXBzaWxvbjtcIjpcIs61XCIsXCImZXBzaXY7XCI6XCLPtVwiLFwiJmVxY2lyYztcIjpcIuKJllwiLFwiJmVxY29sb247XCI6XCLiiZVcIixcIiZlcXNpbTtcIjpcIuKJglwiLFwiJmVxc2xhbnRndHI7XCI6XCLiqpZcIixcIiZlcXNsYW50bGVzcztcIjpcIuKqlVwiLFwiJmVxdWFscztcIjpcIj1cIixcIiZlcXVlc3Q7XCI6XCLiiZ9cIixcIiZlcXVpdjtcIjpcIuKJoVwiLFwiJmVxdWl2REQ7XCI6XCLiqbhcIixcIiZlcXZwYXJzbDtcIjpcIuKnpVwiLFwiJmVyRG90O1wiOlwi4omTXCIsXCImZXJhcnI7XCI6XCLipbFcIixcIiZlc2NyO1wiOlwi4oSvXCIsXCImZXNkb3Q7XCI6XCLiiZBcIixcIiZlc2ltO1wiOlwi4omCXCIsXCImZXRhO1wiOlwizrdcIixcIiZldGhcIjpcIsOwXCIsXCImZXRoO1wiOlwiw7BcIixcIiZldW1sXCI6XCLDq1wiLFwiJmV1bWw7XCI6XCLDq1wiLFwiJmV1cm87XCI6XCLigqxcIixcIiZleGNsO1wiOlwiIVwiLFwiJmV4aXN0O1wiOlwi4oiDXCIsXCImZXhwZWN0YXRpb247XCI6XCLihLBcIixcIiZleHBvbmVudGlhbGU7XCI6XCLihYdcIixcIiZmYWxsaW5nZG90c2VxO1wiOlwi4omSXCIsXCImZmN5O1wiOlwi0YRcIixcIiZmZW1hbGU7XCI6XCLimYBcIixcIiZmZmlsaWc7XCI6XCLvrINcIixcIiZmZmxpZztcIjpcIu+sgFwiLFwiJmZmbGxpZztcIjpcIu+shFwiLFwiJmZmcjtcIjpcIvCdlKNcIixcIiZmaWxpZztcIjpcIu+sgVwiLFwiJmZqbGlnO1wiOlwiZmpcIixcIiZmbGF0O1wiOlwi4pmtXCIsXCImZmxsaWc7XCI6XCLvrIJcIixcIiZmbHRucztcIjpcIuKWsVwiLFwiJmZub2Y7XCI6XCLGklwiLFwiJmZvcGY7XCI6XCLwnZWXXCIsXCImZm9yYWxsO1wiOlwi4oiAXCIsXCImZm9yaztcIjpcIuKLlFwiLFwiJmZvcmt2O1wiOlwi4quZXCIsXCImZnBhcnRpbnQ7XCI6XCLiqI1cIixcIiZmcmFjMTJcIjpcIsK9XCIsXCImZnJhYzEyO1wiOlwiwr1cIixcIiZmcmFjMTM7XCI6XCLihZNcIixcIiZmcmFjMTRcIjpcIsK8XCIsXCImZnJhYzE0O1wiOlwiwrxcIixcIiZmcmFjMTU7XCI6XCLihZVcIixcIiZmcmFjMTY7XCI6XCLihZlcIixcIiZmcmFjMTg7XCI6XCLihZtcIixcIiZmcmFjMjM7XCI6XCLihZRcIixcIiZmcmFjMjU7XCI6XCLihZZcIixcIiZmcmFjMzRcIjpcIsK+XCIsXCImZnJhYzM0O1wiOlwiwr5cIixcIiZmcmFjMzU7XCI6XCLihZdcIixcIiZmcmFjMzg7XCI6XCLihZxcIixcIiZmcmFjNDU7XCI6XCLihZhcIixcIiZmcmFjNTY7XCI6XCLihZpcIixcIiZmcmFjNTg7XCI6XCLihZ1cIixcIiZmcmFjNzg7XCI6XCLihZ5cIixcIiZmcmFzbDtcIjpcIuKBhFwiLFwiJmZyb3duO1wiOlwi4oyiXCIsXCImZnNjcjtcIjpcIvCdkrtcIixcIiZnRTtcIjpcIuKJp1wiLFwiJmdFbDtcIjpcIuKqjFwiLFwiJmdhY3V0ZTtcIjpcIse1XCIsXCImZ2FtbWE7XCI6XCLOs1wiLFwiJmdhbW1hZDtcIjpcIs+dXCIsXCImZ2FwO1wiOlwi4qqGXCIsXCImZ2JyZXZlO1wiOlwixJ9cIixcIiZnY2lyYztcIjpcIsSdXCIsXCImZ2N5O1wiOlwi0LNcIixcIiZnZG90O1wiOlwixKFcIixcIiZnZTtcIjpcIuKJpVwiLFwiJmdlbDtcIjpcIuKLm1wiLFwiJmdlcTtcIjpcIuKJpVwiLFwiJmdlcXE7XCI6XCLiiadcIixcIiZnZXFzbGFudDtcIjpcIuKpvlwiLFwiJmdlcztcIjpcIuKpvlwiLFwiJmdlc2NjO1wiOlwi4qqpXCIsXCImZ2VzZG90O1wiOlwi4qqAXCIsXCImZ2VzZG90bztcIjpcIuKqglwiLFwiJmdlc2RvdG9sO1wiOlwi4qqEXCIsXCImZ2VzbDtcIjpcIuKLm++4gFwiLFwiJmdlc2xlcztcIjpcIuKqlFwiLFwiJmdmcjtcIjpcIvCdlKRcIixcIiZnZztcIjpcIuKJq1wiLFwiJmdnZztcIjpcIuKLmVwiLFwiJmdpbWVsO1wiOlwi4oS3XCIsXCImZ2pjeTtcIjpcItGTXCIsXCImZ2w7XCI6XCLiibdcIixcIiZnbEU7XCI6XCLiqpJcIixcIiZnbGE7XCI6XCLiqqVcIixcIiZnbGo7XCI6XCLiqqRcIixcIiZnbkU7XCI6XCLiialcIixcIiZnbmFwO1wiOlwi4qqKXCIsXCImZ25hcHByb3g7XCI6XCLiqopcIixcIiZnbmU7XCI6XCLiqohcIixcIiZnbmVxO1wiOlwi4qqIXCIsXCImZ25lcXE7XCI6XCLiialcIixcIiZnbnNpbTtcIjpcIuKLp1wiLFwiJmdvcGY7XCI6XCLwnZWYXCIsXCImZ3JhdmU7XCI6XCJgXCIsXCImZ3NjcjtcIjpcIuKEilwiLFwiJmdzaW07XCI6XCLiibNcIixcIiZnc2ltZTtcIjpcIuKqjlwiLFwiJmdzaW1sO1wiOlwi4qqQXCIsXCImZ3RcIjpcIj5cIixcIiZndDtcIjpcIj5cIixcIiZndGNjO1wiOlwi4qqnXCIsXCImZ3RjaXI7XCI6XCLiqbpcIixcIiZndGRvdDtcIjpcIuKLl1wiLFwiJmd0bFBhcjtcIjpcIuKmlVwiLFwiJmd0cXVlc3Q7XCI6XCLiqbxcIixcIiZndHJhcHByb3g7XCI6XCLiqoZcIixcIiZndHJhcnI7XCI6XCLipbhcIixcIiZndHJkb3Q7XCI6XCLii5dcIixcIiZndHJlcWxlc3M7XCI6XCLii5tcIixcIiZndHJlcXFsZXNzO1wiOlwi4qqMXCIsXCImZ3RybGVzcztcIjpcIuKJt1wiLFwiJmd0cnNpbTtcIjpcIuKJs1wiLFwiJmd2ZXJ0bmVxcTtcIjpcIuKJqe+4gFwiLFwiJmd2bkU7XCI6XCLiianvuIBcIixcIiZoQXJyO1wiOlwi4oeUXCIsXCImaGFpcnNwO1wiOlwi4oCKXCIsXCImaGFsZjtcIjpcIsK9XCIsXCImaGFtaWx0O1wiOlwi4oSLXCIsXCImaGFyZGN5O1wiOlwi0YpcIixcIiZoYXJyO1wiOlwi4oaUXCIsXCImaGFycmNpcjtcIjpcIuKliFwiLFwiJmhhcnJ3O1wiOlwi4oatXCIsXCImaGJhcjtcIjpcIuKEj1wiLFwiJmhjaXJjO1wiOlwixKVcIixcIiZoZWFydHM7XCI6XCLimaVcIixcIiZoZWFydHN1aXQ7XCI6XCLimaVcIixcIiZoZWxsaXA7XCI6XCLigKZcIixcIiZoZXJjb247XCI6XCLiirlcIixcIiZoZnI7XCI6XCLwnZSlXCIsXCImaGtzZWFyb3c7XCI6XCLipKVcIixcIiZoa3N3YXJvdztcIjpcIuKkplwiLFwiJmhvYXJyO1wiOlwi4oe/XCIsXCImaG9tdGh0O1wiOlwi4oi7XCIsXCImaG9va2xlZnRhcnJvdztcIjpcIuKGqVwiLFwiJmhvb2tyaWdodGFycm93O1wiOlwi4oaqXCIsXCImaG9wZjtcIjpcIvCdlZlcIixcIiZob3JiYXI7XCI6XCLigJVcIixcIiZoc2NyO1wiOlwi8J2SvVwiLFwiJmhzbGFzaDtcIjpcIuKEj1wiLFwiJmhzdHJvaztcIjpcIsSnXCIsXCImaHlidWxsO1wiOlwi4oGDXCIsXCImaHlwaGVuO1wiOlwi4oCQXCIsXCImaWFjdXRlXCI6XCLDrVwiLFwiJmlhY3V0ZTtcIjpcIsOtXCIsXCImaWM7XCI6XCLigaNcIixcIiZpY2lyY1wiOlwiw65cIixcIiZpY2lyYztcIjpcIsOuXCIsXCImaWN5O1wiOlwi0LhcIixcIiZpZWN5O1wiOlwi0LVcIixcIiZpZXhjbFwiOlwiwqFcIixcIiZpZXhjbDtcIjpcIsKhXCIsXCImaWZmO1wiOlwi4oeUXCIsXCImaWZyO1wiOlwi8J2UplwiLFwiJmlncmF2ZVwiOlwiw6xcIixcIiZpZ3JhdmU7XCI6XCLDrFwiLFwiJmlpO1wiOlwi4oWIXCIsXCImaWlpaW50O1wiOlwi4qiMXCIsXCImaWlpbnQ7XCI6XCLiiK1cIixcIiZpaW5maW47XCI6XCLip5xcIixcIiZpaW90YTtcIjpcIuKEqVwiLFwiJmlqbGlnO1wiOlwixLNcIixcIiZpbWFjcjtcIjpcIsSrXCIsXCImaW1hZ2U7XCI6XCLihJFcIixcIiZpbWFnbGluZTtcIjpcIuKEkFwiLFwiJmltYWdwYXJ0O1wiOlwi4oSRXCIsXCImaW1hdGg7XCI6XCLEsVwiLFwiJmltb2Y7XCI6XCLiirdcIixcIiZpbXBlZDtcIjpcIsa1XCIsXCImaW47XCI6XCLiiIhcIixcIiZpbmNhcmU7XCI6XCLihIVcIixcIiZpbmZpbjtcIjpcIuKInlwiLFwiJmluZmludGllO1wiOlwi4qedXCIsXCImaW5vZG90O1wiOlwixLFcIixcIiZpbnQ7XCI6XCLiiKtcIixcIiZpbnRjYWw7XCI6XCLiirpcIixcIiZpbnRlZ2VycztcIjpcIuKEpFwiLFwiJmludGVyY2FsO1wiOlwi4oq6XCIsXCImaW50bGFyaGs7XCI6XCLiqJdcIixcIiZpbnRwcm9kO1wiOlwi4qi8XCIsXCImaW9jeTtcIjpcItGRXCIsXCImaW9nb247XCI6XCLEr1wiLFwiJmlvcGY7XCI6XCLwnZWaXCIsXCImaW90YTtcIjpcIs65XCIsXCImaXByb2Q7XCI6XCLiqLxcIixcIiZpcXVlc3RcIjpcIsK/XCIsXCImaXF1ZXN0O1wiOlwiwr9cIixcIiZpc2NyO1wiOlwi8J2SvlwiLFwiJmlzaW47XCI6XCLiiIhcIixcIiZpc2luRTtcIjpcIuKLuVwiLFwiJmlzaW5kb3Q7XCI6XCLii7VcIixcIiZpc2lucztcIjpcIuKLtFwiLFwiJmlzaW5zdjtcIjpcIuKLs1wiLFwiJmlzaW52O1wiOlwi4oiIXCIsXCImaXQ7XCI6XCLigaJcIixcIiZpdGlsZGU7XCI6XCLEqVwiLFwiJml1a2N5O1wiOlwi0ZZcIixcIiZpdW1sXCI6XCLDr1wiLFwiJml1bWw7XCI6XCLDr1wiLFwiJmpjaXJjO1wiOlwixLVcIixcIiZqY3k7XCI6XCLQuVwiLFwiJmpmcjtcIjpcIvCdlKdcIixcIiZqbWF0aDtcIjpcIsi3XCIsXCImam9wZjtcIjpcIvCdlZtcIixcIiZqc2NyO1wiOlwi8J2Sv1wiLFwiJmpzZXJjeTtcIjpcItGYXCIsXCImanVrY3k7XCI6XCLRlFwiLFwiJmthcHBhO1wiOlwizrpcIixcIiZrYXBwYXY7XCI6XCLPsFwiLFwiJmtjZWRpbDtcIjpcIsS3XCIsXCIma2N5O1wiOlwi0LpcIixcIiZrZnI7XCI6XCLwnZSoXCIsXCIma2dyZWVuO1wiOlwixLhcIixcIiZraGN5O1wiOlwi0YVcIixcIiZramN5O1wiOlwi0ZxcIixcIiZrb3BmO1wiOlwi8J2VnFwiLFwiJmtzY3I7XCI6XCLwnZOAXCIsXCImbEFhcnI7XCI6XCLih5pcIixcIiZsQXJyO1wiOlwi4oeQXCIsXCImbEF0YWlsO1wiOlwi4qSbXCIsXCImbEJhcnI7XCI6XCLipI5cIixcIiZsRTtcIjpcIuKJplwiLFwiJmxFZztcIjpcIuKqi1wiLFwiJmxIYXI7XCI6XCLipaJcIixcIiZsYWN1dGU7XCI6XCLEulwiLFwiJmxhZW1wdHl2O1wiOlwi4qa0XCIsXCImbGFncmFuO1wiOlwi4oSSXCIsXCImbGFtYmRhO1wiOlwizrtcIixcIiZsYW5nO1wiOlwi4p+oXCIsXCImbGFuZ2Q7XCI6XCLippFcIixcIiZsYW5nbGU7XCI6XCLin6hcIixcIiZsYXA7XCI6XCLiqoVcIixcIiZsYXF1b1wiOlwiwqtcIixcIiZsYXF1bztcIjpcIsKrXCIsXCImbGFycjtcIjpcIuKGkFwiLFwiJmxhcnJiO1wiOlwi4oekXCIsXCImbGFycmJmcztcIjpcIuKkn1wiLFwiJmxhcnJmcztcIjpcIuKknVwiLFwiJmxhcnJoaztcIjpcIuKGqVwiLFwiJmxhcnJscDtcIjpcIuKGq1wiLFwiJmxhcnJwbDtcIjpcIuKkuVwiLFwiJmxhcnJzaW07XCI6XCLipbNcIixcIiZsYXJydGw7XCI6XCLihqJcIixcIiZsYXQ7XCI6XCLiqqtcIixcIiZsYXRhaWw7XCI6XCLipJlcIixcIiZsYXRlO1wiOlwi4qqtXCIsXCImbGF0ZXM7XCI6XCLiqq3vuIBcIixcIiZsYmFycjtcIjpcIuKkjFwiLFwiJmxiYnJrO1wiOlwi4p2yXCIsXCImbGJyYWNlO1wiOlwie1wiLFwiJmxicmFjaztcIjpcIltcIixcIiZsYnJrZTtcIjpcIuKmi1wiLFwiJmxicmtzbGQ7XCI6XCLipo9cIixcIiZsYnJrc2x1O1wiOlwi4qaNXCIsXCImbGNhcm9uO1wiOlwixL5cIixcIiZsY2VkaWw7XCI6XCLEvFwiLFwiJmxjZWlsO1wiOlwi4oyIXCIsXCImbGN1YjtcIjpcIntcIixcIiZsY3k7XCI6XCLQu1wiLFwiJmxkY2E7XCI6XCLipLZcIixcIiZsZHF1bztcIjpcIuKAnFwiLFwiJmxkcXVvcjtcIjpcIuKAnlwiLFwiJmxkcmRoYXI7XCI6XCLipadcIixcIiZsZHJ1c2hhcjtcIjpcIuKli1wiLFwiJmxkc2g7XCI6XCLihrJcIixcIiZsZTtcIjpcIuKJpFwiLFwiJmxlZnRhcnJvdztcIjpcIuKGkFwiLFwiJmxlZnRhcnJvd3RhaWw7XCI6XCLihqJcIixcIiZsZWZ0aGFycG9vbmRvd247XCI6XCLihr1cIixcIiZsZWZ0aGFycG9vbnVwO1wiOlwi4oa8XCIsXCImbGVmdGxlZnRhcnJvd3M7XCI6XCLih4dcIixcIiZsZWZ0cmlnaHRhcnJvdztcIjpcIuKGlFwiLFwiJmxlZnRyaWdodGFycm93cztcIjpcIuKHhlwiLFwiJmxlZnRyaWdodGhhcnBvb25zO1wiOlwi4oeLXCIsXCImbGVmdHJpZ2h0c3F1aWdhcnJvdztcIjpcIuKGrVwiLFwiJmxlZnR0aHJlZXRpbWVzO1wiOlwi4ouLXCIsXCImbGVnO1wiOlwi4ouaXCIsXCImbGVxO1wiOlwi4omkXCIsXCImbGVxcTtcIjpcIuKJplwiLFwiJmxlcXNsYW50O1wiOlwi4qm9XCIsXCImbGVzO1wiOlwi4qm9XCIsXCImbGVzY2M7XCI6XCLiqqhcIixcIiZsZXNkb3Q7XCI6XCLiqb9cIixcIiZsZXNkb3RvO1wiOlwi4qqBXCIsXCImbGVzZG90b3I7XCI6XCLiqoNcIixcIiZsZXNnO1wiOlwi4oua77iAXCIsXCImbGVzZ2VzO1wiOlwi4qqTXCIsXCImbGVzc2FwcHJveDtcIjpcIuKqhVwiLFwiJmxlc3Nkb3Q7XCI6XCLii5ZcIixcIiZsZXNzZXFndHI7XCI6XCLii5pcIixcIiZsZXNzZXFxZ3RyO1wiOlwi4qqLXCIsXCImbGVzc2d0cjtcIjpcIuKJtlwiLFwiJmxlc3NzaW07XCI6XCLiibJcIixcIiZsZmlzaHQ7XCI6XCLipbxcIixcIiZsZmxvb3I7XCI6XCLijIpcIixcIiZsZnI7XCI6XCLwnZSpXCIsXCImbGc7XCI6XCLiibZcIixcIiZsZ0U7XCI6XCLiqpFcIixcIiZsaGFyZDtcIjpcIuKGvVwiLFwiJmxoYXJ1O1wiOlwi4oa8XCIsXCImbGhhcnVsO1wiOlwi4qWqXCIsXCImbGhibGs7XCI6XCLiloRcIixcIiZsamN5O1wiOlwi0ZlcIixcIiZsbDtcIjpcIuKJqlwiLFwiJmxsYXJyO1wiOlwi4oeHXCIsXCImbGxjb3JuZXI7XCI6XCLijJ5cIixcIiZsbGhhcmQ7XCI6XCLipatcIixcIiZsbHRyaTtcIjpcIuKXulwiLFwiJmxtaWRvdDtcIjpcIsWAXCIsXCImbG1vdXN0O1wiOlwi4o6wXCIsXCImbG1vdXN0YWNoZTtcIjpcIuKOsFwiLFwiJmxuRTtcIjpcIuKJqFwiLFwiJmxuYXA7XCI6XCLiqolcIixcIiZsbmFwcHJveDtcIjpcIuKqiVwiLFwiJmxuZTtcIjpcIuKqh1wiLFwiJmxuZXE7XCI6XCLiqodcIixcIiZsbmVxcTtcIjpcIuKJqFwiLFwiJmxuc2ltO1wiOlwi4oumXCIsXCImbG9hbmc7XCI6XCLin6xcIixcIiZsb2FycjtcIjpcIuKHvVwiLFwiJmxvYnJrO1wiOlwi4p+mXCIsXCImbG9uZ2xlZnRhcnJvdztcIjpcIuKftVwiLFwiJmxvbmdsZWZ0cmlnaHRhcnJvdztcIjpcIuKft1wiLFwiJmxvbmdtYXBzdG87XCI6XCLin7xcIixcIiZsb25ncmlnaHRhcnJvdztcIjpcIuKftlwiLFwiJmxvb3BhcnJvd2xlZnQ7XCI6XCLihqtcIixcIiZsb29wYXJyb3dyaWdodDtcIjpcIuKGrFwiLFwiJmxvcGFyO1wiOlwi4qaFXCIsXCImbG9wZjtcIjpcIvCdlZ1cIixcIiZsb3BsdXM7XCI6XCLiqK1cIixcIiZsb3RpbWVzO1wiOlwi4qi0XCIsXCImbG93YXN0O1wiOlwi4oiXXCIsXCImbG93YmFyO1wiOlwiX1wiLFwiJmxvejtcIjpcIuKXilwiLFwiJmxvemVuZ2U7XCI6XCLil4pcIixcIiZsb3pmO1wiOlwi4qerXCIsXCImbHBhcjtcIjpcIihcIixcIiZscGFybHQ7XCI6XCLippNcIixcIiZscmFycjtcIjpcIuKHhlwiLFwiJmxyY29ybmVyO1wiOlwi4oyfXCIsXCImbHJoYXI7XCI6XCLih4tcIixcIiZscmhhcmQ7XCI6XCLipa1cIixcIiZscm07XCI6XCLigI5cIixcIiZscnRyaTtcIjpcIuKKv1wiLFwiJmxzYXF1bztcIjpcIuKAuVwiLFwiJmxzY3I7XCI6XCLwnZOBXCIsXCImbHNoO1wiOlwi4oawXCIsXCImbHNpbTtcIjpcIuKJslwiLFwiJmxzaW1lO1wiOlwi4qqNXCIsXCImbHNpbWc7XCI6XCLiqo9cIixcIiZsc3FiO1wiOlwiW1wiLFwiJmxzcXVvO1wiOlwi4oCYXCIsXCImbHNxdW9yO1wiOlwi4oCaXCIsXCImbHN0cm9rO1wiOlwixYJcIixcIiZsdFwiOlwiPFwiLFwiJmx0O1wiOlwiPFwiLFwiJmx0Y2M7XCI6XCLiqqZcIixcIiZsdGNpcjtcIjpcIuKpuVwiLFwiJmx0ZG90O1wiOlwi4ouWXCIsXCImbHRocmVlO1wiOlwi4ouLXCIsXCImbHRpbWVzO1wiOlwi4ouJXCIsXCImbHRsYXJyO1wiOlwi4qW2XCIsXCImbHRxdWVzdDtcIjpcIuKpu1wiLFwiJmx0clBhcjtcIjpcIuKmllwiLFwiJmx0cmk7XCI6XCLil4NcIixcIiZsdHJpZTtcIjpcIuKKtFwiLFwiJmx0cmlmO1wiOlwi4peCXCIsXCImbHVyZHNoYXI7XCI6XCLipYpcIixcIiZsdXJ1aGFyO1wiOlwi4qWmXCIsXCImbHZlcnRuZXFxO1wiOlwi4omo77iAXCIsXCImbHZuRTtcIjpcIuKJqO+4gFwiLFwiJm1ERG90O1wiOlwi4oi6XCIsXCImbWFjclwiOlwiwq9cIixcIiZtYWNyO1wiOlwiwq9cIixcIiZtYWxlO1wiOlwi4pmCXCIsXCImbWFsdDtcIjpcIuKcoFwiLFwiJm1hbHRlc2U7XCI6XCLinKBcIixcIiZtYXA7XCI6XCLihqZcIixcIiZtYXBzdG87XCI6XCLihqZcIixcIiZtYXBzdG9kb3duO1wiOlwi4oanXCIsXCImbWFwc3RvbGVmdDtcIjpcIuKGpFwiLFwiJm1hcHN0b3VwO1wiOlwi4oalXCIsXCImbWFya2VyO1wiOlwi4pauXCIsXCImbWNvbW1hO1wiOlwi4qipXCIsXCImbWN5O1wiOlwi0LxcIixcIiZtZGFzaDtcIjpcIuKAlFwiLFwiJm1lYXN1cmVkYW5nbGU7XCI6XCLiiKFcIixcIiZtZnI7XCI6XCLwnZSqXCIsXCImbWhvO1wiOlwi4oSnXCIsXCImbWljcm9cIjpcIsK1XCIsXCImbWljcm87XCI6XCLCtVwiLFwiJm1pZDtcIjpcIuKIo1wiLFwiJm1pZGFzdDtcIjpcIipcIixcIiZtaWRjaXI7XCI6XCLiq7BcIixcIiZtaWRkb3RcIjpcIsK3XCIsXCImbWlkZG90O1wiOlwiwrdcIixcIiZtaW51cztcIjpcIuKIklwiLFwiJm1pbnVzYjtcIjpcIuKKn1wiLFwiJm1pbnVzZDtcIjpcIuKIuFwiLFwiJm1pbnVzZHU7XCI6XCLiqKpcIixcIiZtbGNwO1wiOlwi4qubXCIsXCImbWxkcjtcIjpcIuKAplwiLFwiJm1ucGx1cztcIjpcIuKIk1wiLFwiJm1vZGVscztcIjpcIuKKp1wiLFwiJm1vcGY7XCI6XCLwnZWeXCIsXCImbXA7XCI6XCLiiJNcIixcIiZtc2NyO1wiOlwi8J2TglwiLFwiJm1zdHBvcztcIjpcIuKIvlwiLFwiJm11O1wiOlwizrxcIixcIiZtdWx0aW1hcDtcIjpcIuKKuFwiLFwiJm11bWFwO1wiOlwi4oq4XCIsXCImbkdnO1wiOlwi4ouZzLhcIixcIiZuR3Q7XCI6XCLiiavig5JcIixcIiZuR3R2O1wiOlwi4omrzLhcIixcIiZuTGVmdGFycm93O1wiOlwi4oeNXCIsXCImbkxlZnRyaWdodGFycm93O1wiOlwi4oeOXCIsXCImbkxsO1wiOlwi4ouYzLhcIixcIiZuTHQ7XCI6XCLiiarig5JcIixcIiZuTHR2O1wiOlwi4omqzLhcIixcIiZuUmlnaHRhcnJvdztcIjpcIuKHj1wiLFwiJm5WRGFzaDtcIjpcIuKKr1wiLFwiJm5WZGFzaDtcIjpcIuKKrlwiLFwiJm5hYmxhO1wiOlwi4oiHXCIsXCImbmFjdXRlO1wiOlwixYRcIixcIiZuYW5nO1wiOlwi4oig4oOSXCIsXCImbmFwO1wiOlwi4omJXCIsXCImbmFwRTtcIjpcIuKpsMy4XCIsXCImbmFwaWQ7XCI6XCLiiYvMuFwiLFwiJm5hcG9zO1wiOlwixYlcIixcIiZuYXBwcm94O1wiOlwi4omJXCIsXCImbmF0dXI7XCI6XCLima5cIixcIiZuYXR1cmFsO1wiOlwi4pmuXCIsXCImbmF0dXJhbHM7XCI6XCLihJVcIixcIiZuYnNwXCI6XCLCoFwiLFwiJm5ic3A7XCI6XCLCoFwiLFwiJm5idW1wO1wiOlwi4omOzLhcIixcIiZuYnVtcGU7XCI6XCLiiY/MuFwiLFwiJm5jYXA7XCI6XCLiqYNcIixcIiZuY2Fyb247XCI6XCLFiFwiLFwiJm5jZWRpbDtcIjpcIsWGXCIsXCImbmNvbmc7XCI6XCLiiYdcIixcIiZuY29uZ2RvdDtcIjpcIuKprcy4XCIsXCImbmN1cDtcIjpcIuKpglwiLFwiJm5jeTtcIjpcItC9XCIsXCImbmRhc2g7XCI6XCLigJNcIixcIiZuZTtcIjpcIuKJoFwiLFwiJm5lQXJyO1wiOlwi4oeXXCIsXCImbmVhcmhrO1wiOlwi4qSkXCIsXCImbmVhcnI7XCI6XCLihpdcIixcIiZuZWFycm93O1wiOlwi4oaXXCIsXCImbmVkb3Q7XCI6XCLiiZDMuFwiLFwiJm5lcXVpdjtcIjpcIuKJolwiLFwiJm5lc2VhcjtcIjpcIuKkqFwiLFwiJm5lc2ltO1wiOlwi4omCzLhcIixcIiZuZXhpc3Q7XCI6XCLiiIRcIixcIiZuZXhpc3RzO1wiOlwi4oiEXCIsXCImbmZyO1wiOlwi8J2Uq1wiLFwiJm5nRTtcIjpcIuKJp8y4XCIsXCImbmdlO1wiOlwi4omxXCIsXCImbmdlcTtcIjpcIuKJsVwiLFwiJm5nZXFxO1wiOlwi4omnzLhcIixcIiZuZ2Vxc2xhbnQ7XCI6XCLiqb7MuFwiLFwiJm5nZXM7XCI6XCLiqb7MuFwiLFwiJm5nc2ltO1wiOlwi4om1XCIsXCImbmd0O1wiOlwi4omvXCIsXCImbmd0cjtcIjpcIuKJr1wiLFwiJm5oQXJyO1wiOlwi4oeOXCIsXCImbmhhcnI7XCI6XCLihq5cIixcIiZuaHBhcjtcIjpcIuKrslwiLFwiJm5pO1wiOlwi4oiLXCIsXCImbmlzO1wiOlwi4ou8XCIsXCImbmlzZDtcIjpcIuKLulwiLFwiJm5pdjtcIjpcIuKIi1wiLFwiJm5qY3k7XCI6XCLRmlwiLFwiJm5sQXJyO1wiOlwi4oeNXCIsXCImbmxFO1wiOlwi4ommzLhcIixcIiZubGFycjtcIjpcIuKGmlwiLFwiJm5sZHI7XCI6XCLigKVcIixcIiZubGU7XCI6XCLiibBcIixcIiZubGVmdGFycm93O1wiOlwi4oaaXCIsXCImbmxlZnRyaWdodGFycm93O1wiOlwi4oauXCIsXCImbmxlcTtcIjpcIuKJsFwiLFwiJm5sZXFxO1wiOlwi4ommzLhcIixcIiZubGVxc2xhbnQ7XCI6XCLiqb3MuFwiLFwiJm5sZXM7XCI6XCLiqb3MuFwiLFwiJm5sZXNzO1wiOlwi4omuXCIsXCImbmxzaW07XCI6XCLiibRcIixcIiZubHQ7XCI6XCLiia5cIixcIiZubHRyaTtcIjpcIuKLqlwiLFwiJm5sdHJpZTtcIjpcIuKLrFwiLFwiJm5taWQ7XCI6XCLiiKRcIixcIiZub3BmO1wiOlwi8J2Vn1wiLFwiJm5vdFwiOlwiwqxcIixcIiZub3Q7XCI6XCLCrFwiLFwiJm5vdGluO1wiOlwi4oiJXCIsXCImbm90aW5FO1wiOlwi4ou5zLhcIixcIiZub3RpbmRvdDtcIjpcIuKLtcy4XCIsXCImbm90aW52YTtcIjpcIuKIiVwiLFwiJm5vdGludmI7XCI6XCLii7dcIixcIiZub3RpbnZjO1wiOlwi4ou2XCIsXCImbm90bmk7XCI6XCLiiIxcIixcIiZub3RuaXZhO1wiOlwi4oiMXCIsXCImbm90bml2YjtcIjpcIuKLvlwiLFwiJm5vdG5pdmM7XCI6XCLii71cIixcIiZucGFyO1wiOlwi4oimXCIsXCImbnBhcmFsbGVsO1wiOlwi4oimXCIsXCImbnBhcnNsO1wiOlwi4qu94oOlXCIsXCImbnBhcnQ7XCI6XCLiiILMuFwiLFwiJm5wb2xpbnQ7XCI6XCLiqJRcIixcIiZucHI7XCI6XCLiioBcIixcIiZucHJjdWU7XCI6XCLii6BcIixcIiZucHJlO1wiOlwi4qqvzLhcIixcIiZucHJlYztcIjpcIuKKgFwiLFwiJm5wcmVjZXE7XCI6XCLiqq/MuFwiLFwiJm5yQXJyO1wiOlwi4oePXCIsXCImbnJhcnI7XCI6XCLihptcIixcIiZucmFycmM7XCI6XCLipLPMuFwiLFwiJm5yYXJydztcIjpcIuKGncy4XCIsXCImbnJpZ2h0YXJyb3c7XCI6XCLihptcIixcIiZucnRyaTtcIjpcIuKLq1wiLFwiJm5ydHJpZTtcIjpcIuKLrVwiLFwiJm5zYztcIjpcIuKKgVwiLFwiJm5zY2N1ZTtcIjpcIuKLoVwiLFwiJm5zY2U7XCI6XCLiqrDMuFwiLFwiJm5zY3I7XCI6XCLwnZODXCIsXCImbnNob3J0bWlkO1wiOlwi4oikXCIsXCImbnNob3J0cGFyYWxsZWw7XCI6XCLiiKZcIixcIiZuc2ltO1wiOlwi4omBXCIsXCImbnNpbWU7XCI6XCLiiYRcIixcIiZuc2ltZXE7XCI6XCLiiYRcIixcIiZuc21pZDtcIjpcIuKIpFwiLFwiJm5zcGFyO1wiOlwi4oimXCIsXCImbnNxc3ViZTtcIjpcIuKLolwiLFwiJm5zcXN1cGU7XCI6XCLii6NcIixcIiZuc3ViO1wiOlwi4oqEXCIsXCImbnN1YkU7XCI6XCLiq4XMuFwiLFwiJm5zdWJlO1wiOlwi4oqIXCIsXCImbnN1YnNldDtcIjpcIuKKguKDklwiLFwiJm5zdWJzZXRlcTtcIjpcIuKKiFwiLFwiJm5zdWJzZXRlcXE7XCI6XCLiq4XMuFwiLFwiJm5zdWNjO1wiOlwi4oqBXCIsXCImbnN1Y2NlcTtcIjpcIuKqsMy4XCIsXCImbnN1cDtcIjpcIuKKhVwiLFwiJm5zdXBFO1wiOlwi4quGzLhcIixcIiZuc3VwZTtcIjpcIuKKiVwiLFwiJm5zdXBzZXQ7XCI6XCLiioPig5JcIixcIiZuc3Vwc2V0ZXE7XCI6XCLiiolcIixcIiZuc3Vwc2V0ZXFxO1wiOlwi4quGzLhcIixcIiZudGdsO1wiOlwi4om5XCIsXCImbnRpbGRlXCI6XCLDsVwiLFwiJm50aWxkZTtcIjpcIsOxXCIsXCImbnRsZztcIjpcIuKJuFwiLFwiJm50cmlhbmdsZWxlZnQ7XCI6XCLii6pcIixcIiZudHJpYW5nbGVsZWZ0ZXE7XCI6XCLii6xcIixcIiZudHJpYW5nbGVyaWdodDtcIjpcIuKLq1wiLFwiJm50cmlhbmdsZXJpZ2h0ZXE7XCI6XCLii61cIixcIiZudTtcIjpcIs69XCIsXCImbnVtO1wiOlwiI1wiLFwiJm51bWVybztcIjpcIuKEllwiLFwiJm51bXNwO1wiOlwi4oCHXCIsXCImbnZEYXNoO1wiOlwi4oqtXCIsXCImbnZIYXJyO1wiOlwi4qSEXCIsXCImbnZhcDtcIjpcIuKJjeKDklwiLFwiJm52ZGFzaDtcIjpcIuKKrFwiLFwiJm52Z2U7XCI6XCLiiaXig5JcIixcIiZudmd0O1wiOlwiPuKDklwiLFwiJm52aW5maW47XCI6XCLip55cIixcIiZudmxBcnI7XCI6XCLipIJcIixcIiZudmxlO1wiOlwi4omk4oOSXCIsXCImbnZsdDtcIjpcIjzig5JcIixcIiZudmx0cmllO1wiOlwi4oq04oOSXCIsXCImbnZyQXJyO1wiOlwi4qSDXCIsXCImbnZydHJpZTtcIjpcIuKKteKDklwiLFwiJm52c2ltO1wiOlwi4oi84oOSXCIsXCImbndBcnI7XCI6XCLih5ZcIixcIiZud2FyaGs7XCI6XCLipKNcIixcIiZud2FycjtcIjpcIuKGllwiLFwiJm53YXJyb3c7XCI6XCLihpZcIixcIiZud25lYXI7XCI6XCLipKdcIixcIiZvUztcIjpcIuKTiFwiLFwiJm9hY3V0ZVwiOlwiw7NcIixcIiZvYWN1dGU7XCI6XCLDs1wiLFwiJm9hc3Q7XCI6XCLiiptcIixcIiZvY2lyO1wiOlwi4oqaXCIsXCImb2NpcmNcIjpcIsO0XCIsXCImb2NpcmM7XCI6XCLDtFwiLFwiJm9jeTtcIjpcItC+XCIsXCImb2Rhc2g7XCI6XCLiip1cIixcIiZvZGJsYWM7XCI6XCLFkVwiLFwiJm9kaXY7XCI6XCLiqLhcIixcIiZvZG90O1wiOlwi4oqZXCIsXCImb2Rzb2xkO1wiOlwi4qa8XCIsXCImb2VsaWc7XCI6XCLFk1wiLFwiJm9mY2lyO1wiOlwi4qa/XCIsXCImb2ZyO1wiOlwi8J2UrFwiLFwiJm9nb247XCI6XCLLm1wiLFwiJm9ncmF2ZVwiOlwiw7JcIixcIiZvZ3JhdmU7XCI6XCLDslwiLFwiJm9ndDtcIjpcIuKngVwiLFwiJm9oYmFyO1wiOlwi4qa1XCIsXCImb2htO1wiOlwizqlcIixcIiZvaW50O1wiOlwi4oiuXCIsXCImb2xhcnI7XCI6XCLihrpcIixcIiZvbGNpcjtcIjpcIuKmvlwiLFwiJm9sY3Jvc3M7XCI6XCLiprtcIixcIiZvbGluZTtcIjpcIuKAvlwiLFwiJm9sdDtcIjpcIuKngFwiLFwiJm9tYWNyO1wiOlwixY1cIixcIiZvbWVnYTtcIjpcIs+JXCIsXCImb21pY3JvbjtcIjpcIs6/XCIsXCImb21pZDtcIjpcIuKmtlwiLFwiJm9taW51cztcIjpcIuKKllwiLFwiJm9vcGY7XCI6XCLwnZWgXCIsXCImb3BhcjtcIjpcIuKmt1wiLFwiJm9wZXJwO1wiOlwi4qa5XCIsXCImb3BsdXM7XCI6XCLiipVcIixcIiZvcjtcIjpcIuKIqFwiLFwiJm9yYXJyO1wiOlwi4oa7XCIsXCImb3JkO1wiOlwi4qmdXCIsXCImb3JkZXI7XCI6XCLihLRcIixcIiZvcmRlcm9mO1wiOlwi4oS0XCIsXCImb3JkZlwiOlwiwqpcIixcIiZvcmRmO1wiOlwiwqpcIixcIiZvcmRtXCI6XCLCulwiLFwiJm9yZG07XCI6XCLCulwiLFwiJm9yaWdvZjtcIjpcIuKKtlwiLFwiJm9yb3I7XCI6XCLiqZZcIixcIiZvcnNsb3BlO1wiOlwi4qmXXCIsXCImb3J2O1wiOlwi4qmbXCIsXCImb3NjcjtcIjpcIuKEtFwiLFwiJm9zbGFzaFwiOlwiw7hcIixcIiZvc2xhc2g7XCI6XCLDuFwiLFwiJm9zb2w7XCI6XCLiiphcIixcIiZvdGlsZGVcIjpcIsO1XCIsXCImb3RpbGRlO1wiOlwiw7VcIixcIiZvdGltZXM7XCI6XCLiipdcIixcIiZvdGltZXNhcztcIjpcIuKotlwiLFwiJm91bWxcIjpcIsO2XCIsXCImb3VtbDtcIjpcIsO2XCIsXCImb3ZiYXI7XCI6XCLijL1cIixcIiZwYXI7XCI6XCLiiKVcIixcIiZwYXJhXCI6XCLCtlwiLFwiJnBhcmE7XCI6XCLCtlwiLFwiJnBhcmFsbGVsO1wiOlwi4oilXCIsXCImcGFyc2ltO1wiOlwi4quzXCIsXCImcGFyc2w7XCI6XCLiq71cIixcIiZwYXJ0O1wiOlwi4oiCXCIsXCImcGN5O1wiOlwi0L9cIixcIiZwZXJjbnQ7XCI6XCIlXCIsXCImcGVyaW9kO1wiOlwiLlwiLFwiJnBlcm1pbDtcIjpcIuKAsFwiLFwiJnBlcnA7XCI6XCLiiqVcIixcIiZwZXJ0ZW5rO1wiOlwi4oCxXCIsXCImcGZyO1wiOlwi8J2UrVwiLFwiJnBoaTtcIjpcIs+GXCIsXCImcGhpdjtcIjpcIs+VXCIsXCImcGhtbWF0O1wiOlwi4oSzXCIsXCImcGhvbmU7XCI6XCLimI5cIixcIiZwaTtcIjpcIs+AXCIsXCImcGl0Y2hmb3JrO1wiOlwi4ouUXCIsXCImcGl2O1wiOlwiz5ZcIixcIiZwbGFuY2s7XCI6XCLihI9cIixcIiZwbGFuY2toO1wiOlwi4oSOXCIsXCImcGxhbmt2O1wiOlwi4oSPXCIsXCImcGx1cztcIjpcIitcIixcIiZwbHVzYWNpcjtcIjpcIuKoo1wiLFwiJnBsdXNiO1wiOlwi4oqeXCIsXCImcGx1c2NpcjtcIjpcIuKoolwiLFwiJnBsdXNkbztcIjpcIuKIlFwiLFwiJnBsdXNkdTtcIjpcIuKopVwiLFwiJnBsdXNlO1wiOlwi4qmyXCIsXCImcGx1c21uXCI6XCLCsVwiLFwiJnBsdXNtbjtcIjpcIsKxXCIsXCImcGx1c3NpbTtcIjpcIuKoplwiLFwiJnBsdXN0d287XCI6XCLiqKdcIixcIiZwbTtcIjpcIsKxXCIsXCImcG9pbnRpbnQ7XCI6XCLiqJVcIixcIiZwb3BmO1wiOlwi8J2VoVwiLFwiJnBvdW5kXCI6XCLCo1wiLFwiJnBvdW5kO1wiOlwiwqNcIixcIiZwcjtcIjpcIuKJulwiLFwiJnByRTtcIjpcIuKqs1wiLFwiJnByYXA7XCI6XCLiqrdcIixcIiZwcmN1ZTtcIjpcIuKJvFwiLFwiJnByZTtcIjpcIuKqr1wiLFwiJnByZWM7XCI6XCLiibpcIixcIiZwcmVjYXBwcm94O1wiOlwi4qq3XCIsXCImcHJlY2N1cmx5ZXE7XCI6XCLiibxcIixcIiZwcmVjZXE7XCI6XCLiqq9cIixcIiZwcmVjbmFwcHJveDtcIjpcIuKquVwiLFwiJnByZWNuZXFxO1wiOlwi4qq1XCIsXCImcHJlY25zaW07XCI6XCLii6hcIixcIiZwcmVjc2ltO1wiOlwi4om+XCIsXCImcHJpbWU7XCI6XCLigLJcIixcIiZwcmltZXM7XCI6XCLihJlcIixcIiZwcm5FO1wiOlwi4qq1XCIsXCImcHJuYXA7XCI6XCLiqrlcIixcIiZwcm5zaW07XCI6XCLii6hcIixcIiZwcm9kO1wiOlwi4oiPXCIsXCImcHJvZmFsYXI7XCI6XCLijK5cIixcIiZwcm9mbGluZTtcIjpcIuKMklwiLFwiJnByb2ZzdXJmO1wiOlwi4oyTXCIsXCImcHJvcDtcIjpcIuKInVwiLFwiJnByb3B0bztcIjpcIuKInVwiLFwiJnByc2ltO1wiOlwi4om+XCIsXCImcHJ1cmVsO1wiOlwi4oqwXCIsXCImcHNjcjtcIjpcIvCdk4VcIixcIiZwc2k7XCI6XCLPiFwiLFwiJnB1bmNzcDtcIjpcIuKAiFwiLFwiJnFmcjtcIjpcIvCdlK5cIixcIiZxaW50O1wiOlwi4qiMXCIsXCImcW9wZjtcIjpcIvCdlaJcIixcIiZxcHJpbWU7XCI6XCLigZdcIixcIiZxc2NyO1wiOlwi8J2ThlwiLFwiJnF1YXRlcm5pb25zO1wiOlwi4oSNXCIsXCImcXVhdGludDtcIjpcIuKollwiLFwiJnF1ZXN0O1wiOlwiP1wiLFwiJnF1ZXN0ZXE7XCI6XCLiiZ9cIixcIiZxdW90XCI6J1wiJyxcIiZxdW90O1wiOidcIicsXCImckFhcnI7XCI6XCLih5tcIixcIiZyQXJyO1wiOlwi4oeSXCIsXCImckF0YWlsO1wiOlwi4qScXCIsXCImckJhcnI7XCI6XCLipI9cIixcIiZySGFyO1wiOlwi4qWkXCIsXCImcmFjZTtcIjpcIuKIvcyxXCIsXCImcmFjdXRlO1wiOlwixZVcIixcIiZyYWRpYztcIjpcIuKImlwiLFwiJnJhZW1wdHl2O1wiOlwi4qazXCIsXCImcmFuZztcIjpcIuKfqVwiLFwiJnJhbmdkO1wiOlwi4qaSXCIsXCImcmFuZ2U7XCI6XCLipqVcIixcIiZyYW5nbGU7XCI6XCLin6lcIixcIiZyYXF1b1wiOlwiwrtcIixcIiZyYXF1bztcIjpcIsK7XCIsXCImcmFycjtcIjpcIuKGklwiLFwiJnJhcnJhcDtcIjpcIuKltVwiLFwiJnJhcnJiO1wiOlwi4oelXCIsXCImcmFycmJmcztcIjpcIuKkoFwiLFwiJnJhcnJjO1wiOlwi4qSzXCIsXCImcmFycmZzO1wiOlwi4qSeXCIsXCImcmFycmhrO1wiOlwi4oaqXCIsXCImcmFycmxwO1wiOlwi4oasXCIsXCImcmFycnBsO1wiOlwi4qWFXCIsXCImcmFycnNpbTtcIjpcIuKltFwiLFwiJnJhcnJ0bDtcIjpcIuKGo1wiLFwiJnJhcnJ3O1wiOlwi4oadXCIsXCImcmF0YWlsO1wiOlwi4qSaXCIsXCImcmF0aW87XCI6XCLiiLZcIixcIiZyYXRpb25hbHM7XCI6XCLihJpcIixcIiZyYmFycjtcIjpcIuKkjVwiLFwiJnJiYnJrO1wiOlwi4p2zXCIsXCImcmJyYWNlO1wiOlwifVwiLFwiJnJicmFjaztcIjpcIl1cIixcIiZyYnJrZTtcIjpcIuKmjFwiLFwiJnJicmtzbGQ7XCI6XCLipo5cIixcIiZyYnJrc2x1O1wiOlwi4qaQXCIsXCImcmNhcm9uO1wiOlwixZlcIixcIiZyY2VkaWw7XCI6XCLFl1wiLFwiJnJjZWlsO1wiOlwi4oyJXCIsXCImcmN1YjtcIjpcIn1cIixcIiZyY3k7XCI6XCLRgFwiLFwiJnJkY2E7XCI6XCLipLdcIixcIiZyZGxkaGFyO1wiOlwi4qWpXCIsXCImcmRxdW87XCI6XCLigJ1cIixcIiZyZHF1b3I7XCI6XCLigJ1cIixcIiZyZHNoO1wiOlwi4oazXCIsXCImcmVhbDtcIjpcIuKEnFwiLFwiJnJlYWxpbmU7XCI6XCLihJtcIixcIiZyZWFscGFydDtcIjpcIuKEnFwiLFwiJnJlYWxzO1wiOlwi4oSdXCIsXCImcmVjdDtcIjpcIuKWrVwiLFwiJnJlZ1wiOlwiwq5cIixcIiZyZWc7XCI6XCLCrlwiLFwiJnJmaXNodDtcIjpcIuKlvVwiLFwiJnJmbG9vcjtcIjpcIuKMi1wiLFwiJnJmcjtcIjpcIvCdlK9cIixcIiZyaGFyZDtcIjpcIuKHgVwiLFwiJnJoYXJ1O1wiOlwi4oeAXCIsXCImcmhhcnVsO1wiOlwi4qWsXCIsXCImcmhvO1wiOlwiz4FcIixcIiZyaG92O1wiOlwiz7FcIixcIiZyaWdodGFycm93O1wiOlwi4oaSXCIsXCImcmlnaHRhcnJvd3RhaWw7XCI6XCLihqNcIixcIiZyaWdodGhhcnBvb25kb3duO1wiOlwi4oeBXCIsXCImcmlnaHRoYXJwb29udXA7XCI6XCLih4BcIixcIiZyaWdodGxlZnRhcnJvd3M7XCI6XCLih4RcIixcIiZyaWdodGxlZnRoYXJwb29ucztcIjpcIuKHjFwiLFwiJnJpZ2h0cmlnaHRhcnJvd3M7XCI6XCLih4lcIixcIiZyaWdodHNxdWlnYXJyb3c7XCI6XCLihp1cIixcIiZyaWdodHRocmVldGltZXM7XCI6XCLii4xcIixcIiZyaW5nO1wiOlwiy5pcIixcIiZyaXNpbmdkb3RzZXE7XCI6XCLiiZNcIixcIiZybGFycjtcIjpcIuKHhFwiLFwiJnJsaGFyO1wiOlwi4oeMXCIsXCImcmxtO1wiOlwi4oCPXCIsXCImcm1vdXN0O1wiOlwi4o6xXCIsXCImcm1vdXN0YWNoZTtcIjpcIuKOsVwiLFwiJnJubWlkO1wiOlwi4quuXCIsXCImcm9hbmc7XCI6XCLin61cIixcIiZyb2FycjtcIjpcIuKHvlwiLFwiJnJvYnJrO1wiOlwi4p+nXCIsXCImcm9wYXI7XCI6XCLipoZcIixcIiZyb3BmO1wiOlwi8J2Vo1wiLFwiJnJvcGx1cztcIjpcIuKorlwiLFwiJnJvdGltZXM7XCI6XCLiqLVcIixcIiZycGFyO1wiOlwiKVwiLFwiJnJwYXJndDtcIjpcIuKmlFwiLFwiJnJwcG9saW50O1wiOlwi4qiSXCIsXCImcnJhcnI7XCI6XCLih4lcIixcIiZyc2FxdW87XCI6XCLigLpcIixcIiZyc2NyO1wiOlwi8J2Th1wiLFwiJnJzaDtcIjpcIuKGsVwiLFwiJnJzcWI7XCI6XCJdXCIsXCImcnNxdW87XCI6XCLigJlcIixcIiZyc3F1b3I7XCI6XCLigJlcIixcIiZydGhyZWU7XCI6XCLii4xcIixcIiZydGltZXM7XCI6XCLii4pcIixcIiZydHJpO1wiOlwi4pa5XCIsXCImcnRyaWU7XCI6XCLiirVcIixcIiZydHJpZjtcIjpcIuKWuFwiLFwiJnJ0cmlsdHJpO1wiOlwi4qeOXCIsXCImcnVsdWhhcjtcIjpcIuKlqFwiLFwiJnJ4O1wiOlwi4oSeXCIsXCImc2FjdXRlO1wiOlwixZtcIixcIiZzYnF1bztcIjpcIuKAmlwiLFwiJnNjO1wiOlwi4om7XCIsXCImc2NFO1wiOlwi4qq0XCIsXCImc2NhcDtcIjpcIuKquFwiLFwiJnNjYXJvbjtcIjpcIsWhXCIsXCImc2NjdWU7XCI6XCLiib1cIixcIiZzY2U7XCI6XCLiqrBcIixcIiZzY2VkaWw7XCI6XCLFn1wiLFwiJnNjaXJjO1wiOlwixZ1cIixcIiZzY25FO1wiOlwi4qq2XCIsXCImc2NuYXA7XCI6XCLiqrpcIixcIiZzY25zaW07XCI6XCLii6lcIixcIiZzY3BvbGludDtcIjpcIuKok1wiLFwiJnNjc2ltO1wiOlwi4om/XCIsXCImc2N5O1wiOlwi0YFcIixcIiZzZG90O1wiOlwi4ouFXCIsXCImc2RvdGI7XCI6XCLiiqFcIixcIiZzZG90ZTtcIjpcIuKpplwiLFwiJnNlQXJyO1wiOlwi4oeYXCIsXCImc2VhcmhrO1wiOlwi4qSlXCIsXCImc2VhcnI7XCI6XCLihphcIixcIiZzZWFycm93O1wiOlwi4oaYXCIsXCImc2VjdFwiOlwiwqdcIixcIiZzZWN0O1wiOlwiwqdcIixcIiZzZW1pO1wiOlwiO1wiLFwiJnNlc3dhcjtcIjpcIuKkqVwiLFwiJnNldG1pbnVzO1wiOlwi4oiWXCIsXCImc2V0bW47XCI6XCLiiJZcIixcIiZzZXh0O1wiOlwi4py2XCIsXCImc2ZyO1wiOlwi8J2UsFwiLFwiJnNmcm93bjtcIjpcIuKMolwiLFwiJnNoYXJwO1wiOlwi4pmvXCIsXCImc2hjaGN5O1wiOlwi0YlcIixcIiZzaGN5O1wiOlwi0YhcIixcIiZzaG9ydG1pZDtcIjpcIuKIo1wiLFwiJnNob3J0cGFyYWxsZWw7XCI6XCLiiKVcIixcIiZzaHlcIjpcIsKtXCIsXCImc2h5O1wiOlwiwq1cIixcIiZzaWdtYTtcIjpcIs+DXCIsXCImc2lnbWFmO1wiOlwiz4JcIixcIiZzaWdtYXY7XCI6XCLPglwiLFwiJnNpbTtcIjpcIuKIvFwiLFwiJnNpbWRvdDtcIjpcIuKpqlwiLFwiJnNpbWU7XCI6XCLiiYNcIixcIiZzaW1lcTtcIjpcIuKJg1wiLFwiJnNpbWc7XCI6XCLiqp5cIixcIiZzaW1nRTtcIjpcIuKqoFwiLFwiJnNpbWw7XCI6XCLiqp1cIixcIiZzaW1sRTtcIjpcIuKqn1wiLFwiJnNpbW5lO1wiOlwi4omGXCIsXCImc2ltcGx1cztcIjpcIuKopFwiLFwiJnNpbXJhcnI7XCI6XCLipbJcIixcIiZzbGFycjtcIjpcIuKGkFwiLFwiJnNtYWxsc2V0bWludXM7XCI6XCLiiJZcIixcIiZzbWFzaHA7XCI6XCLiqLNcIixcIiZzbWVwYXJzbDtcIjpcIuKnpFwiLFwiJnNtaWQ7XCI6XCLiiKNcIixcIiZzbWlsZTtcIjpcIuKMo1wiLFwiJnNtdDtcIjpcIuKqqlwiLFwiJnNtdGU7XCI6XCLiqqxcIixcIiZzbXRlcztcIjpcIuKqrO+4gFwiLFwiJnNvZnRjeTtcIjpcItGMXCIsXCImc29sO1wiOlwiL1wiLFwiJnNvbGI7XCI6XCLip4RcIixcIiZzb2xiYXI7XCI6XCLijL9cIixcIiZzb3BmO1wiOlwi8J2VpFwiLFwiJnNwYWRlcztcIjpcIuKZoFwiLFwiJnNwYWRlc3VpdDtcIjpcIuKZoFwiLFwiJnNwYXI7XCI6XCLiiKVcIixcIiZzcWNhcDtcIjpcIuKKk1wiLFwiJnNxY2FwcztcIjpcIuKKk++4gFwiLFwiJnNxY3VwO1wiOlwi4oqUXCIsXCImc3FjdXBzO1wiOlwi4oqU77iAXCIsXCImc3FzdWI7XCI6XCLiio9cIixcIiZzcXN1YmU7XCI6XCLiipFcIixcIiZzcXN1YnNldDtcIjpcIuKKj1wiLFwiJnNxc3Vic2V0ZXE7XCI6XCLiipFcIixcIiZzcXN1cDtcIjpcIuKKkFwiLFwiJnNxc3VwZTtcIjpcIuKKklwiLFwiJnNxc3Vwc2V0O1wiOlwi4oqQXCIsXCImc3FzdXBzZXRlcTtcIjpcIuKKklwiLFwiJnNxdTtcIjpcIuKWoVwiLFwiJnNxdWFyZTtcIjpcIuKWoVwiLFwiJnNxdWFyZjtcIjpcIuKWqlwiLFwiJnNxdWY7XCI6XCLilqpcIixcIiZzcmFycjtcIjpcIuKGklwiLFwiJnNzY3I7XCI6XCLwnZOIXCIsXCImc3NldG1uO1wiOlwi4oiWXCIsXCImc3NtaWxlO1wiOlwi4oyjXCIsXCImc3N0YXJmO1wiOlwi4ouGXCIsXCImc3RhcjtcIjpcIuKYhlwiLFwiJnN0YXJmO1wiOlwi4piFXCIsXCImc3RyYWlnaHRlcHNpbG9uO1wiOlwiz7VcIixcIiZzdHJhaWdodHBoaTtcIjpcIs+VXCIsXCImc3RybnM7XCI6XCLCr1wiLFwiJnN1YjtcIjpcIuKKglwiLFwiJnN1YkU7XCI6XCLiq4VcIixcIiZzdWJkb3Q7XCI6XCLiqr1cIixcIiZzdWJlO1wiOlwi4oqGXCIsXCImc3ViZWRvdDtcIjpcIuKrg1wiLFwiJnN1Ym11bHQ7XCI6XCLiq4FcIixcIiZzdWJuRTtcIjpcIuKri1wiLFwiJnN1Ym5lO1wiOlwi4oqKXCIsXCImc3VicGx1cztcIjpcIuKqv1wiLFwiJnN1YnJhcnI7XCI6XCLipblcIixcIiZzdWJzZXQ7XCI6XCLiioJcIixcIiZzdWJzZXRlcTtcIjpcIuKKhlwiLFwiJnN1YnNldGVxcTtcIjpcIuKrhVwiLFwiJnN1YnNldG5lcTtcIjpcIuKKilwiLFwiJnN1YnNldG5lcXE7XCI6XCLiq4tcIixcIiZzdWJzaW07XCI6XCLiq4dcIixcIiZzdWJzdWI7XCI6XCLiq5VcIixcIiZzdWJzdXA7XCI6XCLiq5NcIixcIiZzdWNjO1wiOlwi4om7XCIsXCImc3VjY2FwcHJveDtcIjpcIuKquFwiLFwiJnN1Y2NjdXJseWVxO1wiOlwi4om9XCIsXCImc3VjY2VxO1wiOlwi4qqwXCIsXCImc3VjY25hcHByb3g7XCI6XCLiqrpcIixcIiZzdWNjbmVxcTtcIjpcIuKqtlwiLFwiJnN1Y2Nuc2ltO1wiOlwi4oupXCIsXCImc3VjY3NpbTtcIjpcIuKJv1wiLFwiJnN1bTtcIjpcIuKIkVwiLFwiJnN1bmc7XCI6XCLimapcIixcIiZzdXAxXCI6XCLCuVwiLFwiJnN1cDE7XCI6XCLCuVwiLFwiJnN1cDJcIjpcIsKyXCIsXCImc3VwMjtcIjpcIsKyXCIsXCImc3VwM1wiOlwiwrNcIixcIiZzdXAzO1wiOlwiwrNcIixcIiZzdXA7XCI6XCLiioNcIixcIiZzdXBFO1wiOlwi4quGXCIsXCImc3VwZG90O1wiOlwi4qq+XCIsXCImc3VwZHN1YjtcIjpcIuKrmFwiLFwiJnN1cGU7XCI6XCLiiodcIixcIiZzdXBlZG90O1wiOlwi4quEXCIsXCImc3VwaHNvbDtcIjpcIuKfiVwiLFwiJnN1cGhzdWI7XCI6XCLiq5dcIixcIiZzdXBsYXJyO1wiOlwi4qW7XCIsXCImc3VwbXVsdDtcIjpcIuKrglwiLFwiJnN1cG5FO1wiOlwi4quMXCIsXCImc3VwbmU7XCI6XCLiiotcIixcIiZzdXBwbHVzO1wiOlwi4quAXCIsXCImc3Vwc2V0O1wiOlwi4oqDXCIsXCImc3Vwc2V0ZXE7XCI6XCLiiodcIixcIiZzdXBzZXRlcXE7XCI6XCLiq4ZcIixcIiZzdXBzZXRuZXE7XCI6XCLiiotcIixcIiZzdXBzZXRuZXFxO1wiOlwi4quMXCIsXCImc3Vwc2ltO1wiOlwi4quIXCIsXCImc3Vwc3ViO1wiOlwi4quUXCIsXCImc3Vwc3VwO1wiOlwi4quWXCIsXCImc3dBcnI7XCI6XCLih5lcIixcIiZzd2FyaGs7XCI6XCLipKZcIixcIiZzd2FycjtcIjpcIuKGmVwiLFwiJnN3YXJyb3c7XCI6XCLihplcIixcIiZzd253YXI7XCI6XCLipKpcIixcIiZzemxpZ1wiOlwiw59cIixcIiZzemxpZztcIjpcIsOfXCIsXCImdGFyZ2V0O1wiOlwi4oyWXCIsXCImdGF1O1wiOlwiz4RcIixcIiZ0YnJrO1wiOlwi4o60XCIsXCImdGNhcm9uO1wiOlwixaVcIixcIiZ0Y2VkaWw7XCI6XCLFo1wiLFwiJnRjeTtcIjpcItGCXCIsXCImdGRvdDtcIjpcIuKDm1wiLFwiJnRlbHJlYztcIjpcIuKMlVwiLFwiJnRmcjtcIjpcIvCdlLFcIixcIiZ0aGVyZTQ7XCI6XCLiiLRcIixcIiZ0aGVyZWZvcmU7XCI6XCLiiLRcIixcIiZ0aGV0YTtcIjpcIs64XCIsXCImdGhldGFzeW07XCI6XCLPkVwiLFwiJnRoZXRhdjtcIjpcIs+RXCIsXCImdGhpY2thcHByb3g7XCI6XCLiiYhcIixcIiZ0aGlja3NpbTtcIjpcIuKIvFwiLFwiJnRoaW5zcDtcIjpcIuKAiVwiLFwiJnRoa2FwO1wiOlwi4omIXCIsXCImdGhrc2ltO1wiOlwi4oi8XCIsXCImdGhvcm5cIjpcIsO+XCIsXCImdGhvcm47XCI6XCLDvlwiLFwiJnRpbGRlO1wiOlwiy5xcIixcIiZ0aW1lc1wiOlwiw5dcIixcIiZ0aW1lcztcIjpcIsOXXCIsXCImdGltZXNiO1wiOlwi4oqgXCIsXCImdGltZXNiYXI7XCI6XCLiqLFcIixcIiZ0aW1lc2Q7XCI6XCLiqLBcIixcIiZ0aW50O1wiOlwi4oitXCIsXCImdG9lYTtcIjpcIuKkqFwiLFwiJnRvcDtcIjpcIuKKpFwiLFwiJnRvcGJvdDtcIjpcIuKMtlwiLFwiJnRvcGNpcjtcIjpcIuKrsVwiLFwiJnRvcGY7XCI6XCLwnZWlXCIsXCImdG9wZm9yaztcIjpcIuKrmlwiLFwiJnRvc2E7XCI6XCLipKlcIixcIiZ0cHJpbWU7XCI6XCLigLRcIixcIiZ0cmFkZTtcIjpcIuKEolwiLFwiJnRyaWFuZ2xlO1wiOlwi4pa1XCIsXCImdHJpYW5nbGVkb3duO1wiOlwi4pa/XCIsXCImdHJpYW5nbGVsZWZ0O1wiOlwi4peDXCIsXCImdHJpYW5nbGVsZWZ0ZXE7XCI6XCLiirRcIixcIiZ0cmlhbmdsZXE7XCI6XCLiiZxcIixcIiZ0cmlhbmdsZXJpZ2h0O1wiOlwi4pa5XCIsXCImdHJpYW5nbGVyaWdodGVxO1wiOlwi4oq1XCIsXCImdHJpZG90O1wiOlwi4pesXCIsXCImdHJpZTtcIjpcIuKJnFwiLFwiJnRyaW1pbnVzO1wiOlwi4qi6XCIsXCImdHJpcGx1cztcIjpcIuKouVwiLFwiJnRyaXNiO1wiOlwi4qeNXCIsXCImdHJpdGltZTtcIjpcIuKou1wiLFwiJnRycGV6aXVtO1wiOlwi4o+iXCIsXCImdHNjcjtcIjpcIvCdk4lcIixcIiZ0c2N5O1wiOlwi0YZcIixcIiZ0c2hjeTtcIjpcItGbXCIsXCImdHN0cm9rO1wiOlwixadcIixcIiZ0d2l4dDtcIjpcIuKJrFwiLFwiJnR3b2hlYWRsZWZ0YXJyb3c7XCI6XCLihp5cIixcIiZ0d29oZWFkcmlnaHRhcnJvdztcIjpcIuKGoFwiLFwiJnVBcnI7XCI6XCLih5FcIixcIiZ1SGFyO1wiOlwi4qWjXCIsXCImdWFjdXRlXCI6XCLDulwiLFwiJnVhY3V0ZTtcIjpcIsO6XCIsXCImdWFycjtcIjpcIuKGkVwiLFwiJnVicmN5O1wiOlwi0Z5cIixcIiZ1YnJldmU7XCI6XCLFrVwiLFwiJnVjaXJjXCI6XCLDu1wiLFwiJnVjaXJjO1wiOlwiw7tcIixcIiZ1Y3k7XCI6XCLRg1wiLFwiJnVkYXJyO1wiOlwi4oeFXCIsXCImdWRibGFjO1wiOlwixbFcIixcIiZ1ZGhhcjtcIjpcIuKlrlwiLFwiJnVmaXNodDtcIjpcIuKlvlwiLFwiJnVmcjtcIjpcIvCdlLJcIixcIiZ1Z3JhdmVcIjpcIsO5XCIsXCImdWdyYXZlO1wiOlwiw7lcIixcIiZ1aGFybDtcIjpcIuKGv1wiLFwiJnVoYXJyO1wiOlwi4oa+XCIsXCImdWhibGs7XCI6XCLiloBcIixcIiZ1bGNvcm47XCI6XCLijJxcIixcIiZ1bGNvcm5lcjtcIjpcIuKMnFwiLFwiJnVsY3JvcDtcIjpcIuKMj1wiLFwiJnVsdHJpO1wiOlwi4pe4XCIsXCImdW1hY3I7XCI6XCLFq1wiLFwiJnVtbFwiOlwiwqhcIixcIiZ1bWw7XCI6XCLCqFwiLFwiJnVvZ29uO1wiOlwixbNcIixcIiZ1b3BmO1wiOlwi8J2VplwiLFwiJnVwYXJyb3c7XCI6XCLihpFcIixcIiZ1cGRvd25hcnJvdztcIjpcIuKGlVwiLFwiJnVwaGFycG9vbmxlZnQ7XCI6XCLihr9cIixcIiZ1cGhhcnBvb25yaWdodDtcIjpcIuKGvlwiLFwiJnVwbHVzO1wiOlwi4oqOXCIsXCImdXBzaTtcIjpcIs+FXCIsXCImdXBzaWg7XCI6XCLPklwiLFwiJnVwc2lsb247XCI6XCLPhVwiLFwiJnVwdXBhcnJvd3M7XCI6XCLih4hcIixcIiZ1cmNvcm47XCI6XCLijJ1cIixcIiZ1cmNvcm5lcjtcIjpcIuKMnVwiLFwiJnVyY3JvcDtcIjpcIuKMjlwiLFwiJnVyaW5nO1wiOlwixa9cIixcIiZ1cnRyaTtcIjpcIuKXuVwiLFwiJnVzY3I7XCI6XCLwnZOKXCIsXCImdXRkb3Q7XCI6XCLii7BcIixcIiZ1dGlsZGU7XCI6XCLFqVwiLFwiJnV0cmk7XCI6XCLilrVcIixcIiZ1dHJpZjtcIjpcIuKWtFwiLFwiJnV1YXJyO1wiOlwi4oeIXCIsXCImdXVtbFwiOlwiw7xcIixcIiZ1dW1sO1wiOlwiw7xcIixcIiZ1d2FuZ2xlO1wiOlwi4qanXCIsXCImdkFycjtcIjpcIuKHlVwiLFwiJnZCYXI7XCI6XCLiq6hcIixcIiZ2QmFydjtcIjpcIuKrqVwiLFwiJnZEYXNoO1wiOlwi4oqoXCIsXCImdmFuZ3J0O1wiOlwi4qacXCIsXCImdmFyZXBzaWxvbjtcIjpcIs+1XCIsXCImdmFya2FwcGE7XCI6XCLPsFwiLFwiJnZhcm5vdGhpbmc7XCI6XCLiiIVcIixcIiZ2YXJwaGk7XCI6XCLPlVwiLFwiJnZhcnBpO1wiOlwiz5ZcIixcIiZ2YXJwcm9wdG87XCI6XCLiiJ1cIixcIiZ2YXJyO1wiOlwi4oaVXCIsXCImdmFycmhvO1wiOlwiz7FcIixcIiZ2YXJzaWdtYTtcIjpcIs+CXCIsXCImdmFyc3Vic2V0bmVxO1wiOlwi4oqK77iAXCIsXCImdmFyc3Vic2V0bmVxcTtcIjpcIuKri++4gFwiLFwiJnZhcnN1cHNldG5lcTtcIjpcIuKKi++4gFwiLFwiJnZhcnN1cHNldG5lcXE7XCI6XCLiq4zvuIBcIixcIiZ2YXJ0aGV0YTtcIjpcIs+RXCIsXCImdmFydHJpYW5nbGVsZWZ0O1wiOlwi4oqyXCIsXCImdmFydHJpYW5nbGVyaWdodDtcIjpcIuKKs1wiLFwiJnZjeTtcIjpcItCyXCIsXCImdmRhc2g7XCI6XCLiiqJcIixcIiZ2ZWU7XCI6XCLiiKhcIixcIiZ2ZWViYXI7XCI6XCLiirtcIixcIiZ2ZWVlcTtcIjpcIuKJmlwiLFwiJnZlbGxpcDtcIjpcIuKLrlwiLFwiJnZlcmJhcjtcIjpcInxcIixcIiZ2ZXJ0O1wiOlwifFwiLFwiJnZmcjtcIjpcIvCdlLNcIixcIiZ2bHRyaTtcIjpcIuKKslwiLFwiJnZuc3ViO1wiOlwi4oqC4oOSXCIsXCImdm5zdXA7XCI6XCLiioPig5JcIixcIiZ2b3BmO1wiOlwi8J2Vp1wiLFwiJnZwcm9wO1wiOlwi4oidXCIsXCImdnJ0cmk7XCI6XCLiirNcIixcIiZ2c2NyO1wiOlwi8J2Ti1wiLFwiJnZzdWJuRTtcIjpcIuKri++4gFwiLFwiJnZzdWJuZTtcIjpcIuKKiu+4gFwiLFwiJnZzdXBuRTtcIjpcIuKrjO+4gFwiLFwiJnZzdXBuZTtcIjpcIuKKi++4gFwiLFwiJnZ6aWd6YWc7XCI6XCLipppcIixcIiZ3Y2lyYztcIjpcIsW1XCIsXCImd2VkYmFyO1wiOlwi4qmfXCIsXCImd2VkZ2U7XCI6XCLiiKdcIixcIiZ3ZWRnZXE7XCI6XCLiiZlcIixcIiZ3ZWllcnA7XCI6XCLihJhcIixcIiZ3ZnI7XCI6XCLwnZS0XCIsXCImd29wZjtcIjpcIvCdlahcIixcIiZ3cDtcIjpcIuKEmFwiLFwiJndyO1wiOlwi4omAXCIsXCImd3JlYXRoO1wiOlwi4omAXCIsXCImd3NjcjtcIjpcIvCdk4xcIixcIiZ4Y2FwO1wiOlwi4ouCXCIsXCImeGNpcmM7XCI6XCLil69cIixcIiZ4Y3VwO1wiOlwi4ouDXCIsXCImeGR0cmk7XCI6XCLilr1cIixcIiZ4ZnI7XCI6XCLwnZS1XCIsXCImeGhBcnI7XCI6XCLin7pcIixcIiZ4aGFycjtcIjpcIuKft1wiLFwiJnhpO1wiOlwizr5cIixcIiZ4bEFycjtcIjpcIuKfuFwiLFwiJnhsYXJyO1wiOlwi4p+1XCIsXCImeG1hcDtcIjpcIuKfvFwiLFwiJnhuaXM7XCI6XCLii7tcIixcIiZ4b2RvdDtcIjpcIuKogFwiLFwiJnhvcGY7XCI6XCLwnZWpXCIsXCImeG9wbHVzO1wiOlwi4qiBXCIsXCImeG90aW1lO1wiOlwi4qiCXCIsXCImeHJBcnI7XCI6XCLin7lcIixcIiZ4cmFycjtcIjpcIuKftlwiLFwiJnhzY3I7XCI6XCLwnZONXCIsXCImeHNxY3VwO1wiOlwi4qiGXCIsXCImeHVwbHVzO1wiOlwi4qiEXCIsXCImeHV0cmk7XCI6XCLilrNcIixcIiZ4dmVlO1wiOlwi4ouBXCIsXCImeHdlZGdlO1wiOlwi4ouAXCIsXCImeWFjdXRlXCI6XCLDvVwiLFwiJnlhY3V0ZTtcIjpcIsO9XCIsXCImeWFjeTtcIjpcItGPXCIsXCImeWNpcmM7XCI6XCLFt1wiLFwiJnljeTtcIjpcItGLXCIsXCImeWVuXCI6XCLCpVwiLFwiJnllbjtcIjpcIsKlXCIsXCImeWZyO1wiOlwi8J2UtlwiLFwiJnlpY3k7XCI6XCLRl1wiLFwiJnlvcGY7XCI6XCLwnZWqXCIsXCImeXNjcjtcIjpcIvCdk45cIixcIiZ5dWN5O1wiOlwi0Y5cIixcIiZ5dW1sXCI6XCLDv1wiLFwiJnl1bWw7XCI6XCLDv1wiLFwiJnphY3V0ZTtcIjpcIsW6XCIsXCImemNhcm9uO1wiOlwixb5cIixcIiZ6Y3k7XCI6XCLQt1wiLFwiJnpkb3Q7XCI6XCLFvFwiLFwiJnplZXRyZjtcIjpcIuKEqFwiLFwiJnpldGE7XCI6XCLOtlwiLFwiJnpmcjtcIjpcIvCdlLdcIixcIiZ6aGN5O1wiOlwi0LZcIixcIiZ6aWdyYXJyO1wiOlwi4oedXCIsXCImem9wZjtcIjpcIvCdlatcIixcIiZ6c2NyO1wiOlwi8J2Tj1wiLFwiJnp3ajtcIjpcIuKAjVwiLFwiJnp3bmo7XCI6XCLigIxcIn0sY2hhcmFjdGVyczp7XCLDhlwiOlwiJkFFbGlnO1wiLFwiJlwiOlwiJmFtcDtcIixcIsOBXCI6XCImQWFjdXRlO1wiLFwixIJcIjpcIiZBYnJldmU7XCIsXCLDglwiOlwiJkFjaXJjO1wiLFwi0JBcIjpcIiZBY3k7XCIsXCLwnZSEXCI6XCImQWZyO1wiLFwiw4BcIjpcIiZBZ3JhdmU7XCIsXCLOkVwiOlwiJkFscGhhO1wiLFwixIBcIjpcIiZBbWFjcjtcIixcIuKpk1wiOlwiJkFuZDtcIixcIsSEXCI6XCImQW9nb247XCIsXCLwnZS4XCI6XCImQW9wZjtcIixcIuKBoVwiOlwiJmFmO1wiLFwiw4VcIjpcIiZhbmdzdDtcIixcIvCdkpxcIjpcIiZBc2NyO1wiLFwi4omUXCI6XCImY29sb25lcTtcIixcIsODXCI6XCImQXRpbGRlO1wiLFwiw4RcIjpcIiZBdW1sO1wiLFwi4oiWXCI6XCImc3NldG1uO1wiLFwi4qunXCI6XCImQmFydjtcIixcIuKMhlwiOlwiJmRvdWJsZWJhcndlZGdlO1wiLFwi0JFcIjpcIiZCY3k7XCIsXCLiiLVcIjpcIiZiZWNhdXNlO1wiLFwi4oSsXCI6XCImYmVybm91O1wiLFwizpJcIjpcIiZCZXRhO1wiLFwi8J2UhVwiOlwiJkJmcjtcIixcIvCdlLlcIjpcIiZCb3BmO1wiLFwiy5hcIjpcIiZicmV2ZTtcIixcIuKJjlwiOlwiJmJ1bXA7XCIsXCLQp1wiOlwiJkNIY3k7XCIsXCLCqVwiOlwiJmNvcHk7XCIsXCLEhlwiOlwiJkNhY3V0ZTtcIixcIuKLklwiOlwiJkNhcDtcIixcIuKFhVwiOlwiJkREO1wiLFwi4oStXCI6XCImQ2ZyO1wiLFwixIxcIjpcIiZDY2Fyb247XCIsXCLDh1wiOlwiJkNjZWRpbDtcIixcIsSIXCI6XCImQ2NpcmM7XCIsXCLiiLBcIjpcIiZDY29uaW50O1wiLFwixIpcIjpcIiZDZG90O1wiLFwiwrhcIjpcIiZjZWRpbDtcIixcIsK3XCI6XCImbWlkZG90O1wiLFwizqdcIjpcIiZDaGk7XCIsXCLiiplcIjpcIiZvZG90O1wiLFwi4oqWXCI6XCImb21pbnVzO1wiLFwi4oqVXCI6XCImb3BsdXM7XCIsXCLiipdcIjpcIiZvdGltZXM7XCIsXCLiiLJcIjpcIiZjd2NvbmludDtcIixcIuKAnVwiOlwiJnJkcXVvcjtcIixcIuKAmVwiOlwiJnJzcXVvcjtcIixcIuKIt1wiOlwiJlByb3BvcnRpb247XCIsXCLiqbRcIjpcIiZDb2xvbmU7XCIsXCLiiaFcIjpcIiZlcXVpdjtcIixcIuKIr1wiOlwiJkRvdWJsZUNvbnRvdXJJbnRlZ3JhbDtcIixcIuKIrlwiOlwiJm9pbnQ7XCIsXCLihIJcIjpcIiZjb21wbGV4ZXM7XCIsXCLiiJBcIjpcIiZjb3Byb2Q7XCIsXCLiiLNcIjpcIiZhd2NvbmludDtcIixcIuKor1wiOlwiJkNyb3NzO1wiLFwi8J2SnlwiOlwiJkNzY3I7XCIsXCLii5NcIjpcIiZDdXA7XCIsXCLiiY1cIjpcIiZhc3ltcGVxO1wiLFwi4qSRXCI6XCImRERvdHJhaGQ7XCIsXCLQglwiOlwiJkRKY3k7XCIsXCLQhVwiOlwiJkRTY3k7XCIsXCLQj1wiOlwiJkRaY3k7XCIsXCLigKFcIjpcIiZkZGFnZ2VyO1wiLFwi4oahXCI6XCImRGFycjtcIixcIuKrpFwiOlwiJkRvdWJsZUxlZnRUZWU7XCIsXCLEjlwiOlwiJkRjYXJvbjtcIixcItCUXCI6XCImRGN5O1wiLFwi4oiHXCI6XCImbmFibGE7XCIsXCLOlFwiOlwiJkRlbHRhO1wiLFwi8J2Uh1wiOlwiJkRmcjtcIixcIsK0XCI6XCImYWN1dGU7XCIsXCLLmVwiOlwiJmRvdDtcIixcIsudXCI6XCImZGJsYWM7XCIsXCJgXCI6XCImZ3JhdmU7XCIsXCLLnFwiOlwiJnRpbGRlO1wiLFwi4ouEXCI6XCImZGlhbW9uZDtcIixcIuKFhlwiOlwiJmRkO1wiLFwi8J2Uu1wiOlwiJkRvcGY7XCIsXCLCqFwiOlwiJnVtbDtcIixcIuKDnFwiOlwiJkRvdERvdDtcIixcIuKJkFwiOlwiJmVzZG90O1wiLFwi4oeTXCI6XCImZEFycjtcIixcIuKHkFwiOlwiJmxBcnI7XCIsXCLih5RcIjpcIiZpZmY7XCIsXCLin7hcIjpcIiZ4bEFycjtcIixcIuKfulwiOlwiJnhoQXJyO1wiLFwi4p+5XCI6XCImeHJBcnI7XCIsXCLih5JcIjpcIiZyQXJyO1wiLFwi4oqoXCI6XCImdkRhc2g7XCIsXCLih5FcIjpcIiZ1QXJyO1wiLFwi4oeVXCI6XCImdkFycjtcIixcIuKIpVwiOlwiJnNwYXI7XCIsXCLihpNcIjpcIiZkb3duYXJyb3c7XCIsXCLipJNcIjpcIiZEb3duQXJyb3dCYXI7XCIsXCLih7VcIjpcIiZkdWFycjtcIixcIsyRXCI6XCImRG93bkJyZXZlO1wiLFwi4qWQXCI6XCImRG93bkxlZnRSaWdodFZlY3RvcjtcIixcIuKlnlwiOlwiJkRvd25MZWZ0VGVlVmVjdG9yO1wiLFwi4oa9XCI6XCImbGhhcmQ7XCIsXCLipZZcIjpcIiZEb3duTGVmdFZlY3RvckJhcjtcIixcIuKln1wiOlwiJkRvd25SaWdodFRlZVZlY3RvcjtcIixcIuKHgVwiOlwiJnJpZ2h0aGFycG9vbmRvd247XCIsXCLipZdcIjpcIiZEb3duUmlnaHRWZWN0b3JCYXI7XCIsXCLiiqRcIjpcIiZ0b3A7XCIsXCLihqdcIjpcIiZtYXBzdG9kb3duO1wiLFwi8J2Sn1wiOlwiJkRzY3I7XCIsXCLEkFwiOlwiJkRzdHJvaztcIixcIsWKXCI6XCImRU5HO1wiLFwiw5BcIjpcIiZFVEg7XCIsXCLDiVwiOlwiJkVhY3V0ZTtcIixcIsSaXCI6XCImRWNhcm9uO1wiLFwiw4pcIjpcIiZFY2lyYztcIixcItCtXCI6XCImRWN5O1wiLFwixJZcIjpcIiZFZG90O1wiLFwi8J2UiFwiOlwiJkVmcjtcIixcIsOIXCI6XCImRWdyYXZlO1wiLFwi4oiIXCI6XCImaXNpbnY7XCIsXCLEklwiOlwiJkVtYWNyO1wiLFwi4pe7XCI6XCImRW1wdHlTbWFsbFNxdWFyZTtcIixcIuKWq1wiOlwiJkVtcHR5VmVyeVNtYWxsU3F1YXJlO1wiLFwixJhcIjpcIiZFb2dvbjtcIixcIvCdlLxcIjpcIiZFb3BmO1wiLFwizpVcIjpcIiZFcHNpbG9uO1wiLFwi4qm1XCI6XCImRXF1YWw7XCIsXCLiiYJcIjpcIiZlc2ltO1wiLFwi4oeMXCI6XCImcmxoYXI7XCIsXCLihLBcIjpcIiZleHBlY3RhdGlvbjtcIixcIuKps1wiOlwiJkVzaW07XCIsXCLOl1wiOlwiJkV0YTtcIixcIsOLXCI6XCImRXVtbDtcIixcIuKIg1wiOlwiJmV4aXN0O1wiLFwi4oWHXCI6XCImZXhwb25lbnRpYWxlO1wiLFwi0KRcIjpcIiZGY3k7XCIsXCLwnZSJXCI6XCImRmZyO1wiLFwi4pe8XCI6XCImRmlsbGVkU21hbGxTcXVhcmU7XCIsXCLilqpcIjpcIiZzcXVmO1wiLFwi8J2UvVwiOlwiJkZvcGY7XCIsXCLiiIBcIjpcIiZmb3JhbGw7XCIsXCLihLFcIjpcIiZGc2NyO1wiLFwi0INcIjpcIiZHSmN5O1wiLFwiPlwiOlwiJmd0O1wiLFwizpNcIjpcIiZHYW1tYTtcIixcIs+cXCI6XCImR2FtbWFkO1wiLFwixJ5cIjpcIiZHYnJldmU7XCIsXCLEolwiOlwiJkdjZWRpbDtcIixcIsScXCI6XCImR2NpcmM7XCIsXCLQk1wiOlwiJkdjeTtcIixcIsSgXCI6XCImR2RvdDtcIixcIvCdlIpcIjpcIiZHZnI7XCIsXCLii5lcIjpcIiZnZ2c7XCIsXCLwnZS+XCI6XCImR29wZjtcIixcIuKJpVwiOlwiJmdlcTtcIixcIuKLm1wiOlwiJmd0cmVxbGVzcztcIixcIuKJp1wiOlwiJmdlcXE7XCIsXCLiqqJcIjpcIiZHcmVhdGVyR3JlYXRlcjtcIixcIuKJt1wiOlwiJmd0cmxlc3M7XCIsXCLiqb5cIjpcIiZnZXM7XCIsXCLiibNcIjpcIiZndHJzaW07XCIsXCLwnZKiXCI6XCImR3NjcjtcIixcIuKJq1wiOlwiJmdnO1wiLFwi0KpcIjpcIiZIQVJEY3k7XCIsXCLLh1wiOlwiJmNhcm9uO1wiLFwiXlwiOlwiJkhhdDtcIixcIsSkXCI6XCImSGNpcmM7XCIsXCLihIxcIjpcIiZQb2luY2FyZXBsYW5lO1wiLFwi4oSLXCI6XCImaGFtaWx0O1wiLFwi4oSNXCI6XCImcXVhdGVybmlvbnM7XCIsXCLilIBcIjpcIiZib3hoO1wiLFwixKZcIjpcIiZIc3Ryb2s7XCIsXCLiiY9cIjpcIiZidW1wZXE7XCIsXCLQlVwiOlwiJklFY3k7XCIsXCLEslwiOlwiJklKbGlnO1wiLFwi0IFcIjpcIiZJT2N5O1wiLFwiw41cIjpcIiZJYWN1dGU7XCIsXCLDjlwiOlwiJkljaXJjO1wiLFwi0JhcIjpcIiZJY3k7XCIsXCLEsFwiOlwiJklkb3Q7XCIsXCLihJFcIjpcIiZpbWFncGFydDtcIixcIsOMXCI6XCImSWdyYXZlO1wiLFwixKpcIjpcIiZJbWFjcjtcIixcIuKFiFwiOlwiJmlpO1wiLFwi4oisXCI6XCImSW50O1wiLFwi4oirXCI6XCImaW50O1wiLFwi4ouCXCI6XCImeGNhcDtcIixcIuKBo1wiOlwiJmljO1wiLFwi4oGiXCI6XCImaXQ7XCIsXCLErlwiOlwiJklvZ29uO1wiLFwi8J2VgFwiOlwiJklvcGY7XCIsXCLOmVwiOlwiJklvdGE7XCIsXCLihJBcIjpcIiZpbWFnbGluZTtcIixcIsSoXCI6XCImSXRpbGRlO1wiLFwi0IZcIjpcIiZJdWtjeTtcIixcIsOPXCI6XCImSXVtbDtcIixcIsS0XCI6XCImSmNpcmM7XCIsXCLQmVwiOlwiJkpjeTtcIixcIvCdlI1cIjpcIiZKZnI7XCIsXCLwnZWBXCI6XCImSm9wZjtcIixcIvCdkqVcIjpcIiZKc2NyO1wiLFwi0IhcIjpcIiZKc2VyY3k7XCIsXCLQhFwiOlwiJkp1a2N5O1wiLFwi0KVcIjpcIiZLSGN5O1wiLFwi0IxcIjpcIiZLSmN5O1wiLFwizppcIjpcIiZLYXBwYTtcIixcIsS2XCI6XCImS2NlZGlsO1wiLFwi0JpcIjpcIiZLY3k7XCIsXCLwnZSOXCI6XCImS2ZyO1wiLFwi8J2VglwiOlwiJktvcGY7XCIsXCLwnZKmXCI6XCImS3NjcjtcIixcItCJXCI6XCImTEpjeTtcIixcIjxcIjpcIiZsdDtcIixcIsS5XCI6XCImTGFjdXRlO1wiLFwizptcIjpcIiZMYW1iZGE7XCIsXCLin6pcIjpcIiZMYW5nO1wiLFwi4oSSXCI6XCImbGFncmFuO1wiLFwi4oaeXCI6XCImdHdvaGVhZGxlZnRhcnJvdztcIixcIsS9XCI6XCImTGNhcm9uO1wiLFwixLtcIjpcIiZMY2VkaWw7XCIsXCLQm1wiOlwiJkxjeTtcIixcIuKfqFwiOlwiJmxhbmdsZTtcIixcIuKGkFwiOlwiJnNsYXJyO1wiLFwi4oekXCI6XCImbGFycmI7XCIsXCLih4ZcIjpcIiZscmFycjtcIixcIuKMiFwiOlwiJmxjZWlsO1wiLFwi4p+mXCI6XCImbG9icms7XCIsXCLipaFcIjpcIiZMZWZ0RG93blRlZVZlY3RvcjtcIixcIuKHg1wiOlwiJmRvd25oYXJwb29ubGVmdDtcIixcIuKlmVwiOlwiJkxlZnREb3duVmVjdG9yQmFyO1wiLFwi4oyKXCI6XCImbGZsb29yO1wiLFwi4oaUXCI6XCImbGVmdHJpZ2h0YXJyb3c7XCIsXCLipY5cIjpcIiZMZWZ0UmlnaHRWZWN0b3I7XCIsXCLiiqNcIjpcIiZkYXNodjtcIixcIuKGpFwiOlwiJm1hcHN0b2xlZnQ7XCIsXCLipZpcIjpcIiZMZWZ0VGVlVmVjdG9yO1wiLFwi4oqyXCI6XCImdmx0cmk7XCIsXCLip49cIjpcIiZMZWZ0VHJpYW5nbGVCYXI7XCIsXCLiirRcIjpcIiZ0cmlhbmdsZWxlZnRlcTtcIixcIuKlkVwiOlwiJkxlZnRVcERvd25WZWN0b3I7XCIsXCLipaBcIjpcIiZMZWZ0VXBUZWVWZWN0b3I7XCIsXCLihr9cIjpcIiZ1cGhhcnBvb25sZWZ0O1wiLFwi4qWYXCI6XCImTGVmdFVwVmVjdG9yQmFyO1wiLFwi4oa8XCI6XCImbGhhcnU7XCIsXCLipZJcIjpcIiZMZWZ0VmVjdG9yQmFyO1wiLFwi4ouaXCI6XCImbGVzc2VxZ3RyO1wiLFwi4ommXCI6XCImbGVxcTtcIixcIuKJtlwiOlwiJmxnO1wiLFwi4qqhXCI6XCImTGVzc0xlc3M7XCIsXCLiqb1cIjpcIiZsZXM7XCIsXCLiibJcIjpcIiZsc2ltO1wiLFwi8J2Uj1wiOlwiJkxmcjtcIixcIuKLmFwiOlwiJkxsO1wiLFwi4oeaXCI6XCImbEFhcnI7XCIsXCLEv1wiOlwiJkxtaWRvdDtcIixcIuKftVwiOlwiJnhsYXJyO1wiLFwi4p+3XCI6XCImeGhhcnI7XCIsXCLin7ZcIjpcIiZ4cmFycjtcIixcIvCdlYNcIjpcIiZMb3BmO1wiLFwi4oaZXCI6XCImc3dhcnJvdztcIixcIuKGmFwiOlwiJnNlYXJyb3c7XCIsXCLihrBcIjpcIiZsc2g7XCIsXCLFgVwiOlwiJkxzdHJvaztcIixcIuKJqlwiOlwiJmxsO1wiLFwi4qSFXCI6XCImTWFwO1wiLFwi0JxcIjpcIiZNY3k7XCIsXCLigZ9cIjpcIiZNZWRpdW1TcGFjZTtcIixcIuKEs1wiOlwiJnBobW1hdDtcIixcIvCdlJBcIjpcIiZNZnI7XCIsXCLiiJNcIjpcIiZtcDtcIixcIvCdlYRcIjpcIiZNb3BmO1wiLFwizpxcIjpcIiZNdTtcIixcItCKXCI6XCImTkpjeTtcIixcIsWDXCI6XCImTmFjdXRlO1wiLFwixYdcIjpcIiZOY2Fyb247XCIsXCLFhVwiOlwiJk5jZWRpbDtcIixcItCdXCI6XCImTmN5O1wiLFwi4oCLXCI6XCImWmVyb1dpZHRoU3BhY2U7XCIsXCJcXG5cIjpcIiZOZXdMaW5lO1wiLFwi8J2UkVwiOlwiJk5mcjtcIixcIuKBoFwiOlwiJk5vQnJlYWs7XCIsXCLCoFwiOlwiJm5ic3A7XCIsXCLihJVcIjpcIiZuYXR1cmFscztcIixcIuKrrFwiOlwiJk5vdDtcIixcIuKJolwiOlwiJm5lcXVpdjtcIixcIuKJrVwiOlwiJk5vdEN1cENhcDtcIixcIuKIplwiOlwiJm5zcGFyO1wiLFwi4oiJXCI6XCImbm90aW52YTtcIixcIuKJoFwiOlwiJm5lO1wiLFwi4omCzLhcIjpcIiZuZXNpbTtcIixcIuKIhFwiOlwiJm5leGlzdHM7XCIsXCLiia9cIjpcIiZuZ3RyO1wiLFwi4omxXCI6XCImbmdlcTtcIixcIuKJp8y4XCI6XCImbmdlcXE7XCIsXCLiiavMuFwiOlwiJm5HdHY7XCIsXCLiiblcIjpcIiZudGdsO1wiLFwi4qm+zLhcIjpcIiZuZ2VzO1wiLFwi4om1XCI6XCImbmdzaW07XCIsXCLiiY7MuFwiOlwiJm5idW1wO1wiLFwi4omPzLhcIjpcIiZuYnVtcGU7XCIsXCLii6pcIjpcIiZudHJpYW5nbGVsZWZ0O1wiLFwi4qePzLhcIjpcIiZOb3RMZWZ0VHJpYW5nbGVCYXI7XCIsXCLii6xcIjpcIiZudHJpYW5nbGVsZWZ0ZXE7XCIsXCLiia5cIjpcIiZubHQ7XCIsXCLiibBcIjpcIiZubGVxO1wiLFwi4om4XCI6XCImbnRsZztcIixcIuKJqsy4XCI6XCImbkx0djtcIixcIuKpvcy4XCI6XCImbmxlcztcIixcIuKJtFwiOlwiJm5sc2ltO1wiLFwi4qqizLhcIjpcIiZOb3ROZXN0ZWRHcmVhdGVyR3JlYXRlcjtcIixcIuKqocy4XCI6XCImTm90TmVzdGVkTGVzc0xlc3M7XCIsXCLiioBcIjpcIiZucHJlYztcIixcIuKqr8y4XCI6XCImbnByZWNlcTtcIixcIuKLoFwiOlwiJm5wcmN1ZTtcIixcIuKIjFwiOlwiJm5vdG5pdmE7XCIsXCLii6tcIjpcIiZudHJpYW5nbGVyaWdodDtcIixcIuKnkMy4XCI6XCImTm90UmlnaHRUcmlhbmdsZUJhcjtcIixcIuKLrVwiOlwiJm50cmlhbmdsZXJpZ2h0ZXE7XCIsXCLiio/MuFwiOlwiJk5vdFNxdWFyZVN1YnNldDtcIixcIuKLolwiOlwiJm5zcXN1YmU7XCIsXCLiipDMuFwiOlwiJk5vdFNxdWFyZVN1cGVyc2V0O1wiLFwi4oujXCI6XCImbnNxc3VwZTtcIixcIuKKguKDklwiOlwiJnZuc3ViO1wiLFwi4oqIXCI6XCImbnN1YnNldGVxO1wiLFwi4oqBXCI6XCImbnN1Y2M7XCIsXCLiqrDMuFwiOlwiJm5zdWNjZXE7XCIsXCLii6FcIjpcIiZuc2NjdWU7XCIsXCLiib/MuFwiOlwiJk5vdFN1Y2NlZWRzVGlsZGU7XCIsXCLiioPig5JcIjpcIiZ2bnN1cDtcIixcIuKKiVwiOlwiJm5zdXBzZXRlcTtcIixcIuKJgVwiOlwiJm5zaW07XCIsXCLiiYRcIjpcIiZuc2ltZXE7XCIsXCLiiYdcIjpcIiZuY29uZztcIixcIuKJiVwiOlwiJm5hcHByb3g7XCIsXCLiiKRcIjpcIiZuc21pZDtcIixcIvCdkqlcIjpcIiZOc2NyO1wiLFwiw5FcIjpcIiZOdGlsZGU7XCIsXCLOnVwiOlwiJk51O1wiLFwixZJcIjpcIiZPRWxpZztcIixcIsOTXCI6XCImT2FjdXRlO1wiLFwiw5RcIjpcIiZPY2lyYztcIixcItCeXCI6XCImT2N5O1wiLFwixZBcIjpcIiZPZGJsYWM7XCIsXCLwnZSSXCI6XCImT2ZyO1wiLFwiw5JcIjpcIiZPZ3JhdmU7XCIsXCLFjFwiOlwiJk9tYWNyO1wiLFwizqlcIjpcIiZvaG07XCIsXCLOn1wiOlwiJk9taWNyb247XCIsXCLwnZWGXCI6XCImT29wZjtcIixcIuKAnFwiOlwiJmxkcXVvO1wiLFwi4oCYXCI6XCImbHNxdW87XCIsXCLiqZRcIjpcIiZPcjtcIixcIvCdkqpcIjpcIiZPc2NyO1wiLFwiw5hcIjpcIiZPc2xhc2g7XCIsXCLDlVwiOlwiJk90aWxkZTtcIixcIuKot1wiOlwiJk90aW1lcztcIixcIsOWXCI6XCImT3VtbDtcIixcIuKAvlwiOlwiJm9saW5lO1wiLFwi4o+eXCI6XCImT3ZlckJyYWNlO1wiLFwi4o60XCI6XCImdGJyaztcIixcIuKPnFwiOlwiJk92ZXJQYXJlbnRoZXNpcztcIixcIuKIglwiOlwiJnBhcnQ7XCIsXCLQn1wiOlwiJlBjeTtcIixcIvCdlJNcIjpcIiZQZnI7XCIsXCLOplwiOlwiJlBoaTtcIixcIs6gXCI6XCImUGk7XCIsXCLCsVwiOlwiJnBtO1wiLFwi4oSZXCI6XCImcHJpbWVzO1wiLFwi4qq7XCI6XCImUHI7XCIsXCLiibpcIjpcIiZwcmVjO1wiLFwi4qqvXCI6XCImcHJlY2VxO1wiLFwi4om8XCI6XCImcHJlY2N1cmx5ZXE7XCIsXCLiib5cIjpcIiZwcnNpbTtcIixcIuKAs1wiOlwiJlByaW1lO1wiLFwi4oiPXCI6XCImcHJvZDtcIixcIuKInVwiOlwiJnZwcm9wO1wiLFwi8J2Sq1wiOlwiJlBzY3I7XCIsXCLOqFwiOlwiJlBzaTtcIiwnXCInOlwiJnF1b3Q7XCIsXCLwnZSUXCI6XCImUWZyO1wiLFwi4oSaXCI6XCImcmF0aW9uYWxzO1wiLFwi8J2SrFwiOlwiJlFzY3I7XCIsXCLipJBcIjpcIiZkcmJrYXJvdztcIixcIsKuXCI6XCImcmVnO1wiLFwixZRcIjpcIiZSYWN1dGU7XCIsXCLin6tcIjpcIiZSYW5nO1wiLFwi4oagXCI6XCImdHdvaGVhZHJpZ2h0YXJyb3c7XCIsXCLipJZcIjpcIiZSYXJydGw7XCIsXCLFmFwiOlwiJlJjYXJvbjtcIixcIsWWXCI6XCImUmNlZGlsO1wiLFwi0KBcIjpcIiZSY3k7XCIsXCLihJxcIjpcIiZyZWFscGFydDtcIixcIuKIi1wiOlwiJm5pdjtcIixcIuKHi1wiOlwiJmxyaGFyO1wiLFwi4qWvXCI6XCImZHVoYXI7XCIsXCLOoVwiOlwiJlJobztcIixcIuKfqVwiOlwiJnJhbmdsZTtcIixcIuKGklwiOlwiJnNyYXJyO1wiLFwi4oelXCI6XCImcmFycmI7XCIsXCLih4RcIjpcIiZybGFycjtcIixcIuKMiVwiOlwiJnJjZWlsO1wiLFwi4p+nXCI6XCImcm9icms7XCIsXCLipZ1cIjpcIiZSaWdodERvd25UZWVWZWN0b3I7XCIsXCLih4JcIjpcIiZkb3duaGFycG9vbnJpZ2h0O1wiLFwi4qWVXCI6XCImUmlnaHREb3duVmVjdG9yQmFyO1wiLFwi4oyLXCI6XCImcmZsb29yO1wiLFwi4oqiXCI6XCImdmRhc2g7XCIsXCLihqZcIjpcIiZtYXBzdG87XCIsXCLipZtcIjpcIiZSaWdodFRlZVZlY3RvcjtcIixcIuKKs1wiOlwiJnZydHJpO1wiLFwi4qeQXCI6XCImUmlnaHRUcmlhbmdsZUJhcjtcIixcIuKKtVwiOlwiJnRyaWFuZ2xlcmlnaHRlcTtcIixcIuKlj1wiOlwiJlJpZ2h0VXBEb3duVmVjdG9yO1wiLFwi4qWcXCI6XCImUmlnaHRVcFRlZVZlY3RvcjtcIixcIuKGvlwiOlwiJnVwaGFycG9vbnJpZ2h0O1wiLFwi4qWUXCI6XCImUmlnaHRVcFZlY3RvckJhcjtcIixcIuKHgFwiOlwiJnJpZ2h0aGFycG9vbnVwO1wiLFwi4qWTXCI6XCImUmlnaHRWZWN0b3JCYXI7XCIsXCLihJ1cIjpcIiZyZWFscztcIixcIuKlsFwiOlwiJlJvdW5kSW1wbGllcztcIixcIuKHm1wiOlwiJnJBYXJyO1wiLFwi4oSbXCI6XCImcmVhbGluZTtcIixcIuKGsVwiOlwiJnJzaDtcIixcIuKntFwiOlwiJlJ1bGVEZWxheWVkO1wiLFwi0KlcIjpcIiZTSENIY3k7XCIsXCLQqFwiOlwiJlNIY3k7XCIsXCLQrFwiOlwiJlNPRlRjeTtcIixcIsWaXCI6XCImU2FjdXRlO1wiLFwi4qq8XCI6XCImU2M7XCIsXCLFoFwiOlwiJlNjYXJvbjtcIixcIsWeXCI6XCImU2NlZGlsO1wiLFwixZxcIjpcIiZTY2lyYztcIixcItChXCI6XCImU2N5O1wiLFwi8J2UllwiOlwiJlNmcjtcIixcIuKGkVwiOlwiJnVwYXJyb3c7XCIsXCLOo1wiOlwiJlNpZ21hO1wiLFwi4oiYXCI6XCImY29tcGZuO1wiLFwi8J2VilwiOlwiJlNvcGY7XCIsXCLiiJpcIjpcIiZyYWRpYztcIixcIuKWoVwiOlwiJnNxdWFyZTtcIixcIuKKk1wiOlwiJnNxY2FwO1wiLFwi4oqPXCI6XCImc3FzdWJzZXQ7XCIsXCLiipFcIjpcIiZzcXN1YnNldGVxO1wiLFwi4oqQXCI6XCImc3FzdXBzZXQ7XCIsXCLiipJcIjpcIiZzcXN1cHNldGVxO1wiLFwi4oqUXCI6XCImc3FjdXA7XCIsXCLwnZKuXCI6XCImU3NjcjtcIixcIuKLhlwiOlwiJnNzdGFyZjtcIixcIuKLkFwiOlwiJlN1YnNldDtcIixcIuKKhlwiOlwiJnN1YnNldGVxO1wiLFwi4om7XCI6XCImc3VjYztcIixcIuKqsFwiOlwiJnN1Y2NlcTtcIixcIuKJvVwiOlwiJnN1Y2NjdXJseWVxO1wiLFwi4om/XCI6XCImc3VjY3NpbTtcIixcIuKIkVwiOlwiJnN1bTtcIixcIuKLkVwiOlwiJlN1cHNldDtcIixcIuKKg1wiOlwiJnN1cHNldDtcIixcIuKKh1wiOlwiJnN1cHNldGVxO1wiLFwiw55cIjpcIiZUSE9STjtcIixcIuKEolwiOlwiJnRyYWRlO1wiLFwi0ItcIjpcIiZUU0hjeTtcIixcItCmXCI6XCImVFNjeTtcIixcIlxcdFwiOlwiJlRhYjtcIixcIs6kXCI6XCImVGF1O1wiLFwixaRcIjpcIiZUY2Fyb247XCIsXCLFolwiOlwiJlRjZWRpbDtcIixcItCiXCI6XCImVGN5O1wiLFwi8J2Ul1wiOlwiJlRmcjtcIixcIuKItFwiOlwiJnRoZXJlZm9yZTtcIixcIs6YXCI6XCImVGhldGE7XCIsXCLigZ/igIpcIjpcIiZUaGlja1NwYWNlO1wiLFwi4oCJXCI6XCImdGhpbnNwO1wiLFwi4oi8XCI6XCImdGhrc2ltO1wiLFwi4omDXCI6XCImc2ltZXE7XCIsXCLiiYVcIjpcIiZjb25nO1wiLFwi4omIXCI6XCImdGhrYXA7XCIsXCLwnZWLXCI6XCImVG9wZjtcIixcIuKDm1wiOlwiJnRkb3Q7XCIsXCLwnZKvXCI6XCImVHNjcjtcIixcIsWmXCI6XCImVHN0cm9rO1wiLFwiw5pcIjpcIiZVYWN1dGU7XCIsXCLihp9cIjpcIiZVYXJyO1wiLFwi4qWJXCI6XCImVWFycm9jaXI7XCIsXCLQjlwiOlwiJlVicmN5O1wiLFwixaxcIjpcIiZVYnJldmU7XCIsXCLDm1wiOlwiJlVjaXJjO1wiLFwi0KNcIjpcIiZVY3k7XCIsXCLFsFwiOlwiJlVkYmxhYztcIixcIvCdlJhcIjpcIiZVZnI7XCIsXCLDmVwiOlwiJlVncmF2ZTtcIixcIsWqXCI6XCImVW1hY3I7XCIsXzpcIiZsb3diYXI7XCIsXCLij59cIjpcIiZVbmRlckJyYWNlO1wiLFwi4o61XCI6XCImYmJyaztcIixcIuKPnVwiOlwiJlVuZGVyUGFyZW50aGVzaXM7XCIsXCLii4NcIjpcIiZ4Y3VwO1wiLFwi4oqOXCI6XCImdXBsdXM7XCIsXCLFslwiOlwiJlVvZ29uO1wiLFwi8J2VjFwiOlwiJlVvcGY7XCIsXCLipJJcIjpcIiZVcEFycm93QmFyO1wiLFwi4oeFXCI6XCImdWRhcnI7XCIsXCLihpVcIjpcIiZ2YXJyO1wiLFwi4qWuXCI6XCImdWRoYXI7XCIsXCLiiqVcIjpcIiZwZXJwO1wiLFwi4oalXCI6XCImbWFwc3RvdXA7XCIsXCLihpZcIjpcIiZud2Fycm93O1wiLFwi4oaXXCI6XCImbmVhcnJvdztcIixcIs+SXCI6XCImdXBzaWg7XCIsXCLOpVwiOlwiJlVwc2lsb247XCIsXCLFrlwiOlwiJlVyaW5nO1wiLFwi8J2SsFwiOlwiJlVzY3I7XCIsXCLFqFwiOlwiJlV0aWxkZTtcIixcIsOcXCI6XCImVXVtbDtcIixcIuKKq1wiOlwiJlZEYXNoO1wiLFwi4qurXCI6XCImVmJhcjtcIixcItCSXCI6XCImVmN5O1wiLFwi4oqpXCI6XCImVmRhc2g7XCIsXCLiq6ZcIjpcIiZWZGFzaGw7XCIsXCLii4FcIjpcIiZ4dmVlO1wiLFwi4oCWXCI6XCImVmVydDtcIixcIuKIo1wiOlwiJnNtaWQ7XCIsXCJ8XCI6XCImdmVydDtcIixcIuKdmFwiOlwiJlZlcnRpY2FsU2VwYXJhdG9yO1wiLFwi4omAXCI6XCImd3JlYXRoO1wiLFwi4oCKXCI6XCImaGFpcnNwO1wiLFwi8J2UmVwiOlwiJlZmcjtcIixcIvCdlY1cIjpcIiZWb3BmO1wiLFwi8J2SsVwiOlwiJlZzY3I7XCIsXCLiiqpcIjpcIiZWdmRhc2g7XCIsXCLFtFwiOlwiJldjaXJjO1wiLFwi4ouAXCI6XCImeHdlZGdlO1wiLFwi8J2UmlwiOlwiJldmcjtcIixcIvCdlY5cIjpcIiZXb3BmO1wiLFwi8J2SslwiOlwiJldzY3I7XCIsXCLwnZSbXCI6XCImWGZyO1wiLFwizp5cIjpcIiZYaTtcIixcIvCdlY9cIjpcIiZYb3BmO1wiLFwi8J2Ss1wiOlwiJlhzY3I7XCIsXCLQr1wiOlwiJllBY3k7XCIsXCLQh1wiOlwiJllJY3k7XCIsXCLQrlwiOlwiJllVY3k7XCIsXCLDnVwiOlwiJllhY3V0ZTtcIixcIsW2XCI6XCImWWNpcmM7XCIsXCLQq1wiOlwiJlljeTtcIixcIvCdlJxcIjpcIiZZZnI7XCIsXCLwnZWQXCI6XCImWW9wZjtcIixcIvCdkrRcIjpcIiZZc2NyO1wiLFwixbhcIjpcIiZZdW1sO1wiLFwi0JZcIjpcIiZaSGN5O1wiLFwixblcIjpcIiZaYWN1dGU7XCIsXCLFvVwiOlwiJlpjYXJvbjtcIixcItCXXCI6XCImWmN5O1wiLFwixbtcIjpcIiZaZG90O1wiLFwizpZcIjpcIiZaZXRhO1wiLFwi4oSoXCI6XCImemVldHJmO1wiLFwi4oSkXCI6XCImaW50ZWdlcnM7XCIsXCLwnZK1XCI6XCImWnNjcjtcIixcIsOhXCI6XCImYWFjdXRlO1wiLFwixINcIjpcIiZhYnJldmU7XCIsXCLiiL5cIjpcIiZtc3Rwb3M7XCIsXCLiiL7Ms1wiOlwiJmFjRTtcIixcIuKIv1wiOlwiJmFjZDtcIixcIsOiXCI6XCImYWNpcmM7XCIsXCLQsFwiOlwiJmFjeTtcIixcIsOmXCI6XCImYWVsaWc7XCIsXCLwnZSeXCI6XCImYWZyO1wiLFwiw6BcIjpcIiZhZ3JhdmU7XCIsXCLihLVcIjpcIiZhbGVwaDtcIixcIs6xXCI6XCImYWxwaGE7XCIsXCLEgVwiOlwiJmFtYWNyO1wiLFwi4qi/XCI6XCImYW1hbGc7XCIsXCLiiKdcIjpcIiZ3ZWRnZTtcIixcIuKplVwiOlwiJmFuZGFuZDtcIixcIuKpnFwiOlwiJmFuZGQ7XCIsXCLiqZhcIjpcIiZhbmRzbG9wZTtcIixcIuKpmlwiOlwiJmFuZHY7XCIsXCLiiKBcIjpcIiZhbmdsZTtcIixcIuKmpFwiOlwiJmFuZ2U7XCIsXCLiiKFcIjpcIiZtZWFzdXJlZGFuZ2xlO1wiLFwi4qaoXCI6XCImYW5nbXNkYWE7XCIsXCLipqlcIjpcIiZhbmdtc2RhYjtcIixcIuKmqlwiOlwiJmFuZ21zZGFjO1wiLFwi4qarXCI6XCImYW5nbXNkYWQ7XCIsXCLipqxcIjpcIiZhbmdtc2RhZTtcIixcIuKmrVwiOlwiJmFuZ21zZGFmO1wiLFwi4qauXCI6XCImYW5nbXNkYWc7XCIsXCLipq9cIjpcIiZhbmdtc2RhaDtcIixcIuKIn1wiOlwiJmFuZ3J0O1wiLFwi4oq+XCI6XCImYW5ncnR2YjtcIixcIuKmnVwiOlwiJmFuZ3J0dmJkO1wiLFwi4oiiXCI6XCImYW5nc3BoO1wiLFwi4o28XCI6XCImYW5nemFycjtcIixcIsSFXCI6XCImYW9nb247XCIsXCLwnZWSXCI6XCImYW9wZjtcIixcIuKpsFwiOlwiJmFwRTtcIixcIuKpr1wiOlwiJmFwYWNpcjtcIixcIuKJilwiOlwiJmFwcHJveGVxO1wiLFwi4omLXCI6XCImYXBpZDtcIixcIidcIjpcIiZhcG9zO1wiLFwiw6VcIjpcIiZhcmluZztcIixcIvCdkrZcIjpcIiZhc2NyO1wiLFwiKlwiOlwiJm1pZGFzdDtcIixcIsOjXCI6XCImYXRpbGRlO1wiLFwiw6RcIjpcIiZhdW1sO1wiLFwi4qiRXCI6XCImYXdpbnQ7XCIsXCLiq61cIjpcIiZiTm90O1wiLFwi4omMXCI6XCImYmNvbmc7XCIsXCLPtlwiOlwiJmJlcHNpO1wiLFwi4oC1XCI6XCImYnByaW1lO1wiLFwi4oi9XCI6XCImYnNpbTtcIixcIuKLjVwiOlwiJmJzaW1lO1wiLFwi4oq9XCI6XCImYmFydmVlO1wiLFwi4oyFXCI6XCImYmFyd2VkZ2U7XCIsXCLijrZcIjpcIiZiYnJrdGJyaztcIixcItCxXCI6XCImYmN5O1wiLFwi4oCeXCI6XCImbGRxdW9yO1wiLFwi4qawXCI6XCImYmVtcHR5djtcIixcIs6yXCI6XCImYmV0YTtcIixcIuKEtlwiOlwiJmJldGg7XCIsXCLiiaxcIjpcIiZ0d2l4dDtcIixcIvCdlJ9cIjpcIiZiZnI7XCIsXCLil69cIjpcIiZ4Y2lyYztcIixcIuKogFwiOlwiJnhvZG90O1wiLFwi4qiBXCI6XCImeG9wbHVzO1wiLFwi4qiCXCI6XCImeG90aW1lO1wiLFwi4qiGXCI6XCImeHNxY3VwO1wiLFwi4piFXCI6XCImc3RhcmY7XCIsXCLilr1cIjpcIiZ4ZHRyaTtcIixcIuKWs1wiOlwiJnh1dHJpO1wiLFwi4qiEXCI6XCImeHVwbHVzO1wiLFwi4qSNXCI6XCImcmJhcnI7XCIsXCLip6tcIjpcIiZsb3pmO1wiLFwi4pa0XCI6XCImdXRyaWY7XCIsXCLilr5cIjpcIiZkdHJpZjtcIixcIuKXglwiOlwiJmx0cmlmO1wiLFwi4pa4XCI6XCImcnRyaWY7XCIsXCLikKNcIjpcIiZibGFuaztcIixcIuKWklwiOlwiJmJsazEyO1wiLFwi4paRXCI6XCImYmxrMTQ7XCIsXCLilpNcIjpcIiZibGszNDtcIixcIuKWiFwiOlwiJmJsb2NrO1wiLFwiPeKDpVwiOlwiJmJuZTtcIixcIuKJoeKDpVwiOlwiJmJuZXF1aXY7XCIsXCLijJBcIjpcIiZibm90O1wiLFwi8J2Vk1wiOlwiJmJvcGY7XCIsXCLii4hcIjpcIiZib3d0aWU7XCIsXCLilZdcIjpcIiZib3hETDtcIixcIuKVlFwiOlwiJmJveERSO1wiLFwi4pWWXCI6XCImYm94RGw7XCIsXCLilZNcIjpcIiZib3hEcjtcIixcIuKVkFwiOlwiJmJveEg7XCIsXCLilaZcIjpcIiZib3hIRDtcIixcIuKVqVwiOlwiJmJveEhVO1wiLFwi4pWkXCI6XCImYm94SGQ7XCIsXCLiladcIjpcIiZib3hIdTtcIixcIuKVnVwiOlwiJmJveFVMO1wiLFwi4pWaXCI6XCImYm94VVI7XCIsXCLilZxcIjpcIiZib3hVbDtcIixcIuKVmVwiOlwiJmJveFVyO1wiLFwi4pWRXCI6XCImYm94VjtcIixcIuKVrFwiOlwiJmJveFZIO1wiLFwi4pWjXCI6XCImYm94Vkw7XCIsXCLilaBcIjpcIiZib3hWUjtcIixcIuKVq1wiOlwiJmJveFZoO1wiLFwi4pWiXCI6XCImYm94Vmw7XCIsXCLilZ9cIjpcIiZib3hWcjtcIixcIuKniVwiOlwiJmJveGJveDtcIixcIuKVlVwiOlwiJmJveGRMO1wiLFwi4pWSXCI6XCImYm94ZFI7XCIsXCLilJBcIjpcIiZib3hkbDtcIixcIuKUjFwiOlwiJmJveGRyO1wiLFwi4pWlXCI6XCImYm94aEQ7XCIsXCLilahcIjpcIiZib3hoVTtcIixcIuKUrFwiOlwiJmJveGhkO1wiLFwi4pS0XCI6XCImYm94aHU7XCIsXCLiip9cIjpcIiZtaW51c2I7XCIsXCLiip5cIjpcIiZwbHVzYjtcIixcIuKKoFwiOlwiJnRpbWVzYjtcIixcIuKVm1wiOlwiJmJveHVMO1wiLFwi4pWYXCI6XCImYm94dVI7XCIsXCLilJhcIjpcIiZib3h1bDtcIixcIuKUlFwiOlwiJmJveHVyO1wiLFwi4pSCXCI6XCImYm94djtcIixcIuKVqlwiOlwiJmJveHZIO1wiLFwi4pWhXCI6XCImYm94dkw7XCIsXCLilZ5cIjpcIiZib3h2UjtcIixcIuKUvFwiOlwiJmJveHZoO1wiLFwi4pSkXCI6XCImYm94dmw7XCIsXCLilJxcIjpcIiZib3h2cjtcIixcIsKmXCI6XCImYnJ2YmFyO1wiLFwi8J2St1wiOlwiJmJzY3I7XCIsXCLigY9cIjpcIiZic2VtaTtcIixcIlxcXFxcIjpcIiZic29sO1wiLFwi4qeFXCI6XCImYnNvbGI7XCIsXCLin4hcIjpcIiZic29saHN1YjtcIixcIuKAolwiOlwiJmJ1bGxldDtcIixcIuKqrlwiOlwiJmJ1bXBFO1wiLFwixIdcIjpcIiZjYWN1dGU7XCIsXCLiiKlcIjpcIiZjYXA7XCIsXCLiqYRcIjpcIiZjYXBhbmQ7XCIsXCLiqYlcIjpcIiZjYXBicmN1cDtcIixcIuKpi1wiOlwiJmNhcGNhcDtcIixcIuKph1wiOlwiJmNhcGN1cDtcIixcIuKpgFwiOlwiJmNhcGRvdDtcIixcIuKIqe+4gFwiOlwiJmNhcHM7XCIsXCLigYFcIjpcIiZjYXJldDtcIixcIuKpjVwiOlwiJmNjYXBzO1wiLFwixI1cIjpcIiZjY2Fyb247XCIsXCLDp1wiOlwiJmNjZWRpbDtcIixcIsSJXCI6XCImY2NpcmM7XCIsXCLiqYxcIjpcIiZjY3VwcztcIixcIuKpkFwiOlwiJmNjdXBzc207XCIsXCLEi1wiOlwiJmNkb3Q7XCIsXCLiprJcIjpcIiZjZW1wdHl2O1wiLFwiwqJcIjpcIiZjZW50O1wiLFwi8J2UoFwiOlwiJmNmcjtcIixcItGHXCI6XCImY2hjeTtcIixcIuKck1wiOlwiJmNoZWNrbWFyaztcIixcIs+HXCI6XCImY2hpO1wiLFwi4peLXCI6XCImY2lyO1wiLFwi4qeDXCI6XCImY2lyRTtcIixcIsuGXCI6XCImY2lyYztcIixcIuKJl1wiOlwiJmNpcmU7XCIsXCLihrpcIjpcIiZvbGFycjtcIixcIuKGu1wiOlwiJm9yYXJyO1wiLFwi4pOIXCI6XCImb1M7XCIsXCLiiptcIjpcIiZvYXN0O1wiLFwi4oqaXCI6XCImb2NpcjtcIixcIuKKnVwiOlwiJm9kYXNoO1wiLFwi4qiQXCI6XCImY2lyZm5pbnQ7XCIsXCLiq69cIjpcIiZjaXJtaWQ7XCIsXCLip4JcIjpcIiZjaXJzY2lyO1wiLFwi4pmjXCI6XCImY2x1YnN1aXQ7XCIsXCI6XCI6XCImY29sb247XCIsXCIsXCI6XCImY29tbWE7XCIsXCJAXCI6XCImY29tbWF0O1wiLFwi4oiBXCI6XCImY29tcGxlbWVudDtcIixcIuKprVwiOlwiJmNvbmdkb3Q7XCIsXCLwnZWUXCI6XCImY29wZjtcIixcIuKEl1wiOlwiJmNvcHlzcjtcIixcIuKGtVwiOlwiJmNyYXJyO1wiLFwi4pyXXCI6XCImY3Jvc3M7XCIsXCLwnZK4XCI6XCImY3NjcjtcIixcIuKrj1wiOlwiJmNzdWI7XCIsXCLiq5FcIjpcIiZjc3ViZTtcIixcIuKrkFwiOlwiJmNzdXA7XCIsXCLiq5JcIjpcIiZjc3VwZTtcIixcIuKLr1wiOlwiJmN0ZG90O1wiLFwi4qS4XCI6XCImY3VkYXJybDtcIixcIuKktVwiOlwiJmN1ZGFycnI7XCIsXCLii55cIjpcIiZjdXJseWVxcHJlYztcIixcIuKLn1wiOlwiJmN1cmx5ZXFzdWNjO1wiLFwi4oa2XCI6XCImY3VydmVhcnJvd2xlZnQ7XCIsXCLipL1cIjpcIiZjdWxhcnJwO1wiLFwi4oiqXCI6XCImY3VwO1wiLFwi4qmIXCI6XCImY3VwYnJjYXA7XCIsXCLiqYZcIjpcIiZjdXBjYXA7XCIsXCLiqYpcIjpcIiZjdXBjdXA7XCIsXCLiio1cIjpcIiZjdXBkb3Q7XCIsXCLiqYVcIjpcIiZjdXBvcjtcIixcIuKIqu+4gFwiOlwiJmN1cHM7XCIsXCLihrdcIjpcIiZjdXJ2ZWFycm93cmlnaHQ7XCIsXCLipLxcIjpcIiZjdXJhcnJtO1wiLFwi4ouOXCI6XCImY3V2ZWU7XCIsXCLii49cIjpcIiZjdXdlZDtcIixcIsKkXCI6XCImY3VycmVuO1wiLFwi4oixXCI6XCImY3dpbnQ7XCIsXCLijK1cIjpcIiZjeWxjdHk7XCIsXCLipaVcIjpcIiZkSGFyO1wiLFwi4oCgXCI6XCImZGFnZ2VyO1wiLFwi4oS4XCI6XCImZGFsZXRoO1wiLFwi4oCQXCI6XCImaHlwaGVuO1wiLFwi4qSPXCI6XCImckJhcnI7XCIsXCLEj1wiOlwiJmRjYXJvbjtcIixcItC0XCI6XCImZGN5O1wiLFwi4oeKXCI6XCImZG93bmRvd25hcnJvd3M7XCIsXCLiqbdcIjpcIiZlRERvdDtcIixcIsKwXCI6XCImZGVnO1wiLFwizrRcIjpcIiZkZWx0YTtcIixcIuKmsVwiOlwiJmRlbXB0eXY7XCIsXCLipb9cIjpcIiZkZmlzaHQ7XCIsXCLwnZShXCI6XCImZGZyO1wiLFwi4pmmXCI6XCImZGlhbXM7XCIsXCLPnVwiOlwiJmdhbW1hZDtcIixcIuKLslwiOlwiJmRpc2luO1wiLFwiw7dcIjpcIiZkaXZpZGU7XCIsXCLii4dcIjpcIiZkaXZvbng7XCIsXCLRklwiOlwiJmRqY3k7XCIsXCLijJ5cIjpcIiZsbGNvcm5lcjtcIixcIuKMjVwiOlwiJmRsY3JvcDtcIiwkOlwiJmRvbGxhcjtcIixcIvCdlZVcIjpcIiZkb3BmO1wiLFwi4omRXCI6XCImZURvdDtcIixcIuKIuFwiOlwiJm1pbnVzZDtcIixcIuKIlFwiOlwiJnBsdXNkbztcIixcIuKKoVwiOlwiJnNkb3RiO1wiLFwi4oyfXCI6XCImbHJjb3JuZXI7XCIsXCLijIxcIjpcIiZkcmNyb3A7XCIsXCLwnZK5XCI6XCImZHNjcjtcIixcItGVXCI6XCImZHNjeTtcIixcIuKntlwiOlwiJmRzb2w7XCIsXCLEkVwiOlwiJmRzdHJvaztcIixcIuKLsVwiOlwiJmR0ZG90O1wiLFwi4pa/XCI6XCImdHJpYW5nbGVkb3duO1wiLFwi4qamXCI6XCImZHdhbmdsZTtcIixcItGfXCI6XCImZHpjeTtcIixcIuKfv1wiOlwiJmR6aWdyYXJyO1wiLFwiw6lcIjpcIiZlYWN1dGU7XCIsXCLiqa5cIjpcIiZlYXN0ZXI7XCIsXCLEm1wiOlwiJmVjYXJvbjtcIixcIuKJllwiOlwiJmVxY2lyYztcIixcIsOqXCI6XCImZWNpcmM7XCIsXCLiiZVcIjpcIiZlcWNvbG9uO1wiLFwi0Y1cIjpcIiZlY3k7XCIsXCLEl1wiOlwiJmVkb3Q7XCIsXCLiiZJcIjpcIiZmYWxsaW5nZG90c2VxO1wiLFwi8J2UolwiOlwiJmVmcjtcIixcIuKqmlwiOlwiJmVnO1wiLFwiw6hcIjpcIiZlZ3JhdmU7XCIsXCLiqpZcIjpcIiZlcXNsYW50Z3RyO1wiLFwi4qqYXCI6XCImZWdzZG90O1wiLFwi4qqZXCI6XCImZWw7XCIsXCLij6dcIjpcIiZlbGludGVycztcIixcIuKEk1wiOlwiJmVsbDtcIixcIuKqlVwiOlwiJmVxc2xhbnRsZXNzO1wiLFwi4qqXXCI6XCImZWxzZG90O1wiLFwixJNcIjpcIiZlbWFjcjtcIixcIuKIhVwiOlwiJnZhcm5vdGhpbmc7XCIsXCLigIRcIjpcIiZlbXNwMTM7XCIsXCLigIVcIjpcIiZlbXNwMTQ7XCIsXCLigINcIjpcIiZlbXNwO1wiLFwixYtcIjpcIiZlbmc7XCIsXCLigIJcIjpcIiZlbnNwO1wiLFwixJlcIjpcIiZlb2dvbjtcIixcIvCdlZZcIjpcIiZlb3BmO1wiLFwi4ouVXCI6XCImZXBhcjtcIixcIuKno1wiOlwiJmVwYXJzbDtcIixcIuKpsVwiOlwiJmVwbHVzO1wiLFwizrVcIjpcIiZlcHNpbG9uO1wiLFwiz7VcIjpcIiZ2YXJlcHNpbG9uO1wiLFwiPVwiOlwiJmVxdWFscztcIixcIuKJn1wiOlwiJnF1ZXN0ZXE7XCIsXCLiqbhcIjpcIiZlcXVpdkREO1wiLFwi4qelXCI6XCImZXF2cGFyc2w7XCIsXCLiiZNcIjpcIiZyaXNpbmdkb3RzZXE7XCIsXCLipbFcIjpcIiZlcmFycjtcIixcIuKEr1wiOlwiJmVzY3I7XCIsXCLOt1wiOlwiJmV0YTtcIixcIsOwXCI6XCImZXRoO1wiLFwiw6tcIjpcIiZldW1sO1wiLFwi4oKsXCI6XCImZXVybztcIixcIiFcIjpcIiZleGNsO1wiLFwi0YRcIjpcIiZmY3k7XCIsXCLimYBcIjpcIiZmZW1hbGU7XCIsXCLvrINcIjpcIiZmZmlsaWc7XCIsXCLvrIBcIjpcIiZmZmxpZztcIixcIu+shFwiOlwiJmZmbGxpZztcIixcIvCdlKNcIjpcIiZmZnI7XCIsXCLvrIFcIjpcIiZmaWxpZztcIixmajpcIiZmamxpZztcIixcIuKZrVwiOlwiJmZsYXQ7XCIsXCLvrIJcIjpcIiZmbGxpZztcIixcIuKWsVwiOlwiJmZsdG5zO1wiLFwixpJcIjpcIiZmbm9mO1wiLFwi8J2Vl1wiOlwiJmZvcGY7XCIsXCLii5RcIjpcIiZwaXRjaGZvcms7XCIsXCLiq5lcIjpcIiZmb3JrdjtcIixcIuKojVwiOlwiJmZwYXJ0aW50O1wiLFwiwr1cIjpcIiZoYWxmO1wiLFwi4oWTXCI6XCImZnJhYzEzO1wiLFwiwrxcIjpcIiZmcmFjMTQ7XCIsXCLihZVcIjpcIiZmcmFjMTU7XCIsXCLihZlcIjpcIiZmcmFjMTY7XCIsXCLihZtcIjpcIiZmcmFjMTg7XCIsXCLihZRcIjpcIiZmcmFjMjM7XCIsXCLihZZcIjpcIiZmcmFjMjU7XCIsXCLCvlwiOlwiJmZyYWMzNDtcIixcIuKFl1wiOlwiJmZyYWMzNTtcIixcIuKFnFwiOlwiJmZyYWMzODtcIixcIuKFmFwiOlwiJmZyYWM0NTtcIixcIuKFmlwiOlwiJmZyYWM1NjtcIixcIuKFnVwiOlwiJmZyYWM1ODtcIixcIuKFnlwiOlwiJmZyYWM3ODtcIixcIuKBhFwiOlwiJmZyYXNsO1wiLFwi4oyiXCI6XCImc2Zyb3duO1wiLFwi8J2Su1wiOlwiJmZzY3I7XCIsXCLiqoxcIjpcIiZndHJlcXFsZXNzO1wiLFwix7VcIjpcIiZnYWN1dGU7XCIsXCLOs1wiOlwiJmdhbW1hO1wiLFwi4qqGXCI6XCImZ3RyYXBwcm94O1wiLFwixJ9cIjpcIiZnYnJldmU7XCIsXCLEnVwiOlwiJmdjaXJjO1wiLFwi0LNcIjpcIiZnY3k7XCIsXCLEoVwiOlwiJmdkb3Q7XCIsXCLiqqlcIjpcIiZnZXNjYztcIixcIuKqgFwiOlwiJmdlc2RvdDtcIixcIuKqglwiOlwiJmdlc2RvdG87XCIsXCLiqoRcIjpcIiZnZXNkb3RvbDtcIixcIuKLm++4gFwiOlwiJmdlc2w7XCIsXCLiqpRcIjpcIiZnZXNsZXM7XCIsXCLwnZSkXCI6XCImZ2ZyO1wiLFwi4oS3XCI6XCImZ2ltZWw7XCIsXCLRk1wiOlwiJmdqY3k7XCIsXCLiqpJcIjpcIiZnbEU7XCIsXCLiqqVcIjpcIiZnbGE7XCIsXCLiqqRcIjpcIiZnbGo7XCIsXCLiialcIjpcIiZnbmVxcTtcIixcIuKqilwiOlwiJmduYXBwcm94O1wiLFwi4qqIXCI6XCImZ25lcTtcIixcIuKLp1wiOlwiJmduc2ltO1wiLFwi8J2VmFwiOlwiJmdvcGY7XCIsXCLihIpcIjpcIiZnc2NyO1wiLFwi4qqOXCI6XCImZ3NpbWU7XCIsXCLiqpBcIjpcIiZnc2ltbDtcIixcIuKqp1wiOlwiJmd0Y2M7XCIsXCLiqbpcIjpcIiZndGNpcjtcIixcIuKLl1wiOlwiJmd0cmRvdDtcIixcIuKmlVwiOlwiJmd0bFBhcjtcIixcIuKpvFwiOlwiJmd0cXVlc3Q7XCIsXCLipbhcIjpcIiZndHJhcnI7XCIsXCLiianvuIBcIjpcIiZndm5FO1wiLFwi0YpcIjpcIiZoYXJkY3k7XCIsXCLipYhcIjpcIiZoYXJyY2lyO1wiLFwi4oatXCI6XCImbGVmdHJpZ2h0c3F1aWdhcnJvdztcIixcIuKEj1wiOlwiJnBsYW5rdjtcIixcIsSlXCI6XCImaGNpcmM7XCIsXCLimaVcIjpcIiZoZWFydHN1aXQ7XCIsXCLigKZcIjpcIiZtbGRyO1wiLFwi4oq5XCI6XCImaGVyY29uO1wiLFwi8J2UpVwiOlwiJmhmcjtcIixcIuKkpVwiOlwiJnNlYXJoaztcIixcIuKkplwiOlwiJnN3YXJoaztcIixcIuKHv1wiOlwiJmhvYXJyO1wiLFwi4oi7XCI6XCImaG9tdGh0O1wiLFwi4oapXCI6XCImbGFycmhrO1wiLFwi4oaqXCI6XCImcmFycmhrO1wiLFwi8J2VmVwiOlwiJmhvcGY7XCIsXCLigJVcIjpcIiZob3JiYXI7XCIsXCLwnZK9XCI6XCImaHNjcjtcIixcIsSnXCI6XCImaHN0cm9rO1wiLFwi4oGDXCI6XCImaHlidWxsO1wiLFwiw61cIjpcIiZpYWN1dGU7XCIsXCLDrlwiOlwiJmljaXJjO1wiLFwi0LhcIjpcIiZpY3k7XCIsXCLQtVwiOlwiJmllY3k7XCIsXCLCoVwiOlwiJmlleGNsO1wiLFwi8J2UplwiOlwiJmlmcjtcIixcIsOsXCI6XCImaWdyYXZlO1wiLFwi4qiMXCI6XCImcWludDtcIixcIuKIrVwiOlwiJnRpbnQ7XCIsXCLip5xcIjpcIiZpaW5maW47XCIsXCLihKlcIjpcIiZpaW90YTtcIixcIsSzXCI6XCImaWpsaWc7XCIsXCLEq1wiOlwiJmltYWNyO1wiLFwixLFcIjpcIiZpbm9kb3Q7XCIsXCLiirdcIjpcIiZpbW9mO1wiLFwixrVcIjpcIiZpbXBlZDtcIixcIuKEhVwiOlwiJmluY2FyZTtcIixcIuKInlwiOlwiJmluZmluO1wiLFwi4qedXCI6XCImaW5maW50aWU7XCIsXCLiirpcIjpcIiZpbnRlcmNhbDtcIixcIuKol1wiOlwiJmludGxhcmhrO1wiLFwi4qi8XCI6XCImaXByb2Q7XCIsXCLRkVwiOlwiJmlvY3k7XCIsXCLEr1wiOlwiJmlvZ29uO1wiLFwi8J2VmlwiOlwiJmlvcGY7XCIsXCLOuVwiOlwiJmlvdGE7XCIsXCLCv1wiOlwiJmlxdWVzdDtcIixcIvCdkr5cIjpcIiZpc2NyO1wiLFwi4ou5XCI6XCImaXNpbkU7XCIsXCLii7VcIjpcIiZpc2luZG90O1wiLFwi4ou0XCI6XCImaXNpbnM7XCIsXCLii7NcIjpcIiZpc2luc3Y7XCIsXCLEqVwiOlwiJml0aWxkZTtcIixcItGWXCI6XCImaXVrY3k7XCIsXCLDr1wiOlwiJml1bWw7XCIsXCLEtVwiOlwiJmpjaXJjO1wiLFwi0LlcIjpcIiZqY3k7XCIsXCLwnZSnXCI6XCImamZyO1wiLFwiyLdcIjpcIiZqbWF0aDtcIixcIvCdlZtcIjpcIiZqb3BmO1wiLFwi8J2Sv1wiOlwiJmpzY3I7XCIsXCLRmFwiOlwiJmpzZXJjeTtcIixcItGUXCI6XCImanVrY3k7XCIsXCLOulwiOlwiJmthcHBhO1wiLFwiz7BcIjpcIiZ2YXJrYXBwYTtcIixcIsS3XCI6XCIma2NlZGlsO1wiLFwi0LpcIjpcIiZrY3k7XCIsXCLwnZSoXCI6XCIma2ZyO1wiLFwixLhcIjpcIiZrZ3JlZW47XCIsXCLRhVwiOlwiJmtoY3k7XCIsXCLRnFwiOlwiJmtqY3k7XCIsXCLwnZWcXCI6XCIma29wZjtcIixcIvCdk4BcIjpcIiZrc2NyO1wiLFwi4qSbXCI6XCImbEF0YWlsO1wiLFwi4qSOXCI6XCImbEJhcnI7XCIsXCLiqotcIjpcIiZsZXNzZXFxZ3RyO1wiLFwi4qWiXCI6XCImbEhhcjtcIixcIsS6XCI6XCImbGFjdXRlO1wiLFwi4qa0XCI6XCImbGFlbXB0eXY7XCIsXCLOu1wiOlwiJmxhbWJkYTtcIixcIuKmkVwiOlwiJmxhbmdkO1wiLFwi4qqFXCI6XCImbGVzc2FwcHJveDtcIixcIsKrXCI6XCImbGFxdW87XCIsXCLipJ9cIjpcIiZsYXJyYmZzO1wiLFwi4qSdXCI6XCImbGFycmZzO1wiLFwi4oarXCI6XCImbG9vcGFycm93bGVmdDtcIixcIuKkuVwiOlwiJmxhcnJwbDtcIixcIuKls1wiOlwiJmxhcnJzaW07XCIsXCLihqJcIjpcIiZsZWZ0YXJyb3d0YWlsO1wiLFwi4qqrXCI6XCImbGF0O1wiLFwi4qSZXCI6XCImbGF0YWlsO1wiLFwi4qqtXCI6XCImbGF0ZTtcIixcIuKqre+4gFwiOlwiJmxhdGVzO1wiLFwi4qSMXCI6XCImbGJhcnI7XCIsXCLinbJcIjpcIiZsYmJyaztcIixcIntcIjpcIiZsY3ViO1wiLFwiW1wiOlwiJmxzcWI7XCIsXCLipotcIjpcIiZsYnJrZTtcIixcIuKmj1wiOlwiJmxicmtzbGQ7XCIsXCLipo1cIjpcIiZsYnJrc2x1O1wiLFwixL5cIjpcIiZsY2Fyb247XCIsXCLEvFwiOlwiJmxjZWRpbDtcIixcItC7XCI6XCImbGN5O1wiLFwi4qS2XCI6XCImbGRjYTtcIixcIuKlp1wiOlwiJmxkcmRoYXI7XCIsXCLipYtcIjpcIiZsZHJ1c2hhcjtcIixcIuKGslwiOlwiJmxkc2g7XCIsXCLiiaRcIjpcIiZsZXE7XCIsXCLih4dcIjpcIiZsbGFycjtcIixcIuKLi1wiOlwiJmx0aHJlZTtcIixcIuKqqFwiOlwiJmxlc2NjO1wiLFwi4qm/XCI6XCImbGVzZG90O1wiLFwi4qqBXCI6XCImbGVzZG90bztcIixcIuKqg1wiOlwiJmxlc2RvdG9yO1wiLFwi4oua77iAXCI6XCImbGVzZztcIixcIuKqk1wiOlwiJmxlc2dlcztcIixcIuKLllwiOlwiJmx0ZG90O1wiLFwi4qW8XCI6XCImbGZpc2h0O1wiLFwi8J2UqVwiOlwiJmxmcjtcIixcIuKqkVwiOlwiJmxnRTtcIixcIuKlqlwiOlwiJmxoYXJ1bDtcIixcIuKWhFwiOlwiJmxoYmxrO1wiLFwi0ZlcIjpcIiZsamN5O1wiLFwi4qWrXCI6XCImbGxoYXJkO1wiLFwi4pe6XCI6XCImbGx0cmk7XCIsXCLFgFwiOlwiJmxtaWRvdDtcIixcIuKOsFwiOlwiJmxtb3VzdGFjaGU7XCIsXCLiiahcIjpcIiZsbmVxcTtcIixcIuKqiVwiOlwiJmxuYXBwcm94O1wiLFwi4qqHXCI6XCImbG5lcTtcIixcIuKLplwiOlwiJmxuc2ltO1wiLFwi4p+sXCI6XCImbG9hbmc7XCIsXCLih71cIjpcIiZsb2FycjtcIixcIuKfvFwiOlwiJnhtYXA7XCIsXCLihqxcIjpcIiZyYXJybHA7XCIsXCLipoVcIjpcIiZsb3BhcjtcIixcIvCdlZ1cIjpcIiZsb3BmO1wiLFwi4qitXCI6XCImbG9wbHVzO1wiLFwi4qi0XCI6XCImbG90aW1lcztcIixcIuKIl1wiOlwiJmxvd2FzdDtcIixcIuKXilwiOlwiJmxvemVuZ2U7XCIsXCIoXCI6XCImbHBhcjtcIixcIuKmk1wiOlwiJmxwYXJsdDtcIixcIuKlrVwiOlwiJmxyaGFyZDtcIixcIuKAjlwiOlwiJmxybTtcIixcIuKKv1wiOlwiJmxydHJpO1wiLFwi4oC5XCI6XCImbHNhcXVvO1wiLFwi8J2TgVwiOlwiJmxzY3I7XCIsXCLiqo1cIjpcIiZsc2ltZTtcIixcIuKqj1wiOlwiJmxzaW1nO1wiLFwi4oCaXCI6XCImc2JxdW87XCIsXCLFglwiOlwiJmxzdHJvaztcIixcIuKqplwiOlwiJmx0Y2M7XCIsXCLiqblcIjpcIiZsdGNpcjtcIixcIuKLiVwiOlwiJmx0aW1lcztcIixcIuKltlwiOlwiJmx0bGFycjtcIixcIuKpu1wiOlwiJmx0cXVlc3Q7XCIsXCLippZcIjpcIiZsdHJQYXI7XCIsXCLil4NcIjpcIiZ0cmlhbmdsZWxlZnQ7XCIsXCLipYpcIjpcIiZsdXJkc2hhcjtcIixcIuKlplwiOlwiJmx1cnVoYXI7XCIsXCLiiajvuIBcIjpcIiZsdm5FO1wiLFwi4oi6XCI6XCImbUREb3Q7XCIsXCLCr1wiOlwiJnN0cm5zO1wiLFwi4pmCXCI6XCImbWFsZTtcIixcIuKcoFwiOlwiJm1hbHRlc2U7XCIsXCLilq5cIjpcIiZtYXJrZXI7XCIsXCLiqKlcIjpcIiZtY29tbWE7XCIsXCLQvFwiOlwiJm1jeTtcIixcIuKAlFwiOlwiJm1kYXNoO1wiLFwi8J2UqlwiOlwiJm1mcjtcIixcIuKEp1wiOlwiJm1obztcIixcIsK1XCI6XCImbWljcm87XCIsXCLiq7BcIjpcIiZtaWRjaXI7XCIsXCLiiJJcIjpcIiZtaW51cztcIixcIuKoqlwiOlwiJm1pbnVzZHU7XCIsXCLiq5tcIjpcIiZtbGNwO1wiLFwi4oqnXCI6XCImbW9kZWxzO1wiLFwi8J2VnlwiOlwiJm1vcGY7XCIsXCLwnZOCXCI6XCImbXNjcjtcIixcIs68XCI6XCImbXU7XCIsXCLiirhcIjpcIiZtdW1hcDtcIixcIuKLmcy4XCI6XCImbkdnO1wiLFwi4omr4oOSXCI6XCImbkd0O1wiLFwi4oeNXCI6XCImbmxBcnI7XCIsXCLih45cIjpcIiZuaEFycjtcIixcIuKLmMy4XCI6XCImbkxsO1wiLFwi4omq4oOSXCI6XCImbkx0O1wiLFwi4oePXCI6XCImbnJBcnI7XCIsXCLiiq9cIjpcIiZuVkRhc2g7XCIsXCLiiq5cIjpcIiZuVmRhc2g7XCIsXCLFhFwiOlwiJm5hY3V0ZTtcIixcIuKIoOKDklwiOlwiJm5hbmc7XCIsXCLiqbDMuFwiOlwiJm5hcEU7XCIsXCLiiYvMuFwiOlwiJm5hcGlkO1wiLFwixYlcIjpcIiZuYXBvcztcIixcIuKZrlwiOlwiJm5hdHVyYWw7XCIsXCLiqYNcIjpcIiZuY2FwO1wiLFwixYhcIjpcIiZuY2Fyb247XCIsXCLFhlwiOlwiJm5jZWRpbDtcIixcIuKprcy4XCI6XCImbmNvbmdkb3Q7XCIsXCLiqYJcIjpcIiZuY3VwO1wiLFwi0L1cIjpcIiZuY3k7XCIsXCLigJNcIjpcIiZuZGFzaDtcIixcIuKHl1wiOlwiJm5lQXJyO1wiLFwi4qSkXCI6XCImbmVhcmhrO1wiLFwi4omQzLhcIjpcIiZuZWRvdDtcIixcIuKkqFwiOlwiJnRvZWE7XCIsXCLwnZSrXCI6XCImbmZyO1wiLFwi4oauXCI6XCImbmxlZnRyaWdodGFycm93O1wiLFwi4quyXCI6XCImbmhwYXI7XCIsXCLii7xcIjpcIiZuaXM7XCIsXCLii7pcIjpcIiZuaXNkO1wiLFwi0ZpcIjpcIiZuamN5O1wiLFwi4ommzLhcIjpcIiZubGVxcTtcIixcIuKGmlwiOlwiJm5sZWZ0YXJyb3c7XCIsXCLigKVcIjpcIiZubGRyO1wiLFwi8J2Vn1wiOlwiJm5vcGY7XCIsXCLCrFwiOlwiJm5vdDtcIixcIuKLucy4XCI6XCImbm90aW5FO1wiLFwi4ou1zLhcIjpcIiZub3RpbmRvdDtcIixcIuKLt1wiOlwiJm5vdGludmI7XCIsXCLii7ZcIjpcIiZub3RpbnZjO1wiLFwi4ou+XCI6XCImbm90bml2YjtcIixcIuKLvVwiOlwiJm5vdG5pdmM7XCIsXCLiq73ig6VcIjpcIiZucGFyc2w7XCIsXCLiiILMuFwiOlwiJm5wYXJ0O1wiLFwi4qiUXCI6XCImbnBvbGludDtcIixcIuKGm1wiOlwiJm5yaWdodGFycm93O1wiLFwi4qSzzLhcIjpcIiZucmFycmM7XCIsXCLihp3MuFwiOlwiJm5yYXJydztcIixcIvCdk4NcIjpcIiZuc2NyO1wiLFwi4oqEXCI6XCImbnN1YjtcIixcIuKrhcy4XCI6XCImbnN1YnNldGVxcTtcIixcIuKKhVwiOlwiJm5zdXA7XCIsXCLiq4bMuFwiOlwiJm5zdXBzZXRlcXE7XCIsXCLDsVwiOlwiJm50aWxkZTtcIixcIs69XCI6XCImbnU7XCIsXCIjXCI6XCImbnVtO1wiLFwi4oSWXCI6XCImbnVtZXJvO1wiLFwi4oCHXCI6XCImbnVtc3A7XCIsXCLiiq1cIjpcIiZudkRhc2g7XCIsXCLipIRcIjpcIiZudkhhcnI7XCIsXCLiiY3ig5JcIjpcIiZudmFwO1wiLFwi4oqsXCI6XCImbnZkYXNoO1wiLFwi4oml4oOSXCI6XCImbnZnZTtcIixcIj7ig5JcIjpcIiZudmd0O1wiLFwi4qeeXCI6XCImbnZpbmZpbjtcIixcIuKkglwiOlwiJm52bEFycjtcIixcIuKJpOKDklwiOlwiJm52bGU7XCIsXCI84oOSXCI6XCImbnZsdDtcIixcIuKKtOKDklwiOlwiJm52bHRyaWU7XCIsXCLipINcIjpcIiZudnJBcnI7XCIsXCLiirXig5JcIjpcIiZudnJ0cmllO1wiLFwi4oi84oOSXCI6XCImbnZzaW07XCIsXCLih5ZcIjpcIiZud0FycjtcIixcIuKko1wiOlwiJm53YXJoaztcIixcIuKkp1wiOlwiJm53bmVhcjtcIixcIsOzXCI6XCImb2FjdXRlO1wiLFwiw7RcIjpcIiZvY2lyYztcIixcItC+XCI6XCImb2N5O1wiLFwixZFcIjpcIiZvZGJsYWM7XCIsXCLiqLhcIjpcIiZvZGl2O1wiLFwi4qa8XCI6XCImb2Rzb2xkO1wiLFwixZNcIjpcIiZvZWxpZztcIixcIuKmv1wiOlwiJm9mY2lyO1wiLFwi8J2UrFwiOlwiJm9mcjtcIixcIsubXCI6XCImb2dvbjtcIixcIsOyXCI6XCImb2dyYXZlO1wiLFwi4qeBXCI6XCImb2d0O1wiLFwi4qa1XCI6XCImb2hiYXI7XCIsXCLipr5cIjpcIiZvbGNpcjtcIixcIuKmu1wiOlwiJm9sY3Jvc3M7XCIsXCLip4BcIjpcIiZvbHQ7XCIsXCLFjVwiOlwiJm9tYWNyO1wiLFwiz4lcIjpcIiZvbWVnYTtcIixcIs6/XCI6XCImb21pY3JvbjtcIixcIuKmtlwiOlwiJm9taWQ7XCIsXCLwnZWgXCI6XCImb29wZjtcIixcIuKmt1wiOlwiJm9wYXI7XCIsXCLiprlcIjpcIiZvcGVycDtcIixcIuKIqFwiOlwiJnZlZTtcIixcIuKpnVwiOlwiJm9yZDtcIixcIuKEtFwiOlwiJm9zY3I7XCIsXCLCqlwiOlwiJm9yZGY7XCIsXCLCulwiOlwiJm9yZG07XCIsXCLiirZcIjpcIiZvcmlnb2Y7XCIsXCLiqZZcIjpcIiZvcm9yO1wiLFwi4qmXXCI6XCImb3JzbG9wZTtcIixcIuKpm1wiOlwiJm9ydjtcIixcIsO4XCI6XCImb3NsYXNoO1wiLFwi4oqYXCI6XCImb3NvbDtcIixcIsO1XCI6XCImb3RpbGRlO1wiLFwi4qi2XCI6XCImb3RpbWVzYXM7XCIsXCLDtlwiOlwiJm91bWw7XCIsXCLijL1cIjpcIiZvdmJhcjtcIixcIsK2XCI6XCImcGFyYTtcIixcIuKrs1wiOlwiJnBhcnNpbTtcIixcIuKrvVwiOlwiJnBhcnNsO1wiLFwi0L9cIjpcIiZwY3k7XCIsXCIlXCI6XCImcGVyY250O1wiLFwiLlwiOlwiJnBlcmlvZDtcIixcIuKAsFwiOlwiJnBlcm1pbDtcIixcIuKAsVwiOlwiJnBlcnRlbms7XCIsXCLwnZStXCI6XCImcGZyO1wiLFwiz4ZcIjpcIiZwaGk7XCIsXCLPlVwiOlwiJnZhcnBoaTtcIixcIuKYjlwiOlwiJnBob25lO1wiLFwiz4BcIjpcIiZwaTtcIixcIs+WXCI6XCImdmFycGk7XCIsXCLihI5cIjpcIiZwbGFuY2toO1wiLFwiK1wiOlwiJnBsdXM7XCIsXCLiqKNcIjpcIiZwbHVzYWNpcjtcIixcIuKoolwiOlwiJnBsdXNjaXI7XCIsXCLiqKVcIjpcIiZwbHVzZHU7XCIsXCLiqbJcIjpcIiZwbHVzZTtcIixcIuKoplwiOlwiJnBsdXNzaW07XCIsXCLiqKdcIjpcIiZwbHVzdHdvO1wiLFwi4qiVXCI6XCImcG9pbnRpbnQ7XCIsXCLwnZWhXCI6XCImcG9wZjtcIixcIsKjXCI6XCImcG91bmQ7XCIsXCLiqrNcIjpcIiZwckU7XCIsXCLiqrdcIjpcIiZwcmVjYXBwcm94O1wiLFwi4qq5XCI6XCImcHJuYXA7XCIsXCLiqrVcIjpcIiZwcm5FO1wiLFwi4ouoXCI6XCImcHJuc2ltO1wiLFwi4oCyXCI6XCImcHJpbWU7XCIsXCLijK5cIjpcIiZwcm9mYWxhcjtcIixcIuKMklwiOlwiJnByb2ZsaW5lO1wiLFwi4oyTXCI6XCImcHJvZnN1cmY7XCIsXCLiirBcIjpcIiZwcnVyZWw7XCIsXCLwnZOFXCI6XCImcHNjcjtcIixcIs+IXCI6XCImcHNpO1wiLFwi4oCIXCI6XCImcHVuY3NwO1wiLFwi8J2UrlwiOlwiJnFmcjtcIixcIvCdlaJcIjpcIiZxb3BmO1wiLFwi4oGXXCI6XCImcXByaW1lO1wiLFwi8J2ThlwiOlwiJnFzY3I7XCIsXCLiqJZcIjpcIiZxdWF0aW50O1wiLFwiP1wiOlwiJnF1ZXN0O1wiLFwi4qScXCI6XCImckF0YWlsO1wiLFwi4qWkXCI6XCImckhhcjtcIixcIuKIvcyxXCI6XCImcmFjZTtcIixcIsWVXCI6XCImcmFjdXRlO1wiLFwi4qazXCI6XCImcmFlbXB0eXY7XCIsXCLippJcIjpcIiZyYW5nZDtcIixcIuKmpVwiOlwiJnJhbmdlO1wiLFwiwrtcIjpcIiZyYXF1bztcIixcIuKltVwiOlwiJnJhcnJhcDtcIixcIuKkoFwiOlwiJnJhcnJiZnM7XCIsXCLipLNcIjpcIiZyYXJyYztcIixcIuKknlwiOlwiJnJhcnJmcztcIixcIuKlhVwiOlwiJnJhcnJwbDtcIixcIuKltFwiOlwiJnJhcnJzaW07XCIsXCLihqNcIjpcIiZyaWdodGFycm93dGFpbDtcIixcIuKGnVwiOlwiJnJpZ2h0c3F1aWdhcnJvdztcIixcIuKkmlwiOlwiJnJhdGFpbDtcIixcIuKItlwiOlwiJnJhdGlvO1wiLFwi4p2zXCI6XCImcmJicms7XCIsXCJ9XCI6XCImcmN1YjtcIixcIl1cIjpcIiZyc3FiO1wiLFwi4qaMXCI6XCImcmJya2U7XCIsXCLipo5cIjpcIiZyYnJrc2xkO1wiLFwi4qaQXCI6XCImcmJya3NsdTtcIixcIsWZXCI6XCImcmNhcm9uO1wiLFwixZdcIjpcIiZyY2VkaWw7XCIsXCLRgFwiOlwiJnJjeTtcIixcIuKkt1wiOlwiJnJkY2E7XCIsXCLipalcIjpcIiZyZGxkaGFyO1wiLFwi4oazXCI6XCImcmRzaDtcIixcIuKWrVwiOlwiJnJlY3Q7XCIsXCLipb1cIjpcIiZyZmlzaHQ7XCIsXCLwnZSvXCI6XCImcmZyO1wiLFwi4qWsXCI6XCImcmhhcnVsO1wiLFwiz4FcIjpcIiZyaG87XCIsXCLPsVwiOlwiJnZhcnJobztcIixcIuKHiVwiOlwiJnJyYXJyO1wiLFwi4ouMXCI6XCImcnRocmVlO1wiLFwiy5pcIjpcIiZyaW5nO1wiLFwi4oCPXCI6XCImcmxtO1wiLFwi4o6xXCI6XCImcm1vdXN0YWNoZTtcIixcIuKrrlwiOlwiJnJubWlkO1wiLFwi4p+tXCI6XCImcm9hbmc7XCIsXCLih75cIjpcIiZyb2FycjtcIixcIuKmhlwiOlwiJnJvcGFyO1wiLFwi8J2Vo1wiOlwiJnJvcGY7XCIsXCLiqK5cIjpcIiZyb3BsdXM7XCIsXCLiqLVcIjpcIiZyb3RpbWVzO1wiLFwiKVwiOlwiJnJwYXI7XCIsXCLippRcIjpcIiZycGFyZ3Q7XCIsXCLiqJJcIjpcIiZycHBvbGludDtcIixcIuKAulwiOlwiJnJzYXF1bztcIixcIvCdk4dcIjpcIiZyc2NyO1wiLFwi4ouKXCI6XCImcnRpbWVzO1wiLFwi4pa5XCI6XCImdHJpYW5nbGVyaWdodDtcIixcIuKnjlwiOlwiJnJ0cmlsdHJpO1wiLFwi4qWoXCI6XCImcnVsdWhhcjtcIixcIuKEnlwiOlwiJnJ4O1wiLFwixZtcIjpcIiZzYWN1dGU7XCIsXCLiqrRcIjpcIiZzY0U7XCIsXCLiqrhcIjpcIiZzdWNjYXBwcm94O1wiLFwixaFcIjpcIiZzY2Fyb247XCIsXCLFn1wiOlwiJnNjZWRpbDtcIixcIsWdXCI6XCImc2NpcmM7XCIsXCLiqrZcIjpcIiZzdWNjbmVxcTtcIixcIuKqulwiOlwiJnN1Y2NuYXBwcm94O1wiLFwi4oupXCI6XCImc3VjY25zaW07XCIsXCLiqJNcIjpcIiZzY3BvbGludDtcIixcItGBXCI6XCImc2N5O1wiLFwi4ouFXCI6XCImc2RvdDtcIixcIuKpplwiOlwiJnNkb3RlO1wiLFwi4oeYXCI6XCImc2VBcnI7XCIsXCLCp1wiOlwiJnNlY3Q7XCIsXCI7XCI6XCImc2VtaTtcIixcIuKkqVwiOlwiJnRvc2E7XCIsXCLinLZcIjpcIiZzZXh0O1wiLFwi8J2UsFwiOlwiJnNmcjtcIixcIuKZr1wiOlwiJnNoYXJwO1wiLFwi0YlcIjpcIiZzaGNoY3k7XCIsXCLRiFwiOlwiJnNoY3k7XCIsXCLCrVwiOlwiJnNoeTtcIixcIs+DXCI6XCImc2lnbWE7XCIsXCLPglwiOlwiJnZhcnNpZ21hO1wiLFwi4qmqXCI6XCImc2ltZG90O1wiLFwi4qqeXCI6XCImc2ltZztcIixcIuKqoFwiOlwiJnNpbWdFO1wiLFwi4qqdXCI6XCImc2ltbDtcIixcIuKqn1wiOlwiJnNpbWxFO1wiLFwi4omGXCI6XCImc2ltbmU7XCIsXCLiqKRcIjpcIiZzaW1wbHVzO1wiLFwi4qWyXCI6XCImc2ltcmFycjtcIixcIuKos1wiOlwiJnNtYXNocDtcIixcIuKnpFwiOlwiJnNtZXBhcnNsO1wiLFwi4oyjXCI6XCImc3NtaWxlO1wiLFwi4qqqXCI6XCImc210O1wiLFwi4qqsXCI6XCImc210ZTtcIixcIuKqrO+4gFwiOlwiJnNtdGVzO1wiLFwi0YxcIjpcIiZzb2Z0Y3k7XCIsXCIvXCI6XCImc29sO1wiLFwi4qeEXCI6XCImc29sYjtcIixcIuKMv1wiOlwiJnNvbGJhcjtcIixcIvCdlaRcIjpcIiZzb3BmO1wiLFwi4pmgXCI6XCImc3BhZGVzdWl0O1wiLFwi4oqT77iAXCI6XCImc3FjYXBzO1wiLFwi4oqU77iAXCI6XCImc3FjdXBzO1wiLFwi8J2TiFwiOlwiJnNzY3I7XCIsXCLimIZcIjpcIiZzdGFyO1wiLFwi4oqCXCI6XCImc3Vic2V0O1wiLFwi4quFXCI6XCImc3Vic2V0ZXFxO1wiLFwi4qq9XCI6XCImc3ViZG90O1wiLFwi4quDXCI6XCImc3ViZWRvdDtcIixcIuKrgVwiOlwiJnN1Ym11bHQ7XCIsXCLiq4tcIjpcIiZzdWJzZXRuZXFxO1wiLFwi4oqKXCI6XCImc3Vic2V0bmVxO1wiLFwi4qq/XCI6XCImc3VicGx1cztcIixcIuKluVwiOlwiJnN1YnJhcnI7XCIsXCLiq4dcIjpcIiZzdWJzaW07XCIsXCLiq5VcIjpcIiZzdWJzdWI7XCIsXCLiq5NcIjpcIiZzdWJzdXA7XCIsXCLimapcIjpcIiZzdW5nO1wiLFwiwrlcIjpcIiZzdXAxO1wiLFwiwrJcIjpcIiZzdXAyO1wiLFwiwrNcIjpcIiZzdXAzO1wiLFwi4quGXCI6XCImc3Vwc2V0ZXFxO1wiLFwi4qq+XCI6XCImc3VwZG90O1wiLFwi4quYXCI6XCImc3VwZHN1YjtcIixcIuKrhFwiOlwiJnN1cGVkb3Q7XCIsXCLin4lcIjpcIiZzdXBoc29sO1wiLFwi4quXXCI6XCImc3VwaHN1YjtcIixcIuKlu1wiOlwiJnN1cGxhcnI7XCIsXCLiq4JcIjpcIiZzdXBtdWx0O1wiLFwi4quMXCI6XCImc3Vwc2V0bmVxcTtcIixcIuKKi1wiOlwiJnN1cHNldG5lcTtcIixcIuKrgFwiOlwiJnN1cHBsdXM7XCIsXCLiq4hcIjpcIiZzdXBzaW07XCIsXCLiq5RcIjpcIiZzdXBzdWI7XCIsXCLiq5ZcIjpcIiZzdXBzdXA7XCIsXCLih5lcIjpcIiZzd0FycjtcIixcIuKkqlwiOlwiJnN3bndhcjtcIixcIsOfXCI6XCImc3psaWc7XCIsXCLijJZcIjpcIiZ0YXJnZXQ7XCIsXCLPhFwiOlwiJnRhdTtcIixcIsWlXCI6XCImdGNhcm9uO1wiLFwixaNcIjpcIiZ0Y2VkaWw7XCIsXCLRglwiOlwiJnRjeTtcIixcIuKMlVwiOlwiJnRlbHJlYztcIixcIvCdlLFcIjpcIiZ0ZnI7XCIsXCLOuFwiOlwiJnRoZXRhO1wiLFwiz5FcIjpcIiZ2YXJ0aGV0YTtcIixcIsO+XCI6XCImdGhvcm47XCIsXCLDl1wiOlwiJnRpbWVzO1wiLFwi4qixXCI6XCImdGltZXNiYXI7XCIsXCLiqLBcIjpcIiZ0aW1lc2Q7XCIsXCLijLZcIjpcIiZ0b3Bib3Q7XCIsXCLiq7FcIjpcIiZ0b3BjaXI7XCIsXCLwnZWlXCI6XCImdG9wZjtcIixcIuKrmlwiOlwiJnRvcGZvcms7XCIsXCLigLRcIjpcIiZ0cHJpbWU7XCIsXCLilrVcIjpcIiZ1dHJpO1wiLFwi4omcXCI6XCImdHJpZTtcIixcIuKXrFwiOlwiJnRyaWRvdDtcIixcIuKoulwiOlwiJnRyaW1pbnVzO1wiLFwi4qi5XCI6XCImdHJpcGx1cztcIixcIuKnjVwiOlwiJnRyaXNiO1wiLFwi4qi7XCI6XCImdHJpdGltZTtcIixcIuKPolwiOlwiJnRycGV6aXVtO1wiLFwi8J2TiVwiOlwiJnRzY3I7XCIsXCLRhlwiOlwiJnRzY3k7XCIsXCLRm1wiOlwiJnRzaGN5O1wiLFwixadcIjpcIiZ0c3Ryb2s7XCIsXCLipaNcIjpcIiZ1SGFyO1wiLFwiw7pcIjpcIiZ1YWN1dGU7XCIsXCLRnlwiOlwiJnVicmN5O1wiLFwixa1cIjpcIiZ1YnJldmU7XCIsXCLDu1wiOlwiJnVjaXJjO1wiLFwi0YNcIjpcIiZ1Y3k7XCIsXCLFsVwiOlwiJnVkYmxhYztcIixcIuKlvlwiOlwiJnVmaXNodDtcIixcIvCdlLJcIjpcIiZ1ZnI7XCIsXCLDuVwiOlwiJnVncmF2ZTtcIixcIuKWgFwiOlwiJnVoYmxrO1wiLFwi4oycXCI6XCImdWxjb3JuZXI7XCIsXCLijI9cIjpcIiZ1bGNyb3A7XCIsXCLil7hcIjpcIiZ1bHRyaTtcIixcIsWrXCI6XCImdW1hY3I7XCIsXCLFs1wiOlwiJnVvZ29uO1wiLFwi8J2VplwiOlwiJnVvcGY7XCIsXCLPhVwiOlwiJnVwc2lsb247XCIsXCLih4hcIjpcIiZ1dWFycjtcIixcIuKMnVwiOlwiJnVyY29ybmVyO1wiLFwi4oyOXCI6XCImdXJjcm9wO1wiLFwixa9cIjpcIiZ1cmluZztcIixcIuKXuVwiOlwiJnVydHJpO1wiLFwi8J2TilwiOlwiJnVzY3I7XCIsXCLii7BcIjpcIiZ1dGRvdDtcIixcIsWpXCI6XCImdXRpbGRlO1wiLFwiw7xcIjpcIiZ1dW1sO1wiLFwi4qanXCI6XCImdXdhbmdsZTtcIixcIuKrqFwiOlwiJnZCYXI7XCIsXCLiq6lcIjpcIiZ2QmFydjtcIixcIuKmnFwiOlwiJnZhbmdydDtcIixcIuKKiu+4gFwiOlwiJnZzdWJuZTtcIixcIuKri++4gFwiOlwiJnZzdWJuRTtcIixcIuKKi++4gFwiOlwiJnZzdXBuZTtcIixcIuKrjO+4gFwiOlwiJnZzdXBuRTtcIixcItCyXCI6XCImdmN5O1wiLFwi4oq7XCI6XCImdmVlYmFyO1wiLFwi4omaXCI6XCImdmVlZXE7XCIsXCLii65cIjpcIiZ2ZWxsaXA7XCIsXCLwnZSzXCI6XCImdmZyO1wiLFwi8J2Vp1wiOlwiJnZvcGY7XCIsXCLwnZOLXCI6XCImdnNjcjtcIixcIuKmmlwiOlwiJnZ6aWd6YWc7XCIsXCLFtVwiOlwiJndjaXJjO1wiLFwi4qmfXCI6XCImd2VkYmFyO1wiLFwi4omZXCI6XCImd2VkZ2VxO1wiLFwi4oSYXCI6XCImd3A7XCIsXCLwnZS0XCI6XCImd2ZyO1wiLFwi8J2VqFwiOlwiJndvcGY7XCIsXCLwnZOMXCI6XCImd3NjcjtcIixcIvCdlLVcIjpcIiZ4ZnI7XCIsXCLOvlwiOlwiJnhpO1wiLFwi4ou7XCI6XCImeG5pcztcIixcIvCdlalcIjpcIiZ4b3BmO1wiLFwi8J2TjVwiOlwiJnhzY3I7XCIsXCLDvVwiOlwiJnlhY3V0ZTtcIixcItGPXCI6XCImeWFjeTtcIixcIsW3XCI6XCImeWNpcmM7XCIsXCLRi1wiOlwiJnljeTtcIixcIsKlXCI6XCImeWVuO1wiLFwi8J2UtlwiOlwiJnlmcjtcIixcItGXXCI6XCImeWljeTtcIixcIvCdlapcIjpcIiZ5b3BmO1wiLFwi8J2TjlwiOlwiJnlzY3I7XCIsXCLRjlwiOlwiJnl1Y3k7XCIsXCLDv1wiOlwiJnl1bWw7XCIsXCLFulwiOlwiJnphY3V0ZTtcIixcIsW+XCI6XCImemNhcm9uO1wiLFwi0LdcIjpcIiZ6Y3k7XCIsXCLFvFwiOlwiJnpkb3Q7XCIsXCLOtlwiOlwiJnpldGE7XCIsXCLwnZS3XCI6XCImemZyO1wiLFwi0LZcIjpcIiZ6aGN5O1wiLFwi4oedXCI6XCImemlncmFycjtcIixcIvCdlatcIjpcIiZ6b3BmO1wiLFwi8J2Tj1wiOlwiJnpzY3I7XCIsXCLigI1cIjpcIiZ6d2o7XCIsXCLigIxcIjpcIiZ6d25qO1wifX19OyIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5udW1lcmljVW5pY29kZU1hcD17MDo2NTUzMywxMjg6ODM2NCwxMzA6ODIxOCwxMzE6NDAyLDEzMjo4MjIyLDEzMzo4MjMwLDEzNDo4MjI0LDEzNTo4MjI1LDEzNjo3MTAsMTM3OjgyNDAsMTM4OjM1MiwxMzk6ODI0OSwxNDA6MzM4LDE0MjozODEsMTQ1OjgyMTYsMTQ2OjgyMTcsMTQ3OjgyMjAsMTQ4OjgyMjEsMTQ5OjgyMjYsMTUwOjgyMTEsMTUxOjgyMTIsMTUyOjczMiwxNTM6ODQ4MiwxNTQ6MzUzLDE1NTo4MjUwLDE1NjozMzksMTU4OjM4MiwxNTk6Mzc2fTsiLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuZnJvbUNvZGVQb2ludD1TdHJpbmcuZnJvbUNvZGVQb2ludHx8ZnVuY3Rpb24oYXN0cmFsQ29kZVBvaW50KXtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShNYXRoLmZsb29yKChhc3RyYWxDb2RlUG9pbnQtNjU1MzYpLzEwMjQpKzU1Mjk2LChhc3RyYWxDb2RlUG9pbnQtNjU1MzYpJTEwMjQrNTYzMjApfTtleHBvcnRzLmdldENvZGVQb2ludD1TdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0P2Z1bmN0aW9uKGlucHV0LHBvc2l0aW9uKXtyZXR1cm4gaW5wdXQuY29kZVBvaW50QXQocG9zaXRpb24pfTpmdW5jdGlvbihpbnB1dCxwb3NpdGlvbil7cmV0dXJuKGlucHV0LmNoYXJDb2RlQXQocG9zaXRpb24pLTU1Mjk2KSoxMDI0K2lucHV0LmNoYXJDb2RlQXQocG9zaXRpb24rMSktNTYzMjArNjU1MzZ9O2V4cG9ydHMuaGlnaFN1cnJvZ2F0ZUZyb209NTUyOTY7ZXhwb3J0cy5oaWdoU3Vycm9nYXRlVG89NTYzMTk7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi4vdXRpbHMvbG9nLmpzXCI7XG5cbnZhciBXZWJTb2NrZXRDbGllbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKi9cbiAgZnVuY3Rpb24gV2ViU29ja2V0Q2xpZW50KHVybCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWJTb2NrZXRDbGllbnQpO1xuXG4gICAgdGhpcy5jbGllbnQgPSBuZXcgV2ViU29ja2V0KHVybCk7XG5cbiAgICB0aGlzLmNsaWVudC5vbmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBsb2cuZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBmXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFdlYlNvY2tldENsaWVudCwgW3tcbiAgICBrZXk6IFwib25PcGVuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uT3BlbihmKSB7XG4gICAgICB0aGlzLmNsaWVudC5vbm9wZW4gPSBmO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gZlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib25DbG9zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNsb3NlKGYpIHtcbiAgICAgIHRoaXMuY2xpZW50Lm9uY2xvc2UgPSBmO1xuICAgIH0gLy8gY2FsbCBmIHdpdGggdGhlIG1lc3NhZ2Ugc3RyaW5nIGFzIHRoZSBmaXJzdCBhcmd1bWVudFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGZcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm9uTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbk1lc3NhZ2UoZikge1xuICAgICAgdGhpcy5jbGllbnQub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZihlLmRhdGEpO1xuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gV2ViU29ja2V0Q2xpZW50O1xufSgpO1xuXG5leHBvcnQgeyBXZWJTb2NrZXRDbGllbnQgYXMgZGVmYXVsdCB9OyIsIi8qKioqKiovIChmdW5jdGlvbigpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHRcInVzZSBzdHJpY3RcIjtcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoe1xuXG4vKioqLyBcIi4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci9TeW5jQmFpbEhvb2tGYWtlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci9TeW5jQmFpbEhvb2tGYWtlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG5cbi8qKlxuICogQ2xpZW50IHN0dWIgZm9yIHRhcGFibGUgU3luY0JhaWxIb29rXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjbGllbnRUYXBhYmxlU3luY0JhaWxIb29rKCkge1xuICByZXR1cm4ge1xuICAgIGNhbGw6IGZ1bmN0aW9uIGNhbGwoKSB7fVxuICB9O1xufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMpIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlclsodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxudmFyIExvZ1R5cGUgPSBPYmplY3QuZnJlZXplKHtcbiAgZXJyb3I6XG4gIC8qKiBAdHlwZSB7XCJlcnJvclwifSAqL1xuICBcImVycm9yXCIsXG4gIC8vIG1lc3NhZ2UsIGMgc3R5bGUgYXJndW1lbnRzXG4gIHdhcm46XG4gIC8qKiBAdHlwZSB7XCJ3YXJuXCJ9ICovXG4gIFwid2FyblwiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICBpbmZvOlxuICAvKiogQHR5cGUge1wiaW5mb1wifSAqL1xuICBcImluZm9cIixcbiAgLy8gbWVzc2FnZSwgYyBzdHlsZSBhcmd1bWVudHNcbiAgbG9nOlxuICAvKiogQHR5cGUge1wibG9nXCJ9ICovXG4gIFwibG9nXCIsXG4gIC8vIG1lc3NhZ2UsIGMgc3R5bGUgYXJndW1lbnRzXG4gIGRlYnVnOlxuICAvKiogQHR5cGUge1wiZGVidWdcIn0gKi9cbiAgXCJkZWJ1Z1wiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICB0cmFjZTpcbiAgLyoqIEB0eXBlIHtcInRyYWNlXCJ9ICovXG4gIFwidHJhY2VcIixcbiAgLy8gbm8gYXJndW1lbnRzXG4gIGdyb3VwOlxuICAvKiogQHR5cGUge1wiZ3JvdXBcIn0gKi9cbiAgXCJncm91cFwiLFxuICAvLyBbbGFiZWxdXG4gIGdyb3VwQ29sbGFwc2VkOlxuICAvKiogQHR5cGUge1wiZ3JvdXBDb2xsYXBzZWRcIn0gKi9cbiAgXCJncm91cENvbGxhcHNlZFwiLFxuICAvLyBbbGFiZWxdXG4gIGdyb3VwRW5kOlxuICAvKiogQHR5cGUge1wiZ3JvdXBFbmRcIn0gKi9cbiAgXCJncm91cEVuZFwiLFxuICAvLyBbbGFiZWxdXG4gIHByb2ZpbGU6XG4gIC8qKiBAdHlwZSB7XCJwcm9maWxlXCJ9ICovXG4gIFwicHJvZmlsZVwiLFxuICAvLyBbcHJvZmlsZU5hbWVdXG4gIHByb2ZpbGVFbmQ6XG4gIC8qKiBAdHlwZSB7XCJwcm9maWxlRW5kXCJ9ICovXG4gIFwicHJvZmlsZUVuZFwiLFxuICAvLyBbcHJvZmlsZU5hbWVdXG4gIHRpbWU6XG4gIC8qKiBAdHlwZSB7XCJ0aW1lXCJ9ICovXG4gIFwidGltZVwiLFxuICAvLyBuYW1lLCB0aW1lIGFzIFtzZWNvbmRzLCBuYW5vc2Vjb25kc11cbiAgY2xlYXI6XG4gIC8qKiBAdHlwZSB7XCJjbGVhclwifSAqL1xuICBcImNsZWFyXCIsXG4gIC8vIG5vIGFyZ3VtZW50c1xuICBzdGF0dXM6XG4gIC8qKiBAdHlwZSB7XCJzdGF0dXNcIn0gKi9cbiAgXCJzdGF0dXNcIiAvLyBtZXNzYWdlLCBhcmd1bWVudHNcblxufSk7XG5leHBvcnRzLkxvZ1R5cGUgPSBMb2dUeXBlO1xuLyoqIEB0eXBlZGVmIHt0eXBlb2YgTG9nVHlwZVtrZXlvZiB0eXBlb2YgTG9nVHlwZV19IExvZ1R5cGVFbnVtICovXG5cbnZhciBMT0dfU1lNQk9MID0gKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkoXCJ3ZWJwYWNrIGxvZ2dlciByYXcgbG9nIG1ldGhvZFwiKTtcbnZhciBUSU1FUlNfU1lNQk9MID0gKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkoXCJ3ZWJwYWNrIGxvZ2dlciB0aW1lc1wiKTtcbnZhciBUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0wgPSAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KShcIndlYnBhY2sgbG9nZ2VyIGFnZ3JlZ2F0ZWQgdGltZXNcIik7XG5cbnZhciBXZWJwYWNrTG9nZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oTG9nVHlwZUVudW0sIGFueVtdPSk6IHZvaWR9IGxvZyBsb2cgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcgfCBmdW5jdGlvbigpOiBzdHJpbmcpOiBXZWJwYWNrTG9nZ2VyfSBnZXRDaGlsZExvZ2dlciBmdW5jdGlvbiB0byBjcmVhdGUgY2hpbGQgbG9nZ2VyXG4gICAqL1xuICBmdW5jdGlvbiBXZWJwYWNrTG9nZ2VyKGxvZywgZ2V0Q2hpbGRMb2dnZXIpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2VicGFja0xvZ2dlcik7XG5cbiAgICB0aGlzW0xPR19TWU1CT0xdID0gbG9nO1xuICAgIHRoaXMuZ2V0Q2hpbGRMb2dnZXIgPSBnZXRDaGlsZExvZ2dlcjtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhXZWJwYWNrTG9nZ2VyLCBbe1xuICAgIGtleTogXCJlcnJvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZXJyb3IsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3YXJuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdhcm4oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUud2FybiwgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImluZm9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5mbygpIHtcbiAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5pbmZvLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvZygpIHtcbiAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5sb2csIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZWJ1Z1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAgIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNSksIF9rZXk1ID0gMDsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgICAgICBhcmdzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5kZWJ1ZywgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFzc2VydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhc3NlcnQoYXNzZXJ0aW9uKSB7XG4gICAgICBpZiAoIWFzc2VydGlvbikge1xuICAgICAgICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjYgPiAxID8gX2xlbjYgLSAxIDogMCksIF9rZXk2ID0gMTsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykge1xuICAgICAgICAgIGFyZ3NbX2tleTYgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Nl07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZXJyb3IsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0cmFjZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFjZSgpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50cmFjZSwgW1wiVHJhY2VcIl0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjbGVhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5jbGVhcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0YXR1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGF0dXMoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuNyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjcpLCBfa2V5NyA9IDA7IF9rZXk3IDwgX2xlbjc7IF9rZXk3KyspIHtcbiAgICAgICAgYXJnc1tfa2V5N10gPSBhcmd1bWVudHNbX2tleTddO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuc3RhdHVzLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ3JvdXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JvdXAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuOCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjgpLCBfa2V5OCA9IDA7IF9rZXk4IDwgX2xlbjg7IF9rZXk4KyspIHtcbiAgICAgICAgYXJnc1tfa2V5OF0gPSBhcmd1bWVudHNbX2tleThdO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZ3JvdXAsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJncm91cENvbGxhcHNlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBncm91cENvbGxhcHNlZCgpIHtcbiAgICAgIGZvciAodmFyIF9sZW45ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuOSksIF9rZXk5ID0gMDsgX2tleTkgPCBfbGVuOTsgX2tleTkrKykge1xuICAgICAgICBhcmdzW19rZXk5XSA9IGFyZ3VtZW50c1tfa2V5OV07XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5ncm91cENvbGxhcHNlZCwgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdyb3VwRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdyb3VwRW5kKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjEwID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMTApLCBfa2V5MTAgPSAwOyBfa2V5MTAgPCBfbGVuMTA7IF9rZXkxMCsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTEwXSA9IGFyZ3VtZW50c1tfa2V5MTBdO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZ3JvdXBFbmQsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwcm9maWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb2ZpbGUobGFiZWwpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5wcm9maWxlLCBbbGFiZWxdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicHJvZmlsZUVuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9maWxlRW5kKGxhYmVsKSB7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUucHJvZmlsZUVuZCwgW2xhYmVsXSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZShsYWJlbCkge1xuICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXSA9IHRoaXNbVElNRVJTX1NZTUJPTF0gfHwgbmV3IE1hcCgpO1xuICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXS5zZXQobGFiZWwsIHByb2Nlc3MuaHJ0aW1lKCkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lTG9nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVMb2cobGFiZWwpIHtcbiAgICAgIHZhciBwcmV2ID0gdGhpc1tUSU1FUlNfU1lNQk9MXSAmJiB0aGlzW1RJTUVSU19TWU1CT0xdLmdldChsYWJlbCk7XG5cbiAgICAgIGlmICghcHJldikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzdWNoIGxhYmVsICdcIi5jb25jYXQobGFiZWwsIFwiJyBmb3IgV2VicGFja0xvZ2dlci50aW1lTG9nKClcIikpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGltZSA9IHByb2Nlc3MuaHJ0aW1lKHByZXYpO1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnRpbWUsIFtsYWJlbF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aW1lKSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVFbmQobGFiZWwpIHtcbiAgICAgIHZhciBwcmV2ID0gdGhpc1tUSU1FUlNfU1lNQk9MXSAmJiB0aGlzW1RJTUVSU19TWU1CT0xdLmdldChsYWJlbCk7XG5cbiAgICAgIGlmICghcHJldikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzdWNoIGxhYmVsICdcIi5jb25jYXQobGFiZWwsIFwiJyBmb3IgV2VicGFja0xvZ2dlci50aW1lRW5kKClcIikpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGltZSA9IHByb2Nlc3MuaHJ0aW1lKHByZXYpO1xuICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXS5kZWxldGUobGFiZWwpO1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnRpbWUsIFtsYWJlbF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aW1lKSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lQWdncmVnYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVBZ2dyZWdhdGUobGFiZWwpIHtcbiAgICAgIHZhciBwcmV2ID0gdGhpc1tUSU1FUlNfU1lNQk9MXSAmJiB0aGlzW1RJTUVSU19TWU1CT0xdLmdldChsYWJlbCk7XG5cbiAgICAgIGlmICghcHJldikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzdWNoIGxhYmVsICdcIi5jb25jYXQobGFiZWwsIFwiJyBmb3IgV2VicGFja0xvZ2dlci50aW1lQWdncmVnYXRlKClcIikpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGltZSA9IHByb2Nlc3MuaHJ0aW1lKHByZXYpO1xuICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXS5kZWxldGUobGFiZWwpO1xuICAgICAgdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdID0gdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdIHx8IG5ldyBNYXAoKTtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdLmdldChsYWJlbCk7XG5cbiAgICAgIGlmIChjdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHRpbWVbMV0gKyBjdXJyZW50WzFdID4gMWU5KSB7XG4gICAgICAgICAgdGltZVswXSArPSBjdXJyZW50WzBdICsgMTtcbiAgICAgICAgICB0aW1lWzFdID0gdGltZVsxXSAtIDFlOSArIGN1cnJlbnRbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGltZVswXSArPSBjdXJyZW50WzBdO1xuICAgICAgICAgIHRpbWVbMV0gKz0gY3VycmVudFsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uc2V0KGxhYmVsLCB0aW1lKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGltZUFnZ3JlZ2F0ZUVuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lQWdncmVnYXRlRW5kKGxhYmVsKSB7XG4gICAgICBpZiAodGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgIHZhciB0aW1lID0gdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdLmdldChsYWJlbCk7XG4gICAgICBpZiAodGltZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uZGVsZXRlKGxhYmVsKTtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50aW1lLCBbbGFiZWxdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGltZSkpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gV2VicGFja0xvZ2dlcjtcbn0oKTtcblxuZXhwb3J0cy5Mb2dnZXIgPSBXZWJwYWNrTG9nZ2VyO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL2NyZWF0ZUNvbnNvbGVMb2dnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlclsodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufVxuXG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0xvZ2dlciAqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvTG9nZ2VyLmpzXCIpLFxuICAgIExvZ1R5cGUgPSBfcmVxdWlyZS5Mb2dUeXBlO1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi8uLi9kZWNsYXJhdGlvbnMvV2VicGFja09wdGlvbnNcIikuRmlsdGVySXRlbVR5cGVzfSBGaWx0ZXJJdGVtVHlwZXMgKi9cblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi8uLi9kZWNsYXJhdGlvbnMvV2VicGFja09wdGlvbnNcIikuRmlsdGVyVHlwZXN9IEZpbHRlclR5cGVzICovXG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi9Mb2dnZXJcIikuTG9nVHlwZUVudW19IExvZ1R5cGVFbnVtICovXG5cbi8qKiBAdHlwZWRlZiB7ZnVuY3Rpb24oc3RyaW5nKTogYm9vbGVhbn0gRmlsdGVyRnVuY3Rpb24gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBMb2dnZXJDb25zb2xlXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IHZvaWR9IGNsZWFyXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IHZvaWR9IHRyYWNlXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gaW5mb1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGxvZ1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IHdhcm5cbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBlcnJvclxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBkZWJ1Z1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cENvbGxhcHNlZFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cEVuZFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBzdGF0dXNcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gcHJvZmlsZVxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBwcm9maWxlRW5kXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IGxvZ1RpbWVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IExvZ2dlck9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7ZmFsc2V8dHJ1ZXxcIm5vbmVcInxcImVycm9yXCJ8XCJ3YXJuXCJ8XCJpbmZvXCJ8XCJsb2dcInxcInZlcmJvc2VcIn0gbGV2ZWwgbG9nbGV2ZWxcbiAqIEBwcm9wZXJ0eSB7RmlsdGVyVHlwZXN8Ym9vbGVhbn0gZGVidWcgZmlsdGVyIGZvciBkZWJ1ZyBsb2dnaW5nXG4gKiBAcHJvcGVydHkge0xvZ2dlckNvbnNvbGV9IGNvbnNvbGUgdGhlIGNvbnNvbGUgdG8gbG9nIHRvXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0ZpbHRlckl0ZW1UeXBlc30gaXRlbSBhbiBpbnB1dCBpdGVtXG4gKiBAcmV0dXJucyB7RmlsdGVyRnVuY3Rpb259IGZpbHRlciBmdW5jdGlvblxuICovXG5cblxudmFyIGZpbHRlclRvRnVuY3Rpb24gPSBmdW5jdGlvbiBmaWx0ZXJUb0Z1bmN0aW9uKGl0ZW0pIHtcbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgdmFyIHJlZ0V4cCA9IG5ldyBSZWdFeHAoXCJbXFxcXFxcXFwvXVwiLmNvbmNhdChpdGVtLnJlcGxhY2UoIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICAgIC9bLVtcXF17fSgpKis/LlxcXFxeJHxdL2csIFwiXFxcXCQmXCIpLCBcIihbXFxcXFxcXFwvXXwkfCF8XFxcXD8pXCIpKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlkZW50KSB7XG4gICAgICByZXR1cm4gcmVnRXhwLnRlc3QoaWRlbnQpO1xuICAgIH07XG4gIH1cblxuICBpZiAoaXRlbSAmJiB0eXBlb2YgaXRlbSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgaXRlbS50ZXN0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlkZW50KSB7XG4gICAgICByZXR1cm4gaXRlbS50ZXN0KGlkZW50KTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfTtcbiAgfVxufTtcbi8qKlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuXG5cbnZhciBMb2dMZXZlbCA9IHtcbiAgbm9uZTogNixcbiAgZmFsc2U6IDYsXG4gIGVycm9yOiA1LFxuICB3YXJuOiA0LFxuICBpbmZvOiAzLFxuICBsb2c6IDIsXG4gIHRydWU6IDIsXG4gIHZlcmJvc2U6IDFcbn07XG4vKipcbiAqIEBwYXJhbSB7TG9nZ2VyT3B0aW9uc30gb3B0aW9ucyBvcHRpb25zIG9iamVjdFxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgTG9nVHlwZUVudW0sIGFueVtdKTogdm9pZH0gbG9nZ2luZyBmdW5jdGlvblxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIF9yZWYkbGV2ZWwgPSBfcmVmLmxldmVsLFxuICAgICAgbGV2ZWwgPSBfcmVmJGxldmVsID09PSB2b2lkIDAgPyBcImluZm9cIiA6IF9yZWYkbGV2ZWwsXG4gICAgICBfcmVmJGRlYnVnID0gX3JlZi5kZWJ1ZyxcbiAgICAgIGRlYnVnID0gX3JlZiRkZWJ1ZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGRlYnVnLFxuICAgICAgY29uc29sZSA9IF9yZWYuY29uc29sZTtcbiAgdmFyIGRlYnVnRmlsdGVycyA9IHR5cGVvZiBkZWJ1ZyA9PT0gXCJib29sZWFuXCIgPyBbZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWJ1ZztcbiAgfV0gOlxuICAvKiogQHR5cGUge0ZpbHRlckl0ZW1UeXBlc1tdfSAqL1xuICBbXS5jb25jYXQoZGVidWcpLm1hcChmaWx0ZXJUb0Z1bmN0aW9uKTtcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5cbiAgdmFyIGxvZ2xldmVsID0gTG9nTGV2ZWxbXCJcIi5jb25jYXQobGV2ZWwpXSB8fCAwO1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgbG9nZ2VyXG4gICAqIEBwYXJhbSB7TG9nVHlwZUVudW19IHR5cGUgdHlwZSBvZiB0aGUgbG9nIGVudHJ5XG4gICAqIEBwYXJhbSB7YW55W119IGFyZ3MgYXJndW1lbnRzIG9mIHRoZSBsb2cgZW50cnlcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG4gIHZhciBsb2dnZXIgPSBmdW5jdGlvbiBsb2dnZXIobmFtZSwgdHlwZSwgYXJncykge1xuICAgIHZhciBsYWJlbGVkQXJncyA9IGZ1bmN0aW9uIGxhYmVsZWRBcmdzKCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJncykpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgYXJnc1swXSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHJldHVybiBbXCJbXCIuY29uY2F0KG5hbWUsIFwiXSBcIikuY29uY2F0KGFyZ3NbMF0pXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3Muc2xpY2UoMSkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gW1wiW1wiLmNvbmNhdChuYW1lLCBcIl1cIildLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBkZWJ1ZyA9IGRlYnVnRmlsdGVycy5zb21lKGZ1bmN0aW9uIChmKSB7XG4gICAgICByZXR1cm4gZihuYW1lKTtcbiAgICB9KTtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBMb2dUeXBlLmRlYnVnOlxuICAgICAgICBpZiAoIWRlYnVnKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuZGVidWcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLmRlYnVnLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUubG9nOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuaW5mbzpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmluZm8pIHJldHVybjtcbiAgICAgICAgY29uc29sZS5pbmZvLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUud2FybjpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLndhcm4pIHJldHVybjtcbiAgICAgICAgY29uc29sZS53YXJuLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuZXJyb3I6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5lcnJvcikgcmV0dXJuO1xuICAgICAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUudHJhY2U6XG4gICAgICAgIGlmICghZGVidWcpIHJldHVybjtcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLmdyb3VwQ29sbGFwc2VkOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG5cbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLnZlcmJvc2UpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmdyb3VwQ29sbGFwc2VkID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG5cbiAgICAgIGNhc2UgTG9nVHlwZS5ncm91cDpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmdyb3VwID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgY29uc29sZS5ncm91cC5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLmdyb3VwRW5kOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuZ3JvdXBFbmQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLnRpbWU6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG4gICAgICAgICAgdmFyIG1zID0gYXJnc1sxXSAqIDEwMDAgKyBhcmdzWzJdIC8gMTAwMDAwMDtcbiAgICAgICAgICB2YXIgbXNnID0gXCJbXCIuY29uY2F0KG5hbWUsIFwiXSBcIikuY29uY2F0KGFyZ3NbMF0sIFwiOiBcIikuY29uY2F0KG1zLCBcIiBtc1wiKTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5sb2dUaW1lID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nVGltZShtc2cpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtc2cpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgTG9nVHlwZS5wcm9maWxlOlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5wcm9maWxlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgY29uc29sZS5wcm9maWxlLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLnByb2ZpbGVFbmQ6XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnByb2ZpbGVFbmQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLnByb2ZpbGVFbmQuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuY2xlYXI6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5jbGVhciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICAgIGNvbnNvbGUuY2xlYXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuc3RhdHVzOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwuaW5mbykgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5zdGF0dXMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc29sZS5zdGF0dXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5zdGF0dXMuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8uYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBMb2dUeXBlIFwiLmNvbmNhdCh0eXBlKSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsb2dnZXI7XG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL3J1bnRpbWUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvcnVudGltZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG52YXIgU3luY0JhaWxIb29rID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgdGFwYWJsZS9saWIvU3luY0JhaWxIb29rICovIFwiLi9jbGllbnQtc3JjL21vZHVsZXMvbG9nZ2VyL1N5bmNCYWlsSG9va0Zha2UuanNcIik7XG5cbnZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTG9nZ2VyICovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanNcIiksXG4gICAgTG9nZ2VyID0gX3JlcXVpcmUuTG9nZ2VyO1xuXG52YXIgY3JlYXRlQ29uc29sZUxvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vY3JlYXRlQ29uc29sZUxvZ2dlciAqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qc1wiKTtcbi8qKiBAdHlwZSB7Y3JlYXRlQ29uc29sZUxvZ2dlci5Mb2dnZXJPcHRpb25zfSAqL1xuXG5cbnZhciBjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMgPSB7XG4gIGxldmVsOiBcImluZm9cIixcbiAgZGVidWc6IGZhbHNlLFxuICBjb25zb2xlOiBjb25zb2xlXG59O1xudmFyIGN1cnJlbnREZWZhdWx0TG9nZ2VyID0gY3JlYXRlQ29uc29sZUxvZ2dlcihjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMpO1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBsb2dnZXJcbiAqIEByZXR1cm5zIHtMb2dnZXJ9IGEgbG9nZ2VyXG4gKi9cblxuZXhwb3J0cy5nZXRMb2dnZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmV3IExvZ2dlcihmdW5jdGlvbiAodHlwZSwgYXJncykge1xuICAgIGlmIChleHBvcnRzLmhvb2tzLmxvZy5jYWxsKG5hbWUsIHR5cGUsIGFyZ3MpID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGN1cnJlbnREZWZhdWx0TG9nZ2VyKG5hbWUsIHR5cGUsIGFyZ3MpO1xuICAgIH1cbiAgfSwgZnVuY3Rpb24gKGNoaWxkTmFtZSkge1xuICAgIHJldHVybiBleHBvcnRzLmdldExvZ2dlcihcIlwiLmNvbmNhdChuYW1lLCBcIi9cIikuY29uY2F0KGNoaWxkTmFtZSkpO1xuICB9KTtcbn07XG4vKipcbiAqIEBwYXJhbSB7Y3JlYXRlQ29uc29sZUxvZ2dlci5Mb2dnZXJPcHRpb25zfSBvcHRpb25zIG5ldyBvcHRpb25zLCBtZXJnZSB3aXRoIG9sZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG5cbmV4cG9ydHMuY29uZmlndXJlRGVmYXVsdExvZ2dlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIF9leHRlbmRzKGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgY3VycmVudERlZmF1bHRMb2dnZXIgPSBjcmVhdGVDb25zb2xlTG9nZ2VyKGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucyk7XG59O1xuXG5leHBvcnRzLmhvb2tzID0ge1xuICBsb2c6IG5ldyBTeW5jQmFpbEhvb2soW1wib3JpZ2luXCIsIFwidHlwZVwiLCBcImFyZ3NcIl0pXG59O1xuXG4vKioqLyB9KVxuXG4vKioqKioqLyBcdH0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMgKi9cbi8qKioqKiovIFx0IWZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9XG4vKioqKioqLyBcdH0oKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QgKi9cbi8qKioqKiovIFx0IWZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4vKioqKioqLyBcdFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbi8qKioqKiovIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdH0oKTtcbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSB7fTtcbi8vIFRoaXMgZW50cnkgbmVlZCB0byBiZSB3cmFwcGVkIGluIGFuIElJRkUgYmVjYXVzZSBpdCBuZWVkIHRvIGJlIGlzb2xhdGVkIGFnYWluc3Qgb3RoZXIgbW9kdWxlcyBpbiB0aGUgY2h1bmsuXG4hZnVuY3Rpb24oKSB7XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2NsaWVudC1zcmMvbW9kdWxlcy9sb2dnZXIvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJkZWZhdWx0XCI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gLyogcmVleHBvcnQgZGVmYXVsdCBleHBvcnQgZnJvbSBuYW1lZCBtb2R1bGUgKi8gd2VicGFja19saWJfbG9nZ2luZ19ydW50aW1lX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX187IH1cbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHdlYnBhY2tfbGliX2xvZ2dpbmdfcnVudGltZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzICovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzXCIpO1xuXG59KCk7XG52YXIgX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfXyA9IGV4cG9ydHM7XG5mb3IodmFyIGkgaW4gX193ZWJwYWNrX2V4cG9ydHNfXykgX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfX1tpXSA9IF9fd2VicGFja19leHBvcnRzX19baV07XG5pZihfX3dlYnBhY2tfZXhwb3J0c19fLl9fZXNNb2R1bGUpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIH0pKClcbjsiLCIvLyBUaGUgZXJyb3Igb3ZlcmxheSBpcyBpbnNwaXJlZCAoYW5kIG1vc3RseSBjb3BpZWQpIGZyb20gQ3JlYXRlIFJlYWN0IEFwcCAoaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29raW5jdWJhdG9yL2NyZWF0ZS1yZWFjdC1hcHApXG4vLyBUaGV5LCBpbiB0dXJuLCBnb3QgaW5zcGlyZWQgYnkgd2VicGFjay1ob3QtbWlkZGxld2FyZSAoaHR0cHM6Ly9naXRodWIuY29tL2dsZW5qYW1pbi93ZWJwYWNrLWhvdC1taWRkbGV3YXJlKS5cbmltcG9ydCBhbnNpSFRNTCBmcm9tIFwiYW5zaS1odG1sLWNvbW11bml0eVwiO1xuaW1wb3J0IHsgZW5jb2RlIH0gZnJvbSBcImh0bWwtZW50aXRpZXNcIjtcbnZhciBjb2xvcnMgPSB7XG4gIHJlc2V0OiBbXCJ0cmFuc3BhcmVudFwiLCBcInRyYW5zcGFyZW50XCJdLFxuICBibGFjazogXCIxODE4MThcIixcbiAgcmVkOiBcIkUzNjA0OVwiLFxuICBncmVlbjogXCJCM0NCNzRcIixcbiAgeWVsbG93OiBcIkZGRDA4MFwiLFxuICBibHVlOiBcIjdDQUZDMlwiLFxuICBtYWdlbnRhOiBcIjdGQUNDQVwiLFxuICBjeWFuOiBcIkMzQzJFRlwiLFxuICBsaWdodGdyZXk6IFwiRUJFN0UzXCIsXG4gIGRhcmtncmV5OiBcIjZENzg5MVwiXG59O1xuLyoqIEB0eXBlIHtIVE1MSUZyYW1lRWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWR9ICovXG5cbnZhciBpZnJhbWVDb250YWluZXJFbGVtZW50O1xuLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWR9ICovXG5cbnZhciBjb250YWluZXJFbGVtZW50O1xuLyoqIEB0eXBlIHtBcnJheTwoZWxlbWVudDogSFRNTERpdkVsZW1lbnQpID0+IHZvaWQ+fSAqL1xuXG52YXIgb25Mb2FkUXVldWUgPSBbXTtcbi8qKiBAdHlwZSB7VHJ1c3RlZFR5cGVQb2xpY3kgfCB1bmRlZmluZWR9ICovXG5cbnZhciBvdmVybGF5VHJ1c3RlZFR5cGVzUG9saWN5O1xuYW5zaUhUTUwuc2V0Q29sb3JzKGNvbG9ycyk7XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbH0gdHJ1c3RlZFR5cGVzUG9saWN5TmFtZVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lcih0cnVzdGVkVHlwZXNQb2xpY3lOYW1lKSB7XG4gIC8vIEVuYWJsZSBUcnVzdGVkIFR5cGVzIGlmIHRoZXkgYXJlIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBicm93c2VyLlxuICBpZiAod2luZG93LnRydXN0ZWRUeXBlcykge1xuICAgIG92ZXJsYXlUcnVzdGVkVHlwZXNQb2xpY3kgPSB3aW5kb3cudHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeSh0cnVzdGVkVHlwZXNQb2xpY3lOYW1lIHx8IFwid2VicGFjay1kZXYtc2VydmVyI292ZXJsYXlcIiwge1xuICAgICAgY3JlYXRlSFRNTDogZnVuY3Rpb24gY3JlYXRlSFRNTCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZnJhbWVDb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5pZCA9IFwid2VicGFjay1kZXYtc2VydmVyLWNsaWVudC1vdmVybGF5XCI7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3JjID0gXCJhYm91dDpibGFua1wiO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLmxlZnQgPSAwO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLnRvcCA9IDA7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3R5bGUucmlnaHQgPSAwO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLmJvdHRvbSA9IDA7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3R5bGUud2lkdGggPSBcIjEwMHZ3XCI7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gXCIxMDB2aFwiO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLmJvcmRlciA9IFwibm9uZVwiO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLnpJbmRleCA9IDk5OTk5OTk5OTk7XG5cbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29udGFpbmVyRWxlbWVudCA9XG4gICAgLyoqIEB0eXBlIHtEb2N1bWVudH0gKi9cblxuICAgIC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnR9ICovXG4gICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5jb250ZW50RG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb250YWluZXJFbGVtZW50LmlkID0gXCJ3ZWJwYWNrLWRldi1zZXJ2ZXItY2xpZW50LW92ZXJsYXktZGl2XCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUubGVmdCA9IDA7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS50b3AgPSAwO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUucmlnaHQgPSAwO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUuYm90dG9tID0gMDtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLndpZHRoID0gXCIxMDB2d1wiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gXCIxMDB2aFwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZ2JhKDAsIDAsIDAsIDAuODUpXCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5jb2xvciA9IFwiI0U4RThFOFwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUuZm9udEZhbWlseSA9IFwiTWVubG8sIENvbnNvbGFzLCBtb25vc3BhY2VcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmZvbnRTaXplID0gXCJsYXJnZVwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUucGFkZGluZyA9IFwiMnJlbVwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUubGluZUhlaWdodCA9IFwiMS4yXCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS53aGl0ZVNwYWNlID0gXCJwcmUtd3JhcFwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSBcImF1dG9cIjtcbiAgICB2YXIgaGVhZGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIGhlYWRlckVsZW1lbnQuaW5uZXJUZXh0ID0gXCJDb21waWxlZCB3aXRoIHByb2JsZW1zOlwiO1xuICAgIHZhciBjbG9zZUJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5pbm5lclRleHQgPSBcIlhcIjtcbiAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZCA9IFwidHJhbnNwYXJlbnRcIjtcbiAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuc3R5bGUuYm9yZGVyID0gXCJub25lXCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLmZvbnRTaXplID0gXCIyMHB4XCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLmZvbnRXZWlnaHQgPSBcImJvbGRcIjtcbiAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuc3R5bGUuY29sb3IgPSBcIndoaXRlXCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5jc3NGbG9hdCA9IFwicmlnaHRcIjsgLy8gQHRzLWlnbm9yZVxuXG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLnN0eWxlRmxvYXQgPSBcInJpZ2h0XCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBoaWRlKCk7XG4gICAgfSk7XG4gICAgY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChoZWFkZXJFbGVtZW50KTtcbiAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKGNsb3NlQnV0dG9uRWxlbWVudCk7XG4gICAgY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICAvKiogQHR5cGUge0RvY3VtZW50fSAqL1xuXG4gICAgLyoqIEB0eXBlIHtIVE1MSUZyYW1lRWxlbWVudH0gKi9cbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LmNvbnRlbnREb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lckVsZW1lbnQpO1xuICAgIG9uTG9hZFF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKG9uTG9hZCkge1xuICAgICAgb25Mb2FkKFxuICAgICAgLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudH0gKi9cbiAgICAgIGNvbnRhaW5lckVsZW1lbnQpO1xuICAgIH0pO1xuICAgIG9uTG9hZFF1ZXVlID0gW107XG4gICAgLyoqIEB0eXBlIHtIVE1MSUZyYW1lRWxlbWVudH0gKi9cblxuICAgIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQub25sb2FkID0gbnVsbDtcbiAgfTtcblxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZUNvbnRhaW5lckVsZW1lbnQpO1xufVxuLyoqXG4gKiBAcGFyYW0geyhlbGVtZW50OiBIVE1MRGl2RWxlbWVudCkgPT4gdm9pZH0gY2FsbGJhY2tcbiAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbH0gdHJ1c3RlZFR5cGVzUG9saWN5TmFtZVxuICovXG5cblxuZnVuY3Rpb24gZW5zdXJlT3ZlcmxheUV4aXN0cyhjYWxsYmFjaywgdHJ1c3RlZFR5cGVzUG9saWN5TmFtZSkge1xuICBpZiAoY29udGFpbmVyRWxlbWVudCkge1xuICAgIC8vIEV2ZXJ5dGhpbmcgaXMgcmVhZHksIGNhbGwgdGhlIGNhbGxiYWNrIHJpZ2h0IGF3YXkuXG4gICAgY2FsbGJhY2soY29udGFpbmVyRWxlbWVudCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb25Mb2FkUXVldWUucHVzaChjYWxsYmFjayk7XG5cbiAgaWYgKGlmcmFtZUNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjcmVhdGVDb250YWluZXIodHJ1c3RlZFR5cGVzUG9saWN5TmFtZSk7XG59IC8vIFN1Y2Nlc3NmdWwgY29tcGlsYXRpb24uXG5cblxuZnVuY3Rpb24gaGlkZSgpIHtcbiAgaWYgKCFpZnJhbWVDb250YWluZXJFbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENsZWFuIHVwIGFuZCByZXNldCBpbnRlcm5hbCBzdGF0ZS5cblxuXG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lQ29udGFpbmVyRWxlbWVudCk7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQgPSBudWxsO1xuICBjb250YWluZXJFbGVtZW50ID0gbnVsbDtcbn1cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nICB8IHsgZmlsZT86IHN0cmluZywgbW9kdWxlTmFtZT86IHN0cmluZywgbG9jPzogc3RyaW5nLCBtZXNzYWdlPzogc3RyaW5nIH19IGl0ZW1cbiAqIEByZXR1cm5zIHt7IGhlYWRlcjogc3RyaW5nLCBib2R5OiBzdHJpbmcgfX1cbiAqL1xuXG5cbmZ1bmN0aW9uIGZvcm1hdFByb2JsZW0odHlwZSwgaXRlbSkge1xuICB2YXIgaGVhZGVyID0gdHlwZSA9PT0gXCJ3YXJuaW5nXCIgPyBcIldBUk5JTkdcIiA6IFwiRVJST1JcIjtcbiAgdmFyIGJvZHkgPSBcIlwiO1xuXG4gIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJzdHJpbmdcIikge1xuICAgIGJvZHkgKz0gaXRlbTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZmlsZSA9IGl0ZW0uZmlsZSB8fCBcIlwiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcblxuICAgIHZhciBtb2R1bGVOYW1lID0gaXRlbS5tb2R1bGVOYW1lID8gaXRlbS5tb2R1bGVOYW1lLmluZGV4T2YoXCIhXCIpICE9PSAtMSA/IFwiXCIuY29uY2F0KGl0ZW0ubW9kdWxlTmFtZS5yZXBsYWNlKC9eKFxcc3xcXFMpKiEvLCBcIlwiKSwgXCIgKFwiKS5jb25jYXQoaXRlbS5tb2R1bGVOYW1lLCBcIilcIikgOiBcIlwiLmNvbmNhdChpdGVtLm1vZHVsZU5hbWUpIDogXCJcIjtcbiAgICB2YXIgbG9jID0gaXRlbS5sb2M7XG4gICAgaGVhZGVyICs9IFwiXCIuY29uY2F0KG1vZHVsZU5hbWUgfHwgZmlsZSA/IFwiIGluIFwiLmNvbmNhdChtb2R1bGVOYW1lID8gXCJcIi5jb25jYXQobW9kdWxlTmFtZSkuY29uY2F0KGZpbGUgPyBcIiAoXCIuY29uY2F0KGZpbGUsIFwiKVwiKSA6IFwiXCIpIDogZmlsZSkuY29uY2F0KGxvYyA/IFwiIFwiLmNvbmNhdChsb2MpIDogXCJcIikgOiBcIlwiKTtcbiAgICBib2R5ICs9IGl0ZW0ubWVzc2FnZSB8fCBcIlwiO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBoZWFkZXI6IGhlYWRlcixcbiAgICBib2R5OiBib2R5XG4gIH07XG59IC8vIENvbXBpbGF0aW9uIHdpdGggZXJyb3JzIChlLmcuIHN5bnRheCBlcnJvciBvciBtaXNzaW5nIG1vZHVsZXMpLlxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZyAgfCB7IGZpbGU/OiBzdHJpbmcsIG1vZHVsZU5hbWU/OiBzdHJpbmcsIGxvYz86IHN0cmluZywgbWVzc2FnZT86IHN0cmluZyB9Pn0gbWVzc2FnZXNcbiAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbH0gdHJ1c3RlZFR5cGVzUG9saWN5TmFtZVxuICovXG5cblxuZnVuY3Rpb24gc2hvdyh0eXBlLCBtZXNzYWdlcywgdHJ1c3RlZFR5cGVzUG9saWN5TmFtZSkge1xuICBlbnN1cmVPdmVybGF5RXhpc3RzKGZ1bmN0aW9uICgpIHtcbiAgICBtZXNzYWdlcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICB2YXIgZW50cnlFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHZhciB0eXBlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXG4gICAgICB2YXIgX2Zvcm1hdFByb2JsZW0gPSBmb3JtYXRQcm9ibGVtKHR5cGUsIG1lc3NhZ2UpLFxuICAgICAgICAgIGhlYWRlciA9IF9mb3JtYXRQcm9ibGVtLmhlYWRlcixcbiAgICAgICAgICBib2R5ID0gX2Zvcm1hdFByb2JsZW0uYm9keTtcblxuICAgICAgdHlwZUVsZW1lbnQuaW5uZXJUZXh0ID0gaGVhZGVyO1xuICAgICAgdHlwZUVsZW1lbnQuc3R5bGUuY29sb3IgPSBcIiNcIi5jb25jYXQoY29sb3JzLnJlZCk7IC8vIE1ha2UgaXQgbG9vayBzaW1pbGFyIHRvIG91ciB0ZXJtaW5hbC5cblxuICAgICAgdmFyIHRleHQgPSBhbnNpSFRNTChlbmNvZGUoYm9keSkpO1xuICAgICAgdmFyIG1lc3NhZ2VUZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBtZXNzYWdlVGV4dE5vZGUuaW5uZXJIVE1MID0gb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeSA/IG92ZXJsYXlUcnVzdGVkVHlwZXNQb2xpY3kuY3JlYXRlSFRNTCh0ZXh0KSA6IHRleHQ7XG4gICAgICBlbnRyeUVsZW1lbnQuYXBwZW5kQ2hpbGQodHlwZUVsZW1lbnQpO1xuICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSk7XG4gICAgICBlbnRyeUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICAgIGVudHJ5RWxlbWVudC5hcHBlbmRDaGlsZChtZXNzYWdlVGV4dE5vZGUpO1xuICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSk7XG4gICAgICBlbnRyeUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICAgIC8qKiBAdHlwZSB7SFRNTERpdkVsZW1lbnR9ICovXG5cbiAgICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoZW50cnlFbGVtZW50KTtcbiAgICB9KTtcbiAgfSwgdHJ1c3RlZFR5cGVzUG9saWN5TmFtZSk7XG59XG5cbmV4cG9ydCB7IGZvcm1hdFByb2JsZW0sIHNob3csIGhpZGUgfTsiLCIvKiBnbG9iYWwgX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18gKi9cbmltcG9ydCBXZWJTb2NrZXRDbGllbnQgZnJvbSBcIi4vY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanNcIjtcbmltcG9ydCB7IGxvZyB9IGZyb20gXCIuL3V0aWxzL2xvZy5qc1wiOyAvLyB0aGlzIFdlYnNvY2tldENsaWVudCBpcyBoZXJlIGFzIGEgZGVmYXVsdCBmYWxsYmFjaywgaW4gY2FzZSB0aGUgY2xpZW50IGlzIG5vdCBpbmplY3RlZFxuXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cblxudmFyIENsaWVudCA9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxudHlwZW9mIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fICE9PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fLmRlZmF1bHQgIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXy5kZWZhdWx0IDogX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18gOiBXZWJTb2NrZXRDbGllbnQ7XG4vKiBlc2xpbnQtZW5hYmxlIGNhbWVsY2FzZSAqL1xuXG52YXIgcmV0cmllcyA9IDA7XG52YXIgbWF4UmV0cmllcyA9IDEwOyAvLyBJbml0aWFsaXplZCBjbGllbnQgaXMgZXhwb3J0ZWQgc28gZXh0ZXJuYWwgY29uc3VtZXJzIGNhbiB1dGlsaXplIHRoZSBzYW1lIGluc3RhbmNlXG4vLyBJdCBpcyBtdXRhYmxlIHRvIGVuZm9yY2Ugc2luZ2xldG9uXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLW11dGFibGUtZXhwb3J0c1xuXG5leHBvcnQgdmFyIGNsaWVudCA9IG51bGw7XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7eyBbaGFuZGxlcjogc3RyaW5nXTogKGRhdGE/OiBhbnksIHBhcmFtcz86IGFueSkgPT4gYW55IH19IGhhbmRsZXJzXG4gKiBAcGFyYW0ge251bWJlcn0gW3JlY29ubmVjdF1cbiAqL1xuXG52YXIgc29ja2V0ID0gZnVuY3Rpb24gaW5pdFNvY2tldCh1cmwsIGhhbmRsZXJzLCByZWNvbm5lY3QpIHtcbiAgY2xpZW50ID0gbmV3IENsaWVudCh1cmwpO1xuICBjbGllbnQub25PcGVuKGZ1bmN0aW9uICgpIHtcbiAgICByZXRyaWVzID0gMDtcblxuICAgIGlmICh0eXBlb2YgcmVjb25uZWN0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBtYXhSZXRyaWVzID0gcmVjb25uZWN0O1xuICAgIH1cbiAgfSk7XG4gIGNsaWVudC5vbkNsb3NlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmV0cmllcyA9PT0gMCkge1xuICAgICAgaGFuZGxlcnMuY2xvc2UoKTtcbiAgICB9IC8vIFRyeSB0byByZWNvbm5lY3QuXG5cblxuICAgIGNsaWVudCA9IG51bGw7IC8vIEFmdGVyIDEwIHJldHJpZXMgc3RvcCB0cnlpbmcsIHRvIHByZXZlbnQgbG9nc3BhbS5cblxuICAgIGlmIChyZXRyaWVzIDwgbWF4UmV0cmllcykge1xuICAgICAgLy8gRXhwb25lbnRpYWxseSBpbmNyZWFzZSB0aW1lb3V0IHRvIHJlY29ubmVjdC5cbiAgICAgIC8vIFJlc3BlY3RmdWxseSBjb3BpZWQgZnJvbSB0aGUgcGFja2FnZSBgZ290YC5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcbiAgICAgIHZhciByZXRyeUluTXMgPSAxMDAwICogTWF0aC5wb3coMiwgcmV0cmllcykgKyBNYXRoLnJhbmRvbSgpICogMTAwO1xuICAgICAgcmV0cmllcyArPSAxO1xuICAgICAgbG9nLmluZm8oXCJUcnlpbmcgdG8gcmVjb25uZWN0Li4uXCIpO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNvY2tldCh1cmwsIGhhbmRsZXJzLCByZWNvbm5lY3QpO1xuICAgICAgfSwgcmV0cnlJbk1zKTtcbiAgICB9XG4gIH0pO1xuICBjbGllbnQub25NZXNzYWdlKFxuICAvKipcbiAgICogQHBhcmFtIHthbnl9IGRhdGFcbiAgICovXG4gIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBKU09OLnBhcnNlKGRhdGEpO1xuXG4gICAgaWYgKGhhbmRsZXJzW21lc3NhZ2UudHlwZV0pIHtcbiAgICAgIGhhbmRsZXJzW21lc3NhZ2UudHlwZV0obWVzc2FnZS5kYXRhLCBtZXNzYWdlLnBhcmFtcyk7XG4gICAgfVxuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNvY2tldDsiLCIvKipcbiAqIEBwYXJhbSB7eyBwcm90b2NvbD86IHN0cmluZywgYXV0aD86IHN0cmluZywgaG9zdG5hbWU/OiBzdHJpbmcsIHBvcnQ/OiBzdHJpbmcsIHBhdGhuYW1lPzogc3RyaW5nLCBzZWFyY2g/OiBzdHJpbmcsIGhhc2g/OiBzdHJpbmcsIHNsYXNoZXM/OiBib29sZWFuIH19IG9ialVSTFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZm9ybWF0KG9ialVSTCkge1xuICB2YXIgcHJvdG9jb2wgPSBvYmpVUkwucHJvdG9jb2wgfHwgXCJcIjtcblxuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuc3Vic3RyKC0xKSAhPT0gXCI6XCIpIHtcbiAgICBwcm90b2NvbCArPSBcIjpcIjtcbiAgfVxuXG4gIHZhciBhdXRoID0gb2JqVVJMLmF1dGggfHwgXCJcIjtcblxuICBpZiAoYXV0aCkge1xuICAgIGF1dGggPSBlbmNvZGVVUklDb21wb25lbnQoYXV0aCk7XG4gICAgYXV0aCA9IGF1dGgucmVwbGFjZSgvJTNBL2ksIFwiOlwiKTtcbiAgICBhdXRoICs9IFwiQFwiO1xuICB9XG5cbiAgdmFyIGhvc3QgPSBcIlwiO1xuXG4gIGlmIChvYmpVUkwuaG9zdG5hbWUpIHtcbiAgICBob3N0ID0gYXV0aCArIChvYmpVUkwuaG9zdG5hbWUuaW5kZXhPZihcIjpcIikgPT09IC0xID8gb2JqVVJMLmhvc3RuYW1lIDogXCJbXCIuY29uY2F0KG9ialVSTC5ob3N0bmFtZSwgXCJdXCIpKTtcblxuICAgIGlmIChvYmpVUkwucG9ydCkge1xuICAgICAgaG9zdCArPSBcIjpcIi5jb25jYXQob2JqVVJMLnBvcnQpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwYXRobmFtZSA9IG9ialVSTC5wYXRobmFtZSB8fCBcIlwiO1xuXG4gIGlmIChvYmpVUkwuc2xhc2hlcykge1xuICAgIGhvc3QgPSBcIi8vXCIuY29uY2F0KGhvc3QgfHwgXCJcIik7XG5cbiAgICBpZiAocGF0aG5hbWUgJiYgcGF0aG5hbWUuY2hhckF0KDApICE9PSBcIi9cIikge1xuICAgICAgcGF0aG5hbWUgPSBcIi9cIi5jb25jYXQocGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmICghaG9zdCkge1xuICAgIGhvc3QgPSBcIlwiO1xuICB9XG5cbiAgdmFyIHNlYXJjaCA9IG9ialVSTC5zZWFyY2ggfHwgXCJcIjtcblxuICBpZiAoc2VhcmNoICYmIHNlYXJjaC5jaGFyQXQoMCkgIT09IFwiP1wiKSB7XG4gICAgc2VhcmNoID0gXCI/XCIuY29uY2F0KHNlYXJjaCk7XG4gIH1cblxuICB2YXIgaGFzaCA9IG9ialVSTC5oYXNoIHx8IFwiXCI7XG5cbiAgaWYgKGhhc2ggJiYgaGFzaC5jaGFyQXQoMCkgIT09IFwiI1wiKSB7XG4gICAgaGFzaCA9IFwiI1wiLmNvbmNhdChoYXNoKTtcbiAgfVxuXG4gIHBhdGhuYW1lID0gcGF0aG5hbWUucmVwbGFjZSgvWz8jXS9nLFxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hdGNoXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KG1hdGNoKTtcbiAgfSk7XG4gIHNlYXJjaCA9IHNlYXJjaC5yZXBsYWNlKFwiI1wiLCBcIiUyM1wiKTtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KHByb3RvY29sKS5jb25jYXQoaG9zdCkuY29uY2F0KHBhdGhuYW1lKS5jb25jYXQoc2VhcmNoKS5jb25jYXQoaGFzaCk7XG59XG4vKipcbiAqIEBwYXJhbSB7VVJMICYgeyBmcm9tQ3VycmVudFNjcmlwdD86IGJvb2xlYW4gfX0gcGFyc2VkVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlU29ja2V0VVJMKHBhcnNlZFVSTCkge1xuICB2YXIgaG9zdG5hbWUgPSBwYXJzZWRVUkwuaG9zdG5hbWU7IC8vIE5vZGUuanMgbW9kdWxlIHBhcnNlcyBpdCBhcyBgOjpgXG4gIC8vIGBuZXcgVVJMKHVybFN0cmluZywgW2Jhc2VVUkxTdHJpbmddKWAgcGFyc2VzIGl0IGFzICdbOjpdJ1xuXG4gIHZhciBpc0luQWRkckFueSA9IGhvc3RuYW1lID09PSBcIjAuMC4wLjBcIiB8fCBob3N0bmFtZSA9PT0gXCI6OlwiIHx8IGhvc3RuYW1lID09PSBcIls6Ol1cIjsgLy8gd2h5IGRvIHdlIG5lZWQgdGhpcyBjaGVjaz9cbiAgLy8gaG9zdG5hbWUgbi9hIGZvciBmaWxlIHByb3RvY29sIChleGFtcGxlLCB3aGVuIHVzaW5nIGVsZWN0cm9uLCBpb25pYylcbiAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay93ZWJwYWNrLWRldi1zZXJ2ZXIvcHVsbC8zODRcblxuICBpZiAoaXNJbkFkZHJBbnkgJiYgc2VsZi5sb2NhdGlvbi5ob3N0bmFtZSAmJiBzZWxmLmxvY2F0aW9uLnByb3RvY29sLmluZGV4T2YoXCJodHRwXCIpID09PSAwKSB7XG4gICAgaG9zdG5hbWUgPSBzZWxmLmxvY2F0aW9uLmhvc3RuYW1lO1xuICB9XG5cbiAgdmFyIHNvY2tldFVSTFByb3RvY29sID0gcGFyc2VkVVJMLnByb3RvY29sIHx8IHNlbGYubG9jYXRpb24ucHJvdG9jb2w7IC8vIFdoZW4gaHR0cHMgaXMgdXNlZCBpbiB0aGUgYXBwLCBzZWN1cmUgd2ViIHNvY2tldHMgYXJlIGFsd2F5cyBuZWNlc3NhcnkgYmVjYXVzZSB0aGUgYnJvd3NlciBkb2Vzbid0IGFjY2VwdCBub24tc2VjdXJlIHdlYiBzb2NrZXRzLlxuXG4gIGlmIChzb2NrZXRVUkxQcm90b2NvbCA9PT0gXCJhdXRvOlwiIHx8IGhvc3RuYW1lICYmIGlzSW5BZGRyQW55ICYmIHNlbGYubG9jYXRpb24ucHJvdG9jb2wgPT09IFwiaHR0cHM6XCIpIHtcbiAgICBzb2NrZXRVUkxQcm90b2NvbCA9IHNlbGYubG9jYXRpb24ucHJvdG9jb2w7XG4gIH1cblxuICBzb2NrZXRVUkxQcm90b2NvbCA9IHNvY2tldFVSTFByb3RvY29sLnJlcGxhY2UoL14oPzpodHRwfC4rLWV4dGVuc2lvbnxmaWxlKS9pLCBcIndzXCIpO1xuICB2YXIgc29ja2V0VVJMQXV0aCA9IFwiXCI7IC8vIGBuZXcgVVJMKHVybFN0cmluZywgW2Jhc2VVUkxzdHJpbmddKWAgZG9lc24ndCBoYXZlIGBhdXRoYCBwcm9wZXJ0eVxuICAvLyBQYXJzZSBhdXRoZW50aWNhdGlvbiBjcmVkZW50aWFscyBpbiBjYXNlIHdlIG5lZWQgdGhlbVxuXG4gIGlmIChwYXJzZWRVUkwudXNlcm5hbWUpIHtcbiAgICBzb2NrZXRVUkxBdXRoID0gcGFyc2VkVVJMLnVzZXJuYW1lOyAvLyBTaW5jZSBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uIGRvZXMgbm90IGFsbG93IGVtcHR5IHVzZXJuYW1lLFxuICAgIC8vIHdlIG9ubHkgaW5jbHVkZSBwYXNzd29yZCBpZiB0aGUgdXNlcm5hbWUgaXMgbm90IGVtcHR5LlxuXG4gICAgaWYgKHBhcnNlZFVSTC5wYXNzd29yZCkge1xuICAgICAgLy8gUmVzdWx0OiA8dXNlcm5hbWU+OjxwYXNzd29yZD5cbiAgICAgIHNvY2tldFVSTEF1dGggPSBzb2NrZXRVUkxBdXRoLmNvbmNhdChcIjpcIiwgcGFyc2VkVVJMLnBhc3N3b3JkKTtcbiAgICB9XG4gIH0gLy8gSW4gY2FzZSB0aGUgaG9zdCBpcyBhIHJhdyBJUHY2IGFkZHJlc3MsIGl0IGNhbiBiZSBlbmNsb3NlZCBpblxuICAvLyB0aGUgYnJhY2tldHMgYXMgdGhlIGJyYWNrZXRzIGFyZSBuZWVkZWQgaW4gdGhlIGZpbmFsIFVSTCBzdHJpbmcuXG4gIC8vIE5lZWQgdG8gcmVtb3ZlIHRob3NlIGFzIHVybC5mb3JtYXQgYmxpbmRseSBhZGRzIGl0cyBvd24gc2V0IG9mIGJyYWNrZXRzXG4gIC8vIGlmIHRoZSBob3N0IHN0cmluZyBjb250YWlucyBjb2xvbnMuIFRoYXQgd291bGQgbGVhZCB0byBub24td29ya2luZ1xuICAvLyBkb3VibGUgYnJhY2tldHMgKGUuZy4gW1s6Ol1dKSBob3N0XG4gIC8vXG4gIC8vIEFsbCBvZiB0aGVzZSB3ZWIgc29ja2V0IHVybCBwYXJhbXMgYXJlIG9wdGlvbmFsbHkgcGFzc2VkIGluIHRocm91Z2ggcmVzb3VyY2VRdWVyeSxcbiAgLy8gc28gd2UgbmVlZCB0byBmYWxsIGJhY2sgdG8gdGhlIGRlZmF1bHQgaWYgdGhleSBhcmUgbm90IHByb3ZpZGVkXG5cblxuICB2YXIgc29ja2V0VVJMSG9zdG5hbWUgPSAoaG9zdG5hbWUgfHwgc2VsZi5sb2NhdGlvbi5ob3N0bmFtZSB8fCBcImxvY2FsaG9zdFwiKS5yZXBsYWNlKC9eXFxbKC4qKVxcXSQvLCBcIiQxXCIpO1xuICB2YXIgc29ja2V0VVJMUG9ydCA9IHBhcnNlZFVSTC5wb3J0O1xuXG4gIGlmICghc29ja2V0VVJMUG9ydCB8fCBzb2NrZXRVUkxQb3J0ID09PSBcIjBcIikge1xuICAgIHNvY2tldFVSTFBvcnQgPSBzZWxmLmxvY2F0aW9uLnBvcnQ7XG4gIH0gLy8gSWYgcGF0aCBpcyBwcm92aWRlZCBpdCdsbCBiZSBwYXNzZWQgaW4gdmlhIHRoZSByZXNvdXJjZVF1ZXJ5IGFzIGFcbiAgLy8gcXVlcnkgcGFyYW0gc28gaXQgaGFzIHRvIGJlIHBhcnNlZCBvdXQgb2YgdGhlIHF1ZXJ5c3RyaW5nIGluIG9yZGVyIGZvciB0aGVcbiAgLy8gY2xpZW50IHRvIG9wZW4gdGhlIHNvY2tldCB0byB0aGUgY29ycmVjdCBsb2NhdGlvbi5cblxuXG4gIHZhciBzb2NrZXRVUkxQYXRobmFtZSA9IFwiL3dzXCI7XG5cbiAgaWYgKHBhcnNlZFVSTC5wYXRobmFtZSAmJiAhcGFyc2VkVVJMLmZyb21DdXJyZW50U2NyaXB0KSB7XG4gICAgc29ja2V0VVJMUGF0aG5hbWUgPSBwYXJzZWRVUkwucGF0aG5hbWU7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0KHtcbiAgICBwcm90b2NvbDogc29ja2V0VVJMUHJvdG9jb2wsXG4gICAgYXV0aDogc29ja2V0VVJMQXV0aCxcbiAgICBob3N0bmFtZTogc29ja2V0VVJMSG9zdG5hbWUsXG4gICAgcG9ydDogc29ja2V0VVJMUG9ydCxcbiAgICBwYXRobmFtZTogc29ja2V0VVJMUGF0aG5hbWUsXG4gICAgc2xhc2hlczogdHJ1ZVxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU29ja2V0VVJMOyIsIi8qKlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0Q3VycmVudFNjcmlwdFNvdXJjZSgpIHtcbiAgLy8gYGRvY3VtZW50LmN1cnJlbnRTY3JpcHRgIGlzIHRoZSBtb3N0IGFjY3VyYXRlIHdheSB0byBmaW5kIHRoZSBjdXJyZW50IHNjcmlwdCxcbiAgLy8gYnV0IGlzIG5vdCBzdXBwb3J0ZWQgaW4gYWxsIGJyb3dzZXJzLlxuICBpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCkge1xuICAgIHJldHVybiBkb2N1bWVudC5jdXJyZW50U2NyaXB0LmdldEF0dHJpYnV0ZShcInNyY1wiKTtcbiAgfSAvLyBGYWxsYmFjayB0byBnZXR0aW5nIGFsbCBzY3JpcHRzIHJ1bm5pbmcgaW4gdGhlIGRvY3VtZW50LlxuXG5cbiAgdmFyIHNjcmlwdEVsZW1lbnRzID0gZG9jdW1lbnQuc2NyaXB0cyB8fCBbXTtcbiAgdmFyIHNjcmlwdEVsZW1lbnRzV2l0aFNyYyA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChzY3JpcHRFbGVtZW50cywgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gIH0pO1xuXG4gIGlmIChzY3JpcHRFbGVtZW50c1dpdGhTcmMubGVuZ3RoID4gMCkge1xuICAgIHZhciBjdXJyZW50U2NyaXB0ID0gc2NyaXB0RWxlbWVudHNXaXRoU3JjW3NjcmlwdEVsZW1lbnRzV2l0aFNyYy5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gIH0gLy8gRmFpbCBhcyB0aGVyZSB3YXMgbm8gc2NyaXB0IHRvIHVzZS5cblxuXG4gIHRocm93IG5ldyBFcnJvcihcIlt3ZWJwYWNrLWRldi1zZXJ2ZXJdIEZhaWxlZCB0byBnZXQgY3VycmVudCBzY3JpcHQgc291cmNlLlwiKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0Q3VycmVudFNjcmlwdFNvdXJjZTsiLCJpbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi9tb2R1bGVzL2xvZ2dlci9pbmRleC5qc1wiO1xudmFyIG5hbWUgPSBcIndlYnBhY2stZGV2LXNlcnZlclwiOyAvLyBkZWZhdWx0IGxldmVsIGlzIHNldCBvbiB0aGUgY2xpZW50IHNpZGUsIHNvIGl0IGRvZXMgbm90IG5lZWRcbi8vIHRvIGJlIHNldCBieSB0aGUgQ0xJIG9yIEFQSVxuXG52YXIgZGVmYXVsdExldmVsID0gXCJpbmZvXCI7IC8vIG9wdGlvbnMgbmV3IG9wdGlvbnMsIG1lcmdlIHdpdGggb2xkIG9wdGlvbnNcblxuLyoqXG4gKiBAcGFyYW0ge2ZhbHNlIHwgdHJ1ZSB8IFwibm9uZVwiIHwgXCJlcnJvclwiIHwgXCJ3YXJuXCIgfCBcImluZm9cIiB8IFwibG9nXCIgfCBcInZlcmJvc2VcIn0gbGV2ZWxcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5cbmZ1bmN0aW9uIHNldExvZ0xldmVsKGxldmVsKSB7XG4gIGxvZ2dlci5jb25maWd1cmVEZWZhdWx0TG9nZ2VyKHtcbiAgICBsZXZlbDogbGV2ZWxcbiAgfSk7XG59XG5cbnNldExvZ0xldmVsKGRlZmF1bHRMZXZlbCk7XG52YXIgbG9nID0gbG9nZ2VyLmdldExvZ2dlcihuYW1lKTtcbmV4cG9ydCB7IGxvZywgc2V0TG9nTGV2ZWwgfTsiLCJpbXBvcnQgZ2V0Q3VycmVudFNjcmlwdFNvdXJjZSBmcm9tIFwiLi9nZXRDdXJyZW50U2NyaXB0U291cmNlLmpzXCI7XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZVF1ZXJ5XG4gKiBAcmV0dXJucyB7eyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBib29sZWFuIH19XG4gKi9cblxuZnVuY3Rpb24gcGFyc2VVUkwocmVzb3VyY2VRdWVyeSkge1xuICAvKiogQHR5cGUge3sgW2tleTogc3RyaW5nXTogc3RyaW5nIH19ICovXG4gIHZhciBvcHRpb25zID0ge307XG5cbiAgaWYgKHR5cGVvZiByZXNvdXJjZVF1ZXJ5ID09PSBcInN0cmluZ1wiICYmIHJlc291cmNlUXVlcnkgIT09IFwiXCIpIHtcbiAgICB2YXIgc2VhcmNoUGFyYW1zID0gcmVzb3VyY2VRdWVyeS5zbGljZSgxKS5zcGxpdChcIiZcIik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlYXJjaFBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBhaXIgPSBzZWFyY2hQYXJhbXNbaV0uc3BsaXQoXCI9XCIpO1xuICAgICAgb3B0aW9uc1twYWlyWzBdXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRWxzZSwgZ2V0IHRoZSB1cmwgZnJvbSB0aGUgPHNjcmlwdD4gdGhpcyBmaWxlIHdhcyBjYWxsZWQgd2l0aC5cbiAgICB2YXIgc2NyaXB0U291cmNlID0gZ2V0Q3VycmVudFNjcmlwdFNvdXJjZSgpO1xuICAgIHZhciBzY3JpcHRTb3VyY2VVUkw7XG5cbiAgICB0cnkge1xuICAgICAgLy8gVGhlIHBsYWNlaG9sZGVyIGBiYXNlVVJMYCB3aXRoIGB3aW5kb3cubG9jYXRpb24uaHJlZmAsXG4gICAgICAvLyBpcyB0byBhbGxvdyBwYXJzaW5nIG9mIHBhdGgtcmVsYXRpdmUgb3IgcHJvdG9jb2wtcmVsYXRpdmUgVVJMcyxcbiAgICAgIC8vIGFuZCB3aWxsIGhhdmUgbm8gZWZmZWN0IGlmIGBzY3JpcHRTb3VyY2VgIGlzIGEgZnVsbHkgdmFsaWQgVVJMLlxuICAgICAgc2NyaXB0U291cmNlVVJMID0gbmV3IFVSTChzY3JpcHRTb3VyY2UsIHNlbGYubG9jYXRpb24uaHJlZik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsvLyBVUkwgcGFyc2luZyBmYWlsZWQsIGRvIG5vdGhpbmcuXG4gICAgICAvLyBXZSB3aWxsIHN0aWxsIHByb2NlZWQgdG8gc2VlIGlmIHdlIGNhbiByZWNvdmVyIHVzaW5nIGByZXNvdXJjZVF1ZXJ5YFxuICAgIH1cblxuICAgIGlmIChzY3JpcHRTb3VyY2VVUkwpIHtcbiAgICAgIG9wdGlvbnMgPSBzY3JpcHRTb3VyY2VVUkw7XG4gICAgICBvcHRpb25zLmZyb21DdXJyZW50U2NyaXB0ID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VVUkw7IiwiaW1wb3J0IGhvdEVtaXR0ZXIgZnJvbSBcIndlYnBhY2svaG90L2VtaXR0ZXIuanNcIjtcbmltcG9ydCB7IGxvZyB9IGZyb20gXCIuL2xvZy5qc1wiO1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi9pbmRleFwiKS5PcHRpb25zfSBPcHRpb25zXG4vKiogQHR5cGVkZWYge2ltcG9ydChcIi4uL2luZGV4XCIpLlN0YXR1c30gU3RhdHVzXG5cbi8qKlxuICogQHBhcmFtIHtPcHRpb25zfSBvcHRpb25zXG4gKiBAcGFyYW0ge1N0YXR1c30gc3RhdHVzXG4gKi9cblxuZnVuY3Rpb24gcmVsb2FkQXBwKF9yZWYsIHN0YXR1cykge1xuICB2YXIgaG90ID0gX3JlZi5ob3QsXG4gICAgICBsaXZlUmVsb2FkID0gX3JlZi5saXZlUmVsb2FkO1xuXG4gIGlmIChzdGF0dXMuaXNVbmxvYWRpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY3VycmVudEhhc2ggPSBzdGF0dXMuY3VycmVudEhhc2gsXG4gICAgICBwcmV2aW91c0hhc2ggPSBzdGF0dXMucHJldmlvdXNIYXNoO1xuICB2YXIgaXNJbml0aWFsID0gY3VycmVudEhhc2guaW5kZXhPZihcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIHByZXZpb3VzSGFzaCkgPj0gMDtcblxuICBpZiAoaXNJbml0aWFsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1dpbmRvd30gcm9vdFdpbmRvd1xuICAgKiBAcGFyYW0ge251bWJlcn0gaW50ZXJ2YWxJZFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpIHtcbiAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgIGxvZy5pbmZvKFwiQXBwIHVwZGF0ZWQuIFJlbG9hZGluZy4uLlwiKTtcbiAgICByb290V2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaCA9IHNlbGYubG9jYXRpb24uc2VhcmNoLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBhbGxvd1RvSG90ID0gc2VhcmNoLmluZGV4T2YoXCJ3ZWJwYWNrLWRldi1zZXJ2ZXItaG90PWZhbHNlXCIpID09PSAtMTtcbiAgdmFyIGFsbG93VG9MaXZlUmVsb2FkID0gc2VhcmNoLmluZGV4T2YoXCJ3ZWJwYWNrLWRldi1zZXJ2ZXItbGl2ZS1yZWxvYWQ9ZmFsc2VcIikgPT09IC0xO1xuXG4gIGlmIChob3QgJiYgYWxsb3dUb0hvdCkge1xuICAgIGxvZy5pbmZvKFwiQXBwIGhvdCB1cGRhdGUuLi5cIik7XG4gICAgaG90RW1pdHRlci5lbWl0KFwid2VicGFja0hvdFVwZGF0ZVwiLCBzdGF0dXMuY3VycmVudEhhc2gpO1xuXG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYud2luZG93KSB7XG4gICAgICAvLyBicm9hZGNhc3QgdXBkYXRlIHRvIHdpbmRvd1xuICAgICAgc2VsZi5wb3N0TWVzc2FnZShcIndlYnBhY2tIb3RVcGRhdGVcIi5jb25jYXQoc3RhdHVzLmN1cnJlbnRIYXNoKSwgXCIqXCIpO1xuICAgIH1cbiAgfSAvLyBhbGxvdyByZWZyZXNoaW5nIHRoZSBwYWdlIG9ubHkgaWYgbGl2ZVJlbG9hZCBpc24ndCBkaXNhYmxlZFxuICBlbHNlIGlmIChsaXZlUmVsb2FkICYmIGFsbG93VG9MaXZlUmVsb2FkKSB7XG4gICAgdmFyIHJvb3RXaW5kb3cgPSBzZWxmOyAvLyB1c2UgcGFyZW50IHdpbmRvdyBmb3IgcmVsb2FkIChpbiBjYXNlIHdlJ3JlIGluIGFuIGlmcmFtZSB3aXRoIG5vIHZhbGlkIHNyYylcblxuICAgIHZhciBpbnRlcnZhbElkID0gc2VsZi5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocm9vdFdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCAhPT0gXCJhYm91dDpcIikge1xuICAgICAgICAvLyByZWxvYWQgaW1tZWRpYXRlbHkgaWYgcHJvdG9jb2wgaXMgdmFsaWRcbiAgICAgICAgYXBwbHlSZWxvYWQocm9vdFdpbmRvdywgaW50ZXJ2YWxJZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290V2luZG93ID0gcm9vdFdpbmRvdy5wYXJlbnQ7XG5cbiAgICAgICAgaWYgKHJvb3RXaW5kb3cucGFyZW50ID09PSByb290V2luZG93KSB7XG4gICAgICAgICAgLy8gaWYgcGFyZW50IGVxdWFscyBjdXJyZW50IHdpbmRvdyB3ZSd2ZSByZWFjaGVkIHRoZSByb290IHdoaWNoIHdvdWxkIGNvbnRpbnVlIGZvcmV2ZXIsIHNvIHRyaWdnZXIgYSByZWxvYWQgYW55d2F5c1xuICAgICAgICAgIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVsb2FkQXBwOyIsIi8qIGdsb2JhbCBfX3Jlc291cmNlUXVlcnkgV29ya2VyR2xvYmFsU2NvcGUgKi9cbi8vIFNlbmQgbWVzc2FnZXMgdG8gdGhlIG91dHNpZGUsIHNvIHBsdWdpbnMgY2FuIGNvbnN1bWUgaXQuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7YW55fSBbZGF0YV1cbiAqL1xuZnVuY3Rpb24gc2VuZE1zZyh0eXBlLCBkYXRhKSB7XG4gIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiAodHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlID09PSBcInVuZGVmaW5lZFwiIHx8ICEoc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlKSkpIHtcbiAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgIHR5cGU6IFwid2VicGFja1wiLmNvbmNhdCh0eXBlKSxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9LCBcIipcIik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgc2VuZE1zZzsiLCJ2YXIgYW5zaVJlZ2V4ID0gbmV3IFJlZ0V4cChbXCJbXFxcXHUwMDFCXFxcXHUwMDlCXVtbXFxcXF0oKSM7P10qKD86KD86KD86KD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKykqfFthLXpBLVpcXFxcZF0rKD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKikqKT9cXFxcdTAwMDcpXCIsIFwiKD86KD86XFxcXGR7MSw0fSg/OjtcXFxcZHswLDR9KSopP1tcXFxcZEEtUFItVFpjZi1ucS11eT0+PH5dKSlcIl0uam9pbihcInxcIiksIFwiZ1wiKTtcbi8qKlxuICpcbiAqIFN0cmlwIFtBTlNJIGVzY2FwZSBjb2Rlc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSkgZnJvbSBhIHN0cmluZy5cbiAqIEFkYXB0ZWQgZnJvbSBjb2RlIG9yaWdpbmFsbHkgcmVsZWFzZWQgYnkgU2luZHJlIFNvcmh1c1xuICogTGljZW5zZWQgdGhlIE1JVCBMaWNlbnNlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIHN0cmlwQW5zaShzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYSBgc3RyaW5nYCwgZ290IGBcIi5jb25jYXQodHlwZW9mIHN0cmluZywgXCJgXCIpKTtcbiAgfVxuXG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShhbnNpUmVnZXgsIFwiXCIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpcEFuc2k7IiwidmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiIsInZhciBsb2dMZXZlbCA9IFwiaW5mb1wiO1xuXG5mdW5jdGlvbiBkdW1teSgpIHt9XG5cbmZ1bmN0aW9uIHNob3VsZExvZyhsZXZlbCkge1xuXHR2YXIgc2hvdWxkTG9nID1cblx0XHQobG9nTGV2ZWwgPT09IFwiaW5mb1wiICYmIGxldmVsID09PSBcImluZm9cIikgfHxcblx0XHQoW1wiaW5mb1wiLCBcIndhcm5pbmdcIl0uaW5kZXhPZihsb2dMZXZlbCkgPj0gMCAmJiBsZXZlbCA9PT0gXCJ3YXJuaW5nXCIpIHx8XG5cdFx0KFtcImluZm9cIiwgXCJ3YXJuaW5nXCIsIFwiZXJyb3JcIl0uaW5kZXhPZihsb2dMZXZlbCkgPj0gMCAmJiBsZXZlbCA9PT0gXCJlcnJvclwiKTtcblx0cmV0dXJuIHNob3VsZExvZztcbn1cblxuZnVuY3Rpb24gbG9nR3JvdXAobG9nRm4pIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChsZXZlbCwgbXNnKSB7XG5cdFx0aWYgKHNob3VsZExvZyhsZXZlbCkpIHtcblx0XHRcdGxvZ0ZuKG1zZyk7XG5cdFx0fVxuXHR9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsZXZlbCwgbXNnKSB7XG5cdGlmIChzaG91bGRMb2cobGV2ZWwpKSB7XG5cdFx0aWYgKGxldmVsID09PSBcImluZm9cIikge1xuXHRcdFx0Y29uc29sZS5sb2cobXNnKTtcblx0XHR9IGVsc2UgaWYgKGxldmVsID09PSBcIndhcm5pbmdcIikge1xuXHRcdFx0Y29uc29sZS53YXJuKG1zZyk7XG5cdFx0fSBlbHNlIGlmIChsZXZlbCA9PT0gXCJlcnJvclwiKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKG1zZyk7XG5cdFx0fVxuXHR9XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMgKi9cbnZhciBncm91cCA9IGNvbnNvbGUuZ3JvdXAgfHwgZHVtbXk7XG52YXIgZ3JvdXBDb2xsYXBzZWQgPSBjb25zb2xlLmdyb3VwQ29sbGFwc2VkIHx8IGR1bW15O1xudmFyIGdyb3VwRW5kID0gY29uc29sZS5ncm91cEVuZCB8fCBkdW1teTtcbi8qIGVzbGludC1lbmFibGUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zICovXG5cbm1vZHVsZS5leHBvcnRzLmdyb3VwID0gbG9nR3JvdXAoZ3JvdXApO1xuXG5tb2R1bGUuZXhwb3J0cy5ncm91cENvbGxhcHNlZCA9IGxvZ0dyb3VwKGdyb3VwQ29sbGFwc2VkKTtcblxubW9kdWxlLmV4cG9ydHMuZ3JvdXBFbmQgPSBsb2dHcm91cChncm91cEVuZCk7XG5cbm1vZHVsZS5leHBvcnRzLnNldExvZ0xldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7XG5cdGxvZ0xldmVsID0gbGV2ZWw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mb3JtYXRFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0dmFyIG1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcblx0dmFyIHN0YWNrID0gZXJyLnN0YWNrO1xuXHRpZiAoIXN0YWNrKSB7XG5cdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdH0gZWxzZSBpZiAoc3RhY2suaW5kZXhPZihtZXNzYWdlKSA8IDApIHtcblx0XHRyZXR1cm4gbWVzc2FnZSArIFwiXFxuXCIgKyBzdGFjaztcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gc3RhY2s7XG5cdH1cbn07XG4iLCIoZnVuY3Rpb24oYSxiKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtdLGIpO2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGV4cG9ydHMpYigpO2Vsc2V7YigpLGEuRmlsZVNhdmVyPXtleHBvcnRzOnt9fS5leHBvcnRzfX0pKHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKGEsYil7cmV0dXJuXCJ1bmRlZmluZWRcIj09dHlwZW9mIGI/Yj17YXV0b0JvbTohMX06XCJvYmplY3RcIiE9dHlwZW9mIGImJihjb25zb2xlLndhcm4oXCJEZXByZWNhdGVkOiBFeHBlY3RlZCB0aGlyZCBhcmd1bWVudCB0byBiZSBhIG9iamVjdFwiKSxiPXthdXRvQm9tOiFifSksYi5hdXRvQm9tJiYvXlxccyooPzp0ZXh0XFwvXFxTKnxhcHBsaWNhdGlvblxcL3htbHxcXFMqXFwvXFxTKlxcK3htbClcXHMqOy4qY2hhcnNldFxccyo9XFxzKnV0Zi04L2kudGVzdChhLnR5cGUpP25ldyBCbG9iKFtcIlxcdUZFRkZcIixhXSx7dHlwZTphLnR5cGV9KTphfWZ1bmN0aW9uIGMoYSxiLGMpe3ZhciBkPW5ldyBYTUxIdHRwUmVxdWVzdDtkLm9wZW4oXCJHRVRcIixhKSxkLnJlc3BvbnNlVHlwZT1cImJsb2JcIixkLm9ubG9hZD1mdW5jdGlvbigpe2coZC5yZXNwb25zZSxiLGMpfSxkLm9uZXJyb3I9ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiY291bGQgbm90IGRvd25sb2FkIGZpbGVcIil9LGQuc2VuZCgpfWZ1bmN0aW9uIGQoYSl7dmFyIGI9bmV3IFhNTEh0dHBSZXF1ZXN0O2Iub3BlbihcIkhFQURcIixhLCExKTt0cnl7Yi5zZW5kKCl9Y2F0Y2goYSl7fXJldHVybiAyMDA8PWIuc3RhdHVzJiYyOTk+PWIuc3RhdHVzfWZ1bmN0aW9uIGUoYSl7dHJ5e2EuZGlzcGF0Y2hFdmVudChuZXcgTW91c2VFdmVudChcImNsaWNrXCIpKX1jYXRjaChjKXt2YXIgYj1kb2N1bWVudC5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRzXCIpO2IuaW5pdE1vdXNlRXZlbnQoXCJjbGlja1wiLCEwLCEwLHdpbmRvdywwLDAsMCw4MCwyMCwhMSwhMSwhMSwhMSwwLG51bGwpLGEuZGlzcGF0Y2hFdmVudChiKX19dmFyIGY9XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmd2luZG93LndpbmRvdz09PXdpbmRvdz93aW5kb3c6XCJvYmplY3RcIj09dHlwZW9mIHNlbGYmJnNlbGYuc2VsZj09PXNlbGY/c2VsZjpcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsJiZnbG9iYWwuZ2xvYmFsPT09Z2xvYmFsP2dsb2JhbDp2b2lkIDAsYT0vTWFjaW50b3NoLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpJiYvQXBwbGVXZWJLaXQvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJiEvU2FmYXJpLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLGc9Zi5zYXZlQXN8fChcIm9iamVjdFwiIT10eXBlb2Ygd2luZG93fHx3aW5kb3chPT1mP2Z1bmN0aW9uKCl7fTpcImRvd25sb2FkXCJpbiBIVE1MQW5jaG9yRWxlbWVudC5wcm90b3R5cGUmJiFhP2Z1bmN0aW9uKGIsZyxoKXt2YXIgaT1mLlVSTHx8Zi53ZWJraXRVUkwsaj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtnPWd8fGIubmFtZXx8XCJkb3dubG9hZFwiLGouZG93bmxvYWQ9ZyxqLnJlbD1cIm5vb3BlbmVyXCIsXCJzdHJpbmdcIj09dHlwZW9mIGI/KGouaHJlZj1iLGoub3JpZ2luPT09bG9jYXRpb24ub3JpZ2luP2Uoaik6ZChqLmhyZWYpP2MoYixnLGgpOmUoaixqLnRhcmdldD1cIl9ibGFua1wiKSk6KGouaHJlZj1pLmNyZWF0ZU9iamVjdFVSTChiKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aS5yZXZva2VPYmplY3RVUkwoai5ocmVmKX0sNEU0KSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZShqKX0sMCkpfTpcIm1zU2F2ZU9yT3BlbkJsb2JcImluIG5hdmlnYXRvcj9mdW5jdGlvbihmLGcsaCl7aWYoZz1nfHxmLm5hbWV8fFwiZG93bmxvYWRcIixcInN0cmluZ1wiIT10eXBlb2YgZiluYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYihiKGYsaCksZyk7ZWxzZSBpZihkKGYpKWMoZixnLGgpO2Vsc2V7dmFyIGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7aS5ocmVmPWYsaS50YXJnZXQ9XCJfYmxhbmtcIixzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZShpKX0pfX06ZnVuY3Rpb24oYixkLGUsZyl7aWYoZz1nfHxvcGVuKFwiXCIsXCJfYmxhbmtcIiksZyYmKGcuZG9jdW1lbnQudGl0bGU9Zy5kb2N1bWVudC5ib2R5LmlubmVyVGV4dD1cImRvd25sb2FkaW5nLi4uXCIpLFwic3RyaW5nXCI9PXR5cGVvZiBiKXJldHVybiBjKGIsZCxlKTt2YXIgaD1cImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiPT09Yi50eXBlLGk9L2NvbnN0cnVjdG9yL2kudGVzdChmLkhUTUxFbGVtZW50KXx8Zi5zYWZhcmksaj0vQ3JpT1NcXC9bXFxkXSsvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7aWYoKGp8fGgmJml8fGEpJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgRmlsZVJlYWRlcil7dmFyIGs9bmV3IEZpbGVSZWFkZXI7ay5vbmxvYWRlbmQ9ZnVuY3Rpb24oKXt2YXIgYT1rLnJlc3VsdDthPWo/YTphLnJlcGxhY2UoL15kYXRhOlteO10qOy8sXCJkYXRhOmF0dGFjaG1lbnQvZmlsZTtcIiksZz9nLmxvY2F0aW9uLmhyZWY9YTpsb2NhdGlvbj1hLGc9bnVsbH0say5yZWFkQXNEYXRhVVJMKGIpfWVsc2V7dmFyIGw9Zi5VUkx8fGYud2Via2l0VVJMLG09bC5jcmVhdGVPYmplY3RVUkwoYik7Zz9nLmxvY2F0aW9uPW06bG9jYXRpb24uaHJlZj1tLGc9bnVsbCxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bC5yZXZva2VPYmplY3RVUkwobSl9LDRFNCl9fSk7Zi5zYXZlQXM9Zy5zYXZlQXM9ZyxcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiYobW9kdWxlLmV4cG9ydHM9Zyl9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmlsZVNhdmVyLm1pbi5qcy5tYXBcbiIsIi8qIVxuICogR1NBUCAzLjExLjNcbiAqIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAyMDIyLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3IgQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiAqL1xuXG4hZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9lKGV4cG9ydHMpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiZXhwb3J0c1wiXSxlKTplKCh0PXR8fHNlbGYpLndpbmRvdz10LndpbmRvd3x8e30pfSh0aGlzLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHQsZSl7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlLnByb3RvdHlwZSksKHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPXQpLl9fcHJvdG9fXz1lfWZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQodCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9ZnVuY3Rpb24gcih0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdH1mdW5jdGlvbiBzKHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHR9ZnVuY3Rpb24gdCh0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdH1mdW5jdGlvbiB1KHQpe3JldHVybiB2b2lkIDA9PT10fWZ1bmN0aW9uIHYodCl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIHR9ZnVuY3Rpb24gdyh0KXtyZXR1cm4hMSE9PXR9ZnVuY3Rpb24geCgpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3d9ZnVuY3Rpb24geSh0KXtyZXR1cm4gcyh0KXx8cih0KX1mdW5jdGlvbiBQKHQpe3JldHVybihpPXl0KHQsb3QpKSYmQ2V9ZnVuY3Rpb24gUSh0LGUpe3JldHVybiBjb25zb2xlLndhcm4oXCJJbnZhbGlkIHByb3BlcnR5XCIsdCxcInNldCB0b1wiLGUsXCJNaXNzaW5nIHBsdWdpbj8gZ3NhcC5yZWdpc3RlclBsdWdpbigpXCIpfWZ1bmN0aW9uIFIodCxlKXtyZXR1cm4hZSYmY29uc29sZS53YXJuKHQpfWZ1bmN0aW9uIFModCxlKXtyZXR1cm4gdCYmKG90W3RdPWUpJiZpJiYoaVt0XT1lKXx8b3R9ZnVuY3Rpb24gVCgpe3JldHVybiAwfWZ1bmN0aW9uIGVhKHQpe3ZhciBlLHIsaT10WzBdO2lmKHYoaSl8fHMoaSl8fCh0PVt0XSksIShlPShpLl9nc2FwfHx7fSkuaGFybmVzcykpe2ZvcihyPWd0Lmxlbmd0aDtyLS0mJiFndFtyXS50YXJnZXRUZXN0KGkpOyk7ZT1ndFtyXX1mb3Iocj10Lmxlbmd0aDtyLS07KXRbcl0mJih0W3JdLl9nc2FwfHwodFtyXS5fZ3NhcD1uZXcganQodFtyXSxlKSkpfHx0LnNwbGljZShyLDEpO3JldHVybiB0fWZ1bmN0aW9uIGZhKHQpe3JldHVybiB0Ll9nc2FwfHxlYShPdCh0KSlbMF0uX2dzYXB9ZnVuY3Rpb24gZ2EodCxlLHIpe3JldHVybihyPXRbZV0pJiZzKHIpP3RbZV0oKTp1KHIpJiZ0LmdldEF0dHJpYnV0ZSYmdC5nZXRBdHRyaWJ1dGUoZSl8fHJ9ZnVuY3Rpb24gaGEodCxlKXtyZXR1cm4odD10LnNwbGl0KFwiLFwiKSkuZm9yRWFjaChlKXx8dH1mdW5jdGlvbiBpYSh0KXtyZXR1cm4gTWF0aC5yb3VuZCgxZTUqdCkvMWU1fHwwfWZ1bmN0aW9uIGphKHQpe3JldHVybiBNYXRoLnJvdW5kKDFlNyp0KS8xZTd8fDB9ZnVuY3Rpb24ga2EodCxlKXt2YXIgcj1lLmNoYXJBdCgwKSxpPXBhcnNlRmxvYXQoZS5zdWJzdHIoMikpO3JldHVybiB0PXBhcnNlRmxvYXQodCksXCIrXCI9PT1yP3QraTpcIi1cIj09PXI/dC1pOlwiKlwiPT09cj90Kmk6dC9pfWZ1bmN0aW9uIGxhKHQsZSl7Zm9yKHZhciByPWUubGVuZ3RoLGk9MDt0LmluZGV4T2YoZVtpXSk8MCYmKytpPHI7KTtyZXR1cm4gaTxyfWZ1bmN0aW9uIG1hKCl7dmFyIHQsZSxyPWN0Lmxlbmd0aCxpPWN0LnNsaWNlKDApO2ZvcihkdD17fSx0PWN0Lmxlbmd0aD0wO3Q8cjt0KyspKGU9aVt0XSkmJmUuX2xhenkmJihlLnJlbmRlcihlLl9sYXp5WzBdLGUuX2xhenlbMV0sITApLl9sYXp5PTApfWZ1bmN0aW9uIG5hKHQsZSxyLGkpe2N0Lmxlbmd0aCYmbWEoKSx0LnJlbmRlcihlLHIsaXx8QiYmZTwwJiYodC5faW5pdHRlZHx8dC5fc3RhcnRBdCkpLGN0Lmxlbmd0aCYmbWEoKX1mdW5jdGlvbiBvYSh0KXt2YXIgZT1wYXJzZUZsb2F0KHQpO3JldHVybihlfHwwPT09ZSkmJih0K1wiXCIpLm1hdGNoKGF0KS5sZW5ndGg8Mj9lOnIodCk/dC50cmltKCk6dH1mdW5jdGlvbiBwYSh0KXtyZXR1cm4gdH1mdW5jdGlvbiBxYSh0LGUpe2Zvcih2YXIgciBpbiBlKXIgaW4gdHx8KHRbcl09ZVtyXSk7cmV0dXJuIHR9ZnVuY3Rpb24gdGEodCxlKXtmb3IodmFyIHIgaW4gZSlcIl9fcHJvdG9fX1wiIT09ciYmXCJjb25zdHJ1Y3RvclwiIT09ciYmXCJwcm90b3R5cGVcIiE9PXImJih0W3JdPXYoZVtyXSk/dGEodFtyXXx8KHRbcl09e30pLGVbcl0pOmVbcl0pO3JldHVybiB0fWZ1bmN0aW9uIHVhKHQsZSl7dmFyIHIsaT17fTtmb3IociBpbiB0KXIgaW4gZXx8KGlbcl09dFtyXSk7cmV0dXJuIGl9ZnVuY3Rpb24gdmEodCl7dmFyIGU9dC5wYXJlbnR8fEwscj10LmtleWZyYW1lcz9mdW5jdGlvbiBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhpKXtyZXR1cm4gZnVuY3Rpb24odCxlKXtmb3IodmFyIHIgaW4gZSlyIGluIHR8fFwiZHVyYXRpb25cIj09PXImJml8fFwiZWFzZVwiPT09cnx8KHRbcl09ZVtyXSl9fSgkKHQua2V5ZnJhbWVzKSk6cWE7aWYodyh0LmluaGVyaXQpKWZvcig7ZTspcih0LGUudmFycy5kZWZhdWx0cyksZT1lLnBhcmVudHx8ZS5fZHA7cmV0dXJuIHR9ZnVuY3Rpb24geGEodCxlLHIsaSxuKXt2b2lkIDA9PT1yJiYocj1cIl9maXJzdFwiKSx2b2lkIDA9PT1pJiYoaT1cIl9sYXN0XCIpO3ZhciBhLHM9dFtpXTtpZihuKWZvcihhPWVbbl07cyYmc1tuXT5hOylzPXMuX3ByZXY7cmV0dXJuIHM/KGUuX25leHQ9cy5fbmV4dCxzLl9uZXh0PWUpOihlLl9uZXh0PXRbcl0sdFtyXT1lKSxlLl9uZXh0P2UuX25leHQuX3ByZXY9ZTp0W2ldPWUsZS5fcHJldj1zLGUucGFyZW50PWUuX2RwPXQsZX1mdW5jdGlvbiB5YSh0LGUscixpKXt2b2lkIDA9PT1yJiYocj1cIl9maXJzdFwiKSx2b2lkIDA9PT1pJiYoaT1cIl9sYXN0XCIpO3ZhciBuPWUuX3ByZXYsYT1lLl9uZXh0O24/bi5fbmV4dD1hOnRbcl09PT1lJiYodFtyXT1hKSxhP2EuX3ByZXY9bjp0W2ldPT09ZSYmKHRbaV09biksZS5fbmV4dD1lLl9wcmV2PWUucGFyZW50PW51bGx9ZnVuY3Rpb24gemEodCxlKXshdC5wYXJlbnR8fGUmJiF0LnBhcmVudC5hdXRvUmVtb3ZlQ2hpbGRyZW58fHQucGFyZW50LnJlbW92ZSh0KSx0Ll9hY3Q9MH1mdW5jdGlvbiBBYSh0LGUpe2lmKHQmJighZXx8ZS5fZW5kPnQuX2R1cnx8ZS5fc3RhcnQ8MCkpZm9yKHZhciByPXQ7cjspci5fZGlydHk9MSxyPXIucGFyZW50O3JldHVybiB0fWZ1bmN0aW9uIENhKHQsZSxyLGkpe3JldHVybiB0Ll9zdGFydEF0JiYoQj90Ll9zdGFydEF0LnJldmVydChodCk6dC52YXJzLmltbWVkaWF0ZVJlbmRlciYmIXQudmFycy5hdXRvUmV2ZXJ0fHx0Ll9zdGFydEF0LnJlbmRlcihlLCEwLGkpKX1mdW5jdGlvbiBFYSh0KXtyZXR1cm4gdC5fcmVwZWF0P1R0KHQuX3RUaW1lLHQ9dC5kdXJhdGlvbigpK3QuX3JEZWxheSkqdDowfWZ1bmN0aW9uIEdhKHQsZSl7cmV0dXJuKHQtZS5fc3RhcnQpKmUuX3RzKygwPD1lLl90cz8wOmUuX2RpcnR5P2UudG90YWxEdXJhdGlvbigpOmUuX3REdXIpfWZ1bmN0aW9uIEhhKHQpe3JldHVybiB0Ll9lbmQ9amEodC5fc3RhcnQrKHQuX3REdXIvTWF0aC5hYnModC5fdHN8fHQuX3J0c3x8Vil8fDApKX1mdW5jdGlvbiBJYSh0LGUpe3ZhciByPXQuX2RwO3JldHVybiByJiZyLnNtb290aENoaWxkVGltaW5nJiZ0Ll90cyYmKHQuX3N0YXJ0PWphKHIuX3RpbWUtKDA8dC5fdHM/ZS90Ll90czooKHQuX2RpcnR5P3QudG90YWxEdXJhdGlvbigpOnQuX3REdXIpLWUpLy10Ll90cykpLEhhKHQpLHIuX2RpcnR5fHxBYShyLHQpKSx0fWZ1bmN0aW9uIEphKHQsZSl7dmFyIHI7aWYoKGUuX3RpbWV8fGUuX2luaXR0ZWQmJiFlLl9kdXIpJiYocj1HYSh0LnJhd1RpbWUoKSxlKSwoIWUuX2R1cnx8a3QoMCxlLnRvdGFsRHVyYXRpb24oKSxyKS1lLl90VGltZT5WKSYmZS5yZW5kZXIociwhMCkpLEFhKHQsZSkuX2RwJiZ0Ll9pbml0dGVkJiZ0Ll90aW1lPj10Ll9kdXImJnQuX3RzKXtpZih0Ll9kdXI8dC5kdXJhdGlvbigpKWZvcihyPXQ7ci5fZHA7KTA8PXIucmF3VGltZSgpJiZyLnRvdGFsVGltZShyLl90VGltZSkscj1yLl9kcDt0Ll96VGltZT0tVn19ZnVuY3Rpb24gS2EoZSxyLGksbil7cmV0dXJuIHIucGFyZW50JiZ6YShyKSxyLl9zdGFydD1qYSgodChpKT9pOml8fGUhPT1MP3h0KGUsaSxyKTplLl90aW1lKStyLl9kZWxheSksci5fZW5kPWphKHIuX3N0YXJ0KyhyLnRvdGFsRHVyYXRpb24oKS9NYXRoLmFicyhyLnRpbWVTY2FsZSgpKXx8MCkpLHhhKGUscixcIl9maXJzdFwiLFwiX2xhc3RcIixlLl9zb3J0P1wiX3N0YXJ0XCI6MCksYnQocil8fChlLl9yZWNlbnQ9ciksbnx8SmEoZSxyKSxlLl90czwwJiZJYShlLGUuX3RUaW1lKSxlfWZ1bmN0aW9uIExhKHQsZSl7cmV0dXJuKG90LlNjcm9sbFRyaWdnZXJ8fFEoXCJzY3JvbGxUcmlnZ2VyXCIsZSkpJiZvdC5TY3JvbGxUcmlnZ2VyLmNyZWF0ZShlLHQpfWZ1bmN0aW9uIE1hKHQsZSxyLGksbil7cmV0dXJuIEh0KHQsZSxuKSx0Ll9pbml0dGVkPyFyJiZ0Ll9wdCYmIUImJih0Ll9kdXImJiExIT09dC52YXJzLmxhenl8fCF0Ll9kdXImJnQudmFycy5sYXp5KSYmZiE9PUV0LmZyYW1lPyhjdC5wdXNoKHQpLHQuX2xhenk9W24saV0sMSk6dm9pZCAwOjF9ZnVuY3Rpb24gUmEodCxlLHIsaSl7dmFyIG49dC5fcmVwZWF0LGE9amEoZSl8fDAscz10Ll90VGltZS90Ll90RHVyO3JldHVybiBzJiYhaSYmKHQuX3RpbWUqPWEvdC5fZHVyKSx0Ll9kdXI9YSx0Ll90RHVyPW4/bjwwPzFlMTA6amEoYSoobisxKSt0Ll9yRGVsYXkqbik6YSwwPHMmJiFpJiZJYSh0LHQuX3RUaW1lPXQuX3REdXIqcyksdC5wYXJlbnQmJkhhKHQpLHJ8fEFhKHQucGFyZW50LHQpLHR9ZnVuY3Rpb24gU2EodCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBVdD9BYSh0KTpSYSh0LHQuX2R1cil9ZnVuY3Rpb24gVmEoZSxyLGkpe3ZhciBuLGEscz10KHJbMV0pLG89KHM/MjoxKSsoZTwyPzA6MSksdT1yW29dO2lmKHMmJih1LmR1cmF0aW9uPXJbMV0pLHUucGFyZW50PWksZSl7Zm9yKG49dSxhPWk7YSYmIShcImltbWVkaWF0ZVJlbmRlclwiaW4gbik7KW49YS52YXJzLmRlZmF1bHRzfHx7fSxhPXcoYS52YXJzLmluaGVyaXQpJiZhLnBhcmVudDt1LmltbWVkaWF0ZVJlbmRlcj13KG4uaW1tZWRpYXRlUmVuZGVyKSxlPDI/dS5ydW5CYWNrd2FyZHM9MTp1LnN0YXJ0QXQ9cltvLTFdfXJldHVybiBuZXcgR3QoclswXSx1LHJbMStvXSl9ZnVuY3Rpb24gV2EodCxlKXtyZXR1cm4gdHx8MD09PXQ/ZSh0KTplfWZ1bmN0aW9uIFlhKHQsZSl7cmV0dXJuIHIodCkmJihlPXN0LmV4ZWModCkpP2VbMV06XCJcIn1mdW5jdGlvbiBfYSh0LGUpe3JldHVybiB0JiZ2KHQpJiZcImxlbmd0aFwiaW4gdCYmKCFlJiYhdC5sZW5ndGh8fHQubGVuZ3RoLTEgaW4gdCYmdih0WzBdKSkmJiF0Lm5vZGVUeXBlJiZ0IT09aH1mdW5jdGlvbiBjYihyKXtyZXR1cm4gcj1PdChyKVswXXx8UihcIkludmFsaWQgc2NvcGVcIil8fHt9LGZ1bmN0aW9uKHQpe3ZhciBlPXIuY3VycmVudHx8ci5uYXRpdmVFbGVtZW50fHxyO3JldHVybiBPdCh0LGUucXVlcnlTZWxlY3RvckFsbD9lOmU9PT1yP1IoXCJJbnZhbGlkIHNjb3BlXCIpfHxhLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik6cil9fWZ1bmN0aW9uIGRiKHQpe3JldHVybiB0LnNvcnQoZnVuY3Rpb24oKXtyZXR1cm4uNS1NYXRoLnJhbmRvbSgpfSl9ZnVuY3Rpb24gZWIodCl7aWYocyh0KSlyZXR1cm4gdDt2YXIgcD12KHQpP3Q6e2VhY2g6dH0sXz1ZdChwLmVhc2UpLG09cC5mcm9tfHwwLGc9cGFyc2VGbG9hdChwLmJhc2UpfHwwLHk9e30sZT0wPG0mJm08MSxUPWlzTmFOKG0pfHxlLGI9cC5heGlzLHc9bSx4PW07cmV0dXJuIHIobSk/dz14PXtjZW50ZXI6LjUsZWRnZXM6LjUsZW5kOjF9W21dfHwwOiFlJiZUJiYodz1tWzBdLHg9bVsxXSksZnVuY3Rpb24odCxlLHIpe3ZhciBpLG4sYSxzLG8sdSxoLGwsZixjPShyfHxwKS5sZW5ndGgsZD15W2NdO2lmKCFkKXtpZighKGY9XCJhdXRvXCI9PT1wLmdyaWQ/MDoocC5ncmlkfHxbMSxVXSlbMV0pKXtmb3IoaD0tVTtoPChoPXJbZisrXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KSYmZjxjOyk7Zi0tfWZvcihkPXlbY109W10saT1UP01hdGgubWluKGYsYykqdy0uNTptJWYsbj1mPT09VT8wOlQ/Yyp4L2YtLjU6bS9mfDAsbD1VLHU9aD0wO3U8Yzt1KyspYT11JWYtaSxzPW4tKHUvZnwwKSxkW3VdPW89Yj9NYXRoLmFicyhcInlcIj09PWI/czphKTpLKGEqYStzKnMpLGg8byYmKGg9byksbzxsJiYobD1vKTtcInJhbmRvbVwiPT09bSYmZGIoZCksZC5tYXg9aC1sLGQubWluPWwsZC52PWM9KHBhcnNlRmxvYXQocC5hbW91bnQpfHxwYXJzZUZsb2F0KHAuZWFjaCkqKGM8Zj9jLTE6Yj9cInlcIj09PWI/Yy9mOmY6TWF0aC5tYXgoZixjL2YpKXx8MCkqKFwiZWRnZXNcIj09PW0/LTE6MSksZC5iPWM8MD9nLWM6ZyxkLnU9WWEocC5hbW91bnR8fHAuZWFjaCl8fDAsXz1fJiZjPDA/THQoXyk6X31yZXR1cm4gYz0oZFt0XS1kLm1pbikvZC5tYXh8fDAsamEoZC5iKyhfP18oYyk6YykqZC52KStkLnV9fWZ1bmN0aW9uIGZiKGkpe3ZhciBuPU1hdGgucG93KDEwLCgoaStcIlwiKS5zcGxpdChcIi5cIilbMV18fFwiXCIpLmxlbmd0aCk7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciByPWphKE1hdGgucm91bmQocGFyc2VGbG9hdChlKS9pKSppKm4pO3JldHVybihyLXIlMSkvbisodChlKT8wOllhKGUpKX19ZnVuY3Rpb24gZ2IoaCxlKXt2YXIgbCxmLHI9JChoKTtyZXR1cm4hciYmdihoKSYmKGw9cj1oLnJhZGl1c3x8VSxoLnZhbHVlcz8oaD1PdChoLnZhbHVlcyksKGY9IXQoaFswXSkpJiYobCo9bCkpOmg9ZmIoaC5pbmNyZW1lbnQpKSxXYShlLHI/cyhoKT9mdW5jdGlvbih0KXtyZXR1cm4gZj1oKHQpLE1hdGguYWJzKGYtdCk8PWw/Zjp0fTpmdW5jdGlvbihlKXtmb3IodmFyIHIsaSxuPXBhcnNlRmxvYXQoZj9lLng6ZSksYT1wYXJzZUZsb2F0KGY/ZS55OjApLHM9VSxvPTAsdT1oLmxlbmd0aDt1LS07KShyPWY/KHI9aFt1XS54LW4pKnIrKGk9aFt1XS55LWEpKmk6TWF0aC5hYnMoaFt1XS1uKSk8cyYmKHM9cixvPXUpO3JldHVybiBvPSFsfHxzPD1sP2hbb106ZSxmfHxvPT09ZXx8dChlKT9vOm8rWWEoZSl9OmZiKGgpKX1mdW5jdGlvbiBoYih0LGUscixpKXtyZXR1cm4gV2EoJCh0KT8hZTohMD09PXI/ISEocj0wKTohaSxmdW5jdGlvbigpe3JldHVybiAkKHQpP3Rbfn4oTWF0aC5yYW5kb20oKSp0Lmxlbmd0aCldOihyPXJ8fDFlLTUpJiYoaT1yPDE/TWF0aC5wb3coMTAsKHIrXCJcIikubGVuZ3RoLTIpOjEpJiZNYXRoLmZsb29yKE1hdGgucm91bmQoKHQtci8yK01hdGgucmFuZG9tKCkqKGUtdCsuOTkqcikpL3IpKnIqaSkvaX0pfWZ1bmN0aW9uIGxiKGUscix0KXtyZXR1cm4gV2EodCxmdW5jdGlvbih0KXtyZXR1cm4gZVt+fnIodCldfSl9ZnVuY3Rpb24gb2IodCl7Zm9yKHZhciBlLHIsaSxuLGE9MCxzPVwiXCI7fihlPXQuaW5kZXhPZihcInJhbmRvbShcIixhKSk7KWk9dC5pbmRleE9mKFwiKVwiLGUpLG49XCJbXCI9PT10LmNoYXJBdChlKzcpLHI9dC5zdWJzdHIoZSs3LGktZS03KS5tYXRjaChuP2F0OnR0KSxzKz10LnN1YnN0cihhLGUtYSkraGIobj9yOityWzBdLG4/MDorclsxXSwrclsyXXx8MWUtNSksYT1pKzE7cmV0dXJuIHMrdC5zdWJzdHIoYSx0Lmxlbmd0aC1hKX1mdW5jdGlvbiByYih0LGUscil7dmFyIGksbixhLHM9dC5sYWJlbHMsbz1VO2ZvcihpIGluIHMpKG49c1tpXS1lKTwwPT0hIXImJm4mJm8+KG49TWF0aC5hYnMobikpJiYoYT1pLG89bik7cmV0dXJuIGF9ZnVuY3Rpb24gdGIodCl7cmV0dXJuIHphKHQpLHQuc2Nyb2xsVHJpZ2dlciYmdC5zY3JvbGxUcmlnZ2VyLmtpbGwoISFCKSx0LnByb2dyZXNzKCk8MSYmQ3QodCxcIm9uSW50ZXJydXB0XCIpLHR9ZnVuY3Rpb24geWIodCxlLHIpe3JldHVybig2Kih0Kz10PDA/MToxPHQ/LTE6MCk8MT9lKyhyLWUpKnQqNjp0PC41P3I6Myp0PDI/ZSsoci1lKSooMi8zLXQpKjY6ZSkqQXQrLjV8MH1mdW5jdGlvbiB6YihlLHIsaSl7dmFyIG4sYSxzLG8sdSxoLGwsZixjLGQscD1lP3QoZSk/W2U+PjE2LGU+PjgmQXQsZSZBdF06MDpTdC5ibGFjaztpZighcCl7aWYoXCIsXCI9PT1lLnN1YnN0cigtMSkmJihlPWUuc3Vic3RyKDAsZS5sZW5ndGgtMSkpLFN0W2VdKXA9U3RbZV07ZWxzZSBpZihcIiNcIj09PWUuY2hhckF0KDApKXtpZihlLmxlbmd0aDw2JiYoZT1cIiNcIisobj1lLmNoYXJBdCgxKSkrbisoYT1lLmNoYXJBdCgyKSkrYSsocz1lLmNoYXJBdCgzKSkrcysoNT09PWUubGVuZ3RoP2UuY2hhckF0KDQpK2UuY2hhckF0KDQpOlwiXCIpKSw5PT09ZS5sZW5ndGgpcmV0dXJuWyhwPXBhcnNlSW50KGUuc3Vic3RyKDEsNiksMTYpKT4+MTYscD4+OCZBdCxwJkF0LHBhcnNlSW50KGUuc3Vic3RyKDcpLDE2KS8yNTVdO3A9WyhlPXBhcnNlSW50KGUuc3Vic3RyKDEpLDE2KSk+PjE2LGU+PjgmQXQsZSZBdF19ZWxzZSBpZihcImhzbFwiPT09ZS5zdWJzdHIoMCwzKSlpZihwPWQ9ZS5tYXRjaCh0dCkscil7aWYofmUuaW5kZXhPZihcIj1cIikpcmV0dXJuIHA9ZS5tYXRjaChldCksaSYmcC5sZW5ndGg8NCYmKHBbM109MSkscH1lbHNlIG89K3BbMF0lMzYwLzM2MCx1PXBbMV0vMTAwLG49MiooaD1wWzJdLzEwMCktKGE9aDw9LjU/aCoodSsxKTpoK3UtaCp1KSwzPHAubGVuZ3RoJiYocFszXSo9MSkscFswXT15YihvKzEvMyxuLGEpLHBbMV09eWIobyxuLGEpLHBbMl09eWIoby0xLzMsbixhKTtlbHNlIHA9ZS5tYXRjaCh0dCl8fFN0LnRyYW5zcGFyZW50O3A9cC5tYXAoTnVtYmVyKX1yZXR1cm4gciYmIWQmJihuPXBbMF0vQXQsYT1wWzFdL0F0LHM9cFsyXS9BdCxoPSgobD1NYXRoLm1heChuLGEscykpKyhmPU1hdGgubWluKG4sYSxzKSkpLzIsbD09PWY/bz11PTA6KGM9bC1mLHU9LjU8aD9jLygyLWwtZik6Yy8obCtmKSxvPWw9PT1uPyhhLXMpL2MrKGE8cz82OjApOmw9PT1hPyhzLW4pL2MrMjoobi1hKS9jKzQsbyo9NjApLHBbMF09fn4obysuNSkscFsxXT1+figxMDAqdSsuNSkscFsyXT1+figxMDAqaCsuNSkpLGkmJnAubGVuZ3RoPDQmJihwWzNdPTEpLHB9ZnVuY3Rpb24gQWIodCl7dmFyIHI9W10saT1bXSxuPS0xO3JldHVybiB0LnNwbGl0KFJ0KS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlPXQubWF0Y2gocnQpfHxbXTtyLnB1c2guYXBwbHkocixlKSxpLnB1c2gobis9ZS5sZW5ndGgrMSl9KSxyLmM9aSxyfWZ1bmN0aW9uIEJiKHQsZSxyKXt2YXIgaSxuLGEscyxvPVwiXCIsdT0odCtvKS5tYXRjaChSdCksaD1lP1wiaHNsYShcIjpcInJnYmEoXCIsbD0wO2lmKCF1KXJldHVybiB0O2lmKHU9dS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuKHQ9emIodCxlLDEpKSYmaCsoZT90WzBdK1wiLFwiK3RbMV0rXCIlLFwiK3RbMl0rXCIlLFwiK3RbM106dC5qb2luKFwiLFwiKSkrXCIpXCJ9KSxyJiYoYT1BYih0KSwoaT1yLmMpLmpvaW4obykhPT1hLmMuam9pbihvKSkpZm9yKHM9KG49dC5yZXBsYWNlKFJ0LFwiMVwiKS5zcGxpdChydCkpLmxlbmd0aC0xO2w8cztsKyspbys9bltsXSsofmkuaW5kZXhPZihsKT91LnNoaWZ0KCl8fGgrXCIwLDAsMCwwKVwiOihhLmxlbmd0aD9hOnUubGVuZ3RoP3U6cikuc2hpZnQoKSk7aWYoIW4pZm9yKHM9KG49dC5zcGxpdChSdCkpLmxlbmd0aC0xO2w8cztsKyspbys9bltsXSt1W2xdO3JldHVybiBvK25bc119ZnVuY3Rpb24gRWIodCl7dmFyIGUscj10LmpvaW4oXCIgXCIpO2lmKFJ0Lmxhc3RJbmRleD0wLFJ0LnRlc3QocikpcmV0dXJuIGU9RHQudGVzdChyKSx0WzFdPUJiKHRbMV0sZSksdFswXT1CYih0WzBdLGUsQWIodFsxXSkpLCEwfWZ1bmN0aW9uIE5iKHQpe3ZhciBlPSh0K1wiXCIpLnNwbGl0KFwiKFwiKSxyPUZ0W2VbMF1dO3JldHVybiByJiYxPGUubGVuZ3RoJiZyLmNvbmZpZz9yLmNvbmZpZy5hcHBseShudWxsLH50LmluZGV4T2YoXCJ7XCIpP1tmdW5jdGlvbiBfcGFyc2VPYmplY3RJblN0cmluZyh0KXtmb3IodmFyIGUscixpLG49e30sYT10LnN1YnN0cigxLHQubGVuZ3RoLTMpLnNwbGl0KFwiOlwiKSxzPWFbMF0sbz0xLHU9YS5sZW5ndGg7bzx1O28rKylyPWFbb10sZT1vIT09dS0xP3IubGFzdEluZGV4T2YoXCIsXCIpOnIubGVuZ3RoLGk9ci5zdWJzdHIoMCxlKSxuW3NdPWlzTmFOKGkpP2kucmVwbGFjZShCdCxcIlwiKS50cmltKCk6K2kscz1yLnN1YnN0cihlKzEpLnRyaW0oKTtyZXR1cm4gbn0oZVsxXSldOmZ1bmN0aW9uIF92YWx1ZUluUGFyZW50aGVzZXModCl7dmFyIGU9dC5pbmRleE9mKFwiKFwiKSsxLHI9dC5pbmRleE9mKFwiKVwiKSxpPXQuaW5kZXhPZihcIihcIixlKTtyZXR1cm4gdC5zdWJzdHJpbmcoZSx+aSYmaTxyP3QuaW5kZXhPZihcIilcIixyKzEpOnIpfSh0KS5zcGxpdChcIixcIikubWFwKG9hKSk6RnQuX0NFJiZJdC50ZXN0KHQpP0Z0Ll9DRShcIlwiLHQpOnJ9ZnVuY3Rpb24gUGIodCxlKXtmb3IodmFyIHIsaT10Ll9maXJzdDtpOylpIGluc3RhbmNlb2YgVXQ/UGIoaSxlKTohaS52YXJzLnlveW9FYXNlfHxpLl95b3lvJiZpLl9yZXBlYXR8fGkuX3lveW89PT1lfHwoaS50aW1lbGluZT9QYihpLnRpbWVsaW5lLGUpOihyPWkuX2Vhc2UsaS5fZWFzZT1pLl95RWFzZSxpLl95RWFzZT1yLGkuX3lveW89ZSkpLGk9aS5fbmV4dH1mdW5jdGlvbiBSYih0LGUscixpKXt2b2lkIDA9PT1yJiYocj1mdW5jdGlvbiBlYXNlT3V0KHQpe3JldHVybiAxLWUoMS10KX0pLHZvaWQgMD09PWkmJihpPWZ1bmN0aW9uIGVhc2VJbk91dCh0KXtyZXR1cm4gdDwuNT9lKDIqdCkvMjoxLWUoMiooMS10KSkvMn0pO3ZhciBuLGE9e2Vhc2VJbjplLGVhc2VPdXQ6cixlYXNlSW5PdXQ6aX07cmV0dXJuIGhhKHQsZnVuY3Rpb24odCl7Zm9yKHZhciBlIGluIEZ0W3RdPW90W3RdPWEsRnRbbj10LnRvTG93ZXJDYXNlKCldPXIsYSlGdFtuKyhcImVhc2VJblwiPT09ZT9cIi5pblwiOlwiZWFzZU91dFwiPT09ZT9cIi5vdXRcIjpcIi5pbk91dFwiKV09RnRbdCtcIi5cIitlXT1hW2VdfSksYX1mdW5jdGlvbiBTYihlKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIHQ8LjU/KDEtZSgxLTIqdCkpLzI6LjUrZSgyKih0LS41KSkvMn19ZnVuY3Rpb24gVGIocix0LGUpe2Z1bmN0aW9uIEhtKHQpe3JldHVybiAxPT09dD8xOmkqTWF0aC5wb3coMiwtMTAqdCkqRygodC1hKSpuKSsxfXZhciBpPTE8PXQ/dDoxLG49KGV8fChyPy4zOi40NSkpLyh0PDE/dDoxKSxhPW4vVyooTWF0aC5hc2luKDEvaSl8fDApLHM9XCJvdXRcIj09PXI/SG06XCJpblwiPT09cj9mdW5jdGlvbih0KXtyZXR1cm4gMS1IbSgxLXQpfTpTYihIbSk7cmV0dXJuIG49Vy9uLHMuY29uZmlnPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIFRiKHIsdCxlKX0sc31mdW5jdGlvbiBVYihlLHIpe2Z1bmN0aW9uIFBtKHQpe3JldHVybiB0Py0tdCp0KigocisxKSp0K3IpKzE6MH12b2lkIDA9PT1yJiYocj0xLjcwMTU4KTt2YXIgdD1cIm91dFwiPT09ZT9QbTpcImluXCI9PT1lP2Z1bmN0aW9uKHQpe3JldHVybiAxLVBtKDEtdCl9OlNiKFBtKTtyZXR1cm4gdC5jb25maWc9ZnVuY3Rpb24odCl7cmV0dXJuIFViKGUsdCl9LHR9dmFyIEksQixsLEwsaCxuLGEsaSxvLGYsYyxkLHAsXyxtLGcsYixrLE0sTyxDLEEsRCxFLHosRixZLE4saj17YXV0b1NsZWVwOjEyMCxmb3JjZTNEOlwiYXV0b1wiLG51bGxUYXJnZXRXYXJuOjEsdW5pdHM6e2xpbmVIZWlnaHQ6XCJcIn19LHE9e2R1cmF0aW9uOi41LG92ZXJ3cml0ZTohMSxkZWxheTowfSxVPTFlOCxWPTEvVSxXPTIqTWF0aC5QSSxYPVcvNCxIPTAsSz1NYXRoLnNxcnQsWj1NYXRoLmNvcyxHPU1hdGguc2luLEo9XCJmdW5jdGlvblwiPT10eXBlb2YgQXJyYXlCdWZmZXImJkFycmF5QnVmZmVyLmlzVmlld3x8ZnVuY3Rpb24oKXt9LCQ9QXJyYXkuaXNBcnJheSx0dD0vKD86LT9cXC4/XFxkfFxcLikrL2dpLGV0PS9bLSs9Ll0qXFxkK1suZVxcLStdKlxcZCpbZVxcLStdKlxcZCovZyxydD0vWy0rPS5dKlxcZCtbLmUtXSpcXGQqW2EteiVdKi9nLGl0PS9bLSs9Ll0qXFxkK1xcLj9cXGQqKD86ZS18ZVxcKyk/XFxkKi9naSxudD0vWystXT0tP1suXFxkXSsvLGF0PS9bXiwnXCJcXFtcXF1cXHNdKy9naSxzdD0vXlsrXFwtPWVcXHNcXGRdKlxcZCtbLlxcZF0qKFthLXpdKnwlKVxccyokL2ksb3Q9e30sdXQ9e3N1cHByZXNzRXZlbnRzOiEwLGlzU3RhcnQ6ITAsa2lsbDohMX0saHQ9e3N1cHByZXNzRXZlbnRzOiEwLGtpbGw6ITF9LGx0PXtzdXBwcmVzc0V2ZW50czohMH0sZnQ9e30sY3Q9W10sZHQ9e30scHQ9e30sX3Q9e30sbXQ9MzAsZ3Q9W10sdnQ9XCJcIix5dD1mdW5jdGlvbiBfbWVyZ2UodCxlKXtmb3IodmFyIHIgaW4gZSl0W3JdPWVbcl07cmV0dXJuIHR9LFR0PWZ1bmN0aW9uIF9hbmltYXRpb25DeWNsZSh0LGUpe3ZhciByPU1hdGguZmxvb3IodC89ZSk7cmV0dXJuIHQmJnI9PT10P3ItMTpyfSxidD1mdW5jdGlvbiBfaXNGcm9tT3JGcm9tU3RhcnQodCl7dmFyIGU9dC5kYXRhO3JldHVyblwiaXNGcm9tU3RhcnRcIj09PWV8fFwiaXNTdGFydFwiPT09ZX0sd3Q9e19zdGFydDowLGVuZFRpbWU6VCx0b3RhbER1cmF0aW9uOlR9LHh0PWZ1bmN0aW9uIF9wYXJzZVBvc2l0aW9uKHQsZSxpKXt2YXIgbixhLHMsbz10LmxhYmVscyx1PXQuX3JlY2VudHx8d3QsaD10LmR1cmF0aW9uKCk+PVU/dS5lbmRUaW1lKCExKTp0Ll9kdXI7cmV0dXJuIHIoZSkmJihpc05hTihlKXx8ZSBpbiBvKT8oYT1lLmNoYXJBdCgwKSxzPVwiJVwiPT09ZS5zdWJzdHIoLTEpLG49ZS5pbmRleE9mKFwiPVwiKSxcIjxcIj09PWF8fFwiPlwiPT09YT8oMDw9biYmKGU9ZS5yZXBsYWNlKC89LyxcIlwiKSksKFwiPFwiPT09YT91Ll9zdGFydDp1LmVuZFRpbWUoMDw9dS5fcmVwZWF0KSkrKHBhcnNlRmxvYXQoZS5zdWJzdHIoMSkpfHwwKSoocz8objwwP3U6aSkudG90YWxEdXJhdGlvbigpLzEwMDoxKSk6bjwwPyhlIGluIG98fChvW2VdPWgpLG9bZV0pOihhPXBhcnNlRmxvYXQoZS5jaGFyQXQobi0xKStlLnN1YnN0cihuKzEpKSxzJiZpJiYoYT1hLzEwMCooJChpKT9pWzBdOmkpLnRvdGFsRHVyYXRpb24oKSksMTxuP19wYXJzZVBvc2l0aW9uKHQsZS5zdWJzdHIoMCxuLTEpLGkpK2E6aCthKSk6bnVsbD09ZT9oOitlfSxrdD1mdW5jdGlvbiBfY2xhbXAodCxlLHIpe3JldHVybiByPHQ/dDplPHI/ZTpyfSxNdD1bXS5zbGljZSxPdD1mdW5jdGlvbiB0b0FycmF5KHQsZSxpKXtyZXR1cm4gbCYmIWUmJmwuc2VsZWN0b3I/bC5zZWxlY3Rvcih0KTohcih0KXx8aXx8IW4mJnp0KCk/JCh0KT9mdW5jdGlvbiBfZmxhdHRlbih0LGUsaSl7cmV0dXJuIHZvaWQgMD09PWkmJihpPVtdKSx0LmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIHIodCkmJiFlfHxfYSh0LDEpP2kucHVzaC5hcHBseShpLE90KHQpKTppLnB1c2godCl9KXx8aX0odCxpKTpfYSh0KT9NdC5jYWxsKHQsMCk6dD9bdF06W106TXQuY2FsbCgoZXx8YSkucXVlcnlTZWxlY3RvckFsbCh0KSwwKX0sUHQ9ZnVuY3Rpb24gbWFwUmFuZ2UoZSx0LHIsaSxuKXt2YXIgYT10LWUscz1pLXI7cmV0dXJuIFdhKG4sZnVuY3Rpb24odCl7cmV0dXJuIHIrKCh0LWUpL2Eqc3x8MCl9KX0sQ3Q9ZnVuY3Rpb24gX2NhbGxiYWNrKHQsZSxyKXt2YXIgaSxuLGEscz10LnZhcnMsbz1zW2VdLHU9bCxoPXQuX2N0eDtpZihvKXJldHVybiBpPXNbZStcIlBhcmFtc1wiXSxuPXMuY2FsbGJhY2tTY29wZXx8dCxyJiZjdC5sZW5ndGgmJm1hKCksaCYmKGw9aCksYT1pP28uYXBwbHkobixpKTpvLmNhbGwobiksbD11LGF9LEF0PTI1NSxTdD17YXF1YTpbMCxBdCxBdF0sbGltZTpbMCxBdCwwXSxzaWx2ZXI6WzE5MiwxOTIsMTkyXSxibGFjazpbMCwwLDBdLG1hcm9vbjpbMTI4LDAsMF0sdGVhbDpbMCwxMjgsMTI4XSxibHVlOlswLDAsQXRdLG5hdnk6WzAsMCwxMjhdLHdoaXRlOltBdCxBdCxBdF0sb2xpdmU6WzEyOCwxMjgsMF0seWVsbG93OltBdCxBdCwwXSxvcmFuZ2U6W0F0LDE2NSwwXSxncmF5OlsxMjgsMTI4LDEyOF0scHVycGxlOlsxMjgsMCwxMjhdLGdyZWVuOlswLDEyOCwwXSxyZWQ6W0F0LDAsMF0scGluazpbQXQsMTkyLDIwM10sY3lhbjpbMCxBdCxBdF0sdHJhbnNwYXJlbnQ6W0F0LEF0LEF0LDBdfSxSdD1mdW5jdGlvbigpe3ZhciB0LGU9XCIoPzpcXFxcYig/Oig/OnJnYnxyZ2JhfGhzbHxoc2xhKVxcXFwoLis/XFxcXCkpfFxcXFxCIyg/OlswLTlhLWZdezMsNH0pezEsMn1cXFxcYlwiO2Zvcih0IGluIFN0KWUrPVwifFwiK3QrXCJcXFxcYlwiO3JldHVybiBuZXcgUmVnRXhwKGUrXCIpXCIsXCJnaVwiKX0oKSxEdD0vaHNsW2FdP1xcKC8sRXQ9KE09RGF0ZS5ub3csTz01MDAsQz0zMyxBPU0oKSxEPUEsej1FPTFlMy8yNDAsZz17dGltZTowLGZyYW1lOjAsdGljazpmdW5jdGlvbiB0aWNrKCl7d2woITApfSxkZWx0YVJhdGlvOmZ1bmN0aW9uIGRlbHRhUmF0aW8odCl7cmV0dXJuIGIvKDFlMy8odHx8NjApKX0sd2FrZTpmdW5jdGlvbiB3YWtlKCl7byYmKCFuJiZ4KCkmJihoPW49d2luZG93LGE9aC5kb2N1bWVudHx8e30sb3QuZ3NhcD1DZSwoaC5nc2FwVmVyc2lvbnN8fChoLmdzYXBWZXJzaW9ucz1bXSkpLnB1c2goQ2UudmVyc2lvbiksUChpfHxoLkdyZWVuU29ja0dsb2JhbHN8fCFoLmdzYXAmJmh8fHt9KSxtPWgucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSxwJiZnLnNsZWVwKCksXz1tfHxmdW5jdGlvbih0KXtyZXR1cm4gc2V0VGltZW91dCh0LHotMWUzKmcudGltZSsxfDApfSxkPTEsd2woMikpfSxzbGVlcDpmdW5jdGlvbiBzbGVlcCgpeyhtP2guY2FuY2VsQW5pbWF0aW9uRnJhbWU6Y2xlYXJUaW1lb3V0KShwKSxkPTAsXz1UfSxsYWdTbW9vdGhpbmc6ZnVuY3Rpb24gbGFnU21vb3RoaW5nKHQsZSl7Tz10fHwxZTgsQz1NYXRoLm1pbihlLE8sMCl9LGZwczpmdW5jdGlvbiBmcHModCl7RT0xZTMvKHR8fDI0MCksej0xZTMqZy50aW1lK0V9LGFkZDpmdW5jdGlvbiBhZGQobix0LGUpe3ZhciBhPXQ/ZnVuY3Rpb24odCxlLHIsaSl7bih0LGUscixpKSxnLnJlbW92ZShhKX06bjtyZXR1cm4gZy5yZW1vdmUobiksRltlP1widW5zaGlmdFwiOlwicHVzaFwiXShhKSx6dCgpLGF9LHJlbW92ZTpmdW5jdGlvbiByZW1vdmUodCxlKXt+KGU9Ri5pbmRleE9mKHQpKSYmRi5zcGxpY2UoZSwxKSYmZTw9ayYmay0tfSxfbGlzdGVuZXJzOkY9W119KSx6dD1mdW5jdGlvbiBfd2FrZSgpe3JldHVybiFkJiZFdC53YWtlKCl9LEZ0PXt9LEl0PS9eW1xcZC5cXC1NXVtcXGQuXFwtLFxcc10vLEJ0PS9bXCInXS9nLEx0PWZ1bmN0aW9uIF9pbnZlcnRFYXNlKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gMS1lKDEtdCl9fSxZdD1mdW5jdGlvbiBfcGFyc2VFYXNlKHQsZSl7cmV0dXJuIHQmJihzKHQpP3Q6RnRbdF18fE5iKHQpKXx8ZX07ZnVuY3Rpb24gd2wodCl7dmFyIGUscixpLG4sYT1NKCktRCxzPSEwPT09dDtpZihPPGEmJihBKz1hLUMpLCgwPChlPShpPShEKz1hKS1BKS16KXx8cykmJihuPSsrZy5mcmFtZSxiPWktMWUzKmcudGltZSxnLnRpbWU9aS89MWUzLHorPWUrKEU8PWU/NDpFLWUpLHI9MSksc3x8KHA9Xyh3bCkpLHIpZm9yKGs9MDtrPEYubGVuZ3RoO2srKylGW2tdKGksYixuLHQpfWZ1bmN0aW9uIGVuKHQpe3JldHVybiB0PE4/WSp0KnQ6dDwuNzI3MjcyNzI3MjcyNzI3Mz9ZKk1hdGgucG93KHQtMS41LzIuNzUsMikrLjc1OnQ8LjkwOTA5MDkwOTA5MDkwOTI/WSoodC09Mi4yNS8yLjc1KSp0Ky45Mzc1OlkqTWF0aC5wb3codC0yLjYyNS8yLjc1LDIpKy45ODQzNzV9aGEoXCJMaW5lYXIsUXVhZCxDdWJpYyxRdWFydCxRdWludCxTdHJvbmdcIixmdW5jdGlvbih0LGUpe3ZhciByPWU8NT9lKzE6ZTtSYih0K1wiLFBvd2VyXCIrKHItMSksZT9mdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5wb3codCxyKX06ZnVuY3Rpb24odCl7cmV0dXJuIHR9LGZ1bmN0aW9uKHQpe3JldHVybiAxLU1hdGgucG93KDEtdCxyKX0sZnVuY3Rpb24odCl7cmV0dXJuIHQ8LjU/TWF0aC5wb3coMip0LHIpLzI6MS1NYXRoLnBvdygyKigxLXQpLHIpLzJ9KX0pLEZ0LkxpbmVhci5lYXNlTm9uZT1GdC5ub25lPUZ0LkxpbmVhci5lYXNlSW4sUmIoXCJFbGFzdGljXCIsVGIoXCJpblwiKSxUYihcIm91dFwiKSxUYigpKSxZPTcuNTYyNSxOPTEvMi43NSxSYihcIkJvdW5jZVwiLGZ1bmN0aW9uKHQpe3JldHVybiAxLWVuKDEtdCl9LGVuKSxSYihcIkV4cG9cIixmdW5jdGlvbih0KXtyZXR1cm4gdD9NYXRoLnBvdygyLDEwKih0LTEpKTowfSksUmIoXCJDaXJjXCIsZnVuY3Rpb24odCl7cmV0dXJuLShLKDEtdCp0KS0xKX0pLFJiKFwiU2luZVwiLGZ1bmN0aW9uKHQpe3JldHVybiAxPT09dD8xOjEtWih0KlgpfSksUmIoXCJCYWNrXCIsVWIoXCJpblwiKSxVYihcIm91dFwiKSxVYigpKSxGdC5TdGVwcGVkRWFzZT1GdC5zdGVwcz1vdC5TdGVwcGVkRWFzZT17Y29uZmlnOmZ1bmN0aW9uIGNvbmZpZyh0LGUpe3ZvaWQgMD09PXQmJih0PTEpO3ZhciByPTEvdCxpPXQrKGU/MDoxKSxuPWU/MTowO3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4oKGkqa3QoMCwuOTk5OTk5OTksdCl8MCkrbikqcn19fSxxLmVhc2U9RnRbXCJxdWFkLm91dFwiXSxoYShcIm9uQ29tcGxldGUsb25VcGRhdGUsb25TdGFydCxvblJlcGVhdCxvblJldmVyc2VDb21wbGV0ZSxvbkludGVycnVwdFwiLGZ1bmN0aW9uKHQpe3JldHVybiB2dCs9dCtcIixcIit0K1wiUGFyYW1zLFwifSk7dmFyIE50LGp0PWZ1bmN0aW9uIEdTQ2FjaGUodCxlKXt0aGlzLmlkPUgrKywodC5fZ3NhcD10aGlzKS50YXJnZXQ9dCx0aGlzLmhhcm5lc3M9ZSx0aGlzLmdldD1lP2UuZ2V0OmdhLHRoaXMuc2V0PWU/ZS5nZXRTZXR0ZXI6cmV9LHF0PSgoTnQ9QW5pbWF0aW9uLnByb3RvdHlwZSkuZGVsYXk9ZnVuY3Rpb24gZGVsYXkodCl7cmV0dXJuIHR8fDA9PT10Pyh0aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcmJnRoaXMuc3RhcnRUaW1lKHRoaXMuX3N0YXJ0K3QtdGhpcy5fZGVsYXkpLHRoaXMuX2RlbGF5PXQsdGhpcyk6dGhpcy5fZGVsYXl9LE50LmR1cmF0aW9uPWZ1bmN0aW9uIGR1cmF0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoP3RoaXMudG90YWxEdXJhdGlvbigwPHRoaXMuX3JlcGVhdD90Kyh0K3RoaXMuX3JEZWxheSkqdGhpcy5fcmVwZWF0OnQpOnRoaXMudG90YWxEdXJhdGlvbigpJiZ0aGlzLl9kdXJ9LE50LnRvdGFsRHVyYXRpb249ZnVuY3Rpb24gdG90YWxEdXJhdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8odGhpcy5fZGlydHk9MCxSYSh0aGlzLHRoaXMuX3JlcGVhdDwwP3Q6KHQtdGhpcy5fcmVwZWF0KnRoaXMuX3JEZWxheSkvKHRoaXMuX3JlcGVhdCsxKSkpOnRoaXMuX3REdXJ9LE50LnRvdGFsVGltZT1mdW5jdGlvbiB0b3RhbFRpbWUodCxlKXtpZih6dCgpLCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLl90VGltZTt2YXIgcj10aGlzLl9kcDtpZihyJiZyLnNtb290aENoaWxkVGltaW5nJiZ0aGlzLl90cyl7Zm9yKElhKHRoaXMsdCksIXIuX2RwfHxyLnBhcmVudHx8SmEocix0aGlzKTtyJiZyLnBhcmVudDspci5wYXJlbnQuX3RpbWUhPT1yLl9zdGFydCsoMDw9ci5fdHM/ci5fdFRpbWUvci5fdHM6KHIudG90YWxEdXJhdGlvbigpLXIuX3RUaW1lKS8tci5fdHMpJiZyLnRvdGFsVGltZShyLl90VGltZSwhMCkscj1yLnBhcmVudDshdGhpcy5wYXJlbnQmJnRoaXMuX2RwLmF1dG9SZW1vdmVDaGlsZHJlbiYmKDA8dGhpcy5fdHMmJnQ8dGhpcy5fdER1cnx8dGhpcy5fdHM8MCYmMDx0fHwhdGhpcy5fdER1ciYmIXQpJiZLYSh0aGlzLl9kcCx0aGlzLHRoaXMuX3N0YXJ0LXRoaXMuX2RlbGF5KX1yZXR1cm4odGhpcy5fdFRpbWUhPT10fHwhdGhpcy5fZHVyJiYhZXx8dGhpcy5faW5pdHRlZCYmTWF0aC5hYnModGhpcy5felRpbWUpPT09Vnx8IXQmJiF0aGlzLl9pbml0dGVkJiYodGhpcy5hZGR8fHRoaXMuX3B0TG9va3VwKSkmJih0aGlzLl90c3x8KHRoaXMuX3BUaW1lPXQpLG5hKHRoaXMsdCxlKSksdGhpc30sTnQudGltZT1mdW5jdGlvbiB0aW1lKHQsZSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/dGhpcy50b3RhbFRpbWUoTWF0aC5taW4odGhpcy50b3RhbER1cmF0aW9uKCksdCtFYSh0aGlzKSklKHRoaXMuX2R1cit0aGlzLl9yRGVsYXkpfHwodD90aGlzLl9kdXI6MCksZSk6dGhpcy5fdGltZX0sTnQudG90YWxQcm9ncmVzcz1mdW5jdGlvbiB0b3RhbFByb2dyZXNzKHQsZSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/dGhpcy50b3RhbFRpbWUodGhpcy50b3RhbER1cmF0aW9uKCkqdCxlKTp0aGlzLnRvdGFsRHVyYXRpb24oKT9NYXRoLm1pbigxLHRoaXMuX3RUaW1lL3RoaXMuX3REdXIpOnRoaXMucmF0aW99LE50LnByb2dyZXNzPWZ1bmN0aW9uIHByb2dyZXNzKHQsZSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/dGhpcy50b3RhbFRpbWUodGhpcy5kdXJhdGlvbigpKighdGhpcy5feW95b3x8MSZ0aGlzLml0ZXJhdGlvbigpP3Q6MS10KStFYSh0aGlzKSxlKTp0aGlzLmR1cmF0aW9uKCk/TWF0aC5taW4oMSx0aGlzLl90aW1lL3RoaXMuX2R1cik6dGhpcy5yYXRpb30sTnQuaXRlcmF0aW9uPWZ1bmN0aW9uIGl0ZXJhdGlvbih0LGUpe3ZhciByPXRoaXMuZHVyYXRpb24oKSt0aGlzLl9yRGVsYXk7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/dGhpcy50b3RhbFRpbWUodGhpcy5fdGltZSsodC0xKSpyLGUpOnRoaXMuX3JlcGVhdD9UdCh0aGlzLl90VGltZSxyKSsxOjF9LE50LnRpbWVTY2FsZT1mdW5jdGlvbiB0aW1lU2NhbGUodCl7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuX3J0cz09PS1WPzA6dGhpcy5fcnRzO2lmKHRoaXMuX3J0cz09PXQpcmV0dXJuIHRoaXM7dmFyIGU9dGhpcy5wYXJlbnQmJnRoaXMuX3RzP0dhKHRoaXMucGFyZW50Ll90aW1lLHRoaXMpOnRoaXMuX3RUaW1lO3JldHVybiB0aGlzLl9ydHM9K3R8fDAsdGhpcy5fdHM9dGhpcy5fcHN8fHQ9PT0tVj8wOnRoaXMuX3J0cyx0aGlzLnRvdGFsVGltZShrdCgtdGhpcy5fZGVsYXksdGhpcy5fdER1cixlKSwhMCksSGEodGhpcyksZnVuY3Rpb24gX3JlY2FjaGVBbmNlc3RvcnModCl7Zm9yKHZhciBlPXQucGFyZW50O2UmJmUucGFyZW50OyllLl9kaXJ0eT0xLGUudG90YWxEdXJhdGlvbigpLGU9ZS5wYXJlbnQ7cmV0dXJuIHR9KHRoaXMpfSxOdC5wYXVzZWQ9ZnVuY3Rpb24gcGF1c2VkKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh0aGlzLl9wcyE9PXQmJigodGhpcy5fcHM9dCk/KHRoaXMuX3BUaW1lPXRoaXMuX3RUaW1lfHxNYXRoLm1heCgtdGhpcy5fZGVsYXksdGhpcy5yYXdUaW1lKCkpLHRoaXMuX3RzPXRoaXMuX2FjdD0wKTooenQoKSx0aGlzLl90cz10aGlzLl9ydHMsdGhpcy50b3RhbFRpbWUodGhpcy5wYXJlbnQmJiF0aGlzLnBhcmVudC5zbW9vdGhDaGlsZFRpbWluZz90aGlzLnJhd1RpbWUoKTp0aGlzLl90VGltZXx8dGhpcy5fcFRpbWUsMT09PXRoaXMucHJvZ3Jlc3MoKSYmTWF0aC5hYnModGhpcy5felRpbWUpIT09ViYmKHRoaXMuX3RUaW1lLT1WKSkpKSx0aGlzKTp0aGlzLl9wc30sTnQuc3RhcnRUaW1lPWZ1bmN0aW9uIHN0YXJ0VGltZSh0KXtpZihhcmd1bWVudHMubGVuZ3RoKXt0aGlzLl9zdGFydD10O3ZhciBlPXRoaXMucGFyZW50fHx0aGlzLl9kcDtyZXR1cm4hZXx8IWUuX3NvcnQmJnRoaXMucGFyZW50fHxLYShlLHRoaXMsdC10aGlzLl9kZWxheSksdGhpc31yZXR1cm4gdGhpcy5fc3RhcnR9LE50LmVuZFRpbWU9ZnVuY3Rpb24gZW5kVGltZSh0KXtyZXR1cm4gdGhpcy5fc3RhcnQrKHcodCk/dGhpcy50b3RhbER1cmF0aW9uKCk6dGhpcy5kdXJhdGlvbigpKS9NYXRoLmFicyh0aGlzLl90c3x8MSl9LE50LnJhd1RpbWU9ZnVuY3Rpb24gcmF3VGltZSh0KXt2YXIgZT10aGlzLnBhcmVudHx8dGhpcy5fZHA7cmV0dXJuIGU/dCYmKCF0aGlzLl90c3x8dGhpcy5fcmVwZWF0JiZ0aGlzLl90aW1lJiZ0aGlzLnRvdGFsUHJvZ3Jlc3MoKTwxKT90aGlzLl90VGltZSUodGhpcy5fZHVyK3RoaXMuX3JEZWxheSk6dGhpcy5fdHM/R2EoZS5yYXdUaW1lKHQpLHRoaXMpOnRoaXMuX3RUaW1lOnRoaXMuX3RUaW1lfSxOdC5yZXZlcnQ9ZnVuY3Rpb24gcmV2ZXJ0KHQpe3ZvaWQgMD09PXQmJih0PWx0KTt2YXIgZT1CO3JldHVybiBCPXQsKHRoaXMuX2luaXR0ZWR8fHRoaXMuX3N0YXJ0QXQpJiYodGhpcy50aW1lbGluZSYmdGhpcy50aW1lbGluZS5yZXZlcnQodCksdGhpcy50b3RhbFRpbWUoLS4wMSx0LnN1cHByZXNzRXZlbnRzKSksXCJuZXN0ZWRcIiE9PXRoaXMuZGF0YSYmITEhPT10LmtpbGwmJnRoaXMua2lsbCgpLEI9ZSx0aGlzfSxOdC5nbG9iYWxUaW1lPWZ1bmN0aW9uIGdsb2JhbFRpbWUodCl7Zm9yKHZhciBlPXRoaXMscj1hcmd1bWVudHMubGVuZ3RoP3Q6ZS5yYXdUaW1lKCk7ZTspcj1lLl9zdGFydCtyLyhlLl90c3x8MSksZT1lLl9kcDtyZXR1cm4hdGhpcy5wYXJlbnQmJnRoaXMudmFycy5pbW1lZGlhdGVSZW5kZXI/LTE6cn0sTnQucmVwZWF0PWZ1bmN0aW9uIHJlcGVhdCh0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8odGhpcy5fcmVwZWF0PXQ9PT0xLzA/LTI6dCxTYSh0aGlzKSk6LTI9PT10aGlzLl9yZXBlYXQ/MS8wOnRoaXMuX3JlcGVhdH0sTnQucmVwZWF0RGVsYXk9ZnVuY3Rpb24gcmVwZWF0RGVsYXkodCl7aWYoYXJndW1lbnRzLmxlbmd0aCl7dmFyIGU9dGhpcy5fdGltZTtyZXR1cm4gdGhpcy5fckRlbGF5PXQsU2EodGhpcyksZT90aGlzLnRpbWUoZSk6dGhpc31yZXR1cm4gdGhpcy5fckRlbGF5fSxOdC55b3lvPWZ1bmN0aW9uIHlveW8odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHRoaXMuX3lveW89dCx0aGlzKTp0aGlzLl95b3lvfSxOdC5zZWVrPWZ1bmN0aW9uIHNlZWsodCxlKXtyZXR1cm4gdGhpcy50b3RhbFRpbWUoeHQodGhpcyx0KSx3KGUpKX0sTnQucmVzdGFydD1mdW5jdGlvbiByZXN0YXJ0KHQsZSl7cmV0dXJuIHRoaXMucGxheSgpLnRvdGFsVGltZSh0Py10aGlzLl9kZWxheTowLHcoZSkpfSxOdC5wbGF5PWZ1bmN0aW9uIHBsYXkodCxlKXtyZXR1cm4gbnVsbCE9dCYmdGhpcy5zZWVrKHQsZSksdGhpcy5yZXZlcnNlZCghMSkucGF1c2VkKCExKX0sTnQucmV2ZXJzZT1mdW5jdGlvbiByZXZlcnNlKHQsZSl7cmV0dXJuIG51bGwhPXQmJnRoaXMuc2Vlayh0fHx0aGlzLnRvdGFsRHVyYXRpb24oKSxlKSx0aGlzLnJldmVyc2VkKCEwKS5wYXVzZWQoITEpfSxOdC5wYXVzZT1mdW5jdGlvbiBwYXVzZSh0LGUpe3JldHVybiBudWxsIT10JiZ0aGlzLnNlZWsodCxlKSx0aGlzLnBhdXNlZCghMCl9LE50LnJlc3VtZT1mdW5jdGlvbiByZXN1bWUoKXtyZXR1cm4gdGhpcy5wYXVzZWQoITEpfSxOdC5yZXZlcnNlZD1mdW5jdGlvbiByZXZlcnNlZCh0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oISF0IT09dGhpcy5yZXZlcnNlZCgpJiZ0aGlzLnRpbWVTY2FsZSgtdGhpcy5fcnRzfHwodD8tVjowKSksdGhpcyk6dGhpcy5fcnRzPDB9LE50LmludmFsaWRhdGU9ZnVuY3Rpb24gaW52YWxpZGF0ZSgpe3JldHVybiB0aGlzLl9pbml0dGVkPXRoaXMuX2FjdD0wLHRoaXMuX3pUaW1lPS1WLHRoaXN9LE50LmlzQWN0aXZlPWZ1bmN0aW9uIGlzQWN0aXZlKCl7dmFyIHQsZT10aGlzLnBhcmVudHx8dGhpcy5fZHAscj10aGlzLl9zdGFydDtyZXR1cm4hKGUmJiEodGhpcy5fdHMmJnRoaXMuX2luaXR0ZWQmJmUuaXNBY3RpdmUoKSYmKHQ9ZS5yYXdUaW1lKCEwKSk+PXImJnQ8dGhpcy5lbmRUaW1lKCEwKS1WKSl9LE50LmV2ZW50Q2FsbGJhY2s9ZnVuY3Rpb24gZXZlbnRDYWxsYmFjayh0LGUscil7dmFyIGk9dGhpcy52YXJzO3JldHVybiAxPGFyZ3VtZW50cy5sZW5ndGg/KGU/KGlbdF09ZSxyJiYoaVt0K1wiUGFyYW1zXCJdPXIpLFwib25VcGRhdGVcIj09PXQmJih0aGlzLl9vblVwZGF0ZT1lKSk6ZGVsZXRlIGlbdF0sdGhpcyk6aVt0XX0sTnQudGhlbj1mdW5jdGlvbiB0aGVuKHQpe3ZhciBpPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHpvKCl7dmFyIHQ9aS50aGVuO2kudGhlbj1udWxsLHMocikmJihyPXIoaSkpJiYoci50aGVufHxyPT09aSkmJihpLnRoZW49dCksZShyKSxpLnRoZW49dH12YXIgcj1zKHQpP3Q6cGE7aS5faW5pdHRlZCYmMT09PWkudG90YWxQcm9ncmVzcygpJiYwPD1pLl90c3x8IWkuX3RUaW1lJiZpLl90czwwP3pvKCk6aS5fcHJvbT16b30pfSxOdC5raWxsPWZ1bmN0aW9uIGtpbGwoKXt0Yih0aGlzKX0sQW5pbWF0aW9uKTtmdW5jdGlvbiBBbmltYXRpb24odCl7dGhpcy52YXJzPXQsdGhpcy5fZGVsYXk9K3QuZGVsYXl8fDAsKHRoaXMuX3JlcGVhdD10LnJlcGVhdD09PTEvMD8tMjp0LnJlcGVhdHx8MCkmJih0aGlzLl9yRGVsYXk9dC5yZXBlYXREZWxheXx8MCx0aGlzLl95b3lvPSEhdC55b3lvfHwhIXQueW95b0Vhc2UpLHRoaXMuX3RzPTEsUmEodGhpcywrdC5kdXJhdGlvbiwxLDEpLHRoaXMuZGF0YT10LmRhdGEsbCYmKHRoaXMuX2N0eD1sKS5kYXRhLnB1c2godGhpcyksZHx8RXQud2FrZSgpfXFhKHF0LnByb3RvdHlwZSx7X3RpbWU6MCxfc3RhcnQ6MCxfZW5kOjAsX3RUaW1lOjAsX3REdXI6MCxfZGlydHk6MCxfcmVwZWF0OjAsX3lveW86ITEscGFyZW50Om51bGwsX2luaXR0ZWQ6ITEsX3JEZWxheTowLF90czoxLF9kcDowLHJhdGlvOjAsX3pUaW1lOi1WLF9wcm9tOjAsX3BzOiExLF9ydHM6MX0pO3ZhciBVdD1mdW5jdGlvbihpKXtmdW5jdGlvbiBUaW1lbGluZSh0LGUpe3ZhciByO3JldHVybiB2b2lkIDA9PT10JiYodD17fSksKHI9aS5jYWxsKHRoaXMsdCl8fHRoaXMpLmxhYmVscz17fSxyLnNtb290aENoaWxkVGltaW5nPSEhdC5zbW9vdGhDaGlsZFRpbWluZyxyLmF1dG9SZW1vdmVDaGlsZHJlbj0hIXQuYXV0b1JlbW92ZUNoaWxkcmVuLHIuX3NvcnQ9dyh0LnNvcnRDaGlsZHJlbiksTCYmS2EodC5wYXJlbnR8fEwsX2Fzc2VydFRoaXNJbml0aWFsaXplZChyKSxlKSx0LnJldmVyc2VkJiZyLnJldmVyc2UoKSx0LnBhdXNlZCYmci5wYXVzZWQoITApLHQuc2Nyb2xsVHJpZ2dlciYmTGEoX2Fzc2VydFRoaXNJbml0aWFsaXplZChyKSx0LnNjcm9sbFRyaWdnZXIpLHJ9X2luaGVyaXRzTG9vc2UoVGltZWxpbmUsaSk7dmFyIGU9VGltZWxpbmUucHJvdG90eXBlO3JldHVybiBlLnRvPWZ1bmN0aW9uIHRvKHQsZSxyKXtyZXR1cm4gVmEoMCxhcmd1bWVudHMsdGhpcyksdGhpc30sZS5mcm9tPWZ1bmN0aW9uIGZyb20odCxlLHIpe3JldHVybiBWYSgxLGFyZ3VtZW50cyx0aGlzKSx0aGlzfSxlLmZyb21Ubz1mdW5jdGlvbiBmcm9tVG8odCxlLHIsaSl7cmV0dXJuIFZhKDIsYXJndW1lbnRzLHRoaXMpLHRoaXN9LGUuc2V0PWZ1bmN0aW9uIHNldCh0LGUscil7cmV0dXJuIGUuZHVyYXRpb249MCxlLnBhcmVudD10aGlzLHZhKGUpLnJlcGVhdERlbGF5fHwoZS5yZXBlYXQ9MCksZS5pbW1lZGlhdGVSZW5kZXI9ISFlLmltbWVkaWF0ZVJlbmRlcixuZXcgR3QodCxlLHh0KHRoaXMsciksMSksdGhpc30sZS5jYWxsPWZ1bmN0aW9uIGNhbGwodCxlLHIpe3JldHVybiBLYSh0aGlzLEd0LmRlbGF5ZWRDYWxsKDAsdCxlKSxyKX0sZS5zdGFnZ2VyVG89ZnVuY3Rpb24gc3RhZ2dlclRvKHQsZSxyLGksbixhLHMpe3JldHVybiByLmR1cmF0aW9uPWUsci5zdGFnZ2VyPXIuc3RhZ2dlcnx8aSxyLm9uQ29tcGxldGU9YSxyLm9uQ29tcGxldGVQYXJhbXM9cyxyLnBhcmVudD10aGlzLG5ldyBHdCh0LHIseHQodGhpcyxuKSksdGhpc30sZS5zdGFnZ2VyRnJvbT1mdW5jdGlvbiBzdGFnZ2VyRnJvbSh0LGUscixpLG4sYSxzKXtyZXR1cm4gci5ydW5CYWNrd2FyZHM9MSx2YShyKS5pbW1lZGlhdGVSZW5kZXI9dyhyLmltbWVkaWF0ZVJlbmRlciksdGhpcy5zdGFnZ2VyVG8odCxlLHIsaSxuLGEscyl9LGUuc3RhZ2dlckZyb21Ubz1mdW5jdGlvbiBzdGFnZ2VyRnJvbVRvKHQsZSxyLGksbixhLHMsbyl7cmV0dXJuIGkuc3RhcnRBdD1yLHZhKGkpLmltbWVkaWF0ZVJlbmRlcj13KGkuaW1tZWRpYXRlUmVuZGVyKSx0aGlzLnN0YWdnZXJUbyh0LGUsaSxuLGEscyxvKX0sZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKHQsZSxyKXt2YXIgaSxuLGEscyxvLHUsaCxsLGYsYyxkLHAsXz10aGlzLl90aW1lLG09dGhpcy5fZGlydHk/dGhpcy50b3RhbER1cmF0aW9uKCk6dGhpcy5fdER1cixnPXRoaXMuX2R1cix2PXQ8PTA/MDpqYSh0KSx5PXRoaXMuX3pUaW1lPDAhPXQ8MCYmKHRoaXMuX2luaXR0ZWR8fCFnKTtpZih0aGlzIT09TCYmbTx2JiYwPD10JiYodj1tKSx2IT09dGhpcy5fdFRpbWV8fHJ8fHkpe2lmKF8hPT10aGlzLl90aW1lJiZnJiYodis9dGhpcy5fdGltZS1fLHQrPXRoaXMuX3RpbWUtXyksaT12LGY9dGhpcy5fc3RhcnQsdT0hKGw9dGhpcy5fdHMpLHkmJihnfHwoXz10aGlzLl96VGltZSksIXQmJmV8fCh0aGlzLl96VGltZT10KSksdGhpcy5fcmVwZWF0KXtpZihkPXRoaXMuX3lveW8sbz1nK3RoaXMuX3JEZWxheSx0aGlzLl9yZXBlYXQ8LTEmJnQ8MClyZXR1cm4gdGhpcy50b3RhbFRpbWUoMTAwKm8rdCxlLHIpO2lmKGk9amEodiVvKSx2PT09bT8ocz10aGlzLl9yZXBlYXQsaT1nKTooKHM9fn4odi9vKSkmJnM9PT12L28mJihpPWcscy0tKSxnPGkmJihpPWcpKSxjPVR0KHRoaXMuX3RUaW1lLG8pLCFfJiZ0aGlzLl90VGltZSYmYyE9PXMmJihjPXMpLGQmJjEmcyYmKGk9Zy1pLHA9MSkscyE9PWMmJiF0aGlzLl9sb2NrKXt2YXIgVD1kJiYxJmMsYj1UPT09KGQmJjEmcyk7aWYoczxjJiYoVD0hVCksXz1UPzA6Zyx0aGlzLl9sb2NrPTEsdGhpcy5yZW5kZXIoX3x8KHA/MDpqYShzKm8pKSxlLCFnKS5fbG9jaz0wLHRoaXMuX3RUaW1lPXYsIWUmJnRoaXMucGFyZW50JiZDdCh0aGlzLFwib25SZXBlYXRcIiksdGhpcy52YXJzLnJlcGVhdFJlZnJlc2gmJiFwJiYodGhpcy5pbnZhbGlkYXRlKCkuX2xvY2s9MSksXyYmXyE9PXRoaXMuX3RpbWV8fHUhPSF0aGlzLl90c3x8dGhpcy52YXJzLm9uUmVwZWF0JiYhdGhpcy5wYXJlbnQmJiF0aGlzLl9hY3QpcmV0dXJuIHRoaXM7aWYoZz10aGlzLl9kdXIsbT10aGlzLl90RHVyLGImJih0aGlzLl9sb2NrPTIsXz1UP2c6LTFlLTQsdGhpcy5yZW5kZXIoXywhMCksdGhpcy52YXJzLnJlcGVhdFJlZnJlc2gmJiFwJiZ0aGlzLmludmFsaWRhdGUoKSksdGhpcy5fbG9jaz0wLCF0aGlzLl90cyYmIXUpcmV0dXJuIHRoaXM7UGIodGhpcyxwKX19aWYodGhpcy5faGFzUGF1c2UmJiF0aGlzLl9mb3JjaW5nJiZ0aGlzLl9sb2NrPDImJihoPWZ1bmN0aW9uIF9maW5kTmV4dFBhdXNlVHdlZW4odCxlLHIpe3ZhciBpO2lmKGU8cilmb3IoaT10Ll9maXJzdDtpJiZpLl9zdGFydDw9cjspe2lmKFwiaXNQYXVzZVwiPT09aS5kYXRhJiZpLl9zdGFydD5lKXJldHVybiBpO2k9aS5fbmV4dH1lbHNlIGZvcihpPXQuX2xhc3Q7aSYmaS5fc3RhcnQ+PXI7KXtpZihcImlzUGF1c2VcIj09PWkuZGF0YSYmaS5fc3RhcnQ8ZSlyZXR1cm4gaTtpPWkuX3ByZXZ9fSh0aGlzLGphKF8pLGphKGkpKSkmJih2LT1pLShpPWguX3N0YXJ0KSksdGhpcy5fdFRpbWU9dix0aGlzLl90aW1lPWksdGhpcy5fYWN0PSFsLHRoaXMuX2luaXR0ZWR8fCh0aGlzLl9vblVwZGF0ZT10aGlzLnZhcnMub25VcGRhdGUsdGhpcy5faW5pdHRlZD0xLHRoaXMuX3pUaW1lPXQsXz0wKSwhXyYmaSYmIWUmJihDdCh0aGlzLFwib25TdGFydFwiKSx0aGlzLl90VGltZSE9PXYpKXJldHVybiB0aGlzO2lmKF88PWkmJjA8PXQpZm9yKG49dGhpcy5fZmlyc3Q7bjspe2lmKGE9bi5fbmV4dCwobi5fYWN0fHxpPj1uLl9zdGFydCkmJm4uX3RzJiZoIT09bil7aWYobi5wYXJlbnQhPT10aGlzKXJldHVybiB0aGlzLnJlbmRlcih0LGUscik7aWYobi5yZW5kZXIoMDxuLl90cz8oaS1uLl9zdGFydCkqbi5fdHM6KG4uX2RpcnR5P24udG90YWxEdXJhdGlvbigpOm4uX3REdXIpKyhpLW4uX3N0YXJ0KSpuLl90cyxlLHIpLGkhPT10aGlzLl90aW1lfHwhdGhpcy5fdHMmJiF1KXtoPTAsYSYmKHYrPXRoaXMuX3pUaW1lPS1WKTticmVha319bj1hfWVsc2V7bj10aGlzLl9sYXN0O2Zvcih2YXIgdz10PDA/dDppO247KXtpZihhPW4uX3ByZXYsKG4uX2FjdHx8dzw9bi5fZW5kKSYmbi5fdHMmJmghPT1uKXtpZihuLnBhcmVudCE9PXRoaXMpcmV0dXJuIHRoaXMucmVuZGVyKHQsZSxyKTtpZihuLnJlbmRlcigwPG4uX3RzPyh3LW4uX3N0YXJ0KSpuLl90czoobi5fZGlydHk/bi50b3RhbER1cmF0aW9uKCk6bi5fdER1cikrKHctbi5fc3RhcnQpKm4uX3RzLGUscnx8QiYmKG4uX2luaXR0ZWR8fG4uX3N0YXJ0QXQpKSxpIT09dGhpcy5fdGltZXx8IXRoaXMuX3RzJiYhdSl7aD0wLGEmJih2Kz10aGlzLl96VGltZT13Py1WOlYpO2JyZWFrfX1uPWF9fWlmKGgmJiFlJiYodGhpcy5wYXVzZSgpLGgucmVuZGVyKF88PWk/MDotVikuX3pUaW1lPV88PWk/MTotMSx0aGlzLl90cykpcmV0dXJuIHRoaXMuX3N0YXJ0PWYsSGEodGhpcyksdGhpcy5yZW5kZXIodCxlLHIpO3RoaXMuX29uVXBkYXRlJiYhZSYmQ3QodGhpcyxcIm9uVXBkYXRlXCIsITApLCh2PT09bSYmdGhpcy5fdFRpbWU+PXRoaXMudG90YWxEdXJhdGlvbigpfHwhdiYmXykmJihmIT09dGhpcy5fc3RhcnQmJk1hdGguYWJzKGwpPT09TWF0aC5hYnModGhpcy5fdHMpfHx0aGlzLl9sb2NrfHwoIXQmJmd8fCEodj09PW0mJjA8dGhpcy5fdHN8fCF2JiZ0aGlzLl90czwwKXx8emEodGhpcywxKSxlfHx0PDAmJiFffHwhdiYmIV8mJm18fChDdCh0aGlzLHY9PT1tJiYwPD10P1wib25Db21wbGV0ZVwiOlwib25SZXZlcnNlQ29tcGxldGVcIiwhMCksIXRoaXMuX3Byb218fHY8bSYmMDx0aGlzLnRpbWVTY2FsZSgpfHx0aGlzLl9wcm9tKCkpKSl9cmV0dXJuIHRoaXN9LGUuYWRkPWZ1bmN0aW9uIGFkZChlLGkpe3ZhciBuPXRoaXM7aWYodChpKXx8KGk9eHQodGhpcyxpLGUpKSwhKGUgaW5zdGFuY2VvZiBxdCkpe2lmKCQoZSkpcmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gbi5hZGQodCxpKX0pLHRoaXM7aWYocihlKSlyZXR1cm4gdGhpcy5hZGRMYWJlbChlLGkpO2lmKCFzKGUpKXJldHVybiB0aGlzO2U9R3QuZGVsYXllZENhbGwoMCxlKX1yZXR1cm4gdGhpcyE9PWU/S2EodGhpcyxlLGkpOnRoaXN9LGUuZ2V0Q2hpbGRyZW49ZnVuY3Rpb24gZ2V0Q2hpbGRyZW4odCxlLHIsaSl7dm9pZCAwPT09dCYmKHQ9ITApLHZvaWQgMD09PWUmJihlPSEwKSx2b2lkIDA9PT1yJiYocj0hMCksdm9pZCAwPT09aSYmKGk9LVUpO2Zvcih2YXIgbj1bXSxhPXRoaXMuX2ZpcnN0O2E7KWEuX3N0YXJ0Pj1pJiYoYSBpbnN0YW5jZW9mIEd0P2UmJm4ucHVzaChhKToociYmbi5wdXNoKGEpLHQmJm4ucHVzaC5hcHBseShuLGEuZ2V0Q2hpbGRyZW4oITAsZSxyKSkpKSxhPWEuX25leHQ7cmV0dXJuIG59LGUuZ2V0QnlJZD1mdW5jdGlvbiBnZXRCeUlkKHQpe2Zvcih2YXIgZT10aGlzLmdldENoaWxkcmVuKDEsMSwxKSxyPWUubGVuZ3RoO3ItLTspaWYoZVtyXS52YXJzLmlkPT09dClyZXR1cm4gZVtyXX0sZS5yZW1vdmU9ZnVuY3Rpb24gcmVtb3ZlKHQpe3JldHVybiByKHQpP3RoaXMucmVtb3ZlTGFiZWwodCk6cyh0KT90aGlzLmtpbGxUd2VlbnNPZih0KTooeWEodGhpcyx0KSx0PT09dGhpcy5fcmVjZW50JiYodGhpcy5fcmVjZW50PXRoaXMuX2xhc3QpLEFhKHRoaXMpKX0sZS50b3RhbFRpbWU9ZnVuY3Rpb24gdG90YWxUaW1lKHQsZSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHRoaXMuX2ZvcmNpbmc9MSwhdGhpcy5fZHAmJnRoaXMuX3RzJiYodGhpcy5fc3RhcnQ9amEoRXQudGltZS0oMDx0aGlzLl90cz90L3RoaXMuX3RzOih0aGlzLnRvdGFsRHVyYXRpb24oKS10KS8tdGhpcy5fdHMpKSksaS5wcm90b3R5cGUudG90YWxUaW1lLmNhbGwodGhpcyx0LGUpLHRoaXMuX2ZvcmNpbmc9MCx0aGlzKTp0aGlzLl90VGltZX0sZS5hZGRMYWJlbD1mdW5jdGlvbiBhZGRMYWJlbCh0LGUpe3JldHVybiB0aGlzLmxhYmVsc1t0XT14dCh0aGlzLGUpLHRoaXN9LGUucmVtb3ZlTGFiZWw9ZnVuY3Rpb24gcmVtb3ZlTGFiZWwodCl7cmV0dXJuIGRlbGV0ZSB0aGlzLmxhYmVsc1t0XSx0aGlzfSxlLmFkZFBhdXNlPWZ1bmN0aW9uIGFkZFBhdXNlKHQsZSxyKXt2YXIgaT1HdC5kZWxheWVkQ2FsbCgwLGV8fFQscik7cmV0dXJuIGkuZGF0YT1cImlzUGF1c2VcIix0aGlzLl9oYXNQYXVzZT0xLEthKHRoaXMsaSx4dCh0aGlzLHQpKX0sZS5yZW1vdmVQYXVzZT1mdW5jdGlvbiByZW1vdmVQYXVzZSh0KXt2YXIgZT10aGlzLl9maXJzdDtmb3IodD14dCh0aGlzLHQpO2U7KWUuX3N0YXJ0PT09dCYmXCJpc1BhdXNlXCI9PT1lLmRhdGEmJnphKGUpLGU9ZS5fbmV4dH0sZS5raWxsVHdlZW5zT2Y9ZnVuY3Rpb24ga2lsbFR3ZWVuc09mKHQsZSxyKXtmb3IodmFyIGk9dGhpcy5nZXRUd2VlbnNPZih0LHIpLG49aS5sZW5ndGg7bi0tOylWdCE9PWlbbl0mJmlbbl0ua2lsbCh0LGUpO3JldHVybiB0aGlzfSxlLmdldFR3ZWVuc09mPWZ1bmN0aW9uIGdldFR3ZWVuc09mKGUscil7Zm9yKHZhciBpLG49W10sYT1PdChlKSxzPXRoaXMuX2ZpcnN0LG89dChyKTtzOylzIGluc3RhbmNlb2YgR3Q/bGEocy5fdGFyZ2V0cyxhKSYmKG8/KCFWdHx8cy5faW5pdHRlZCYmcy5fdHMpJiZzLmdsb2JhbFRpbWUoMCk8PXImJnMuZ2xvYmFsVGltZShzLnRvdGFsRHVyYXRpb24oKSk+cjohcnx8cy5pc0FjdGl2ZSgpKSYmbi5wdXNoKHMpOihpPXMuZ2V0VHdlZW5zT2YoYSxyKSkubGVuZ3RoJiZuLnB1c2guYXBwbHkobixpKSxzPXMuX25leHQ7cmV0dXJuIG59LGUudHdlZW5Ubz1mdW5jdGlvbiB0d2VlblRvKHQsZSl7ZT1lfHx7fTt2YXIgcixpPXRoaXMsbj14dChpLHQpLGE9ZS5zdGFydEF0LHM9ZS5vblN0YXJ0LG89ZS5vblN0YXJ0UGFyYW1zLHU9ZS5pbW1lZGlhdGVSZW5kZXIsaD1HdC50byhpLHFhKHtlYXNlOmUuZWFzZXx8XCJub25lXCIsbGF6eTohMSxpbW1lZGlhdGVSZW5kZXI6ITEsdGltZTpuLG92ZXJ3cml0ZTpcImF1dG9cIixkdXJhdGlvbjplLmR1cmF0aW9ufHxNYXRoLmFicygobi0oYSYmXCJ0aW1lXCJpbiBhP2EudGltZTppLl90aW1lKSkvaS50aW1lU2NhbGUoKSl8fFYsb25TdGFydDpmdW5jdGlvbiBvblN0YXJ0KCl7aWYoaS5wYXVzZSgpLCFyKXt2YXIgdD1lLmR1cmF0aW9ufHxNYXRoLmFicygobi0oYSYmXCJ0aW1lXCJpbiBhP2EudGltZTppLl90aW1lKSkvaS50aW1lU2NhbGUoKSk7aC5fZHVyIT09dCYmUmEoaCx0LDAsMSkucmVuZGVyKGguX3RpbWUsITAsITApLHI9MX1zJiZzLmFwcGx5KGgsb3x8W10pfX0sZSkpO3JldHVybiB1P2gucmVuZGVyKDApOmh9LGUudHdlZW5Gcm9tVG89ZnVuY3Rpb24gdHdlZW5Gcm9tVG8odCxlLHIpe3JldHVybiB0aGlzLnR3ZWVuVG8oZSxxYSh7c3RhcnRBdDp7dGltZTp4dCh0aGlzLHQpfX0scikpfSxlLnJlY2VudD1mdW5jdGlvbiByZWNlbnQoKXtyZXR1cm4gdGhpcy5fcmVjZW50fSxlLm5leHRMYWJlbD1mdW5jdGlvbiBuZXh0TGFiZWwodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PXRoaXMuX3RpbWUpLHJiKHRoaXMseHQodGhpcyx0KSl9LGUucHJldmlvdXNMYWJlbD1mdW5jdGlvbiBwcmV2aW91c0xhYmVsKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD10aGlzLl90aW1lKSxyYih0aGlzLHh0KHRoaXMsdCksMSl9LGUuY3VycmVudExhYmVsPWZ1bmN0aW9uIGN1cnJlbnRMYWJlbCh0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD90aGlzLnNlZWsodCwhMCk6dGhpcy5wcmV2aW91c0xhYmVsKHRoaXMuX3RpbWUrVil9LGUuc2hpZnRDaGlsZHJlbj1mdW5jdGlvbiBzaGlmdENoaWxkcmVuKHQsZSxyKXt2b2lkIDA9PT1yJiYocj0wKTtmb3IodmFyIGksbj10aGlzLl9maXJzdCxhPXRoaXMubGFiZWxzO247KW4uX3N0YXJ0Pj1yJiYobi5fc3RhcnQrPXQsbi5fZW5kKz10KSxuPW4uX25leHQ7aWYoZSlmb3IoaSBpbiBhKWFbaV0+PXImJihhW2ldKz10KTtyZXR1cm4gQWEodGhpcyl9LGUuaW52YWxpZGF0ZT1mdW5jdGlvbiBpbnZhbGlkYXRlKHQpe3ZhciBlPXRoaXMuX2ZpcnN0O2Zvcih0aGlzLl9sb2NrPTA7ZTspZS5pbnZhbGlkYXRlKHQpLGU9ZS5fbmV4dDtyZXR1cm4gaS5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMsdCl9LGUuY2xlYXI9ZnVuY3Rpb24gY2xlYXIodCl7dm9pZCAwPT09dCYmKHQ9ITApO2Zvcih2YXIgZSxyPXRoaXMuX2ZpcnN0O3I7KWU9ci5fbmV4dCx0aGlzLnJlbW92ZShyKSxyPWU7cmV0dXJuIHRoaXMuX2RwJiYodGhpcy5fdGltZT10aGlzLl90VGltZT10aGlzLl9wVGltZT0wKSx0JiYodGhpcy5sYWJlbHM9e30pLEFhKHRoaXMpfSxlLnRvdGFsRHVyYXRpb249ZnVuY3Rpb24gdG90YWxEdXJhdGlvbih0KXt2YXIgZSxyLGksbj0wLGE9dGhpcyxzPWEuX2xhc3Qsbz1VO2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGEudGltZVNjYWxlKChhLl9yZXBlYXQ8MD9hLmR1cmF0aW9uKCk6YS50b3RhbER1cmF0aW9uKCkpLyhhLnJldmVyc2VkKCk/LXQ6dCkpO2lmKGEuX2RpcnR5KXtmb3IoaT1hLnBhcmVudDtzOyllPXMuX3ByZXYscy5fZGlydHkmJnMudG90YWxEdXJhdGlvbigpLG88KHI9cy5fc3RhcnQpJiZhLl9zb3J0JiZzLl90cyYmIWEuX2xvY2s/KGEuX2xvY2s9MSxLYShhLHMsci1zLl9kZWxheSwxKS5fbG9jaz0wKTpvPXIscjwwJiZzLl90cyYmKG4tPXIsKCFpJiYhYS5fZHB8fGkmJmkuc21vb3RoQ2hpbGRUaW1pbmcpJiYoYS5fc3RhcnQrPXIvYS5fdHMsYS5fdGltZS09cixhLl90VGltZS09ciksYS5zaGlmdENoaWxkcmVuKC1yLCExLC1JbmZpbml0eSksbz0wKSxzLl9lbmQ+biYmcy5fdHMmJihuPXMuX2VuZCkscz1lO1JhKGEsYT09PUwmJmEuX3RpbWU+bj9hLl90aW1lOm4sMSwxKSxhLl9kaXJ0eT0wfXJldHVybiBhLl90RHVyfSxUaW1lbGluZS51cGRhdGVSb290PWZ1bmN0aW9uIHVwZGF0ZVJvb3QodCl7aWYoTC5fdHMmJihuYShMLEdhKHQsTCkpLGY9RXQuZnJhbWUpLEV0LmZyYW1lPj1tdCl7bXQrPWouYXV0b1NsZWVwfHwxMjA7dmFyIGU9TC5fZmlyc3Q7aWYoKCFlfHwhZS5fdHMpJiZqLmF1dG9TbGVlcCYmRXQuX2xpc3RlbmVycy5sZW5ndGg8Mil7Zm9yKDtlJiYhZS5fdHM7KWU9ZS5fbmV4dDtlfHxFdC5zbGVlcCgpfX19LFRpbWVsaW5lfShxdCk7cWEoVXQucHJvdG90eXBlLHtfbG9jazowLF9oYXNQYXVzZTowLF9mb3JjaW5nOjB9KTtmdW5jdGlvbiBfYih0LGUsaSxuLGEsbyl7dmFyIHUsaCxsLGY7aWYocHRbdF0mJiExIT09KHU9bmV3IHB0W3RdKS5pbml0KGEsdS5yYXdWYXJzP2VbdF06ZnVuY3Rpb24gX3Byb2Nlc3NWYXJzKHQsZSxpLG4sYSl7aWYocyh0KSYmKHQ9UXQodCxhLGUsaSxuKSksIXYodCl8fHQuc3R5bGUmJnQubm9kZVR5cGV8fCQodCl8fEoodCkpcmV0dXJuIHIodCk/UXQodCxhLGUsaSxuKTp0O3ZhciBvLHU9e307Zm9yKG8gaW4gdCl1W29dPVF0KHRbb10sYSxlLGksbik7cmV0dXJuIHV9KGVbdF0sbixhLG8saSksaSxuLG8pJiYoaS5fcHQ9aD1uZXcgcGUoaS5fcHQsYSx0LDAsMSx1LnJlbmRlcix1LDAsdS5wcmlvcml0eSksaSE9PWMpKWZvcihsPWkuX3B0TG9va3VwW2kuX3RhcmdldHMuaW5kZXhPZihhKV0sZj11Ll9wcm9wcy5sZW5ndGg7Zi0tOylsW3UuX3Byb3BzW2ZdXT1oO3JldHVybiB1fWZ1bmN0aW9uIGZjKHQscixlLGkpe3ZhciBuLGEscz1yLmVhc2V8fGl8fFwicG93ZXIxLmluT3V0XCI7aWYoJChyKSlhPWVbdF18fChlW3RdPVtdKSxyLmZvckVhY2goZnVuY3Rpb24odCxlKXtyZXR1cm4gYS5wdXNoKHt0OmUvKHIubGVuZ3RoLTEpKjEwMCx2OnQsZTpzfSl9KTtlbHNlIGZvcihuIGluIHIpYT1lW25dfHwoZVtuXT1bXSksXCJlYXNlXCI9PT1ufHxhLnB1c2goe3Q6cGFyc2VGbG9hdCh0KSx2OnJbbl0sZTpzfSl9dmFyIFZ0LFd0LFh0PWZ1bmN0aW9uIF9hZGRQcm9wVHdlZW4odCxlLGksbixhLG8sdSxoLGwsZil7cyhuKSYmKG49bihhfHwwLHQsbykpO3ZhciBjLGQ9dFtlXSxwPVwiZ2V0XCIhPT1pP2k6cyhkKT9sP3RbZS5pbmRleE9mKFwic2V0XCIpfHwhcyh0W1wiZ2V0XCIrZS5zdWJzdHIoMyldKT9lOlwiZ2V0XCIrZS5zdWJzdHIoMyldKGwpOnRbZV0oKTpkLF89cyhkKT9sP2VlOiR0Okp0O2lmKHIobikmJih+bi5pbmRleE9mKFwicmFuZG9tKFwiKSYmKG49b2IobikpLFwiPVwiPT09bi5jaGFyQXQoMSkmJighKGM9a2EocCxuKSsoWWEocCl8fDApKSYmMCE9PWN8fChuPWMpKSksIWZ8fHAhPT1ufHxXdClyZXR1cm4gaXNOYU4ocCpuKXx8XCJcIj09PW4/KGR8fGUgaW4gdHx8UShlLG4pLGZ1bmN0aW9uIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuKHQsZSxyLGksbixhLHMpe3ZhciBvLHUsaCxsLGYsYyxkLHAsXz1uZXcgcGUodGhpcy5fcHQsdCxlLDAsMSxzZSxudWxsLG4pLG09MCxnPTA7Zm9yKF8uYj1yLF8uZT1pLHIrPVwiXCIsKGQ9fihpKz1cIlwiKS5pbmRleE9mKFwicmFuZG9tKFwiKSkmJihpPW9iKGkpKSxhJiYoYShwPVtyLGldLHQsZSkscj1wWzBdLGk9cFsxXSksdT1yLm1hdGNoKGl0KXx8W107bz1pdC5leGVjKGkpOylsPW9bMF0sZj1pLnN1YnN0cmluZyhtLG8uaW5kZXgpLGg/aD0oaCsxKSU1OlwicmdiYShcIj09PWYuc3Vic3RyKC01KSYmKGg9MSksbCE9PXVbZysrXSYmKGM9cGFyc2VGbG9hdCh1W2ctMV0pfHwwLF8uX3B0PXtfbmV4dDpfLl9wdCxwOmZ8fDE9PT1nP2Y6XCIsXCIsczpjLGM6XCI9XCI9PT1sLmNoYXJBdCgxKT9rYShjLGwpLWM6cGFyc2VGbG9hdChsKS1jLG06aCYmaDw0P01hdGgucm91bmQ6MH0sbT1pdC5sYXN0SW5kZXgpO3JldHVybiBfLmM9bTxpLmxlbmd0aD9pLnN1YnN0cmluZyhtLGkubGVuZ3RoKTpcIlwiLF8uZnA9cywobnQudGVzdChpKXx8ZCkmJihfLmU9MCksdGhpcy5fcHQ9X30uY2FsbCh0aGlzLHQsZSxwLG4sXyxofHxqLnN0cmluZ0ZpbHRlcixsKSk6KGM9bmV3IHBlKHRoaXMuX3B0LHQsZSwrcHx8MCxuLShwfHwwKSxcImJvb2xlYW5cIj09dHlwZW9mIGQ/YWU6bmUsMCxfKSxsJiYoYy5mcD1sKSx1JiZjLm1vZGlmaWVyKHUsdGhpcyx0KSx0aGlzLl9wdD1jKX0sSHQ9ZnVuY3Rpb24gX2luaXRUd2Vlbih0LGUscil7dmFyIGksbixhLHMsbyx1LGgsbCxmLGMsZCxwLF8sbT10LnZhcnMsZz1tLmVhc2Usdj1tLnN0YXJ0QXQseT1tLmltbWVkaWF0ZVJlbmRlcixUPW0ubGF6eSxiPW0ub25VcGRhdGUseD1tLm9uVXBkYXRlUGFyYW1zLGs9bS5jYWxsYmFja1Njb3BlLE09bS5ydW5CYWNrd2FyZHMsTz1tLnlveW9FYXNlLFA9bS5rZXlmcmFtZXMsQz1tLmF1dG9SZXZlcnQsQT10Ll9kdXIsUz10Ll9zdGFydEF0LFI9dC5fdGFyZ2V0cyxEPXQucGFyZW50LEU9RCYmXCJuZXN0ZWRcIj09PUQuZGF0YT9ELnZhcnMudGFyZ2V0czpSLHo9XCJhdXRvXCI9PT10Ll9vdmVyd3JpdGUmJiFJLEY9dC50aW1lbGluZTtpZighRnx8UCYmZ3x8KGc9XCJub25lXCIpLHQuX2Vhc2U9WXQoZyxxLmVhc2UpLHQuX3lFYXNlPU8/THQoWXQoITA9PT1PP2c6TyxxLmVhc2UpKTowLE8mJnQuX3lveW8mJiF0Ll9yZXBlYXQmJihPPXQuX3lFYXNlLHQuX3lFYXNlPXQuX2Vhc2UsdC5fZWFzZT1PKSx0Ll9mcm9tPSFGJiYhIW0ucnVuQmFja3dhcmRzLCFGfHxQJiYhbS5zdGFnZ2VyKXtpZihwPShsPVJbMF0/ZmEoUlswXSkuaGFybmVzczowKSYmbVtsLnByb3BdLGk9dWEobSxmdCksUyYmKFMuX3pUaW1lPDAmJlMucHJvZ3Jlc3MoMSksZTwwJiZNJiZ5JiYhQz9TLnJlbmRlcigtMSwhMCk6Uy5yZXZlcnQoTSYmQT9odDp1dCksUy5fbGF6eT0wKSx2KXtpZih6YSh0Ll9zdGFydEF0PUd0LnNldChSLHFhKHtkYXRhOlwiaXNTdGFydFwiLG92ZXJ3cml0ZTohMSxwYXJlbnQ6RCxpbW1lZGlhdGVSZW5kZXI6ITAsbGF6eTp3KFQpLHN0YXJ0QXQ6bnVsbCxkZWxheTowLG9uVXBkYXRlOmIsb25VcGRhdGVQYXJhbXM6eCxjYWxsYmFja1Njb3BlOmssc3RhZ2dlcjowfSx2KSkpLGU8KHQuX3N0YXJ0QXQuX2RwPTApJiYoQnx8IXkmJiFDKSYmdC5fc3RhcnRBdC5yZXZlcnQoaHQpLHkmJkEmJmU8PTAmJnI8PTApcmV0dXJuIHZvaWQoZSYmKHQuX3pUaW1lPWUpKX1lbHNlIGlmKE0mJkEmJiFTKWlmKGUmJih5PSExKSxhPXFhKHtvdmVyd3JpdGU6ITEsZGF0YTpcImlzRnJvbVN0YXJ0XCIsbGF6eTp5JiZ3KFQpLGltbWVkaWF0ZVJlbmRlcjp5LHN0YWdnZXI6MCxwYXJlbnQ6RH0saSkscCYmKGFbbC5wcm9wXT1wKSx6YSh0Ll9zdGFydEF0PUd0LnNldChSLGEpKSxlPCh0Ll9zdGFydEF0Ll9kcD0wKSYmKEI/dC5fc3RhcnRBdC5yZXZlcnQoaHQpOnQuX3N0YXJ0QXQucmVuZGVyKC0xLCEwKSksdC5felRpbWU9ZSx5KXtpZighZSlyZXR1cm59ZWxzZSBfaW5pdFR3ZWVuKHQuX3N0YXJ0QXQsVixWKTtmb3IodC5fcHQ9dC5fcHRDYWNoZT0wLFQ9QSYmdyhUKXx8VCYmIUEsbj0wO248Ui5sZW5ndGg7bisrKXtpZihoPShvPVJbbl0pLl9nc2FwfHxlYShSKVtuXS5fZ3NhcCx0Ll9wdExvb2t1cFtuXT1jPXt9LGR0W2guaWRdJiZjdC5sZW5ndGgmJm1hKCksZD1FPT09Uj9uOkUuaW5kZXhPZihvKSxsJiYhMSE9PShmPW5ldyBsKS5pbml0KG8scHx8aSx0LGQsRSkmJih0Ll9wdD1zPW5ldyBwZSh0Ll9wdCxvLGYubmFtZSwwLDEsZi5yZW5kZXIsZiwwLGYucHJpb3JpdHkpLGYuX3Byb3BzLmZvckVhY2goZnVuY3Rpb24odCl7Y1t0XT1zfSksZi5wcmlvcml0eSYmKHU9MSkpLCFsfHxwKWZvcihhIGluIGkpcHRbYV0mJihmPV9iKGEsaSx0LGQsbyxFKSk/Zi5wcmlvcml0eSYmKHU9MSk6Y1thXT1zPVh0LmNhbGwodCxvLGEsXCJnZXRcIixpW2FdLGQsRSwwLG0uc3RyaW5nRmlsdGVyKTt0Ll9vcCYmdC5fb3Bbbl0mJnQua2lsbChvLHQuX29wW25dKSx6JiZ0Ll9wdCYmKFZ0PXQsTC5raWxsVHdlZW5zT2YobyxjLHQuZ2xvYmFsVGltZShlKSksXz0hdC5wYXJlbnQsVnQ9MCksdC5fcHQmJlQmJihkdFtoLmlkXT0xKX11JiZkZSh0KSx0Ll9vbkluaXQmJnQuX29uSW5pdCh0KX10Ll9vblVwZGF0ZT1iLHQuX2luaXR0ZWQ9KCF0Ll9vcHx8dC5fcHQpJiYhXyxQJiZlPD0wJiZGLnJlbmRlcihVLCEwLCEwKX0sUXQ9ZnVuY3Rpb24gX3BhcnNlRnVuY09yU3RyaW5nKHQsZSxpLG4sYSl7cmV0dXJuIHModCk/dC5jYWxsKGUsaSxuLGEpOnIodCkmJn50LmluZGV4T2YoXCJyYW5kb20oXCIpP29iKHQpOnR9LEt0PXZ0K1wicmVwZWF0LHJlcGVhdERlbGF5LHlveW8scmVwZWF0UmVmcmVzaCx5b3lvRWFzZSxhdXRvUmV2ZXJ0XCIsWnQ9e307aGEoS3QrXCIsaWQsc3RhZ2dlcixkZWxheSxkdXJhdGlvbixwYXVzZWQsc2Nyb2xsVHJpZ2dlclwiLGZ1bmN0aW9uKHQpe3JldHVybiBadFt0XT0xfSk7dmFyIEd0PWZ1bmN0aW9uKHope2Z1bmN0aW9uIFR3ZWVuKGUscixpLG4pe3ZhciBhO1wibnVtYmVyXCI9PXR5cGVvZiByJiYoaS5kdXJhdGlvbj1yLHI9aSxpPW51bGwpO3ZhciBzLG8sdSxoLGwsZixjLGQscD0oYT16LmNhbGwodGhpcyxuP3I6dmEocikpfHx0aGlzKS52YXJzLF89cC5kdXJhdGlvbixtPXAuZGVsYXksZz1wLmltbWVkaWF0ZVJlbmRlcixUPXAuc3RhZ2dlcixiPXAub3ZlcndyaXRlLHg9cC5rZXlmcmFtZXMsaz1wLmRlZmF1bHRzLE09cC5zY3JvbGxUcmlnZ2VyLE89cC55b3lvRWFzZSxQPXIucGFyZW50fHxMLEM9KCQoZSl8fEooZSk/dChlWzBdKTpcImxlbmd0aFwiaW4gcik/W2VdOk90KGUpO2lmKGEuX3RhcmdldHM9Qy5sZW5ndGg/ZWEoQyk6UihcIkdTQVAgdGFyZ2V0IFwiK2UrXCIgbm90IGZvdW5kLiBodHRwczovL2dyZWVuc29jay5jb21cIiwhai5udWxsVGFyZ2V0V2Fybil8fFtdLGEuX3B0TG9va3VwPVtdLGEuX292ZXJ3cml0ZT1iLHh8fFR8fHkoXyl8fHkobSkpe2lmKHI9YS52YXJzLChzPWEudGltZWxpbmU9bmV3IFV0KHtkYXRhOlwibmVzdGVkXCIsZGVmYXVsdHM6a3x8e30sdGFyZ2V0czpQJiZcIm5lc3RlZFwiPT09UC5kYXRhP1AudmFycy50YXJnZXRzOkN9KSkua2lsbCgpLHMucGFyZW50PXMuX2RwPV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoYSkscy5fc3RhcnQ9MCxUfHx5KF8pfHx5KG0pKXtpZihoPUMubGVuZ3RoLGM9VCYmZWIoVCksdihUKSlmb3IobCBpbiBUKX5LdC5pbmRleE9mKGwpJiYoKGQ9ZHx8e30pW2xdPVRbbF0pO2ZvcihvPTA7bzxoO28rKykodT11YShyLFp0KSkuc3RhZ2dlcj0wLE8mJih1LnlveW9FYXNlPU8pLGQmJnl0KHUsZCksZj1DW29dLHUuZHVyYXRpb249K1F0KF8sX2Fzc2VydFRoaXNJbml0aWFsaXplZChhKSxvLGYsQyksdS5kZWxheT0oK1F0KG0sX2Fzc2VydFRoaXNJbml0aWFsaXplZChhKSxvLGYsQyl8fDApLWEuX2RlbGF5LCFUJiYxPT09aCYmdS5kZWxheSYmKGEuX2RlbGF5PW09dS5kZWxheSxhLl9zdGFydCs9bSx1LmRlbGF5PTApLHMudG8oZix1LGM/YyhvLGYsQyk6MCkscy5fZWFzZT1GdC5ub25lO3MuZHVyYXRpb24oKT9fPW09MDphLnRpbWVsaW5lPTB9ZWxzZSBpZih4KXt2YShxYShzLnZhcnMuZGVmYXVsdHMse2Vhc2U6XCJub25lXCJ9KSkscy5fZWFzZT1ZdCh4LmVhc2V8fHIuZWFzZXx8XCJub25lXCIpO3ZhciBBLFMsRCxFPTA7aWYoJCh4KSl4LmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIHMudG8oQyx0LFwiPlwiKX0pLHMuZHVyYXRpb24oKTtlbHNle2ZvcihsIGluIHU9e30seClcImVhc2VcIj09PWx8fFwiZWFzZUVhY2hcIj09PWx8fGZjKGwseFtsXSx1LHguZWFzZUVhY2gpO2ZvcihsIGluIHUpZm9yKEE9dVtsXS5zb3J0KGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQudC1lLnR9KSxvPUU9MDtvPEEubGVuZ3RoO28rKykoRD17ZWFzZTooUz1BW29dKS5lLGR1cmF0aW9uOihTLnQtKG8/QVtvLTFdLnQ6MCkpLzEwMCpffSlbbF09Uy52LHMudG8oQyxELEUpLEUrPUQuZHVyYXRpb247cy5kdXJhdGlvbigpPF8mJnMudG8oe30se2R1cmF0aW9uOl8tcy5kdXJhdGlvbigpfSl9fV98fGEuZHVyYXRpb24oXz1zLmR1cmF0aW9uKCkpfWVsc2UgYS50aW1lbGluZT0wO3JldHVybiEwIT09Ynx8SXx8KFZ0PV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoYSksTC5raWxsVHdlZW5zT2YoQyksVnQ9MCksS2EoUCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGEpLGkpLHIucmV2ZXJzZWQmJmEucmV2ZXJzZSgpLHIucGF1c2VkJiZhLnBhdXNlZCghMCksKGd8fCFfJiYheCYmYS5fc3RhcnQ9PT1qYShQLl90aW1lKSYmdyhnKSYmZnVuY3Rpb24gX2hhc05vUGF1c2VkQW5jZXN0b3JzKHQpe3JldHVybiF0fHx0Ll90cyYmX2hhc05vUGF1c2VkQW5jZXN0b3JzKHQucGFyZW50KX0oX2Fzc2VydFRoaXNJbml0aWFsaXplZChhKSkmJlwibmVzdGVkXCIhPT1QLmRhdGEpJiYoYS5fdFRpbWU9LVYsYS5yZW5kZXIoTWF0aC5tYXgoMCwtbSl8fDApKSxNJiZMYShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGEpLE0pLGF9X2luaGVyaXRzTG9vc2UoVHdlZW4seik7dmFyIGU9VHdlZW4ucHJvdG90eXBlO3JldHVybiBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIodCxlLHIpe3ZhciBpLG4sYSxzLG8sdSxoLGwsZixjPXRoaXMuX3RpbWUsZD10aGlzLl90RHVyLHA9dGhpcy5fZHVyLF89dDwwLG09ZC1WPHQmJiFfP2Q6dDxWPzA6dDtpZihwKXtpZihtIT09dGhpcy5fdFRpbWV8fCF0fHxyfHwhdGhpcy5faW5pdHRlZCYmdGhpcy5fdFRpbWV8fHRoaXMuX3N0YXJ0QXQmJnRoaXMuX3pUaW1lPDAhPV8pe2lmKGk9bSxsPXRoaXMudGltZWxpbmUsdGhpcy5fcmVwZWF0KXtpZihzPXArdGhpcy5fckRlbGF5LHRoaXMuX3JlcGVhdDwtMSYmXylyZXR1cm4gdGhpcy50b3RhbFRpbWUoMTAwKnMrdCxlLHIpO2lmKGk9amEobSVzKSxtPT09ZD8oYT10aGlzLl9yZXBlYXQsaT1wKTooKGE9fn4obS9zKSkmJmE9PT1tL3MmJihpPXAsYS0tKSxwPGkmJihpPXApKSwodT10aGlzLl95b3lvJiYxJmEpJiYoZj10aGlzLl95RWFzZSxpPXAtaSksbz1UdCh0aGlzLl90VGltZSxzKSxpPT09YyYmIXImJnRoaXMuX2luaXR0ZWQpcmV0dXJuIHRoaXMuX3RUaW1lPW0sdGhpczthIT09byYmKGwmJnRoaXMuX3lFYXNlJiZQYihsLHUpLCF0aGlzLnZhcnMucmVwZWF0UmVmcmVzaHx8dXx8dGhpcy5fbG9ja3x8KHRoaXMuX2xvY2s9cj0xLHRoaXMucmVuZGVyKGphKHMqYSksITApLmludmFsaWRhdGUoKS5fbG9jaz0wKSl9aWYoIXRoaXMuX2luaXR0ZWQpe2lmKE1hKHRoaXMsXz90OmkscixlLG0pKXJldHVybiB0aGlzLl90VGltZT0wLHRoaXM7aWYoYyE9PXRoaXMuX3RpbWUpcmV0dXJuIHRoaXM7aWYocCE9PXRoaXMuX2R1cilyZXR1cm4gdGhpcy5yZW5kZXIodCxlLHIpfWlmKHRoaXMuX3RUaW1lPW0sdGhpcy5fdGltZT1pLCF0aGlzLl9hY3QmJnRoaXMuX3RzJiYodGhpcy5fYWN0PTEsdGhpcy5fbGF6eT0wKSx0aGlzLnJhdGlvPWg9KGZ8fHRoaXMuX2Vhc2UpKGkvcCksdGhpcy5fZnJvbSYmKHRoaXMucmF0aW89aD0xLWgpLGkmJiFjJiYhZSYmKEN0KHRoaXMsXCJvblN0YXJ0XCIpLHRoaXMuX3RUaW1lIT09bSkpcmV0dXJuIHRoaXM7Zm9yKG49dGhpcy5fcHQ7bjspbi5yKGgsbi5kKSxuPW4uX25leHQ7bCYmbC5yZW5kZXIodDwwP3Q6IWkmJnU/LVY6bC5fZHVyKmwuX2Vhc2UoaS90aGlzLl9kdXIpLGUscil8fHRoaXMuX3N0YXJ0QXQmJih0aGlzLl96VGltZT10KSx0aGlzLl9vblVwZGF0ZSYmIWUmJihfJiZDYSh0aGlzLHQsMCxyKSxDdCh0aGlzLFwib25VcGRhdGVcIikpLHRoaXMuX3JlcGVhdCYmYSE9PW8mJnRoaXMudmFycy5vblJlcGVhdCYmIWUmJnRoaXMucGFyZW50JiZDdCh0aGlzLFwib25SZXBlYXRcIiksbSE9PXRoaXMuX3REdXImJm18fHRoaXMuX3RUaW1lIT09bXx8KF8mJiF0aGlzLl9vblVwZGF0ZSYmQ2EodGhpcyx0LDAsITApLCF0JiZwfHwhKG09PT10aGlzLl90RHVyJiYwPHRoaXMuX3RzfHwhbSYmdGhpcy5fdHM8MCl8fHphKHRoaXMsMSksZXx8XyYmIWN8fCEobXx8Y3x8dSl8fChDdCh0aGlzLG09PT1kP1wib25Db21wbGV0ZVwiOlwib25SZXZlcnNlQ29tcGxldGVcIiwhMCksIXRoaXMuX3Byb218fG08ZCYmMDx0aGlzLnRpbWVTY2FsZSgpfHx0aGlzLl9wcm9tKCkpKX19ZWxzZSFmdW5jdGlvbiBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odCxlLHIsaSl7dmFyIG4sYSxzLG89dC5yYXRpbyx1PWU8MHx8IWUmJighdC5fc3RhcnQmJmZ1bmN0aW9uIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQodCl7dmFyIGU9dC5wYXJlbnQ7cmV0dXJuIGUmJmUuX3RzJiZlLl9pbml0dGVkJiYhZS5fbG9jayYmKGUucmF3VGltZSgpPDB8fF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQoZSkpfSh0KSYmKHQuX2luaXR0ZWR8fCFidCh0KSl8fCh0Ll90czwwfHx0Ll9kcC5fdHM8MCkmJiFidCh0KSk/MDoxLGg9dC5fckRlbGF5LGw9MDtpZihoJiZ0Ll9yZXBlYXQmJihsPWt0KDAsdC5fdER1cixlKSxhPVR0KGwsaCksdC5feW95byYmMSZhJiYodT0xLXUpLGEhPT1UdCh0Ll90VGltZSxoKSYmKG89MS11LHQudmFycy5yZXBlYXRSZWZyZXNoJiZ0Ll9pbml0dGVkJiZ0LmludmFsaWRhdGUoKSkpLHUhPT1vfHxCfHxpfHx0Ll96VGltZT09PVZ8fCFlJiZ0Ll96VGltZSl7aWYoIXQuX2luaXR0ZWQmJk1hKHQsZSxpLHIsbCkpcmV0dXJuO2ZvcihzPXQuX3pUaW1lLHQuX3pUaW1lPWV8fChyP1Y6MCkscj1yfHxlJiYhcyx0LnJhdGlvPXUsdC5fZnJvbSYmKHU9MS11KSx0Ll90aW1lPTAsdC5fdFRpbWU9bCxuPXQuX3B0O247KW4ucih1LG4uZCksbj1uLl9uZXh0O2U8MCYmQ2EodCxlLDAsITApLHQuX29uVXBkYXRlJiYhciYmQ3QodCxcIm9uVXBkYXRlXCIpLGwmJnQuX3JlcGVhdCYmIXImJnQucGFyZW50JiZDdCh0LFwib25SZXBlYXRcIiksKGU+PXQuX3REdXJ8fGU8MCkmJnQucmF0aW89PT11JiYodSYmemEodCwxKSxyfHxCfHwoQ3QodCx1P1wib25Db21wbGV0ZVwiOlwib25SZXZlcnNlQ29tcGxldGVcIiwhMCksdC5fcHJvbSYmdC5fcHJvbSgpKSl9ZWxzZSB0Ll96VGltZXx8KHQuX3pUaW1lPWUpfSh0aGlzLHQsZSxyKTtyZXR1cm4gdGhpc30sZS50YXJnZXRzPWZ1bmN0aW9uIHRhcmdldHMoKXtyZXR1cm4gdGhpcy5fdGFyZ2V0c30sZS5pbnZhbGlkYXRlPWZ1bmN0aW9uIGludmFsaWRhdGUodCl7cmV0dXJuIHQmJnRoaXMudmFycy5ydW5CYWNrd2FyZHN8fCh0aGlzLl9zdGFydEF0PTApLHRoaXMuX3B0PXRoaXMuX29wPXRoaXMuX29uVXBkYXRlPXRoaXMuX2xhenk9dGhpcy5yYXRpbz0wLHRoaXMuX3B0TG9va3VwPVtdLHRoaXMudGltZWxpbmUmJnRoaXMudGltZWxpbmUuaW52YWxpZGF0ZSh0KSx6LnByb3RvdHlwZS5pbnZhbGlkYXRlLmNhbGwodGhpcyx0KX0sZS5yZXNldFRvPWZ1bmN0aW9uIHJlc2V0VG8odCxlLHIsaSl7ZHx8RXQud2FrZSgpLHRoaXMuX3RzfHx0aGlzLnBsYXkoKTt2YXIgbixhPU1hdGgubWluKHRoaXMuX2R1ciwodGhpcy5fZHAuX3RpbWUtdGhpcy5fc3RhcnQpKnRoaXMuX3RzKTtyZXR1cm4gdGhpcy5faW5pdHRlZHx8SHQodGhpcyxhKSxuPXRoaXMuX2Vhc2UoYS90aGlzLl9kdXIpLGZ1bmN0aW9uIF91cGRhdGVQcm9wVHdlZW5zKHQsZSxyLGksbixhLHMpe3ZhciBvLHUsaCxsLGY9KHQuX3B0JiZ0Ll9wdENhY2hlfHwodC5fcHRDYWNoZT17fSkpW2VdO2lmKCFmKWZvcihmPXQuX3B0Q2FjaGVbZV09W10saD10Ll9wdExvb2t1cCxsPXQuX3RhcmdldHMubGVuZ3RoO2wtLTspe2lmKChvPWhbbF1bZV0pJiZvLmQmJm8uZC5fcHQpZm9yKG89by5kLl9wdDtvJiZvLnAhPT1lJiZvLmZwIT09ZTspbz1vLl9uZXh0O2lmKCFvKXJldHVybiBXdD0xLHQudmFyc1tlXT1cIis9MFwiLEh0KHQscyksV3Q9MCwxO2YucHVzaChvKX1mb3IobD1mLmxlbmd0aDtsLS07KShvPSh1PWZbbF0pLl9wdHx8dSkucz0haSYmMCE9PWl8fG4/by5zKyhpfHwwKSthKm8uYzppLG8uYz1yLW8ucyx1LmUmJih1LmU9aWEocikrWWEodS5lKSksdS5iJiYodS5iPW8ucytZYSh1LmIpKX0odGhpcyx0LGUscixpLG4sYSk/dGhpcy5yZXNldFRvKHQsZSxyLGkpOihJYSh0aGlzLDApLHRoaXMucGFyZW50fHx4YSh0aGlzLl9kcCx0aGlzLFwiX2ZpcnN0XCIsXCJfbGFzdFwiLHRoaXMuX2RwLl9zb3J0P1wiX3N0YXJ0XCI6MCksdGhpcy5yZW5kZXIoMCkpfSxlLmtpbGw9ZnVuY3Rpb24ga2lsbCh0LGUpe2lmKHZvaWQgMD09PWUmJihlPVwiYWxsXCIpLCEodHx8ZSYmXCJhbGxcIiE9PWUpKXJldHVybiB0aGlzLl9sYXp5PXRoaXMuX3B0PTAsdGhpcy5wYXJlbnQ/dGIodGhpcyk6dGhpcztpZih0aGlzLnRpbWVsaW5lKXt2YXIgaT10aGlzLnRpbWVsaW5lLnRvdGFsRHVyYXRpb24oKTtyZXR1cm4gdGhpcy50aW1lbGluZS5raWxsVHdlZW5zT2YodCxlLFZ0JiYhMCE9PVZ0LnZhcnMub3ZlcndyaXRlKS5fZmlyc3R8fHRiKHRoaXMpLHRoaXMucGFyZW50JiZpIT09dGhpcy50aW1lbGluZS50b3RhbER1cmF0aW9uKCkmJlJhKHRoaXMsdGhpcy5fZHVyKnRoaXMudGltZWxpbmUuX3REdXIvaSwwLDEpLHRoaXN9dmFyIG4sYSxzLG8sdSxoLGwsZj10aGlzLl90YXJnZXRzLGM9dD9PdCh0KTpmLGQ9dGhpcy5fcHRMb29rdXAscD10aGlzLl9wdDtpZigoIWV8fFwiYWxsXCI9PT1lKSYmZnVuY3Rpb24gX2FycmF5c01hdGNoKHQsZSl7Zm9yKHZhciByPXQubGVuZ3RoLGk9cj09PWUubGVuZ3RoO2kmJnItLSYmdFtyXT09PWVbcl07KTtyZXR1cm4gcjwwfShmLGMpKXJldHVyblwiYWxsXCI9PT1lJiYodGhpcy5fcHQ9MCksdGIodGhpcyk7Zm9yKG49dGhpcy5fb3A9dGhpcy5fb3B8fFtdLFwiYWxsXCIhPT1lJiYocihlKSYmKHU9e30saGEoZSxmdW5jdGlvbih0KXtyZXR1cm4gdVt0XT0xfSksZT11KSxlPWZ1bmN0aW9uIF9hZGRBbGlhc2VzVG9WYXJzKHQsZSl7dmFyIHIsaSxuLGEscz10WzBdP2ZhKHRbMF0pLmhhcm5lc3M6MCxvPXMmJnMuYWxpYXNlcztpZighbylyZXR1cm4gZTtmb3IoaSBpbiByPXl0KHt9LGUpLG8paWYoaSBpbiByKWZvcihuPShhPW9baV0uc3BsaXQoXCIsXCIpKS5sZW5ndGg7bi0tOylyW2Fbbl1dPXJbaV07cmV0dXJuIHJ9KGYsZSkpLGw9Zi5sZW5ndGg7bC0tOylpZih+Yy5pbmRleE9mKGZbbF0pKWZvcih1IGluIGE9ZFtsXSxcImFsbFwiPT09ZT8obltsXT1lLG89YSxzPXt9KToocz1uW2xdPW5bbF18fHt9LG89ZSksbykoaD1hJiZhW3VdKSYmKFwia2lsbFwiaW4gaC5kJiYhMCE9PWguZC5raWxsKHUpfHx5YSh0aGlzLGgsXCJfcHRcIiksZGVsZXRlIGFbdV0pLFwiYWxsXCIhPT1zJiYoc1t1XT0xKTtyZXR1cm4gdGhpcy5faW5pdHRlZCYmIXRoaXMuX3B0JiZwJiZ0Yih0aGlzKSx0aGlzfSxUd2Vlbi50bz1mdW5jdGlvbiB0byh0LGUscil7cmV0dXJuIG5ldyBUd2Vlbih0LGUscil9LFR3ZWVuLmZyb209ZnVuY3Rpb24gZnJvbSh0LGUpe3JldHVybiBWYSgxLGFyZ3VtZW50cyl9LFR3ZWVuLmRlbGF5ZWRDYWxsPWZ1bmN0aW9uIGRlbGF5ZWRDYWxsKHQsZSxyLGkpe3JldHVybiBuZXcgVHdlZW4oZSwwLHtpbW1lZGlhdGVSZW5kZXI6ITEsbGF6eTohMSxvdmVyd3JpdGU6ITEsZGVsYXk6dCxvbkNvbXBsZXRlOmUsb25SZXZlcnNlQ29tcGxldGU6ZSxvbkNvbXBsZXRlUGFyYW1zOnIsb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6cixjYWxsYmFja1Njb3BlOml9KX0sVHdlZW4uZnJvbVRvPWZ1bmN0aW9uIGZyb21Ubyh0LGUscil7cmV0dXJuIFZhKDIsYXJndW1lbnRzKX0sVHdlZW4uc2V0PWZ1bmN0aW9uIHNldCh0LGUpe3JldHVybiBlLmR1cmF0aW9uPTAsZS5yZXBlYXREZWxheXx8KGUucmVwZWF0PTApLG5ldyBUd2Vlbih0LGUpfSxUd2Vlbi5raWxsVHdlZW5zT2Y9ZnVuY3Rpb24ga2lsbFR3ZWVuc09mKHQsZSxyKXtyZXR1cm4gTC5raWxsVHdlZW5zT2YodCxlLHIpfSxUd2Vlbn0ocXQpO3FhKEd0LnByb3RvdHlwZSx7X3RhcmdldHM6W10sX2xhenk6MCxfc3RhcnRBdDowLF9vcDowLF9vbkluaXQ6MH0pLGhhKFwic3RhZ2dlclRvLHN0YWdnZXJGcm9tLHN0YWdnZXJGcm9tVG9cIixmdW5jdGlvbihyKXtHdFtyXT1mdW5jdGlvbigpe3ZhciB0PW5ldyBVdCxlPU10LmNhbGwoYXJndW1lbnRzLDApO3JldHVybiBlLnNwbGljZShcInN0YWdnZXJGcm9tVG9cIj09PXI/NTo0LDAsMCksdFtyXS5hcHBseSh0LGUpfX0pO2Z1bmN0aW9uIG5jKHQsZSxyKXtyZXR1cm4gdC5zZXRBdHRyaWJ1dGUoZSxyKX1mdW5jdGlvbiB2Yyh0LGUscixpKXtpLm1TZXQodCxlLGkubS5jYWxsKGkudHdlZW4scixpLm10KSxpKX12YXIgSnQ9ZnVuY3Rpb24gX3NldHRlclBsYWluKHQsZSxyKXtyZXR1cm4gdFtlXT1yfSwkdD1mdW5jdGlvbiBfc2V0dGVyRnVuYyh0LGUscil7cmV0dXJuIHRbZV0ocil9LGVlPWZ1bmN0aW9uIF9zZXR0ZXJGdW5jV2l0aFBhcmFtKHQsZSxyLGkpe3JldHVybiB0W2VdKGkuZnAscil9LHJlPWZ1bmN0aW9uIF9nZXRTZXR0ZXIodCxlKXtyZXR1cm4gcyh0W2VdKT8kdDp1KHRbZV0pJiZ0LnNldEF0dHJpYnV0ZT9uYzpKdH0sbmU9ZnVuY3Rpb24gX3JlbmRlclBsYWluKHQsZSl7cmV0dXJuIGUuc2V0KGUudCxlLnAsTWF0aC5yb3VuZCgxZTYqKGUucytlLmMqdCkpLzFlNixlKX0sYWU9ZnVuY3Rpb24gX3JlbmRlckJvb2xlYW4odCxlKXtyZXR1cm4gZS5zZXQoZS50LGUucCwhIShlLnMrZS5jKnQpLGUpfSxzZT1mdW5jdGlvbiBfcmVuZGVyQ29tcGxleFN0cmluZyh0LGUpe3ZhciByPWUuX3B0LGk9XCJcIjtpZighdCYmZS5iKWk9ZS5iO2Vsc2UgaWYoMT09PXQmJmUuZSlpPWUuZTtlbHNle2Zvcig7cjspaT1yLnArKHIubT9yLm0oci5zK3IuYyp0KTpNYXRoLnJvdW5kKDFlNCooci5zK3IuYyp0KSkvMWU0KStpLHI9ci5fbmV4dDtpKz1lLmN9ZS5zZXQoZS50LGUucCxpLGUpfSxvZT1mdW5jdGlvbiBfcmVuZGVyUHJvcFR3ZWVucyh0LGUpe2Zvcih2YXIgcj1lLl9wdDtyOylyLnIodCxyLmQpLHI9ci5fbmV4dH0sbGU9ZnVuY3Rpb24gX2FkZFBsdWdpbk1vZGlmaWVyKHQsZSxyLGkpe2Zvcih2YXIgbixhPXRoaXMuX3B0O2E7KW49YS5fbmV4dCxhLnA9PT1pJiZhLm1vZGlmaWVyKHQsZSxyKSxhPW59LGZlPWZ1bmN0aW9uIF9raWxsUHJvcFR3ZWVuc09mKHQpe2Zvcih2YXIgZSxyLGk9dGhpcy5fcHQ7aTspcj1pLl9uZXh0LGkucD09PXQmJiFpLm9wfHxpLm9wPT09dD95YSh0aGlzLGksXCJfcHRcIik6aS5kZXB8fChlPTEpLGk9cjtyZXR1cm4hZX0sZGU9ZnVuY3Rpb24gX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSh0KXtmb3IodmFyIGUscixpLG4sYT10Ll9wdDthOyl7Zm9yKGU9YS5fbmV4dCxyPWk7ciYmci5wcj5hLnByOylyPXIuX25leHQ7KGEuX3ByZXY9cj9yLl9wcmV2Om4pP2EuX3ByZXYuX25leHQ9YTppPWEsKGEuX25leHQ9cik/ci5fcHJldj1hOm49YSxhPWV9dC5fcHQ9aX0scGU9KFByb3BUd2Vlbi5wcm90b3R5cGUubW9kaWZpZXI9ZnVuY3Rpb24gbW9kaWZpZXIodCxlLHIpe3RoaXMubVNldD10aGlzLm1TZXR8fHRoaXMuc2V0LHRoaXMuc2V0PXZjLHRoaXMubT10LHRoaXMubXQ9cix0aGlzLnR3ZWVuPWV9LFByb3BUd2Vlbik7ZnVuY3Rpb24gUHJvcFR3ZWVuKHQsZSxyLGksbixhLHMsbyx1KXt0aGlzLnQ9ZSx0aGlzLnM9aSx0aGlzLmM9bix0aGlzLnA9cix0aGlzLnI9YXx8bmUsdGhpcy5kPXN8fHRoaXMsdGhpcy5zZXQ9b3x8SnQsdGhpcy5wcj11fHwwLCh0aGlzLl9uZXh0PXQpJiYodC5fcHJldj10aGlzKX1oYSh2dCtcInBhcmVudCxkdXJhdGlvbixlYXNlLGRlbGF5LG92ZXJ3cml0ZSxydW5CYWNrd2FyZHMsc3RhcnRBdCx5b3lvLGltbWVkaWF0ZVJlbmRlcixyZXBlYXQscmVwZWF0RGVsYXksZGF0YSxwYXVzZWQscmV2ZXJzZWQsbGF6eSxjYWxsYmFja1Njb3BlLHN0cmluZ0ZpbHRlcixpZCx5b3lvRWFzZSxzdGFnZ2VyLGluaGVyaXQscmVwZWF0UmVmcmVzaCxrZXlmcmFtZXMsYXV0b1JldmVydCxzY3JvbGxUcmlnZ2VyXCIsZnVuY3Rpb24odCl7cmV0dXJuIGZ0W3RdPTF9KSxvdC5Ud2Vlbk1heD1vdC5Ud2VlbkxpdGU9R3Qsb3QuVGltZWxpbmVMaXRlPW90LlRpbWVsaW5lTWF4PVV0LEw9bmV3IFV0KHtzb3J0Q2hpbGRyZW46ITEsZGVmYXVsdHM6cSxhdXRvUmVtb3ZlQ2hpbGRyZW46ITAsaWQ6XCJyb290XCIsc21vb3RoQ2hpbGRUaW1pbmc6ITB9KSxqLnN0cmluZ0ZpbHRlcj1FYjtmdW5jdGlvbiBDYyh0KXtyZXR1cm4oVGVbdF18fHdlKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQoKX0pfWZ1bmN0aW9uIERjKCl7dmFyIHQ9RGF0ZS5ub3coKSxvPVtdOzI8dC14ZSYmKENjKFwibWF0Y2hNZWRpYUluaXRcIikseWUuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZSxyLGksbixhPXQucXVlcmllcyxzPXQuY29uZGl0aW9ucztmb3IociBpbiBhKShlPWgubWF0Y2hNZWRpYShhW3JdKS5tYXRjaGVzKSYmKGk9MSksZSE9PXNbcl0mJihzW3JdPWUsbj0xKTtuJiYodC5yZXZlcnQoKSxpJiZvLnB1c2godCkpfSksQ2MoXCJtYXRjaE1lZGlhUmV2ZXJ0XCIpLG8uZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gdC5vbk1hdGNoKHQpfSkseGU9dCxDYyhcIm1hdGNoTWVkaWFcIikpfXZhciBfZSx5ZT1bXSxUZT17fSx3ZT1bXSx4ZT0wLGtlPSgoX2U9Q29udGV4dC5wcm90b3R5cGUpLmFkZD1mdW5jdGlvbiBhZGQodCxpLG4pe2Z1bmN0aW9uIEN3KCl7dmFyIHQsZT1sLHI9YS5zZWxlY3RvcjtyZXR1cm4gZSYmZSE9PWEmJmUuZGF0YS5wdXNoKGEpLG4mJihhLnNlbGVjdG9yPWNiKG4pKSxsPWEsdD1pLmFwcGx5KGEsYXJndW1lbnRzKSxzKHQpJiZhLl9yLnB1c2godCksbD1lLGEuc2VsZWN0b3I9cixhLmlzUmV2ZXJ0ZWQ9ITEsdH1zKHQpJiYobj1pLGk9dCx0PXMpO3ZhciBhPXRoaXM7cmV0dXJuIGEubGFzdD1Ddyx0PT09cz9DdyhhKTp0P2FbdF09Q3c6Q3d9LF9lLmlnbm9yZT1mdW5jdGlvbiBpZ25vcmUodCl7dmFyIGU9bDtsPW51bGwsdCh0aGlzKSxsPWV9LF9lLmdldFR3ZWVucz1mdW5jdGlvbiBnZXRUd2VlbnMoKXt2YXIgZT1bXTtyZXR1cm4gdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBDb250ZXh0P2UucHVzaC5hcHBseShlLHQuZ2V0VHdlZW5zKCkpOnQgaW5zdGFuY2VvZiBHdCYmISh0LnBhcmVudCYmXCJuZXN0ZWRcIj09PXQucGFyZW50LmRhdGEpJiZlLnB1c2godCl9KSxlfSxfZS5jbGVhcj1mdW5jdGlvbiBjbGVhcigpe3RoaXMuX3IubGVuZ3RoPXRoaXMuZGF0YS5sZW5ndGg9MH0sX2Uua2lsbD1mdW5jdGlvbiBraWxsKGUsdCl7dmFyIHI9dGhpcztpZihlKXt2YXIgaT10aGlzLmdldFR3ZWVucygpO3RoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKHQpe1wiaXNGbGlwXCI9PT10LmRhdGEmJih0LnJldmVydCgpLHQuZ2V0Q2hpbGRyZW4oITAsITAsITEpLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIGkuc3BsaWNlKGkuaW5kZXhPZih0KSwxKX0pKX0pLGkubWFwKGZ1bmN0aW9uKHQpe3JldHVybntnOnQuZ2xvYmFsVGltZSgwKSx0OnR9fSkuc29ydChmdW5jdGlvbih0LGUpe3JldHVybiBlLmctdC5nfHwtMX0pLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIHQudC5yZXZlcnQoZSl9KSx0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4hKHQgaW5zdGFuY2VvZiBxdCkmJnQucmV2ZXJ0JiZ0LnJldmVydChlKX0pLHRoaXMuX3IuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gdChlLHIpfSksdGhpcy5pc1JldmVydGVkPSEwfWVsc2UgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIHQua2lsbCYmdC5raWxsKCl9KTtpZih0aGlzLmNsZWFyKCksdCl7dmFyIG49eWUuaW5kZXhPZih0aGlzKTt+biYmeWUuc3BsaWNlKG4sMSl9fSxfZS5yZXZlcnQ9ZnVuY3Rpb24gcmV2ZXJ0KHQpe3RoaXMua2lsbCh0fHx7fSl9LENvbnRleHQpO2Z1bmN0aW9uIENvbnRleHQodCxlKXt0aGlzLnNlbGVjdG9yPWUmJmNiKGUpLHRoaXMuZGF0YT1bXSx0aGlzLl9yPVtdLHRoaXMuaXNSZXZlcnRlZD0hMSx0JiZ0aGlzLmFkZCh0KX12YXIgTWUsT2U9KChNZT1NYXRjaE1lZGlhLnByb3RvdHlwZSkuYWRkPWZ1bmN0aW9uIGFkZCh0LGUscil7dih0KXx8KHQ9e21hdGNoZXM6dH0pO3ZhciBpLG4sYSxzPW5ldyBrZSgwLHJ8fHRoaXMuc2NvcGUpLG89cy5jb25kaXRpb25zPXt9O2ZvcihuIGluIHRoaXMuY29udGV4dHMucHVzaChzKSxlPXMuYWRkKFwib25NYXRjaFwiLGUpLHMucXVlcmllcz10KVwiYWxsXCI9PT1uP2E9MTooaT1oLm1hdGNoTWVkaWEodFtuXSkpJiYoeWUuaW5kZXhPZihzKTwwJiZ5ZS5wdXNoKHMpLChvW25dPWkubWF0Y2hlcykmJihhPTEpLGkuYWRkTGlzdGVuZXI/aS5hZGRMaXN0ZW5lcihEYyk6aS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsRGMpKTtyZXR1cm4gYSYmZShzKSx0aGlzfSxNZS5yZXZlcnQ9ZnVuY3Rpb24gcmV2ZXJ0KHQpe3RoaXMua2lsbCh0fHx7fSl9LE1lLmtpbGw9ZnVuY3Rpb24ga2lsbChlKXt0aGlzLmNvbnRleHRzLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIHQua2lsbChlLCEwKX0pfSxNYXRjaE1lZGlhKTtmdW5jdGlvbiBNYXRjaE1lZGlhKHQpe3RoaXMuY29udGV4dHM9W10sdGhpcy5zY29wZT10fXZhciBQZT17cmVnaXN0ZXJQbHVnaW46ZnVuY3Rpb24gcmVnaXN0ZXJQbHVnaW4oKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxlPW5ldyBBcnJheSh0KSxyPTA7cjx0O3IrKyllW3JdPWFyZ3VtZW50c1tyXTtlLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVQbHVnaW4odCl7dmFyIGU9KHQ9IXQubmFtZSYmdC5kZWZhdWx0fHx0KS5uYW1lLHI9cyh0KSxpPWUmJiFyJiZ0LmluaXQ/ZnVuY3Rpb24oKXt0aGlzLl9wcm9wcz1bXX06dCxuPXtpbml0OlQscmVuZGVyOm9lLGFkZDpYdCxraWxsOmZlLG1vZGlmaWVyOmxlLHJhd1ZhcnM6MH0sYT17dGFyZ2V0VGVzdDowLGdldDowLGdldFNldHRlcjpyZSxhbGlhc2VzOnt9LHJlZ2lzdGVyOjB9O2lmKHp0KCksdCE9PWkpe2lmKHB0W2VdKXJldHVybjtxYShpLHFhKHVhKHQsbiksYSkpLHl0KGkucHJvdG90eXBlLHl0KG4sdWEodCxhKSkpLHB0W2kucHJvcD1lXT1pLHQudGFyZ2V0VGVzdCYmKGd0LnB1c2goaSksZnRbZV09MSksZT0oXCJjc3NcIj09PWU/XCJDU1NcIjplLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc3Vic3RyKDEpKStcIlBsdWdpblwifVMoZSxpKSx0LnJlZ2lzdGVyJiZ0LnJlZ2lzdGVyKENlLGkscGUpfSh0KX0pfSx0aW1lbGluZTpmdW5jdGlvbiB0aW1lbGluZSh0KXtyZXR1cm4gbmV3IFV0KHQpfSxnZXRUd2VlbnNPZjpmdW5jdGlvbiBnZXRUd2VlbnNPZih0LGUpe3JldHVybiBMLmdldFR3ZWVuc09mKHQsZSl9LGdldFByb3BlcnR5OmZ1bmN0aW9uIGdldFByb3BlcnR5KGksdCxlLG4pe3IoaSkmJihpPU90KGkpWzBdKTt2YXIgYT1mYShpfHx7fSkuZ2V0LHM9ZT9wYTpvYTtyZXR1cm5cIm5hdGl2ZVwiPT09ZSYmKGU9XCJcIiksaT90P3MoKHB0W3RdJiZwdFt0XS5nZXR8fGEpKGksdCxlLG4pKTpmdW5jdGlvbih0LGUscil7cmV0dXJuIHMoKHB0W3RdJiZwdFt0XS5nZXR8fGEpKGksdCxlLHIpKX06aX0scXVpY2tTZXR0ZXI6ZnVuY3Rpb24gcXVpY2tTZXR0ZXIocixlLGkpe2lmKDE8KHI9T3QocikpLmxlbmd0aCl7dmFyIG49ci5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIENlLnF1aWNrU2V0dGVyKHQsZSxpKX0pLGE9bi5sZW5ndGg7cmV0dXJuIGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1hO2UtLTspbltlXSh0KX19cj1yWzBdfHx7fTt2YXIgcz1wdFtlXSxvPWZhKHIpLHU9by5oYXJuZXNzJiYoby5oYXJuZXNzLmFsaWFzZXN8fHt9KVtlXXx8ZSxoPXM/ZnVuY3Rpb24odCl7dmFyIGU9bmV3IHM7Yy5fcHQ9MCxlLmluaXQocixpP3QraTp0LGMsMCxbcl0pLGUucmVuZGVyKDEsZSksYy5fcHQmJm9lKDEsYyl9Om8uc2V0KHIsdSk7cmV0dXJuIHM/aDpmdW5jdGlvbih0KXtyZXR1cm4gaChyLHUsaT90K2k6dCxvLDEpfX0scXVpY2tUbzpmdW5jdGlvbiBxdWlja1RvKHQsaSxlKXtmdW5jdGlvbiBVeCh0LGUscil7cmV0dXJuIG4ucmVzZXRUbyhpLHQsZSxyKX12YXIgcixuPUNlLnRvKHQseXQoKChyPXt9KVtpXT1cIis9MC4xXCIsci5wYXVzZWQ9ITAsciksZXx8e30pKTtyZXR1cm4gVXgudHdlZW49bixVeH0saXNUd2VlbmluZzpmdW5jdGlvbiBpc1R3ZWVuaW5nKHQpe3JldHVybiAwPEwuZ2V0VHdlZW5zT2YodCwhMCkubGVuZ3RofSxkZWZhdWx0czpmdW5jdGlvbiBkZWZhdWx0cyh0KXtyZXR1cm4gdCYmdC5lYXNlJiYodC5lYXNlPVl0KHQuZWFzZSxxLmVhc2UpKSx0YShxLHR8fHt9KX0sY29uZmlnOmZ1bmN0aW9uIGNvbmZpZyh0KXtyZXR1cm4gdGEoaix0fHx7fSl9LHJlZ2lzdGVyRWZmZWN0OmZ1bmN0aW9uIHJlZ2lzdGVyRWZmZWN0KHQpe3ZhciBpPXQubmFtZSxuPXQuZWZmZWN0LGU9dC5wbHVnaW5zLGE9dC5kZWZhdWx0cyxyPXQuZXh0ZW5kVGltZWxpbmU7KGV8fFwiXCIpLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiB0JiYhcHRbdF0mJiFvdFt0XSYmUihpK1wiIGVmZmVjdCByZXF1aXJlcyBcIit0K1wiIHBsdWdpbi5cIil9KSxfdFtpXT1mdW5jdGlvbih0LGUscil7cmV0dXJuIG4oT3QodCkscWEoZXx8e30sYSkscil9LHImJihVdC5wcm90b3R5cGVbaV09ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0aGlzLmFkZChfdFtpXSh0LHYoZSk/ZToocj1lKSYme30sdGhpcykscil9KX0scmVnaXN0ZXJFYXNlOmZ1bmN0aW9uIHJlZ2lzdGVyRWFzZSh0LGUpe0Z0W3RdPVl0KGUpfSxwYXJzZUVhc2U6ZnVuY3Rpb24gcGFyc2VFYXNlKHQsZSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/WXQodCxlKTpGdH0sZ2V0QnlJZDpmdW5jdGlvbiBnZXRCeUlkKHQpe3JldHVybiBMLmdldEJ5SWQodCl9LGV4cG9ydFJvb3Q6ZnVuY3Rpb24gZXhwb3J0Um9vdCh0LGUpe3ZvaWQgMD09PXQmJih0PXt9KTt2YXIgcixpLG49bmV3IFV0KHQpO2ZvcihuLnNtb290aENoaWxkVGltaW5nPXcodC5zbW9vdGhDaGlsZFRpbWluZyksTC5yZW1vdmUobiksbi5fZHA9MCxuLl90aW1lPW4uX3RUaW1lPUwuX3RpbWUscj1MLl9maXJzdDtyOylpPXIuX25leHQsIWUmJiFyLl9kdXImJnIgaW5zdGFuY2VvZiBHdCYmci52YXJzLm9uQ29tcGxldGU9PT1yLl90YXJnZXRzWzBdfHxLYShuLHIsci5fc3RhcnQtci5fZGVsYXkpLHI9aTtyZXR1cm4gS2EoTCxuLDApLG59LGNvbnRleHQ6ZnVuY3Rpb24gY29udGV4dCh0LGUpe3JldHVybiB0P25ldyBrZSh0LGUpOmx9LG1hdGNoTWVkaWE6ZnVuY3Rpb24gbWF0Y2hNZWRpYSh0KXtyZXR1cm4gbmV3IE9lKHQpfSxtYXRjaE1lZGlhUmVmcmVzaDpmdW5jdGlvbiBtYXRjaE1lZGlhUmVmcmVzaCgpe3JldHVybiB5ZS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlLHIsaT10LmNvbmRpdGlvbnM7Zm9yKHIgaW4gaSlpW3JdJiYoaVtyXT0hMSxlPTEpO2UmJnQucmV2ZXJ0KCl9KXx8RGMoKX0sYWRkRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKHQsZSl7dmFyIHI9VGVbdF18fChUZVt0XT1bXSk7fnIuaW5kZXhPZihlKXx8ci5wdXNoKGUpfSxyZW1vdmVFdmVudExpc3RlbmVyOmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIodCxlKXt2YXIgcj1UZVt0XSxpPXImJnIuaW5kZXhPZihlKTswPD1pJiZyLnNwbGljZShpLDEpfSx1dGlsczp7d3JhcDpmdW5jdGlvbiB3cmFwKGUsdCxyKXt2YXIgaT10LWU7cmV0dXJuICQoZSk/bGIoZSx3cmFwKDAsZS5sZW5ndGgpLHQpOldhKHIsZnVuY3Rpb24odCl7cmV0dXJuKGkrKHQtZSklaSklaStlfSl9LHdyYXBZb3lvOmZ1bmN0aW9uIHdyYXBZb3lvKGUsdCxyKXt2YXIgaT10LWUsbj0yKmk7cmV0dXJuICQoZSk/bGIoZSx3cmFwWW95bygwLGUubGVuZ3RoLTEpLHQpOldhKHIsZnVuY3Rpb24odCl7cmV0dXJuIGUrKGk8KHQ9KG4rKHQtZSklbiklbnx8MCk/bi10OnQpfSl9LGRpc3RyaWJ1dGU6ZWIscmFuZG9tOmhiLHNuYXA6Z2Isbm9ybWFsaXplOmZ1bmN0aW9uIG5vcm1hbGl6ZSh0LGUscil7cmV0dXJuIFB0KHQsZSwwLDEscil9LGdldFVuaXQ6WWEsY2xhbXA6ZnVuY3Rpb24gY2xhbXAoZSxyLHQpe3JldHVybiBXYSh0LGZ1bmN0aW9uKHQpe3JldHVybiBrdChlLHIsdCl9KX0sc3BsaXRDb2xvcjp6Yix0b0FycmF5Ok90LHNlbGVjdG9yOmNiLG1hcFJhbmdlOlB0LHBpcGU6ZnVuY3Rpb24gcGlwZSgpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGU9bmV3IEFycmF5KHQpLHI9MDtyPHQ7cisrKWVbcl09YXJndW1lbnRzW3JdO3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZS5yZWR1Y2UoZnVuY3Rpb24odCxlKXtyZXR1cm4gZSh0KX0sdCl9fSx1bml0aXplOmZ1bmN0aW9uIHVuaXRpemUoZSxyKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGUocGFyc2VGbG9hdCh0KSkrKHJ8fFlhKHQpKX19LGludGVycG9sYXRlOmZ1bmN0aW9uIGludGVycG9sYXRlKGUsaSx0LG4pe3ZhciBhPWlzTmFOKGUraSk/MDpmdW5jdGlvbih0KXtyZXR1cm4oMS10KSplK3QqaX07aWYoIWEpe3ZhciBzLG8sdSxoLGwsZj1yKGUpLGM9e307aWYoITA9PT10JiYobj0xKSYmKHQ9bnVsbCksZillPXtwOmV9LGk9e3A6aX07ZWxzZSBpZigkKGUpJiYhJChpKSl7Zm9yKHU9W10saD1lLmxlbmd0aCxsPWgtMixvPTE7bzxoO28rKyl1LnB1c2goaW50ZXJwb2xhdGUoZVtvLTFdLGVbb10pKTtoLS0sYT1mdW5jdGlvbiBmdW5jKHQpe3QqPWg7dmFyIGU9TWF0aC5taW4obCx+fnQpO3JldHVybiB1W2VdKHQtZSl9LHQ9aX1lbHNlIG58fChlPXl0KCQoZSk/W106e30sZSkpO2lmKCF1KXtmb3IocyBpbiBpKVh0LmNhbGwoYyxlLHMsXCJnZXRcIixpW3NdKTthPWZ1bmN0aW9uIGZ1bmModCl7cmV0dXJuIG9lKHQsYyl8fChmP2UucDplKX19fXJldHVybiBXYSh0LGEpfSxzaHVmZmxlOmRifSxpbnN0YWxsOlAsZWZmZWN0czpfdCx0aWNrZXI6RXQsdXBkYXRlUm9vdDpVdC51cGRhdGVSb290LHBsdWdpbnM6cHQsZ2xvYmFsVGltZWxpbmU6TCxjb3JlOntQcm9wVHdlZW46cGUsZ2xvYmFsczpTLFR3ZWVuOkd0LFRpbWVsaW5lOlV0LEFuaW1hdGlvbjpxdCxnZXRDYWNoZTpmYSxfcmVtb3ZlTGlua2VkTGlzdEl0ZW06eWEscmV2ZXJ0aW5nOmZ1bmN0aW9uIHJldmVydGluZygpe3JldHVybiBCfSxjb250ZXh0OmZ1bmN0aW9uIGNvbnRleHQodCl7cmV0dXJuIHQmJmwmJihsLmRhdGEucHVzaCh0KSx0Ll9jdHg9bCksbH0sc3VwcHJlc3NPdmVyd3JpdGVzOmZ1bmN0aW9uIHN1cHByZXNzT3ZlcndyaXRlcyh0KXtyZXR1cm4gST10fX19O2hhKFwidG8sZnJvbSxmcm9tVG8sZGVsYXllZENhbGwsc2V0LGtpbGxUd2VlbnNPZlwiLGZ1bmN0aW9uKHQpe3JldHVybiBQZVt0XT1HdFt0XX0pLEV0LmFkZChVdC51cGRhdGVSb290KSxjPVBlLnRvKHt9LHtkdXJhdGlvbjowfSk7ZnVuY3Rpb24gSGModCxlKXtmb3IodmFyIHI9dC5fcHQ7ciYmci5wIT09ZSYmci5vcCE9PWUmJnIuZnAhPT1lOylyPXIuX25leHQ7cmV0dXJuIHJ9ZnVuY3Rpb24gSmModCxhKXtyZXR1cm57bmFtZTp0LHJhd1ZhcnM6MSxpbml0OmZ1bmN0aW9uIGluaXQodCxuLGUpe2UuX29uSW5pdD1mdW5jdGlvbih0KXt2YXIgZSxpO2lmKHIobikmJihlPXt9LGhhKG4sZnVuY3Rpb24odCl7cmV0dXJuIGVbdF09MX0pLG49ZSksYSl7Zm9yKGkgaW4gZT17fSxuKWVbaV09YShuW2ldKTtuPWV9IWZ1bmN0aW9uIF9hZGRNb2RpZmllcnModCxlKXt2YXIgcixpLG4sYT10Ll90YXJnZXRzO2ZvcihyIGluIGUpZm9yKGk9YS5sZW5ndGg7aS0tOykobj0obj10Ll9wdExvb2t1cFtpXVtyXSkmJm4uZCkmJihuLl9wdCYmKG49SGMobixyKSksbiYmbi5tb2RpZmllciYmbi5tb2RpZmllcihlW3JdLHQsYVtpXSxyKSl9KHQsbil9fX19dmFyIENlPVBlLnJlZ2lzdGVyUGx1Z2luKHtuYW1lOlwiYXR0clwiLGluaXQ6ZnVuY3Rpb24gaW5pdCh0LGUscixpLG4pe3ZhciBhLHMsbztmb3IoYSBpbiB0aGlzLnR3ZWVuPXIsZSlvPXQuZ2V0QXR0cmlidXRlKGEpfHxcIlwiLChzPXRoaXMuYWRkKHQsXCJzZXRBdHRyaWJ1dGVcIiwob3x8MCkrXCJcIixlW2FdLGksbiwwLDAsYSkpLm9wPWEscy5iPW8sdGhpcy5fcHJvcHMucHVzaChhKX0scmVuZGVyOmZ1bmN0aW9uIHJlbmRlcih0LGUpe2Zvcih2YXIgcj1lLl9wdDtyOylCP3Iuc2V0KHIudCxyLnAsci5iLHIpOnIucih0LHIuZCkscj1yLl9uZXh0fX0se25hbWU6XCJlbmRBcnJheVwiLGluaXQ6ZnVuY3Rpb24gaW5pdCh0LGUpe2Zvcih2YXIgcj1lLmxlbmd0aDtyLS07KXRoaXMuYWRkKHQscix0W3JdfHwwLGVbcl0sMCwwLDAsMCwwLDEpfX0sSmMoXCJyb3VuZFByb3BzXCIsZmIpLEpjKFwibW9kaWZpZXJzXCIpLEpjKFwic25hcFwiLGdiKSl8fFBlO0d0LnZlcnNpb249VXQudmVyc2lvbj1DZS52ZXJzaW9uPVwiMy4xMS4zXCIsbz0xLHgoKSYmenQoKTtmdW5jdGlvbiB0ZCh0LGUpe3JldHVybiBlLnNldChlLnQsZS5wLE1hdGgucm91bmQoMWU0KihlLnMrZS5jKnQpKS8xZTQrZS51LGUpfWZ1bmN0aW9uIHVkKHQsZSl7cmV0dXJuIGUuc2V0KGUudCxlLnAsMT09PXQ/ZS5lOk1hdGgucm91bmQoMWU0KihlLnMrZS5jKnQpKS8xZTQrZS51LGUpfWZ1bmN0aW9uIHZkKHQsZSl7cmV0dXJuIGUuc2V0KGUudCxlLnAsdD9NYXRoLnJvdW5kKDFlNCooZS5zK2UuYyp0KSkvMWU0K2UudTplLmIsZSl9ZnVuY3Rpb24gd2QodCxlKXt2YXIgcj1lLnMrZS5jKnQ7ZS5zZXQoZS50LGUucCx+fihyKyhyPDA/LS41Oi41KSkrZS51LGUpfWZ1bmN0aW9uIHhkKHQsZSl7cmV0dXJuIGUuc2V0KGUudCxlLnAsdD9lLmU6ZS5iLGUpfWZ1bmN0aW9uIHlkKHQsZSl7cmV0dXJuIGUuc2V0KGUudCxlLnAsMSE9PXQ/ZS5iOmUuZSxlKX1mdW5jdGlvbiB6ZCh0LGUscil7cmV0dXJuIHQuc3R5bGVbZV09cn1mdW5jdGlvbiBBZCh0LGUscil7cmV0dXJuIHQuc3R5bGUuc2V0UHJvcGVydHkoZSxyKX1mdW5jdGlvbiBCZCh0LGUscil7cmV0dXJuIHQuX2dzYXBbZV09cn1mdW5jdGlvbiBDZCh0LGUscil7cmV0dXJuIHQuX2dzYXAuc2NhbGVYPXQuX2dzYXAuc2NhbGVZPXJ9ZnVuY3Rpb24gRGQodCxlLHIsaSxuKXt2YXIgYT10Ll9nc2FwO2Euc2NhbGVYPWEuc2NhbGVZPXIsYS5yZW5kZXJUcmFuc2Zvcm0obixhKX1mdW5jdGlvbiBFZCh0LGUscixpLG4pe3ZhciBhPXQuX2dzYXA7YVtlXT1yLGEucmVuZGVyVHJhbnNmb3JtKG4sYSl9ZnVuY3Rpb24gSGQodCxlKXt2YXIgcj10aGlzLGk9dGhpcy50YXJnZXQsbj1pLnN0eWxlO2lmKHQgaW4gcnIpe2lmKHRoaXMudGZtPXRoaXMudGZtfHx7fSxcInRyYW5zZm9ybVwiIT09dCYmKH4odD1oclt0XXx8dCkuaW5kZXhPZihcIixcIik/dC5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gci50Zm1bdF09bXIoaSx0KX0pOnRoaXMudGZtW3RdPWkuX2dzYXAueD9pLl9nc2FwW3RdOm1yKGksdCkpLDA8PXRoaXMucHJvcHMuaW5kZXhPZihscikpcmV0dXJuO2kuX2dzYXAuc3ZnJiYodGhpcy5zdmdvPWkuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpLHRoaXMucHJvcHMucHVzaChmcixlLFwiXCIpKSx0PWxyfShufHxlKSYmdGhpcy5wcm9wcy5wdXNoKHQsZSxuW3RdKX1mdW5jdGlvbiBJZCh0KXt0LnRyYW5zbGF0ZSYmKHQucmVtb3ZlUHJvcGVydHkoXCJ0cmFuc2xhdGVcIiksdC5yZW1vdmVQcm9wZXJ0eShcInNjYWxlXCIpLHQucmVtb3ZlUHJvcGVydHkoXCJyb3RhdGVcIikpfWZ1bmN0aW9uIEpkKCl7dmFyIHQsZSxyPXRoaXMucHJvcHMsaT10aGlzLnRhcmdldCxuPWkuc3R5bGUsYT1pLl9nc2FwO2Zvcih0PTA7dDxyLmxlbmd0aDt0Kz0zKXJbdCsxXT9pW3JbdF1dPXJbdCsyXTpyW3QrMl0/bltyW3RdXT1yW3QrMl06bi5yZW1vdmVQcm9wZXJ0eShyW3RdLnJlcGxhY2Uoc3IsXCItJDFcIikudG9Mb3dlckNhc2UoKSk7aWYodGhpcy50Zm0pe2ZvcihlIGluIHRoaXMudGZtKWFbZV09dGhpcy50Zm1bZV07YS5zdmcmJihhLnJlbmRlclRyYW5zZm9ybSgpLGkuc2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIsdGhpcy5zdmdvfHxcIlwiKSksISh0PUZlKCkpfHx0LmlzU3RhcnR8fG5bbHJdfHwoSWQobiksYS51bmNhY2hlPTEpfX1mdW5jdGlvbiBLZCh0LGUpe3ZhciByPXt0YXJnZXQ6dCxwcm9wczpbXSxyZXZlcnQ6SmQsc2F2ZTpIZH07cmV0dXJuIGUmJmUuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIHIuc2F2ZSh0KX0pLHJ9ZnVuY3Rpb24gTWQodCxlKXt2YXIgcj1TZS5jcmVhdGVFbGVtZW50TlM/U2UuY3JlYXRlRWxlbWVudE5TKChlfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIikucmVwbGFjZSgvXmh0dHBzLyxcImh0dHBcIiksdCk6U2UuY3JlYXRlRWxlbWVudCh0KTtyZXR1cm4gci5zdHlsZT9yOlNlLmNyZWF0ZUVsZW1lbnQodCl9ZnVuY3Rpb24gTmQodCxlLHIpe3ZhciBpPWdldENvbXB1dGVkU3R5bGUodCk7cmV0dXJuIGlbZV18fGkuZ2V0UHJvcGVydHlWYWx1ZShlLnJlcGxhY2Uoc3IsXCItJDFcIikudG9Mb3dlckNhc2UoKSl8fGkuZ2V0UHJvcGVydHlWYWx1ZShlKXx8IXImJk5kKHQsZHIoZSl8fGUsMSl8fFwiXCJ9ZnVuY3Rpb24gUWQoKXsoZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3d9KSgpJiZ3aW5kb3cuZG9jdW1lbnQmJihBZT13aW5kb3csU2U9QWUuZG9jdW1lbnQsUmU9U2UuZG9jdW1lbnRFbGVtZW50LEVlPU1kKFwiZGl2XCIpfHx7c3R5bGU6e319LE1kKFwiZGl2XCIpLGxyPWRyKGxyKSxmcj1scitcIk9yaWdpblwiLEVlLnN0eWxlLmNzc1RleHQ9XCJib3JkZXItd2lkdGg6MDtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOmFic29sdXRlO3BhZGRpbmc6MFwiLEllPSEhZHIoXCJwZXJzcGVjdGl2ZVwiKSxGZT1DZS5jb3JlLnJldmVydGluZyxEZT0xKX1mdW5jdGlvbiBSZCh0KXt2YXIgZSxyPU1kKFwic3ZnXCIsdGhpcy5vd25lclNWR0VsZW1lbnQmJnRoaXMub3duZXJTVkdFbGVtZW50LmdldEF0dHJpYnV0ZShcInhtbG5zXCIpfHxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpLGk9dGhpcy5wYXJlbnROb2RlLG49dGhpcy5uZXh0U2libGluZyxhPXRoaXMuc3R5bGUuY3NzVGV4dDtpZihSZS5hcHBlbmRDaGlsZChyKSxyLmFwcGVuZENoaWxkKHRoaXMpLHRoaXMuc3R5bGUuZGlzcGxheT1cImJsb2NrXCIsdCl0cnl7ZT10aGlzLmdldEJCb3goKSx0aGlzLl9nc2FwQkJveD10aGlzLmdldEJCb3gsdGhpcy5nZXRCQm94PVJkfWNhdGNoKHQpe31lbHNlIHRoaXMuX2dzYXBCQm94JiYoZT10aGlzLl9nc2FwQkJveCgpKTtyZXR1cm4gaSYmKG4/aS5pbnNlcnRCZWZvcmUodGhpcyxuKTppLmFwcGVuZENoaWxkKHRoaXMpKSxSZS5yZW1vdmVDaGlsZChyKSx0aGlzLnN0eWxlLmNzc1RleHQ9YSxlfWZ1bmN0aW9uIFNkKHQsZSl7Zm9yKHZhciByPWUubGVuZ3RoO3ItLTspaWYodC5oYXNBdHRyaWJ1dGUoZVtyXSkpcmV0dXJuIHQuZ2V0QXR0cmlidXRlKGVbcl0pfWZ1bmN0aW9uIFRkKGUpe3ZhciByO3RyeXtyPWUuZ2V0QkJveCgpfWNhdGNoKHQpe3I9UmQuY2FsbChlLCEwKX1yZXR1cm4gciYmKHIud2lkdGh8fHIuaGVpZ2h0KXx8ZS5nZXRCQm94PT09UmR8fChyPVJkLmNhbGwoZSwhMCkpLCFyfHxyLndpZHRofHxyLnh8fHIueT9yOnt4OitTZChlLFtcInhcIixcImN4XCIsXCJ4MVwiXSl8fDAseTorU2QoZSxbXCJ5XCIsXCJjeVwiLFwieTFcIl0pfHwwLHdpZHRoOjAsaGVpZ2h0OjB9fWZ1bmN0aW9uIFVkKHQpe3JldHVybiEoIXQuZ2V0Q1RNfHx0LnBhcmVudE5vZGUmJiF0Lm93bmVyU1ZHRWxlbWVudHx8IVRkKHQpKX1mdW5jdGlvbiBWZCh0LGUpe2lmKGUpe3ZhciByPXQuc3R5bGU7ZSBpbiByciYmZSE9PWZyJiYoZT1sciksci5yZW1vdmVQcm9wZXJ0eT8oXCJtc1wiIT09ZS5zdWJzdHIoMCwyKSYmXCJ3ZWJraXRcIiE9PWUuc3Vic3RyKDAsNil8fChlPVwiLVwiK2UpLHIucmVtb3ZlUHJvcGVydHkoZS5yZXBsYWNlKHNyLFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpKTpyLnJlbW92ZUF0dHJpYnV0ZShlKX19ZnVuY3Rpb24gV2QodCxlLHIsaSxuLGEpe3ZhciBzPW5ldyBwZSh0Ll9wdCxlLHIsMCwxLGE/eWQ6eGQpO3JldHVybih0Ll9wdD1zKS5iPWkscy5lPW4sdC5fcHJvcHMucHVzaChyKSxzfWZ1bmN0aW9uIFpkKHQsZSxyLGkpe3ZhciBuLGEscyxvLHU9cGFyc2VGbG9hdChyKXx8MCxoPShyK1wiXCIpLnRyaW0oKS5zdWJzdHIoKHUrXCJcIikubGVuZ3RoKXx8XCJweFwiLGw9RWUuc3R5bGUsZj1vci50ZXN0KGUpLGM9XCJzdmdcIj09PXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpLGQ9KGM/XCJjbGllbnRcIjpcIm9mZnNldFwiKSsoZj9cIldpZHRoXCI6XCJIZWlnaHRcIikscD1cInB4XCI9PT1pLF89XCIlXCI9PT1pO3JldHVybiBpPT09aHx8IXV8fHByW2ldfHxwcltoXT91OihcInB4XCI9PT1ofHxwfHwodT1aZCh0LGUscixcInB4XCIpKSxvPXQuZ2V0Q1RNJiZVZCh0KSwhXyYmXCIlXCIhPT1ofHwhcnJbZV0mJiF+ZS5pbmRleE9mKFwiYWRpdXNcIik/KGxbZj9cIndpZHRoXCI6XCJoZWlnaHRcIl09MTAwKyhwP2g6aSksYT1+ZS5pbmRleE9mKFwiYWRpdXNcIil8fFwiZW1cIj09PWkmJnQuYXBwZW5kQ2hpbGQmJiFjP3Q6dC5wYXJlbnROb2RlLG8mJihhPSh0Lm93bmVyU1ZHRWxlbWVudHx8e30pLnBhcmVudE5vZGUpLGEmJmEhPT1TZSYmYS5hcHBlbmRDaGlsZHx8KGE9U2UuYm9keSksKHM9YS5fZ3NhcCkmJl8mJnMud2lkdGgmJmYmJnMudGltZT09PUV0LnRpbWUmJiFzLnVuY2FjaGU/aWEodS9zLndpZHRoKjEwMCk6KCFfJiZcIiVcIiE9PWh8fF9yW05kKGEsXCJkaXNwbGF5XCIpXXx8KGwucG9zaXRpb249TmQodCxcInBvc2l0aW9uXCIpKSxhPT09dCYmKGwucG9zaXRpb249XCJzdGF0aWNcIiksYS5hcHBlbmRDaGlsZChFZSksbj1FZVtkXSxhLnJlbW92ZUNoaWxkKEVlKSxsLnBvc2l0aW9uPVwiYWJzb2x1dGVcIixmJiZfJiYoKHM9ZmEoYSkpLnRpbWU9RXQudGltZSxzLndpZHRoPWFbZF0pLGlhKHA/bip1LzEwMDpuJiZ1PzEwMC9uKnU6MCkpKToobj1vP3QuZ2V0QkJveCgpW2Y/XCJ3aWR0aFwiOlwiaGVpZ2h0XCJdOnRbZF0saWEoXz91L24qMTAwOnUvMTAwKm4pKSl9ZnVuY3Rpb24gX2QodCxlLHIsaSl7aWYoIXJ8fFwibm9uZVwiPT09cil7dmFyIG49ZHIoZSx0LDEpLGE9biYmTmQodCxuLDEpO2EmJmEhPT1yPyhlPW4scj1hKTpcImJvcmRlckNvbG9yXCI9PT1lJiYocj1OZCh0LFwiYm9yZGVyVG9wQ29sb3JcIikpfXZhciBzLG8sdSxoLGwsZixjLGQscCxfLG0sZz1uZXcgcGUodGhpcy5fcHQsdC5zdHlsZSxlLDAsMSxzZSksdj0wLHk9MDtpZihnLmI9cixnLmU9aSxyKz1cIlwiLFwiYXV0b1wiPT09KGkrPVwiXCIpJiYodC5zdHlsZVtlXT1pLGk9TmQodCxlKXx8aSx0LnN0eWxlW2VdPXIpLEViKHM9W3IsaV0pLGk9c1sxXSx1PShyPXNbMF0pLm1hdGNoKHJ0KXx8W10sKGkubWF0Y2gocnQpfHxbXSkubGVuZ3RoKXtmb3IoO289cnQuZXhlYyhpKTspYz1vWzBdLHA9aS5zdWJzdHJpbmcodixvLmluZGV4KSxsP2w9KGwrMSklNTpcInJnYmEoXCIhPT1wLnN1YnN0cigtNSkmJlwiaHNsYShcIiE9PXAuc3Vic3RyKC01KXx8KGw9MSksYyE9PShmPXVbeSsrXXx8XCJcIikmJihoPXBhcnNlRmxvYXQoZil8fDAsbT1mLnN1YnN0cigoaCtcIlwiKS5sZW5ndGgpLFwiPVwiPT09Yy5jaGFyQXQoMSkmJihjPWthKGgsYykrbSksZD1wYXJzZUZsb2F0KGMpLF89Yy5zdWJzdHIoKGQrXCJcIikubGVuZ3RoKSx2PXJ0Lmxhc3RJbmRleC1fLmxlbmd0aCxffHwoXz1ffHxqLnVuaXRzW2VdfHxtLHY9PT1pLmxlbmd0aCYmKGkrPV8sZy5lKz1fKSksbSE9PV8mJihoPVpkKHQsZSxmLF8pfHwwKSxnLl9wdD17X25leHQ6Zy5fcHQscDpwfHwxPT09eT9wOlwiLFwiLHM6aCxjOmQtaCxtOmwmJmw8NHx8XCJ6SW5kZXhcIj09PWU/TWF0aC5yb3VuZDowfSk7Zy5jPXY8aS5sZW5ndGg/aS5zdWJzdHJpbmcodixpLmxlbmd0aCk6XCJcIn1lbHNlIGcucj1cImRpc3BsYXlcIj09PWUmJlwibm9uZVwiPT09aT95ZDp4ZDtyZXR1cm4gbnQudGVzdChpKSYmKGcuZT0wKSx0aGlzLl9wdD1nfWZ1bmN0aW9uIGJlKHQpe3ZhciBlPXQuc3BsaXQoXCIgXCIpLHI9ZVswXSxpPWVbMV18fFwiNTAlXCI7cmV0dXJuXCJ0b3BcIiE9PXImJlwiYm90dG9tXCIhPT1yJiZcImxlZnRcIiE9PWkmJlwicmlnaHRcIiE9PWl8fCh0PXIscj1pLGk9dCksZVswXT1ncltyXXx8cixlWzFdPWdyW2ldfHxpLGUuam9pbihcIiBcIil9ZnVuY3Rpb24gY2UodCxlKXtpZihlLnR3ZWVuJiZlLnR3ZWVuLl90aW1lPT09ZS50d2Vlbi5fZHVyKXt2YXIgcixpLG4sYT1lLnQscz1hLnN0eWxlLG89ZS51LHU9YS5fZ3NhcDtpZihcImFsbFwiPT09b3x8ITA9PT1vKXMuY3NzVGV4dD1cIlwiLGk9MTtlbHNlIGZvcihuPShvPW8uc3BsaXQoXCIsXCIpKS5sZW5ndGg7LTE8LS1uOylyPW9bbl0scnJbcl0mJihpPTEscj1cInRyYW5zZm9ybU9yaWdpblwiPT09cj9mcjpsciksVmQoYSxyKTtpJiYoVmQoYSxsciksdSYmKHUuc3ZnJiZhLnJlbW92ZUF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKSxicihhLDEpLHUudW5jYWNoZT0xLElkKHMpKSl9fWZ1bmN0aW9uIGdlKHQpe3JldHVyblwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCI9PT10fHxcIm5vbmVcIj09PXR8fCF0fWZ1bmN0aW9uIGhlKHQpe3ZhciBlPU5kKHQsbHIpO3JldHVybiBnZShlKT95cjplLnN1YnN0cig3KS5tYXRjaChldCkubWFwKGlhKX1mdW5jdGlvbiBpZSh0LGUpe3ZhciByLGksbixhLHM9dC5fZ3NhcHx8ZmEodCksbz10LnN0eWxlLHU9aGUodCk7cmV0dXJuIHMuc3ZnJiZ0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKT9cIjEsMCwwLDEsMCwwXCI9PT0odT1bKG49dC50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpLm1hdHJpeCkuYSxuLmIsbi5jLG4uZCxuLmUsbi5mXSkuam9pbihcIixcIik/eXI6dToodSE9PXlyfHx0Lm9mZnNldFBhcmVudHx8dD09PVJlfHxzLnN2Z3x8KG49by5kaXNwbGF5LG8uZGlzcGxheT1cImJsb2NrXCIsKHI9dC5wYXJlbnROb2RlKSYmdC5vZmZzZXRQYXJlbnR8fChhPTEsaT10Lm5leHRFbGVtZW50U2libGluZyxSZS5hcHBlbmRDaGlsZCh0KSksdT1oZSh0KSxuP28uZGlzcGxheT1uOlZkKHQsXCJkaXNwbGF5XCIpLGEmJihpP3IuaW5zZXJ0QmVmb3JlKHQsaSk6cj9yLmFwcGVuZENoaWxkKHQpOlJlLnJlbW92ZUNoaWxkKHQpKSksZSYmNjx1Lmxlbmd0aD9bdVswXSx1WzFdLHVbNF0sdVs1XSx1WzEyXSx1WzEzXV06dSl9ZnVuY3Rpb24gamUodCxlLHIsaSxuLGEpe3ZhciBzLG8sdSxoPXQuX2dzYXAsbD1ufHxpZSh0LCEwKSxmPWgueE9yaWdpbnx8MCxjPWgueU9yaWdpbnx8MCxkPWgueE9mZnNldHx8MCxwPWgueU9mZnNldHx8MCxfPWxbMF0sbT1sWzFdLGc9bFsyXSx2PWxbM10seT1sWzRdLFQ9bFs1XSxiPWUuc3BsaXQoXCIgXCIpLHc9cGFyc2VGbG9hdChiWzBdKXx8MCx4PXBhcnNlRmxvYXQoYlsxXSl8fDA7cj9sIT09eXImJihvPV8qdi1tKmcpJiYodT13KigtbS9vKSt4KihfL28pLShfKlQtbSp5KS9vLHc9dyoodi9vKSt4KigtZy9vKSsoZypULXYqeSkvbyx4PXUpOih3PShzPVRkKHQpKS54Kyh+YlswXS5pbmRleE9mKFwiJVwiKT93LzEwMCpzLndpZHRoOncpLHg9cy55Kyh+KGJbMV18fGJbMF0pLmluZGV4T2YoXCIlXCIpP3gvMTAwKnMuaGVpZ2h0OngpKSxpfHwhMSE9PWkmJmguc21vb3RoPyh5PXctZixUPXgtYyxoLnhPZmZzZXQ9ZCsoeSpfK1QqZykteSxoLnlPZmZzZXQ9cCsoeSptK1QqdiktVCk6aC54T2Zmc2V0PWgueU9mZnNldD0wLGgueE9yaWdpbj13LGgueU9yaWdpbj14LGguc21vb3RoPSEhaSxoLm9yaWdpbj1lLGgub3JpZ2luSXNBYnNvbHV0ZT0hIXIsdC5zdHlsZVtmcl09XCIwcHggMHB4XCIsYSYmKFdkKGEsaCxcInhPcmlnaW5cIixmLHcpLFdkKGEsaCxcInlPcmlnaW5cIixjLHgpLFdkKGEsaCxcInhPZmZzZXRcIixkLGgueE9mZnNldCksV2QoYSxoLFwieU9mZnNldFwiLHAsaC55T2Zmc2V0KSksdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIix3K1wiIFwiK3gpfWZ1bmN0aW9uIG1lKHQsZSxyKXt2YXIgaT1ZYShlKTtyZXR1cm4gaWEocGFyc2VGbG9hdChlKStwYXJzZUZsb2F0KFpkKHQsXCJ4XCIscitcInB4XCIsaSkpKStpfWZ1bmN0aW9uIHRlKHQsZSxpLG4sYSl7dmFyIHMsbyx1PTM2MCxoPXIoYSksbD1wYXJzZUZsb2F0KGEpKihoJiZ+YS5pbmRleE9mKFwicmFkXCIpP2lyOjEpLW4sZj1uK2wrXCJkZWdcIjtyZXR1cm4gaCYmKFwic2hvcnRcIj09PShzPWEuc3BsaXQoXCJfXCIpWzFdKSYmKGwlPXUpIT09bCUxODAmJihsKz1sPDA/dTotdSksXCJjd1wiPT09cyYmbDwwP2w9KGwrMzZlOSkldS1+fihsL3UpKnU6XCJjY3dcIj09PXMmJjA8bCYmKGw9KGwtMzZlOSkldS1+fihsL3UpKnUpKSx0Ll9wdD1vPW5ldyBwZSh0Ll9wdCxlLGksbixsLHVkKSxvLmU9ZixvLnU9XCJkZWdcIix0Ll9wcm9wcy5wdXNoKGkpLG99ZnVuY3Rpb24gdWUodCxlKXtmb3IodmFyIHIgaW4gZSl0W3JdPWVbcl07cmV0dXJuIHR9ZnVuY3Rpb24gdmUodCxlLHIpe3ZhciBpLG4sYSxzLG8sdSxoLGw9dWUoe30sci5fZ3NhcCksZj1yLnN0eWxlO2ZvcihuIGluIGwuc3ZnPyhhPXIuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpLHIuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsXCJcIiksZltscl09ZSxpPWJyKHIsMSksVmQocixsciksci5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIixhKSk6KGE9Z2V0Q29tcHV0ZWRTdHlsZShyKVtscl0sZltscl09ZSxpPWJyKHIsMSksZltscl09YSkscnIpKGE9bFtuXSkhPT0ocz1pW25dKSYmXCJwZXJzcGVjdGl2ZSxmb3JjZTNELHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW5cIi5pbmRleE9mKG4pPDAmJihvPVlhKGEpIT09KGg9WWEocykpP1pkKHIsbixhLGgpOnBhcnNlRmxvYXQoYSksdT1wYXJzZUZsb2F0KHMpLHQuX3B0PW5ldyBwZSh0Ll9wdCxpLG4sbyx1LW8sdGQpLHQuX3B0LnU9aHx8MCx0Ll9wcm9wcy5wdXNoKG4pKTt1ZShpLGwpfXZhciBBZSxTZSxSZSxEZSxFZSx6ZSxGZSxJZSxCZT1GdC5Qb3dlcjAsTGU9RnQuUG93ZXIxLFllPUZ0LlBvd2VyMixOZT1GdC5Qb3dlcjMscWU9RnQuUG93ZXI0LFVlPUZ0LkxpbmVhcixWZT1GdC5RdWFkLFdlPUZ0LkN1YmljLFhlPUZ0LlF1YXJ0LEhlPUZ0LlF1aW50LFFlPUZ0LlN0cm9uZyxLZT1GdC5FbGFzdGljLFplPUZ0LkJhY2ssR2U9RnQuU3RlcHBlZEVhc2UsSmU9RnQuQm91bmNlLCRlPUZ0LlNpbmUsdHI9RnQuRXhwbyxlcj1GdC5DaXJjLHJyPXt9LGlyPTE4MC9NYXRoLlBJLG5yPU1hdGguUEkvMTgwLGFyPU1hdGguYXRhbjIsc3I9LyhbQS1aXSkvZyxvcj0vKGxlZnR8cmlnaHR8d2lkdGh8bWFyZ2lufHBhZGRpbmd8eCkvaSx1cj0vW1xccyxcXChdXFxTLyxocj17YXV0b0FscGhhOlwib3BhY2l0eSx2aXNpYmlsaXR5XCIsc2NhbGU6XCJzY2FsZVgsc2NhbGVZXCIsYWxwaGE6XCJvcGFjaXR5XCJ9LGxyPVwidHJhbnNmb3JtXCIsZnI9bHIrXCJPcmlnaW5cIixjcj1cIk8sTW96LG1zLE1zLFdlYmtpdFwiLnNwbGl0KFwiLFwiKSxkcj1mdW5jdGlvbiBfY2hlY2tQcm9wUHJlZml4KHQsZSxyKXt2YXIgaT0oZXx8RWUpLnN0eWxlLG49NTtpZih0IGluIGkmJiFyKXJldHVybiB0O2Zvcih0PXQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrdC5zdWJzdHIoMSk7bi0tJiYhKGNyW25dK3QgaW4gaSk7KTtyZXR1cm4gbjwwP251bGw6KDM9PT1uP1wibXNcIjowPD1uP2NyW25dOlwiXCIpK3R9LHByPXtkZWc6MSxyYWQ6MSx0dXJuOjF9LF9yPXtncmlkOjEsZmxleDoxfSxtcj1mdW5jdGlvbiBfZ2V0KHQsZSxyLGkpe3ZhciBuO3JldHVybiBEZXx8UWQoKSxlIGluIGhyJiZcInRyYW5zZm9ybVwiIT09ZSYmfihlPWhyW2VdKS5pbmRleE9mKFwiLFwiKSYmKGU9ZS5zcGxpdChcIixcIilbMF0pLHJyW2VdJiZcInRyYW5zZm9ybVwiIT09ZT8obj1icih0LGkpLG49XCJ0cmFuc2Zvcm1PcmlnaW5cIiE9PWU/bltlXTpuLnN2Zz9uLm9yaWdpbjp3cihOZCh0LGZyKSkrXCIgXCIrbi56T3JpZ2luK1wicHhcIik6KG49dC5zdHlsZVtlXSkmJlwiYXV0b1wiIT09biYmIWkmJiF+KG4rXCJcIikuaW5kZXhPZihcImNhbGMoXCIpfHwobj12cltlXSYmdnJbZV0odCxlLHIpfHxOZCh0LGUpfHxnYSh0LGUpfHwoXCJvcGFjaXR5XCI9PT1lPzE6MCkpLHImJiF+KG4rXCJcIikudHJpbSgpLmluZGV4T2YoXCIgXCIpP1pkKHQsZSxuLHIpK3I6bn0sZ3I9e3RvcDpcIjAlXCIsYm90dG9tOlwiMTAwJVwiLGxlZnQ6XCIwJVwiLHJpZ2h0OlwiMTAwJVwiLGNlbnRlcjpcIjUwJVwifSx2cj17Y2xlYXJQcm9wczpmdW5jdGlvbiBjbGVhclByb3BzKHQsZSxyLGksbil7aWYoXCJpc0Zyb21TdGFydFwiIT09bi5kYXRhKXt2YXIgYT10Ll9wdD1uZXcgcGUodC5fcHQsZSxyLDAsMCxjZSk7cmV0dXJuIGEudT1pLGEucHI9LTEwLGEudHdlZW49bix0Ll9wcm9wcy5wdXNoKHIpLDF9fX0seXI9WzEsMCwwLDEsMCwwXSxUcj17fSxicj1mdW5jdGlvbiBfcGFyc2VUcmFuc2Zvcm0odCxlKXt2YXIgcj10Ll9nc2FwfHxuZXcganQodCk7aWYoXCJ4XCJpbiByJiYhZSYmIXIudW5jYWNoZSlyZXR1cm4gcjt2YXIgaSxuLGEscyxvLHUsaCxsLGYsYyxkLHAsXyxtLGcsdix5LFQsYix3LHgsayxNLE8sUCxDLEEsUyxSLEQsRSx6LEY9dC5zdHlsZSxJPXIuc2NhbGVYPDAsQj1cImRlZ1wiLEw9Z2V0Q29tcHV0ZWRTdHlsZSh0KSxZPU5kKHQsZnIpfHxcIjBcIjtyZXR1cm4gaT1uPWE9dT1oPWw9Zj1jPWQ9MCxzPW89MSxyLnN2Zz0hKCF0LmdldENUTXx8IVVkKHQpKSxMLnRyYW5zbGF0ZSYmKFwibm9uZVwiPT09TC50cmFuc2xhdGUmJlwibm9uZVwiPT09TC5zY2FsZSYmXCJub25lXCI9PT1MLnJvdGF0ZXx8KEZbbHJdPShcIm5vbmVcIiE9PUwudHJhbnNsYXRlP1widHJhbnNsYXRlM2QoXCIrKEwudHJhbnNsYXRlK1wiIDAgMFwiKS5zcGxpdChcIiBcIikuc2xpY2UoMCwzKS5qb2luKFwiLCBcIikrXCIpIFwiOlwiXCIpKyhcIm5vbmVcIiE9PUwucm90YXRlP1wicm90YXRlKFwiK0wucm90YXRlK1wiKSBcIjpcIlwiKSsoXCJub25lXCIhPT1MLnNjYWxlP1wic2NhbGUoXCIrTC5zY2FsZS5zcGxpdChcIiBcIikuam9pbihcIixcIikrXCIpIFwiOlwiXCIpKyhcIm5vbmVcIiE9PUxbbHJdP0xbbHJdOlwiXCIpKSxGLnNjYWxlPUYucm90YXRlPUYudHJhbnNsYXRlPVwibm9uZVwiKSxtPWllKHQsci5zdmcpLHIuc3ZnJiYoTz1yLnVuY2FjaGU/KFA9dC5nZXRCQm94KCksWT1yLnhPcmlnaW4tUC54K1wicHggXCIrKHIueU9yaWdpbi1QLnkpK1wicHhcIixcIlwiKTohZSYmdC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIiksamUodCxPfHxZLCEhT3x8ci5vcmlnaW5Jc0Fic29sdXRlLCExIT09ci5zbW9vdGgsbSkpLHA9ci54T3JpZ2lufHwwLF89ci55T3JpZ2lufHwwLG0hPT15ciYmKFQ9bVswXSxiPW1bMV0sdz1tWzJdLHg9bVszXSxpPWs9bVs0XSxuPU09bVs1XSw2PT09bS5sZW5ndGg/KHM9TWF0aC5zcXJ0KFQqVCtiKmIpLG89TWF0aC5zcXJ0KHgqeCt3KncpLHU9VHx8Yj9hcihiLFQpKmlyOjAsKGY9d3x8eD9hcih3LHgpKmlyK3U6MCkmJihvKj1NYXRoLmFicyhNYXRoLmNvcyhmKm5yKSkpLHIuc3ZnJiYoaS09cC0ocCpUK18qdyksbi09Xy0ocCpiK18qeCkpKTooej1tWzZdLEQ9bVs3XSxBPW1bOF0sUz1tWzldLFI9bVsxMF0sRT1tWzExXSxpPW1bMTJdLG49bVsxM10sYT1tWzE0XSxoPShnPWFyKHosUikpKmlyLGcmJihPPWsqKHY9TWF0aC5jb3MoLWcpKStBKih5PU1hdGguc2luKC1nKSksUD1NKnYrUyp5LEM9eip2K1IqeSxBPWsqLXkrQSp2LFM9TSoteStTKnYsUj16Ki15K1IqdixFPUQqLXkrRSp2LGs9TyxNPVAsej1DKSxsPShnPWFyKC13LFIpKSppcixnJiYodj1NYXRoLmNvcygtZyksRT14Kih5PU1hdGguc2luKC1nKSkrRSp2LFQ9Tz1UKnYtQSp5LGI9UD1iKnYtUyp5LHc9Qz13KnYtUip5KSx1PShnPWFyKGIsVCkpKmlyLGcmJihPPVQqKHY9TWF0aC5jb3MoZykpK2IqKHk9TWF0aC5zaW4oZykpLFA9ayp2K00qeSxiPWIqdi1UKnksTT1NKnYtayp5LFQ9TyxrPVApLGgmJjM1OS45PE1hdGguYWJzKGgpK01hdGguYWJzKHUpJiYoaD11PTAsbD0xODAtbCkscz1pYShNYXRoLnNxcnQoVCpUK2IqYit3KncpKSxvPWlhKE1hdGguc3FydChNKk0reip6KSksZz1hcihrLE0pLGY9MmUtNDxNYXRoLmFicyhnKT9nKmlyOjAsZD1FPzEvKEU8MD8tRTpFKTowKSxyLnN2ZyYmKE89dC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiksci5mb3JjZUNTUz10LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLFwiXCIpfHwhZ2UoTmQodCxscikpLE8mJnQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsTykpKSw5MDxNYXRoLmFicyhmKSYmTWF0aC5hYnMoZik8MjcwJiYoST8ocyo9LTEsZis9dTw9MD8xODA6LTE4MCx1Kz11PD0wPzE4MDotMTgwKToobyo9LTEsZis9Zjw9MD8xODA6LTE4MCkpLGU9ZXx8ci51bmNhY2hlLHIueD1pLSgoci54UGVyY2VudD1pJiYoIWUmJnIueFBlcmNlbnR8fChNYXRoLnJvdW5kKHQub2Zmc2V0V2lkdGgvMik9PT1NYXRoLnJvdW5kKC1pKT8tNTA6MCkpKT90Lm9mZnNldFdpZHRoKnIueFBlcmNlbnQvMTAwOjApK1wicHhcIixyLnk9bi0oKHIueVBlcmNlbnQ9biYmKCFlJiZyLnlQZXJjZW50fHwoTWF0aC5yb3VuZCh0Lm9mZnNldEhlaWdodC8yKT09PU1hdGgucm91bmQoLW4pPy01MDowKSkpP3Qub2Zmc2V0SGVpZ2h0KnIueVBlcmNlbnQvMTAwOjApK1wicHhcIixyLno9YStcInB4XCIsci5zY2FsZVg9aWEocyksci5zY2FsZVk9aWEobyksci5yb3RhdGlvbj1pYSh1KStCLHIucm90YXRpb25YPWlhKGgpK0Isci5yb3RhdGlvblk9aWEobCkrQixyLnNrZXdYPWYrQixyLnNrZXdZPWMrQixyLnRyYW5zZm9ybVBlcnNwZWN0aXZlPWQrXCJweFwiLChyLnpPcmlnaW49cGFyc2VGbG9hdChZLnNwbGl0KFwiIFwiKVsyXSl8fDApJiYoRltmcl09d3IoWSkpLHIueE9mZnNldD1yLnlPZmZzZXQ9MCxyLmZvcmNlM0Q9ai5mb3JjZTNELHIucmVuZGVyVHJhbnNmb3JtPXIuc3ZnP0NyOkllP1ByOnhyLHIudW5jYWNoZT0wLHJ9LHdyPWZ1bmN0aW9uIF9maXJzdFR3b09ubHkodCl7cmV0dXJuKHQ9dC5zcGxpdChcIiBcIikpWzBdK1wiIFwiK3RbMV19LHhyPWZ1bmN0aW9uIF9yZW5kZXJOb24zRFRyYW5zZm9ybXModCxlKXtlLno9XCIwcHhcIixlLnJvdGF0aW9uWT1lLnJvdGF0aW9uWD1cIjBkZWdcIixlLmZvcmNlM0Q9MCxQcih0LGUpfSxrcj1cIjBkZWdcIixNcj1cIjBweFwiLE9yPVwiKSBcIixQcj1mdW5jdGlvbiBfcmVuZGVyQ1NTVHJhbnNmb3Jtcyh0LGUpe3ZhciByPWV8fHRoaXMsaT1yLnhQZXJjZW50LG49ci55UGVyY2VudCxhPXIueCxzPXIueSxvPXIueix1PXIucm90YXRpb24saD1yLnJvdGF0aW9uWSxsPXIucm90YXRpb25YLGY9ci5za2V3WCxjPXIuc2tld1ksZD1yLnNjYWxlWCxwPXIuc2NhbGVZLF89ci50cmFuc2Zvcm1QZXJzcGVjdGl2ZSxtPXIuZm9yY2UzRCxnPXIudGFyZ2V0LHY9ci56T3JpZ2luLHk9XCJcIixUPVwiYXV0b1wiPT09bSYmdCYmMSE9PXR8fCEwPT09bTtpZih2JiYobCE9PWtyfHxoIT09a3IpKXt2YXIgYix3PXBhcnNlRmxvYXQoaCkqbnIseD1NYXRoLnNpbih3KSxrPU1hdGguY29zKHcpO3c9cGFyc2VGbG9hdChsKSpucixiPU1hdGguY29zKHcpLGE9bWUoZyxhLHgqYiotdikscz1tZShnLHMsLU1hdGguc2luKHcpKi12KSxvPW1lKGcsbyxrKmIqLXYrdil9XyE9PU1yJiYoeSs9XCJwZXJzcGVjdGl2ZShcIitfK09yKSwoaXx8bikmJih5Kz1cInRyYW5zbGF0ZShcIitpK1wiJSwgXCIrbitcIiUpIFwiKSwhVCYmYT09PU1yJiZzPT09TXImJm89PT1Ncnx8KHkrPW8hPT1Ncnx8VD9cInRyYW5zbGF0ZTNkKFwiK2ErXCIsIFwiK3MrXCIsIFwiK28rXCIpIFwiOlwidHJhbnNsYXRlKFwiK2ErXCIsIFwiK3MrT3IpLHUhPT1rciYmKHkrPVwicm90YXRlKFwiK3UrT3IpLGghPT1rciYmKHkrPVwicm90YXRlWShcIitoK09yKSxsIT09a3ImJih5Kz1cInJvdGF0ZVgoXCIrbCtPciksZj09PWtyJiZjPT09a3J8fCh5Kz1cInNrZXcoXCIrZitcIiwgXCIrYytPciksMT09PWQmJjE9PT1wfHwoeSs9XCJzY2FsZShcIitkK1wiLCBcIitwK09yKSxnLnN0eWxlW2xyXT15fHxcInRyYW5zbGF0ZSgwLCAwKVwifSxDcj1mdW5jdGlvbiBfcmVuZGVyU1ZHVHJhbnNmb3Jtcyh0LGUpe3ZhciByLGksbixhLHMsbz1lfHx0aGlzLHU9by54UGVyY2VudCxoPW8ueVBlcmNlbnQsbD1vLngsZj1vLnksYz1vLnJvdGF0aW9uLGQ9by5za2V3WCxwPW8uc2tld1ksXz1vLnNjYWxlWCxtPW8uc2NhbGVZLGc9by50YXJnZXQsdj1vLnhPcmlnaW4seT1vLnlPcmlnaW4sVD1vLnhPZmZzZXQsYj1vLnlPZmZzZXQsdz1vLmZvcmNlQ1NTLHg9cGFyc2VGbG9hdChsKSxrPXBhcnNlRmxvYXQoZik7Yz1wYXJzZUZsb2F0KGMpLGQ9cGFyc2VGbG9hdChkKSwocD1wYXJzZUZsb2F0KHApKSYmKGQrPXA9cGFyc2VGbG9hdChwKSxjKz1wKSxjfHxkPyhjKj1ucixkKj1ucixyPU1hdGguY29zKGMpKl8saT1NYXRoLnNpbihjKSpfLG49TWF0aC5zaW4oYy1kKSotbSxhPU1hdGguY29zKGMtZCkqbSxkJiYocCo9bnIscz1NYXRoLnRhbihkLXApLG4qPXM9TWF0aC5zcXJ0KDErcypzKSxhKj1zLHAmJihzPU1hdGgudGFuKHApLHIqPXM9TWF0aC5zcXJ0KDErcypzKSxpKj1zKSkscj1pYShyKSxpPWlhKGkpLG49aWEobiksYT1pYShhKSk6KHI9XyxhPW0saT1uPTApLCh4JiYhfihsK1wiXCIpLmluZGV4T2YoXCJweFwiKXx8ayYmIX4oZitcIlwiKS5pbmRleE9mKFwicHhcIikpJiYoeD1aZChnLFwieFwiLGwsXCJweFwiKSxrPVpkKGcsXCJ5XCIsZixcInB4XCIpKSwodnx8eXx8VHx8YikmJih4PWlhKHgrdi0odipyK3kqbikrVCksaz1pYShrK3ktKHYqaSt5KmEpK2IpKSwodXx8aCkmJihzPWcuZ2V0QkJveCgpLHg9aWEoeCt1LzEwMCpzLndpZHRoKSxrPWlhKGsraC8xMDAqcy5oZWlnaHQpKSxzPVwibWF0cml4KFwiK3IrXCIsXCIraStcIixcIituK1wiLFwiK2ErXCIsXCIreCtcIixcIitrK1wiKVwiLGcuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIscyksdyYmKGcuc3R5bGVbbHJdPXMpfTtoYShcInBhZGRpbmcsbWFyZ2luLFdpZHRoLFJhZGl1c1wiLGZ1bmN0aW9uKGUscil7dmFyIHQ9XCJSaWdodFwiLGk9XCJCb3R0b21cIixuPVwiTGVmdFwiLG89KHI8Mz9bXCJUb3BcIix0LGksbl06W1wiVG9wXCIrbixcIlRvcFwiK3QsaSt0LGkrbl0pLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gcjwyP2UrdDpcImJvcmRlclwiK3QrZX0pO3ZyWzE8cj9cImJvcmRlclwiK2U6ZV09ZnVuY3Rpb24oZSx0LHIsaSxuKXt2YXIgYSxzO2lmKGFyZ3VtZW50cy5sZW5ndGg8NClyZXR1cm4gYT1vLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gbXIoZSx0LHIpfSksNT09PShzPWEuam9pbihcIiBcIikpLnNwbGl0KGFbMF0pLmxlbmd0aD9hWzBdOnM7YT0oaStcIlwiKS5zcGxpdChcIiBcIikscz17fSxvLmZvckVhY2goZnVuY3Rpb24odCxlKXtyZXR1cm4gc1t0XT1hW2VdPWFbZV18fGFbKGUtMSkvMnwwXX0pLGUuaW5pdCh0LHMsbil9fSk7dmFyIEFyLFNyLFJyLERyPXtuYW1lOlwiY3NzXCIscmVnaXN0ZXI6UWQsdGFyZ2V0VGVzdDpmdW5jdGlvbiB0YXJnZXRUZXN0KHQpe3JldHVybiB0LnN0eWxlJiZ0Lm5vZGVUeXBlfSxpbml0OmZ1bmN0aW9uIGluaXQodCxlLGksbixhKXt2YXIgcyxvLHUsaCxsLGYsYyxkLHAsXyxtLGcsdix5LFQsYix3PXRoaXMuX3Byb3BzLHg9dC5zdHlsZSxrPWkudmFycy5zdGFydEF0O2ZvcihjIGluIERlfHxRZCgpLHRoaXMuc3R5bGVzPXRoaXMuc3R5bGVzfHxLZCh0KSxiPXRoaXMuc3R5bGVzLnByb3BzLHRoaXMudHdlZW49aSxlKWlmKFwiYXV0b1JvdW5kXCIhPT1jJiYobz1lW2NdLCFwdFtjXXx8IV9iKGMsZSxpLG4sdCxhKSkpaWYobD10eXBlb2YgbyxmPXZyW2NdLFwiZnVuY3Rpb25cIj09PWwmJihsPXR5cGVvZihvPW8uY2FsbChpLG4sdCxhKSkpLFwic3RyaW5nXCI9PT1sJiZ+by5pbmRleE9mKFwicmFuZG9tKFwiKSYmKG89b2IobykpLGYpZih0aGlzLHQsYyxvLGkpJiYoVD0xKTtlbHNlIGlmKFwiLS1cIj09PWMuc3Vic3RyKDAsMikpcz0oZ2V0Q29tcHV0ZWRTdHlsZSh0KS5nZXRQcm9wZXJ0eVZhbHVlKGMpK1wiXCIpLnRyaW0oKSxvKz1cIlwiLFJ0Lmxhc3RJbmRleD0wLFJ0LnRlc3Qocyl8fChkPVlhKHMpLHA9WWEobykpLHA/ZCE9PXAmJihzPVpkKHQsYyxzLHApK3ApOmQmJihvKz1kKSx0aGlzLmFkZCh4LFwic2V0UHJvcGVydHlcIixzLG8sbixhLDAsMCxjKSx3LnB1c2goYyksYi5wdXNoKGMsMCx4W2NdKTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPT1sKXtpZihrJiZjIGluIGs/KHM9XCJmdW5jdGlvblwiPT10eXBlb2Yga1tjXT9rW2NdLmNhbGwoaSxuLHQsYSk6a1tjXSxyKHMpJiZ+cy5pbmRleE9mKFwicmFuZG9tKFwiKSYmKHM9b2IocykpLFlhKHMrXCJcIil8fChzKz1qLnVuaXRzW2NdfHxZYShtcih0LGMpKXx8XCJcIiksXCI9XCI9PT0ocytcIlwiKS5jaGFyQXQoMSkmJihzPW1yKHQsYykpKTpzPW1yKHQsYyksaD1wYXJzZUZsb2F0KHMpLChfPVwic3RyaW5nXCI9PT1sJiZcIj1cIj09PW8uY2hhckF0KDEpJiZvLnN1YnN0cigwLDIpKSYmKG89by5zdWJzdHIoMikpLHU9cGFyc2VGbG9hdChvKSxjIGluIGhyJiYoXCJhdXRvQWxwaGFcIj09PWMmJigxPT09aCYmXCJoaWRkZW5cIj09PW1yKHQsXCJ2aXNpYmlsaXR5XCIpJiZ1JiYoaD0wKSxiLnB1c2goXCJ2aXNpYmlsaXR5XCIsMCx4LnZpc2liaWxpdHkpLFdkKHRoaXMseCxcInZpc2liaWxpdHlcIixoP1wiaW5oZXJpdFwiOlwiaGlkZGVuXCIsdT9cImluaGVyaXRcIjpcImhpZGRlblwiLCF1KSksXCJzY2FsZVwiIT09YyYmXCJ0cmFuc2Zvcm1cIiE9PWMmJn4oYz1ocltjXSkuaW5kZXhPZihcIixcIikmJihjPWMuc3BsaXQoXCIsXCIpWzBdKSksbT1jIGluIHJyKWlmKHRoaXMuc3R5bGVzLnNhdmUoYyksZ3x8KCh2PXQuX2dzYXApLnJlbmRlclRyYW5zZm9ybSYmIWUucGFyc2VUcmFuc2Zvcm18fGJyKHQsZS5wYXJzZVRyYW5zZm9ybSkseT0hMSE9PWUuc21vb3RoT3JpZ2luJiZ2LnNtb290aCwoZz10aGlzLl9wdD1uZXcgcGUodGhpcy5fcHQseCxsciwwLDEsdi5yZW5kZXJUcmFuc2Zvcm0sdiwwLC0xKSkuZGVwPTEpLFwic2NhbGVcIj09PWMpdGhpcy5fcHQ9bmV3IHBlKHRoaXMuX3B0LHYsXCJzY2FsZVlcIixoLChfP2thKGgsXyt1KTp1KS1ofHwwLHRkKSx0aGlzLl9wdC51PTAsdy5wdXNoKFwic2NhbGVZXCIsYyksYys9XCJYXCI7ZWxzZXtpZihcInRyYW5zZm9ybU9yaWdpblwiPT09Yyl7Yi5wdXNoKGZyLDAseFtmcl0pLG89YmUobyksdi5zdmc/amUodCxvLDAseSwwLHRoaXMpOigocD1wYXJzZUZsb2F0KG8uc3BsaXQoXCIgXCIpWzJdKXx8MCkhPT12LnpPcmlnaW4mJldkKHRoaXMsdixcInpPcmlnaW5cIix2LnpPcmlnaW4scCksV2QodGhpcyx4LGMsd3Iocyksd3IobykpKTtjb250aW51ZX1pZihcInN2Z09yaWdpblwiPT09Yyl7amUodCxvLDEseSwwLHRoaXMpO2NvbnRpbnVlfWlmKGMgaW4gVHIpe3RlKHRoaXMsdixjLGgsXz9rYShoLF8rbyk6byk7Y29udGludWV9aWYoXCJzbW9vdGhPcmlnaW5cIj09PWMpe1dkKHRoaXMsdixcInNtb290aFwiLHYuc21vb3RoLG8pO2NvbnRpbnVlfWlmKFwiZm9yY2UzRFwiPT09Yyl7dltjXT1vO2NvbnRpbnVlfWlmKFwidHJhbnNmb3JtXCI9PT1jKXt2ZSh0aGlzLG8sdCk7Y29udGludWV9fWVsc2UgYyBpbiB4fHwoYz1kcihjKXx8Yyk7aWYobXx8KHV8fDA9PT11KSYmKGh8fDA9PT1oKSYmIXVyLnRlc3QobykmJmMgaW4geCl1PXV8fDAsKGQ9KHMrXCJcIikuc3Vic3RyKChoK1wiXCIpLmxlbmd0aCkpIT09KHA9WWEobyl8fChjIGluIGoudW5pdHM/ai51bml0c1tjXTpkKSkmJihoPVpkKHQsYyxzLHApKSx0aGlzLl9wdD1uZXcgcGUodGhpcy5fcHQsbT92OngsYyxoLChfP2thKGgsXyt1KTp1KS1oLG18fFwicHhcIiE9PXAmJlwiekluZGV4XCIhPT1jfHwhMT09PWUuYXV0b1JvdW5kP3RkOndkKSx0aGlzLl9wdC51PXB8fDAsZCE9PXAmJlwiJVwiIT09cCYmKHRoaXMuX3B0LmI9cyx0aGlzLl9wdC5yPXZkKTtlbHNlIGlmKGMgaW4geClfZC5jYWxsKHRoaXMsdCxjLHMsXz9fK286byk7ZWxzZXtpZighKGMgaW4gdCkpe1EoYyxvKTtjb250aW51ZX10aGlzLmFkZCh0LGMsc3x8dFtjXSxfP18rbzpvLG4sYSl9bXx8KGMgaW4geD9iLnB1c2goYywwLHhbY10pOmIucHVzaChjLDEsc3x8dFtjXSkpLHcucHVzaChjKX1UJiZkZSh0aGlzKX0scmVuZGVyOmZ1bmN0aW9uIHJlbmRlcih0LGUpe2lmKGUudHdlZW4uX3RpbWV8fCFGZSgpKWZvcih2YXIgcj1lLl9wdDtyOylyLnIodCxyLmQpLHI9ci5fbmV4dDtlbHNlIGUuc3R5bGVzLnJldmVydCgpfSxnZXQ6bXIsYWxpYXNlczpocixnZXRTZXR0ZXI6ZnVuY3Rpb24gZ2V0U2V0dGVyKHQsZSxyKXt2YXIgaT1ocltlXTtyZXR1cm4gaSYmaS5pbmRleE9mKFwiLFwiKTwwJiYoZT1pKSxlIGluIHJyJiZlIT09ZnImJih0Ll9nc2FwLnh8fG1yKHQsXCJ4XCIpKT9yJiZ6ZT09PXI/XCJzY2FsZVwiPT09ZT9DZDpCZDooemU9cnx8e30pJiYoXCJzY2FsZVwiPT09ZT9EZDpFZCk6dC5zdHlsZSYmIXUodC5zdHlsZVtlXSk/emQ6fmUuaW5kZXhPZihcIi1cIik/QWQ6cmUodCxlKX0sY29yZTp7X3JlbW92ZVByb3BlcnR5OlZkLF9nZXRNYXRyaXg6aWV9fTtDZS51dGlscy5jaGVja1ByZWZpeD1kcixDZS5jb3JlLmdldFN0eWxlU2F2ZXI9S2QsUnI9aGEoKEFyPVwieCx5LHosc2NhbGUsc2NhbGVYLHNjYWxlWSx4UGVyY2VudCx5UGVyY2VudFwiKStcIixcIisoU3I9XCJyb3RhdGlvbixyb3RhdGlvblgscm90YXRpb25ZLHNrZXdYLHNrZXdZXCIpK1wiLHRyYW5zZm9ybSx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luLGZvcmNlM0Qsc21vb3RoT3JpZ2luLHRyYW5zZm9ybVBlcnNwZWN0aXZlXCIsZnVuY3Rpb24odCl7cnJbdF09MX0pLGhhKFNyLGZ1bmN0aW9uKHQpe2oudW5pdHNbdF09XCJkZWdcIixUclt0XT0xfSksaHJbUnJbMTNdXT1BcitcIixcIitTcixoYShcIjA6dHJhbnNsYXRlWCwxOnRyYW5zbGF0ZVksMjp0cmFuc2xhdGVaLDg6cm90YXRlLDg6cm90YXRpb25aLDg6cm90YXRlWiw5OnJvdGF0ZVgsMTA6cm90YXRlWVwiLGZ1bmN0aW9uKHQpe3ZhciBlPXQuc3BsaXQoXCI6XCIpO2hyW2VbMV1dPVJyW2VbMF1dfSksaGEoXCJ4LHkseix0b3AscmlnaHQsYm90dG9tLGxlZnQsd2lkdGgsaGVpZ2h0LGZvbnRTaXplLHBhZGRpbmcsbWFyZ2luLHBlcnNwZWN0aXZlXCIsZnVuY3Rpb24odCl7ai51bml0c1t0XT1cInB4XCJ9KSxDZS5yZWdpc3RlclBsdWdpbihEcik7dmFyIEVyPUNlLnJlZ2lzdGVyUGx1Z2luKERyKXx8Q2UsenI9RXIuY29yZS5Ud2VlbjtlLkJhY2s9WmUsZS5Cb3VuY2U9SmUsZS5DU1NQbHVnaW49RHIsZS5DaXJjPWVyLGUuQ3ViaWM9V2UsZS5FbGFzdGljPUtlLGUuRXhwbz10cixlLkxpbmVhcj1VZSxlLlBvd2VyMD1CZSxlLlBvd2VyMT1MZSxlLlBvd2VyMj1ZZSxlLlBvd2VyMz1OZSxlLlBvd2VyND1xZSxlLlF1YWQ9VmUsZS5RdWFydD1YZSxlLlF1aW50PUhlLGUuU2luZT0kZSxlLlN0ZXBwZWRFYXNlPUdlLGUuU3Ryb25nPVFlLGUuVGltZWxpbmVMaXRlPVV0LGUuVGltZWxpbmVNYXg9VXQsZS5Ud2VlbkxpdGU9R3QsZS5Ud2Vlbk1heD16cixlLmRlZmF1bHQ9RXIsZS5nc2FwPUVyO2lmICh0eXBlb2Yod2luZG93KT09PVwidW5kZWZpbmVkXCJ8fHdpbmRvdyE9PWUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSBlbHNlIHtkZWxldGUgZS5kZWZhdWx0fX0pO1xuIiwiLyohXG4gKiBkaXN0L2lucHV0bWFzay5taW5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvSW5wdXRtYXNrXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTAgLSAyMDIyIFJvYmluIEhlcmJvdHNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogVmVyc2lvbjogNS4wLjgtYmV0YS41N1xuICovXG4hZnVuY3Rpb24oZSx0KXtpZihcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz10KCk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtdLHQpO2Vsc2V7dmFyIGk9dCgpO2Zvcih2YXIgYSBpbiBpKShcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzOmUpW2FdPWlbYV19fShcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsKGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9ezg3NDE6ZnVuY3Rpb24oZSx0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmRlZmF1bHQ9dm9pZCAwO3ZhciBpPSEoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvd3x8IXdpbmRvdy5kb2N1bWVudHx8IXdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTt0LmRlZmF1bHQ9aX0sMzk3NjpmdW5jdGlvbihlLHQsaSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5kZWZhdWx0PXZvaWQgMDt2YXIgYT1pKDI4MzkpLG49e19tYXhUZXN0UG9zOjUwMCxwbGFjZWhvbGRlcjpcIl9cIixvcHRpb25hbG1hcmtlcjpbXCJbXCIsXCJdXCJdLHF1YW50aWZpZXJtYXJrZXI6W1wie1wiLFwifVwiXSxncm91cG1hcmtlcjpbXCIoXCIsXCIpXCJdLGFsdGVybmF0b3JtYXJrZXI6XCJ8XCIsZXNjYXBlQ2hhcjpcIlxcXFxcIixtYXNrOm51bGwscmVnZXg6bnVsbCxvbmNvbXBsZXRlOmZ1bmN0aW9uKCl7fSxvbmluY29tcGxldGU6ZnVuY3Rpb24oKXt9LG9uY2xlYXJlZDpmdW5jdGlvbigpe30scmVwZWF0OjAsZ3JlZWR5OiExLGF1dG9Vbm1hc2s6ITEscmVtb3ZlTWFza09uU3VibWl0OiExLGNsZWFyTWFza09uTG9zdEZvY3VzOiEwLGluc2VydE1vZGU6ITAsaW5zZXJ0TW9kZVZpc3VhbDohMCxjbGVhckluY29tcGxldGU6ITEsYWxpYXM6bnVsbCxvbktleURvd246ZnVuY3Rpb24oKXt9LG9uQmVmb3JlTWFzazpudWxsLG9uQmVmb3JlUGFzdGU6ZnVuY3Rpb24oZSx0KXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lm9uQmVmb3JlTWFzaz90Lm9uQmVmb3JlTWFzay5jYWxsKHRoaXMsZSx0KTplfSxvbkJlZm9yZVdyaXRlOm51bGwsb25Vbk1hc2s6bnVsbCxzaG93TWFza09uRm9jdXM6ITAsc2hvd01hc2tPbkhvdmVyOiEwLG9uS2V5VmFsaWRhdGlvbjpmdW5jdGlvbigpe30sc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcjpcIiBcIixudW1lcmljSW5wdXQ6ITEscmlnaHRBbGlnbjohMSx1bmRvT25Fc2NhcGU6ITAscmFkaXhQb2ludDpcIlwiLF9yYWRpeERhbmNlOiExLGdyb3VwU2VwYXJhdG9yOlwiXCIsa2VlcFN0YXRpYzpudWxsLHBvc2l0aW9uQ2FyZXRPblRhYjohMCx0YWJUaHJvdWdoOiExLHN1cHBvcnRzSW5wdXRUeXBlOltcInRleHRcIixcInRlbFwiLFwidXJsXCIsXCJwYXNzd29yZFwiLFwic2VhcmNoXCJdLGlnbm9yYWJsZXM6W2Eua2V5cy5CYWNrc3BhY2UsYS5rZXlzLlRhYixhLmtleXMuUGF1c2UsYS5rZXlzLkVzY2FwZSxhLmtleXMuUGFnZVVwLGEua2V5cy5QYWdlRG93bixhLmtleXMuRW5kLGEua2V5cy5Ib21lLGEua2V5cy5BcnJvd0xlZnQsYS5rZXlzLkFycm93VXAsYS5rZXlzLkFycm93UmlnaHQsYS5rZXlzLkFycm93RG93bixhLmtleXMuSW5zZXJ0LGEua2V5cy5EZWxldGUsYS5rZXlzLkNvbnRleHRNZW51LGEua2V5cy5GMSxhLmtleXMuRjIsYS5rZXlzLkYzLGEua2V5cy5GNCxhLmtleXMuRjUsYS5rZXlzLkY2LGEua2V5cy5GNyxhLmtleXMuRjgsYS5rZXlzLkY5LGEua2V5cy5GMTAsYS5rZXlzLkYxMSxhLmtleXMuRjEyLGEua2V5cy5Qcm9jZXNzLGEua2V5cy5VbmlkZW50aWZpZWQsYS5rZXlzLlNoaWZ0LGEua2V5cy5Db250cm9sLGEua2V5cy5BbHQsYS5rZXlzLlRhYixhLmtleXMuQWx0R3JhcGgsYS5rZXlzLkNhcHNMb2NrXSxpc0NvbXBsZXRlOm51bGwscHJlVmFsaWRhdGlvbjpudWxsLHBvc3RWYWxpZGF0aW9uOm51bGwsc3RhdGljRGVmaW5pdGlvblN5bWJvbDp2b2lkIDAsaml0TWFza2luZzohMSxudWxsYWJsZTohMCxpbnB1dEV2ZW50T25seTohMSxub1ZhbHVlUGF0Y2hpbmc6ITEscG9zaXRpb25DYXJldE9uQ2xpY2s6XCJsdnBcIixjYXNpbmc6bnVsbCxpbnB1dG1vZGU6XCJ0ZXh0XCIsaW1wb3J0RGF0YUF0dHJpYnV0ZXM6ITAsc2hpZnRQb3NpdGlvbnM6ITAsdXNlUHJvdG90eXBlRGVmaW5pdGlvbnM6ITAsdmFsaWRhdGlvbkV2ZW50VGltZU91dDozZTMsc3Vic3RpdHV0ZXM6e319O3QuZGVmYXVsdD1ufSw3MzkyOmZ1bmN0aW9uKGUsdCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5kZWZhdWx0PXZvaWQgMDt0LmRlZmF1bHQ9ezk6e3ZhbGlkYXRvcjpcIlswLTlcXHVmZjEwLVxcdWZmMTldXCIsZGVmaW5pdGlvblN5bWJvbDpcIipcIn0sYTp7dmFsaWRhdG9yOlwiW0EtWmEtelxcdTA0MTAtXFx1MDQ0ZlxcdTA0MDFcXHUwNDUxXFx4YzAtXFx4ZmZcXHhiNV1cIixkZWZpbml0aW9uU3ltYm9sOlwiKlwifSxcIipcIjp7dmFsaWRhdG9yOlwiWzAtOVxcdWZmMTAtXFx1ZmYxOUEtWmEtelxcdTA0MTAtXFx1MDQ0ZlxcdTA0MDFcXHUwNDUxXFx4YzAtXFx4ZmZcXHhiNV1cIn19fSwyNTM6ZnVuY3Rpb24oZSx0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmRlZmF1bHQ9ZnVuY3Rpb24oZSx0LGkpe2lmKHZvaWQgMD09PWkpcmV0dXJuIGUuX19kYXRhP2UuX19kYXRhW3RdOm51bGw7ZS5fX2RhdGE9ZS5fX2RhdGF8fHt9LGUuX19kYXRhW3RdPWl9fSwzNzc2OmZ1bmN0aW9uKGUsdCxpKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkV2ZW50PXZvaWQgMCx0Lm9mZj1mdW5jdGlvbihlLHQpe3ZhciBpLGE7ZnVuY3Rpb24gbihlLHQsbil7aWYoZSBpbiBpPT0hMClpZihhLnJlbW92ZUV2ZW50TGlzdGVuZXI/YS5yZW1vdmVFdmVudExpc3RlbmVyKGUsbiwhMSk6YS5kZXRhY2hFdmVudCYmYS5kZXRhY2hFdmVudChcIm9uXCIrZSxuKSxcImdsb2JhbFwiPT09dClmb3IodmFyIHIgaW4gaVtlXSlpW2VdW3JdLnNwbGljZShpW2VdW3JdLmluZGV4T2YobiksMSk7ZWxzZSBpW2VdW3RdLnNwbGljZShpW2VdW3RdLmluZGV4T2YobiksMSl9ZnVuY3Rpb24gcihlLGEpe3ZhciBuLHIsbz1bXTtpZihlLmxlbmd0aD4wKWlmKHZvaWQgMD09PXQpZm9yKG49MCxyPWlbZV1bYV0ubGVuZ3RoO248cjtuKyspby5wdXNoKHtldjplLG5hbWVzcGFjZTphJiZhLmxlbmd0aD4wP2E6XCJnbG9iYWxcIixoYW5kbGVyOmlbZV1bYV1bbl19KTtlbHNlIG8ucHVzaCh7ZXY6ZSxuYW1lc3BhY2U6YSYmYS5sZW5ndGg+MD9hOlwiZ2xvYmFsXCIsaGFuZGxlcjp0fSk7ZWxzZSBpZihhLmxlbmd0aD4wKWZvcih2YXIgcyBpbiBpKWZvcih2YXIgbCBpbiBpW3NdKWlmKGw9PT1hKWlmKHZvaWQgMD09PXQpZm9yKG49MCxyPWlbc11bbF0ubGVuZ3RoO248cjtuKyspby5wdXNoKHtldjpzLG5hbWVzcGFjZTpsLGhhbmRsZXI6aVtzXVtsXVtuXX0pO2Vsc2Ugby5wdXNoKHtldjpzLG5hbWVzcGFjZTpsLGhhbmRsZXI6dH0pO3JldHVybiBvfWlmKGModGhpc1swXSkmJmUpe2k9dGhpc1swXS5ldmVudFJlZ2lzdHJ5LGE9dGhpc1swXTtmb3IodmFyIG89ZS5zcGxpdChcIiBcIikscz0wO3M8by5sZW5ndGg7cysrKWZvcih2YXIgbD1vW3NdLnNwbGl0KFwiLlwiKSx1PXIobFswXSxsWzFdKSxmPTAsZD11Lmxlbmd0aDtmPGQ7ZisrKW4odVtmXS5ldix1W2ZdLm5hbWVzcGFjZSx1W2ZdLmhhbmRsZXIpfXJldHVybiB0aGlzfSx0Lm9uPWZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gaShlLGkpe24uYWRkRXZlbnRMaXN0ZW5lcj9uLmFkZEV2ZW50TGlzdGVuZXIoZSx0LCExKTpuLmF0dGFjaEV2ZW50JiZuLmF0dGFjaEV2ZW50KFwib25cIitlLHQpLGFbZV09YVtlXXx8e30sYVtlXVtpXT1hW2VdW2ldfHxbXSxhW2VdW2ldLnB1c2godCl9aWYoYyh0aGlzWzBdKSlmb3IodmFyIGE9dGhpc1swXS5ldmVudFJlZ2lzdHJ5LG49dGhpc1swXSxyPWUuc3BsaXQoXCIgXCIpLG89MDtvPHIubGVuZ3RoO28rKyl7dmFyIHM9cltvXS5zcGxpdChcIi5cIiksbD1zWzBdLHU9c1sxXXx8XCJnbG9iYWxcIjtpKGwsdSl9cmV0dXJuIHRoaXN9LHQudHJpZ2dlcj1mdW5jdGlvbihlKXtpZihjKHRoaXNbMF0pKWZvcih2YXIgdD10aGlzWzBdLmV2ZW50UmVnaXN0cnksaT10aGlzWzBdLGE9XCJzdHJpbmdcIj09dHlwZW9mIGU/ZS5zcGxpdChcIiBcIik6W2UudHlwZV0scj0wO3I8YS5sZW5ndGg7cisrKXt2YXIgcz1hW3JdLnNwbGl0KFwiLlwiKSxsPXNbMF0sdT1zWzFdfHxcImdsb2JhbFwiO2lmKHZvaWQgMCE9PWRvY3VtZW50JiZcImdsb2JhbFwiPT09dSl7dmFyIGYsZCxwPXtidWJibGVzOiEwLGNhbmNlbGFibGU6ITAsY29tcG9zZWQ6ITAsZGV0YWlsOmFyZ3VtZW50c1sxXX07aWYoZG9jdW1lbnQuY3JlYXRlRXZlbnQpe3RyeXtpZihcImlucHV0XCI9PT1sKXAuaW5wdXRUeXBlPVwiaW5zZXJ0VGV4dFwiLGY9bmV3IElucHV0RXZlbnQobCxwKTtlbHNlIGY9bmV3IEN1c3RvbUV2ZW50KGwscCl9Y2F0Y2goZSl7KGY9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKSkuaW5pdEN1c3RvbUV2ZW50KGwscC5idWJibGVzLHAuY2FuY2VsYWJsZSxwLmRldGFpbCl9ZS50eXBlJiYoMCxuLmRlZmF1bHQpKGYsZSksaS5kaXNwYXRjaEV2ZW50KGYpfWVsc2UoZj1kb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCgpKS5ldmVudFR5cGU9bCxmLmRldGFpbD1hcmd1bWVudHNbMV0sZS50eXBlJiYoMCxuLmRlZmF1bHQpKGYsZSksaS5maXJlRXZlbnQoXCJvblwiK2YuZXZlbnRUeXBlLGYpfWVsc2UgaWYodm9pZCAwIT09dFtsXSlpZihhcmd1bWVudHNbMF09YXJndW1lbnRzWzBdLnR5cGU/YXJndW1lbnRzWzBdOm8uZGVmYXVsdC5FdmVudChhcmd1bWVudHNbMF0pLGFyZ3VtZW50c1swXS5kZXRhaWw9YXJndW1lbnRzLnNsaWNlKDEpLFwiZ2xvYmFsXCI9PT11KWZvcih2YXIgaCBpbiB0W2xdKWZvcihkPTA7ZDx0W2xdW2hdLmxlbmd0aDtkKyspdFtsXVtoXVtkXS5hcHBseShpLGFyZ3VtZW50cyk7ZWxzZSBmb3IoZD0wO2Q8dFtsXVt1XS5sZW5ndGg7ZCsrKXRbbF1bdV1bZF0uYXBwbHkoaSxhcmd1bWVudHMpfXJldHVybiB0aGlzfTt2YXIgYSxuPWwoaSg2MDApKSxyPWwoaSg5MzgwKSksbz1sKGkoNDk2MykpLHM9bChpKDg3NDEpKTtmdW5jdGlvbiBsKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBjKGUpe3JldHVybiBlIGluc3RhbmNlb2YgRWxlbWVudH10LkV2ZW50PWEsXCJmdW5jdGlvblwiPT10eXBlb2Ygci5kZWZhdWx0LkN1c3RvbUV2ZW50P3QuRXZlbnQ9YT1yLmRlZmF1bHQuQ3VzdG9tRXZlbnQ6cy5kZWZhdWx0JiYodC5FdmVudD1hPWZ1bmN0aW9uKGUsdCl7dD10fHx7YnViYmxlczohMSxjYW5jZWxhYmxlOiExLGNvbXBvc2VkOiEwLGRldGFpbDp2b2lkIDB9O3ZhciBpPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7cmV0dXJuIGkuaW5pdEN1c3RvbUV2ZW50KGUsdC5idWJibGVzLHQuY2FuY2VsYWJsZSx0LmRldGFpbCksaX0sYS5wcm90b3R5cGU9ci5kZWZhdWx0LkV2ZW50LnByb3RvdHlwZSl9LDYwMDpmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIGkoZSl7cmV0dXJuIGk9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0saShlKX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmRlZmF1bHQ9ZnVuY3Rpb24gZSgpe3ZhciB0LGEsbixyLG8scyxsPWFyZ3VtZW50c1swXXx8e30sYz0xLHU9YXJndW1lbnRzLmxlbmd0aCxmPSExO1wiYm9vbGVhblwiPT10eXBlb2YgbCYmKGY9bCxsPWFyZ3VtZW50c1tjXXx8e30sYysrKTtcIm9iamVjdFwiIT09aShsKSYmXCJmdW5jdGlvblwiIT10eXBlb2YgbCYmKGw9e30pO2Zvcig7Yzx1O2MrKylpZihudWxsIT0odD1hcmd1bWVudHNbY10pKWZvcihhIGluIHQpbj1sW2FdLHI9dFthXSxsIT09ciYmKGYmJnImJihcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHIpfHwobz1BcnJheS5pc0FycmF5KHIpKSk/KG8/KG89ITEscz1uJiZBcnJheS5pc0FycmF5KG4pP246W10pOnM9biYmXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuKT9uOnt9LGxbYV09ZShmLHMscikpOnZvaWQgMCE9PXImJihsW2FdPXIpKTtyZXR1cm4gbH19LDQ5NjM6ZnVuY3Rpb24oZSx0LGkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD12b2lkIDA7dmFyIGE9cyhpKDYwMCkpLG49cyhpKDkzODApKSxyPXMoaSgyNTMpKSxvPWkoMzc3Nik7ZnVuY3Rpb24gcyhlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIGw9bi5kZWZhdWx0LmRvY3VtZW50O2Z1bmN0aW9uIGMoZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBjP2U6dGhpcyBpbnN0YW5jZW9mIGM/dm9pZChudWxsIT1lJiZlIT09bi5kZWZhdWx0JiYodGhpc1swXT1lLm5vZGVOYW1lP2U6dm9pZCAwIT09ZVswXSYmZVswXS5ub2RlTmFtZT9lWzBdOmwucXVlcnlTZWxlY3RvcihlKSx2b2lkIDAhPT10aGlzWzBdJiZudWxsIT09dGhpc1swXSYmKHRoaXNbMF0uZXZlbnRSZWdpc3RyeT10aGlzWzBdLmV2ZW50UmVnaXN0cnl8fHt9KSkpOm5ldyBjKGUpfWMucHJvdG90eXBlPXtvbjpvLm9uLG9mZjpvLm9mZix0cmlnZ2VyOm8udHJpZ2dlcn0sYy5leHRlbmQ9YS5kZWZhdWx0LGMuZGF0YT1yLmRlZmF1bHQsYy5FdmVudD1vLkV2ZW50O3ZhciB1PWM7dC5kZWZhdWx0PXV9LDk4NDU6ZnVuY3Rpb24oZSx0LGkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQubW9iaWxlPXQuaXBob25lPXQuaWU9dm9pZCAwO3ZhciBhLG49KGE9aSg5MzgwKSkmJmEuX19lc01vZHVsZT9hOntkZWZhdWx0OmF9O3ZhciByPW4uZGVmYXVsdC5uYXZpZ2F0b3ImJm4uZGVmYXVsdC5uYXZpZ2F0b3IudXNlckFnZW50fHxcIlwiLG89ci5pbmRleE9mKFwiTVNJRSBcIik+MHx8ci5pbmRleE9mKFwiVHJpZGVudC9cIik+MCxzPW5hdmlnYXRvci51c2VyQWdlbnREYXRhJiZuYXZpZ2F0b3IudXNlckFnZW50RGF0YS5tb2JpbGV8fG4uZGVmYXVsdC5uYXZpZ2F0b3ImJm4uZGVmYXVsdC5uYXZpZ2F0b3IubWF4VG91Y2hQb2ludHN8fFwib250b3VjaHN0YXJ0XCJpbiBuLmRlZmF1bHQsbD0vaXBob25lL2kudGVzdChyKTt0LmlwaG9uZT1sLHQubW9iaWxlPXMsdC5pZT1vfSw3MTg0OmZ1bmN0aW9uKGUsdCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5kZWZhdWx0PWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoaSxcIlxcXFwkMVwiKX07dmFyIGk9bmV3IFJlZ0V4cChcIihcXFxcXCIrW1wiL1wiLFwiLlwiLFwiKlwiLFwiK1wiLFwiP1wiLFwifFwiLFwiKFwiLFwiKVwiLFwiW1wiLFwiXVwiLFwie1wiLFwifVwiLFwiXFxcXFwiLFwiJFwiLFwiXlwiXS5qb2luKFwifFxcXFxcIikrXCIpXCIsXCJnaW1cIil9LDYwMzA6ZnVuY3Rpb24oZSx0LGkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRXZlbnRIYW5kbGVycz12b2lkIDA7dmFyIGE9aSg4NzExKSxuPWkoMjgzOSkscj1pKDk4NDUpLG89aSg3MjE1KSxzPWkoNzc2MCksbD1pKDQ3MTMpO2Z1bmN0aW9uIGMoZSx0KXt2YXIgaT1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCFpKXtpZihBcnJheS5pc0FycmF5KGUpfHwoaT1mdW5jdGlvbihlLHQpe2lmKCFlKXJldHVybjtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gdShlLHQpO3ZhciBpPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtcIk9iamVjdFwiPT09aSYmZS5jb25zdHJ1Y3RvciYmKGk9ZS5jb25zdHJ1Y3Rvci5uYW1lKTtpZihcIk1hcFwiPT09aXx8XCJTZXRcIj09PWkpcmV0dXJuIEFycmF5LmZyb20oZSk7aWYoXCJBcmd1bWVudHNcIj09PWl8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KGkpKXJldHVybiB1KGUsdCl9KGUpKXx8dCYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXtpJiYoZT1pKTt2YXIgYT0wLG49ZnVuY3Rpb24oKXt9O3JldHVybntzOm4sbjpmdW5jdGlvbigpe3JldHVybiBhPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVthKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOm59fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgcixvPSEwLHM9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXtpPWkuY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPWkubmV4dCgpO3JldHVybiBvPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3M9ITAscj1lfSxmOmZ1bmN0aW9uKCl7dHJ5e298fG51bGw9PWkucmV0dXJufHxpLnJldHVybigpfWZpbmFsbHl7aWYocyl0aHJvdyByfX19fWZ1bmN0aW9uIHUoZSx0KXsobnVsbD09dHx8dD5lLmxlbmd0aCkmJih0PWUubGVuZ3RoKTtmb3IodmFyIGk9MCxhPW5ldyBBcnJheSh0KTtpPHQ7aSsrKWFbaV09ZVtpXTtyZXR1cm4gYX12YXIgZj17a2V5RXZlbnQ6ZnVuY3Rpb24oZSx0LGksYyx1KXt2YXIgZD10aGlzLmlucHV0bWFzayxwPWQub3B0cyxoPWQuZGVwZW5kZW5jeUxpYix2PWQubWFza3NldCxtPXRoaXMsZz1oKG0pLGs9ZS5rZXkseT1hLmNhcmV0LmNhbGwoZCxtKSxiPXAub25LZXlEb3duLmNhbGwodGhpcyxlLGEuZ2V0QnVmZmVyLmNhbGwoZCkseSxwKTtpZih2b2lkIDAhPT1iKXJldHVybiBiO2lmKGs9PT1uLmtleXMuQmFja3NwYWNlfHxrPT09bi5rZXlzLkRlbGV0ZXx8ci5pcGhvbmUmJms9PT1uLmtleXMuQkFDS1NQQUNFX1NBRkFSSXx8ZS5jdHJsS2V5JiZrPT09bi5rZXlzLngmJiEoXCJvbmN1dFwiaW4gbSkpZS5wcmV2ZW50RGVmYXVsdCgpLG8uaGFuZGxlUmVtb3ZlLmNhbGwoZCxtLGsseSksKDAscy53cml0ZUJ1ZmZlcikobSxhLmdldEJ1ZmZlci5jYWxsKGQsITApLHYucCxlLG0uaW5wdXRtYXNrLl92YWx1ZUdldCgpIT09YS5nZXRCdWZmZXIuY2FsbChkKS5qb2luKFwiXCIpKTtlbHNlIGlmKGs9PT1uLmtleXMuRW5kfHxrPT09bi5rZXlzLlBhZ2VEb3duKXtlLnByZXZlbnREZWZhdWx0KCk7dmFyIHg9YS5zZWVrTmV4dC5jYWxsKGQsYS5nZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKGQpKTthLmNhcmV0LmNhbGwoZCxtLGUuc2hpZnRLZXk/eS5iZWdpbjp4LHgsITApfWVsc2Ugaz09PW4ua2V5cy5Ib21lJiYhZS5zaGlmdEtleXx8az09PW4ua2V5cy5QYWdlVXA/KGUucHJldmVudERlZmF1bHQoKSxhLmNhcmV0LmNhbGwoZCxtLDAsZS5zaGlmdEtleT95LmJlZ2luOjAsITApKTpwLnVuZG9PbkVzY2FwZSYmaz09PW4ua2V5cy5Fc2NhcGUmJiEwIT09ZS5hbHRLZXk/KCgwLHMuY2hlY2tWYWwpKG0sITAsITEsZC51bmRvVmFsdWUuc3BsaXQoXCJcIikpLGcudHJpZ2dlcihcImNsaWNrXCIpKTprIT09bi5rZXlzLkluc2VydHx8ZS5zaGlmdEtleXx8ZS5jdHJsS2V5fHx2b2lkIDAhPT1kLnVzZXJPcHRpb25zLmluc2VydE1vZGU/ITA9PT1wLnRhYlRocm91Z2gmJms9PT1uLmtleXMuVGFiPyEwPT09ZS5zaGlmdEtleT8oeS5lbmQ9YS5zZWVrUHJldmlvdXMuY2FsbChkLHkuZW5kLCEwKSwhMD09PWwuZ2V0VGVzdC5jYWxsKGQseS5lbmQtMSkubWF0Y2guc3RhdGljJiZ5LmVuZC0tLHkuYmVnaW49YS5zZWVrUHJldmlvdXMuY2FsbChkLHkuZW5kLCEwKSx5LmJlZ2luPj0wJiZ5LmVuZD4wJiYoZS5wcmV2ZW50RGVmYXVsdCgpLGEuY2FyZXQuY2FsbChkLG0seS5iZWdpbix5LmVuZCkpKTooeS5iZWdpbj1hLnNlZWtOZXh0LmNhbGwoZCx5LmJlZ2luLCEwKSx5LmVuZD1hLnNlZWtOZXh0LmNhbGwoZCx5LmJlZ2luLCEwKSx5LmVuZDx2Lm1hc2tMZW5ndGgmJnkuZW5kLS0seS5iZWdpbjw9di5tYXNrTGVuZ3RoJiYoZS5wcmV2ZW50RGVmYXVsdCgpLGEuY2FyZXQuY2FsbChkLG0seS5iZWdpbix5LmVuZCkpKTplLnNoaWZ0S2V5fHxwLmluc2VydE1vZGVWaXN1YWwmJiExPT09cC5pbnNlcnRNb2RlJiYoaz09PW4ua2V5cy5BcnJvd1JpZ2h0P3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dmFyIGU9YS5jYXJldC5jYWxsKGQsbSk7YS5jYXJldC5jYWxsKGQsbSxlLmJlZ2luKX0pLDApOms9PT1uLmtleXMuQXJyb3dMZWZ0JiZzZXRUaW1lb3V0KChmdW5jdGlvbigpe3ZhciBlPWEudHJhbnNsYXRlUG9zaXRpb24uY2FsbChkLG0uaW5wdXRtYXNrLmNhcmV0UG9zLmJlZ2luKTthLnRyYW5zbGF0ZVBvc2l0aW9uLmNhbGwoZCxtLmlucHV0bWFzay5jYXJldFBvcy5lbmQpO2QuaXNSVEw/YS5jYXJldC5jYWxsKGQsbSxlKyhlPT09di5tYXNrTGVuZ3RoPzA6MSkpOmEuY2FyZXQuY2FsbChkLG0sZS0oMD09PWU/MDoxKSl9KSwwKSk6by5pc1NlbGVjdGlvbi5jYWxsKGQseSk/cC5pbnNlcnRNb2RlPSFwLmluc2VydE1vZGU6KHAuaW5zZXJ0TW9kZT0hcC5pbnNlcnRNb2RlLGEuY2FyZXQuY2FsbChkLG0seS5iZWdpbix5LmJlZ2luKSk7cmV0dXJuIGQuaXNDb21wb3Npbmc9az09bi5rZXlzLlByb2Nlc3N8fGs9PW4ua2V5cy5VbmlkZW50aWZpZWQsZC5pZ25vcmFibGU9cC5pZ25vcmFibGVzLmluY2x1ZGVzKGspLGYua2V5cHJlc3NFdmVudC5jYWxsKHRoaXMsZSx0LGksYyx1KX0sa2V5cHJlc3NFdmVudDpmdW5jdGlvbihlLHQsaSxyLGwpe3ZhciBjPXRoaXMuaW5wdXRtYXNrfHx0aGlzLHU9Yy5vcHRzLGY9Yy5kZXBlbmRlbmN5TGliLGQ9Yy5tYXNrc2V0LHA9Yy5lbCxoPWYocCksdj1lLmtleTtpZighMD09PXR8fGUuY3RybEtleSYmZS5hbHRLZXl8fCEoZS5jdHJsS2V5fHxlLm1ldGFLZXl8fGMuaWdub3JhYmxlKSl7aWYodil7dmFyIG0sZz10P3tiZWdpbjpsLGVuZDpsfTphLmNhcmV0LmNhbGwoYyxwKTt2PXUuc3Vic3RpdHV0ZXNbdl18fHYsZC53cml0ZU91dEJ1ZmZlcj0hMDt2YXIgaz1vLmlzVmFsaWQuY2FsbChjLGcsdixyLHZvaWQgMCx2b2lkIDAsdm9pZCAwLHQpO2lmKCExIT09ayYmKGEucmVzZXRNYXNrU2V0LmNhbGwoYywhMCksbT12b2lkIDAhPT1rLmNhcmV0P2suY2FyZXQ6YS5zZWVrTmV4dC5jYWxsKGMsay5wb3MuYmVnaW4/ay5wb3MuYmVnaW46ay5wb3MpLGQucD1tKSxtPXUubnVtZXJpY0lucHV0JiZ2b2lkIDA9PT1rLmNhcmV0P2Euc2Vla1ByZXZpb3VzLmNhbGwoYyxtKTptLCExIT09aSYmKHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dS5vbktleVZhbGlkYXRpb24uY2FsbChwLHYsayl9KSwwKSxkLndyaXRlT3V0QnVmZmVyJiYhMSE9PWspKXt2YXIgeT1hLmdldEJ1ZmZlci5jYWxsKGMpOygwLHMud3JpdGVCdWZmZXIpKHAseSxtLGUsITAhPT10KX1pZihlLnByZXZlbnREZWZhdWx0KCksdClyZXR1cm4hMSE9PWsmJihrLmZvcndhcmRQb3NpdGlvbj1tKSxrfX1lbHNlIHY9PT1uLmtleXMuRW50ZXImJmMudW5kb1ZhbHVlIT09Yy5fdmFsdWVHZXQoITApJiYoYy51bmRvVmFsdWU9Yy5fdmFsdWVHZXQoITApLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7aC50cmlnZ2VyKFwiY2hhbmdlXCIpfSksMCkpfSxwYXN0ZUV2ZW50OmZ1bmN0aW9uKGUpe3ZhciB0LGk9dGhpcy5pbnB1dG1hc2ssbj1pLm9wdHMscj1pLl92YWx1ZUdldCghMCksbz1hLmNhcmV0LmNhbGwoaSx0aGlzKTtpLmlzUlRMJiYodD1vLmVuZCxvLmVuZD1hLnRyYW5zbGF0ZVBvc2l0aW9uLmNhbGwoaSxvLmJlZ2luKSxvLmJlZ2luPWEudHJhbnNsYXRlUG9zaXRpb24uY2FsbChpLHQpKTt2YXIgbD1yLnN1YnN0cigwLG8uYmVnaW4pLHU9ci5zdWJzdHIoby5lbmQsci5sZW5ndGgpO2lmKGw9PShpLmlzUlRMP2EuZ2V0QnVmZmVyVGVtcGxhdGUuY2FsbChpKS5zbGljZSgpLnJldmVyc2UoKTphLmdldEJ1ZmZlclRlbXBsYXRlLmNhbGwoaSkpLnNsaWNlKDAsby5iZWdpbikuam9pbihcIlwiKSYmKGw9XCJcIiksdT09KGkuaXNSVEw/YS5nZXRCdWZmZXJUZW1wbGF0ZS5jYWxsKGkpLnNsaWNlKCkucmV2ZXJzZSgpOmEuZ2V0QnVmZmVyVGVtcGxhdGUuY2FsbChpKSkuc2xpY2Uoby5lbmQpLmpvaW4oXCJcIikmJih1PVwiXCIpLHdpbmRvdy5jbGlwYm9hcmREYXRhJiZ3aW5kb3cuY2xpcGJvYXJkRGF0YS5nZXREYXRhKXI9bCt3aW5kb3cuY2xpcGJvYXJkRGF0YS5nZXREYXRhKFwiVGV4dFwiKSt1O2Vsc2V7aWYoIWUuY2xpcGJvYXJkRGF0YXx8IWUuY2xpcGJvYXJkRGF0YS5nZXREYXRhKXJldHVybiEwO3I9bCtlLmNsaXBib2FyZERhdGEuZ2V0RGF0YShcInRleHQvcGxhaW5cIikrdX12YXIgZj1yO2lmKGkuaXNSVEwpe2Y9Zi5zcGxpdChcIlwiKTt2YXIgZCxwPWMoYS5nZXRCdWZmZXJUZW1wbGF0ZS5jYWxsKGkpKTt0cnl7Zm9yKHAucygpOyEoZD1wLm4oKSkuZG9uZTspe3ZhciBoPWQudmFsdWU7ZlswXT09PWgmJmYuc2hpZnQoKX19Y2F0Y2goZSl7cC5lKGUpfWZpbmFsbHl7cC5mKCl9Zj1mLmpvaW4oXCJcIil9aWYoXCJmdW5jdGlvblwiPT10eXBlb2Ygbi5vbkJlZm9yZVBhc3RlKXtpZighMT09PShmPW4ub25CZWZvcmVQYXN0ZS5jYWxsKGksZixuKSkpcmV0dXJuITE7Znx8KGY9cil9KDAscy5jaGVja1ZhbCkodGhpcywhMCwhMSxmLnRvU3RyaW5nKCkuc3BsaXQoXCJcIiksZSksZS5wcmV2ZW50RGVmYXVsdCgpfSxpbnB1dEZhbGxCYWNrRXZlbnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5pbnB1dG1hc2ssaT10Lm9wdHMscj10LmRlcGVuZGVuY3lMaWI7dmFyIG8sYz10aGlzLHU9Yy5pbnB1dG1hc2suX3ZhbHVlR2V0KCEwKSxkPSh0LmlzUlRMP2EuZ2V0QnVmZmVyLmNhbGwodCkuc2xpY2UoKS5yZXZlcnNlKCk6YS5nZXRCdWZmZXIuY2FsbCh0KSkuam9pbihcIlwiKSxwPWEuY2FyZXQuY2FsbCh0LGMsdm9pZCAwLHZvaWQgMCwhMCk7aWYoZCE9PXUpe2lmKG89ZnVuY3Rpb24oZSxuLHIpe2Zvcih2YXIgbyxzLGMsdT1lLnN1YnN0cigwLHIuYmVnaW4pLnNwbGl0KFwiXCIpLGY9ZS5zdWJzdHIoci5iZWdpbikuc3BsaXQoXCJcIiksZD1uLnN1YnN0cigwLHIuYmVnaW4pLnNwbGl0KFwiXCIpLHA9bi5zdWJzdHIoci5iZWdpbikuc3BsaXQoXCJcIiksaD11Lmxlbmd0aD49ZC5sZW5ndGg/dS5sZW5ndGg6ZC5sZW5ndGgsdj1mLmxlbmd0aD49cC5sZW5ndGg/Zi5sZW5ndGg6cC5sZW5ndGgsbT1cIlwiLGc9W10saz1cIn5cIjt1Lmxlbmd0aDxoOyl1LnB1c2goayk7Zm9yKDtkLmxlbmd0aDxoOylkLnB1c2goayk7Zm9yKDtmLmxlbmd0aDx2OylmLnVuc2hpZnQoayk7Zm9yKDtwLmxlbmd0aDx2OylwLnVuc2hpZnQoayk7dmFyIHk9dS5jb25jYXQoZiksYj1kLmNvbmNhdChwKTtmb3Iocz0wLG89eS5sZW5ndGg7czxvO3MrKylzd2l0Y2goYz1sLmdldFBsYWNlaG9sZGVyLmNhbGwodCxhLnRyYW5zbGF0ZVBvc2l0aW9uLmNhbGwodCxzKSksbSl7Y2FzZVwiaW5zZXJ0VGV4dFwiOmJbcy0xXT09PXlbc10mJnIuYmVnaW49PXkubGVuZ3RoLTEmJmcucHVzaCh5W3NdKSxzPW87YnJlYWs7Y2FzZVwiaW5zZXJ0UmVwbGFjZW1lbnRUZXh0XCI6Y2FzZVwiZGVsZXRlQ29udGVudEJhY2t3YXJkXCI6eVtzXT09PWs/ci5lbmQrKzpzPW87YnJlYWs7ZGVmYXVsdDp5W3NdIT09YltzXSYmKHlbcysxXSE9PWsmJnlbcysxXSE9PWMmJnZvaWQgMCE9PXlbcysxXXx8KGJbc10hPT1jfHxiW3MrMV0hPT1rKSYmYltzXSE9PWs/YltzKzFdPT09ayYmYltzXT09PXlbcysxXT8obT1cImluc2VydFRleHRcIixnLnB1c2goeVtzXSksci5iZWdpbi0tLHIuZW5kLS0pOnlbc10hPT1jJiZ5W3NdIT09ayYmKHlbcysxXT09PWt8fGJbc10hPT15W3NdJiZiW3MrMV09PT15W3MrMV0pPyhtPVwiaW5zZXJ0UmVwbGFjZW1lbnRUZXh0XCIsZy5wdXNoKHlbc10pLHIuYmVnaW4tLSk6eVtzXT09PWs/KG09XCJkZWxldGVDb250ZW50QmFja3dhcmRcIiwoYS5pc01hc2suY2FsbCh0LGEudHJhbnNsYXRlUG9zaXRpb24uY2FsbCh0LHMpLCEwKXx8YltzXT09PWkucmFkaXhQb2ludCkmJnIuZW5kKyspOnM9bzoobT1cImluc2VydFRleHRcIixnLnB1c2goeVtzXSksci5iZWdpbi0tLHIuZW5kLS0pKX1yZXR1cm57YWN0aW9uOm0sZGF0YTpnLGNhcmV0OnJ9fSh1LGQscCksKGMuaW5wdXRtYXNrLnNoYWRvd1Jvb3R8fGMub3duZXJEb2N1bWVudCkuYWN0aXZlRWxlbWVudCE9PWMmJmMuZm9jdXMoKSwoMCxzLndyaXRlQnVmZmVyKShjLGEuZ2V0QnVmZmVyLmNhbGwodCkpLGEuY2FyZXQuY2FsbCh0LGMscC5iZWdpbixwLmVuZCwhMCksdC5za2lwTmV4dEluc2VydCYmXCJpbnNlcnRUZXh0XCI9PT1lLmlucHV0VHlwZSYmXCJpbnNlcnRUZXh0XCI9PT1vLmFjdGlvbiYmdC5pc0NvbXBvc2luZylyZXR1cm4hMTtzd2l0Y2goXCJpbnNlcnRDb21wb3NpdGlvblRleHRcIj09PWUuaW5wdXRUeXBlJiZcImluc2VydFRleHRcIj09PW8uYWN0aW9uJiZ0LmlzQ29tcG9zaW5nP3Quc2tpcE5leHRJbnNlcnQ9ITA6dC5za2lwTmV4dEluc2VydD0hMSxvLmFjdGlvbil7Y2FzZVwiaW5zZXJ0VGV4dFwiOmNhc2VcImluc2VydFJlcGxhY2VtZW50VGV4dFwiOm8uZGF0YS5mb3JFYWNoKChmdW5jdGlvbihlLGkpe3ZhciBhPW5ldyByLkV2ZW50KFwia2V5cHJlc3NcIik7YS5rZXk9ZSx0Lmlnbm9yYWJsZT0hMSxmLmtleXByZXNzRXZlbnQuY2FsbChjLGEpfSkpLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dC4kZWwudHJpZ2dlcihcImtleXVwXCIpfSksMCk7YnJlYWs7Y2FzZVwiZGVsZXRlQ29udGVudEJhY2t3YXJkXCI6dmFyIGg9bmV3IHIuRXZlbnQoXCJrZXlkb3duXCIpO2gua2V5PW4ua2V5cy5CYWNrc3BhY2UsZi5rZXlFdmVudC5jYWxsKGMsaCk7YnJlYWs7ZGVmYXVsdDooMCxzLmFwcGx5SW5wdXRWYWx1ZSkoYyx1KSxhLmNhcmV0LmNhbGwodCxjLHAuYmVnaW4scC5lbmQsITApfWUucHJldmVudERlZmF1bHQoKX19LHNldFZhbHVlRXZlbnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5pbnB1dG1hc2ssaT10aGlzLG49ZSYmZS5kZXRhaWw/ZS5kZXRhaWxbMF06YXJndW1lbnRzWzFdO3ZvaWQgMD09PW4mJihuPWkuaW5wdXRtYXNrLl92YWx1ZUdldCghMCkpLCgwLHMuYXBwbHlJbnB1dFZhbHVlKShpLG4pLChlLmRldGFpbCYmdm9pZCAwIT09ZS5kZXRhaWxbMV18fHZvaWQgMCE9PWFyZ3VtZW50c1syXSkmJmEuY2FyZXQuY2FsbCh0LGksZS5kZXRhaWw/ZS5kZXRhaWxbMV06YXJndW1lbnRzWzJdKX0sZm9jdXNFdmVudDpmdW5jdGlvbihlKXt2YXIgdD10aGlzLmlucHV0bWFzayxpPXQub3B0cyxuPXRoaXMscj1uLmlucHV0bWFzay5fdmFsdWVHZXQoKTtpLnNob3dNYXNrT25Gb2N1cyYmciE9PWEuZ2V0QnVmZmVyLmNhbGwodCkuam9pbihcIlwiKSYmKDAscy53cml0ZUJ1ZmZlcikobixhLmdldEJ1ZmZlci5jYWxsKHQpLGEuc2Vla05leHQuY2FsbCh0LGEuZ2V0TGFzdFZhbGlkUG9zaXRpb24uY2FsbCh0KSkpLCEwIT09aS5wb3NpdGlvbkNhcmV0T25UYWJ8fCExIT09dC5tb3VzZUVudGVyfHxvLmlzQ29tcGxldGUuY2FsbCh0LGEuZ2V0QnVmZmVyLmNhbGwodCkpJiYtMSE9PWEuZ2V0TGFzdFZhbGlkUG9zaXRpb24uY2FsbCh0KXx8Zi5jbGlja0V2ZW50LmFwcGx5KG4sW2UsITBdKSx0LnVuZG9WYWx1ZT10Ll92YWx1ZUdldCghMCl9LGludmFsaWRFdmVudDpmdW5jdGlvbihlKXt0aGlzLmlucHV0bWFzay52YWxpZGF0aW9uRXZlbnQ9ITB9LG1vdXNlbGVhdmVFdmVudDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuaW5wdXRtYXNrLHQ9ZS5vcHRzLGk9dGhpcztlLm1vdXNlRW50ZXI9ITEsdC5jbGVhck1hc2tPbkxvc3RGb2N1cyYmKGkuaW5wdXRtYXNrLnNoYWRvd1Jvb3R8fGkub3duZXJEb2N1bWVudCkuYWN0aXZlRWxlbWVudCE9PWkmJigwLHMuSGFuZGxlTmF0aXZlUGxhY2Vob2xkZXIpKGksZS5vcmlnaW5hbFBsYWNlaG9sZGVyKX0sY2xpY2tFdmVudDpmdW5jdGlvbihlLHQpe3ZhciBpPXRoaXMuaW5wdXRtYXNrO2kuY2xpY2tlZCsrO3ZhciBuPXRoaXM7aWYoKG4uaW5wdXRtYXNrLnNoYWRvd1Jvb3R8fG4ub3duZXJEb2N1bWVudCkuYWN0aXZlRWxlbWVudD09PW4pe3ZhciByPWEuZGV0ZXJtaW5lTmV3Q2FyZXRQb3NpdGlvbi5jYWxsKGksYS5jYXJldC5jYWxsKGksbiksdCk7dm9pZCAwIT09ciYmYS5jYXJldC5jYWxsKGksbixyKX19LGN1dEV2ZW50OmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuaW5wdXRtYXNrLGk9dC5tYXNrc2V0LHI9dGhpcyxsPWEuY2FyZXQuY2FsbCh0LHIpLGM9dC5pc1JUTD9hLmdldEJ1ZmZlci5jYWxsKHQpLnNsaWNlKGwuZW5kLGwuYmVnaW4pOmEuZ2V0QnVmZmVyLmNhbGwodCkuc2xpY2UobC5iZWdpbixsLmVuZCksdT10LmlzUlRMP2MucmV2ZXJzZSgpLmpvaW4oXCJcIik6Yy5qb2luKFwiXCIpO3dpbmRvdy5uYXZpZ2F0b3IuY2xpcGJvYXJkP3dpbmRvdy5uYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh1KTp3aW5kb3cuY2xpcGJvYXJkRGF0YSYmd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YSYmd2luZG93LmNsaXBib2FyZERhdGEuc2V0RGF0YShcIlRleHRcIix1KSxvLmhhbmRsZVJlbW92ZS5jYWxsKHQscixuLmtleXMuRGVsZXRlLGwpLCgwLHMud3JpdGVCdWZmZXIpKHIsYS5nZXRCdWZmZXIuY2FsbCh0KSxpLnAsZSx0LnVuZG9WYWx1ZSE9PXQuX3ZhbHVlR2V0KCEwKSl9LGJsdXJFdmVudDpmdW5jdGlvbihlKXt2YXIgdD10aGlzLmlucHV0bWFzayxpPXQub3B0cyxuPXQuZGVwZW5kZW5jeUxpYjt0LmNsaWNrZWQ9MDt2YXIgcj1uKHRoaXMpLGw9dGhpcztpZihsLmlucHV0bWFzayl7KDAscy5IYW5kbGVOYXRpdmVQbGFjZWhvbGRlcikobCx0Lm9yaWdpbmFsUGxhY2Vob2xkZXIpO3ZhciBjPWwuaW5wdXRtYXNrLl92YWx1ZUdldCgpLHU9YS5nZXRCdWZmZXIuY2FsbCh0KS5zbGljZSgpO1wiXCIhPT1jJiYoaS5jbGVhck1hc2tPbkxvc3RGb2N1cyYmKC0xPT09YS5nZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKHQpJiZjPT09YS5nZXRCdWZmZXJUZW1wbGF0ZS5jYWxsKHQpLmpvaW4oXCJcIik/dT1bXTpzLmNsZWFyT3B0aW9uYWxUYWlsLmNhbGwodCx1KSksITE9PT1vLmlzQ29tcGxldGUuY2FsbCh0LHUpJiYoc2V0VGltZW91dCgoZnVuY3Rpb24oKXtyLnRyaWdnZXIoXCJpbmNvbXBsZXRlXCIpfSksMCksaS5jbGVhckluY29tcGxldGUmJihhLnJlc2V0TWFza1NldC5jYWxsKHQpLHU9aS5jbGVhck1hc2tPbkxvc3RGb2N1cz9bXTphLmdldEJ1ZmZlclRlbXBsYXRlLmNhbGwodCkuc2xpY2UoKSkpLCgwLHMud3JpdGVCdWZmZXIpKGwsdSx2b2lkIDAsZSkpLHQudW5kb1ZhbHVlIT09dC5fdmFsdWVHZXQoITApJiYodC51bmRvVmFsdWU9dC5fdmFsdWVHZXQoITApLHIudHJpZ2dlcihcImNoYW5nZVwiKSl9fSxtb3VzZWVudGVyRXZlbnQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmlucHV0bWFzayx0PWUub3B0cy5zaG93TWFza09uSG92ZXIsaT10aGlzO2lmKGUubW91c2VFbnRlcj0hMCwoaS5pbnB1dG1hc2suc2hhZG93Um9vdHx8aS5vd25lckRvY3VtZW50KS5hY3RpdmVFbGVtZW50IT09aSl7dmFyIG49KGUuaXNSVEw/YS5nZXRCdWZmZXJUZW1wbGF0ZS5jYWxsKGUpLnNsaWNlKCkucmV2ZXJzZSgpOmEuZ2V0QnVmZmVyVGVtcGxhdGUuY2FsbChlKSkuam9pbihcIlwiKTt0JiYoMCxzLkhhbmRsZU5hdGl2ZVBsYWNlaG9sZGVyKShpLG4pfX0sc3VibWl0RXZlbnQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmlucHV0bWFzayx0PWUub3B0cztlLnVuZG9WYWx1ZSE9PWUuX3ZhbHVlR2V0KCEwKSYmZS4kZWwudHJpZ2dlcihcImNoYW5nZVwiKSwtMT09PWEuZ2V0TGFzdFZhbGlkUG9zaXRpb24uY2FsbChlKSYmZS5fdmFsdWVHZXQmJmUuX3ZhbHVlR2V0KCk9PT1hLmdldEJ1ZmZlclRlbXBsYXRlLmNhbGwoZSkuam9pbihcIlwiKSYmZS5fdmFsdWVTZXQoXCJcIiksdC5jbGVhckluY29tcGxldGUmJiExPT09by5pc0NvbXBsZXRlLmNhbGwoZSxhLmdldEJ1ZmZlci5jYWxsKGUpKSYmZS5fdmFsdWVTZXQoXCJcIiksdC5yZW1vdmVNYXNrT25TdWJtaXQmJihlLl92YWx1ZVNldChlLnVubWFza2VkdmFsdWUoKSwhMCksc2V0VGltZW91dCgoZnVuY3Rpb24oKXsoMCxzLndyaXRlQnVmZmVyKShlLmVsLGEuZ2V0QnVmZmVyLmNhbGwoZSkpfSksMCkpfSxyZXNldEV2ZW50OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5pbnB1dG1hc2s7ZS5yZWZyZXNoVmFsdWU9ITAsc2V0VGltZW91dCgoZnVuY3Rpb24oKXsoMCxzLmFwcGx5SW5wdXRWYWx1ZSkoZS5lbCxlLl92YWx1ZUdldCghMCkpfSksMCl9fTt0LkV2ZW50SGFuZGxlcnM9Zn0sOTcxNjpmdW5jdGlvbihlLHQsaSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5FdmVudFJ1bGVyPXZvaWQgMDt2YXIgYSxuPShhPWkoMjM5NCkpJiZhLl9fZXNNb2R1bGU/YTp7ZGVmYXVsdDphfSxyPWkoMjgzOSksbz1pKDg3MTEpLHM9aSg3NzYwKTt2YXIgbD17b246ZnVuY3Rpb24oZSx0LGkpe3ZhciBhPWUuaW5wdXRtYXNrLmRlcGVuZGVuY3lMaWIsbD1mdW5jdGlvbih0KXt0Lm9yaWdpbmFsRXZlbnQmJih0PXQub3JpZ2luYWxFdmVudHx8dCxhcmd1bWVudHNbMF09dCk7dmFyIGwsYz10aGlzLHU9Yy5pbnB1dG1hc2ssZj11P3Uub3B0czp2b2lkIDA7aWYodm9pZCAwPT09dSYmXCJGT1JNXCIhPT10aGlzLm5vZGVOYW1lKXt2YXIgZD1hLmRhdGEoYyxcIl9pbnB1dG1hc2tfb3B0c1wiKTthKGMpLm9mZigpLGQmJm5ldyBuLmRlZmF1bHQoZCkubWFzayhjKX1lbHNle2lmKFtcInN1Ym1pdFwiLFwicmVzZXRcIixcInNldHZhbHVlXCJdLmluY2x1ZGVzKHQudHlwZSl8fFwiRk9STVwiPT09dGhpcy5ub2RlTmFtZXx8IShjLmRpc2FibGVkfHxjLnJlYWRPbmx5JiYhKFwia2V5ZG93blwiPT09dC50eXBlJiZ0LmN0cmxLZXkmJnQua2V5PT09ci5rZXlzLmN8fCExPT09Zi50YWJUaHJvdWdoJiZ0LmtleT09PXIua2V5cy5UYWIpKSl7c3dpdGNoKHQudHlwZSl7Y2FzZVwiaW5wdXRcIjppZighMD09PXUuc2tpcElucHV0RXZlbnQpcmV0dXJuIHUuc2tpcElucHV0RXZlbnQ9ITEsdC5wcmV2ZW50RGVmYXVsdCgpO2JyZWFrO2Nhc2VcImNsaWNrXCI6Y2FzZVwiZm9jdXNcIjpyZXR1cm4gdS52YWxpZGF0aW9uRXZlbnQ/KHUudmFsaWRhdGlvbkV2ZW50PSExLGUuYmx1cigpLCgwLHMuSGFuZGxlTmF0aXZlUGxhY2Vob2xkZXIpKGUsKHUuaXNSVEw/by5nZXRCdWZmZXJUZW1wbGF0ZS5jYWxsKHUpLnNsaWNlKCkucmV2ZXJzZSgpOm8uZ2V0QnVmZmVyVGVtcGxhdGUuY2FsbCh1KSkuam9pbihcIlwiKSksc2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLmZvY3VzKCl9KSxmLnZhbGlkYXRpb25FdmVudFRpbWVPdXQpLCExKToobD1hcmd1bWVudHMsdm9pZCBzZXRUaW1lb3V0KChmdW5jdGlvbigpe2UuaW5wdXRtYXNrJiZpLmFwcGx5KGMsbCl9KSwwKSl9dmFyIHA9aS5hcHBseShjLGFyZ3VtZW50cyk7cmV0dXJuITE9PT1wJiYodC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCkpLHB9dC5wcmV2ZW50RGVmYXVsdCgpfX07W1wic3VibWl0XCIsXCJyZXNldFwiXS5pbmNsdWRlcyh0KT8obD1sLmJpbmQoZSksbnVsbCE9PWUuZm9ybSYmYShlLmZvcm0pLm9uKHQsbCkpOmEoZSkub24odCxsKSxlLmlucHV0bWFzay5ldmVudHNbdF09ZS5pbnB1dG1hc2suZXZlbnRzW3RdfHxbXSxlLmlucHV0bWFzay5ldmVudHNbdF0ucHVzaChsKX0sb2ZmOmZ1bmN0aW9uKGUsdCl7aWYoZS5pbnB1dG1hc2smJmUuaW5wdXRtYXNrLmV2ZW50cyl7dmFyIGk9ZS5pbnB1dG1hc2suZGVwZW5kZW5jeUxpYixhPWUuaW5wdXRtYXNrLmV2ZW50cztmb3IodmFyIG4gaW4gdCYmKChhPVtdKVt0XT1lLmlucHV0bWFzay5ldmVudHNbdF0pLGEpe2Zvcih2YXIgcj1hW25dO3IubGVuZ3RoPjA7KXt2YXIgbz1yLnBvcCgpO1tcInN1Ym1pdFwiLFwicmVzZXRcIl0uaW5jbHVkZXMobik/bnVsbCE9PWUuZm9ybSYmaShlLmZvcm0pLm9mZihuLG8pOmkoZSkub2ZmKG4sbyl9ZGVsZXRlIGUuaW5wdXRtYXNrLmV2ZW50c1tuXX19fX07dC5FdmVudFJ1bGVyPWx9LDIxOTpmdW5jdGlvbihlLHQsaSl7dmFyIGE9ZChpKDIzOTQpKSxuPWkoMjgzOSkscj1kKGkoNzE4NCkpLG89aSg4NzExKSxzPWkoNDcxMyk7ZnVuY3Rpb24gbChlLHQpe3JldHVybiBmdW5jdGlvbihlKXtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlfShlKXx8ZnVuY3Rpb24oZSx0KXt2YXIgaT1udWxsPT1lP251bGw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZihudWxsIT1pKXt2YXIgYSxuLHIsbyxzPVtdLGw9ITAsYz0hMTt0cnl7aWYocj0oaT1pLmNhbGwoZSkpLm5leHQsMD09PXQpe2lmKE9iamVjdChpKSE9PWkpcmV0dXJuO2w9ITF9ZWxzZSBmb3IoOyEobD0oYT1yLmNhbGwoaSkpLmRvbmUpJiYocy5wdXNoKGEudmFsdWUpLHMubGVuZ3RoIT09dCk7bD0hMCk7fWNhdGNoKGUpe2M9ITAsbj1lfWZpbmFsbHl7dHJ5e2lmKCFsJiZudWxsIT1pLnJldHVybiYmKG89aS5yZXR1cm4oKSxPYmplY3QobykhPT1vKSlyZXR1cm59ZmluYWxseXtpZihjKXRocm93IG59fXJldHVybiBzfX0oZSx0KXx8ZnVuY3Rpb24oZSx0KXtpZighZSlyZXR1cm47aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIGMoZSx0KTt2YXIgaT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7XCJPYmplY3RcIj09PWkmJmUuY29uc3RydWN0b3ImJihpPWUuY29uc3RydWN0b3IubmFtZSk7aWYoXCJNYXBcIj09PWl8fFwiU2V0XCI9PT1pKXJldHVybiBBcnJheS5mcm9tKGUpO2lmKFwiQXJndW1lbnRzXCI9PT1pfHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChpKSlyZXR1cm4gYyhlLHQpfShlLHQpfHxmdW5jdGlvbigpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9KCl9ZnVuY3Rpb24gYyhlLHQpeyhudWxsPT10fHx0PmUubGVuZ3RoKSYmKHQ9ZS5sZW5ndGgpO2Zvcih2YXIgaT0wLGE9bmV3IEFycmF5KHQpO2k8dDtpKyspYVtpXT1lW2ldO3JldHVybiBhfWZ1bmN0aW9uIHUoZSl7cmV0dXJuIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0sdShlKX1mdW5jdGlvbiBmKGUsdCl7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspe3ZhciBhPXRbaV07YS5lbnVtZXJhYmxlPWEuZW51bWVyYWJsZXx8ITEsYS5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gYSYmKGEud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLChuPWEua2V5LHI9dm9pZCAwLHI9ZnVuY3Rpb24oZSx0KXtpZihcIm9iamVjdFwiIT09dShlKXx8bnVsbD09PWUpcmV0dXJuIGU7dmFyIGk9ZVtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PWkpe3ZhciBhPWkuY2FsbChlLHR8fFwiZGVmYXVsdFwiKTtpZihcIm9iamVjdFwiIT09dShhKSlyZXR1cm4gYTt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuKFwic3RyaW5nXCI9PT10P1N0cmluZzpOdW1iZXIpKGUpfShuLFwic3RyaW5nXCIpLFwic3ltYm9sXCI9PT11KHIpP3I6U3RyaW5nKHIpKSxhKX12YXIgbixyfWZ1bmN0aW9uIGQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBwPWEuZGVmYXVsdC5kZXBlbmRlbmN5TGliLGg9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsaSxhKXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMubWFzaz10LHRoaXMuZm9ybWF0PWksdGhpcy5vcHRzPWEsdGhpcy5fZGF0ZT1uZXcgRGF0ZSgxLDAsMSksdGhpcy5pbml0RGF0ZU9iamVjdCh0LHRoaXMub3B0cyl9dmFyIHQsaSxhO3JldHVybiB0PWUsKGk9W3trZXk6XCJkYXRlXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMD09PXRoaXMuX2RhdGUmJih0aGlzLl9kYXRlPW5ldyBEYXRlKDEsMCwxKSx0aGlzLmluaXREYXRlT2JqZWN0KHZvaWQgMCx0aGlzLm9wdHMpKSx0aGlzLl9kYXRlfX0se2tleTpcImluaXREYXRlT2JqZWN0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgaTtmb3IoUCh0KS5sYXN0SW5kZXg9MDtpPVAodCkuZXhlYyh0aGlzLmZvcm1hdCk7KXt2YXIgYT1uZXcgUmVnRXhwKFwiXFxcXGQrJFwiKS5leGVjKGlbMF0pLG49YT9pWzBdWzBdK1wieFwiOmlbMF0scj12b2lkIDA7aWYodm9pZCAwIT09ZSl7aWYoYSl7dmFyIG89UCh0KS5sYXN0SW5kZXgscz1FKGkuaW5kZXgsdCk7UCh0KS5sYXN0SW5kZXg9byxyPWUuc2xpY2UoMCxlLmluZGV4T2Yocy5uZXh0TWF0Y2hbMF0pKX1lbHNlIHI9ZS5zbGljZSgwLGdbbl0mJmdbbl1bNF18fG4ubGVuZ3RoKTtlPWUuc2xpY2Uoci5sZW5ndGgpfU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChnLG4pJiZ0aGlzLnNldFZhbHVlKHRoaXMscixuLGdbbl1bMl0sZ1tuXVsxXSl9fX0se2tleTpcInNldFZhbHVlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LGksYSxuKXtpZih2b2lkIDAhPT10JiYoZVthXT1cImFtcG1cIj09PWE/dDp0LnJlcGxhY2UoL1teMC05XS9nLFwiMFwiKSxlW1wicmF3XCIrYV09dC5yZXBsYWNlKC9cXHMvZyxcIl9cIikpLHZvaWQgMCE9PW4pe3ZhciByPWVbYV07KFwiZGF5XCI9PT1hJiYyOT09PXBhcnNlSW50KHIpfHxcIm1vbnRoXCI9PT1hJiYyPT09cGFyc2VJbnQocikpJiYoMjkhPT1wYXJzZUludChlLmRheSl8fDIhPT1wYXJzZUludChlLm1vbnRoKXx8XCJcIiE9PWUueWVhciYmdm9pZCAwIT09ZS55ZWFyfHxlLl9kYXRlLnNldEZ1bGxZZWFyKDIwMTIsMSwyOSkpLFwiZGF5XCI9PT1hJiYobT0hMCwwPT09cGFyc2VJbnQocikmJihyPTEpKSxcIm1vbnRoXCI9PT1hJiYobT0hMCksXCJ5ZWFyXCI9PT1hJiYobT0hMCxyLmxlbmd0aDw0JiYocj1fKHIsNCwhMCkpKSxcIlwiPT09cnx8aXNOYU4ocil8fG4uY2FsbChlLl9kYXRlLHIpLFwiYW1wbVwiPT09YSYmbi5jYWxsKGUuX2RhdGUscil9fX0se2tleTpcInJlc2V0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9kYXRlPW5ldyBEYXRlKDEsMCwxKX19LHtrZXk6XCJyZUluaXRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX2RhdGU9dm9pZCAwLHRoaXMuZGF0ZX19XSkmJmYodC5wcm90b3R5cGUsaSksYSYmZih0LGEpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksZX0oKSx2PShuZXcgRGF0ZSkuZ2V0RnVsbFllYXIoKSxtPSExLGc9e2Q6W1wiWzEtOV18WzEyXVswLTldfDNbMDFdXCIsRGF0ZS5wcm90b3R5cGUuc2V0RGF0ZSxcImRheVwiLERhdGUucHJvdG90eXBlLmdldERhdGVdLGRkOltcIjBbMS05XXxbMTJdWzAtOV18M1swMV1cIixEYXRlLnByb3RvdHlwZS5zZXREYXRlLFwiZGF5XCIsZnVuY3Rpb24oKXtyZXR1cm4gXyhEYXRlLnByb3RvdHlwZS5nZXREYXRlLmNhbGwodGhpcyksMil9XSxkZGQ6W1wiXCJdLGRkZGQ6W1wiXCJdLG06W1wiWzEtOV18MVswMTJdXCIsZnVuY3Rpb24oZSl7dmFyIHQ9ZT9wYXJzZUludChlKTowO3JldHVybiB0PjAmJnQtLSxEYXRlLnByb3RvdHlwZS5zZXRNb250aC5jYWxsKHRoaXMsdCl9LFwibW9udGhcIixmdW5jdGlvbigpe3JldHVybiBEYXRlLnByb3RvdHlwZS5nZXRNb250aC5jYWxsKHRoaXMpKzF9XSxtbTpbXCIwWzEtOV18MVswMTJdXCIsZnVuY3Rpb24oZSl7dmFyIHQ9ZT9wYXJzZUludChlKTowO3JldHVybiB0PjAmJnQtLSxEYXRlLnByb3RvdHlwZS5zZXRNb250aC5jYWxsKHRoaXMsdCl9LFwibW9udGhcIixmdW5jdGlvbigpe3JldHVybiBfKERhdGUucHJvdG90eXBlLmdldE1vbnRoLmNhbGwodGhpcykrMSwyKX1dLG1tbTpbXCJcIl0sbW1tbTpbXCJcIl0seXk6W1wiWzAtOV17Mn1cIixEYXRlLnByb3RvdHlwZS5zZXRGdWxsWWVhcixcInllYXJcIixmdW5jdGlvbigpe3JldHVybiBfKERhdGUucHJvdG90eXBlLmdldEZ1bGxZZWFyLmNhbGwodGhpcyksMil9XSx5eXl5OltcIlswLTldezR9XCIsRGF0ZS5wcm90b3R5cGUuc2V0RnVsbFllYXIsXCJ5ZWFyXCIsZnVuY3Rpb24oKXtyZXR1cm4gXyhEYXRlLnByb3RvdHlwZS5nZXRGdWxsWWVhci5jYWxsKHRoaXMpLDQpfV0saDpbXCJbMS05XXwxWzAtMl1cIixEYXRlLnByb3RvdHlwZS5zZXRIb3VycyxcImhvdXJzXCIsRGF0ZS5wcm90b3R5cGUuZ2V0SG91cnNdLGhoOltcIjBbMS05XXwxWzAtMl1cIixEYXRlLnByb3RvdHlwZS5zZXRIb3VycyxcImhvdXJzXCIsZnVuY3Rpb24oKXtyZXR1cm4gXyhEYXRlLnByb3RvdHlwZS5nZXRIb3Vycy5jYWxsKHRoaXMpLDIpfV0saHg6W2Z1bmN0aW9uKGUpe3JldHVyblwiWzAtOV17XCIuY29uY2F0KGUsXCJ9XCIpfSxEYXRlLnByb3RvdHlwZS5zZXRIb3VycyxcImhvdXJzXCIsZnVuY3Rpb24oZSl7cmV0dXJuIERhdGUucHJvdG90eXBlLmdldEhvdXJzfV0sSDpbXCIxP1swLTldfDJbMC0zXVwiLERhdGUucHJvdG90eXBlLnNldEhvdXJzLFwiaG91cnNcIixEYXRlLnByb3RvdHlwZS5nZXRIb3Vyc10sSEg6W1wiMFswLTldfDFbMC05XXwyWzAtM11cIixEYXRlLnByb3RvdHlwZS5zZXRIb3VycyxcImhvdXJzXCIsZnVuY3Rpb24oKXtyZXR1cm4gXyhEYXRlLnByb3RvdHlwZS5nZXRIb3Vycy5jYWxsKHRoaXMpLDIpfV0sSHg6W2Z1bmN0aW9uKGUpe3JldHVyblwiWzAtOV17XCIuY29uY2F0KGUsXCJ9XCIpfSxEYXRlLnByb3RvdHlwZS5zZXRIb3VycyxcImhvdXJzXCIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIF8oRGF0ZS5wcm90b3R5cGUuZ2V0SG91cnMuY2FsbCh0aGlzKSxlKX19XSxNOltcIlsxLTVdP1swLTldXCIsRGF0ZS5wcm90b3R5cGUuc2V0TWludXRlcyxcIm1pbnV0ZXNcIixEYXRlLnByb3RvdHlwZS5nZXRNaW51dGVzXSxNTTpbXCIwWzAtOV18MVswLTldfDJbMC05XXwzWzAtOV18NFswLTldfDVbMC05XVwiLERhdGUucHJvdG90eXBlLnNldE1pbnV0ZXMsXCJtaW51dGVzXCIsZnVuY3Rpb24oKXtyZXR1cm4gXyhEYXRlLnByb3RvdHlwZS5nZXRNaW51dGVzLmNhbGwodGhpcyksMil9XSxzOltcIlsxLTVdP1swLTldXCIsRGF0ZS5wcm90b3R5cGUuc2V0U2Vjb25kcyxcInNlY29uZHNcIixEYXRlLnByb3RvdHlwZS5nZXRTZWNvbmRzXSxzczpbXCIwWzAtOV18MVswLTldfDJbMC05XXwzWzAtOV18NFswLTldfDVbMC05XVwiLERhdGUucHJvdG90eXBlLnNldFNlY29uZHMsXCJzZWNvbmRzXCIsZnVuY3Rpb24oKXtyZXR1cm4gXyhEYXRlLnByb3RvdHlwZS5nZXRTZWNvbmRzLmNhbGwodGhpcyksMil9XSxsOltcIlswLTldezN9XCIsRGF0ZS5wcm90b3R5cGUuc2V0TWlsbGlzZWNvbmRzLFwibWlsbGlzZWNvbmRzXCIsZnVuY3Rpb24oKXtyZXR1cm4gXyhEYXRlLnByb3RvdHlwZS5nZXRNaWxsaXNlY29uZHMuY2FsbCh0aGlzKSwzKX0sM10sTDpbXCJbMC05XXsyfVwiLERhdGUucHJvdG90eXBlLnNldE1pbGxpc2Vjb25kcyxcIm1pbGxpc2Vjb25kc1wiLGZ1bmN0aW9uKCl7cmV0dXJuIF8oRGF0ZS5wcm90b3R5cGUuZ2V0TWlsbGlzZWNvbmRzLmNhbGwodGhpcyksMil9LDJdLHQ6W1wiW2FwXVwiLHksXCJhbXBtXCIsYiwxXSx0dDpbXCJbYXBdbVwiLHksXCJhbXBtXCIsYiwyXSxUOltcIltBUF1cIix5LFwiYW1wbVwiLGIsMV0sVFQ6W1wiW0FQXU1cIix5LFwiYW1wbVwiLGIsMl0sWjpbXCIuKlwiLHZvaWQgMCxcIlpcIixmdW5jdGlvbigpe3ZhciBlPXRoaXMudG9TdHJpbmcoKS5tYXRjaCgvXFwoKC4rKVxcKS8pWzFdO2UuaW5jbHVkZXMoXCIgXCIpJiYoZT0oZT1lLnJlcGxhY2UoXCItXCIsXCIgXCIpLnRvVXBwZXJDYXNlKCkpLnNwbGl0KFwiIFwiKS5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiBsKGUsMSlbMF19KSkuam9pbihcIlwiKSk7cmV0dXJuIGV9XSxvOltcIlwiXSxTOltcIlwiXX0saz17aXNvRGF0ZTpcInl5eXktbW0tZGRcIixpc29UaW1lOlwiSEg6TU06c3NcIixpc29EYXRlVGltZTpcInl5eXktbW0tZGQnVCdISDpNTTpzc1wiLGlzb1V0Y0RhdGVUaW1lOlwiVVRDOnl5eXktbW0tZGQnVCdISDpNTTpzcydaJ1wifTtmdW5jdGlvbiB5KGUpe3ZhciB0PXRoaXMuZ2V0SG91cnMoKTtlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJwXCIpP3RoaXMuc2V0SG91cnModCsxMik6ZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFwiYVwiKSYmdD49MTImJnRoaXMuc2V0SG91cnModC0xMil9ZnVuY3Rpb24gYigpe3ZhciBlPXRoaXMuZ2V0SG91cnMoKTtyZXR1cm4oZT1lfHwxMik+PTEyP1wiUE1cIjpcIkFNXCJ9ZnVuY3Rpb24geChlKXt2YXIgdD1uZXcgUmVnRXhwKFwiXFxcXGQrJFwiKS5leGVjKGVbMF0pO2lmKHQmJnZvaWQgMCE9PXRbMF0pe3ZhciBpPWdbZVswXVswXStcInhcIl0uc2xpY2UoXCJcIik7cmV0dXJuIGlbMF09aVswXSh0WzBdKSxpWzNdPWlbM10odFswXSksaX1pZihnW2VbMF1dKXJldHVybiBnW2VbMF1dfWZ1bmN0aW9uIFAoZSl7aWYoIWUudG9rZW5pemVyKXt2YXIgdD1bXSxpPVtdO2Zvcih2YXIgYSBpbiBnKWlmKC9cXC4qeCQvLnRlc3QoYSkpe3ZhciBuPWFbMF0rXCJcXFxcZCtcIjstMT09PWkuaW5kZXhPZihuKSYmaS5wdXNoKG4pfWVsc2UtMT09PXQuaW5kZXhPZihhWzBdKSYmdC5wdXNoKGFbMF0pO2UudG9rZW5pemVyPVwiKFwiKyhpLmxlbmd0aD4wP2kuam9pbihcInxcIikrXCJ8XCI6XCJcIikrdC5qb2luKFwiK3xcIikrXCIpKz98LlwiLGUudG9rZW5pemVyPW5ldyBSZWdFeHAoZS50b2tlbml6ZXIsXCJnXCIpfXJldHVybiBlLnRva2VuaXplcn1mdW5jdGlvbiB3KGUsdCxpKXtpZighbSlyZXR1cm4hMDtpZih2b2lkIDA9PT1lLnJhd2RheXx8IWlzRmluaXRlKGUucmF3ZGF5KSYmbmV3IERhdGUoZS5kYXRlLmdldEZ1bGxZZWFyKCksaXNGaW5pdGUoZS5yYXdtb250aCk/ZS5tb250aDplLmRhdGUuZ2V0TW9udGgoKSsxLDApLmdldERhdGUoKT49ZS5kYXl8fFwiMjlcIj09ZS5kYXkmJighaXNGaW5pdGUoZS5yYXd5ZWFyKXx8dm9pZCAwPT09ZS5yYXd5ZWFyfHxcIlwiPT09ZS5yYXd5ZWFyKXx8bmV3IERhdGUoZS5kYXRlLmdldEZ1bGxZZWFyKCksaXNGaW5pdGUoZS5yYXdtb250aCk/ZS5tb250aDplLmRhdGUuZ2V0TW9udGgoKSsxLDApLmdldERhdGUoKT49ZS5kYXkpcmV0dXJuIHQ7aWYoXCIyOVwiPT1lLmRheSl7dmFyIGE9RSh0LnBvcyxpKTtpZihcInl5eXlcIj09PWEudGFyZ2V0TWF0Y2hbMF0mJnQucG9zLWEudGFyZ2V0TWF0Y2hJbmRleD09MilyZXR1cm4gdC5yZW1vdmU9dC5wb3MrMSx0fWVsc2UgaWYoXCIwMlwiPT1lLm1vbnRoJiZcIjMwXCI9PWUuZGF5JiZ2b2lkIDAhPT10LmMpcmV0dXJuIGUuZGF5PVwiMDNcIixlLmRhdGUuc2V0RGF0ZSgzKSxlLmRhdGUuc2V0TW9udGgoMSksdC5pbnNlcnQ9W3twb3M6dC5wb3MsYzpcIjBcIn0se3Bvczp0LnBvcysxLGM6dC5jfV0sdC5jYXJldD1vLnNlZWtOZXh0LmNhbGwodGhpcyx0LnBvcysxKSx0O3JldHVybiExfWZ1bmN0aW9uIFMoZSx0LGksYSl7dmFyIG4sbyxzPVwiXCI7Zm9yKFAoaSkubGFzdEluZGV4PTA7bj1QKGkpLmV4ZWMoZSk7KXtpZih2b2lkIDA9PT10KWlmKG89eChuKSlzKz1cIihcIitvWzBdK1wiKVwiO2Vsc2Ugc3dpdGNoKG5bMF0pe2Nhc2VcIltcIjpzKz1cIihcIjticmVhaztjYXNlXCJdXCI6cys9XCIpP1wiO2JyZWFrO2RlZmF1bHQ6cys9KDAsci5kZWZhdWx0KShuWzBdKX1lbHNlIGlmKG89eChuKSlpZighMCE9PWEmJm9bM10pcys9b1szXS5jYWxsKHQuZGF0ZSk7ZWxzZSBvWzJdP3MrPXRbXCJyYXdcIitvWzJdXTpzKz1uWzBdO2Vsc2Ugcys9blswXX1yZXR1cm4gc31mdW5jdGlvbiBfKGUsdCxpKXtmb3IoZT1TdHJpbmcoZSksdD10fHwyO2UubGVuZ3RoPHQ7KWU9aT9lK1wiMFwiOlwiMFwiK2U7cmV0dXJuIGV9ZnVuY3Rpb24gTShlLHQsaSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGU/bmV3IGgoZSx0LGkpOmUmJlwib2JqZWN0XCI9PT11KGUpJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxcImRhdGVcIik/ZTp2b2lkIDB9ZnVuY3Rpb24gTyhlLHQpe3JldHVybiBTKHQuaW5wdXRGb3JtYXQse2RhdGU6ZX0sdCl9ZnVuY3Rpb24gRShlLHQpe3ZhciBpLGEsbj0wLHI9MDtmb3IoUCh0KS5sYXN0SW5kZXg9MDthPVAodCkuZXhlYyh0LmlucHV0Rm9ybWF0KTspe3ZhciBvPW5ldyBSZWdFeHAoXCJcXFxcZCskXCIpLmV4ZWMoYVswXSk7aWYoKG4rPXI9bz9wYXJzZUludChvWzBdKTphWzBdLmxlbmd0aCk+PWUrMSl7aT1hLGE9UCh0KS5leGVjKHQuaW5wdXRGb3JtYXQpO2JyZWFrfX1yZXR1cm57dGFyZ2V0TWF0Y2hJbmRleDpuLXIsbmV4dE1hdGNoOmEsdGFyZ2V0TWF0Y2g6aX19YS5kZWZhdWx0LmV4dGVuZEFsaWFzZXMoe2RhdGV0aW1lOnttYXNrOmZ1bmN0aW9uKGUpe3JldHVybiBlLm51bWVyaWNJbnB1dD0hMSxnLlM9ZS5pMThuLm9yZGluYWxTdWZmaXguam9pbihcInxcIiksZS5pbnB1dEZvcm1hdD1rW2UuaW5wdXRGb3JtYXRdfHxlLmlucHV0Rm9ybWF0LGUuZGlzcGxheUZvcm1hdD1rW2UuZGlzcGxheUZvcm1hdF18fGUuZGlzcGxheUZvcm1hdHx8ZS5pbnB1dEZvcm1hdCxlLm91dHB1dEZvcm1hdD1rW2Uub3V0cHV0Rm9ybWF0XXx8ZS5vdXRwdXRGb3JtYXR8fGUuaW5wdXRGb3JtYXQsZS5wbGFjZWhvbGRlcj1cIlwiIT09ZS5wbGFjZWhvbGRlcj9lLnBsYWNlaG9sZGVyOmUuaW5wdXRGb3JtYXQucmVwbGFjZSgvW1tcXF1dLyxcIlwiKSxlLnJlZ2V4PVMoZS5pbnB1dEZvcm1hdCx2b2lkIDAsZSksZS5taW49TShlLm1pbixlLmlucHV0Rm9ybWF0LGUpLGUubWF4PU0oZS5tYXgsZS5pbnB1dEZvcm1hdCxlKSxudWxsfSxwbGFjZWhvbGRlcjpcIlwiLGlucHV0Rm9ybWF0OlwiaXNvRGF0ZVRpbWVcIixkaXNwbGF5Rm9ybWF0Om51bGwsb3V0cHV0Rm9ybWF0Om51bGwsbWluOm51bGwsbWF4Om51bGwsc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcjpcIlwiLGkxOG46e2RheU5hbWVzOltcIk1vblwiLFwiVHVlXCIsXCJXZWRcIixcIlRodVwiLFwiRnJpXCIsXCJTYXRcIixcIlN1blwiLFwiTW9uZGF5XCIsXCJUdWVzZGF5XCIsXCJXZWRuZXNkYXlcIixcIlRodXJzZGF5XCIsXCJGcmlkYXlcIixcIlNhdHVyZGF5XCIsXCJTdW5kYXlcIl0sbW9udGhOYW1lczpbXCJKYW5cIixcIkZlYlwiLFwiTWFyXCIsXCJBcHJcIixcIk1heVwiLFwiSnVuXCIsXCJKdWxcIixcIkF1Z1wiLFwiU2VwXCIsXCJPY3RcIixcIk5vdlwiLFwiRGVjXCIsXCJKYW51YXJ5XCIsXCJGZWJydWFyeVwiLFwiTWFyY2hcIixcIkFwcmlsXCIsXCJNYXlcIixcIkp1bmVcIixcIkp1bHlcIixcIkF1Z3VzdFwiLFwiU2VwdGVtYmVyXCIsXCJPY3RvYmVyXCIsXCJOb3ZlbWJlclwiLFwiRGVjZW1iZXJcIl0sb3JkaW5hbFN1ZmZpeDpbXCJzdFwiLFwibmRcIixcInJkXCIsXCJ0aFwiXX0scHJlVmFsaWRhdGlvbjpmdW5jdGlvbihlLHQsaSxhLG4scixvLHMpe2lmKHMpcmV0dXJuITA7aWYoaXNOYU4oaSkmJmVbdF0hPT1pKXt2YXIgbD1FKHQsbik7aWYobC5uZXh0TWF0Y2gmJmwubmV4dE1hdGNoWzBdPT09aSYmbC50YXJnZXRNYXRjaFswXS5sZW5ndGg+MSl7dmFyIGM9Z1tsLnRhcmdldE1hdGNoWzBdXVswXTtpZihuZXcgUmVnRXhwKGMpLnRlc3QoXCIwXCIrZVt0LTFdKSlyZXR1cm4gZVt0XT1lW3QtMV0sZVt0LTFdPVwiMFwiLHtmdXp6eTohMCxidWZmZXI6ZSxyZWZyZXNoRnJvbUJ1ZmZlcjp7c3RhcnQ6dC0xLGVuZDp0KzF9LHBvczp0KzF9fX1yZXR1cm4hMH0scG9zdFZhbGlkYXRpb246ZnVuY3Rpb24oZSx0LGksYSxuLHIsbyxsKXt2YXIgYyx1O2lmKG8pcmV0dXJuITA7aWYoITE9PT1hJiYoKChjPUUodCsxLG4pKS50YXJnZXRNYXRjaCYmYy50YXJnZXRNYXRjaEluZGV4PT09dCYmYy50YXJnZXRNYXRjaFswXS5sZW5ndGg+MSYmdm9pZCAwIT09Z1tjLnRhcmdldE1hdGNoWzBdXXx8KGM9RSh0KzIsbikpLnRhcmdldE1hdGNoJiZjLnRhcmdldE1hdGNoSW5kZXg9PT10KzEmJmMudGFyZ2V0TWF0Y2hbMF0ubGVuZ3RoPjEmJnZvaWQgMCE9PWdbYy50YXJnZXRNYXRjaFswXV0pJiYodT1nW2MudGFyZ2V0TWF0Y2hbMF1dWzBdKSx2b2lkIDAhPT11JiYodm9pZCAwIT09ci52YWxpZFBvc2l0aW9uc1t0KzFdJiZuZXcgUmVnRXhwKHUpLnRlc3QoaStcIjBcIik/KGVbdF09aSxlW3QrMV09XCIwXCIsYT17cG9zOnQrMixjYXJldDp0fSk6bmV3IFJlZ0V4cCh1KS50ZXN0KFwiMFwiK2kpJiYoZVt0XT1cIjBcIixlW3QrMV09aSxhPXtwb3M6dCsyfSkpLCExPT09YSkpcmV0dXJuIGE7aWYoYS5mdXp6eSYmKGU9YS5idWZmZXIsdD1hLnBvcyksKGM9RSh0LG4pKS50YXJnZXRNYXRjaCYmYy50YXJnZXRNYXRjaFswXSYmdm9pZCAwIT09Z1tjLnRhcmdldE1hdGNoWzBdXSl7dmFyIGY9Z1tjLnRhcmdldE1hdGNoWzBdXTt1PWZbMF07dmFyIGQ9ZS5zbGljZShjLnRhcmdldE1hdGNoSW5kZXgsYy50YXJnZXRNYXRjaEluZGV4K2MudGFyZ2V0TWF0Y2hbMF0ubGVuZ3RoKTtpZighMT09PW5ldyBSZWdFeHAodSkudGVzdChkLmpvaW4oXCJcIikpJiYyPT09Yy50YXJnZXRNYXRjaFswXS5sZW5ndGgmJnIudmFsaWRQb3NpdGlvbnNbYy50YXJnZXRNYXRjaEluZGV4XSYmci52YWxpZFBvc2l0aW9uc1tjLnRhcmdldE1hdGNoSW5kZXgrMV0mJihyLnZhbGlkUG9zaXRpb25zW2MudGFyZ2V0TWF0Y2hJbmRleCsxXS5pbnB1dD1cIjBcIiksXCJ5ZWFyXCI9PWZbMl0pZm9yKHZhciBwPXMuZ2V0TWFza1RlbXBsYXRlLmNhbGwodGhpcywhMSwxLHZvaWQgMCwhMCksaD10KzE7aDxlLmxlbmd0aDtoKyspZVtoXT1wW2hdLGRlbGV0ZSByLnZhbGlkUG9zaXRpb25zW2hdfXZhciBtPWEsaz1NKGUuam9pbihcIlwiKSxuLmlucHV0Rm9ybWF0LG4pO3JldHVybiBtJiYhaXNOYU4oay5kYXRlLmdldFRpbWUoKSkmJihuLnByZWZpbGxZZWFyJiYobT1mdW5jdGlvbihlLHQsaSl7aWYoZS55ZWFyIT09ZS5yYXd5ZWFyKXt2YXIgYT12LnRvU3RyaW5nKCksbj1lLnJhd3llYXIucmVwbGFjZSgvW14wLTldL2csXCJcIikscj1hLnNsaWNlKDAsbi5sZW5ndGgpLG89YS5zbGljZShuLmxlbmd0aCk7aWYoMj09PW4ubGVuZ3RoJiZuPT09cil7dmFyIHM9bmV3IERhdGUodixlLm1vbnRoLTEsZS5kYXkpO2UuZGF5PT1zLmdldERhdGUoKSYmKCFpLm1heHx8aS5tYXguZGF0ZS5nZXRUaW1lKCk+PXMuZ2V0VGltZSgpKSYmKGUuZGF0ZS5zZXRGdWxsWWVhcih2KSxlLnllYXI9YSx0Lmluc2VydD1be3Bvczp0LnBvcysxLGM6b1swXX0se3Bvczp0LnBvcysyLGM6b1sxXX1dKX19cmV0dXJuIHR9KGssbSxuKSksbT1mdW5jdGlvbihlLHQsaSxhLG4pe2lmKCF0KXJldHVybiB0O2lmKHQmJmkubWluJiYhaXNOYU4oaS5taW4uZGF0ZS5nZXRUaW1lKCkpKXt2YXIgcjtmb3IoZS5yZXNldCgpLFAoaSkubGFzdEluZGV4PTA7cj1QKGkpLmV4ZWMoaS5pbnB1dEZvcm1hdCk7KXt2YXIgbztpZigobz14KHIpKSYmb1szXSl7Zm9yKHZhciBzPW9bMV0sbD1lW29bMl1dLGM9aS5taW5bb1syXV0sdT1pLm1heD9pLm1heFtvWzJdXTpjLGY9W10sZD0hMSxwPTA7cDxjLmxlbmd0aDtwKyspdm9pZCAwIT09YS52YWxpZFBvc2l0aW9uc1twK3IuaW5kZXhdfHxkPyhmW3BdPWxbcF0sZD1kfHxsW3BdPmNbcF0pOihmW3BdPWNbcF0sXCJ5ZWFyXCI9PT1vWzJdJiZsLmxlbmd0aC0xPT1wJiZjIT11JiYoZj0ocGFyc2VJbnQoZi5qb2luKFwiXCIpKSsxKS50b1N0cmluZygpLnNwbGl0KFwiXCIpKSxcImFtcG1cIj09PW9bMl0mJmMhPXUmJmkubWluLmRhdGUuZ2V0VGltZSgpPmUuZGF0ZS5nZXRUaW1lKCkmJihmW3BdPXVbcF0pKTtzLmNhbGwoZS5fZGF0ZSxmLmpvaW4oXCJcIikpfX10PWkubWluLmRhdGUuZ2V0VGltZSgpPD1lLmRhdGUuZ2V0VGltZSgpLGUucmVJbml0KCl9cmV0dXJuIHQmJmkubWF4JiYoaXNOYU4oaS5tYXguZGF0ZS5nZXRUaW1lKCkpfHwodD1pLm1heC5kYXRlLmdldFRpbWUoKT49ZS5kYXRlLmdldFRpbWUoKSkpLHR9KGssbT13LmNhbGwodGhpcyxrLG0sbiksbixyKSksdm9pZCAwIT09dCYmbSYmYS5wb3MhPT10P3tidWZmZXI6UyhuLmlucHV0Rm9ybWF0LGssbikuc3BsaXQoXCJcIikscmVmcmVzaEZyb21CdWZmZXI6e3N0YXJ0OnQsZW5kOmEucG9zfSxwb3M6YS5jYXJldHx8YS5wb3N9Om19LG9uS2V5RG93bjpmdW5jdGlvbihlLHQsaSxhKXtlLmN0cmxLZXkmJmUua2V5PT09bi5rZXlzLkFycm93UmlnaHQmJih0aGlzLmlucHV0bWFzay5fdmFsdWVTZXQoTyhuZXcgRGF0ZSxhKSkscCh0aGlzKS50cmlnZ2VyKFwic2V0dmFsdWVcIikpfSxvblVuTWFzazpmdW5jdGlvbihlLHQsaSl7cmV0dXJuIHQ/UyhpLm91dHB1dEZvcm1hdCxNKGUsaS5pbnB1dEZvcm1hdCxpKSxpLCEwKTp0fSxjYXNpbmc6ZnVuY3Rpb24oZSx0LGksYSl7cmV0dXJuIDA9PXQubmF0aXZlRGVmLmluZGV4T2YoXCJbYXBdXCIpP2UudG9Mb3dlckNhc2UoKTowPT10Lm5hdGl2ZURlZi5pbmRleE9mKFwiW0FQXVwiKT9lLnRvVXBwZXJDYXNlKCk6ZX0sb25CZWZvcmVNYXNrOmZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJbb2JqZWN0IERhdGVdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkmJihlPU8oZSx0KSksZX0saW5zZXJ0TW9kZTohMSxpbnNlcnRNb2RlVmlzdWFsOiExLHNoaWZ0UG9zaXRpb25zOiExLGtlZXBTdGF0aWM6ITEsaW5wdXRtb2RlOlwibnVtZXJpY1wiLHByZWZpbGxZZWFyOiEwfX0pfSwzODUxOmZ1bmN0aW9uKGUsdCxpKXt2YXIgYSxuPShhPWkoMjM5NCkpJiZhLl9fZXNNb2R1bGU/YTp7ZGVmYXVsdDphfSxyPWkoODcxMSksbz1pKDQ3MTMpO24uZGVmYXVsdC5leHRlbmREZWZpbml0aW9ucyh7QTp7dmFsaWRhdG9yOlwiW0EtWmEtelxcdTA0MTAtXFx1MDQ0ZlxcdTA0MDFcXHUwNDUxXFx4YzAtXFx4ZmZcXHhiNV1cIixjYXNpbmc6XCJ1cHBlclwifSxcIiZcIjp7dmFsaWRhdG9yOlwiWzAtOUEtWmEtelxcdTA0MTAtXFx1MDQ0ZlxcdTA0MDFcXHUwNDUxXFx4YzAtXFx4ZmZcXHhiNV1cIixjYXNpbmc6XCJ1cHBlclwifSxcIiNcIjp7dmFsaWRhdG9yOlwiWzAtOUEtRmEtZl1cIixjYXNpbmc6XCJ1cHBlclwifX0pO3ZhciBzPW5ldyBSZWdFeHAoXCIyNVswLTVdfDJbMC00XVswLTldfFswMV1bMC05XVswLTldXCIpO2Z1bmN0aW9uIGwoZSx0LGksYSxuKXtyZXR1cm4gaS0xPi0xJiZcIi5cIiE9PXQuYnVmZmVyW2ktMV0/KGU9dC5idWZmZXJbaS0xXStlLGU9aS0yPi0xJiZcIi5cIiE9PXQuYnVmZmVyW2ktMl0/dC5idWZmZXJbaS0yXStlOlwiMFwiK2UpOmU9XCIwMFwiK2Uscy50ZXN0KGUpfW4uZGVmYXVsdC5leHRlbmRBbGlhc2VzKHtjc3N1bml0OntyZWdleDpcIlsrLV0/WzAtOV0rXFxcXC4/KFswLTldKyk/KHB4fGVtfHJlbXxleHwlfGlufGNtfG1tfHB0fHBjKVwifSx1cmw6e3JlZ2V4OlwiKGh0dHBzP3xmdHApOi8vLipcIixhdXRvVW5tYXNrOiExLGtlZXBTdGF0aWM6ITEsdGFiVGhyb3VnaDohMH0saXA6e21hc2s6XCJpezEsM30uansxLDN9Lmt7MSwzfS5sezEsM31cIixkZWZpbml0aW9uczp7aTp7dmFsaWRhdG9yOmx9LGo6e3ZhbGlkYXRvcjpsfSxrOnt2YWxpZGF0b3I6bH0sbDp7dmFsaWRhdG9yOmx9fSxvblVuTWFzazpmdW5jdGlvbihlLHQsaSl7cmV0dXJuIGV9LGlucHV0bW9kZTpcImRlY2ltYWxcIixzdWJzdGl0dXRlczp7XCIsXCI6XCIuXCJ9fSxlbWFpbDp7bWFzazpmdW5jdGlvbihlKXt2YXIgdD1lLnNlcGFyYXRvcixpPWUucXVhbnRpZmllcixhPVwiKnsxLDY0fVsuKnsxLDY0fV1bLip7MSw2NH1dWy4qezEsNjN9XUAtezEsNjN9Li17MSw2M31bLi17MSw2M31dWy4tezEsNjN9XVwiLG49YTtpZih0KWZvcih2YXIgcj0wO3I8aTtyKyspbis9XCJbXCIuY29uY2F0KHQpLmNvbmNhdChhLFwiXVwiKTtyZXR1cm4gbn0sZ3JlZWR5OiExLGNhc2luZzpcImxvd2VyXCIsc2VwYXJhdG9yOm51bGwscXVhbnRpZmllcjo1LHNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXI6XCJcIixvbkJlZm9yZVBhc3RlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuKGU9ZS50b0xvd2VyQ2FzZSgpKS5yZXBsYWNlKFwibWFpbHRvOlwiLFwiXCIpfSxkZWZpbml0aW9uczp7XCIqXCI6e3ZhbGlkYXRvcjpcIlswLTlcXHVmZjExLVxcdWZmMTlBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjUhIyQlJicqKy89P15fYHt8fX4tXVwifSxcIi1cIjp7dmFsaWRhdG9yOlwiWzAtOUEtWmEtei1dXCJ9fSxvblVuTWFzazpmdW5jdGlvbihlLHQsaSl7cmV0dXJuIGV9LGlucHV0bW9kZTpcImVtYWlsXCJ9LG1hYzp7bWFzazpcIiMjOiMjOiMjOiMjOiMjOiMjXCJ9LHZpbjp7bWFzazpcIlZ7MTN9OXs0fVwiLGRlZmluaXRpb25zOntWOnt2YWxpZGF0b3I6XCJbQS1ISi1OUFItWmEtaGotbnByLXpcXFxcZF1cIixjYXNpbmc6XCJ1cHBlclwifX0sY2xlYXJJbmNvbXBsZXRlOiEwLGF1dG9Vbm1hc2s6ITB9LHNzbjp7bWFzazpcIjk5OS05OS05OTk5XCIscG9zdFZhbGlkYXRpb246ZnVuY3Rpb24oZSx0LGksYSxuLHMsbCl7dmFyIGM9by5nZXRNYXNrVGVtcGxhdGUuY2FsbCh0aGlzLCEwLHIuZ2V0TGFzdFZhbGlkUG9zaXRpb24uY2FsbCh0aGlzKSwhMCwhMCk7cmV0dXJuL14oPyEyMTktMDktOTk5OXwwNzgtMDUtMTEyMCkoPyE2NjZ8MDAwfDkuezJ9KS57M30tKD8hMDApLnsyfS0oPyEwezR9KS57NH0kLy50ZXN0KGMuam9pbihcIlwiKSl9fX0pfSwyMDc6ZnVuY3Rpb24oZSx0LGkpe3ZhciBhPXMoaSgyMzk0KSksbj1zKGkoNzE4NCkpLHI9aSg4NzExKSxvPWkoMjgzOSk7ZnVuY3Rpb24gcyhlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIGw9YS5kZWZhdWx0LmRlcGVuZGVuY3lMaWI7ZnVuY3Rpb24gYyhlLHQpe2Zvcih2YXIgaT1cIlwiLG49MDtuPGUubGVuZ3RoO24rKylhLmRlZmF1bHQucHJvdG90eXBlLmRlZmluaXRpb25zW2UuY2hhckF0KG4pXXx8dC5kZWZpbml0aW9uc1tlLmNoYXJBdChuKV18fHQub3B0aW9uYWxtYXJrZXJbMF09PT1lLmNoYXJBdChuKXx8dC5vcHRpb25hbG1hcmtlclsxXT09PWUuY2hhckF0KG4pfHx0LnF1YW50aWZpZXJtYXJrZXJbMF09PT1lLmNoYXJBdChuKXx8dC5xdWFudGlmaWVybWFya2VyWzFdPT09ZS5jaGFyQXQobil8fHQuZ3JvdXBtYXJrZXJbMF09PT1lLmNoYXJBdChuKXx8dC5ncm91cG1hcmtlclsxXT09PWUuY2hhckF0KG4pfHx0LmFsdGVybmF0b3JtYXJrZXI9PT1lLmNoYXJBdChuKT9pKz1cIlxcXFxcIitlLmNoYXJBdChuKTppKz1lLmNoYXJBdChuKTtyZXR1cm4gaX1mdW5jdGlvbiB1KGUsdCxpLGEpe2lmKGUubGVuZ3RoPjAmJnQ+MCYmKCFpLmRpZ2l0c09wdGlvbmFsfHxhKSl7dmFyIG49ZS5pbmRleE9mKGkucmFkaXhQb2ludCkscj0hMTtpLm5lZ2F0aW9uU3ltYm9sLmJhY2s9PT1lW2UubGVuZ3RoLTFdJiYocj0hMCxlLmxlbmd0aC0tKSwtMT09PW4mJihlLnB1c2goaS5yYWRpeFBvaW50KSxuPWUubGVuZ3RoLTEpO2Zvcih2YXIgbz0xO288PXQ7bysrKWlzRmluaXRlKGVbbitvXSl8fChlW24rb109XCIwXCIpfXJldHVybiByJiZlLnB1c2goaS5uZWdhdGlvblN5bWJvbC5iYWNrKSxlfWZ1bmN0aW9uIGYoZSx0KXt2YXIgaT0wO2Zvcih2YXIgYSBpblwiK1wiPT09ZSYmKGk9ci5zZWVrTmV4dC5jYWxsKHRoaXMsdC52YWxpZFBvc2l0aW9ucy5sZW5ndGgtMSkpLHQudGVzdHMpaWYoKGE9cGFyc2VJbnQoYSkpPj1pKWZvcih2YXIgbj0wLG89dC50ZXN0c1thXS5sZW5ndGg7bjxvO24rKylpZigodm9pZCAwPT09dC52YWxpZFBvc2l0aW9uc1thXXx8XCItXCI9PT1lKSYmdC50ZXN0c1thXVtuXS5tYXRjaC5kZWY9PT1lKXJldHVybiBhKyh2b2lkIDAhPT10LnZhbGlkUG9zaXRpb25zW2FdJiZcIi1cIiE9PWU/MTowKTtyZXR1cm4gaX1mdW5jdGlvbiBkKGUsdCl7Zm9yKHZhciBpPS0xLGE9MCxuPXQudmFsaWRQb3NpdGlvbnMubGVuZ3RoO2E8bjthKyspe3ZhciByPXQudmFsaWRQb3NpdGlvbnNbYV07aWYociYmci5tYXRjaC5kZWY9PT1lKXtpPWE7YnJlYWt9fXJldHVybiBpfWZ1bmN0aW9uIHAoZSx0LGksYSxuKXt2YXIgcj10LmJ1ZmZlcj90LmJ1ZmZlci5pbmRleE9mKG4ucmFkaXhQb2ludCk6LTEsbz0oLTEhPT1yfHxhJiZuLmppdE1hc2tpbmcpJiZuZXcgUmVnRXhwKG4uZGVmaW5pdGlvbnNbOV0udmFsaWRhdG9yKS50ZXN0KGUpO3JldHVybiBuLl9yYWRpeERhbmNlJiYtMSE9PXImJm8mJm51bGw9PXQudmFsaWRQb3NpdGlvbnNbcl0/e2luc2VydDp7cG9zOnI9PT1pP3IrMTpyLGM6bi5yYWRpeFBvaW50fSxwb3M6aX06b31hLmRlZmF1bHQuZXh0ZW5kQWxpYXNlcyh7bnVtZXJpYzp7bWFzazpmdW5jdGlvbihlKXtlLnJlcGVhdD0wLGUuZ3JvdXBTZXBhcmF0b3I9PT1lLnJhZGl4UG9pbnQmJmUuZGlnaXRzJiZcIjBcIiE9PWUuZGlnaXRzJiYoXCIuXCI9PT1lLnJhZGl4UG9pbnQ/ZS5ncm91cFNlcGFyYXRvcj1cIixcIjpcIixcIj09PWUucmFkaXhQb2ludD9lLmdyb3VwU2VwYXJhdG9yPVwiLlwiOmUuZ3JvdXBTZXBhcmF0b3I9XCJcIiksXCIgXCI9PT1lLmdyb3VwU2VwYXJhdG9yJiYoZS5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyPXZvaWQgMCksZS5wbGFjZWhvbGRlci5sZW5ndGg+MSYmKGUucGxhY2Vob2xkZXI9ZS5wbGFjZWhvbGRlci5jaGFyQXQoMCkpLFwicmFkaXhGb2N1c1wiPT09ZS5wb3NpdGlvbkNhcmV0T25DbGljayYmXCJcIj09PWUucGxhY2Vob2xkZXImJihlLnBvc2l0aW9uQ2FyZXRPbkNsaWNrPVwibHZwXCIpO3ZhciB0PVwiMFwiLGk9ZS5yYWRpeFBvaW50OyEwPT09ZS5udW1lcmljSW5wdXQmJnZvaWQgMD09PWUuX19maW5hbmNlSW5wdXQ/KHQ9XCIxXCIsZS5wb3NpdGlvbkNhcmV0T25DbGljaz1cInJhZGl4Rm9jdXNcIj09PWUucG9zaXRpb25DYXJldE9uQ2xpY2s/XCJsdnBcIjplLnBvc2l0aW9uQ2FyZXRPbkNsaWNrLGUuZGlnaXRzT3B0aW9uYWw9ITEsaXNOYU4oZS5kaWdpdHMpJiYoZS5kaWdpdHM9MiksZS5fcmFkaXhEYW5jZT0hMSxpPVwiLFwiPT09ZS5yYWRpeFBvaW50P1wiP1wiOlwiIVwiLFwiXCIhPT1lLnJhZGl4UG9pbnQmJnZvaWQgMD09PWUuZGVmaW5pdGlvbnNbaV0mJihlLmRlZmluaXRpb25zW2ldPXt9LGUuZGVmaW5pdGlvbnNbaV0udmFsaWRhdG9yPVwiW1wiK2UucmFkaXhQb2ludCtcIl1cIixlLmRlZmluaXRpb25zW2ldLnBsYWNlaG9sZGVyPWUucmFkaXhQb2ludCxlLmRlZmluaXRpb25zW2ldLnN0YXRpYz0hMCxlLmRlZmluaXRpb25zW2ldLmdlbmVyYXRlZD0hMCkpOihlLl9fZmluYW5jZUlucHV0PSExLGUubnVtZXJpY0lucHV0PSEwKTt2YXIgYSxyPVwiWytdXCI7aWYocis9YyhlLnByZWZpeCxlKSxcIlwiIT09ZS5ncm91cFNlcGFyYXRvcj8odm9pZCAwPT09ZS5kZWZpbml0aW9uc1tlLmdyb3VwU2VwYXJhdG9yXSYmKGUuZGVmaW5pdGlvbnNbZS5ncm91cFNlcGFyYXRvcl09e30sZS5kZWZpbml0aW9uc1tlLmdyb3VwU2VwYXJhdG9yXS52YWxpZGF0b3I9XCJbXCIrZS5ncm91cFNlcGFyYXRvcitcIl1cIixlLmRlZmluaXRpb25zW2UuZ3JvdXBTZXBhcmF0b3JdLnBsYWNlaG9sZGVyPWUuZ3JvdXBTZXBhcmF0b3IsZS5kZWZpbml0aW9uc1tlLmdyb3VwU2VwYXJhdG9yXS5zdGF0aWM9ITAsZS5kZWZpbml0aW9uc1tlLmdyb3VwU2VwYXJhdG9yXS5nZW5lcmF0ZWQ9ITApLHIrPWUuX21hc2soZSkpOnIrPVwiOXsrfVwiLHZvaWQgMCE9PWUuZGlnaXRzJiYwIT09ZS5kaWdpdHMpe3ZhciBvPWUuZGlnaXRzLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpO2lzRmluaXRlKG9bMF0pJiZvWzFdJiZpc0Zpbml0ZShvWzFdKT9yKz1pK3QrXCJ7XCIrZS5kaWdpdHMrXCJ9XCI6KGlzTmFOKGUuZGlnaXRzKXx8cGFyc2VJbnQoZS5kaWdpdHMpPjApJiYoZS5kaWdpdHNPcHRpb25hbHx8ZS5qaXRNYXNraW5nPyhhPXIraSt0K1wiezAsXCIrZS5kaWdpdHMrXCJ9XCIsZS5rZWVwU3RhdGljPSEwKTpyKz1pK3QrXCJ7XCIrZS5kaWdpdHMrXCJ9XCIpfWVsc2UgZS5pbnB1dG1vZGU9XCJudW1lcmljXCI7cmV0dXJuIHIrPWMoZS5zdWZmaXgsZSkscis9XCJbLV1cIixhJiYocj1bYStjKGUuc3VmZml4LGUpK1wiWy1dXCIscl0pLGUuZ3JlZWR5PSExLGZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUucGFyc2VNaW5NYXhPcHRpb25zJiYobnVsbCE9PWUubWluJiYoZS5taW49ZS5taW4udG9TdHJpbmcoKS5yZXBsYWNlKG5ldyBSZWdFeHAoKDAsbi5kZWZhdWx0KShlLmdyb3VwU2VwYXJhdG9yKSxcImdcIiksXCJcIiksXCIsXCI9PT1lLnJhZGl4UG9pbnQmJihlLm1pbj1lLm1pbi5yZXBsYWNlKGUucmFkaXhQb2ludCxcIi5cIikpLGUubWluPWlzRmluaXRlKGUubWluKT9wYXJzZUZsb2F0KGUubWluKTpOYU4saXNOYU4oZS5taW4pJiYoZS5taW49TnVtYmVyLk1JTl9WQUxVRSkpLG51bGwhPT1lLm1heCYmKGUubWF4PWUubWF4LnRvU3RyaW5nKCkucmVwbGFjZShuZXcgUmVnRXhwKCgwLG4uZGVmYXVsdCkoZS5ncm91cFNlcGFyYXRvciksXCJnXCIpLFwiXCIpLFwiLFwiPT09ZS5yYWRpeFBvaW50JiYoZS5tYXg9ZS5tYXgucmVwbGFjZShlLnJhZGl4UG9pbnQsXCIuXCIpKSxlLm1heD1pc0Zpbml0ZShlLm1heCk/cGFyc2VGbG9hdChlLm1heCk6TmFOLGlzTmFOKGUubWF4KSYmKGUubWF4PU51bWJlci5NQVhfVkFMVUUpKSxlLnBhcnNlTWluTWF4T3B0aW9ucz1cImRvbmVcIil9KGUpLFwiXCIhPT1lLnJhZGl4UG9pbnQmJmUuc3Vic3RpdHV0ZVJhZGl4UG9pbnQmJihlLnN1YnN0aXR1dGVzW1wiLlwiPT1lLnJhZGl4UG9pbnQ/XCIsXCI6XCIuXCJdPWUucmFkaXhQb2ludCkscn0sX21hc2s6ZnVuY3Rpb24oZSl7cmV0dXJuXCIoXCIrZS5ncm91cFNlcGFyYXRvcitcIjk5OSl7K3wxfVwifSxkaWdpdHM6XCIqXCIsZGlnaXRzT3B0aW9uYWw6ITAsZW5mb3JjZURpZ2l0c09uQmx1cjohMSxyYWRpeFBvaW50OlwiLlwiLHBvc2l0aW9uQ2FyZXRPbkNsaWNrOlwicmFkaXhGb2N1c1wiLF9yYWRpeERhbmNlOiEwLGdyb3VwU2VwYXJhdG9yOlwiXCIsYWxsb3dNaW51czohMCxuZWdhdGlvblN5bWJvbDp7ZnJvbnQ6XCItXCIsYmFjazpcIlwifSxwcmVmaXg6XCJcIixzdWZmaXg6XCJcIixtaW46bnVsbCxtYXg6bnVsbCxTZXRNYXhPbk92ZXJmbG93OiExLHN0ZXA6MSxpbnB1dFR5cGU6XCJ0ZXh0XCIsdW5tYXNrQXNOdW1iZXI6ITEscm91bmRpbmdGTjpNYXRoLnJvdW5kLGlucHV0bW9kZTpcImRlY2ltYWxcIixzaG9ydGN1dHM6e2s6XCIxMDAwXCIsbTpcIjEwMDAwMDBcIn0scGxhY2Vob2xkZXI6XCIwXCIsZ3JlZWR5OiExLHJpZ2h0QWxpZ246ITAsaW5zZXJ0TW9kZTohMCxhdXRvVW5tYXNrOiExLHNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXI6XCJcIix1c2VQcm90b3R5cGVEZWZpbml0aW9uczohMSxzdHJpcExlYWRpbmdaZXJvZXM6ITAsc3Vic3RpdHV0ZVJhZGl4UG9pbnQ6ITAsZGVmaW5pdGlvbnM6ezA6e3ZhbGlkYXRvcjpwfSwxOnt2YWxpZGF0b3I6cCxkZWZpbml0aW9uU3ltYm9sOlwiOVwifSw5Ont2YWxpZGF0b3I6XCJbMC05XFx1ZmYxMC1cXHVmZjE5XFx1MDY2MC1cXHUwNjY5XFx1MDZmMC1cXHUwNmY5XVwiLGRlZmluaXRpb25TeW1ib2w6XCIqXCJ9LFwiK1wiOnt2YWxpZGF0b3I6ZnVuY3Rpb24oZSx0LGksYSxuKXtyZXR1cm4gbi5hbGxvd01pbnVzJiYoXCItXCI9PT1lfHxlPT09bi5uZWdhdGlvblN5bWJvbC5mcm9udCl9fSxcIi1cIjp7dmFsaWRhdG9yOmZ1bmN0aW9uKGUsdCxpLGEsbil7cmV0dXJuIG4uYWxsb3dNaW51cyYmZT09PW4ubmVnYXRpb25TeW1ib2wuYmFja319fSxwcmVWYWxpZGF0aW9uOmZ1bmN0aW9uKGUsdCxpLGEsbixyLG8scyl7aWYoITEhPT1uLl9fZmluYW5jZUlucHV0JiZpPT09bi5yYWRpeFBvaW50KXJldHVybiExO3ZhciBsPWUuaW5kZXhPZihuLnJhZGl4UG9pbnQpLGM9dDtpZih0PWZ1bmN0aW9uKGUsdCxpLGEsbil7cmV0dXJuIG4uX3JhZGl4RGFuY2UmJm4ubnVtZXJpY0lucHV0JiZ0IT09bi5uZWdhdGlvblN5bWJvbC5iYWNrJiZlPD1pJiYoaT4wfHx0PT1uLnJhZGl4UG9pbnQpJiYodm9pZCAwPT09YS52YWxpZFBvc2l0aW9uc1tlLTFdfHxhLnZhbGlkUG9zaXRpb25zW2UtMV0uaW5wdXQhPT1uLm5lZ2F0aW9uU3ltYm9sLmJhY2spJiYoZS09MSksZX0odCxpLGwscixuKSxcIi1cIj09PWl8fGk9PT1uLm5lZ2F0aW9uU3ltYm9sLmZyb250KXtpZighMCE9PW4uYWxsb3dNaW51cylyZXR1cm4hMTt2YXIgdT0hMSxwPWQoXCIrXCIsciksaD1kKFwiLVwiLHIpO3JldHVybi0xIT09cCYmKHU9W3AsaF0pLCExIT09dT97cmVtb3ZlOnUsY2FyZXQ6Yy1uLm5lZ2F0aW9uU3ltYm9sLmJhY2subGVuZ3RofTp7aW5zZXJ0Olt7cG9zOmYuY2FsbCh0aGlzLFwiK1wiLHIpLGM6bi5uZWdhdGlvblN5bWJvbC5mcm9udCxmcm9tSXNWYWxpZDohMH0se3BvczpmLmNhbGwodGhpcyxcIi1cIixyKSxjOm4ubmVnYXRpb25TeW1ib2wuYmFjayxmcm9tSXNWYWxpZDp2b2lkIDB9XSxjYXJldDpjK24ubmVnYXRpb25TeW1ib2wuYmFjay5sZW5ndGh9fWlmKGk9PT1uLmdyb3VwU2VwYXJhdG9yKXJldHVybntjYXJldDpjfTtpZihzKXJldHVybiEwO2lmKC0xIT09bCYmITA9PT1uLl9yYWRpeERhbmNlJiYhMT09PWEmJmk9PT1uLnJhZGl4UG9pbnQmJnZvaWQgMCE9PW4uZGlnaXRzJiYoaXNOYU4obi5kaWdpdHMpfHxwYXJzZUludChuLmRpZ2l0cyk+MCkmJmwhPT10KXJldHVybntjYXJldDpuLl9yYWRpeERhbmNlJiZ0PT09bC0xP2wrMTpsfTtpZighMT09PW4uX19maW5hbmNlSW5wdXQpaWYoYSl7aWYobi5kaWdpdHNPcHRpb25hbClyZXR1cm57cmV3cml0ZVBvc2l0aW9uOm8uZW5kfTtpZighbi5kaWdpdHNPcHRpb25hbCl7aWYoby5iZWdpbj5sJiZvLmVuZDw9bClyZXR1cm4gaT09PW4ucmFkaXhQb2ludD97aW5zZXJ0Ontwb3M6bCsxLGM6XCIwXCIsZnJvbUlzVmFsaWQ6ITB9LHJld3JpdGVQb3NpdGlvbjpsfTp7cmV3cml0ZVBvc2l0aW9uOmwrMX07aWYoby5iZWdpbjxsKXJldHVybntyZXdyaXRlUG9zaXRpb246by5iZWdpbi0xfX19ZWxzZSBpZighbi5zaG93TWFza09uSG92ZXImJiFuLnNob3dNYXNrT25Gb2N1cyYmIW4uZGlnaXRzT3B0aW9uYWwmJm4uZGlnaXRzPjAmJlwiXCI9PT10aGlzLl9fdmFsdWVHZXQuY2FsbCh0aGlzLmVsKSlyZXR1cm57cmV3cml0ZVBvc2l0aW9uOmx9O3JldHVybntyZXdyaXRlUG9zaXRpb246dH19LHBvc3RWYWxpZGF0aW9uOmZ1bmN0aW9uKGUsdCxpLGEsbixyLG8pe2lmKCExPT09YSlyZXR1cm4gYTtpZihvKXJldHVybiEwO2lmKG51bGwhPT1uLm1pbnx8bnVsbCE9PW4ubWF4KXt2YXIgcz1uLm9uVW5NYXNrKGUuc2xpY2UoKS5yZXZlcnNlKCkuam9pbihcIlwiKSx2b2lkIDAsbC5leHRlbmQoe30sbix7dW5tYXNrQXNOdW1iZXI6ITB9KSk7aWYobnVsbCE9PW4ubWluJiZzPG4ubWluJiYocy50b1N0cmluZygpLmxlbmd0aD5uLm1pbi50b1N0cmluZygpLmxlbmd0aHx8czwwKSlyZXR1cm4hMTtpZihudWxsIT09bi5tYXgmJnM+bi5tYXgpcmV0dXJuISFuLlNldE1heE9uT3ZlcmZsb3cmJntyZWZyZXNoRnJvbUJ1ZmZlcjohMCxidWZmZXI6dShuLm1heC50b1N0cmluZygpLnJlcGxhY2UoXCIuXCIsbi5yYWRpeFBvaW50KS5zcGxpdChcIlwiKSxuLmRpZ2l0cyxuKS5yZXZlcnNlKCl9fXJldHVybiBhfSxvblVuTWFzazpmdW5jdGlvbihlLHQsaSl7aWYoXCJcIj09PXQmJiEwPT09aS5udWxsYWJsZSlyZXR1cm4gdDt2YXIgYT1lLnJlcGxhY2UoaS5wcmVmaXgsXCJcIik7cmV0dXJuIGE9KGE9YS5yZXBsYWNlKGkuc3VmZml4LFwiXCIpKS5yZXBsYWNlKG5ldyBSZWdFeHAoKDAsbi5kZWZhdWx0KShpLmdyb3VwU2VwYXJhdG9yKSxcImdcIiksXCJcIiksXCJcIiE9PWkucGxhY2Vob2xkZXIuY2hhckF0KDApJiYoYT1hLnJlcGxhY2UobmV3IFJlZ0V4cChpLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSxcImdcIiksXCIwXCIpKSxpLnVubWFza0FzTnVtYmVyPyhcIlwiIT09aS5yYWRpeFBvaW50JiYtMSE9PWEuaW5kZXhPZihpLnJhZGl4UG9pbnQpJiYoYT1hLnJlcGxhY2Uobi5kZWZhdWx0LmNhbGwodGhpcyxpLnJhZGl4UG9pbnQpLFwiLlwiKSksYT0oYT1hLnJlcGxhY2UobmV3IFJlZ0V4cChcIl5cIisoMCxuLmRlZmF1bHQpKGkubmVnYXRpb25TeW1ib2wuZnJvbnQpKSxcIi1cIikpLnJlcGxhY2UobmV3IFJlZ0V4cCgoMCxuLmRlZmF1bHQpKGkubmVnYXRpb25TeW1ib2wuYmFjaykrXCIkXCIpLFwiXCIpLE51bWJlcihhKSk6YX0saXNDb21wbGV0ZTpmdW5jdGlvbihlLHQpe3ZhciBpPSh0Lm51bWVyaWNJbnB1dD9lLnNsaWNlKCkucmV2ZXJzZSgpOmUpLmpvaW4oXCJcIik7cmV0dXJuIGk9KGk9KGk9KGk9KGk9aS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJeXCIrKDAsbi5kZWZhdWx0KSh0Lm5lZ2F0aW9uU3ltYm9sLmZyb250KSksXCItXCIpKS5yZXBsYWNlKG5ldyBSZWdFeHAoKDAsbi5kZWZhdWx0KSh0Lm5lZ2F0aW9uU3ltYm9sLmJhY2spK1wiJFwiKSxcIlwiKSkucmVwbGFjZSh0LnByZWZpeCxcIlwiKSkucmVwbGFjZSh0LnN1ZmZpeCxcIlwiKSkucmVwbGFjZShuZXcgUmVnRXhwKCgwLG4uZGVmYXVsdCkodC5ncm91cFNlcGFyYXRvcikrXCIoWzAtOV17M30pXCIsXCJnXCIpLFwiJDFcIiksXCIsXCI9PT10LnJhZGl4UG9pbnQmJihpPWkucmVwbGFjZSgoMCxuLmRlZmF1bHQpKHQucmFkaXhQb2ludCksXCIuXCIpKSxpc0Zpbml0ZShpKX0sb25CZWZvcmVNYXNrOmZ1bmN0aW9uKGUsdCl7dmFyIGk9dC5yYWRpeFBvaW50fHxcIixcIjtpc0Zpbml0ZSh0LmRpZ2l0cykmJih0LmRpZ2l0cz1wYXJzZUludCh0LmRpZ2l0cykpLFwibnVtYmVyXCIhPXR5cGVvZiBlJiZcIm51bWJlclwiIT09dC5pbnB1dFR5cGV8fFwiXCI9PT1pfHwoZT1lLnRvU3RyaW5nKCkucmVwbGFjZShcIi5cIixpKSk7dmFyIGE9XCItXCI9PT1lLmNoYXJBdCgwKXx8ZS5jaGFyQXQoMCk9PT10Lm5lZ2F0aW9uU3ltYm9sLmZyb250LHI9ZS5zcGxpdChpKSxvPXJbMF0ucmVwbGFjZSgvW15cXC0wLTldL2csXCJcIikscz1yLmxlbmd0aD4xP3JbMV0ucmVwbGFjZSgvW14wLTldL2csXCJcIik6XCJcIixsPXIubGVuZ3RoPjE7ZT1vKyhcIlwiIT09cz9pK3M6cyk7dmFyIGM9MDtpZihcIlwiIT09aSYmKGM9dC5kaWdpdHNPcHRpb25hbD90LmRpZ2l0czxzLmxlbmd0aD90LmRpZ2l0czpzLmxlbmd0aDp0LmRpZ2l0cyxcIlwiIT09c3x8IXQuZGlnaXRzT3B0aW9uYWwpKXt2YXIgZj1NYXRoLnBvdygxMCxjfHwxKTtlPWUucmVwbGFjZSgoMCxuLmRlZmF1bHQpKGkpLFwiLlwiKSxpc05hTihwYXJzZUZsb2F0KGUpKXx8KGU9KHQucm91bmRpbmdGTihwYXJzZUZsb2F0KGUpKmYpL2YpLnRvRml4ZWQoYykpLGU9ZS50b1N0cmluZygpLnJlcGxhY2UoXCIuXCIsaSl9aWYoMD09PXQuZGlnaXRzJiYtMSE9PWUuaW5kZXhPZihpKSYmKGU9ZS5zdWJzdHJpbmcoMCxlLmluZGV4T2YoaSkpKSxudWxsIT09dC5taW58fG51bGwhPT10Lm1heCl7dmFyIGQ9ZS50b1N0cmluZygpLnJlcGxhY2UoaSxcIi5cIik7bnVsbCE9PXQubWluJiZkPHQubWluP2U9dC5taW4udG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLGkpOm51bGwhPT10Lm1heCYmZD50Lm1heCYmKGU9dC5tYXgudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLGkpKX1yZXR1cm4gYSYmXCItXCIhPT1lLmNoYXJBdCgwKSYmKGU9XCItXCIrZSksdShlLnRvU3RyaW5nKCkuc3BsaXQoXCJcIiksYyx0LGwpLmpvaW4oXCJcIil9LG9uQmVmb3JlV3JpdGU6ZnVuY3Rpb24oZSx0LGksYSl7ZnVuY3Rpb24gcihlLHQpe2lmKCExIT09YS5fX2ZpbmFuY2VJbnB1dHx8dCl7dmFyIGk9ZS5pbmRleE9mKGEucmFkaXhQb2ludCk7LTEhPT1pJiZlLnNwbGljZShpLDEpfWlmKFwiXCIhPT1hLmdyb3VwU2VwYXJhdG9yKWZvcig7LTEhPT0oaT1lLmluZGV4T2YoYS5ncm91cFNlcGFyYXRvcikpOyllLnNwbGljZShpLDEpO3JldHVybiBlfXZhciBvLHM7aWYoYS5zdHJpcExlYWRpbmdaZXJvZXMmJihzPWZ1bmN0aW9uKGUsdCl7dmFyIGk9bmV3IFJlZ0V4cChcIiheXCIrKFwiXCIhPT10Lm5lZ2F0aW9uU3ltYm9sLmZyb250PygwLG4uZGVmYXVsdCkodC5uZWdhdGlvblN5bWJvbC5mcm9udCkrXCI/XCI6XCJcIikrKDAsbi5kZWZhdWx0KSh0LnByZWZpeCkrXCIpKC4qKShcIisoMCxuLmRlZmF1bHQpKHQuc3VmZml4KSsoXCJcIiE9dC5uZWdhdGlvblN5bWJvbC5iYWNrPygwLG4uZGVmYXVsdCkodC5uZWdhdGlvblN5bWJvbC5iYWNrKStcIj9cIjpcIlwiKStcIiQpXCIpLmV4ZWMoZS5zbGljZSgpLnJldmVyc2UoKS5qb2luKFwiXCIpKSxhPWk/aVsyXTpcIlwiLHI9ITE7cmV0dXJuIGEmJihhPWEuc3BsaXQodC5yYWRpeFBvaW50LmNoYXJBdCgwKSlbMF0scj1uZXcgUmVnRXhwKFwiXlswXCIrdC5ncm91cFNlcGFyYXRvcitcIl0qXCIpLmV4ZWMoYSkpLCEoIXJ8fCEoclswXS5sZW5ndGg+MXx8clswXS5sZW5ndGg+MCYmclswXS5sZW5ndGg8YS5sZW5ndGgpKSYmcn0odCxhKSkpZm9yKHZhciBjPXQuam9pbihcIlwiKS5sYXN0SW5kZXhPZihzWzBdLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpKS0oc1swXT09cy5pbnB1dD8wOjEpLGY9c1swXT09cy5pbnB1dD8xOjAsZD1zWzBdLmxlbmd0aC1mO2Q+MDtkLS0pZGVsZXRlIHRoaXMubWFza3NldC52YWxpZFBvc2l0aW9uc1tjK2RdLGRlbGV0ZSB0W2MrZF07aWYoZSlzd2l0Y2goZS50eXBlKXtjYXNlXCJibHVyXCI6Y2FzZVwiY2hlY2t2YWxcIjppZihudWxsIT09YS5taW4pe3ZhciBwPWEub25Vbk1hc2sodC5zbGljZSgpLnJldmVyc2UoKS5qb2luKFwiXCIpLHZvaWQgMCxsLmV4dGVuZCh7fSxhLHt1bm1hc2tBc051bWJlcjohMH0pKTtpZihudWxsIT09YS5taW4mJnA8YS5taW4pcmV0dXJue3JlZnJlc2hGcm9tQnVmZmVyOiEwLGJ1ZmZlcjp1KGEubWluLnRvU3RyaW5nKCkucmVwbGFjZShcIi5cIixhLnJhZGl4UG9pbnQpLnNwbGl0KFwiXCIpLGEuZGlnaXRzLGEpLnJldmVyc2UoKX19aWYodFt0Lmxlbmd0aC0xXT09PWEubmVnYXRpb25TeW1ib2wuZnJvbnQpe3ZhciBoPW5ldyBSZWdFeHAoXCIoXlwiKyhcIlwiIT1hLm5lZ2F0aW9uU3ltYm9sLmZyb250PygwLG4uZGVmYXVsdCkoYS5uZWdhdGlvblN5bWJvbC5mcm9udCkrXCI/XCI6XCJcIikrKDAsbi5kZWZhdWx0KShhLnByZWZpeCkrXCIpKC4qKShcIisoMCxuLmRlZmF1bHQpKGEuc3VmZml4KSsoXCJcIiE9YS5uZWdhdGlvblN5bWJvbC5iYWNrPygwLG4uZGVmYXVsdCkoYS5uZWdhdGlvblN5bWJvbC5iYWNrKStcIj9cIjpcIlwiKStcIiQpXCIpLmV4ZWMocih0LnNsaWNlKCksITApLnJldmVyc2UoKS5qb2luKFwiXCIpKTswPT0oaD9oWzJdOlwiXCIpJiYobz17cmVmcmVzaEZyb21CdWZmZXI6ITAsYnVmZmVyOlswXX0pfWVsc2UgaWYoXCJcIiE9PWEucmFkaXhQb2ludCl7dC5pbmRleE9mKGEucmFkaXhQb2ludCk9PT1hLnN1ZmZpeC5sZW5ndGgmJihvJiZvLmJ1ZmZlcj9vLmJ1ZmZlci5zcGxpY2UoMCwxK2Euc3VmZml4Lmxlbmd0aCk6KHQuc3BsaWNlKDAsMSthLnN1ZmZpeC5sZW5ndGgpLG89e3JlZnJlc2hGcm9tQnVmZmVyOiEwLGJ1ZmZlcjpyKHQpfSkpfWlmKGEuZW5mb3JjZURpZ2l0c09uQmx1cil7dmFyIHY9KG89b3x8e30pJiZvLmJ1ZmZlcnx8dC5zbGljZSgpLnJldmVyc2UoKTtvLnJlZnJlc2hGcm9tQnVmZmVyPSEwLG8uYnVmZmVyPXUodixhLmRpZ2l0cyxhLCEwKS5yZXZlcnNlKCl9fXJldHVybiBvfSxvbktleURvd246ZnVuY3Rpb24oZSx0LGksYSl7dmFyIG4scj1sKHRoaXMpO2lmKDMhPWUubG9jYXRpb24pe3ZhciBzLGM9ZS5rZXk7aWYoKHM9YS5zaG9ydGN1dHMmJmEuc2hvcnRjdXRzW2NdKSYmcy5sZW5ndGg+MSlyZXR1cm4gdGhpcy5pbnB1dG1hc2suX192YWx1ZVNldC5jYWxsKHRoaXMscGFyc2VGbG9hdCh0aGlzLmlucHV0bWFzay51bm1hc2tlZHZhbHVlKCkpKnBhcnNlSW50KHMpKSxyLnRyaWdnZXIoXCJzZXR2YWx1ZVwiKSwhMX1pZihlLmN0cmxLZXkpc3dpdGNoKGUua2V5KXtjYXNlIG8ua2V5cy5BcnJvd1VwOnJldHVybiB0aGlzLmlucHV0bWFzay5fX3ZhbHVlU2V0LmNhbGwodGhpcyxwYXJzZUZsb2F0KHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSkrcGFyc2VJbnQoYS5zdGVwKSksci50cmlnZ2VyKFwic2V0dmFsdWVcIiksITE7Y2FzZSBvLmtleXMuQXJyb3dEb3duOnJldHVybiB0aGlzLmlucHV0bWFzay5fX3ZhbHVlU2V0LmNhbGwodGhpcyxwYXJzZUZsb2F0KHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSktcGFyc2VJbnQoYS5zdGVwKSksci50cmlnZ2VyKFwic2V0dmFsdWVcIiksITF9aWYoIWUuc2hpZnRLZXkmJihlLmtleT09PW8ua2V5cy5EZWxldGV8fGUua2V5PT09by5rZXlzLkJhY2tzcGFjZXx8ZS5rZXk9PT1vLmtleXMuQkFDS1NQQUNFX1NBRkFSSSkmJmkuYmVnaW4hPT10Lmxlbmd0aCl7aWYodFtlLmtleT09PW8ua2V5cy5EZWxldGU/aS5iZWdpbi0xOmkuZW5kXT09PWEubmVnYXRpb25TeW1ib2wuZnJvbnQpcmV0dXJuIG49dC5zbGljZSgpLnJldmVyc2UoKSxcIlwiIT09YS5uZWdhdGlvblN5bWJvbC5mcm9udCYmbi5zaGlmdCgpLFwiXCIhPT1hLm5lZ2F0aW9uU3ltYm9sLmJhY2smJm4ucG9wKCksci50cmlnZ2VyKFwic2V0dmFsdWVcIixbbi5qb2luKFwiXCIpLGkuYmVnaW5dKSwhMTtpZighMD09PWEuX3JhZGl4RGFuY2Upe3ZhciBmPXQuaW5kZXhPZihhLnJhZGl4UG9pbnQpO2lmKGEuZGlnaXRzT3B0aW9uYWwpe2lmKDA9PT1mKXJldHVybihuPXQuc2xpY2UoKS5yZXZlcnNlKCkpLnBvcCgpLHIudHJpZ2dlcihcInNldHZhbHVlXCIsW24uam9pbihcIlwiKSxpLmJlZ2luPj1uLmxlbmd0aD9uLmxlbmd0aDppLmJlZ2luXSksITF9ZWxzZSBpZigtMSE9PWYmJihpLmJlZ2luPGZ8fGkuZW5kPGZ8fGUua2V5PT09by5rZXlzLkRlbGV0ZSYmKGkuYmVnaW49PT1mfHxpLmJlZ2luLTE9PT1mKSkpe3ZhciBkPXZvaWQgMDtyZXR1cm4gaS5iZWdpbj09PWkuZW5kJiYoZS5rZXk9PT1vLmtleXMuQmFja3NwYWNlfHxlLmtleT09PW8ua2V5cy5CQUNLU1BBQ0VfU0FGQVJJP2kuYmVnaW4rKzplLmtleT09PW8ua2V5cy5EZWxldGUmJmkuYmVnaW4tMT09PWYmJihkPWwuZXh0ZW5kKHt9LGkpLGkuYmVnaW4tLSxpLmVuZC0tKSksKG49dC5zbGljZSgpLnJldmVyc2UoKSkuc3BsaWNlKG4ubGVuZ3RoLWkuYmVnaW4saS5iZWdpbi1pLmVuZCsxKSxuPXUobixhLmRpZ2l0cyxhKS5qb2luKFwiXCIpLGQmJihpPWQpLHIudHJpZ2dlcihcInNldHZhbHVlXCIsW24saS5iZWdpbj49bi5sZW5ndGg/ZisxOmkuYmVnaW5dKSwhMX19fX19LGN1cnJlbmN5OntwcmVmaXg6XCJcIixncm91cFNlcGFyYXRvcjpcIixcIixhbGlhczpcIm51bWVyaWNcIixkaWdpdHM6MixkaWdpdHNPcHRpb25hbDohMX0sZGVjaW1hbDp7YWxpYXM6XCJudW1lcmljXCJ9LGludGVnZXI6e2FsaWFzOlwibnVtZXJpY1wiLGlucHV0bW9kZTpcIm51bWVyaWNcIixkaWdpdHM6MH0scGVyY2VudGFnZTp7YWxpYXM6XCJudW1lcmljXCIsbWluOjAsbWF4OjEwMCxzdWZmaXg6XCIgJVwiLGRpZ2l0czowLGFsbG93TWludXM6ITF9LGluZGlhbm5zOnthbGlhczpcIm51bWVyaWNcIixfbWFzazpmdW5jdGlvbihlKXtyZXR1cm5cIihcIitlLmdyb3VwU2VwYXJhdG9yK1wiOTkpeyp8MX0oXCIrZS5ncm91cFNlcGFyYXRvcitcIjk5OSl7MXwxfVwifSxncm91cFNlcGFyYXRvcjpcIixcIixyYWRpeFBvaW50OlwiLlwiLHBsYWNlaG9sZGVyOlwiMFwiLGRpZ2l0czoyLGRpZ2l0c09wdGlvbmFsOiExfX0pfSw5MzgwOmZ1bmN0aW9uKGUsdCxpKXt2YXIgYTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmRlZmF1bHQ9dm9pZCAwO3ZhciBuPSgoYT1pKDg3NDEpKSYmYS5fX2VzTW9kdWxlP2E6e2RlZmF1bHQ6YX0pLmRlZmF1bHQ/d2luZG93Ont9O3QuZGVmYXVsdD1ufSw3NzYwOmZ1bmN0aW9uKGUsdCxpKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkhhbmRsZU5hdGl2ZVBsYWNlaG9sZGVyPWZ1bmN0aW9uKGUsdCl7dmFyIGk9ZT9lLmlucHV0bWFzazp0aGlzO2lmKHMuaWUpe2lmKGUuaW5wdXRtYXNrLl92YWx1ZUdldCgpIT09dCYmKGUucGxhY2Vob2xkZXIhPT10fHxcIlwiPT09ZS5wbGFjZWhvbGRlcikpe3ZhciBhPXIuZ2V0QnVmZmVyLmNhbGwoaSkuc2xpY2UoKSxuPWUuaW5wdXRtYXNrLl92YWx1ZUdldCgpO2lmKG4hPT10KXt2YXIgbz1yLmdldExhc3RWYWxpZFBvc2l0aW9uLmNhbGwoaSk7LTE9PT1vJiZuPT09ci5nZXRCdWZmZXJUZW1wbGF0ZS5jYWxsKGkpLmpvaW4oXCJcIik/YT1bXTotMSE9PW8mJnUuY2FsbChpLGEpLGQoZSxhKX19fWVsc2UgZS5wbGFjZWhvbGRlciE9PXQmJihlLnBsYWNlaG9sZGVyPXQsXCJcIj09PWUucGxhY2Vob2xkZXImJmUucmVtb3ZlQXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIikpfSx0LmFwcGx5SW5wdXRWYWx1ZT1jLHQuY2hlY2tWYWw9Zix0LmNsZWFyT3B0aW9uYWxUYWlsPXUsdC51bm1hc2tlZHZhbHVlPWZ1bmN0aW9uKGUpe3ZhciB0PWU/ZS5pbnB1dG1hc2s6dGhpcyxpPXQub3B0cyxhPXQubWFza3NldDtpZihlKXtpZih2b2lkIDA9PT1lLmlucHV0bWFzaylyZXR1cm4gZS52YWx1ZTtlLmlucHV0bWFzayYmZS5pbnB1dG1hc2sucmVmcmVzaFZhbHVlJiZjKGUsZS5pbnB1dG1hc2suX3ZhbHVlR2V0KCEwKSl9Zm9yKHZhciBuPVtdLG89YS52YWxpZFBvc2l0aW9ucyxzPTAsbD1vLmxlbmd0aDtzPGw7cysrKW9bc10mJm9bc10ubWF0Y2gmJigxIT1vW3NdLm1hdGNoLnN0YXRpY3x8QXJyYXkuaXNBcnJheShhLm1ldGFkYXRhKSYmITAhPT1vW3NdLmdlbmVyYXRlZElucHV0KSYmbi5wdXNoKG9bc10uaW5wdXQpO3ZhciB1PTA9PT1uLmxlbmd0aD9cIlwiOih0LmlzUlRMP24ucmV2ZXJzZSgpOm4pLmpvaW4oXCJcIik7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgaS5vblVuTWFzayl7dmFyIGY9KHQuaXNSVEw/ci5nZXRCdWZmZXIuY2FsbCh0KS5zbGljZSgpLnJldmVyc2UoKTpyLmdldEJ1ZmZlci5jYWxsKHQpKS5qb2luKFwiXCIpO3U9aS5vblVuTWFzay5jYWxsKHQsZix1LGkpfXJldHVybiB1fSx0LndyaXRlQnVmZmVyPWQ7dmFyIGE9aSgyODM5KSxuPWkoNDcxMykscj1pKDg3MTEpLG89aSg3MjE1KSxzPWkoOTg0NSksbD1pKDYwMzApO2Z1bmN0aW9uIGMoZSx0KXt2YXIgaT1lP2UuaW5wdXRtYXNrOnRoaXMsYT1pLm9wdHM7ZS5pbnB1dG1hc2sucmVmcmVzaFZhbHVlPSExLFwiZnVuY3Rpb25cIj09dHlwZW9mIGEub25CZWZvcmVNYXNrJiYodD1hLm9uQmVmb3JlTWFzay5jYWxsKGksdCxhKXx8dCksZihlLCEwLCExLHQ9dC50b1N0cmluZygpLnNwbGl0KFwiXCIpKSxpLnVuZG9WYWx1ZT1pLl92YWx1ZUdldCghMCksKGEuY2xlYXJNYXNrT25Mb3N0Rm9jdXN8fGEuY2xlYXJJbmNvbXBsZXRlKSYmZS5pbnB1dG1hc2suX3ZhbHVlR2V0KCk9PT1yLmdldEJ1ZmZlclRlbXBsYXRlLmNhbGwoaSkuam9pbihcIlwiKSYmLTE9PT1yLmdldExhc3RWYWxpZFBvc2l0aW9uLmNhbGwoaSkmJmUuaW5wdXRtYXNrLl92YWx1ZVNldChcIlwiKX1mdW5jdGlvbiB1KGUpe2UubGVuZ3RoPTA7Zm9yKHZhciB0LGk9bi5nZXRNYXNrVGVtcGxhdGUuY2FsbCh0aGlzLCEwLDAsITAsdm9pZCAwLCEwKTt2b2lkIDAhPT0odD1pLnNoaWZ0KCkpOyllLnB1c2godCk7cmV0dXJuIGV9ZnVuY3Rpb24gZihlLHQsaSxhLHMpe3ZhciBjPWU/ZS5pbnB1dG1hc2s6dGhpcyx1PWMubWFza3NldCxmPWMub3B0cyxwPWMuZGVwZW5kZW5jeUxpYixoPWEuc2xpY2UoKSx2PVwiXCIsbT0tMSxnPXZvaWQgMCxrPWYuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcjtmLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXI9XCJcIixyLnJlc2V0TWFza1NldC5jYWxsKGMpLHUudGVzdHM9e30sbT1mLnJhZGl4UG9pbnQ/ci5kZXRlcm1pbmVOZXdDYXJldFBvc2l0aW9uLmNhbGwoYyx7YmVnaW46MCxlbmQ6MH0sITEsITE9PT1mLl9fZmluYW5jZUlucHV0P1wicmFkaXhGb2N1c1wiOnZvaWQgMCkuYmVnaW46MCx1LnA9bSxjLmNhcmV0UG9zPXtiZWdpbjptfTt2YXIgeT1bXSxiPWMuY2FyZXRQb3M7aWYoaC5mb3JFYWNoKChmdW5jdGlvbihlLHQpe2lmKHZvaWQgMCE9PWUpe3ZhciBhPW5ldyBwLkV2ZW50KFwiX2NoZWNrdmFsXCIpO2Eua2V5PWUsdis9ZTt2YXIgbz1yLmdldExhc3RWYWxpZFBvc2l0aW9uLmNhbGwoYyx2b2lkIDAsITApOyFmdW5jdGlvbihlLHQpe2Zvcih2YXIgaT1uLmdldE1hc2tUZW1wbGF0ZS5jYWxsKGMsITAsMCkuc2xpY2UoZSxyLnNlZWtOZXh0LmNhbGwoYyxlLCExLCExKSkuam9pbihcIlwiKS5yZXBsYWNlKC8nL2csXCJcIiksYT1pLmluZGV4T2YodCk7YT4wJiZcIiBcIj09PWlbYS0xXTspYS0tO3ZhciBvPTA9PT1hJiYhci5pc01hc2suY2FsbChjLGUpJiYobi5nZXRUZXN0LmNhbGwoYyxlKS5tYXRjaC5uYXRpdmVEZWY9PT10LmNoYXJBdCgwKXx8ITA9PT1uLmdldFRlc3QuY2FsbChjLGUpLm1hdGNoLnN0YXRpYyYmbi5nZXRUZXN0LmNhbGwoYyxlKS5tYXRjaC5uYXRpdmVEZWY9PT1cIidcIit0LmNoYXJBdCgwKXx8XCIgXCI9PT1uLmdldFRlc3QuY2FsbChjLGUpLm1hdGNoLm5hdGl2ZURlZiYmKG4uZ2V0VGVzdC5jYWxsKGMsZSsxKS5tYXRjaC5uYXRpdmVEZWY9PT10LmNoYXJBdCgwKXx8ITA9PT1uLmdldFRlc3QuY2FsbChjLGUrMSkubWF0Y2guc3RhdGljJiZuLmdldFRlc3QuY2FsbChjLGUrMSkubWF0Y2gubmF0aXZlRGVmPT09XCInXCIrdC5jaGFyQXQoMCkpKTtpZighbyYmYT4wJiYhci5pc01hc2suY2FsbChjLGUsITEsITApKXt2YXIgcz1yLnNlZWtOZXh0LmNhbGwoYyxlKTtjLmNhcmV0UG9zLmJlZ2luPHMmJihjLmNhcmV0UG9zPXtiZWdpbjpzfSl9cmV0dXJuIG99KG0sdik/KGc9bC5FdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChjLGEsITAsITEsaSxjLmNhcmV0UG9zLmJlZ2luKSkmJihtPWMuY2FyZXRQb3MuYmVnaW4rMSx2PVwiXCIpOmc9bC5FdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChjLGEsITAsITEsaSxvKzEpLGc/KHZvaWQgMCE9PWcucG9zJiZ1LnZhbGlkUG9zaXRpb25zW2cucG9zXSYmITA9PT11LnZhbGlkUG9zaXRpb25zW2cucG9zXS5tYXRjaC5zdGF0aWMmJnZvaWQgMD09PXUudmFsaWRQb3NpdGlvbnNbZy5wb3NdLmFsdGVybmF0aW9uJiYoeS5wdXNoKGcucG9zKSxjLmlzUlRMfHwoZy5mb3J3YXJkUG9zaXRpb249Zy5wb3MrMSkpLGQuY2FsbChjLHZvaWQgMCxyLmdldEJ1ZmZlci5jYWxsKGMpLGcuZm9yd2FyZFBvc2l0aW9uLGEsITEpLGMuY2FyZXRQb3M9e2JlZ2luOmcuZm9yd2FyZFBvc2l0aW9uLGVuZDpnLmZvcndhcmRQb3NpdGlvbn0sYj1jLmNhcmV0UG9zKTp2b2lkIDA9PT11LnZhbGlkUG9zaXRpb25zW3RdJiZoW3RdPT09bi5nZXRQbGFjZWhvbGRlci5jYWxsKGMsdCkmJnIuaXNNYXNrLmNhbGwoYyx0LCEwKT9jLmNhcmV0UG9zLmJlZ2luKys6Yy5jYXJldFBvcz1ifX0pKSx5Lmxlbmd0aD4wKXt2YXIgeCxQLHc9ci5zZWVrTmV4dC5jYWxsKGMsLTEsdm9pZCAwLCExKTtpZighby5pc0NvbXBsZXRlLmNhbGwoYyxyLmdldEJ1ZmZlci5jYWxsKGMpKSYmeS5sZW5ndGg8PXd8fG8uaXNDb21wbGV0ZS5jYWxsKGMsci5nZXRCdWZmZXIuY2FsbChjKSkmJnkubGVuZ3RoPjAmJnkubGVuZ3RoIT09dyYmMD09PXlbMF0pZm9yKHZhciBTPXc7dm9pZCAwIT09KHg9eS5zaGlmdCgpKTspe3ZhciBfPW5ldyBwLkV2ZW50KFwiX2NoZWNrdmFsXCIpO2lmKChQPXUudmFsaWRQb3NpdGlvbnNbeF0pLmdlbmVyYXRlZElucHV0PSEwLF8ua2V5PVAuaW5wdXQsKGc9bC5FdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChjLF8sITAsITEsaSxTKSkmJnZvaWQgMCE9PWcucG9zJiZnLnBvcyE9PXgmJnUudmFsaWRQb3NpdGlvbnNbZy5wb3NdJiYhMD09PXUudmFsaWRQb3NpdGlvbnNbZy5wb3NdLm1hdGNoLnN0YXRpYyl5LnB1c2goZy5wb3MpO2Vsc2UgaWYoIWcpYnJlYWs7UysrfX10JiZkLmNhbGwoYyxlLHIuZ2V0QnVmZmVyLmNhbGwoYyksZz9nLmZvcndhcmRQb3NpdGlvbjpjLmNhcmV0UG9zLmJlZ2luLHN8fG5ldyBwLkV2ZW50KFwiY2hlY2t2YWxcIikscyYmKFwiaW5wdXRcIj09PXMudHlwZSYmYy51bmRvVmFsdWUhPT1yLmdldEJ1ZmZlci5jYWxsKGMpLmpvaW4oXCJcIil8fFwicGFzdGVcIj09PXMudHlwZSkpLGYuc2tpcE9wdGlvbmFsUGFydENoYXJhY3Rlcj1rfWZ1bmN0aW9uIGQoZSx0LGksbixzKXt2YXIgbD1lP2UuaW5wdXRtYXNrOnRoaXMsYz1sLm9wdHMsdT1sLmRlcGVuZGVuY3lMaWI7aWYobiYmXCJmdW5jdGlvblwiPT10eXBlb2YgYy5vbkJlZm9yZVdyaXRlKXt2YXIgZj1jLm9uQmVmb3JlV3JpdGUuY2FsbChsLG4sdCxpLGMpO2lmKGYpe2lmKGYucmVmcmVzaEZyb21CdWZmZXIpe3ZhciBkPWYucmVmcmVzaEZyb21CdWZmZXI7by5yZWZyZXNoRnJvbUJ1ZmZlci5jYWxsKGwsITA9PT1kP2Q6ZC5zdGFydCxkLmVuZCxmLmJ1ZmZlcnx8dCksdD1yLmdldEJ1ZmZlci5jYWxsKGwsITApfXZvaWQgMCE9PWkmJihpPXZvaWQgMCE9PWYuY2FyZXQ/Zi5jYXJldDppKX19aWYodm9pZCAwIT09ZSYmKGUuaW5wdXRtYXNrLl92YWx1ZVNldCh0LmpvaW4oXCJcIikpLHZvaWQgMD09PWl8fHZvaWQgMCE9PW4mJlwiYmx1clwiPT09bi50eXBlfHxyLmNhcmV0LmNhbGwobCxlLGksdm9pZCAwLHZvaWQgMCx2b2lkIDAhPT1uJiZcImtleWRvd25cIj09PW4udHlwZSYmKG4ua2V5PT09YS5rZXlzLkRlbGV0ZXx8bi5rZXk9PT1hLmtleXMuQmFja3NwYWNlKSksITA9PT1zKSl7dmFyIHA9dShlKSxoPWUuaW5wdXRtYXNrLl92YWx1ZUdldCgpO2UuaW5wdXRtYXNrLnNraXBJbnB1dEV2ZW50PSEwLHAudHJpZ2dlcihcImlucHV0XCIpLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7aD09PXIuZ2V0QnVmZmVyVGVtcGxhdGUuY2FsbChsKS5qb2luKFwiXCIpP3AudHJpZ2dlcihcImNsZWFyZWRcIik6ITA9PT1vLmlzQ29tcGxldGUuY2FsbChsLHQpJiZwLnRyaWdnZXIoXCJjb21wbGV0ZVwiKX0pLDApfX19LDIzOTQ6ZnVuY3Rpb24oZSx0LGkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD12b2lkIDAsaSg3MTQ5KSxpKDMxOTQpO3ZhciBhPWkoMTU3KSxuPW0oaSg0OTYzKSkscj1tKGkoOTM4MCkpLG89aSgyMzkxKSxzPWkoNDcxMyksbD1pKDg3MTEpLGM9aSg3MjE1KSx1PWkoNzc2MCksZj1pKDk3MTYpLGQ9bShpKDczOTIpKSxwPW0oaSgzOTc2KSksaD1tKGkoODc0MSkpO2Z1bmN0aW9uIHYoZSl7cmV0dXJuIHY9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0sdihlKX1mdW5jdGlvbiBtKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgZz1yLmRlZmF1bHQuZG9jdW1lbnQsaz1cIl9pbnB1dG1hc2tfb3B0c1wiO2Z1bmN0aW9uIHkoZSx0LGkpe2lmKGguZGVmYXVsdCl7aWYoISh0aGlzIGluc3RhbmNlb2YgeSkpcmV0dXJuIG5ldyB5KGUsdCxpKTt0aGlzLmRlcGVuZGVuY3lMaWI9bi5kZWZhdWx0LHRoaXMuZWw9dm9pZCAwLHRoaXMuZXZlbnRzPXt9LHRoaXMubWFza3NldD12b2lkIDAsITAhPT1pJiYoXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKT90PWU6KHQ9dHx8e30sZSYmKHQuYWxpYXM9ZSkpLHRoaXMub3B0cz1uLmRlZmF1bHQuZXh0ZW5kKCEwLHt9LHRoaXMuZGVmYXVsdHMsdCksdGhpcy5ub01hc2tzQ2FjaGU9dCYmdm9pZCAwIT09dC5kZWZpbml0aW9ucyx0aGlzLnVzZXJPcHRpb25zPXR8fHt9LGIodGhpcy5vcHRzLmFsaWFzLHQsdGhpcy5vcHRzKSksdGhpcy5yZWZyZXNoVmFsdWU9ITEsdGhpcy51bmRvVmFsdWU9dm9pZCAwLHRoaXMuJGVsPXZvaWQgMCx0aGlzLnNraXBJbnB1dEV2ZW50PSExLHRoaXMudmFsaWRhdGlvbkV2ZW50PSExLHRoaXMuaWdub3JhYmxlPSExLHRoaXMubWF4TGVuZ3RoLHRoaXMubW91c2VFbnRlcj0hMSx0aGlzLmNsaWNrZWQ9MCx0aGlzLm9yaWdpbmFsUGxhY2Vob2xkZXI9dm9pZCAwLHRoaXMuaXNDb21wb3Npbmc9ITF9fWZ1bmN0aW9uIGIoZSx0LGkpe3ZhciBhPXkucHJvdG90eXBlLmFsaWFzZXNbZV07cmV0dXJuIGE/KGEuYWxpYXMmJmIoYS5hbGlhcyx2b2lkIDAsaSksbi5kZWZhdWx0LmV4dGVuZCghMCxpLGEpLG4uZGVmYXVsdC5leHRlbmQoITAsaSx0KSwhMCk6KG51bGw9PT1pLm1hc2smJihpLm1hc2s9ZSksITEpfXkucHJvdG90eXBlPXtkYXRhQXR0cmlidXRlOlwiZGF0YS1pbnB1dG1hc2tcIixkZWZhdWx0czpwLmRlZmF1bHQsZGVmaW5pdGlvbnM6ZC5kZWZhdWx0LGFsaWFzZXM6e30sbWFza3NDYWNoZTp7fSxnZXQgaXNSVEwoKXtyZXR1cm4gdGhpcy5vcHRzLmlzUlRMfHx0aGlzLm9wdHMubnVtZXJpY0lucHV0fSxtYXNrOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPWcuZ2V0RWxlbWVudEJ5SWQoZSl8fGcucXVlcnlTZWxlY3RvckFsbChlKSksKGU9ZS5ub2RlTmFtZT9bZV06QXJyYXkuaXNBcnJheShlKT9lOltdLnNsaWNlLmNhbGwoZSkpLmZvckVhY2goKGZ1bmN0aW9uKGUsaSl7dmFyIHM9bi5kZWZhdWx0LmV4dGVuZCghMCx7fSx0Lm9wdHMpO2lmKGZ1bmN0aW9uKGUsdCxpLGEpe2Z1bmN0aW9uIG8odCxuKXt2YXIgbz1cIlwiPT09YT90OmErXCItXCIrdDtudWxsIT09KG49dm9pZCAwIT09bj9uOmUuZ2V0QXR0cmlidXRlKG8pKSYmKFwic3RyaW5nXCI9PXR5cGVvZiBuJiYoMD09PXQuaW5kZXhPZihcIm9uXCIpP249ci5kZWZhdWx0W25dOlwiZmFsc2VcIj09PW4/bj0hMTpcInRydWVcIj09PW4mJihuPSEwKSksaVt0XT1uKX1pZighMD09PXQuaW1wb3J0RGF0YUF0dHJpYnV0ZXMpe3ZhciBzLGwsYyx1LGY9ZS5nZXRBdHRyaWJ1dGUoYSk7aWYoZiYmXCJcIiE9PWYmJihmPWYucmVwbGFjZSgvJy9nLCdcIicpLGw9SlNPTi5wYXJzZShcIntcIitmK1wifVwiKSksbClmb3IodSBpbiBjPXZvaWQgMCxsKWlmKFwiYWxpYXNcIj09PXUudG9Mb3dlckNhc2UoKSl7Yz1sW3VdO2JyZWFrfWZvcihzIGluIG8oXCJhbGlhc1wiLGMpLGkuYWxpYXMmJmIoaS5hbGlhcyxpLHQpLHQpe2lmKGwpZm9yKHUgaW4gYz12b2lkIDAsbClpZih1LnRvTG93ZXJDYXNlKCk9PT1zLnRvTG93ZXJDYXNlKCkpe2M9bFt1XTticmVha31vKHMsYyl9fW4uZGVmYXVsdC5leHRlbmQoITAsdCxpKSwoXCJydGxcIj09PWUuZGlyfHx0LnJpZ2h0QWxpZ24pJiYoZS5zdHlsZS50ZXh0QWxpZ249XCJyaWdodFwiKTsoXCJydGxcIj09PWUuZGlyfHx0Lm51bWVyaWNJbnB1dCkmJihlLmRpcj1cImx0clwiLGUucmVtb3ZlQXR0cmlidXRlKFwiZGlyXCIpLHQuaXNSVEw9ITApO3JldHVybiBPYmplY3Qua2V5cyhpKS5sZW5ndGh9KGUscyxuLmRlZmF1bHQuZXh0ZW5kKCEwLHt9LHQudXNlck9wdGlvbnMpLHQuZGF0YUF0dHJpYnV0ZSkpe3ZhciBsPSgwLG8uZ2VuZXJhdGVNYXNrU2V0KShzLHQubm9NYXNrc0NhY2hlKTt2b2lkIDAhPT1sJiYodm9pZCAwIT09ZS5pbnB1dG1hc2smJihlLmlucHV0bWFzay5vcHRzLmF1dG9Vbm1hc2s9ITAsZS5pbnB1dG1hc2sucmVtb3ZlKCkpLGUuaW5wdXRtYXNrPW5ldyB5KHZvaWQgMCx2b2lkIDAsITApLGUuaW5wdXRtYXNrLm9wdHM9cyxlLmlucHV0bWFzay5ub01hc2tzQ2FjaGU9dC5ub01hc2tzQ2FjaGUsZS5pbnB1dG1hc2sudXNlck9wdGlvbnM9bi5kZWZhdWx0LmV4dGVuZCghMCx7fSx0LnVzZXJPcHRpb25zKSxlLmlucHV0bWFzay5lbD1lLGUuaW5wdXRtYXNrLiRlbD0oMCxuLmRlZmF1bHQpKGUpLGUuaW5wdXRtYXNrLm1hc2tzZXQ9bCxuLmRlZmF1bHQuZGF0YShlLGssdC51c2VyT3B0aW9ucyksYS5tYXNrLmNhbGwoZS5pbnB1dG1hc2spKX19KSksZSYmZVswXSYmZVswXS5pbnB1dG1hc2t8fHRoaXN9LG9wdGlvbjpmdW5jdGlvbihlLHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP3RoaXMub3B0c1tlXTpcIm9iamVjdFwiPT09dihlKT8obi5kZWZhdWx0LmV4dGVuZCh0aGlzLnVzZXJPcHRpb25zLGUpLHRoaXMuZWwmJiEwIT09dCYmdGhpcy5tYXNrKHRoaXMuZWwpLHRoaXMpOnZvaWQgMH0sdW5tYXNrZWR2YWx1ZTpmdW5jdGlvbihlKXtpZih0aGlzLm1hc2tzZXQ9dGhpcy5tYXNrc2V0fHwoMCxvLmdlbmVyYXRlTWFza1NldCkodGhpcy5vcHRzLHRoaXMubm9NYXNrc0NhY2hlKSx2b2lkIDA9PT10aGlzLmVsfHx2b2lkIDAhPT1lKXt2YXIgdD0oXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5vcHRzLm9uQmVmb3JlTWFzayYmdGhpcy5vcHRzLm9uQmVmb3JlTWFzay5jYWxsKHRoaXMsZSx0aGlzLm9wdHMpfHxlKS5zcGxpdChcIlwiKTt1LmNoZWNrVmFsLmNhbGwodGhpcyx2b2lkIDAsITEsITEsdCksXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5vcHRzLm9uQmVmb3JlV3JpdGUmJnRoaXMub3B0cy5vbkJlZm9yZVdyaXRlLmNhbGwodGhpcyx2b2lkIDAsbC5nZXRCdWZmZXIuY2FsbCh0aGlzKSwwLHRoaXMub3B0cyl9cmV0dXJuIHUudW5tYXNrZWR2YWx1ZS5jYWxsKHRoaXMsdGhpcy5lbCl9LHJlbW92ZTpmdW5jdGlvbigpe2lmKHRoaXMuZWwpe24uZGVmYXVsdC5kYXRhKHRoaXMuZWwsayxudWxsKTt2YXIgZT10aGlzLm9wdHMuYXV0b1VubWFzaz8oMCx1LnVubWFza2VkdmFsdWUpKHRoaXMuZWwpOnRoaXMuX3ZhbHVlR2V0KHRoaXMub3B0cy5hdXRvVW5tYXNrKTtlIT09bC5nZXRCdWZmZXJUZW1wbGF0ZS5jYWxsKHRoaXMpLmpvaW4oXCJcIik/dGhpcy5fdmFsdWVTZXQoZSx0aGlzLm9wdHMuYXV0b1VubWFzayk6dGhpcy5fdmFsdWVTZXQoXCJcIiksZi5FdmVudFJ1bGVyLm9mZih0aGlzLmVsKSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJiZPYmplY3QuZ2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcy5lbCksXCJ2YWx1ZVwiKSYmdGhpcy5fX3ZhbHVlR2V0JiZPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5lbCxcInZhbHVlXCIse2dldDp0aGlzLl9fdmFsdWVHZXQsc2V0OnRoaXMuX192YWx1ZVNldCxjb25maWd1cmFibGU6ITB9KTpnLl9fbG9va3VwR2V0dGVyX18mJnRoaXMuZWwuX19sb29rdXBHZXR0ZXJfXyhcInZhbHVlXCIpJiZ0aGlzLl9fdmFsdWVHZXQmJih0aGlzLmVsLl9fZGVmaW5lR2V0dGVyX18oXCJ2YWx1ZVwiLHRoaXMuX192YWx1ZUdldCksdGhpcy5lbC5fX2RlZmluZVNldHRlcl9fKFwidmFsdWVcIix0aGlzLl9fdmFsdWVTZXQpKSx0aGlzLmVsLmlucHV0bWFzaz12b2lkIDB9cmV0dXJuIHRoaXMuZWx9LGdldGVtcHR5bWFzazpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hc2tzZXQ9dGhpcy5tYXNrc2V0fHwoMCxvLmdlbmVyYXRlTWFza1NldCkodGhpcy5vcHRzLHRoaXMubm9NYXNrc0NhY2hlKSwodGhpcy5pc1JUTD9sLmdldEJ1ZmZlclRlbXBsYXRlLmNhbGwodGhpcykucmV2ZXJzZSgpOmwuZ2V0QnVmZmVyVGVtcGxhdGUuY2FsbCh0aGlzKSkuam9pbihcIlwiKX0saGFzTWFza2VkVmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5vcHRzLmF1dG9Vbm1hc2t9LGlzQ29tcGxldGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXNrc2V0PXRoaXMubWFza3NldHx8KDAsby5nZW5lcmF0ZU1hc2tTZXQpKHRoaXMub3B0cyx0aGlzLm5vTWFza3NDYWNoZSksYy5pc0NvbXBsZXRlLmNhbGwodGhpcyxsLmdldEJ1ZmZlci5jYWxsKHRoaXMpKX0sZ2V0bWV0YWRhdGE6ZnVuY3Rpb24oKXtpZih0aGlzLm1hc2tzZXQ9dGhpcy5tYXNrc2V0fHwoMCxvLmdlbmVyYXRlTWFza1NldCkodGhpcy5vcHRzLHRoaXMubm9NYXNrc0NhY2hlKSxBcnJheS5pc0FycmF5KHRoaXMubWFza3NldC5tZXRhZGF0YSkpe3ZhciBlPXMuZ2V0TWFza1RlbXBsYXRlLmNhbGwodGhpcywhMCwwLCExKS5qb2luKFwiXCIpO3JldHVybiB0aGlzLm1hc2tzZXQubWV0YWRhdGEuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIHQubWFzayE9PWV8fChlPXQsITEpfSkpLGV9cmV0dXJuIHRoaXMubWFza3NldC5tZXRhZGF0YX0saXNWYWxpZDpmdW5jdGlvbihlKXtpZih0aGlzLm1hc2tzZXQ9dGhpcy5tYXNrc2V0fHwoMCxvLmdlbmVyYXRlTWFza1NldCkodGhpcy5vcHRzLHRoaXMubm9NYXNrc0NhY2hlKSxlKXt2YXIgdD0oXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5vcHRzLm9uQmVmb3JlTWFzayYmdGhpcy5vcHRzLm9uQmVmb3JlTWFzay5jYWxsKHRoaXMsZSx0aGlzLm9wdHMpfHxlKS5zcGxpdChcIlwiKTt1LmNoZWNrVmFsLmNhbGwodGhpcyx2b2lkIDAsITAsITEsdCl9ZWxzZSBlPXRoaXMuaXNSVEw/bC5nZXRCdWZmZXIuY2FsbCh0aGlzKS5zbGljZSgpLnJldmVyc2UoKS5qb2luKFwiXCIpOmwuZ2V0QnVmZmVyLmNhbGwodGhpcykuam9pbihcIlwiKTtmb3IodmFyIGk9bC5nZXRCdWZmZXIuY2FsbCh0aGlzKSxhPWwuZGV0ZXJtaW5lTGFzdFJlcXVpcmVkUG9zaXRpb24uY2FsbCh0aGlzKSxuPWkubGVuZ3RoLTE7bj5hJiYhbC5pc01hc2suY2FsbCh0aGlzLG4pO24tLSk7cmV0dXJuIGkuc3BsaWNlKGEsbisxLWEpLGMuaXNDb21wbGV0ZS5jYWxsKHRoaXMsaSkmJmU9PT0odGhpcy5pc1JUTD9sLmdldEJ1ZmZlci5jYWxsKHRoaXMpLnNsaWNlKCkucmV2ZXJzZSgpLmpvaW4oXCJcIik6bC5nZXRCdWZmZXIuY2FsbCh0aGlzKS5qb2luKFwiXCIpKX0sZm9ybWF0OmZ1bmN0aW9uKGUsdCl7dGhpcy5tYXNrc2V0PXRoaXMubWFza3NldHx8KDAsby5nZW5lcmF0ZU1hc2tTZXQpKHRoaXMub3B0cyx0aGlzLm5vTWFza3NDYWNoZSk7dmFyIGk9KFwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMub3B0cy5vbkJlZm9yZU1hc2smJnRoaXMub3B0cy5vbkJlZm9yZU1hc2suY2FsbCh0aGlzLGUsdGhpcy5vcHRzKXx8ZSkuc3BsaXQoXCJcIik7dS5jaGVja1ZhbC5jYWxsKHRoaXMsdm9pZCAwLCEwLCExLGkpO3ZhciBhPXRoaXMuaXNSVEw/bC5nZXRCdWZmZXIuY2FsbCh0aGlzKS5zbGljZSgpLnJldmVyc2UoKS5qb2luKFwiXCIpOmwuZ2V0QnVmZmVyLmNhbGwodGhpcykuam9pbihcIlwiKTtyZXR1cm4gdD97dmFsdWU6YSxtZXRhZGF0YTp0aGlzLmdldG1ldGFkYXRhKCl9OmF9LHNldFZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuZWwmJigwLG4uZGVmYXVsdCkodGhpcy5lbCkudHJpZ2dlcihcInNldHZhbHVlXCIsW2VdKX0sYW5hbHlzZU1hc2s6by5hbmFseXNlTWFza30seS5leHRlbmREZWZhdWx0cz1mdW5jdGlvbihlKXtuLmRlZmF1bHQuZXh0ZW5kKCEwLHkucHJvdG90eXBlLmRlZmF1bHRzLGUpfSx5LmV4dGVuZERlZmluaXRpb25zPWZ1bmN0aW9uKGUpe24uZGVmYXVsdC5leHRlbmQoITAseS5wcm90b3R5cGUuZGVmaW5pdGlvbnMsZSl9LHkuZXh0ZW5kQWxpYXNlcz1mdW5jdGlvbihlKXtuLmRlZmF1bHQuZXh0ZW5kKCEwLHkucHJvdG90eXBlLmFsaWFzZXMsZSl9LHkuZm9ybWF0PWZ1bmN0aW9uKGUsdCxpKXtyZXR1cm4geSh0KS5mb3JtYXQoZSxpKX0seS51bm1hc2s9ZnVuY3Rpb24oZSx0KXtyZXR1cm4geSh0KS51bm1hc2tlZHZhbHVlKGUpfSx5LmlzVmFsaWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4geSh0KS5pc1ZhbGlkKGUpfSx5LnJlbW92ZT1mdW5jdGlvbihlKXtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9Zy5nZXRFbGVtZW50QnlJZChlKXx8Zy5xdWVyeVNlbGVjdG9yQWxsKGUpKSwoZT1lLm5vZGVOYW1lP1tlXTplKS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLmlucHV0bWFzayYmZS5pbnB1dG1hc2sucmVtb3ZlKCl9KSl9LHkuc2V0VmFsdWU9ZnVuY3Rpb24oZSx0KXtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9Zy5nZXRFbGVtZW50QnlJZChlKXx8Zy5xdWVyeVNlbGVjdG9yQWxsKGUpKSwoZT1lLm5vZGVOYW1lP1tlXTplKS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLmlucHV0bWFzaz9lLmlucHV0bWFzay5zZXRWYWx1ZSh0KTooMCxuLmRlZmF1bHQpKGUpLnRyaWdnZXIoXCJzZXR2YWx1ZVwiLFt0XSl9KSl9LHkuZGVwZW5kZW5jeUxpYj1uLmRlZmF1bHQsci5kZWZhdWx0LklucHV0bWFzaz15O3ZhciB4PXk7dC5kZWZhdWx0PXh9LDUyOTY6ZnVuY3Rpb24oZSx0LGkpe2Z1bmN0aW9uIGEoZSl7cmV0dXJuIGE9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0sYShlKX12YXIgbj1oKGkoOTM4MCkpLHI9aChpKDIzOTQpKSxvPWgoaSg4NzQxKSk7ZnVuY3Rpb24gcyhlLHQpe2Zvcih2YXIgaT0wO2k8dC5sZW5ndGg7aSsrKXt2YXIgbj10W2ldO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwocj1uLmtleSxvPXZvaWQgMCxvPWZ1bmN0aW9uKGUsdCl7aWYoXCJvYmplY3RcIiE9PWEoZSl8fG51bGw9PT1lKXJldHVybiBlO3ZhciBpPWVbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1pKXt2YXIgbj1pLmNhbGwoZSx0fHxcImRlZmF1bHRcIik7aWYoXCJvYmplY3RcIiE9PWEobikpcmV0dXJuIG47dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybihcInN0cmluZ1wiPT09dD9TdHJpbmc6TnVtYmVyKShlKX0ocixcInN0cmluZ1wiKSxcInN5bWJvbFwiPT09YShvKT9vOlN0cmluZyhvKSksbil9dmFyIHIsb31mdW5jdGlvbiBsKGUsdCl7aWYodCYmKFwib2JqZWN0XCI9PT1hKHQpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0KSlyZXR1cm4gdDtpZih2b2lkIDAhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIGV9KGUpfWZ1bmN0aW9uIGMoZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgTWFwP25ldyBNYXA6dm9pZCAwO3JldHVybiBjPWZ1bmN0aW9uKGUpe2lmKG51bGw9PT1lfHwoaT1lLC0xPT09RnVuY3Rpb24udG9TdHJpbmcuY2FsbChpKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSkpcmV0dXJuIGU7dmFyIGk7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7aWYodm9pZCAwIT09dCl7aWYodC5oYXMoZSkpcmV0dXJuIHQuZ2V0KGUpO3Quc2V0KGUsYSl9ZnVuY3Rpb24gYSgpe3JldHVybiB1KGUsYXJndW1lbnRzLHAodGhpcykuY29uc3RydWN0b3IpfXJldHVybiBhLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6YSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxkKGEsZSl9LGMoZSl9ZnVuY3Rpb24gdShlLHQsaSl7cmV0dXJuIHU9ZigpP1JlZmxlY3QuY29uc3RydWN0LmJpbmQoKTpmdW5jdGlvbihlLHQsaSl7dmFyIGE9W251bGxdO2EucHVzaC5hcHBseShhLHQpO3ZhciBuPW5ldyhGdW5jdGlvbi5iaW5kLmFwcGx5KGUsYSkpO3JldHVybiBpJiZkKG4saS5wcm90b3R5cGUpLG59LHUuYXBwbHkobnVsbCxhcmd1bWVudHMpfWZ1bmN0aW9uIGYoKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX1mdW5jdGlvbiBkKGUsdCl7cmV0dXJuIGQ9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5fX3Byb3RvX189dCxlfSxkKGUsdCl9ZnVuY3Rpb24gcChlKXtyZXR1cm4gcD1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbihlKXtyZXR1cm4gZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKX0scChlKX1mdW5jdGlvbiBoKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgdj1uLmRlZmF1bHQuZG9jdW1lbnQ7aWYoby5kZWZhdWx0JiZ2JiZ2LmhlYWQmJnYuaGVhZC5hdHRhY2hTaGFkb3cmJm4uZGVmYXVsdC5jdXN0b21FbGVtZW50cyYmdm9pZCAwPT09bi5kZWZhdWx0LmN1c3RvbUVsZW1lbnRzLmdldChcImlucHV0LW1hc2tcIikpe3ZhciBtPWZ1bmN0aW9uKGUpeyFmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0JiZkKGUsdCl9KHUsZSk7dmFyIHQsaSxhLG4sbyxjPSh0PXUsaT1mKCksZnVuY3Rpb24oKXt2YXIgZSxhPXAodCk7aWYoaSl7dmFyIG49cCh0aGlzKS5jb25zdHJ1Y3RvcjtlPVJlZmxlY3QuY29uc3RydWN0KGEsYXJndW1lbnRzLG4pfWVsc2UgZT1hLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gbCh0aGlzLGUpfSk7ZnVuY3Rpb24gdSgpe3ZhciBlOyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdSk7dmFyIHQ9KGU9Yy5jYWxsKHRoaXMpKS5nZXRBdHRyaWJ1dGVOYW1lcygpLGk9ZS5hdHRhY2hTaGFkb3coe21vZGU6XCJjbG9zZWRcIn0pLGE9di5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7Zm9yKHZhciBuIGluIGEudHlwZT1cInRleHRcIixpLmFwcGVuZENoaWxkKGEpLHQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbikmJmEuc2V0QXR0cmlidXRlKHRbbl0sZS5nZXRBdHRyaWJ1dGUodFtuXSkpO3ZhciBvPW5ldyByLmRlZmF1bHQ7cmV0dXJuIG8uZGF0YUF0dHJpYnV0ZT1cIlwiLG8ubWFzayhhKSxhLmlucHV0bWFzay5zaGFkb3dSb290PWksZX1yZXR1cm4gYT11LG4mJnMoYS5wcm90b3R5cGUsbiksbyYmcyhhLG8pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksYX0oYyhIVE1MRWxlbWVudCkpO24uZGVmYXVsdC5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJpbnB1dC1tYXNrXCIsbSl9fSwyODM5OmZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gaShlLHQpe3JldHVybiBmdW5jdGlvbihlKXtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlfShlKXx8ZnVuY3Rpb24oZSx0KXt2YXIgaT1udWxsPT1lP251bGw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZihudWxsIT1pKXt2YXIgYSxuLHIsbyxzPVtdLGw9ITAsYz0hMTt0cnl7aWYocj0oaT1pLmNhbGwoZSkpLm5leHQsMD09PXQpe2lmKE9iamVjdChpKSE9PWkpcmV0dXJuO2w9ITF9ZWxzZSBmb3IoOyEobD0oYT1yLmNhbGwoaSkpLmRvbmUpJiYocy5wdXNoKGEudmFsdWUpLHMubGVuZ3RoIT09dCk7bD0hMCk7fWNhdGNoKGUpe2M9ITAsbj1lfWZpbmFsbHl7dHJ5e2lmKCFsJiZudWxsIT1pLnJldHVybiYmKG89aS5yZXR1cm4oKSxPYmplY3QobykhPT1vKSlyZXR1cm59ZmluYWxseXtpZihjKXRocm93IG59fXJldHVybiBzfX0oZSx0KXx8ZnVuY3Rpb24oZSx0KXtpZighZSlyZXR1cm47aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIGEoZSx0KTt2YXIgaT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7XCJPYmplY3RcIj09PWkmJmUuY29uc3RydWN0b3ImJihpPWUuY29uc3RydWN0b3IubmFtZSk7aWYoXCJNYXBcIj09PWl8fFwiU2V0XCI9PT1pKXJldHVybiBBcnJheS5mcm9tKGUpO2lmKFwiQXJndW1lbnRzXCI9PT1pfHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChpKSlyZXR1cm4gYShlLHQpfShlLHQpfHxmdW5jdGlvbigpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9KCl9ZnVuY3Rpb24gYShlLHQpeyhudWxsPT10fHx0PmUubGVuZ3RoKSYmKHQ9ZS5sZW5ndGgpO2Zvcih2YXIgaT0wLGE9bmV3IEFycmF5KHQpO2k8dDtpKyspYVtpXT1lW2ldO3JldHVybiBhfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQua2V5cz10LmtleUNvZGU9dm9pZCAwLHQudG9LZXk9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcltlXXx8KHQ/U3RyaW5nLmZyb21DaGFyQ29kZShlKTpTdHJpbmcuZnJvbUNoYXJDb2RlKGUpLnRvTG93ZXJDYXNlKCkpfSx0LnRvS2V5Q29kZT1mdW5jdGlvbihlKXtyZXR1cm4gbltlXX07dmFyIG49e0FsdEdyYXBoOjE4LEFycm93RG93bjo0MCxBcnJvd0xlZnQ6MzcsQXJyb3dSaWdodDozOSxBcnJvd1VwOjM4LEJhY2tzcGFjZTo4LEJBQ0tTUEFDRV9TQUZBUkk6MTI3LENhcHNMb2NrOjIwLERlbGV0ZTo0NixFbmQ6MzUsRW50ZXI6MTMsRXNjYXBlOjI3LEhvbWU6MzYsSW5zZXJ0OjQ1LFBhZ2VEb3duOjM0LFBhZ2VVcDozMyxTcGFjZTozMixUYWI6OSxjOjY3LHg6ODgsejo5MCxTaGlmdDoxNixDb250cm9sOjE3LEFsdDoxOCxQYXVzZToxOSxNZXRhX0xFRlQ6OTEsTWV0YV9SSUdIVDo5MixDb250ZXh0TWVudTo5MyxQcm9jZXNzOjIyOSxVbmlkZW50aWZpZWQ6MjI5LEYxOjExMixGMjoxMTMsRjM6MTE0LEY0OjExNSxGNToxMTYsRjY6MTE3LEY3OjExOCxGODoxMTksRjk6MTIwLEYxMDoxMjEsRjExOjEyMixGMTI6MTIzfTt0LmtleUNvZGU9bjt2YXIgcj1PYmplY3QuZW50cmllcyhuKS5yZWR1Y2UoKGZ1bmN0aW9uKGUsdCl7dmFyIGE9aSh0LDIpLG49YVswXSxyPWFbMV07cmV0dXJuIGVbcl09dm9pZCAwPT09ZVtyXT9uOmVbcl0sZX0pLHt9KSxvPU9iamVjdC5lbnRyaWVzKG4pLnJlZHVjZSgoZnVuY3Rpb24oZSx0KXt2YXIgYT1pKHQsMiksbj1hWzBdO2FbMV07cmV0dXJuIGVbbl09XCJTcGFjZVwiPT09bj9cIiBcIjpuLGV9KSx7fSk7dC5rZXlzPW99LDIzOTE6ZnVuY3Rpb24oZSx0LGkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuYW5hbHlzZU1hc2s9ZnVuY3Rpb24oZSx0LGkpe3ZhciBhLG8scyxsLGMsdSxmPS8oPzpbPyorXXxcXHtbMC05KypdKyg/OixbMC05KypdKik/KD86XFx8WzAtOSsqXSopP1xcfSl8W14uPyorXiR7W10oKXxcXFxcXSt8Li9nLGQ9L1xcW1xcXj9dPyg/OlteXFxcXFxcXV0rfFxcXFxbXFxTXFxzXT8pKl0/fFxcXFwoPzowKD86WzAtM11bMC03XXswLDJ9fFs0LTddWzAtN10/KT98WzEtOV1bMC05XSp8eFswLTlBLUZhLWZdezJ9fHVbMC05QS1GYS1mXXs0fXxjW0EtWmEtel18W1xcU1xcc10/KXxcXCgoPzpcXD9bOj0hXT8pP3woPzpbPyorXXxcXHtbMC05XSsoPzosWzAtOV0qKT9cXH0pXFw/P3xbXi4/KiteJHtbKCl8XFxcXF0rfC4vZyxwPSExLGg9bmV3IG4uZGVmYXVsdCx2PVtdLG09W10sZz0hMTtmdW5jdGlvbiBrKGUsYSxuKXtuPXZvaWQgMCE9PW4/bjplLm1hdGNoZXMubGVuZ3RoO3ZhciBvPWUubWF0Y2hlc1tuLTFdO2lmKHQpe2lmKDA9PT1hLmluZGV4T2YoXCJbXCIpfHxwJiYvXFxcXGR8XFxcXHN8XFxcXHd8XFxcXHAvaS50ZXN0KGEpfHxcIi5cIj09PWEpe3ZhciBzPWkuY2FzaW5nP1wiaVwiOlwiXCI7L15cXFxccFxcey4qfSQvaS50ZXN0KGEpJiYocys9XCJ1XCIpLGUubWF0Y2hlcy5zcGxpY2UobisrLDAse2ZuOm5ldyBSZWdFeHAoYSxzKSxzdGF0aWM6ITEsb3B0aW9uYWxpdHk6ITEsbmV3QmxvY2tNYXJrZXI6dm9pZCAwPT09bz9cIm1hc3RlclwiOm8uZGVmIT09YSxjYXNpbmc6bnVsbCxkZWY6YSxwbGFjZWhvbGRlcjp2b2lkIDAsbmF0aXZlRGVmOmF9KX1lbHNlIHAmJihhPWFbYS5sZW5ndGgtMV0pLGEuc3BsaXQoXCJcIikuZm9yRWFjaCgoZnVuY3Rpb24odCxhKXtvPWUubWF0Y2hlc1tuLTFdLGUubWF0Y2hlcy5zcGxpY2UobisrLDAse2ZuOi9bYS16XS9pLnRlc3QoaS5zdGF0aWNEZWZpbml0aW9uU3ltYm9sfHx0KT9uZXcgUmVnRXhwKFwiW1wiKyhpLnN0YXRpY0RlZmluaXRpb25TeW1ib2x8fHQpK1wiXVwiLGkuY2FzaW5nP1wiaVwiOlwiXCIpOm51bGwsc3RhdGljOiEwLG9wdGlvbmFsaXR5OiExLG5ld0Jsb2NrTWFya2VyOnZvaWQgMD09PW8/XCJtYXN0ZXJcIjpvLmRlZiE9PXQmJiEwIT09by5zdGF0aWMsY2FzaW5nOm51bGwsZGVmOmkuc3RhdGljRGVmaW5pdGlvblN5bWJvbHx8dCxwbGFjZWhvbGRlcjp2b2lkIDAhPT1pLnN0YXRpY0RlZmluaXRpb25TeW1ib2w/dDp2b2lkIDAsbmF0aXZlRGVmOihwP1wiJ1wiOlwiXCIpK3R9KX0pKTtwPSExfWVsc2V7dmFyIGw9aS5kZWZpbml0aW9ucyYmaS5kZWZpbml0aW9uc1thXXx8aS51c2VQcm90b3R5cGVEZWZpbml0aW9ucyYmci5kZWZhdWx0LnByb3RvdHlwZS5kZWZpbml0aW9uc1thXTtsJiYhcD9lLm1hdGNoZXMuc3BsaWNlKG4rKywwLHtmbjpsLnZhbGlkYXRvcj9cInN0cmluZ1wiPT10eXBlb2YgbC52YWxpZGF0b3I/bmV3IFJlZ0V4cChsLnZhbGlkYXRvcixpLmNhc2luZz9cImlcIjpcIlwiKTpuZXcgZnVuY3Rpb24oKXt0aGlzLnRlc3Q9bC52YWxpZGF0b3J9Om5ldyBSZWdFeHAoXCIuXCIpLHN0YXRpYzpsLnN0YXRpY3x8ITEsb3B0aW9uYWxpdHk6bC5vcHRpb25hbHx8ITEsZGVmT3B0aW9uYWxpdHk6bC5vcHRpb25hbHx8ITEsbmV3QmxvY2tNYXJrZXI6dm9pZCAwPT09b3x8bC5vcHRpb25hbD9cIm1hc3RlclwiOm8uZGVmIT09KGwuZGVmaW5pdGlvblN5bWJvbHx8YSksY2FzaW5nOmwuY2FzaW5nLGRlZjpsLmRlZmluaXRpb25TeW1ib2x8fGEscGxhY2Vob2xkZXI6bC5wbGFjZWhvbGRlcixuYXRpdmVEZWY6YSxnZW5lcmF0ZWQ6bC5nZW5lcmF0ZWR9KTooZS5tYXRjaGVzLnNwbGljZShuKyssMCx7Zm46L1thLXpdL2kudGVzdChpLnN0YXRpY0RlZmluaXRpb25TeW1ib2x8fGEpP25ldyBSZWdFeHAoXCJbXCIrKGkuc3RhdGljRGVmaW5pdGlvblN5bWJvbHx8YSkrXCJdXCIsaS5jYXNpbmc/XCJpXCI6XCJcIik6bnVsbCxzdGF0aWM6ITAsb3B0aW9uYWxpdHk6ITEsbmV3QmxvY2tNYXJrZXI6dm9pZCAwPT09bz9cIm1hc3RlclwiOm8uZGVmIT09YSYmITAhPT1vLnN0YXRpYyxjYXNpbmc6bnVsbCxkZWY6aS5zdGF0aWNEZWZpbml0aW9uU3ltYm9sfHxhLHBsYWNlaG9sZGVyOnZvaWQgMCE9PWkuc3RhdGljRGVmaW5pdGlvblN5bWJvbD9hOnZvaWQgMCxuYXRpdmVEZWY6KHA/XCInXCI6XCJcIikrYX0pLHA9ITEpfX1mdW5jdGlvbiB5KCl7aWYodi5sZW5ndGg+MCl7aWYoayhsPXZbdi5sZW5ndGgtMV0sbyksbC5pc0FsdGVybmF0b3Ipe2M9di5wb3AoKTtmb3IodmFyIGU9MDtlPGMubWF0Y2hlcy5sZW5ndGg7ZSsrKWMubWF0Y2hlc1tlXS5pc0dyb3VwJiYoYy5tYXRjaGVzW2VdLmlzR3JvdXA9ITEpO3YubGVuZ3RoPjA/KGw9dlt2Lmxlbmd0aC0xXSkubWF0Y2hlcy5wdXNoKGMpOmgubWF0Y2hlcy5wdXNoKGMpfX1lbHNlIGsoaCxvKX1mdW5jdGlvbiBiKGUpe3ZhciB0PW5ldyBuLmRlZmF1bHQoITApO3JldHVybiB0Lm9wZW5Hcm91cD0hMSx0Lm1hdGNoZXM9ZSx0fWZ1bmN0aW9uIHgoKXtpZigocz12LnBvcCgpKS5vcGVuR3JvdXA9ITEsdm9pZCAwIT09cylpZih2Lmxlbmd0aD4wKXtpZigobD12W3YubGVuZ3RoLTFdKS5tYXRjaGVzLnB1c2gocyksbC5pc0FsdGVybmF0b3Ipe2Zvcih2YXIgZT0oYz12LnBvcCgpKS5tYXRjaGVzWzBdLm1hdGNoZXM/Yy5tYXRjaGVzWzBdLm1hdGNoZXMubGVuZ3RoOjEsdD0wO3Q8Yy5tYXRjaGVzLmxlbmd0aDt0KyspYy5tYXRjaGVzW3RdLmlzR3JvdXA9ITEsYy5tYXRjaGVzW3RdLmFsdGVybmF0b3JHcm91cD0hMSxudWxsPT09aS5rZWVwU3RhdGljJiZlPChjLm1hdGNoZXNbdF0ubWF0Y2hlcz9jLm1hdGNoZXNbdF0ubWF0Y2hlcy5sZW5ndGg6MSkmJihpLmtlZXBTdGF0aWM9ITApLGU9Yy5tYXRjaGVzW3RdLm1hdGNoZXM/Yy5tYXRjaGVzW3RdLm1hdGNoZXMubGVuZ3RoOjE7di5sZW5ndGg+MD8obD12W3YubGVuZ3RoLTFdKS5tYXRjaGVzLnB1c2goYyk6aC5tYXRjaGVzLnB1c2goYyl9fWVsc2UgaC5tYXRjaGVzLnB1c2gocyk7ZWxzZSB5KCl9ZnVuY3Rpb24gUChlKXt2YXIgdD1lLnBvcCgpO3JldHVybiB0LmlzUXVhbnRpZmllciYmKHQ9YihbZS5wb3AoKSx0XSkpLHR9dCYmKGkub3B0aW9uYWxtYXJrZXJbMF09dm9pZCAwLGkub3B0aW9uYWxtYXJrZXJbMV09dm9pZCAwKTtmb3IoO2E9dD9kLmV4ZWMoZSk6Zi5leGVjKGUpOyl7aWYobz1hWzBdLHQpe3N3aXRjaChvLmNoYXJBdCgwKSl7Y2FzZVwiP1wiOm89XCJ7MCwxfVwiO2JyZWFrO2Nhc2VcIitcIjpjYXNlXCIqXCI6bz1cIntcIitvK1wifVwiO2JyZWFrO2Nhc2VcInxcIjppZigwPT09di5sZW5ndGgpe3ZhciB3PWIoaC5tYXRjaGVzKTt3Lm9wZW5Hcm91cD0hMCx2LnB1c2godyksaC5tYXRjaGVzPVtdLGc9ITB9fXN3aXRjaChvKXtjYXNlXCJcXFxcZFwiOm89XCJbMC05XVwiO2JyZWFrO2Nhc2VcIlxcXFxwXCI6bys9ZC5leGVjKGUpWzBdLG8rPWQuZXhlYyhlKVswXX19aWYocCl5KCk7ZWxzZSBzd2l0Y2goby5jaGFyQXQoMCkpe2Nhc2VcIiRcIjpjYXNlXCJeXCI6dHx8eSgpO2JyZWFrO2Nhc2UgaS5lc2NhcGVDaGFyOnA9ITAsdCYmeSgpO2JyZWFrO2Nhc2UgaS5vcHRpb25hbG1hcmtlclsxXTpjYXNlIGkuZ3JvdXBtYXJrZXJbMV06eCgpO2JyZWFrO2Nhc2UgaS5vcHRpb25hbG1hcmtlclswXTp2LnB1c2gobmV3IG4uZGVmYXVsdCghMSwhMCkpO2JyZWFrO2Nhc2UgaS5ncm91cG1hcmtlclswXTp2LnB1c2gobmV3IG4uZGVmYXVsdCghMCkpO2JyZWFrO2Nhc2UgaS5xdWFudGlmaWVybWFya2VyWzBdOnZhciBTPW5ldyBuLmRlZmF1bHQoITEsITEsITApLF89KG89by5yZXBsYWNlKC9be30/XS9nLFwiXCIpKS5zcGxpdChcInxcIiksTT1fWzBdLnNwbGl0KFwiLFwiKSxPPWlzTmFOKE1bMF0pP01bMF06cGFyc2VJbnQoTVswXSksRT0xPT09TS5sZW5ndGg/Tzppc05hTihNWzFdKT9NWzFdOnBhcnNlSW50KE1bMV0pLFQ9aXNOYU4oX1sxXSk/X1sxXTpwYXJzZUludChfWzFdKTtcIipcIiE9PU8mJlwiK1wiIT09T3x8KE89XCIqXCI9PT1FPzA6MSksUy5xdWFudGlmaWVyPXttaW46TyxtYXg6RSxqaXQ6VH07dmFyIGo9di5sZW5ndGg+MD92W3YubGVuZ3RoLTFdLm1hdGNoZXM6aC5tYXRjaGVzOyhhPWoucG9wKCkpLmlzR3JvdXB8fChhPWIoW2FdKSksai5wdXNoKGEpLGoucHVzaChTKTticmVhaztjYXNlIGkuYWx0ZXJuYXRvcm1hcmtlcjppZih2Lmxlbmd0aD4wKXt2YXIgRD0obD12W3YubGVuZ3RoLTFdKS5tYXRjaGVzW2wubWF0Y2hlcy5sZW5ndGgtMV07dT1sLm9wZW5Hcm91cCYmKHZvaWQgMD09PUQubWF0Y2hlc3x8ITE9PT1ELmlzR3JvdXAmJiExPT09RC5pc0FsdGVybmF0b3IpP3YucG9wKCk6UChsLm1hdGNoZXMpfWVsc2UgdT1QKGgubWF0Y2hlcyk7aWYodS5pc0FsdGVybmF0b3Ipdi5wdXNoKHUpO2Vsc2UgaWYodS5hbHRlcm5hdG9yR3JvdXA/KGM9di5wb3AoKSx1LmFsdGVybmF0b3JHcm91cD0hMSk6Yz1uZXcgbi5kZWZhdWx0KCExLCExLCExLCEwKSxjLm1hdGNoZXMucHVzaCh1KSx2LnB1c2goYyksdS5vcGVuR3JvdXApe3Uub3Blbkdyb3VwPSExO3ZhciBBPW5ldyBuLmRlZmF1bHQoITApO0EuYWx0ZXJuYXRvckdyb3VwPSEwLHYucHVzaChBKX1icmVhaztkZWZhdWx0OnkoKX19ZyYmeCgpO2Zvcig7di5sZW5ndGg+MDspcz12LnBvcCgpLGgubWF0Y2hlcy5wdXNoKHMpO2gubWF0Y2hlcy5sZW5ndGg+MCYmKCFmdW5jdGlvbiBlKGEpe2EmJmEubWF0Y2hlcyYmYS5tYXRjaGVzLmZvckVhY2goKGZ1bmN0aW9uKG4scil7dmFyIG89YS5tYXRjaGVzW3IrMV07KHZvaWQgMD09PW98fHZvaWQgMD09PW8ubWF0Y2hlc3x8ITE9PT1vLmlzUXVhbnRpZmllcikmJm4mJm4uaXNHcm91cCYmKG4uaXNHcm91cD0hMSx0fHwoayhuLGkuZ3JvdXBtYXJrZXJbMF0sMCksITAhPT1uLm9wZW5Hcm91cCYmayhuLGkuZ3JvdXBtYXJrZXJbMV0pKSksZShuKX0pKX0oaCksbS5wdXNoKGgpKTsoaS5udW1lcmljSW5wdXR8fGkuaXNSVEwpJiZmdW5jdGlvbiBlKHQpe2Zvcih2YXIgYSBpbiB0Lm1hdGNoZXM9dC5tYXRjaGVzLnJldmVyc2UoKSx0Lm1hdGNoZXMpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQubWF0Y2hlcyxhKSl7dmFyIG49cGFyc2VJbnQoYSk7aWYodC5tYXRjaGVzW2FdLmlzUXVhbnRpZmllciYmdC5tYXRjaGVzW24rMV0mJnQubWF0Y2hlc1tuKzFdLmlzR3JvdXApe3ZhciByPXQubWF0Y2hlc1thXTt0Lm1hdGNoZXMuc3BsaWNlKGEsMSksdC5tYXRjaGVzLnNwbGljZShuKzEsMCxyKX12b2lkIDAhPT10Lm1hdGNoZXNbYV0ubWF0Y2hlcz90Lm1hdGNoZXNbYV09ZSh0Lm1hdGNoZXNbYV0pOnQubWF0Y2hlc1thXT0oKG89dC5tYXRjaGVzW2FdKT09PWkub3B0aW9uYWxtYXJrZXJbMF0/bz1pLm9wdGlvbmFsbWFya2VyWzFdOm89PT1pLm9wdGlvbmFsbWFya2VyWzFdP289aS5vcHRpb25hbG1hcmtlclswXTpvPT09aS5ncm91cG1hcmtlclswXT9vPWkuZ3JvdXBtYXJrZXJbMV06bz09PWkuZ3JvdXBtYXJrZXJbMV0mJihvPWkuZ3JvdXBtYXJrZXJbMF0pLG8pfXZhciBvO3JldHVybiB0fShtWzBdKTtyZXR1cm4gbX0sdC5nZW5lcmF0ZU1hc2tTZXQ9ZnVuY3Rpb24oZSx0KXt2YXIgaTtmdW5jdGlvbiBuKGUsaSxuKXt2YXIgcyxsLGM9ITE7cmV0dXJuIG51bGwhPT1lJiZcIlwiIT09ZXx8KChjPW51bGwhPT1uLnJlZ2V4KT9lPShlPW4ucmVnZXgpLnJlcGxhY2UoL14oXFxeKSguKikoXFwkKSQvLFwiJDJcIik6KGM9ITAsZT1cIi4qXCIpKSwxPT09ZS5sZW5ndGgmJiExPT09bi5ncmVlZHkmJjAhPT1uLnJlcGVhdCYmKG4ucGxhY2Vob2xkZXI9XCJcIiksZT1mdW5jdGlvbihlLHQpe3ZhciBpPXQucmVwZWF0LGE9dC5ncm91cG1hcmtlcixuPXQucXVhbnRpZmllcm1hcmtlcixyPXQua2VlcFN0YXRpYztpZihpPjB8fFwiKlwiPT09aXx8XCIrXCI9PT1pKXt2YXIgcz1cIipcIj09PWk/MDpcIitcIj09PWk/MTppO2U9YVswXStlK2FbMV0rblswXStzK1wiLFwiK2krblsxXX1pZighMD09PXIpe3ZhciBsPWUubWF0Y2gobmV3IFJlZ0V4cChcIiguKVxcXFxbKFteXFxcXF1dKilcXFxcXVwiLFwiZ1wiKSk7bCYmbC5mb3JFYWNoKChmdW5jdGlvbih0LGkpe3ZhciBhPXQuc3BsaXQoXCJbXCIpLG49YVswXSxyPWFbMV0ucmVwbGFjZShcIl1cIixcIlwiKTtlPWUucmVwbGFjZShuZXcgUmVnRXhwKFwiXCIuY29uY2F0KCgwLG8uZGVmYXVsdCkobiksXCJcXFxcW1wiKS5jb25jYXQoKDAsby5kZWZhdWx0KShyKSxcIlxcXFxdXCIpKSxuLmNoYXJBdCgwKT09PXIuY2hhckF0KDApP1wiKFwiLmNvbmNhdChuLFwifFwiKS5jb25jYXQobikuY29uY2F0KHIsXCIpXCIpOlwiXCIuY29uY2F0KG4sXCJbXCIpLmNvbmNhdChyLFwiXVwiKSl9KSl9cmV0dXJuIGV9KGUsbiksbD1jP1wicmVnZXhfXCIrbi5yZWdleDpuLm51bWVyaWNJbnB1dD9lLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpOmUsbnVsbCE9PW4ua2VlcFN0YXRpYyYmKGw9XCJrc19cIituLmtlZXBTdGF0aWMrbCksdm9pZCAwPT09ci5kZWZhdWx0LnByb3RvdHlwZS5tYXNrc0NhY2hlW2xdfHwhMD09PXQ/KHM9e21hc2s6ZSxtYXNrVG9rZW46ci5kZWZhdWx0LnByb3RvdHlwZS5hbmFseXNlTWFzayhlLGMsbiksdmFsaWRQb3NpdGlvbnM6W10sX2J1ZmZlcjp2b2lkIDAsYnVmZmVyOnZvaWQgMCx0ZXN0czp7fSxleGNsdWRlczp7fSxtZXRhZGF0YTppLG1hc2tMZW5ndGg6dm9pZCAwLGppdE9mZnNldDp7fX0sITAhPT10JiYoci5kZWZhdWx0LnByb3RvdHlwZS5tYXNrc0NhY2hlW2xdPXMscz1hLmRlZmF1bHQuZXh0ZW5kKCEwLHt9LHIuZGVmYXVsdC5wcm90b3R5cGUubWFza3NDYWNoZVtsXSkpKTpzPWEuZGVmYXVsdC5leHRlbmQoITAse30sci5kZWZhdWx0LnByb3RvdHlwZS5tYXNrc0NhY2hlW2xdKSxzfVwiZnVuY3Rpb25cIj09dHlwZW9mIGUubWFzayYmKGUubWFzaz1lLm1hc2soZSkpO2lmKEFycmF5LmlzQXJyYXkoZS5tYXNrKSl7aWYoZS5tYXNrLmxlbmd0aD4xKXtudWxsPT09ZS5rZWVwU3RhdGljJiYoZS5rZWVwU3RhdGljPSEwKTt2YXIgcz1lLmdyb3VwbWFya2VyWzBdO3JldHVybihlLmlzUlRMP2UubWFzay5yZXZlcnNlKCk6ZS5tYXNrKS5mb3JFYWNoKChmdW5jdGlvbih0KXtzLmxlbmd0aD4xJiYocys9ZS5hbHRlcm5hdG9ybWFya2VyKSx2b2lkIDAhPT10Lm1hc2smJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQubWFzaz9zKz10Lm1hc2s6cys9dH0pKSxuKHMrPWUuZ3JvdXBtYXJrZXJbMV0sZS5tYXNrLGUpfWUubWFzaz1lLm1hc2sucG9wKCl9aT1lLm1hc2smJnZvaWQgMCE9PWUubWFzay5tYXNrJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlLm1hc2subWFzaz9uKGUubWFzay5tYXNrLGUubWFzayxlKTpuKGUubWFzayxlLm1hc2ssZSk7bnVsbD09PWUua2VlcFN0YXRpYyYmKGUua2VlcFN0YXRpYz0hMSk7cmV0dXJuIGl9O3ZhciBhPXMoaSg0OTYzKSksbj1zKGkoOTY5NSkpLHI9cyhpKDIzOTQpKSxvPXMoaSg3MTg0KSk7ZnVuY3Rpb24gcyhlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19fSwxNTc6ZnVuY3Rpb24oZSx0LGkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQubWFzaz1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLm9wdHMsaT10aGlzLmVsLHU9dGhpcy5kZXBlbmRlbmN5TGliO28uRXZlbnRSdWxlci5vZmYoaSk7dmFyIGY9ZnVuY3Rpb24odCxpKXtcInRleHRhcmVhXCIhPT10LnRhZ05hbWUudG9Mb3dlckNhc2UoKSYmaS5pZ25vcmFibGVzLnB1c2goYS5rZXlzLkVudGVyKTt2YXIgcz10LmdldEF0dHJpYnV0ZShcInR5cGVcIiksbD1cImlucHV0XCI9PT10LnRhZ05hbWUudG9Mb3dlckNhc2UoKSYmaS5zdXBwb3J0c0lucHV0VHlwZS5pbmNsdWRlcyhzKXx8dC5pc0NvbnRlbnRFZGl0YWJsZXx8XCJ0ZXh0YXJlYVwiPT09dC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7aWYoIWwpaWYoXCJpbnB1dFwiPT09dC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpe3ZhciBjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtjLnNldEF0dHJpYnV0ZShcInR5cGVcIixzKSxsPVwidGV4dFwiPT09Yy50eXBlLGM9bnVsbH1lbHNlIGw9XCJwYXJ0aWFsXCI7cmV0dXJuITEhPT1sP2Z1bmN0aW9uKHQpe3ZhciBhLHM7ZnVuY3Rpb24gbCgpe3JldHVybiB0aGlzLmlucHV0bWFzaz90aGlzLmlucHV0bWFzay5vcHRzLmF1dG9Vbm1hc2s/dGhpcy5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpOi0xIT09bi5nZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKGUpfHwhMCE9PWkubnVsbGFibGU/KHRoaXMuaW5wdXRtYXNrLnNoYWRvd1Jvb3R8fHRoaXMub3duZXJEb2N1bWVudCkuYWN0aXZlRWxlbWVudD09PXRoaXMmJmkuY2xlYXJNYXNrT25Mb3N0Rm9jdXM/KGUuaXNSVEw/ci5jbGVhck9wdGlvbmFsVGFpbC5jYWxsKGUsbi5nZXRCdWZmZXIuY2FsbChlKS5zbGljZSgpKS5yZXZlcnNlKCk6ci5jbGVhck9wdGlvbmFsVGFpbC5jYWxsKGUsbi5nZXRCdWZmZXIuY2FsbChlKS5zbGljZSgpKSkuam9pbihcIlwiKTphLmNhbGwodGhpcyk6XCJcIjphLmNhbGwodGhpcyl9ZnVuY3Rpb24gYyhlKXtzLmNhbGwodGhpcyxlKSx0aGlzLmlucHV0bWFzayYmKDAsci5hcHBseUlucHV0VmFsdWUpKHRoaXMsZSl9aWYoIXQuaW5wdXRtYXNrLl9fdmFsdWVHZXQpe2lmKCEwIT09aS5ub1ZhbHVlUGF0Y2hpbmcpe2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ipe3ZhciBmPU9iamVjdC5nZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSxcInZhbHVlXCIpOnZvaWQgMDtmJiZmLmdldCYmZi5zZXQ/KGE9Zi5nZXQscz1mLnNldCxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInZhbHVlXCIse2dldDpsLHNldDpjLGNvbmZpZ3VyYWJsZTohMH0pKTpcImlucHV0XCIhPT10LnRhZ05hbWUudG9Mb3dlckNhc2UoKSYmKGE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50ZXh0Q29udGVudH0scz1mdW5jdGlvbihlKXt0aGlzLnRleHRDb250ZW50PWV9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwidmFsdWVcIix7Z2V0Omwsc2V0OmMsY29uZmlndXJhYmxlOiEwfSkpfWVsc2UgZG9jdW1lbnQuX19sb29rdXBHZXR0ZXJfXyYmdC5fX2xvb2t1cEdldHRlcl9fKFwidmFsdWVcIikmJihhPXQuX19sb29rdXBHZXR0ZXJfXyhcInZhbHVlXCIpLHM9dC5fX2xvb2t1cFNldHRlcl9fKFwidmFsdWVcIiksdC5fX2RlZmluZUdldHRlcl9fKFwidmFsdWVcIixsKSx0Ll9fZGVmaW5lU2V0dGVyX18oXCJ2YWx1ZVwiLGMpKTt0LmlucHV0bWFzay5fX3ZhbHVlR2V0PWEsdC5pbnB1dG1hc2suX192YWx1ZVNldD1zfXQuaW5wdXRtYXNrLl92YWx1ZUdldD1mdW5jdGlvbih0KXtyZXR1cm4gZS5pc1JUTCYmITAhPT10P2EuY2FsbCh0aGlzLmVsKS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKTphLmNhbGwodGhpcy5lbCl9LHQuaW5wdXRtYXNrLl92YWx1ZVNldD1mdW5jdGlvbih0LGkpe3MuY2FsbCh0aGlzLmVsLG51bGw9PXQ/XCJcIjohMCE9PWkmJmUuaXNSVEw/dC5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKTp0KX0sdm9pZCAwPT09YSYmKGE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZX0scz1mdW5jdGlvbihlKXt0aGlzLnZhbHVlPWV9LGZ1bmN0aW9uKHQpe2lmKHUudmFsSG9va3MmJih2b2lkIDA9PT11LnZhbEhvb2tzW3RdfHwhMCE9PXUudmFsSG9va3NbdF0uaW5wdXRtYXNrcGF0Y2gpKXt2YXIgYT11LnZhbEhvb2tzW3RdJiZ1LnZhbEhvb2tzW3RdLmdldD91LnZhbEhvb2tzW3RdLmdldDpmdW5jdGlvbihlKXtyZXR1cm4gZS52YWx1ZX0sbz11LnZhbEhvb2tzW3RdJiZ1LnZhbEhvb2tzW3RdLnNldD91LnZhbEhvb2tzW3RdLnNldDpmdW5jdGlvbihlLHQpe3JldHVybiBlLnZhbHVlPXQsZX07dS52YWxIb29rc1t0XT17Z2V0OmZ1bmN0aW9uKHQpe2lmKHQuaW5wdXRtYXNrKXtpZih0LmlucHV0bWFzay5vcHRzLmF1dG9Vbm1hc2spcmV0dXJuIHQuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKTt2YXIgcj1hKHQpO3JldHVybi0xIT09bi5nZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKGUsdm9pZCAwLHZvaWQgMCx0LmlucHV0bWFzay5tYXNrc2V0LnZhbGlkUG9zaXRpb25zKXx8ITAhPT1pLm51bGxhYmxlP3I6XCJcIn1yZXR1cm4gYSh0KX0sc2V0OmZ1bmN0aW9uKGUsdCl7dmFyIGk9byhlLHQpO3JldHVybiBlLmlucHV0bWFzayYmKDAsci5hcHBseUlucHV0VmFsdWUpKGUsdCksaX0saW5wdXRtYXNrcGF0Y2g6ITB9fX0odC50eXBlKSxmdW5jdGlvbihlKXtvLkV2ZW50UnVsZXIub24oZSxcIm1vdXNlZW50ZXJcIiwoZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZS5pbnB1dG1hc2suX3ZhbHVlR2V0KCEwKTt0IT0oZS5pbnB1dG1hc2suaXNSVEw/bi5nZXRCdWZmZXIuY2FsbChlLmlucHV0bWFzaykuc2xpY2UoKS5yZXZlcnNlKCk6bi5nZXRCdWZmZXIuY2FsbChlLmlucHV0bWFzaykpLmpvaW4oXCJcIikmJigwLHIuYXBwbHlJbnB1dFZhbHVlKShlLHQpfSkpfSh0KSl9fSh0KTp0LmlucHV0bWFzaz12b2lkIDAsbH0oaSx0KTtpZighMSE9PWYpe2Uub3JpZ2luYWxQbGFjZWhvbGRlcj1pLnBsYWNlaG9sZGVyLGUubWF4TGVuZ3RoPXZvaWQgMCE9PWk/aS5tYXhMZW5ndGg6dm9pZCAwLC0xPT09ZS5tYXhMZW5ndGgmJihlLm1heExlbmd0aD12b2lkIDApLFwiaW5wdXRNb2RlXCJpbiBpJiZudWxsPT09aS5nZXRBdHRyaWJ1dGUoXCJpbnB1dG1vZGVcIikmJihpLmlucHV0TW9kZT10LmlucHV0bW9kZSxpLnNldEF0dHJpYnV0ZShcImlucHV0bW9kZVwiLHQuaW5wdXRtb2RlKSksITA9PT1mJiYodC5zaG93TWFza09uRm9jdXM9dC5zaG93TWFza09uRm9jdXMmJi0xPT09W1wiY2MtbnVtYmVyXCIsXCJjYy1leHBcIl0uaW5kZXhPZihpLmF1dG9jb21wbGV0ZSkscy5pcGhvbmUmJih0Lmluc2VydE1vZGVWaXN1YWw9ITEsaS5zZXRBdHRyaWJ1dGUoXCJhdXRvY29ycmVjdFwiLFwib2ZmXCIpKSxvLkV2ZW50UnVsZXIub24oaSxcInN1Ym1pdFwiLGMuRXZlbnRIYW5kbGVycy5zdWJtaXRFdmVudCksby5FdmVudFJ1bGVyLm9uKGksXCJyZXNldFwiLGMuRXZlbnRIYW5kbGVycy5yZXNldEV2ZW50KSxvLkV2ZW50UnVsZXIub24oaSxcImJsdXJcIixjLkV2ZW50SGFuZGxlcnMuYmx1ckV2ZW50KSxvLkV2ZW50UnVsZXIub24oaSxcImZvY3VzXCIsYy5FdmVudEhhbmRsZXJzLmZvY3VzRXZlbnQpLG8uRXZlbnRSdWxlci5vbihpLFwiaW52YWxpZFwiLGMuRXZlbnRIYW5kbGVycy5pbnZhbGlkRXZlbnQpLG8uRXZlbnRSdWxlci5vbihpLFwiY2xpY2tcIixjLkV2ZW50SGFuZGxlcnMuY2xpY2tFdmVudCksby5FdmVudFJ1bGVyLm9uKGksXCJtb3VzZWxlYXZlXCIsYy5FdmVudEhhbmRsZXJzLm1vdXNlbGVhdmVFdmVudCksby5FdmVudFJ1bGVyLm9uKGksXCJtb3VzZWVudGVyXCIsYy5FdmVudEhhbmRsZXJzLm1vdXNlZW50ZXJFdmVudCksby5FdmVudFJ1bGVyLm9uKGksXCJwYXN0ZVwiLGMuRXZlbnRIYW5kbGVycy5wYXN0ZUV2ZW50KSxvLkV2ZW50UnVsZXIub24oaSxcImN1dFwiLGMuRXZlbnRIYW5kbGVycy5jdXRFdmVudCksby5FdmVudFJ1bGVyLm9uKGksXCJjb21wbGV0ZVwiLHQub25jb21wbGV0ZSksby5FdmVudFJ1bGVyLm9uKGksXCJpbmNvbXBsZXRlXCIsdC5vbmluY29tcGxldGUpLG8uRXZlbnRSdWxlci5vbihpLFwiY2xlYXJlZFwiLHQub25jbGVhcmVkKSwhMCE9PXQuaW5wdXRFdmVudE9ubHkmJm8uRXZlbnRSdWxlci5vbihpLFwia2V5ZG93blwiLGMuRXZlbnRIYW5kbGVycy5rZXlFdmVudCksKHMubW9iaWxlfHx0LmlucHV0RXZlbnRPbmx5KSYmaS5yZW1vdmVBdHRyaWJ1dGUoXCJtYXhMZW5ndGhcIiksby5FdmVudFJ1bGVyLm9uKGksXCJpbnB1dFwiLGMuRXZlbnRIYW5kbGVycy5pbnB1dEZhbGxCYWNrRXZlbnQpKSxvLkV2ZW50UnVsZXIub24oaSxcInNldHZhbHVlXCIsYy5FdmVudEhhbmRsZXJzLnNldFZhbHVlRXZlbnQpLG4uZ2V0QnVmZmVyVGVtcGxhdGUuY2FsbChlKS5qb2luKFwiXCIpLGUudW5kb1ZhbHVlPWUuX3ZhbHVlR2V0KCEwKTt2YXIgZD0oaS5pbnB1dG1hc2suc2hhZG93Um9vdHx8aS5vd25lckRvY3VtZW50KS5hY3RpdmVFbGVtZW50O2lmKFwiXCIhPT1pLmlucHV0bWFzay5fdmFsdWVHZXQoITApfHwhMT09PXQuY2xlYXJNYXNrT25Mb3N0Rm9jdXN8fGQ9PT1pKXsoMCxyLmFwcGx5SW5wdXRWYWx1ZSkoaSxpLmlucHV0bWFzay5fdmFsdWVHZXQoITApLHQpO3ZhciBwPW4uZ2V0QnVmZmVyLmNhbGwoZSkuc2xpY2UoKTshMT09PWwuaXNDb21wbGV0ZS5jYWxsKGUscCkmJnQuY2xlYXJJbmNvbXBsZXRlJiZuLnJlc2V0TWFza1NldC5jYWxsKGUpLHQuY2xlYXJNYXNrT25Mb3N0Rm9jdXMmJmQhPT1pJiYoLTE9PT1uLmdldExhc3RWYWxpZFBvc2l0aW9uLmNhbGwoZSk/cD1bXTpyLmNsZWFyT3B0aW9uYWxUYWlsLmNhbGwoZSxwKSksKCExPT09dC5jbGVhck1hc2tPbkxvc3RGb2N1c3x8dC5zaG93TWFza09uRm9jdXMmJmQ9PT1pfHxcIlwiIT09aS5pbnB1dG1hc2suX3ZhbHVlR2V0KCEwKSkmJigwLHIud3JpdGVCdWZmZXIpKGkscCksZD09PWkmJm4uY2FyZXQuY2FsbChlLGksbi5zZWVrTmV4dC5jYWxsKGUsbi5nZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKGUpKSl9fX07dmFyIGE9aSgyODM5KSxuPWkoODcxMSkscj1pKDc3NjApLG89aSg5NzE2KSxzPWkoOTg0NSksbD1pKDcyMTUpLGM9aSg2MDMwKX0sOTY5NTpmdW5jdGlvbihlLHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD1mdW5jdGlvbihlLHQsaSxhKXt0aGlzLm1hdGNoZXM9W10sdGhpcy5vcGVuR3JvdXA9ZXx8ITEsdGhpcy5hbHRlcm5hdG9yR3JvdXA9ITEsdGhpcy5pc0dyb3VwPWV8fCExLHRoaXMuaXNPcHRpb25hbD10fHwhMSx0aGlzLmlzUXVhbnRpZmllcj1pfHwhMSx0aGlzLmlzQWx0ZXJuYXRvcj1hfHwhMSx0aGlzLnF1YW50aWZpZXI9e21pbjoxLG1heDoxfX19LDMxOTQ6ZnVuY3Rpb24oKXtBcnJheS5wcm90b3R5cGUuaW5jbHVkZXN8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsXCJpbmNsdWRlc1wiLHt2YWx1ZTpmdW5jdGlvbihlLHQpe2lmKG51bGw9PXRoaXMpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ0aGlzXCIgaXMgbnVsbCBvciBub3QgZGVmaW5lZCcpO3ZhciBpPU9iamVjdCh0aGlzKSxhPWkubGVuZ3RoPj4+MDtpZigwPT09YSlyZXR1cm4hMTtmb3IodmFyIG49MHx0LHI9TWF0aC5tYXgobj49MD9uOmEtTWF0aC5hYnMobiksMCk7cjxhOyl7aWYoaVtyXT09PWUpcmV0dXJuITA7cisrfXJldHVybiExfX0pfSw3MTQ5OmZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXtyZXR1cm4gZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxlKHQpfVwiZnVuY3Rpb25cIiE9dHlwZW9mIE9iamVjdC5nZXRQcm90b3R5cGVPZiYmKE9iamVjdC5nZXRQcm90b3R5cGVPZj1cIm9iamVjdFwiPT09ZShcInRlc3RcIi5fX3Byb3RvX18pP2Z1bmN0aW9uKGUpe3JldHVybiBlLl9fcHJvdG9fX306ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uc3RydWN0b3IucHJvdG90eXBlfSl9LDg3MTE6ZnVuY3Rpb24oZSx0LGkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuY2FyZXQ9ZnVuY3Rpb24oZSx0LGksYSxuKXt2YXIgcixvPXRoaXMscz10aGlzLm9wdHM7aWYodm9pZCAwPT09dClyZXR1cm5cInNlbGVjdGlvblN0YXJ0XCJpbiBlJiZcInNlbGVjdGlvbkVuZFwiaW4gZT8odD1lLnNlbGVjdGlvblN0YXJ0LGk9ZS5zZWxlY3Rpb25FbmQpOndpbmRvdy5nZXRTZWxlY3Rpb24/KHI9d2luZG93LmdldFNlbGVjdGlvbigpLmdldFJhbmdlQXQoMCkpLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLnBhcmVudE5vZGUhPT1lJiZyLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIT09ZXx8KHQ9ci5zdGFydE9mZnNldCxpPXIuZW5kT2Zmc2V0KTpkb2N1bWVudC5zZWxlY3Rpb24mJmRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSYmKHI9ZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCksdD0wLXIuZHVwbGljYXRlKCkubW92ZVN0YXJ0KFwiY2hhcmFjdGVyXCIsLWUuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCksaT10K3IudGV4dC5sZW5ndGgpLHtiZWdpbjphP3Q6Yy5jYWxsKG8sdCksZW5kOmE/aTpjLmNhbGwobyxpKX07aWYoQXJyYXkuaXNBcnJheSh0KSYmKGk9by5pc1JUTD90WzBdOnRbMV0sdD1vLmlzUlRMP3RbMV06dFswXSksdm9pZCAwIT09dC5iZWdpbiYmKGk9by5pc1JUTD90LmJlZ2luOnQuZW5kLHQ9by5pc1JUTD90LmVuZDp0LmJlZ2luKSxcIm51bWJlclwiPT10eXBlb2YgdCl7dD1hP3Q6Yy5jYWxsKG8sdCksaT1cIm51bWJlclwiPT10eXBlb2YoaT1hP2k6Yy5jYWxsKG8saSkpP2k6dDt2YXIgbD1wYXJzZUludCgoKGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRDb21wdXRlZFN0eWxlPyhlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0Q29tcHV0ZWRTdHlsZShlLG51bGwpOmUuY3VycmVudFN0eWxlKS5mb250U2l6ZSkqaTtpZihlLnNjcm9sbExlZnQ9bD5lLnNjcm9sbFdpZHRoP2w6MCxlLmlucHV0bWFzay5jYXJldFBvcz17YmVnaW46dCxlbmQ6aX0scy5pbnNlcnRNb2RlVmlzdWFsJiYhMT09PXMuaW5zZXJ0TW9kZSYmdD09PWkmJihufHxpKyspLGU9PT0oZS5pbnB1dG1hc2suc2hhZG93Um9vdHx8ZS5vd25lckRvY3VtZW50KS5hY3RpdmVFbGVtZW50KWlmKFwic2V0U2VsZWN0aW9uUmFuZ2VcImluIGUpZS5zZXRTZWxlY3Rpb25SYW5nZSh0LGkpO2Vsc2UgaWYod2luZG93LmdldFNlbGVjdGlvbil7aWYocj1kb2N1bWVudC5jcmVhdGVSYW5nZSgpLHZvaWQgMD09PWUuZmlyc3RDaGlsZHx8bnVsbD09PWUuZmlyc3RDaGlsZCl7dmFyIHU9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIik7ZS5hcHBlbmRDaGlsZCh1KX1yLnNldFN0YXJ0KGUuZmlyc3RDaGlsZCx0PGUuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aD90OmUuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCksci5zZXRFbmQoZS5maXJzdENoaWxkLGk8ZS5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoP2k6ZS5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoKSxyLmNvbGxhcHNlKCEwKTt2YXIgZj13aW5kb3cuZ2V0U2VsZWN0aW9uKCk7Zi5yZW1vdmVBbGxSYW5nZXMoKSxmLmFkZFJhbmdlKHIpfWVsc2UgZS5jcmVhdGVUZXh0UmFuZ2UmJigocj1lLmNyZWF0ZVRleHRSYW5nZSgpKS5jb2xsYXBzZSghMCksci5tb3ZlRW5kKFwiY2hhcmFjdGVyXCIsaSksci5tb3ZlU3RhcnQoXCJjaGFyYWN0ZXJcIix0KSxyLnNlbGVjdCgpKX19LHQuZGV0ZXJtaW5lTGFzdFJlcXVpcmVkUG9zaXRpb249ZnVuY3Rpb24oZSl7dmFyIHQsaSxyPXRoaXMscz1yLm1hc2tzZXQsbD1yLmRlcGVuZGVuY3lMaWIsYz1hLmdldE1hc2tUZW1wbGF0ZS5jYWxsKHIsITAsby5jYWxsKHIpLCEwLCEwKSx1PWMubGVuZ3RoLGY9by5jYWxsKHIpLGQ9e30scD1zLnZhbGlkUG9zaXRpb25zW2ZdLGg9dm9pZCAwIT09cD9wLmxvY2F0b3Iuc2xpY2UoKTp2b2lkIDA7Zm9yKHQ9ZisxO3Q8Yy5sZW5ndGg7dCsrKWk9YS5nZXRUZXN0VGVtcGxhdGUuY2FsbChyLHQsaCx0LTEpLGg9aS5sb2NhdG9yLnNsaWNlKCksZFt0XT1sLmV4dGVuZCghMCx7fSxpKTt2YXIgdj1wJiZ2b2lkIDAhPT1wLmFsdGVybmF0aW9uP3AubG9jYXRvcltwLmFsdGVybmF0aW9uXTp2b2lkIDA7Zm9yKHQ9dS0xO3Q+ZiYmKCgoaT1kW3RdKS5tYXRjaC5vcHRpb25hbGl0eXx8aS5tYXRjaC5vcHRpb25hbFF1YW50aWZpZXImJmkubWF0Y2gubmV3QmxvY2tNYXJrZXJ8fHYmJih2IT09ZFt0XS5sb2NhdG9yW3AuYWx0ZXJuYXRpb25dJiYxIT1pLm1hdGNoLnN0YXRpY3x8ITA9PT1pLm1hdGNoLnN0YXRpYyYmaS5sb2NhdG9yW3AuYWx0ZXJuYXRpb25dJiZuLmNoZWNrQWx0ZXJuYXRpb25NYXRjaC5jYWxsKHIsaS5sb2NhdG9yW3AuYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpLHYudG9TdHJpbmcoKS5zcGxpdChcIixcIikpJiZcIlwiIT09YS5nZXRUZXN0cy5jYWxsKHIsdClbMF0uZGVmKSkmJmNbdF09PT1hLmdldFBsYWNlaG9sZGVyLmNhbGwocix0LGkubWF0Y2gpKTt0LS0pdS0tO3JldHVybiBlP3tsOnUsZGVmOmRbdV0/ZFt1XS5tYXRjaDp2b2lkIDB9OnV9LHQuZGV0ZXJtaW5lTmV3Q2FyZXRQb3NpdGlvbj1mdW5jdGlvbihlLHQsaSl7dmFyIG49dGhpcyxjPW4ubWFza3NldCx1PW4ub3B0czt0JiYobi5pc1JUTD9lLmVuZD1lLmJlZ2luOmUuYmVnaW49ZS5lbmQpO2lmKGUuYmVnaW49PT1lLmVuZCl7c3dpdGNoKGk9aXx8dS5wb3NpdGlvbkNhcmV0T25DbGljayl7Y2FzZVwibm9uZVwiOmJyZWFrO2Nhc2VcInNlbGVjdFwiOmU9e2JlZ2luOjAsZW5kOnIuY2FsbChuKS5sZW5ndGh9O2JyZWFrO2Nhc2VcImlnbm9yZVwiOmUuZW5kPWUuYmVnaW49bC5jYWxsKG4sby5jYWxsKG4pKTticmVhaztjYXNlXCJyYWRpeEZvY3VzXCI6aWYobi5jbGlja2VkPjEmJjA9PWMudmFsaWRQb3NpdGlvbnMubGVuZ3RoKWJyZWFrO2lmKGZ1bmN0aW9uKGUpe2lmKFwiXCIhPT11LnJhZGl4UG9pbnQmJjAhPT11LmRpZ2l0cyl7dmFyIHQ9Yy52YWxpZFBvc2l0aW9ucztpZih2b2lkIDA9PT10W2VdfHx0W2VdLmlucHV0PT09YS5nZXRQbGFjZWhvbGRlci5jYWxsKG4sZSkpe2lmKGU8bC5jYWxsKG4sLTEpKXJldHVybiEwO3ZhciBpPXIuY2FsbChuKS5pbmRleE9mKHUucmFkaXhQb2ludCk7aWYoLTEhPT1pKXtmb3IodmFyIG89MCxzPXQubGVuZ3RoO288cztvKyspaWYodFtvXSYmaTxvJiZ0W29dLmlucHV0IT09YS5nZXRQbGFjZWhvbGRlci5jYWxsKG4sbykpcmV0dXJuITE7cmV0dXJuITB9fX1yZXR1cm4hMX0oZS5iZWdpbikpe3ZhciBmPXIuY2FsbChuKS5qb2luKFwiXCIpLmluZGV4T2YodS5yYWRpeFBvaW50KTtlLmVuZD1lLmJlZ2luPXUubnVtZXJpY0lucHV0P2wuY2FsbChuLGYpOmY7YnJlYWt9ZGVmYXVsdDp2YXIgZD1lLmJlZ2luLHA9by5jYWxsKG4sZCwhMCksaD1sLmNhbGwobiwtMSE9PXB8fHMuY2FsbChuLDApP3A6LTEpO2lmKGQ8PWgpZS5lbmQ9ZS5iZWdpbj1zLmNhbGwobixkLCExLCEwKT9kOmwuY2FsbChuLGQpO2Vsc2V7dmFyIHY9Yy52YWxpZFBvc2l0aW9uc1twXSxtPWEuZ2V0VGVzdFRlbXBsYXRlLmNhbGwobixoLHY/di5tYXRjaC5sb2NhdG9yOnZvaWQgMCx2KSxnPWEuZ2V0UGxhY2Vob2xkZXIuY2FsbChuLGgsbS5tYXRjaCk7aWYoXCJcIiE9PWcmJnIuY2FsbChuKVtoXSE9PWcmJiEwIT09bS5tYXRjaC5vcHRpb25hbFF1YW50aWZpZXImJiEwIT09bS5tYXRjaC5uZXdCbG9ja01hcmtlcnx8IXMuY2FsbChuLGgsdS5rZWVwU3RhdGljLCEwKSYmbS5tYXRjaC5kZWY9PT1nKXt2YXIgaz1sLmNhbGwobixoKTsoZD49a3x8ZD09PWgpJiYoaD1rKX1lLmVuZD1lLmJlZ2luPWh9fXJldHVybiBlfX0sdC5nZXRCdWZmZXI9cix0LmdldEJ1ZmZlclRlbXBsYXRlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5tYXNrc2V0O3ZvaWQgMD09PWUuX2J1ZmZlciYmKGUuX2J1ZmZlcj1hLmdldE1hc2tUZW1wbGF0ZS5jYWxsKHRoaXMsITEsMSksdm9pZCAwPT09ZS5idWZmZXImJihlLmJ1ZmZlcj1lLl9idWZmZXIuc2xpY2UoKSkpO3JldHVybiBlLl9idWZmZXJ9LHQuZ2V0TGFzdFZhbGlkUG9zaXRpb249byx0LmlzTWFzaz1zLHQucmVzZXRNYXNrU2V0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubWFza3NldDt0LmJ1ZmZlcj12b2lkIDAsITAhPT1lJiYodC52YWxpZFBvc2l0aW9ucz1bXSx0LnA9MCl9LHQuc2Vla05leHQ9bCx0LnNlZWtQcmV2aW91cz1mdW5jdGlvbihlLHQpe3ZhciBpPXRoaXMsbj1lLTE7aWYoZTw9MClyZXR1cm4gMDtmb3IoO24+MCYmKCEwPT09dCYmKCEwIT09YS5nZXRUZXN0LmNhbGwoaSxuKS5tYXRjaC5uZXdCbG9ja01hcmtlcnx8IXMuY2FsbChpLG4sdm9pZCAwLCEwKSl8fCEwIT09dCYmIXMuY2FsbChpLG4sdm9pZCAwLCEwKSk7KW4tLTtyZXR1cm4gbn0sdC50cmFuc2xhdGVQb3NpdGlvbj1jO3ZhciBhPWkoNDcxMyksbj1pKDcyMTUpO2Z1bmN0aW9uIHIoZSl7dmFyIHQ9dGhpcyxpPXQubWFza3NldDtyZXR1cm4gdm9pZCAwIT09aS5idWZmZXImJiEwIT09ZXx8KGkuYnVmZmVyPWEuZ2V0TWFza1RlbXBsYXRlLmNhbGwodCwhMCxvLmNhbGwodCksITApLHZvaWQgMD09PWkuX2J1ZmZlciYmKGkuX2J1ZmZlcj1pLmJ1ZmZlci5zbGljZSgpKSksaS5idWZmZXJ9ZnVuY3Rpb24gbyhlLHQsaSl7dmFyIGE9dGhpcy5tYXNrc2V0LG49LTEscj0tMSxvPWl8fGEudmFsaWRQb3NpdGlvbnM7dm9pZCAwPT09ZSYmKGU9LTEpO2Zvcih2YXIgcz0wLGw9by5sZW5ndGg7czxsO3MrKylvW3NdJiYodHx8ITAhPT1vW3NdLmdlbmVyYXRlZElucHV0KSYmKHM8PWUmJihuPXMpLHM+PWUmJihyPXMpKTtyZXR1cm4tMT09PW58fG49PWU/cjotMT09cnx8ZS1uPHItZT9uOnJ9ZnVuY3Rpb24gcyhlLHQsaSl7dmFyIG49dGhpcyxyPXRoaXMubWFza3NldCxvPWEuZ2V0VGVzdFRlbXBsYXRlLmNhbGwobixlKS5tYXRjaDtpZihcIlwiPT09by5kZWYmJihvPWEuZ2V0VGVzdC5jYWxsKG4sZSkubWF0Y2gpLCEwIT09by5zdGF0aWMpcmV0dXJuIG8uZm47aWYoITA9PT1pJiZ2b2lkIDAhPT1yLnZhbGlkUG9zaXRpb25zW2VdJiYhMCE9PXIudmFsaWRQb3NpdGlvbnNbZV0uZ2VuZXJhdGVkSW5wdXQpcmV0dXJuITA7aWYoITAhPT10JiZlPi0xKXtpZihpKXt2YXIgcz1hLmdldFRlc3RzLmNhbGwobixlKTtyZXR1cm4gcy5sZW5ndGg+MSsoXCJcIj09PXNbcy5sZW5ndGgtMV0ubWF0Y2guZGVmPzE6MCl9dmFyIGw9YS5kZXRlcm1pbmVUZXN0VGVtcGxhdGUuY2FsbChuLGUsYS5nZXRUZXN0cy5jYWxsKG4sZSkpLGM9YS5nZXRQbGFjZWhvbGRlci5jYWxsKG4sZSxsLm1hdGNoKTtyZXR1cm4gbC5tYXRjaC5kZWYhPT1jfXJldHVybiExfWZ1bmN0aW9uIGwoZSx0LGkpe3ZhciBuPXRoaXM7dm9pZCAwPT09aSYmKGk9ITApO2Zvcih2YXIgcj1lKzE7XCJcIiE9PWEuZ2V0VGVzdC5jYWxsKG4scikubWF0Y2guZGVmJiYoITA9PT10JiYoITAhPT1hLmdldFRlc3QuY2FsbChuLHIpLm1hdGNoLm5ld0Jsb2NrTWFya2VyfHwhcy5jYWxsKG4scix2b2lkIDAsITApKXx8ITAhPT10JiYhcy5jYWxsKG4scix2b2lkIDAsaSkpOylyKys7cmV0dXJuIHJ9ZnVuY3Rpb24gYyhlKXt2YXIgdD10aGlzLm9wdHMsaT10aGlzLmVsO3JldHVybiF0aGlzLmlzUlRMfHxcIm51bWJlclwiIT10eXBlb2YgZXx8dC5ncmVlZHkmJlwiXCI9PT10LnBsYWNlaG9sZGVyfHwhaXx8KGU9dGhpcy5fdmFsdWVHZXQoKS5sZW5ndGgtZSk8MCYmKGU9MCksZX19LDQ3MTM6ZnVuY3Rpb24oZSx0LGkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZGV0ZXJtaW5lVGVzdFRlbXBsYXRlPWMsdC5nZXREZWNpc2lvblRha2VyPW8sdC5nZXRNYXNrVGVtcGxhdGU9ZnVuY3Rpb24oZSx0LGksYSxuKXt2YXIgcj10aGlzLG89dGhpcy5vcHRzLHU9dGhpcy5tYXNrc2V0LGY9by5ncmVlZHk7biYmby5ncmVlZHkmJihvLmdyZWVkeT0hMSxyLm1hc2tzZXQudGVzdHM9e30pO3Q9dHx8MDt2YXIgcCxoLHYsbSxnPVtdLGs9MDtkb3tpZighMD09PWUmJnUudmFsaWRQb3NpdGlvbnNba10pdj1uJiZ1LnZhbGlkUG9zaXRpb25zW2tdLm1hdGNoLm9wdGlvbmFsaXR5JiZ2b2lkIDA9PT11LnZhbGlkUG9zaXRpb25zW2srMV0mJighMD09PXUudmFsaWRQb3NpdGlvbnNba10uZ2VuZXJhdGVkSW5wdXR8fHUudmFsaWRQb3NpdGlvbnNba10uaW5wdXQ9PW8uc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlciYmaz4wKT9jLmNhbGwocixrLGQuY2FsbChyLGsscCxrLTEpKTp1LnZhbGlkUG9zaXRpb25zW2tdLGg9di5tYXRjaCxwPXYubG9jYXRvci5zbGljZSgpLGcucHVzaCghMD09PWk/di5pbnB1dDohMT09PWk/aC5uYXRpdmVEZWY6cy5jYWxsKHIsayxoKSk7ZWxzZXt2PWwuY2FsbChyLGsscCxrLTEpLGg9di5tYXRjaCxwPXYubG9jYXRvci5zbGljZSgpO3ZhciB5PSEwIT09YSYmKCExIT09by5qaXRNYXNraW5nP28uaml0TWFza2luZzpoLmppdCk7KG09KG0mJmguc3RhdGljJiZoLmRlZiE9PW8uZ3JvdXBTZXBhcmF0b3ImJm51bGw9PT1oLmZufHx1LnZhbGlkUG9zaXRpb25zW2stMV0mJmguc3RhdGljJiZoLmRlZiE9PW8uZ3JvdXBTZXBhcmF0b3ImJm51bGw9PT1oLmZuKSYmdS50ZXN0c1trXSYmMT09PXUudGVzdHNba10ubGVuZ3RoKXx8ITE9PT15fHx2b2lkIDA9PT15fHxcIm51bWJlclwiPT10eXBlb2YgeSYmaXNGaW5pdGUoeSkmJnk+az9nLnB1c2goITE9PT1pP2gubmF0aXZlRGVmOnMuY2FsbChyLGcubGVuZ3RoLGgpKTptPSExfWsrK313aGlsZSghMCE9PWguc3RhdGljfHxcIlwiIT09aC5kZWZ8fHQ+ayk7XCJcIj09PWdbZy5sZW5ndGgtMV0mJmcucG9wKCk7ITE9PT1pJiZ2b2lkIDAhPT11Lm1hc2tMZW5ndGh8fCh1Lm1hc2tMZW5ndGg9ay0xKTtyZXR1cm4gby5ncmVlZHk9ZixnfSx0LmdldFBsYWNlaG9sZGVyPXMsdC5nZXRUZXN0PXUsdC5nZXRUZXN0VGVtcGxhdGU9bCx0LmdldFRlc3RzPWQsdC5pc1N1YnNldE9mPWY7dmFyIGEsbj0oYT1pKDIzOTQpKSYmYS5fX2VzTW9kdWxlP2E6e2RlZmF1bHQ6YX07ZnVuY3Rpb24gcihlLHQpe3ZhciBpPShudWxsIT1lLmFsdGVybmF0aW9uP2UubWxvY1tvKGUpXTplLmxvY2F0b3IpLmpvaW4oXCJcIik7aWYoXCJcIiE9PWkpZm9yKDtpLmxlbmd0aDx0OylpKz1cIjBcIjtyZXR1cm4gaX1mdW5jdGlvbiBvKGUpe3ZhciB0PWUubG9jYXRvcltlLmFsdGVybmF0aW9uXTtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdCYmdC5sZW5ndGg+MCYmKHQ9dC5zcGxpdChcIixcIilbMF0pLHZvaWQgMCE9PXQ/dC50b1N0cmluZygpOlwiXCJ9ZnVuY3Rpb24gcyhlLHQsaSl7dmFyIGE9dGhpcy5vcHRzLG49dGhpcy5tYXNrc2V0O2lmKHZvaWQgMCE9PSh0PXR8fHUuY2FsbCh0aGlzLGUpLm1hdGNoKS5wbGFjZWhvbGRlcnx8ITA9PT1pKXJldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQucGxhY2Vob2xkZXI/dC5wbGFjZWhvbGRlcihhKTp0LnBsYWNlaG9sZGVyO2lmKCEwPT09dC5zdGF0aWMpe2lmKGU+LTEmJnZvaWQgMD09PW4udmFsaWRQb3NpdGlvbnNbZV0pe3ZhciByLG89ZC5jYWxsKHRoaXMsZSkscz1bXTtpZihvLmxlbmd0aD4xKyhcIlwiPT09b1tvLmxlbmd0aC0xXS5tYXRjaC5kZWY/MTowKSlmb3IodmFyIGw9MDtsPG8ubGVuZ3RoO2wrKylpZihcIlwiIT09b1tsXS5tYXRjaC5kZWYmJiEwIT09b1tsXS5tYXRjaC5vcHRpb25hbGl0eSYmITAhPT1vW2xdLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciYmKCEwPT09b1tsXS5tYXRjaC5zdGF0aWN8fHZvaWQgMD09PXJ8fCExIT09b1tsXS5tYXRjaC5mbi50ZXN0KHIubWF0Y2guZGVmLG4sZSwhMCxhKSkmJihzLnB1c2gob1tsXSksITA9PT1vW2xdLm1hdGNoLnN0YXRpYyYmKHI9b1tsXSkscy5sZW5ndGg+MSYmL1swLTlhLWJBLVpdLy50ZXN0KHNbMF0ubWF0Y2guZGVmKSkpcmV0dXJuIGEucGxhY2Vob2xkZXIuY2hhckF0KGUlYS5wbGFjZWhvbGRlci5sZW5ndGgpfXJldHVybiB0LmRlZn1yZXR1cm4gYS5wbGFjZWhvbGRlci5jaGFyQXQoZSVhLnBsYWNlaG9sZGVyLmxlbmd0aCl9ZnVuY3Rpb24gbChlLHQsaSl7cmV0dXJuIHRoaXMubWFza3NldC52YWxpZFBvc2l0aW9uc1tlXXx8Yy5jYWxsKHRoaXMsZSxkLmNhbGwodGhpcyxlLHQ/dC5zbGljZSgpOnQsaSkpfWZ1bmN0aW9uIGMoZSx0KXt2YXIgaT10aGlzLm9wdHMsYT0wLG49ZnVuY3Rpb24oZSx0KXt2YXIgaT0wLGE9ITE7dC5mb3JFYWNoKChmdW5jdGlvbihlKXtlLm1hdGNoLm9wdGlvbmFsaXR5JiYoMCE9PWkmJmkhPT1lLm1hdGNoLm9wdGlvbmFsaXR5JiYoYT0hMCksKDA9PT1pfHxpPmUubWF0Y2gub3B0aW9uYWxpdHkpJiYoaT1lLm1hdGNoLm9wdGlvbmFsaXR5KSl9KSksaSYmKDA9PWV8fDE9PXQubGVuZ3RoP2k9MDphfHwoaT0wKSk7cmV0dXJuIGl9KGUsdCk7ZT1lPjA/ZS0xOjA7dmFyIG8scyxsLGM9cih1LmNhbGwodGhpcyxlKSk7aS5ncmVlZHkmJnQubGVuZ3RoPjEmJlwiXCI9PT10W3QubGVuZ3RoLTFdLm1hdGNoLmRlZiYmKGE9MSk7Zm9yKHZhciBmPTA7Zjx0Lmxlbmd0aC1hO2YrKyl7dmFyIGQ9dFtmXTtvPXIoZCxjLmxlbmd0aCk7dmFyIHA9TWF0aC5hYnMoby1jKTsodm9pZCAwPT09c3x8XCJcIiE9PW8mJnA8c3x8bCYmIWkuZ3JlZWR5JiZsLm1hdGNoLm9wdGlvbmFsaXR5JiZsLm1hdGNoLm9wdGlvbmFsaXR5LW4+MCYmXCJtYXN0ZXJcIj09PWwubWF0Y2gubmV3QmxvY2tNYXJrZXImJighZC5tYXRjaC5vcHRpb25hbGl0eXx8ZC5tYXRjaC5vcHRpb25hbGl0eS1uPDF8fCFkLm1hdGNoLm5ld0Jsb2NrTWFya2VyKXx8bCYmIWkuZ3JlZWR5JiZsLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciYmIWQubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyKSYmKHM9cCxsPWQpfXJldHVybiBsfWZ1bmN0aW9uIHUoZSx0KXt2YXIgaT10aGlzLm1hc2tzZXQ7cmV0dXJuIGkudmFsaWRQb3NpdGlvbnNbZV0/aS52YWxpZFBvc2l0aW9uc1tlXToodHx8ZC5jYWxsKHRoaXMsZSkpWzBdfWZ1bmN0aW9uIGYoZSx0LGkpe2Z1bmN0aW9uIGEoZSl7Zm9yKHZhciB0LGk9W10sYT0tMSxuPTAscj1lLmxlbmd0aDtuPHI7bisrKWlmKFwiLVwiPT09ZS5jaGFyQXQobikpZm9yKHQ9ZS5jaGFyQ29kZUF0KG4rMSk7KythPHQ7KWkucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTtlbHNlIGE9ZS5jaGFyQ29kZUF0KG4pLGkucHVzaChlLmNoYXJBdChuKSk7cmV0dXJuIGkuam9pbihcIlwiKX1yZXR1cm4gZS5tYXRjaC5kZWY9PT10Lm1hdGNoLm5hdGl2ZURlZnx8ISghKGkucmVnZXh8fGUubWF0Y2guZm4gaW5zdGFuY2VvZiBSZWdFeHAmJnQubWF0Y2guZm4gaW5zdGFuY2VvZiBSZWdFeHApfHwhMD09PWUubWF0Y2guc3RhdGljfHwhMD09PXQubWF0Y2guc3RhdGljKSYmLTEhPT1hKHQubWF0Y2guZm4udG9TdHJpbmcoKS5yZXBsYWNlKC9bW1xcXS9dL2csXCJcIikpLmluZGV4T2YoYShlLm1hdGNoLmZuLnRvU3RyaW5nKCkucmVwbGFjZSgvW1tcXF0vXS9nLFwiXCIpKSl9ZnVuY3Rpb24gZChlLHQsaSl7dmFyIGEscixvPXRoaXMscz10aGlzLmRlcGVuZGVuY3lMaWIsbD10aGlzLm1hc2tzZXQsdT10aGlzLm9wdHMsZD10aGlzLmVsLHA9bC5tYXNrVG9rZW4saD10P2k6MCx2PXQ/dC5zbGljZSgpOlswXSxtPVtdLGc9ITEsaz10P3Quam9pbihcIlwiKTpcIlwiO2Z1bmN0aW9uIHkodCxpLHIsbyl7ZnVuY3Rpb24gcyhyLG8sYyl7ZnVuY3Rpb24gcChlLHQpe3ZhciBpPTA9PT10Lm1hdGNoZXMuaW5kZXhPZihlKTtyZXR1cm4gaXx8dC5tYXRjaGVzLmV2ZXJ5KChmdW5jdGlvbihhLG4pe3JldHVybiEwPT09YS5pc1F1YW50aWZpZXI/aT1wKGUsdC5tYXRjaGVzW24tMV0pOk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLFwibWF0Y2hlc1wiKSYmKGk9cChlLGEpKSwhaX0pKSxpfWZ1bmN0aW9uIHYoZSx0LGkpe3ZhciBhLG47aWYoKGwudGVzdHNbZV18fGwudmFsaWRQb3NpdGlvbnNbZV0pJiYobC50ZXN0c1tlXXx8W2wudmFsaWRQb3NpdGlvbnNbZV1dKS5ldmVyeSgoZnVuY3Rpb24oZSxyKXtpZihlLm1sb2NbdF0pcmV0dXJuIGE9ZSwhMTt2YXIgbz12b2lkIDAhPT1pP2k6ZS5hbHRlcm5hdGlvbixzPXZvaWQgMCE9PWUubG9jYXRvcltvXT9lLmxvY2F0b3Jbb10udG9TdHJpbmcoKS5pbmRleE9mKHQpOi0xO3JldHVybih2b2lkIDA9PT1ufHxzPG4pJiYtMSE9PXMmJihhPWUsbj1zKSwhMH0pKSxhKXt2YXIgcj1hLmxvY2F0b3JbYS5hbHRlcm5hdGlvbl07cmV0dXJuKGEubWxvY1t0XXx8YS5tbG9jW3JdfHxhLmxvY2F0b3IpLnNsaWNlKCh2b2lkIDAhPT1pP2k6YS5hbHRlcm5hdGlvbikrMSl9cmV0dXJuIHZvaWQgMCE9PWk/dihlLHQpOnZvaWQgMH1mdW5jdGlvbiB4KGUsdCl7dmFyIGk9ZS5hbHRlcm5hdGlvbixhPXZvaWQgMD09PXR8fGk9PT10LmFsdGVybmF0aW9uJiYtMT09PWUubG9jYXRvcltpXS50b1N0cmluZygpLmluZGV4T2YodC5sb2NhdG9yW2ldKTtpZighYSYmaT50LmFsdGVybmF0aW9uKWZvcih2YXIgbj10LmFsdGVybmF0aW9uO248aTtuKyspaWYoZS5sb2NhdG9yW25dIT09dC5sb2NhdG9yW25dKXtpPW4sYT0hMDticmVha31pZihhKXtlLm1sb2M9ZS5tbG9jfHx7fTt2YXIgcj1lLmxvY2F0b3JbaV07aWYodm9pZCAwIT09cil7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHImJihyPXIuc3BsaXQoXCIsXCIpWzBdKSx2b2lkIDA9PT1lLm1sb2Nbcl0mJihlLm1sb2Nbcl09ZS5sb2NhdG9yLnNsaWNlKCkpLHZvaWQgMCE9PXQpe2Zvcih2YXIgbyBpbiB0Lm1sb2MpXCJzdHJpbmdcIj09dHlwZW9mIG8mJihvPW8uc3BsaXQoXCIsXCIpWzBdKSx2b2lkIDA9PT1lLm1sb2Nbb10mJihlLm1sb2Nbb109dC5tbG9jW29dKTtlLmxvY2F0b3JbaV09T2JqZWN0LmtleXMoZS5tbG9jKS5qb2luKFwiLFwiKX1yZXR1cm4hMH1lLmFsdGVybmF0aW9uPXZvaWQgMH1yZXR1cm4hMX1mdW5jdGlvbiBQKGUsdCl7aWYoZS5sb2NhdG9yLmxlbmd0aCE9PXQubG9jYXRvci5sZW5ndGgpcmV0dXJuITE7Zm9yKHZhciBpPWUuYWx0ZXJuYXRpb24rMTtpPGUubG9jYXRvci5sZW5ndGg7aSsrKWlmKGUubG9jYXRvcltpXSE9PXQubG9jYXRvcltpXSlyZXR1cm4hMTtyZXR1cm4hMH1pZihoPmUrdS5fbWF4VGVzdFBvcyl0aHJvd1wiSW5wdXRtYXNrOiBUaGVyZSBpcyBwcm9iYWJseSBhbiBlcnJvciBpbiB5b3VyIG1hc2sgZGVmaW5pdGlvbiBvciBpbiB0aGUgY29kZS4gQ3JlYXRlIGFuIGlzc3VlIG9uIGdpdGh1YiB3aXRoIGFuIGV4YW1wbGUgb2YgdGhlIG1hc2sgeW91IGFyZSB1c2luZy4gXCIrbC5tYXNrO2lmKGg9PT1lJiZ2b2lkIDA9PT1yLm1hdGNoZXMpe2lmKG0ucHVzaCh7bWF0Y2g6cixsb2NhdG9yOm8ucmV2ZXJzZSgpLGNkOmssbWxvYzp7fX0pLCFyLm9wdGlvbmFsaXR5fHx2b2lkIDAhPT1jfHwhKHUuZGVmaW5pdGlvbnMmJnUuZGVmaW5pdGlvbnNbci5uYXRpdmVEZWZdJiZ1LmRlZmluaXRpb25zW3IubmF0aXZlRGVmXS5vcHRpb25hbHx8bi5kZWZhdWx0LnByb3RvdHlwZS5kZWZpbml0aW9uc1tyLm5hdGl2ZURlZl0mJm4uZGVmYXVsdC5wcm90b3R5cGUuZGVmaW5pdGlvbnNbci5uYXRpdmVEZWZdLm9wdGlvbmFsKSlyZXR1cm4hMDtnPSEwLGg9ZX1lbHNlIGlmKHZvaWQgMCE9PXIubWF0Y2hlcyl7aWYoci5pc0dyb3VwJiZjIT09cil7aWYocj1zKHQubWF0Y2hlc1t0Lm1hdGNoZXMuaW5kZXhPZihyKSsxXSxvLGMpKXJldHVybiEwfWVsc2UgaWYoci5pc09wdGlvbmFsKXt2YXIgdz1yLFM9bS5sZW5ndGg7aWYocj15KHIsaSxvLGMpKXtpZihtLmZvckVhY2goKGZ1bmN0aW9uKGUsdCl7dD49UyYmKGUubWF0Y2gub3B0aW9uYWxpdHk9ZS5tYXRjaC5vcHRpb25hbGl0eT9lLm1hdGNoLm9wdGlvbmFsaXR5KzE6MSl9KSksYT1tW20ubGVuZ3RoLTFdLm1hdGNoLHZvaWQgMCE9PWN8fCFwKGEsdykpcmV0dXJuITA7Zz0hMCxoPWV9fWVsc2UgaWYoci5pc0FsdGVybmF0b3Ipe3ZhciBfLE09cixPPVtdLEU9bS5zbGljZSgpLFQ9by5sZW5ndGgsaj0hMSxEPWkubGVuZ3RoPjA/aS5zaGlmdCgpOi0xO2lmKC0xPT09RHx8XCJzdHJpbmdcIj09dHlwZW9mIEQpe3ZhciBBLEI9aCxDPWkuc2xpY2UoKSxSPVtdO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBEKVI9RC5zcGxpdChcIixcIik7ZWxzZSBmb3IoQT0wO0E8TS5tYXRjaGVzLmxlbmd0aDtBKyspUi5wdXNoKEEudG9TdHJpbmcoKSk7aWYodm9pZCAwIT09bC5leGNsdWRlc1tlXSl7Zm9yKHZhciBMPVIuc2xpY2UoKSxGPTAsST1sLmV4Y2x1ZGVzW2VdLmxlbmd0aDtGPEk7RisrKXt2YXIgTj1sLmV4Y2x1ZGVzW2VdW0ZdLnRvU3RyaW5nKCkuc3BsaXQoXCI6XCIpO28ubGVuZ3RoPT1OWzFdJiZSLnNwbGljZShSLmluZGV4T2YoTlswXSksMSl9MD09PVIubGVuZ3RoJiYoZGVsZXRlIGwuZXhjbHVkZXNbZV0sUj1MKX0oITA9PT11LmtlZXBTdGF0aWN8fGlzRmluaXRlKHBhcnNlSW50KHUua2VlcFN0YXRpYykpJiZCPj11LmtlZXBTdGF0aWMpJiYoUj1SLnNsaWNlKDAsMSkpO2Zvcih2YXIgVj0wO1Y8Ui5sZW5ndGg7VisrKXtBPXBhcnNlSW50KFJbVl0pLG09W10saT1cInN0cmluZ1wiPT10eXBlb2YgRCYmdihoLEEsVCl8fEMuc2xpY2UoKTt2YXIgRz1NLm1hdGNoZXNbQV07aWYoRyYmcyhHLFtBXS5jb25jYXQobyksYykpcj0hMDtlbHNlIGlmKDA9PT1WJiYoaj0hMCksRyYmRy5tYXRjaGVzJiZHLm1hdGNoZXMubGVuZ3RoPk0ubWF0Y2hlc1swXS5tYXRjaGVzLmxlbmd0aClicmVhaztfPW0uc2xpY2UoKSxoPUIsbT1bXTtmb3IodmFyIEg9MDtIPF8ubGVuZ3RoO0grKyl7dmFyIFU9X1tIXSxLPSExO1UubWF0Y2guaml0PVUubWF0Y2guaml0fHxqLFUuYWx0ZXJuYXRpb249VS5hbHRlcm5hdGlvbnx8VCx4KFUpO2Zvcih2YXIgJD0wOyQ8Ty5sZW5ndGg7JCsrKXt2YXIgcT1PWyRdO2lmKFwic3RyaW5nXCIhPXR5cGVvZiBEfHx2b2lkIDAhPT1VLmFsdGVybmF0aW9uJiZSLmluY2x1ZGVzKFUubG9jYXRvcltVLmFsdGVybmF0aW9uXS50b1N0cmluZygpKSl7aWYoVS5tYXRjaC5uYXRpdmVEZWY9PT1xLm1hdGNoLm5hdGl2ZURlZil7Sz0hMCx4KHEsVSk7YnJlYWt9aWYoZihVLHEsdSkpe3goVSxxKSYmKEs9ITAsTy5zcGxpY2UoTy5pbmRleE9mKHEpLDAsVSkpO2JyZWFrfWlmKGYocSxVLHUpKXt4KHEsVSk7YnJlYWt9aWYoSj1xLCEwPT09KFc9VSkubWF0Y2guc3RhdGljJiYhMCE9PUoubWF0Y2guc3RhdGljJiZKLm1hdGNoLmZuLnRlc3QoVy5tYXRjaC5kZWYsbCxlLCExLHUsITEpKXtQKFUscSl8fHZvaWQgMCE9PWQuaW5wdXRtYXNrLnVzZXJPcHRpb25zLmtlZXBTdGF0aWM/eChVLHEpJiYoSz0hMCxPLnNwbGljZShPLmluZGV4T2YocSksMCxVKSk6dS5rZWVwU3RhdGljPSEwO2JyZWFrfX19S3x8Ty5wdXNoKFUpfX1tPUUuY29uY2F0KE8pLGg9ZSxnPW0ubGVuZ3RoPjAscj1PLmxlbmd0aD4wLGk9Qy5zbGljZSgpfWVsc2Ugcj1zKE0ubWF0Y2hlc1tEXXx8dC5tYXRjaGVzW0RdLFtEXS5jb25jYXQobyksYyk7aWYocilyZXR1cm4hMH1lbHNlIGlmKHIuaXNRdWFudGlmaWVyJiZjIT09dC5tYXRjaGVzW3QubWF0Y2hlcy5pbmRleE9mKHIpLTFdKWZvcih2YXIgej1yLFE9ITEsWj1pLmxlbmd0aD4wP2kuc2hpZnQoKTowO1o8KGlzTmFOKHoucXVhbnRpZmllci5tYXgpP1orMTp6LnF1YW50aWZpZXIubWF4KSYmaDw9ZTtaKyspe3ZhciBZPXQubWF0Y2hlc1t0Lm1hdGNoZXMuaW5kZXhPZih6KS0xXTtpZihyPXMoWSxbWl0uY29uY2F0KG8pLFkpKXtpZihtLmZvckVhY2goKGZ1bmN0aW9uKHQsaSl7KGE9YihZLHQubWF0Y2gpP3QubWF0Y2g6bVttLmxlbmd0aC0xXS5tYXRjaCkub3B0aW9uYWxRdWFudGlmaWVyPVo+PXoucXVhbnRpZmllci5taW4sYS5qaXQ9KForMSkqKFkubWF0Y2hlcy5pbmRleE9mKGEpKzEpPnoucXVhbnRpZmllci5qaXQsYS5vcHRpb25hbFF1YW50aWZpZXImJnAoYSxZKSYmKGc9ITAsaD1lLHUuZ3JlZWR5JiZudWxsPT1sLnZhbGlkUG9zaXRpb25zW2UtMV0mJlo+ei5xdWFudGlmaWVyLm1pbiYmLTEhPVtcIipcIixcIitcIl0uaW5kZXhPZih6LnF1YW50aWZpZXIubWF4KSYmKG0ucG9wKCksaz12b2lkIDApLFE9ITApLCFRJiZhLmppdCYmKGwuaml0T2Zmc2V0W2VdPVkubWF0Y2hlcy5sZW5ndGgtWS5tYXRjaGVzLmluZGV4T2YoYSkpfSkpLFEpYnJlYWs7cmV0dXJuITB9fWVsc2UgaWYocj15KHIsaSxvLGMpKXJldHVybiEwfWVsc2UgaCsrO3ZhciBXLEp9Zm9yKHZhciBjPWkubGVuZ3RoPjA/aS5zaGlmdCgpOjA7Yzx0Lm1hdGNoZXMubGVuZ3RoO2MrKylpZighMCE9PXQubWF0Y2hlc1tjXS5pc1F1YW50aWZpZXIpe3ZhciBwPXModC5tYXRjaGVzW2NdLFtjXS5jb25jYXQociksbyk7aWYocCYmaD09PWUpcmV0dXJuIHA7aWYoaD5lKWJyZWFrfX1mdW5jdGlvbiBiKGUsdCl7dmFyIGk9LTEhPWUubWF0Y2hlcy5pbmRleE9mKHQpO3JldHVybiBpfHxlLm1hdGNoZXMuZm9yRWFjaCgoZnVuY3Rpb24oZSxhKXt2b2lkIDA9PT1lLm1hdGNoZXN8fGl8fChpPWIoZSx0KSl9KSksaX1pZihlPi0xKXtpZih2b2lkIDA9PT10KXtmb3IodmFyIHgsUD1lLTE7dm9pZCAwPT09KHg9bC52YWxpZFBvc2l0aW9uc1tQXXx8bC50ZXN0c1tQXSkmJlA+LTE7KVAtLTt2b2lkIDAhPT14JiZQPi0xJiYodj1mdW5jdGlvbihlLHQpe3ZhciBpLGE9W107cmV0dXJuIEFycmF5LmlzQXJyYXkodCl8fCh0PVt0XSksdC5sZW5ndGg+MCYmKHZvaWQgMD09PXRbMF0uYWx0ZXJuYXRpb258fCEwPT09dS5rZWVwU3RhdGljPzA9PT0oYT1jLmNhbGwobyxlLHQuc2xpY2UoKSkubG9jYXRvci5zbGljZSgpKS5sZW5ndGgmJihhPXRbMF0ubG9jYXRvci5zbGljZSgpKTp0LmZvckVhY2goKGZ1bmN0aW9uKGUpe1wiXCIhPT1lLmRlZiYmKDA9PT1hLmxlbmd0aD8oaT1lLmFsdGVybmF0aW9uLGE9ZS5sb2NhdG9yLnNsaWNlKCkpOmUubG9jYXRvcltpXSYmLTE9PT1hW2ldLnRvU3RyaW5nKCkuaW5kZXhPZihlLmxvY2F0b3JbaV0pJiYoYVtpXSs9XCIsXCIrZS5sb2NhdG9yW2ldKSl9KSkpLGF9KFAseCksaz12LmpvaW4oXCJcIiksaD1QKX1pZihsLnRlc3RzW2VdJiZsLnRlc3RzW2VdWzBdLmNkPT09aylyZXR1cm4gbC50ZXN0c1tlXTtmb3IodmFyIHc9di5zaGlmdCgpO3c8cC5sZW5ndGg7dysrKXtpZih5KHBbd10sdixbd10pJiZoPT09ZXx8aD5lKWJyZWFrfX1yZXR1cm4oMD09PW0ubGVuZ3RofHxnKSYmbS5wdXNoKHttYXRjaDp7Zm46bnVsbCxzdGF0aWM6ITAsb3B0aW9uYWxpdHk6ITEsY2FzaW5nOm51bGwsZGVmOlwiXCIscGxhY2Vob2xkZXI6XCJcIn0sbG9jYXRvcjpbXSxtbG9jOnt9LGNkOmt9KSx2b2lkIDAhPT10JiZsLnRlc3RzW2VdP3I9cy5leHRlbmQoITAsW10sbSk6KGwudGVzdHNbZV09cy5leHRlbmQoITAsW10sbSkscj1sLnRlc3RzW2VdKSxtLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UubWF0Y2gub3B0aW9uYWxpdHk9ZS5tYXRjaC5kZWZPcHRpb25hbGl0eXx8ITF9KSkscn19LDcyMTU6ZnVuY3Rpb24oZSx0LGkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuYWx0ZXJuYXRlPXMsdC5jaGVja0FsdGVybmF0aW9uTWF0Y2g9ZnVuY3Rpb24oZSx0LGkpe2Zvcih2YXIgYSxuPXRoaXMub3B0cy5ncmVlZHk/dDp0LnNsaWNlKDAsMSkscj0hMSxvPXZvaWQgMCE9PWk/aS5zcGxpdChcIixcIik6W10scz0wO3M8by5sZW5ndGg7cysrKS0xIT09KGE9ZS5pbmRleE9mKG9bc10pKSYmZS5zcGxpY2UoYSwxKTtmb3IodmFyIGw9MDtsPGUubGVuZ3RoO2wrKylpZihuLmluY2x1ZGVzKGVbbF0pKXtyPSEwO2JyZWFrfXJldHVybiByfSx0LmhhbmRsZVJlbW92ZT1mdW5jdGlvbihlLHQsaSxvLGwpe3ZhciBjPXRoaXMsdT10aGlzLm1hc2tzZXQsZj10aGlzLm9wdHM7aWYoKGYubnVtZXJpY0lucHV0fHxjLmlzUlRMKSYmKHQ9PT1uLmtleXMuQmFja3NwYWNlP3Q9bi5rZXlzLkRlbGV0ZTp0PT09bi5rZXlzLkRlbGV0ZSYmKHQ9bi5rZXlzLkJhY2tzcGFjZSksYy5pc1JUTCkpe3ZhciBkPWkuZW5kO2kuZW5kPWkuYmVnaW4saS5iZWdpbj1kfXZhciBwLGg9ci5nZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKGMsdm9pZCAwLCEwKTtpLmVuZD49ci5nZXRCdWZmZXIuY2FsbChjKS5sZW5ndGgmJmg+PWkuZW5kJiYoaS5lbmQ9aCsxKTt0PT09bi5rZXlzLkJhY2tzcGFjZT9pLmVuZC1pLmJlZ2luPDEmJihpLmJlZ2luPXIuc2Vla1ByZXZpb3VzLmNhbGwoYyxpLmJlZ2luKSk6dD09PW4ua2V5cy5EZWxldGUmJmkuYmVnaW49PT1pLmVuZCYmKGkuZW5kPXIuaXNNYXNrLmNhbGwoYyxpLmVuZCwhMCwhMCk/aS5lbmQrMTpyLnNlZWtOZXh0LmNhbGwoYyxpLmVuZCkrMSk7aWYoITEhPT0ocD12LmNhbGwoYyxpKSkpe2lmKCEwIT09byYmITEhPT1mLmtlZXBTdGF0aWN8fG51bGwhPT1mLnJlZ2V4JiYtMSE9PWEuZ2V0VGVzdC5jYWxsKGMsaS5iZWdpbikubWF0Y2guZGVmLmluZGV4T2YoXCJ8XCIpKXt2YXIgbT1zLmNhbGwoYywhMCk7aWYobSl7dmFyIGc9dm9pZCAwIT09bS5jYXJldD9tLmNhcmV0Om0ucG9zP3Iuc2Vla05leHQuY2FsbChjLG0ucG9zLmJlZ2luP20ucG9zLmJlZ2luOm0ucG9zKTpyLmdldExhc3RWYWxpZFBvc2l0aW9uLmNhbGwoYywtMSwhMCk7KHQhPT1uLmtleXMuRGVsZXRlfHxpLmJlZ2luPmcpJiZpLmJlZ2lufX0hMCE9PW8mJih1LnA9dD09PW4ua2V5cy5EZWxldGU/aS5iZWdpbitwOmkuYmVnaW4sdS5wPXIuZGV0ZXJtaW5lTmV3Q2FyZXRQb3NpdGlvbi5jYWxsKGMse2JlZ2luOnUucCxlbmQ6dS5wfSwhMSwhMT09PWYuaW5zZXJ0TW9kZSYmdD09PW4ua2V5cy5CYWNrc3BhY2U/XCJub25lXCI6dm9pZCAwKS5iZWdpbil9fSx0LmlzQ29tcGxldGU9Yyx0LmlzU2VsZWN0aW9uPXUsdC5pc1ZhbGlkPWYsdC5yZWZyZXNoRnJvbUJ1ZmZlcj1wLHQucmV2YWxpZGF0ZU1hc2s9djt2YXIgYT1pKDQ3MTMpLG49aSgyODM5KSxyPWkoODcxMSksbz1pKDYwMzApO2Z1bmN0aW9uIHMoZSx0LGksbixvLGwpe3ZhciBjLHUsZCxwLGgsdixtLGcsayx5LGIseD10aGlzLFA9dGhpcy5kZXBlbmRlbmN5TGliLHc9dGhpcy5vcHRzLFM9eC5tYXNrc2V0LF89UC5leHRlbmQoITAsW10sUy52YWxpZFBvc2l0aW9ucyksTT1QLmV4dGVuZCghMCx7fSxTLnRlc3RzKSxPPSExLEU9ITEsVD12b2lkIDAhPT1vP286ci5nZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKHgpO2lmKGwmJih5PWwuYmVnaW4sYj1sLmVuZCxsLmJlZ2luPmwuZW5kJiYoeT1sLmVuZCxiPWwuYmVnaW4pKSwtMT09PVQmJnZvaWQgMD09PW8pYz0wLHU9KHA9YS5nZXRUZXN0LmNhbGwoeCxjKSkuYWx0ZXJuYXRpb247ZWxzZSBmb3IoO1Q+PTA7VC0tKWlmKChkPVMudmFsaWRQb3NpdGlvbnNbVF0pJiZ2b2lkIDAhPT1kLmFsdGVybmF0aW9uKXtpZihwJiZwLmxvY2F0b3JbZC5hbHRlcm5hdGlvbl0hPT1kLmxvY2F0b3JbZC5hbHRlcm5hdGlvbl0pYnJlYWs7Yz1ULHU9Uy52YWxpZFBvc2l0aW9uc1tjXS5hbHRlcm5hdGlvbixwPWR9aWYodm9pZCAwIT09dSl7bT1wYXJzZUludChjKSxTLmV4Y2x1ZGVzW21dPVMuZXhjbHVkZXNbbV18fFtdLCEwIT09ZSYmUy5leGNsdWRlc1ttXS5wdXNoKCgwLGEuZ2V0RGVjaXNpb25UYWtlcikocCkrXCI6XCIrcC5hbHRlcm5hdGlvbik7dmFyIGo9W10sRD0tMTtmb3IoaD1tO2g8ci5nZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKHgsdm9pZCAwLCEwKSsxO2grKyktMT09PUQmJmU8PWgmJnZvaWQgMCE9PXQmJihqLnB1c2godCksRD1qLmxlbmd0aC0xKSwodj1TLnZhbGlkUG9zaXRpb25zW2hdKSYmITAhPT12LmdlbmVyYXRlZElucHV0JiYodm9pZCAwPT09bHx8aDx5fHxoPj1iKSYmai5wdXNoKHYuaW5wdXQpLGRlbGV0ZSBTLnZhbGlkUG9zaXRpb25zW2hdO2ZvcigtMT09PUQmJnZvaWQgMCE9PXQmJihqLnB1c2godCksRD1qLmxlbmd0aC0xKTt2b2lkIDAhPT1TLmV4Y2x1ZGVzW21dJiZTLmV4Y2x1ZGVzW21dLmxlbmd0aDwxMDspe2ZvcihTLnRlc3RzPXt9LHIucmVzZXRNYXNrU2V0LmNhbGwoeCwhMCksTz0hMCxoPTA7aDxqLmxlbmd0aCYmKGc9Ty5jYXJldHx8ci5nZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKHgsdm9pZCAwLCEwKSsxLGs9altoXSxPPWYuY2FsbCh4LGcsaywhMSxuLCEwKSk7aCsrKWg9PT1EJiYoRT1PKSwxPT1lJiZPJiYoRT17Y2FyZXRQb3M6aH0pO2lmKE8pYnJlYWs7aWYoci5yZXNldE1hc2tTZXQuY2FsbCh4KSxwPWEuZ2V0VGVzdC5jYWxsKHgsbSksUy52YWxpZFBvc2l0aW9ucz1QLmV4dGVuZCghMCxbXSxfKSxTLnRlc3RzPVAuZXh0ZW5kKCEwLHt9LE0pLCFTLmV4Y2x1ZGVzW21dKXtFPXMuY2FsbCh4LGUsdCxpLG4sbS0xLGwpO2JyZWFrfXZhciBBPSgwLGEuZ2V0RGVjaXNpb25UYWtlcikocCk7aWYoLTEhPT1TLmV4Y2x1ZGVzW21dLmluZGV4T2YoQStcIjpcIitwLmFsdGVybmF0aW9uKSl7RT1zLmNhbGwoeCxlLHQsaSxuLG0tMSxsKTticmVha31mb3IoUy5leGNsdWRlc1ttXS5wdXNoKEErXCI6XCIrcC5hbHRlcm5hdGlvbiksaD1tO2g8ci5nZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKHgsdm9pZCAwLCEwKSsxO2grKylkZWxldGUgUy52YWxpZFBvc2l0aW9uc1toXX19cmV0dXJuIEUmJiExPT09dy5rZWVwU3RhdGljfHxkZWxldGUgUy5leGNsdWRlc1ttXSxFfWZ1bmN0aW9uIGwoZSx0LGkpe3ZhciBhPXRoaXMub3B0cyxyPXRoaXMubWFza3NldDtzd2l0Y2goYS5jYXNpbmd8fHQuY2FzaW5nKXtjYXNlXCJ1cHBlclwiOmU9ZS50b1VwcGVyQ2FzZSgpO2JyZWFrO2Nhc2VcImxvd2VyXCI6ZT1lLnRvTG93ZXJDYXNlKCk7YnJlYWs7Y2FzZVwidGl0bGVcIjp2YXIgbz1yLnZhbGlkUG9zaXRpb25zW2ktMV07ZT0wPT09aXx8byYmby5pbnB1dD09PVN0cmluZy5mcm9tQ2hhckNvZGUobi5rZXlDb2RlLlNwYWNlKT9lLnRvVXBwZXJDYXNlKCk6ZS50b0xvd2VyQ2FzZSgpO2JyZWFrO2RlZmF1bHQ6aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgYS5jYXNpbmcpe3ZhciBzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7cy5wdXNoKHIudmFsaWRQb3NpdGlvbnMpLGU9YS5jYXNpbmcuYXBwbHkodGhpcyxzKX19cmV0dXJuIGV9ZnVuY3Rpb24gYyhlKXt2YXIgdD10aGlzLGk9dGhpcy5vcHRzLG49dGhpcy5tYXNrc2V0O2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGkuaXNDb21wbGV0ZSlyZXR1cm4gaS5pc0NvbXBsZXRlKGUsaSk7aWYoXCIqXCIhPT1pLnJlcGVhdCl7dmFyIG89ITEscz1yLmRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uLmNhbGwodCwhMCksbD1yLnNlZWtQcmV2aW91cy5jYWxsKHQscy5sKTtpZih2b2lkIDA9PT1zLmRlZnx8cy5kZWYubmV3QmxvY2tNYXJrZXJ8fHMuZGVmLm9wdGlvbmFsaXR5fHxzLmRlZi5vcHRpb25hbFF1YW50aWZpZXIpe289ITA7Zm9yKHZhciBjPTA7Yzw9bDtjKyspe3ZhciB1PWEuZ2V0VGVzdFRlbXBsYXRlLmNhbGwodCxjKS5tYXRjaDtpZighMCE9PXUuc3RhdGljJiZ2b2lkIDA9PT1uLnZhbGlkUG9zaXRpb25zW2NdJiYhMCE9PXUub3B0aW9uYWxpdHkmJiEwIT09dS5vcHRpb25hbFF1YW50aWZpZXJ8fCEwPT09dS5zdGF0aWMmJmVbY10hPT1hLmdldFBsYWNlaG9sZGVyLmNhbGwodCxjLHUpKXtvPSExO2JyZWFrfX19cmV0dXJuIG99fWZ1bmN0aW9uIHUoZSl7dmFyIHQ9dGhpcy5vcHRzLmluc2VydE1vZGU/MDoxO3JldHVybiB0aGlzLmlzUlRMP2UuYmVnaW4tZS5lbmQ+dDplLmVuZC1lLmJlZ2luPnR9ZnVuY3Rpb24gZihlLHQsaSxuLG8sZCxtKXt2YXIgZz10aGlzLGs9dGhpcy5kZXBlbmRlbmN5TGliLHk9dGhpcy5vcHRzLGI9Zy5tYXNrc2V0O2k9ITA9PT1pO3ZhciB4PWU7ZnVuY3Rpb24gUChlKXtpZih2b2lkIDAhPT1lKXtpZih2b2lkIDAhPT1lLnJlbW92ZSYmKEFycmF5LmlzQXJyYXkoZS5yZW1vdmUpfHwoZS5yZW1vdmU9W2UucmVtb3ZlXSksZS5yZW1vdmUuc29ydCgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZy5pc1JUTD9lLnBvcy10LnBvczp0LnBvcy1lLnBvc30pKS5mb3JFYWNoKChmdW5jdGlvbihlKXt2LmNhbGwoZyx7YmVnaW46ZSxlbmQ6ZSsxfSl9KSksZS5yZW1vdmU9dm9pZCAwKSx2b2lkIDAhPT1lLmluc2VydCYmKEFycmF5LmlzQXJyYXkoZS5pbnNlcnQpfHwoZS5pbnNlcnQ9W2UuaW5zZXJ0XSksZS5pbnNlcnQuc29ydCgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZy5pc1JUTD90LnBvcy1lLnBvczplLnBvcy10LnBvc30pKS5mb3JFYWNoKChmdW5jdGlvbihlKXtcIlwiIT09ZS5jJiZmLmNhbGwoZyxlLnBvcyxlLmMsdm9pZCAwPT09ZS5zdHJpY3R8fGUuc3RyaWN0LHZvaWQgMCE9PWUuZnJvbUlzVmFsaWQ/ZS5mcm9tSXNWYWxpZDpuKX0pKSxlLmluc2VydD12b2lkIDApLGUucmVmcmVzaEZyb21CdWZmZXImJmUuYnVmZmVyKXt2YXIgdD1lLnJlZnJlc2hGcm9tQnVmZmVyO3AuY2FsbChnLCEwPT09dD90OnQuc3RhcnQsdC5lbmQsZS5idWZmZXIpLGUucmVmcmVzaEZyb21CdWZmZXI9dm9pZCAwfXZvaWQgMCE9PWUucmV3cml0ZVBvc2l0aW9uJiYoeD1lLnJld3JpdGVQb3NpdGlvbixlPSEwKX1yZXR1cm4gZX1mdW5jdGlvbiB3KHQsaSxvKXt2YXIgcz0hMTtyZXR1cm4gYS5nZXRUZXN0cy5jYWxsKGcsdCkuZXZlcnkoKGZ1bmN0aW9uKGMsZil7dmFyIGQ9Yy5tYXRjaDtpZihyLmdldEJ1ZmZlci5jYWxsKGcsITApLCExIT09KHM9KCFkLmppdHx8dm9pZCAwIT09Yi52YWxpZFBvc2l0aW9uc1tyLnNlZWtQcmV2aW91cy5jYWxsKGcsdCldKSYmKG51bGwhPWQuZm4/ZC5mbi50ZXN0KGksYix0LG8seSx1LmNhbGwoZyxlKSk6KGk9PT1kLmRlZnx8aT09PXkuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcikmJlwiXCIhPT1kLmRlZiYme2M6YS5nZXRQbGFjZWhvbGRlci5jYWxsKGcsdCxkLCEwKXx8ZC5kZWYscG9zOnR9KSkpe3ZhciBwPXZvaWQgMCE9PXMuYz9zLmM6aSxoPXQ7cmV0dXJuIHA9cD09PXkuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlciYmITA9PT1kLnN0YXRpYz9hLmdldFBsYWNlaG9sZGVyLmNhbGwoZyx0LGQsITApfHxkLmRlZjpwLCEwIT09KHM9UChzKSkmJnZvaWQgMCE9PXMucG9zJiZzLnBvcyE9PXQmJihoPXMucG9zKSwhMCE9PXMmJnZvaWQgMD09PXMucG9zJiZ2b2lkIDA9PT1zLmM/ITE6KCExPT09di5jYWxsKGcsZSxrLmV4dGVuZCh7fSxjLHtpbnB1dDpsLmNhbGwoZyxwLGQsaCl9KSxuLGgpJiYocz0hMSksITEpfXJldHVybiEwfSkpLHN9dm9pZCAwIT09ZS5iZWdpbiYmKHg9Zy5pc1JUTD9lLmVuZDplLmJlZ2luKTt2YXIgUz0hMCxfPWsuZXh0ZW5kKCEwLHt9LGIudmFsaWRQb3NpdGlvbnMpO2lmKCExPT09eS5rZWVwU3RhdGljJiZ2b2lkIDAhPT1iLmV4Y2x1ZGVzW3hdJiYhMCE9PW8mJiEwIT09bilmb3IodmFyIE09eDtNPChnLmlzUlRMP2UuYmVnaW46ZS5lbmQpO00rKyl2b2lkIDAhPT1iLmV4Y2x1ZGVzW01dJiYoYi5leGNsdWRlc1tNXT12b2lkIDAsZGVsZXRlIGIudGVzdHNbTV0pO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHkucHJlVmFsaWRhdGlvbiYmITAhPT1uJiYhMCE9PWQmJihTPVAoUz15LnByZVZhbGlkYXRpb24uY2FsbChnLHIuZ2V0QnVmZmVyLmNhbGwoZykseCx0LHUuY2FsbChnLGUpLHksYixlLGl8fG8pKSksITA9PT1TKXtpZihTPXcoeCx0LGkpLCghaXx8ITA9PT1uKSYmITE9PT1TJiYhMCE9PWQpe3ZhciBPPWIudmFsaWRQb3NpdGlvbnNbeF07aWYoIU98fCEwIT09Ty5tYXRjaC5zdGF0aWN8fE8ubWF0Y2guZGVmIT09dCYmdCE9PXkuc2tpcE9wdGlvbmFsUGFydENoYXJhY3Rlcil7aWYoeS5pbnNlcnRNb2RlfHx2b2lkIDA9PT1iLnZhbGlkUG9zaXRpb25zW3Iuc2Vla05leHQuY2FsbChnLHgpXXx8ZS5lbmQ+eCl7dmFyIEU9ITE7aWYoYi5qaXRPZmZzZXRbeF0mJnZvaWQgMD09PWIudmFsaWRQb3NpdGlvbnNbci5zZWVrTmV4dC5jYWxsKGcseCldJiYhMSE9PShTPWYuY2FsbChnLHgrYi5qaXRPZmZzZXRbeF0sdCwhMCwhMCkpJiYoITAhPT1vJiYoUy5jYXJldD14KSxFPSEwKSxlLmVuZD54JiYoYi52YWxpZFBvc2l0aW9uc1t4XT12b2lkIDApLCFFJiYhci5pc01hc2suY2FsbChnLHgseS5rZWVwU3RhdGljJiYwPT09eCkpZm9yKHZhciBUPXgrMSxqPXIuc2Vla05leHQuY2FsbChnLHgsITEsMCE9PXgpO1Q8PWo7VCsrKWlmKCExIT09KFM9dyhULHQsaSkpKXtTPWguY2FsbChnLHgsdm9pZCAwIT09Uy5wb3M/Uy5wb3M6VCl8fFMseD1UO2JyZWFrfX19ZWxzZSBTPXtjYXJldDpyLnNlZWtOZXh0LmNhbGwoZyx4KX19ITEhPT1TfHwheS5rZWVwU3RhdGljfHwhYy5jYWxsKGcsci5nZXRCdWZmZXIuY2FsbChnKSkmJjAhPT14fHxpfHwhMD09PW8/dS5jYWxsKGcsZSkmJmIudGVzdHNbeF0mJmIudGVzdHNbeF0ubGVuZ3RoPjEmJnkua2VlcFN0YXRpYyYmIWkmJiEwIT09byYmKFM9cy5jYWxsKGcsITApKTpTPXMuY2FsbChnLHgsdCxpLG4sdm9pZCAwLGUpLCEwPT09UyYmKFM9e3Bvczp4fSl9aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgeS5wb3N0VmFsaWRhdGlvbiYmITAhPT1uJiYhMCE9PWQpe3ZhciBEPXkucG9zdFZhbGlkYXRpb24uY2FsbChnLHIuZ2V0QnVmZmVyLmNhbGwoZywhMCksdm9pZCAwIT09ZS5iZWdpbj9nLmlzUlRMP2UuZW5kOmUuYmVnaW46ZSx0LFMseSxiLGksbSk7dm9pZCAwIT09RCYmKFM9ITA9PT1EP1M6RCl9UyYmdm9pZCAwPT09Uy5wb3MmJihTLnBvcz14KSwhMT09PVN8fCEwPT09ZD8oci5yZXNldE1hc2tTZXQuY2FsbChnLCEwKSxiLnZhbGlkUG9zaXRpb25zPWsuZXh0ZW5kKCEwLFtdLF8pKTpoLmNhbGwoZyx2b2lkIDAseCwhMCk7dmFyIEE9UChTKTt2b2lkIDAhPT1nLm1heExlbmd0aCYmKHIuZ2V0QnVmZmVyLmNhbGwoZykubGVuZ3RoPmcubWF4TGVuZ3RoJiYhbiYmKHIucmVzZXRNYXNrU2V0LmNhbGwoZywhMCksYi52YWxpZFBvc2l0aW9ucz1rLmV4dGVuZCghMCxbXSxfKSxBPSExKSk7cmV0dXJuIEF9ZnVuY3Rpb24gZChlLHQsaSl7Zm9yKHZhciBuPXRoaXMubWFza3NldCxyPSExLG89YS5nZXRUZXN0cy5jYWxsKHRoaXMsZSkscz0wO3M8by5sZW5ndGg7cysrKXtpZihvW3NdLm1hdGNoJiYob1tzXS5tYXRjaC5uYXRpdmVEZWY9PT10Lm1hdGNoW2kuc2hpZnRQb3NpdGlvbnM/XCJkZWZcIjpcIm5hdGl2ZURlZlwiXSYmKCFpLnNoaWZ0UG9zaXRpb25zfHwhdC5tYXRjaC5zdGF0aWMpfHxvW3NdLm1hdGNoLm5hdGl2ZURlZj09PXQubWF0Y2gubmF0aXZlRGVmfHxpLnJlZ2V4JiYhb1tzXS5tYXRjaC5zdGF0aWMmJm9bc10ubWF0Y2guZm4udGVzdCh0LmlucHV0LG4sZSwhMSxpKSkpe3I9ITA7YnJlYWt9aWYob1tzXS5tYXRjaCYmb1tzXS5tYXRjaC5kZWY9PT10Lm1hdGNoLm5hdGl2ZURlZil7cj12b2lkIDA7YnJlYWt9fXJldHVybiExPT09ciYmdm9pZCAwIT09bi5qaXRPZmZzZXRbZV0mJihyPWQuY2FsbCh0aGlzLGUrbi5qaXRPZmZzZXRbZV0sdCxpKSkscn1mdW5jdGlvbiBwKGUsdCxpKXt2YXIgYSxuLHM9dGhpcyxsPXRoaXMubWFza3NldCxjPXRoaXMub3B0cyx1PXRoaXMuZGVwZW5kZW5jeUxpYixmPWMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcixkPXMuaXNSVEw/aS5zbGljZSgpLnJldmVyc2UoKTppO2lmKGMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3Rlcj1cIlwiLCEwPT09ZSlyLnJlc2V0TWFza1NldC5jYWxsKHMpLGwudGVzdHM9e30sZT0wLHQ9aS5sZW5ndGgsbj1yLmRldGVybWluZU5ld0NhcmV0UG9zaXRpb24uY2FsbChzLHtiZWdpbjowLGVuZDowfSwhMSkuYmVnaW47ZWxzZXtmb3IoYT1lO2E8dDthKyspZGVsZXRlIGwudmFsaWRQb3NpdGlvbnNbYV07bj1lfXZhciBwPW5ldyB1LkV2ZW50KFwia2V5cHJlc3NcIik7Zm9yKGE9ZTthPHQ7YSsrKXtwLmtleT1kW2FdLnRvU3RyaW5nKCkscy5pZ25vcmFibGU9ITE7dmFyIGg9by5FdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChzLHAsITAsITEsITEsbik7ITEhPT1oJiZ2b2lkIDAhPT1oJiYobj1oLmZvcndhcmRQb3NpdGlvbil9Yy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyPWZ9ZnVuY3Rpb24gaChlLHQsaSl7dmFyIG49dGhpcyxvPXRoaXMubWFza3NldCxzPXRoaXMuZGVwZW5kZW5jeUxpYjtpZih2b2lkIDA9PT1lKWZvcihlPXQtMTtlPjAmJiFvLnZhbGlkUG9zaXRpb25zW2VdO2UtLSk7Zm9yKHZhciBsPWU7bDx0O2wrKyl7aWYodm9pZCAwPT09by52YWxpZFBvc2l0aW9uc1tsXSYmIXIuaXNNYXNrLmNhbGwobixsLCExKSlpZigwPT1sP2EuZ2V0VGVzdC5jYWxsKG4sbCk6by52YWxpZFBvc2l0aW9uc1tsLTFdKXt2YXIgYz1hLmdldFRlc3RzLmNhbGwobixsKS5zbGljZSgpO1wiXCI9PT1jW2MubGVuZ3RoLTFdLm1hdGNoLmRlZiYmYy5wb3AoKTt2YXIgdSxkPWEuZGV0ZXJtaW5lVGVzdFRlbXBsYXRlLmNhbGwobixsLGMpO2lmKGQmJighMCE9PWQubWF0Y2guaml0fHxcIm1hc3RlclwiPT09ZC5tYXRjaC5uZXdCbG9ja01hcmtlciYmKHU9by52YWxpZFBvc2l0aW9uc1tsKzFdKSYmITA9PT11Lm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllcikmJigoZD1zLmV4dGVuZCh7fSxkLHtpbnB1dDphLmdldFBsYWNlaG9sZGVyLmNhbGwobixsLGQubWF0Y2gsITApfHxkLm1hdGNoLmRlZn0pKS5nZW5lcmF0ZWRJbnB1dD0hMCx2LmNhbGwobixsLGQsITApLCEwIT09aSkpe3ZhciBwPW8udmFsaWRQb3NpdGlvbnNbdF0uaW5wdXQ7cmV0dXJuIG8udmFsaWRQb3NpdGlvbnNbdF09dm9pZCAwLGYuY2FsbChuLHQscCwhMCwhMCl9fX19ZnVuY3Rpb24gdihlLHQsaSxuKXt2YXIgbz10aGlzLHM9dGhpcy5tYXNrc2V0LGw9dGhpcy5vcHRzLGM9dGhpcy5kZXBlbmRlbmN5TGliO2Z1bmN0aW9uIHUoZSx0LGkpe3ZhciBhPXRbZV07aWYodm9pZCAwIT09YSYmITA9PT1hLm1hdGNoLnN0YXRpYyYmITAhPT1hLm1hdGNoLm9wdGlvbmFsaXR5JiYodm9pZCAwPT09dFswXXx8dm9pZCAwPT09dFswXS5hbHRlcm5hdGlvbikpe3ZhciBuPWkuYmVnaW48PWUtMT90W2UtMV0mJiEwPT09dFtlLTFdLm1hdGNoLnN0YXRpYyYmdFtlLTFdOnRbZS0xXSxyPWkuZW5kPmUrMT90W2UrMV0mJiEwPT09dFtlKzFdLm1hdGNoLnN0YXRpYyYmdFtlKzFdOnRbZSsxXTtyZXR1cm4gbiYmcn1yZXR1cm4hMX12YXIgcD0wLGg9dm9pZCAwIT09ZS5iZWdpbj9lLmJlZ2luOmUsdj12b2lkIDAhPT1lLmVuZD9lLmVuZDplLG09ITA7aWYoZS5iZWdpbj5lLmVuZCYmKGg9ZS5lbmQsdj1lLmJlZ2luKSxuPXZvaWQgMCE9PW4/bjpoLHZvaWQgMD09PWkmJihoIT09dnx8bC5pbnNlcnRNb2RlJiZ2b2lkIDAhPT1zLnZhbGlkUG9zaXRpb25zW25dfHx2b2lkIDA9PT10fHx0Lm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllcnx8dC5tYXRjaC5vcHRpb25hbGl0eSkpe3ZhciBnLGs9Yy5leHRlbmQoITAse30scy52YWxpZFBvc2l0aW9ucykseT1yLmdldExhc3RWYWxpZFBvc2l0aW9uLmNhbGwobyx2b2lkIDAsITApO2ZvcihzLnA9aCxnPXk7Zz49aDtnLS0pZGVsZXRlIHMudmFsaWRQb3NpdGlvbnNbZ10sdm9pZCAwPT09dCYmZGVsZXRlIHMudGVzdHNbZysxXTt2YXIgYix4LFA9bix3PVA7Zm9yKHQmJihzLnZhbGlkUG9zaXRpb25zW25dPWMuZXh0ZW5kKCEwLHt9LHQpLHcrKyxQKyspLGc9dD92OnYtMTtnPD15O2crKyl7aWYodm9pZCAwIT09KGI9a1tnXSkmJiEwIT09Yi5nZW5lcmF0ZWRJbnB1dCYmKGc+PXZ8fGc+PWgmJnUoZyxrLHtiZWdpbjpoLGVuZDp2fSkpKXtmb3IoO1wiXCIhPT1hLmdldFRlc3QuY2FsbChvLHcpLm1hdGNoLmRlZjspe2lmKCExIT09KHg9ZC5jYWxsKG8sdyxiLGwpKXx8XCIrXCI9PT1iLm1hdGNoLmRlZil7XCIrXCI9PT1iLm1hdGNoLmRlZiYmci5nZXRCdWZmZXIuY2FsbChvLCEwKTt2YXIgUz1mLmNhbGwobyx3LGIuaW5wdXQsXCIrXCIhPT1iLm1hdGNoLmRlZiwhMCk7aWYobT0hMSE9PVMsUD0oUy5wb3N8fHcpKzEsIW0mJngpYnJlYWt9ZWxzZSBtPSExO2lmKG0pe3ZvaWQgMD09PXQmJmIubWF0Y2guc3RhdGljJiZnPT09ZS5iZWdpbiYmcCsrO2JyZWFrfWlmKCFtJiZyLmdldEJ1ZmZlci5jYWxsKG8pLHc+cy5tYXNrTGVuZ3RoKWJyZWFrO3crK31cIlwiPT1hLmdldFRlc3QuY2FsbChvLHcpLm1hdGNoLmRlZiYmKG09ITEpLHc9UH1pZighbSlicmVha31pZighbSlyZXR1cm4gcy52YWxpZFBvc2l0aW9ucz1jLmV4dGVuZCghMCxbXSxrKSxyLnJlc2V0TWFza1NldC5jYWxsKG8sITApLCExfWVsc2UgdCYmYS5nZXRUZXN0LmNhbGwobyxuKS5tYXRjaC5jZD09PXQubWF0Y2guY2QmJihzLnZhbGlkUG9zaXRpb25zW25dPWMuZXh0ZW5kKCEwLHt9LHQpKTtyZXR1cm4gci5yZXNldE1hc2tTZXQuY2FsbChvLCEwKSxwfX19LHQ9e307ZnVuY3Rpb24gaShhKXt2YXIgbj10W2FdO2lmKHZvaWQgMCE9PW4pcmV0dXJuIG4uZXhwb3J0czt2YXIgcj10W2FdPXtleHBvcnRzOnt9fTtyZXR1cm4gZVthXShyLHIuZXhwb3J0cyxpKSxyLmV4cG9ydHN9dmFyIGE9e307cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUsdD1hO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD12b2lkIDAsaSgzODUxKSxpKDIxOSksaSgyMDcpLGkoNTI5Nik7dmFyIG49KChlPWkoMjM5NCkpJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfSkuZGVmYXVsdDt0LmRlZmF1bHQ9bn0oKSxhfSgpfSkpO1xuIiwiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIExvZGFzaCBsb2Rhc2guY29tL2xpY2Vuc2UgfCBVbmRlcnNjb3JlLmpzIDEuOC4zIHVuZGVyc2NvcmVqcy5vcmcvTElDRU5TRVxyXG4gKi9cclxuOyhmdW5jdGlvbigpe2Z1bmN0aW9uIG4obix0LHIpe3N3aXRjaChyLmxlbmd0aCl7Y2FzZSAwOnJldHVybiBuLmNhbGwodCk7Y2FzZSAxOnJldHVybiBuLmNhbGwodCxyWzBdKTtjYXNlIDI6cmV0dXJuIG4uY2FsbCh0LHJbMF0sclsxXSk7Y2FzZSAzOnJldHVybiBuLmNhbGwodCxyWzBdLHJbMV0sclsyXSl9cmV0dXJuIG4uYXBwbHkodCxyKX1mdW5jdGlvbiB0KG4sdCxyLGUpe2Zvcih2YXIgdT0tMSxpPW51bGw9PW4/MDpuLmxlbmd0aDsrK3U8aTspe3ZhciBvPW5bdV07dChlLG8scihvKSxuKX1yZXR1cm4gZX1mdW5jdGlvbiByKG4sdCl7Zm9yKHZhciByPS0xLGU9bnVsbD09bj8wOm4ubGVuZ3RoOysrcjxlJiZmYWxzZSE9PXQobltyXSxyLG4pOyk7cmV0dXJuIG59ZnVuY3Rpb24gZShuLHQpe2Zvcih2YXIgcj1udWxsPT1uPzA6bi5sZW5ndGg7ci0tJiZmYWxzZSE9PXQobltyXSxyLG4pOyk7cmV0dXJuIG59ZnVuY3Rpb24gdShuLHQpe2Zvcih2YXIgcj0tMSxlPW51bGw9PW4/MDpuLmxlbmd0aDsrK3I8ZTspaWYoIXQobltyXSxyLG4pKXJldHVybiBmYWxzZTtcclxuICByZXR1cm4gdHJ1ZX1mdW5jdGlvbiBpKG4sdCl7Zm9yKHZhciByPS0xLGU9bnVsbD09bj8wOm4ubGVuZ3RoLHU9MCxpPVtdOysrcjxlOyl7dmFyIG89bltyXTt0KG8scixuKSYmKGlbdSsrXT1vKX1yZXR1cm4gaX1mdW5jdGlvbiBvKG4sdCl7cmV0dXJuIShudWxsPT1ufHwhbi5sZW5ndGgpJiYtMTx2KG4sdCwwKX1mdW5jdGlvbiBmKG4sdCxyKXtmb3IodmFyIGU9LTEsdT1udWxsPT1uPzA6bi5sZW5ndGg7KytlPHU7KWlmKHIodCxuW2VdKSlyZXR1cm4gdHJ1ZTtyZXR1cm4gZmFsc2V9ZnVuY3Rpb24gYyhuLHQpe2Zvcih2YXIgcj0tMSxlPW51bGw9PW4/MDpuLmxlbmd0aCx1PUFycmF5KGUpOysrcjxlOyl1W3JdPXQobltyXSxyLG4pO3JldHVybiB1fWZ1bmN0aW9uIGEobix0KXtmb3IodmFyIHI9LTEsZT10Lmxlbmd0aCx1PW4ubGVuZ3RoOysrcjxlOyluW3Urcl09dFtyXTtyZXR1cm4gbn1mdW5jdGlvbiBsKG4sdCxyLGUpe3ZhciB1PS0xLGk9bnVsbD09bj8wOm4ubGVuZ3RoO2ZvcihlJiZpJiYocj1uWysrdV0pOysrdTxpOylyPXQocixuW3VdLHUsbik7XHJcbiAgcmV0dXJuIHJ9ZnVuY3Rpb24gcyhuLHQscixlKXt2YXIgdT1udWxsPT1uPzA6bi5sZW5ndGg7Zm9yKGUmJnUmJihyPW5bLS11XSk7dS0tOylyPXQocixuW3VdLHUsbik7cmV0dXJuIHJ9ZnVuY3Rpb24gaChuLHQpe2Zvcih2YXIgcj0tMSxlPW51bGw9PW4/MDpuLmxlbmd0aDsrK3I8ZTspaWYodChuW3JdLHIsbikpcmV0dXJuIHRydWU7cmV0dXJuIGZhbHNlfWZ1bmN0aW9uIHAobix0LHIpe3ZhciBlO3JldHVybiByKG4sZnVuY3Rpb24obixyLHUpe2lmKHQobixyLHUpKXJldHVybiBlPXIsZmFsc2V9KSxlfWZ1bmN0aW9uIF8obix0LHIsZSl7dmFyIHU9bi5sZW5ndGg7Zm9yKHIrPWU/MTotMTtlP3ItLTorK3I8dTspaWYodChuW3JdLHIsbikpcmV0dXJuIHI7cmV0dXJuLTF9ZnVuY3Rpb24gdihuLHQscil7aWYodD09PXQpbjp7LS1yO2Zvcih2YXIgZT1uLmxlbmd0aDsrK3I8ZTspaWYobltyXT09PXQpe249cjticmVhayBufW49LTF9ZWxzZSBuPV8obixkLHIpO3JldHVybiBufWZ1bmN0aW9uIGcobix0LHIsZSl7XHJcbiAgLS1yO2Zvcih2YXIgdT1uLmxlbmd0aDsrK3I8dTspaWYoZShuW3JdLHQpKXJldHVybiByO3JldHVybi0xfWZ1bmN0aW9uIGQobil7cmV0dXJuIG4hPT1ufWZ1bmN0aW9uIHkobix0KXt2YXIgcj1udWxsPT1uPzA6bi5sZW5ndGg7cmV0dXJuIHI/bShuLHQpL3I6Rn1mdW5jdGlvbiBiKG4pe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09dD9UOnRbbl19fWZ1bmN0aW9uIHgobil7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBudWxsPT1uP1Q6blt0XX19ZnVuY3Rpb24gaihuLHQscixlLHUpe3JldHVybiB1KG4sZnVuY3Rpb24obix1LGkpe3I9ZT8oZT1mYWxzZSxuKTp0KHIsbix1LGkpfSkscn1mdW5jdGlvbiB3KG4sdCl7dmFyIHI9bi5sZW5ndGg7Zm9yKG4uc29ydCh0KTtyLS07KW5bcl09bltyXS5jO3JldHVybiBufWZ1bmN0aW9uIG0obix0KXtmb3IodmFyIHIsZT0tMSx1PW4ubGVuZ3RoOysrZTx1Oyl7dmFyIGk9dChuW2VdKTtpIT09VCYmKHI9cj09PVQ/aTpyK2kpfXJldHVybiByO1xyXG4gIH1mdW5jdGlvbiBBKG4sdCl7Zm9yKHZhciByPS0xLGU9QXJyYXkobik7KytyPG47KWVbcl09dChyKTtyZXR1cm4gZX1mdW5jdGlvbiBFKG4sdCl7cmV0dXJuIGModCxmdW5jdGlvbih0KXtyZXR1cm5bdCxuW3RdXX0pfWZ1bmN0aW9uIGsobil7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBuKHQpfX1mdW5jdGlvbiBTKG4sdCl7cmV0dXJuIGModCxmdW5jdGlvbih0KXtyZXR1cm4gblt0XX0pfWZ1bmN0aW9uIE8obix0KXtyZXR1cm4gbi5oYXModCl9ZnVuY3Rpb24gSShuLHQpe2Zvcih2YXIgcj0tMSxlPW4ubGVuZ3RoOysrcjxlJiYtMTx2KHQsbltyXSwwKTspO3JldHVybiByfWZ1bmN0aW9uIFIobix0KXtmb3IodmFyIHI9bi5sZW5ndGg7ci0tJiYtMTx2KHQsbltyXSwwKTspO3JldHVybiByfWZ1bmN0aW9uIHoobil7cmV0dXJuXCJcXFxcXCIrVW5bbl19ZnVuY3Rpb24gVyhuKXt2YXIgdD0tMSxyPUFycmF5KG4uc2l6ZSk7cmV0dXJuIG4uZm9yRWFjaChmdW5jdGlvbihuLGUpe3JbKyt0XT1bZSxuXTtcclxuICB9KSxyfWZ1bmN0aW9uIEIobix0KXtyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIG4odChyKSl9fWZ1bmN0aW9uIEwobix0KXtmb3IodmFyIHI9LTEsZT1uLmxlbmd0aCx1PTAsaT1bXTsrK3I8ZTspe3ZhciBvPW5bcl07byE9PXQmJlwiX19sb2Rhc2hfcGxhY2Vob2xkZXJfX1wiIT09b3x8KG5bcl09XCJfX2xvZGFzaF9wbGFjZWhvbGRlcl9fXCIsaVt1KytdPXIpfXJldHVybiBpfWZ1bmN0aW9uIFUobil7dmFyIHQ9LTEscj1BcnJheShuLnNpemUpO3JldHVybiBuLmZvckVhY2goZnVuY3Rpb24obil7clsrK3RdPW59KSxyfWZ1bmN0aW9uIEMobil7dmFyIHQ9LTEscj1BcnJheShuLnNpemUpO3JldHVybiBuLmZvckVhY2goZnVuY3Rpb24obil7clsrK3RdPVtuLG5dfSkscn1mdW5jdGlvbiBEKG4pe2lmKFJuLnRlc3Qobikpe2Zvcih2YXIgdD1Pbi5sYXN0SW5kZXg9MDtPbi50ZXN0KG4pOykrK3Q7bj10fWVsc2Ugbj1RbihuKTtyZXR1cm4gbn1mdW5jdGlvbiBNKG4pe3JldHVybiBSbi50ZXN0KG4pP24ubWF0Y2goT24pfHxbXTpuLnNwbGl0KFwiXCIpO1xyXG4gIH12YXIgVCwkPTEvMCxGPU5hTixOPVtbXCJhcnlcIiwxMjhdLFtcImJpbmRcIiwxXSxbXCJiaW5kS2V5XCIsMl0sW1wiY3VycnlcIiw4XSxbXCJjdXJyeVJpZ2h0XCIsMTZdLFtcImZsaXBcIiw1MTJdLFtcInBhcnRpYWxcIiwzMl0sW1wicGFydGlhbFJpZ2h0XCIsNjRdLFtcInJlYXJnXCIsMjU2XV0sUD0vXFxiX19wXFwrPScnOy9nLFo9L1xcYihfX3BcXCs9KScnXFwrL2cscT0vKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpXFwrJyc7L2csVj0vJig/OmFtcHxsdHxndHxxdW90fCMzOSk7L2csSz0vWyY8PlwiJ10vZyxHPVJlZ0V4cChWLnNvdXJjZSksSD1SZWdFeHAoSy5zb3VyY2UpLEo9LzwlLShbXFxzXFxTXSs/KSU+L2csWT0vPCUoW1xcc1xcU10rPyklPi9nLFE9LzwlPShbXFxzXFxTXSs/KSU+L2csWD0vXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLG5uPS9eXFx3KiQvLHRuPS9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZyxybj0vW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csZW49UmVnRXhwKHJuLnNvdXJjZSksdW49L15cXHMrfFxccyskL2csb249L15cXHMrLyxmbj0vXFxzKyQvLGNuPS9cXHsoPzpcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoIC4rXFxdIFxcKlxcLyk/XFxuPy8sYW49L1xce1xcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggKC4rKVxcXSBcXCovLGxuPS8sPyAmIC8sc249L1teXFx4MDAtXFx4MmZcXHgzYS1cXHg0MFxceDViLVxceDYwXFx4N2ItXFx4N2ZdKy9nLGhuPS9cXFxcKFxcXFwpPy9nLHBuPS9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZyxfbj0vXFx3KiQvLHZuPS9eWy0rXTB4WzAtOWEtZl0rJC9pLGduPS9eMGJbMDFdKyQvaSxkbj0vXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvLHluPS9eMG9bMC03XSskL2ksYm49L14oPzowfFsxLTldXFxkKikkLyx4bj0vW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZyxqbj0vKCReKS8sd249L1snXFxuXFxyXFx1MjAyOFxcdTIwMjlcXFxcXS9nLG1uPVwiW1xcXFx1ZmUwZVxcXFx1ZmUwZl0/KD86W1xcXFx1MDMwMC1cXFxcdTAzNmZcXFxcdWZlMjAtXFxcXHVmZTJmXFxcXHUyMGQwLVxcXFx1MjBmZl18XFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdKT8oPzpcXFxcdTIwMGQoPzpbXlxcXFx1ZDgwMC1cXFxcdWRmZmZdfCg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn18W1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdKVtcXFxcdWZlMGVcXFxcdWZlMGZdPyg/OltcXFxcdTAzMDAtXFxcXHUwMzZmXFxcXHVmZTIwLVxcXFx1ZmUyZlxcXFx1MjBkMC1cXFxcdTIwZmZdfFxcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXSk/KSpcIixBbj1cIig/OltcXFxcdTI3MDAtXFxcXHUyN2JmXXwoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9fFtcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXSlcIittbixFbj1cIig/OlteXFxcXHVkODAwLVxcXFx1ZGZmZl1bXFxcXHUwMzAwLVxcXFx1MDM2ZlxcXFx1ZmUyMC1cXFxcdWZlMmZcXFxcdTIwZDAtXFxcXHUyMGZmXT98W1xcXFx1MDMwMC1cXFxcdTAzNmZcXFxcdWZlMjAtXFxcXHVmZTJmXFxcXHUyMGQwLVxcXFx1MjBmZl18KD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfXxbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl18W1xcXFx1ZDgwMC1cXFxcdWRmZmZdKVwiLGtuPVJlZ0V4cChcIlsnXFx1MjAxOV1cIixcImdcIiksU249UmVnRXhwKFwiW1xcXFx1MDMwMC1cXFxcdTAzNmZcXFxcdWZlMjAtXFxcXHVmZTJmXFxcXHUyMGQwLVxcXFx1MjBmZl1cIixcImdcIiksT249UmVnRXhwKFwiXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdKD89XFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdKXxcIitFbittbixcImdcIiksSW49UmVnRXhwKFtcIltBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGVdP1thLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmZdKyg/OlsnXFx1MjAxOV0oPzpkfGxsfG18cmV8c3x0fHZlKSk/KD89W1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjdcXFxceDAwLVxcXFx4MmZcXFxceDNhLVxcXFx4NDBcXFxceDViLVxcXFx4NjBcXFxceDdiLVxcXFx4YmZcXFxcdTIwMDAtXFxcXHUyMDZmIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDBdfFtBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGVdfCQpfCg/OltBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGVdfFteXFxcXHVkODAwLVxcXFx1ZGZmZlxcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjdcXFxceDAwLVxcXFx4MmZcXFxceDNhLVxcXFx4NDBcXFxceDViLVxcXFx4NjBcXFxceDdiLVxcXFx4YmZcXFxcdTIwMDAtXFxcXHUyMDZmIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDBcXFxcZCtcXFxcdTI3MDAtXFxcXHUyN2JmYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlXSkrKD86WydcXHUyMDE5XSg/OkR8TEx8TXxSRXxTfFR8VkUpKT8oPz1bXFxcXHhhY1xcXFx4YjFcXFxceGQ3XFxcXHhmN1xcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZlxcXFx1MjAwMC1cXFxcdTIwNmYgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMF18W0EtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZV0oPzpbYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmXXxbXlxcXFx1ZDgwMC1cXFxcdWRmZmZcXFxceGFjXFxcXHhiMVxcXFx4ZDdcXFxceGY3XFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmXFxcXHUyMDAwLVxcXFx1MjA2ZiBcXFxcdFxcXFx4MGJcXFxcZlxcXFx4YTBcXFxcdWZlZmZcXFxcblxcXFxyXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwXFxcXGQrXFxcXHUyNzAwLVxcXFx1MjdiZmEtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZkEtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZV0pfCQpfFtBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGVdPyg/OlthLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmZdfFteXFxcXHVkODAwLVxcXFx1ZGZmZlxcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjdcXFxceDAwLVxcXFx4MmZcXFxceDNhLVxcXFx4NDBcXFxceDViLVxcXFx4NjBcXFxceDdiLVxcXFx4YmZcXFxcdTIwMDAtXFxcXHUyMDZmIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDBcXFxcZCtcXFxcdTI3MDAtXFxcXHUyN2JmYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlXSkrKD86WydcXHUyMDE5XSg/OmR8bGx8bXxyZXxzfHR8dmUpKT98W0EtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZV0rKD86WydcXHUyMDE5XSg/OkR8TEx8TXxSRXxTfFR8VkUpKT98XFxcXGQqKD86MVNUfDJORHwzUkR8KD8hWzEyM10pXFxcXGRUSCkoPz1cXFxcYnxbYS16X10pfFxcXFxkKig/OjFzdHwybmR8M3JkfCg/IVsxMjNdKVxcXFxkdGgpKD89XFxcXGJ8W0EtWl9dKXxcXFxcZCtcIixBbl0uam9pbihcInxcIiksXCJnXCIpLFJuPVJlZ0V4cChcIltcXFxcdTIwMGRcXFxcdWQ4MDAtXFxcXHVkZmZmXFxcXHUwMzAwLVxcXFx1MDM2ZlxcXFx1ZmUyMC1cXFxcdWZlMmZcXFxcdTIwZDAtXFxcXHUyMGZmXFxcXHVmZTBlXFxcXHVmZTBmXVwiKSx6bj0vW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLyxXbj1cIkFycmF5IEJ1ZmZlciBEYXRhVmlldyBEYXRlIEVycm9yIEZsb2F0MzJBcnJheSBGbG9hdDY0QXJyYXkgRnVuY3Rpb24gSW50OEFycmF5IEludDE2QXJyYXkgSW50MzJBcnJheSBNYXAgTWF0aCBPYmplY3QgUHJvbWlzZSBSZWdFeHAgU2V0IFN0cmluZyBTeW1ib2wgVHlwZUVycm9yIFVpbnQ4QXJyYXkgVWludDhDbGFtcGVkQXJyYXkgVWludDE2QXJyYXkgVWludDMyQXJyYXkgV2Vha01hcCBfIGNsZWFyVGltZW91dCBpc0Zpbml0ZSBwYXJzZUludCBzZXRUaW1lb3V0XCIuc3BsaXQoXCIgXCIpLEJuPXt9O1xyXG4gIEJuW1wiW29iamVjdCBGbG9hdDMyQXJyYXldXCJdPUJuW1wiW29iamVjdCBGbG9hdDY0QXJyYXldXCJdPUJuW1wiW29iamVjdCBJbnQ4QXJyYXldXCJdPUJuW1wiW29iamVjdCBJbnQxNkFycmF5XVwiXT1CbltcIltvYmplY3QgSW50MzJBcnJheV1cIl09Qm5bXCJbb2JqZWN0IFVpbnQ4QXJyYXldXCJdPUJuW1wiW29iamVjdCBVaW50OENsYW1wZWRBcnJheV1cIl09Qm5bXCJbb2JqZWN0IFVpbnQxNkFycmF5XVwiXT1CbltcIltvYmplY3QgVWludDMyQXJyYXldXCJdPXRydWUsQm5bXCJbb2JqZWN0IEFyZ3VtZW50c11cIl09Qm5bXCJbb2JqZWN0IEFycmF5XVwiXT1CbltcIltvYmplY3QgQXJyYXlCdWZmZXJdXCJdPUJuW1wiW29iamVjdCBCb29sZWFuXVwiXT1CbltcIltvYmplY3QgRGF0YVZpZXddXCJdPUJuW1wiW29iamVjdCBEYXRlXVwiXT1CbltcIltvYmplY3QgRXJyb3JdXCJdPUJuW1wiW29iamVjdCBGdW5jdGlvbl1cIl09Qm5bXCJbb2JqZWN0IE1hcF1cIl09Qm5bXCJbb2JqZWN0IE51bWJlcl1cIl09Qm5bXCJbb2JqZWN0IE9iamVjdF1cIl09Qm5bXCJbb2JqZWN0IFJlZ0V4cF1cIl09Qm5bXCJbb2JqZWN0IFNldF1cIl09Qm5bXCJbb2JqZWN0IFN0cmluZ11cIl09Qm5bXCJbb2JqZWN0IFdlYWtNYXBdXCJdPWZhbHNlO1xyXG4gIHZhciBMbj17fTtMbltcIltvYmplY3QgQXJndW1lbnRzXVwiXT1MbltcIltvYmplY3QgQXJyYXldXCJdPUxuW1wiW29iamVjdCBBcnJheUJ1ZmZlcl1cIl09TG5bXCJbb2JqZWN0IERhdGFWaWV3XVwiXT1MbltcIltvYmplY3QgQm9vbGVhbl1cIl09TG5bXCJbb2JqZWN0IERhdGVdXCJdPUxuW1wiW29iamVjdCBGbG9hdDMyQXJyYXldXCJdPUxuW1wiW29iamVjdCBGbG9hdDY0QXJyYXldXCJdPUxuW1wiW29iamVjdCBJbnQ4QXJyYXldXCJdPUxuW1wiW29iamVjdCBJbnQxNkFycmF5XVwiXT1MbltcIltvYmplY3QgSW50MzJBcnJheV1cIl09TG5bXCJbb2JqZWN0IE1hcF1cIl09TG5bXCJbb2JqZWN0IE51bWJlcl1cIl09TG5bXCJbb2JqZWN0IE9iamVjdF1cIl09TG5bXCJbb2JqZWN0IFJlZ0V4cF1cIl09TG5bXCJbb2JqZWN0IFNldF1cIl09TG5bXCJbb2JqZWN0IFN0cmluZ11cIl09TG5bXCJbb2JqZWN0IFN5bWJvbF1cIl09TG5bXCJbb2JqZWN0IFVpbnQ4QXJyYXldXCJdPUxuW1wiW29iamVjdCBVaW50OENsYW1wZWRBcnJheV1cIl09TG5bXCJbb2JqZWN0IFVpbnQxNkFycmF5XVwiXT1MbltcIltvYmplY3QgVWludDMyQXJyYXldXCJdPXRydWUsXHJcbiAgTG5bXCJbb2JqZWN0IEVycm9yXVwiXT1MbltcIltvYmplY3QgRnVuY3Rpb25dXCJdPUxuW1wiW29iamVjdCBXZWFrTWFwXVwiXT1mYWxzZTt2YXIgVW49e1wiXFxcXFwiOlwiXFxcXFwiLFwiJ1wiOlwiJ1wiLFwiXFxuXCI6XCJuXCIsXCJcXHJcIjpcInJcIixcIlxcdTIwMjhcIjpcInUyMDI4XCIsXCJcXHUyMDI5XCI6XCJ1MjAyOVwifSxDbj1wYXJzZUZsb2F0LERuPXBhcnNlSW50LE1uPXR5cGVvZiBnbG9iYWw9PVwib2JqZWN0XCImJmdsb2JhbCYmZ2xvYmFsLk9iamVjdD09PU9iamVjdCYmZ2xvYmFsLFRuPXR5cGVvZiBzZWxmPT1cIm9iamVjdFwiJiZzZWxmJiZzZWxmLk9iamVjdD09PU9iamVjdCYmc2VsZiwkbj1Nbnx8VG58fEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSxGbj10eXBlb2YgZXhwb3J0cz09XCJvYmplY3RcIiYmZXhwb3J0cyYmIWV4cG9ydHMubm9kZVR5cGUmJmV4cG9ydHMsTm49Rm4mJnR5cGVvZiBtb2R1bGU9PVwib2JqZWN0XCImJm1vZHVsZSYmIW1vZHVsZS5ub2RlVHlwZSYmbW9kdWxlLFBuPU5uJiZObi5leHBvcnRzPT09Rm4sWm49UG4mJk1uLnByb2Nlc3MscW49ZnVuY3Rpb24oKXtcclxuICB0cnl7dmFyIG49Tm4mJk5uLmYmJk5uLmYoXCJ1dGlsXCIpLnR5cGVzO3JldHVybiBuP246Wm4mJlpuLmJpbmRpbmcmJlpuLmJpbmRpbmcoXCJ1dGlsXCIpfWNhdGNoKG4pe319KCksVm49cW4mJnFuLmlzQXJyYXlCdWZmZXIsS249cW4mJnFuLmlzRGF0ZSxHbj1xbiYmcW4uaXNNYXAsSG49cW4mJnFuLmlzUmVnRXhwLEpuPXFuJiZxbi5pc1NldCxZbj1xbiYmcW4uaXNUeXBlZEFycmF5LFFuPWIoXCJsZW5ndGhcIiksWG49eCh7XCJcXHhjMFwiOlwiQVwiLFwiXFx4YzFcIjpcIkFcIixcIlxceGMyXCI6XCJBXCIsXCJcXHhjM1wiOlwiQVwiLFwiXFx4YzRcIjpcIkFcIixcIlxceGM1XCI6XCJBXCIsXCJcXHhlMFwiOlwiYVwiLFwiXFx4ZTFcIjpcImFcIixcIlxceGUyXCI6XCJhXCIsXCJcXHhlM1wiOlwiYVwiLFwiXFx4ZTRcIjpcImFcIixcIlxceGU1XCI6XCJhXCIsXCJcXHhjN1wiOlwiQ1wiLFwiXFx4ZTdcIjpcImNcIixcIlxceGQwXCI6XCJEXCIsXCJcXHhmMFwiOlwiZFwiLFwiXFx4YzhcIjpcIkVcIixcIlxceGM5XCI6XCJFXCIsXCJcXHhjYVwiOlwiRVwiLFwiXFx4Y2JcIjpcIkVcIixcIlxceGU4XCI6XCJlXCIsXCJcXHhlOVwiOlwiZVwiLFwiXFx4ZWFcIjpcImVcIixcIlxceGViXCI6XCJlXCIsXCJcXHhjY1wiOlwiSVwiLFxyXG4gIFwiXFx4Y2RcIjpcIklcIixcIlxceGNlXCI6XCJJXCIsXCJcXHhjZlwiOlwiSVwiLFwiXFx4ZWNcIjpcImlcIixcIlxceGVkXCI6XCJpXCIsXCJcXHhlZVwiOlwiaVwiLFwiXFx4ZWZcIjpcImlcIixcIlxceGQxXCI6XCJOXCIsXCJcXHhmMVwiOlwiblwiLFwiXFx4ZDJcIjpcIk9cIixcIlxceGQzXCI6XCJPXCIsXCJcXHhkNFwiOlwiT1wiLFwiXFx4ZDVcIjpcIk9cIixcIlxceGQ2XCI6XCJPXCIsXCJcXHhkOFwiOlwiT1wiLFwiXFx4ZjJcIjpcIm9cIixcIlxceGYzXCI6XCJvXCIsXCJcXHhmNFwiOlwib1wiLFwiXFx4ZjVcIjpcIm9cIixcIlxceGY2XCI6XCJvXCIsXCJcXHhmOFwiOlwib1wiLFwiXFx4ZDlcIjpcIlVcIixcIlxceGRhXCI6XCJVXCIsXCJcXHhkYlwiOlwiVVwiLFwiXFx4ZGNcIjpcIlVcIixcIlxceGY5XCI6XCJ1XCIsXCJcXHhmYVwiOlwidVwiLFwiXFx4ZmJcIjpcInVcIixcIlxceGZjXCI6XCJ1XCIsXCJcXHhkZFwiOlwiWVwiLFwiXFx4ZmRcIjpcInlcIixcIlxceGZmXCI6XCJ5XCIsXCJcXHhjNlwiOlwiQWVcIixcIlxceGU2XCI6XCJhZVwiLFwiXFx4ZGVcIjpcIlRoXCIsXCJcXHhmZVwiOlwidGhcIixcIlxceGRmXCI6XCJzc1wiLFwiXFx1MDEwMFwiOlwiQVwiLFwiXFx1MDEwMlwiOlwiQVwiLFwiXFx1MDEwNFwiOlwiQVwiLFwiXFx1MDEwMVwiOlwiYVwiLFwiXFx1MDEwM1wiOlwiYVwiLFwiXFx1MDEwNVwiOlwiYVwiLFwiXFx1MDEwNlwiOlwiQ1wiLFxyXG4gIFwiXFx1MDEwOFwiOlwiQ1wiLFwiXFx1MDEwYVwiOlwiQ1wiLFwiXFx1MDEwY1wiOlwiQ1wiLFwiXFx1MDEwN1wiOlwiY1wiLFwiXFx1MDEwOVwiOlwiY1wiLFwiXFx1MDEwYlwiOlwiY1wiLFwiXFx1MDEwZFwiOlwiY1wiLFwiXFx1MDEwZVwiOlwiRFwiLFwiXFx1MDExMFwiOlwiRFwiLFwiXFx1MDEwZlwiOlwiZFwiLFwiXFx1MDExMVwiOlwiZFwiLFwiXFx1MDExMlwiOlwiRVwiLFwiXFx1MDExNFwiOlwiRVwiLFwiXFx1MDExNlwiOlwiRVwiLFwiXFx1MDExOFwiOlwiRVwiLFwiXFx1MDExYVwiOlwiRVwiLFwiXFx1MDExM1wiOlwiZVwiLFwiXFx1MDExNVwiOlwiZVwiLFwiXFx1MDExN1wiOlwiZVwiLFwiXFx1MDExOVwiOlwiZVwiLFwiXFx1MDExYlwiOlwiZVwiLFwiXFx1MDExY1wiOlwiR1wiLFwiXFx1MDExZVwiOlwiR1wiLFwiXFx1MDEyMFwiOlwiR1wiLFwiXFx1MDEyMlwiOlwiR1wiLFwiXFx1MDExZFwiOlwiZ1wiLFwiXFx1MDExZlwiOlwiZ1wiLFwiXFx1MDEyMVwiOlwiZ1wiLFwiXFx1MDEyM1wiOlwiZ1wiLFwiXFx1MDEyNFwiOlwiSFwiLFwiXFx1MDEyNlwiOlwiSFwiLFwiXFx1MDEyNVwiOlwiaFwiLFwiXFx1MDEyN1wiOlwiaFwiLFwiXFx1MDEyOFwiOlwiSVwiLFwiXFx1MDEyYVwiOlwiSVwiLFwiXFx1MDEyY1wiOlwiSVwiLFwiXFx1MDEyZVwiOlwiSVwiLFwiXFx1MDEzMFwiOlwiSVwiLFwiXFx1MDEyOVwiOlwiaVwiLFxyXG4gIFwiXFx1MDEyYlwiOlwiaVwiLFwiXFx1MDEyZFwiOlwiaVwiLFwiXFx1MDEyZlwiOlwiaVwiLFwiXFx1MDEzMVwiOlwiaVwiLFwiXFx1MDEzNFwiOlwiSlwiLFwiXFx1MDEzNVwiOlwialwiLFwiXFx1MDEzNlwiOlwiS1wiLFwiXFx1MDEzN1wiOlwia1wiLFwiXFx1MDEzOFwiOlwia1wiLFwiXFx1MDEzOVwiOlwiTFwiLFwiXFx1MDEzYlwiOlwiTFwiLFwiXFx1MDEzZFwiOlwiTFwiLFwiXFx1MDEzZlwiOlwiTFwiLFwiXFx1MDE0MVwiOlwiTFwiLFwiXFx1MDEzYVwiOlwibFwiLFwiXFx1MDEzY1wiOlwibFwiLFwiXFx1MDEzZVwiOlwibFwiLFwiXFx1MDE0MFwiOlwibFwiLFwiXFx1MDE0MlwiOlwibFwiLFwiXFx1MDE0M1wiOlwiTlwiLFwiXFx1MDE0NVwiOlwiTlwiLFwiXFx1MDE0N1wiOlwiTlwiLFwiXFx1MDE0YVwiOlwiTlwiLFwiXFx1MDE0NFwiOlwiblwiLFwiXFx1MDE0NlwiOlwiblwiLFwiXFx1MDE0OFwiOlwiblwiLFwiXFx1MDE0YlwiOlwiblwiLFwiXFx1MDE0Y1wiOlwiT1wiLFwiXFx1MDE0ZVwiOlwiT1wiLFwiXFx1MDE1MFwiOlwiT1wiLFwiXFx1MDE0ZFwiOlwib1wiLFwiXFx1MDE0ZlwiOlwib1wiLFwiXFx1MDE1MVwiOlwib1wiLFwiXFx1MDE1NFwiOlwiUlwiLFwiXFx1MDE1NlwiOlwiUlwiLFwiXFx1MDE1OFwiOlwiUlwiLFwiXFx1MDE1NVwiOlwiclwiLFwiXFx1MDE1N1wiOlwiclwiLFwiXFx1MDE1OVwiOlwiclwiLFxyXG4gIFwiXFx1MDE1YVwiOlwiU1wiLFwiXFx1MDE1Y1wiOlwiU1wiLFwiXFx1MDE1ZVwiOlwiU1wiLFwiXFx1MDE2MFwiOlwiU1wiLFwiXFx1MDE1YlwiOlwic1wiLFwiXFx1MDE1ZFwiOlwic1wiLFwiXFx1MDE1ZlwiOlwic1wiLFwiXFx1MDE2MVwiOlwic1wiLFwiXFx1MDE2MlwiOlwiVFwiLFwiXFx1MDE2NFwiOlwiVFwiLFwiXFx1MDE2NlwiOlwiVFwiLFwiXFx1MDE2M1wiOlwidFwiLFwiXFx1MDE2NVwiOlwidFwiLFwiXFx1MDE2N1wiOlwidFwiLFwiXFx1MDE2OFwiOlwiVVwiLFwiXFx1MDE2YVwiOlwiVVwiLFwiXFx1MDE2Y1wiOlwiVVwiLFwiXFx1MDE2ZVwiOlwiVVwiLFwiXFx1MDE3MFwiOlwiVVwiLFwiXFx1MDE3MlwiOlwiVVwiLFwiXFx1MDE2OVwiOlwidVwiLFwiXFx1MDE2YlwiOlwidVwiLFwiXFx1MDE2ZFwiOlwidVwiLFwiXFx1MDE2ZlwiOlwidVwiLFwiXFx1MDE3MVwiOlwidVwiLFwiXFx1MDE3M1wiOlwidVwiLFwiXFx1MDE3NFwiOlwiV1wiLFwiXFx1MDE3NVwiOlwid1wiLFwiXFx1MDE3NlwiOlwiWVwiLFwiXFx1MDE3N1wiOlwieVwiLFwiXFx1MDE3OFwiOlwiWVwiLFwiXFx1MDE3OVwiOlwiWlwiLFwiXFx1MDE3YlwiOlwiWlwiLFwiXFx1MDE3ZFwiOlwiWlwiLFwiXFx1MDE3YVwiOlwielwiLFwiXFx1MDE3Y1wiOlwielwiLFwiXFx1MDE3ZVwiOlwielwiLFwiXFx1MDEzMlwiOlwiSUpcIixcIlxcdTAxMzNcIjpcImlqXCIsXHJcbiAgXCJcXHUwMTUyXCI6XCJPZVwiLFwiXFx1MDE1M1wiOlwib2VcIixcIlxcdTAxNDlcIjpcIiduXCIsXCJcXHUwMTdmXCI6XCJzXCJ9KSxudD14KHtcIiZcIjpcIiZhbXA7XCIsXCI8XCI6XCImbHQ7XCIsXCI+XCI6XCImZ3Q7XCIsJ1wiJzpcIiZxdW90O1wiLFwiJ1wiOlwiJiMzOTtcIn0pLHR0PXgoe1wiJmFtcDtcIjpcIiZcIixcIiZsdDtcIjpcIjxcIixcIiZndDtcIjpcIj5cIixcIiZxdW90O1wiOidcIicsXCImIzM5O1wiOlwiJ1wifSkscnQ9ZnVuY3Rpb24geChtbil7ZnVuY3Rpb24gQW4obil7aWYoeXUobikmJiFmZihuKSYmIShuIGluc3RhbmNlb2YgVW4pKXtpZihuIGluc3RhbmNlb2YgT24pcmV0dXJuIG47aWYob2kuY2FsbChuLFwiX193cmFwcGVkX19cIikpcmV0dXJuIEZlKG4pfXJldHVybiBuZXcgT24obil9ZnVuY3Rpb24gRW4oKXt9ZnVuY3Rpb24gT24obix0KXt0aGlzLl9fd3JhcHBlZF9fPW4sdGhpcy5fX2FjdGlvbnNfXz1bXSx0aGlzLl9fY2hhaW5fXz0hIXQsdGhpcy5fX2luZGV4X189MCx0aGlzLl9fdmFsdWVzX189VH1mdW5jdGlvbiBVbihuKXt0aGlzLl9fd3JhcHBlZF9fPW4sXHJcbiAgdGhpcy5fX2FjdGlvbnNfXz1bXSx0aGlzLl9fZGlyX189MSx0aGlzLl9fZmlsdGVyZWRfXz1mYWxzZSx0aGlzLl9faXRlcmF0ZWVzX189W10sdGhpcy5fX3Rha2VDb3VudF9fPTQyOTQ5NjcyOTUsdGhpcy5fX3ZpZXdzX189W119ZnVuY3Rpb24gTW4obil7dmFyIHQ9LTEscj1udWxsPT1uPzA6bi5sZW5ndGg7Zm9yKHRoaXMuY2xlYXIoKTsrK3Q8cjspe3ZhciBlPW5bdF07dGhpcy5zZXQoZVswXSxlWzFdKX19ZnVuY3Rpb24gVG4obil7dmFyIHQ9LTEscj1udWxsPT1uPzA6bi5sZW5ndGg7Zm9yKHRoaXMuY2xlYXIoKTsrK3Q8cjspe3ZhciBlPW5bdF07dGhpcy5zZXQoZVswXSxlWzFdKX19ZnVuY3Rpb24gRm4obil7dmFyIHQ9LTEscj1udWxsPT1uPzA6bi5sZW5ndGg7Zm9yKHRoaXMuY2xlYXIoKTsrK3Q8cjspe3ZhciBlPW5bdF07dGhpcy5zZXQoZVswXSxlWzFdKX19ZnVuY3Rpb24gTm4obil7dmFyIHQ9LTEscj1udWxsPT1uPzA6bi5sZW5ndGg7Zm9yKHRoaXMuX19kYXRhX189bmV3IEZuOysrdDxyOyl0aGlzLmFkZChuW3RdKTtcclxuICB9ZnVuY3Rpb24gWm4obil7dGhpcy5zaXplPSh0aGlzLl9fZGF0YV9fPW5ldyBUbihuKSkuc2l6ZX1mdW5jdGlvbiBxbihuLHQpe3ZhciByLGU9ZmYobiksdT0hZSYmb2YobiksaT0hZSYmIXUmJmFmKG4pLG89IWUmJiF1JiYhaSYmX2YobiksdT0oZT1lfHx1fHxpfHxvKT9BKG4ubGVuZ3RoLG5pKTpbXSxmPXUubGVuZ3RoO2ZvcihyIGluIG4pIXQmJiFvaS5jYWxsKG4scil8fGUmJihcImxlbmd0aFwiPT1yfHxpJiYoXCJvZmZzZXRcIj09cnx8XCJwYXJlbnRcIj09cil8fG8mJihcImJ1ZmZlclwiPT1yfHxcImJ5dGVMZW5ndGhcIj09cnx8XCJieXRlT2Zmc2V0XCI9PXIpfHxTZShyLGYpKXx8dS5wdXNoKHIpO3JldHVybiB1fWZ1bmN0aW9uIFFuKG4pe3ZhciB0PW4ubGVuZ3RoO3JldHVybiB0P25baXIoMCx0LTEpXTpUfWZ1bmN0aW9uIGV0KG4sdCl7cmV0dXJuIERlKFVyKG4pLHB0KHQsMCxuLmxlbmd0aCkpfWZ1bmN0aW9uIHV0KG4pe3JldHVybiBEZShVcihuKSl9ZnVuY3Rpb24gaXQobix0LHIpeyhyPT09VHx8bHUoblt0XSxyKSkmJihyIT09VHx8dCBpbiBuKXx8c3Qobix0LHIpO1xyXG4gIH1mdW5jdGlvbiBvdChuLHQscil7dmFyIGU9blt0XTtvaS5jYWxsKG4sdCkmJmx1KGUscikmJihyIT09VHx8dCBpbiBuKXx8c3Qobix0LHIpfWZ1bmN0aW9uIGZ0KG4sdCl7Zm9yKHZhciByPW4ubGVuZ3RoO3ItLTspaWYobHUobltyXVswXSx0KSlyZXR1cm4gcjtyZXR1cm4tMX1mdW5jdGlvbiBjdChuLHQscixlKXtyZXR1cm4gdW8obixmdW5jdGlvbihuLHUsaSl7dChlLG4scihuKSxpKX0pLGV9ZnVuY3Rpb24gYXQobix0KXtyZXR1cm4gbiYmQ3IodCxXdSh0KSxuKX1mdW5jdGlvbiBsdChuLHQpe3JldHVybiBuJiZDcih0LEJ1KHQpLG4pfWZ1bmN0aW9uIHN0KG4sdCxyKXtcIl9fcHJvdG9fX1wiPT10JiZBaT9BaShuLHQse2NvbmZpZ3VyYWJsZTp0cnVlLGVudW1lcmFibGU6dHJ1ZSx2YWx1ZTpyLHdyaXRhYmxlOnRydWV9KTpuW3RdPXJ9ZnVuY3Rpb24gaHQobix0KXtmb3IodmFyIHI9LTEsZT10Lmxlbmd0aCx1PUt1KGUpLGk9bnVsbD09bjsrK3I8ZTspdVtyXT1pP1Q6UnUobix0W3JdKTtyZXR1cm4gdTtcclxuICB9ZnVuY3Rpb24gcHQobix0LHIpe3JldHVybiBuPT09biYmKHIhPT1UJiYobj1uPD1yP246ciksdCE9PVQmJihuPW4+PXQ/bjp0KSksbn1mdW5jdGlvbiBfdChuLHQsZSx1LGksbyl7dmFyIGYsYz0xJnQsYT0yJnQsbD00JnQ7aWYoZSYmKGY9aT9lKG4sdSxpLG8pOmUobikpLGYhPT1UKXJldHVybiBmO2lmKCFkdShuKSlyZXR1cm4gbjtpZih1PWZmKG4pKXtpZihmPW1lKG4pLCFjKXJldHVybiBVcihuLGYpfWVsc2V7dmFyIHM9dm8obiksaD1cIltvYmplY3QgRnVuY3Rpb25dXCI9PXN8fFwiW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl1cIj09cztpZihhZihuKSlyZXR1cm4gSXIobixjKTtpZihcIltvYmplY3QgT2JqZWN0XVwiPT1zfHxcIltvYmplY3QgQXJndW1lbnRzXVwiPT1zfHxoJiYhaSl7aWYoZj1hfHxoP3t9OkFlKG4pLCFjKXJldHVybiBhP01yKG4sbHQoZixuKSk6RHIobixhdChmLG4pKX1lbHNle2lmKCFMbltzXSlyZXR1cm4gaT9uOnt9O2Y9RWUobixzLGMpfX1pZihvfHwobz1uZXcgWm4pLFxyXG4gIGk9by5nZXQobikpcmV0dXJuIGk7by5zZXQobixmKSxwZihuKT9uLmZvckVhY2goZnVuY3Rpb24ocil7Zi5hZGQoX3Qocix0LGUscixuLG8pKX0pOnNmKG4pJiZuLmZvckVhY2goZnVuY3Rpb24ocix1KXtmLnNldCh1LF90KHIsdCxlLHUsbixvKSl9KTt2YXIgYT1sP2E/dmU6X2U6YT9CdTpXdSxwPXU/VDphKG4pO3JldHVybiByKHB8fG4sZnVuY3Rpb24ocix1KXtwJiYodT1yLHI9blt1XSksb3QoZix1LF90KHIsdCxlLHUsbixvKSl9KSxmfWZ1bmN0aW9uIHZ0KG4pe3ZhciB0PVd1KG4pO3JldHVybiBmdW5jdGlvbihyKXtyZXR1cm4gZ3QocixuLHQpfX1mdW5jdGlvbiBndChuLHQscil7dmFyIGU9ci5sZW5ndGg7aWYobnVsbD09bilyZXR1cm4hZTtmb3Iobj1RdShuKTtlLS07KXt2YXIgdT1yW2VdLGk9dFt1XSxvPW5bdV07aWYobz09PVQmJiEodSBpbiBuKXx8IWkobykpcmV0dXJuIGZhbHNlfXJldHVybiB0cnVlfWZ1bmN0aW9uIGR0KG4sdCxyKXtpZih0eXBlb2YgbiE9XCJmdW5jdGlvblwiKXRocm93IG5ldyB0aShcIkV4cGVjdGVkIGEgZnVuY3Rpb25cIik7XHJcbiAgcmV0dXJuIGJvKGZ1bmN0aW9uKCl7bi5hcHBseShULHIpfSx0KX1mdW5jdGlvbiB5dChuLHQscixlKXt2YXIgdT0tMSxpPW8sYT10cnVlLGw9bi5sZW5ndGgscz1bXSxoPXQubGVuZ3RoO2lmKCFsKXJldHVybiBzO3ImJih0PWModCxrKHIpKSksZT8oaT1mLGE9ZmFsc2UpOjIwMDw9dC5sZW5ndGgmJihpPU8sYT1mYWxzZSx0PW5ldyBObih0KSk7bjpmb3IoOysrdTxsOyl7dmFyIHA9blt1XSxfPW51bGw9PXI/cDpyKHApLHA9ZXx8MCE9PXA/cDowO2lmKGEmJl89PT1fKXtmb3IodmFyIHY9aDt2LS07KWlmKHRbdl09PT1fKWNvbnRpbnVlIG47cy5wdXNoKHApfWVsc2UgaSh0LF8sZSl8fHMucHVzaChwKX1yZXR1cm4gc31mdW5jdGlvbiBidChuLHQpe3ZhciByPXRydWU7cmV0dXJuIHVvKG4sZnVuY3Rpb24obixlLHUpe3JldHVybiByPSEhdChuLGUsdSl9KSxyfWZ1bmN0aW9uIHh0KG4sdCxyKXtmb3IodmFyIGU9LTEsdT1uLmxlbmd0aDsrK2U8dTspe3ZhciBpPW5bZV0sbz10KGkpO2lmKG51bGwhPW8mJihmPT09VD9vPT09byYmIXd1KG8pOnIobyxmKSkpdmFyIGY9byxjPWk7XHJcbiAgfXJldHVybiBjfWZ1bmN0aW9uIGp0KG4sdCl7dmFyIHI9W107cmV0dXJuIHVvKG4sZnVuY3Rpb24obixlLHUpe3QobixlLHUpJiZyLnB1c2gobil9KSxyfWZ1bmN0aW9uIHd0KG4sdCxyLGUsdSl7dmFyIGk9LTEsbz1uLmxlbmd0aDtmb3Iocnx8KHI9a2UpLHV8fCh1PVtdKTsrK2k8bzspe3ZhciBmPW5baV07MDx0JiZyKGYpPzE8dD93dChmLHQtMSxyLGUsdSk6YSh1LGYpOmV8fCh1W3UubGVuZ3RoXT1mKX1yZXR1cm4gdX1mdW5jdGlvbiBtdChuLHQpe3JldHVybiBuJiZvbyhuLHQsV3UpfWZ1bmN0aW9uIEF0KG4sdCl7cmV0dXJuIG4mJmZvKG4sdCxXdSl9ZnVuY3Rpb24gRXQobix0KXtyZXR1cm4gaSh0LGZ1bmN0aW9uKHQpe3JldHVybiBfdShuW3RdKX0pfWZ1bmN0aW9uIGt0KG4sdCl7dD1Tcih0LG4pO2Zvcih2YXIgcj0wLGU9dC5sZW5ndGg7bnVsbCE9biYmcjxlOyluPW5bTWUodFtyKytdKV07cmV0dXJuIHImJnI9PWU/bjpUfWZ1bmN0aW9uIFN0KG4sdCxyKXtyZXR1cm4gdD10KG4pLFxyXG4gIGZmKG4pP3Q6YSh0LHIobikpfWZ1bmN0aW9uIE90KG4pe2lmKG51bGw9PW4pbj1uPT09VD9cIltvYmplY3QgVW5kZWZpbmVkXVwiOlwiW29iamVjdCBOdWxsXVwiO2Vsc2UgaWYobWkmJm1pIGluIFF1KG4pKXt2YXIgdD1vaS5jYWxsKG4sbWkpLHI9blttaV07dHJ5e25bbWldPVQ7dmFyIGU9dHJ1ZX1jYXRjaChuKXt9dmFyIHU9YWkuY2FsbChuKTtlJiYodD9uW21pXT1yOmRlbGV0ZSBuW21pXSksbj11fWVsc2Ugbj1haS5jYWxsKG4pO3JldHVybiBufWZ1bmN0aW9uIEl0KG4sdCl7cmV0dXJuIG4+dH1mdW5jdGlvbiBSdChuLHQpe3JldHVybiBudWxsIT1uJiZvaS5jYWxsKG4sdCl9ZnVuY3Rpb24genQobix0KXtyZXR1cm4gbnVsbCE9biYmdCBpbiBRdShuKX1mdW5jdGlvbiBXdChuLHQscil7Zm9yKHZhciBlPXI/ZjpvLHU9blswXS5sZW5ndGgsaT1uLmxlbmd0aCxhPWksbD1LdShpKSxzPTEvMCxoPVtdO2EtLTspe3ZhciBwPW5bYV07YSYmdCYmKHA9YyhwLGsodCkpKSxzPUNpKHAubGVuZ3RoLHMpLFxyXG4gIGxbYV09IXImJih0fHwxMjA8PXUmJjEyMDw9cC5sZW5ndGgpP25ldyBObihhJiZwKTpUfXZhciBwPW5bMF0sXz0tMSx2PWxbMF07bjpmb3IoOysrXzx1JiZoLmxlbmd0aDxzOyl7dmFyIGc9cFtfXSxkPXQ/dChnKTpnLGc9cnx8MCE9PWc/ZzowO2lmKHY/IU8odixkKTohZShoLGQscikpe2ZvcihhPWk7LS1hOyl7dmFyIHk9bFthXTtpZih5PyFPKHksZCk6IWUoblthXSxkLHIpKWNvbnRpbnVlIG59diYmdi5wdXNoKGQpLGgucHVzaChnKX19cmV0dXJuIGh9ZnVuY3Rpb24gQnQobix0LHIpe3ZhciBlPXt9O3JldHVybiBtdChuLGZ1bmN0aW9uKG4sdSxpKXt0KGUscihuKSx1LGkpfSksZX1mdW5jdGlvbiBMdCh0LHIsZSl7cmV0dXJuIHI9U3Iocix0KSx0PTI+ci5sZW5ndGg/dDprdCh0LGhyKHIsMCwtMSkpLHI9bnVsbD09dD90OnRbTWUoVmUocikpXSxudWxsPT1yP1Q6bihyLHQsZSl9ZnVuY3Rpb24gVXQobil7cmV0dXJuIHl1KG4pJiZcIltvYmplY3QgQXJndW1lbnRzXVwiPT1PdChuKX1mdW5jdGlvbiBDdChuKXtcclxuICByZXR1cm4geXUobikmJlwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09T3Qobil9ZnVuY3Rpb24gRHQobil7cmV0dXJuIHl1KG4pJiZcIltvYmplY3QgRGF0ZV1cIj09T3Qobil9ZnVuY3Rpb24gTXQobix0LHIsZSx1KXtpZihuPT09dCl0PXRydWU7ZWxzZSBpZihudWxsPT1ufHxudWxsPT10fHwheXUobikmJiF5dSh0KSl0PW4hPT1uJiZ0IT09dDtlbHNlIG46e3ZhciBpPWZmKG4pLG89ZmYodCksZj1pP1wiW29iamVjdCBBcnJheV1cIjp2byhuKSxjPW8/XCJbb2JqZWN0IEFycmF5XVwiOnZvKHQpLGY9XCJbb2JqZWN0IEFyZ3VtZW50c11cIj09Zj9cIltvYmplY3QgT2JqZWN0XVwiOmYsYz1cIltvYmplY3QgQXJndW1lbnRzXVwiPT1jP1wiW29iamVjdCBPYmplY3RdXCI6YyxhPVwiW29iamVjdCBPYmplY3RdXCI9PWYsbz1cIltvYmplY3QgT2JqZWN0XVwiPT1jO2lmKChjPWY9PWMpJiZhZihuKSl7aWYoIWFmKHQpKXt0PWZhbHNlO2JyZWFrIG59aT10cnVlLGE9ZmFsc2V9aWYoYyYmIWEpdXx8KHU9bmV3IFpuKSx0PWl8fF9mKG4pP3NlKG4sdCxyLGUsTXQsdSk6aGUobix0LGYscixlLE10LHUpO2Vsc2V7XHJcbiAgaWYoISgxJnIpJiYoaT1hJiZvaS5jYWxsKG4sXCJfX3dyYXBwZWRfX1wiKSxmPW8mJm9pLmNhbGwodCxcIl9fd3JhcHBlZF9fXCIpLGl8fGYpKXtuPWk/bi52YWx1ZSgpOm4sdD1mP3QudmFsdWUoKTp0LHV8fCh1PW5ldyBabiksdD1NdChuLHQscixlLHUpO2JyZWFrIG59aWYoYyl0OmlmKHV8fCh1PW5ldyBabiksaT0xJnIsZj1fZShuKSxvPWYubGVuZ3RoLGM9X2UodCkubGVuZ3RoLG89PWN8fGkpe2ZvcihhPW87YS0tOyl7dmFyIGw9ZlthXTtpZighKGk/bCBpbiB0Om9pLmNhbGwodCxsKSkpe3Q9ZmFsc2U7YnJlYWsgdH19aWYoKGM9dS5nZXQobikpJiZ1LmdldCh0KSl0PWM9PXQ7ZWxzZXtjPXRydWUsdS5zZXQobix0KSx1LnNldCh0LG4pO2Zvcih2YXIgcz1pOysrYTxvOyl7dmFyIGw9ZlthXSxoPW5bbF0scD10W2xdO2lmKGUpdmFyIF89aT9lKHAsaCxsLHQsbix1KTplKGgscCxsLG4sdCx1KTtpZihfPT09VD9oIT09cCYmIU10KGgscCxyLGUsdSk6IV8pe2M9ZmFsc2U7YnJlYWt9c3x8KHM9XCJjb25zdHJ1Y3RvclwiPT1sKTtcclxuICB9YyYmIXMmJihyPW4uY29uc3RydWN0b3IsZT10LmNvbnN0cnVjdG9yLHIhPWUmJlwiY29uc3RydWN0b3JcImluIG4mJlwiY29uc3RydWN0b3JcImluIHQmJiEodHlwZW9mIHI9PVwiZnVuY3Rpb25cIiYmciBpbnN0YW5jZW9mIHImJnR5cGVvZiBlPT1cImZ1bmN0aW9uXCImJmUgaW5zdGFuY2VvZiBlKSYmKGM9ZmFsc2UpKSx1LmRlbGV0ZShuKSx1LmRlbGV0ZSh0KSx0PWN9fWVsc2UgdD1mYWxzZTtlbHNlIHQ9ZmFsc2V9fXJldHVybiB0fWZ1bmN0aW9uIFR0KG4pe3JldHVybiB5dShuKSYmXCJbb2JqZWN0IE1hcF1cIj09dm8obil9ZnVuY3Rpb24gJHQobix0LHIsZSl7dmFyIHU9ci5sZW5ndGgsaT11LG89IWU7aWYobnVsbD09bilyZXR1cm4haTtmb3Iobj1RdShuKTt1LS07KXt2YXIgZj1yW3VdO2lmKG8mJmZbMl0/ZlsxXSE9PW5bZlswXV06IShmWzBdaW4gbikpcmV0dXJuIGZhbHNlfWZvcig7Kyt1PGk7KXt2YXIgZj1yW3VdLGM9ZlswXSxhPW5bY10sbD1mWzFdO2lmKG8mJmZbMl0pe2lmKGE9PT1UJiYhKGMgaW4gbikpcmV0dXJuIGZhbHNlO1xyXG4gIH1lbHNle2lmKGY9bmV3IFpuLGUpdmFyIHM9ZShhLGwsYyxuLHQsZik7aWYocz09PVQ/IU10KGwsYSwzLGUsZik6IXMpcmV0dXJuIGZhbHNlfX1yZXR1cm4gdHJ1ZX1mdW5jdGlvbiBGdChuKXtyZXR1cm4hKCFkdShuKXx8Y2kmJmNpIGluIG4pJiYoX3Uobik/aGk6ZG4pLnRlc3QoVGUobikpfWZ1bmN0aW9uIE50KG4pe3JldHVybiB5dShuKSYmXCJbb2JqZWN0IFJlZ0V4cF1cIj09T3Qobil9ZnVuY3Rpb24gUHQobil7cmV0dXJuIHl1KG4pJiZcIltvYmplY3QgU2V0XVwiPT12byhuKX1mdW5jdGlvbiBadChuKXtyZXR1cm4geXUobikmJmd1KG4ubGVuZ3RoKSYmISFCbltPdChuKV19ZnVuY3Rpb24gcXQobil7cmV0dXJuIHR5cGVvZiBuPT1cImZ1bmN0aW9uXCI/bjpudWxsPT1uPyR1OnR5cGVvZiBuPT1cIm9iamVjdFwiP2ZmKG4pP0p0KG5bMF0sblsxXSk6SHQobik6WnUobil9ZnVuY3Rpb24gVnQobil7aWYoIXplKG4pKXJldHVybiBMaShuKTt2YXIgdCxyPVtdO2Zvcih0IGluIFF1KG4pKW9pLmNhbGwobix0KSYmXCJjb25zdHJ1Y3RvclwiIT10JiZyLnB1c2godCk7XHJcbiAgcmV0dXJuIHJ9ZnVuY3Rpb24gS3Qobix0KXtyZXR1cm4gbjx0fWZ1bmN0aW9uIEd0KG4sdCl7dmFyIHI9LTEsZT1zdShuKT9LdShuLmxlbmd0aCk6W107cmV0dXJuIHVvKG4sZnVuY3Rpb24obix1LGkpe2VbKytyXT10KG4sdSxpKX0pLGV9ZnVuY3Rpb24gSHQobil7dmFyIHQ9eGUobik7cmV0dXJuIDE9PXQubGVuZ3RoJiZ0WzBdWzJdP1dlKHRbMF1bMF0sdFswXVsxXSk6ZnVuY3Rpb24ocil7cmV0dXJuIHI9PT1ufHwkdChyLG4sdCl9fWZ1bmN0aW9uIEp0KG4sdCl7cmV0dXJuIEllKG4pJiZ0PT09dCYmIWR1KHQpP1dlKE1lKG4pLHQpOmZ1bmN0aW9uKHIpe3ZhciBlPVJ1KHIsbik7cmV0dXJuIGU9PT1UJiZlPT09dD96dShyLG4pOk10KHQsZSwzKX19ZnVuY3Rpb24gWXQobix0LHIsZSx1KXtuIT09dCYmb28odCxmdW5jdGlvbihpLG8pe2lmKHV8fCh1PW5ldyBabiksZHUoaSkpe3ZhciBmPXUsYz1MZShuLG8pLGE9TGUodCxvKSxsPWYuZ2V0KGEpO2lmKGwpaXQobixvLGwpO2Vsc2V7XHJcbiAgdmFyIGw9ZT9lKGMsYSxvK1wiXCIsbix0LGYpOlQscz1sPT09VDtpZihzKXt2YXIgaD1mZihhKSxwPSFoJiZhZihhKSxfPSFoJiYhcCYmX2YoYSksbD1hO2h8fHB8fF8/ZmYoYyk/bD1jOmh1KGMpP2w9VXIoYyk6cD8ocz1mYWxzZSxsPUlyKGEsdHJ1ZSkpOl8/KHM9ZmFsc2UsbD16cihhLHRydWUpKTpsPVtdOnh1KGEpfHxvZihhKT8obD1jLG9mKGMpP2w9T3UoYyk6ZHUoYykmJiFfdShjKXx8KGw9QWUoYSkpKTpzPWZhbHNlfXMmJihmLnNldChhLGwpLFl0KGwsYSxyLGUsZiksZi5kZWxldGUoYSkpLGl0KG4sbyxsKX19ZWxzZSBmPWU/ZShMZShuLG8pLGksbytcIlwiLG4sdCx1KTpULGY9PT1UJiYoZj1pKSxpdChuLG8sZil9LEJ1KX1mdW5jdGlvbiBRdChuLHQpe3ZhciByPW4ubGVuZ3RoO2lmKHIpcmV0dXJuIHQrPTA+dD9yOjAsU2UodCxyKT9uW3RdOlR9ZnVuY3Rpb24gWHQobix0LHIpe3ZhciBlPS0xO3JldHVybiB0PWModC5sZW5ndGg/dDpbJHVdLGsoeWUoKSkpLG49R3QobixmdW5jdGlvbihuKXtyZXR1cm57XHJcbiAgYTpjKHQsZnVuY3Rpb24odCl7cmV0dXJuIHQobil9KSxiOisrZSxjOm59fSksdyhuLGZ1bmN0aW9uKG4sdCl7dmFyIGU7bjp7ZT0tMTtmb3IodmFyIHU9bi5hLGk9dC5hLG89dS5sZW5ndGgsZj1yLmxlbmd0aDsrK2U8bzspe3ZhciBjPVdyKHVbZV0saVtlXSk7aWYoYyl7ZT1lPj1mP2M6YyooXCJkZXNjXCI9PXJbZV0/LTE6MSk7YnJlYWsgbn19ZT1uLmItdC5ifXJldHVybiBlfSl9ZnVuY3Rpb24gbnIobix0KXtyZXR1cm4gdHIobix0LGZ1bmN0aW9uKHQscil7cmV0dXJuIHp1KG4scil9KX1mdW5jdGlvbiB0cihuLHQscil7Zm9yKHZhciBlPS0xLHU9dC5sZW5ndGgsaT17fTsrK2U8dTspe3ZhciBvPXRbZV0sZj1rdChuLG8pO3IoZixvKSYmbHIoaSxTcihvLG4pLGYpfXJldHVybiBpfWZ1bmN0aW9uIHJyKG4pe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4ga3QodCxuKX19ZnVuY3Rpb24gZXIobix0LHIsZSl7dmFyIHU9ZT9nOnYsaT0tMSxvPXQubGVuZ3RoLGY9bjtmb3Iobj09PXQmJih0PVVyKHQpKSxcclxuICByJiYoZj1jKG4sayhyKSkpOysraTxvOylmb3IodmFyIGE9MCxsPXRbaV0sbD1yP3IobCk6bDstMTwoYT11KGYsbCxhLGUpKTspZiE9PW4mJnhpLmNhbGwoZixhLDEpLHhpLmNhbGwobixhLDEpO3JldHVybiBufWZ1bmN0aW9uIHVyKG4sdCl7Zm9yKHZhciByPW4/dC5sZW5ndGg6MCxlPXItMTtyLS07KXt2YXIgdT10W3JdO2lmKHI9PWV8fHUhPT1pKXt2YXIgaT11O1NlKHUpP3hpLmNhbGwobix1LDEpOnhyKG4sdSl9fX1mdW5jdGlvbiBpcihuLHQpe3JldHVybiBuK0lpKFRpKCkqKHQtbisxKSl9ZnVuY3Rpb24gb3Iobix0KXt2YXIgcj1cIlwiO2lmKCFufHwxPnR8fDkwMDcxOTkyNTQ3NDA5OTE8dClyZXR1cm4gcjtkbyB0JTImJihyKz1uKSwodD1JaSh0LzIpKSYmKG4rPW4pO3doaWxlKHQpO3JldHVybiByfWZ1bmN0aW9uIGZyKG4sdCl7cmV0dXJuIHhvKEJlKG4sdCwkdSksbitcIlwiKX1mdW5jdGlvbiBjcihuKXtyZXR1cm4gUW4oVXUobikpfWZ1bmN0aW9uIGFyKG4sdCl7dmFyIHI9VXUobik7XHJcbiAgcmV0dXJuIERlKHIscHQodCwwLHIubGVuZ3RoKSl9ZnVuY3Rpb24gbHIobix0LHIsZSl7aWYoIWR1KG4pKXJldHVybiBuO3Q9U3IodCxuKTtmb3IodmFyIHU9LTEsaT10Lmxlbmd0aCxvPWktMSxmPW47bnVsbCE9ZiYmKyt1PGk7KXt2YXIgYz1NZSh0W3VdKSxhPXI7aWYodSE9byl7dmFyIGw9ZltjXSxhPWU/ZShsLGMsZik6VDthPT09VCYmKGE9ZHUobCk/bDpTZSh0W3UrMV0pP1tdOnt9KX1vdChmLGMsYSksZj1mW2NdfXJldHVybiBufWZ1bmN0aW9uIHNyKG4pe3JldHVybiBEZShVdShuKSl9ZnVuY3Rpb24gaHIobix0LHIpe3ZhciBlPS0xLHU9bi5sZW5ndGg7Zm9yKDA+dCYmKHQ9LXQ+dT8wOnUrdCkscj1yPnU/dTpyLDA+ciYmKHIrPXUpLHU9dD5yPzA6ci10Pj4+MCx0Pj4+PTAscj1LdSh1KTsrK2U8dTspcltlXT1uW2UrdF07cmV0dXJuIHJ9ZnVuY3Rpb24gcHIobix0KXt2YXIgcjtyZXR1cm4gdW8obixmdW5jdGlvbihuLGUsdSl7cmV0dXJuIHI9dChuLGUsdSksIXJ9KSwhIXJ9XHJcbiAgZnVuY3Rpb24gX3Iobix0LHIpe3ZhciBlPTAsdT1udWxsPT1uP2U6bi5sZW5ndGg7aWYodHlwZW9mIHQ9PVwibnVtYmVyXCImJnQ9PT10JiYyMTQ3NDgzNjQ3Pj11KXtmb3IoO2U8dTspe3ZhciBpPWUrdT4+PjEsbz1uW2ldO251bGwhPT1vJiYhd3UobykmJihyP288PXQ6bzx0KT9lPWkrMTp1PWl9cmV0dXJuIHV9cmV0dXJuIHZyKG4sdCwkdSxyKX1mdW5jdGlvbiB2cihuLHQscixlKXt0PXIodCk7Zm9yKHZhciB1PTAsaT1udWxsPT1uPzA6bi5sZW5ndGgsbz10IT09dCxmPW51bGw9PT10LGM9d3UodCksYT10PT09VDt1PGk7KXt2YXIgbD1JaSgodStpKS8yKSxzPXIobltsXSksaD1zIT09VCxwPW51bGw9PT1zLF89cz09PXMsdj13dShzKTsobz9lfHxfOmE/XyYmKGV8fGgpOmY/XyYmaCYmKGV8fCFwKTpjP18mJmgmJiFwJiYoZXx8IXYpOnB8fHY/MDplP3M8PXQ6czx0KT91PWwrMTppPWx9cmV0dXJuIENpKGksNDI5NDk2NzI5NCl9ZnVuY3Rpb24gZ3Iobix0KXtmb3IodmFyIHI9LTEsZT1uLmxlbmd0aCx1PTAsaT1bXTsrK3I8ZTspe1xyXG4gIHZhciBvPW5bcl0sZj10P3Qobyk6bztpZighcnx8IWx1KGYsYykpe3ZhciBjPWY7aVt1KytdPTA9PT1vPzA6b319cmV0dXJuIGl9ZnVuY3Rpb24gZHIobil7cmV0dXJuIHR5cGVvZiBuPT1cIm51bWJlclwiP246d3Uobik/Rjorbn1mdW5jdGlvbiB5cihuKXtpZih0eXBlb2Ygbj09XCJzdHJpbmdcIilyZXR1cm4gbjtpZihmZihuKSlyZXR1cm4gYyhuLHlyKStcIlwiO2lmKHd1KG4pKXJldHVybiBybz9yby5jYWxsKG4pOlwiXCI7dmFyIHQ9bitcIlwiO3JldHVyblwiMFwiPT10JiYxL249PS0kP1wiLTBcIjp0fWZ1bmN0aW9uIGJyKG4sdCxyKXt2YXIgZT0tMSx1PW8saT1uLmxlbmd0aCxjPXRydWUsYT1bXSxsPWE7aWYociljPWZhbHNlLHU9ZjtlbHNlIGlmKDIwMDw9aSl7aWYodT10P251bGw6c28obikpcmV0dXJuIFUodSk7Yz1mYWxzZSx1PU8sbD1uZXcgTm59ZWxzZSBsPXQ/W106YTtuOmZvcig7KytlPGk7KXt2YXIgcz1uW2VdLGg9dD90KHMpOnMscz1yfHwwIT09cz9zOjA7aWYoYyYmaD09PWgpe2Zvcih2YXIgcD1sLmxlbmd0aDtwLS07KWlmKGxbcF09PT1oKWNvbnRpbnVlIG47XHJcbiAgdCYmbC5wdXNoKGgpLGEucHVzaChzKX1lbHNlIHUobCxoLHIpfHwobCE9PWEmJmwucHVzaChoKSxhLnB1c2gocykpfXJldHVybiBhfWZ1bmN0aW9uIHhyKG4sdCl7cmV0dXJuIHQ9U3IodCxuKSxuPTI+dC5sZW5ndGg/bjprdChuLGhyKHQsMCwtMSkpLG51bGw9PW58fGRlbGV0ZSBuW01lKFZlKHQpKV19ZnVuY3Rpb24ganIobix0LHIsZSl7Zm9yKHZhciB1PW4ubGVuZ3RoLGk9ZT91Oi0xOyhlP2ktLTorK2k8dSkmJnQobltpXSxpLG4pOyk7cmV0dXJuIHI/aHIobixlPzA6aSxlP2krMTp1KTpocihuLGU/aSsxOjAsZT91OmkpfWZ1bmN0aW9uIHdyKG4sdCl7dmFyIHI9bjtyZXR1cm4gciBpbnN0YW5jZW9mIFVuJiYocj1yLnZhbHVlKCkpLGwodCxmdW5jdGlvbihuLHQpe3JldHVybiB0LmZ1bmMuYXBwbHkodC50aGlzQXJnLGEoW25dLHQuYXJncykpfSxyKX1mdW5jdGlvbiBtcihuLHQscil7dmFyIGU9bi5sZW5ndGg7aWYoMj5lKXJldHVybiBlP2JyKG5bMF0pOltdO2Zvcih2YXIgdT0tMSxpPUt1KGUpOysrdTxlOylmb3IodmFyIG89blt1XSxmPS0xOysrZjxlOylmIT11JiYoaVt1XT15dChpW3VdfHxvLG5bZl0sdCxyKSk7XHJcbiAgcmV0dXJuIGJyKHd0KGksMSksdCxyKX1mdW5jdGlvbiBBcihuLHQscil7Zm9yKHZhciBlPS0xLHU9bi5sZW5ndGgsaT10Lmxlbmd0aCxvPXt9OysrZTx1OylyKG8sbltlXSxlPGk/dFtlXTpUKTtyZXR1cm4gb31mdW5jdGlvbiBFcihuKXtyZXR1cm4gaHUobik/bjpbXX1mdW5jdGlvbiBrcihuKXtyZXR1cm4gdHlwZW9mIG49PVwiZnVuY3Rpb25cIj9uOiR1fWZ1bmN0aW9uIFNyKG4sdCl7cmV0dXJuIGZmKG4pP246SWUobix0KT9bbl06am8oSXUobikpfWZ1bmN0aW9uIE9yKG4sdCxyKXt2YXIgZT1uLmxlbmd0aDtyZXR1cm4gcj1yPT09VD9lOnIsIXQmJnI+PWU/bjpocihuLHQscil9ZnVuY3Rpb24gSXIobix0KXtpZih0KXJldHVybiBuLnNsaWNlKCk7dmFyIHI9bi5sZW5ndGgscj1naT9naShyKTpuZXcgbi5jb25zdHJ1Y3RvcihyKTtyZXR1cm4gbi5jb3B5KHIpLHJ9ZnVuY3Rpb24gUnIobil7dmFyIHQ9bmV3IG4uY29uc3RydWN0b3Iobi5ieXRlTGVuZ3RoKTtyZXR1cm4gbmV3IHZpKHQpLnNldChuZXcgdmkobikpLFxyXG4gIHR9ZnVuY3Rpb24genIobix0KXtyZXR1cm4gbmV3IG4uY29uc3RydWN0b3IodD9ScihuLmJ1ZmZlcik6bi5idWZmZXIsbi5ieXRlT2Zmc2V0LG4ubGVuZ3RoKX1mdW5jdGlvbiBXcihuLHQpe2lmKG4hPT10KXt2YXIgcj1uIT09VCxlPW51bGw9PT1uLHU9bj09PW4saT13dShuKSxvPXQhPT1ULGY9bnVsbD09PXQsYz10PT09dCxhPXd1KHQpO2lmKCFmJiYhYSYmIWkmJm4+dHx8aSYmbyYmYyYmIWYmJiFhfHxlJiZvJiZjfHwhciYmY3x8IXUpcmV0dXJuIDE7aWYoIWUmJiFpJiYhYSYmbjx0fHxhJiZyJiZ1JiYhZSYmIWl8fGYmJnImJnV8fCFvJiZ1fHwhYylyZXR1cm4tMX1yZXR1cm4gMH1mdW5jdGlvbiBCcihuLHQscixlKXt2YXIgdT0tMSxpPW4ubGVuZ3RoLG89ci5sZW5ndGgsZj0tMSxjPXQubGVuZ3RoLGE9VWkoaS1vLDApLGw9S3UoYythKTtmb3IoZT0hZTsrK2Y8YzspbFtmXT10W2ZdO2Zvcig7Kyt1PG87KShlfHx1PGkpJiYobFtyW3VdXT1uW3VdKTtmb3IoO2EtLTspbFtmKytdPW5bdSsrXTtcclxuICByZXR1cm4gbH1mdW5jdGlvbiBMcihuLHQscixlKXt2YXIgdT0tMSxpPW4ubGVuZ3RoLG89LTEsZj1yLmxlbmd0aCxjPS0xLGE9dC5sZW5ndGgsbD1VaShpLWYsMCkscz1LdShsK2EpO2ZvcihlPSFlOysrdTxsOylzW3VdPW5bdV07Zm9yKGw9dTsrK2M8YTspc1tsK2NdPXRbY107Zm9yKDsrK288ZjspKGV8fHU8aSkmJihzW2wrcltvXV09blt1KytdKTtyZXR1cm4gc31mdW5jdGlvbiBVcihuLHQpe3ZhciByPS0xLGU9bi5sZW5ndGg7Zm9yKHR8fCh0PUt1KGUpKTsrK3I8ZTspdFtyXT1uW3JdO3JldHVybiB0fWZ1bmN0aW9uIENyKG4sdCxyLGUpe3ZhciB1PSFyO3J8fChyPXt9KTtmb3IodmFyIGk9LTEsbz10Lmxlbmd0aDsrK2k8bzspe3ZhciBmPXRbaV0sYz1lP2UocltmXSxuW2ZdLGYscixuKTpUO2M9PT1UJiYoYz1uW2ZdKSx1P3N0KHIsZixjKTpvdChyLGYsYyl9cmV0dXJuIHJ9ZnVuY3Rpb24gRHIobix0KXtyZXR1cm4gQ3IobixwbyhuKSx0KX1mdW5jdGlvbiBNcihuLHQpe3JldHVybiBDcihuLF9vKG4pLHQpO1xyXG4gIH1mdW5jdGlvbiBUcihuLHIpe3JldHVybiBmdW5jdGlvbihlLHUpe3ZhciBpPWZmKGUpP3Q6Y3Qsbz1yP3IoKTp7fTtyZXR1cm4gaShlLG4seWUodSwyKSxvKX19ZnVuY3Rpb24gJHIobil7cmV0dXJuIGZyKGZ1bmN0aW9uKHQscil7dmFyIGU9LTEsdT1yLmxlbmd0aCxpPTE8dT9yW3UtMV06VCxvPTI8dT9yWzJdOlQsaT0zPG4ubGVuZ3RoJiZ0eXBlb2YgaT09XCJmdW5jdGlvblwiPyh1LS0saSk6VDtmb3IobyYmT2UoclswXSxyWzFdLG8pJiYoaT0zPnU/VDppLHU9MSksdD1RdSh0KTsrK2U8dTspKG89cltlXSkmJm4odCxvLGUsaSk7cmV0dXJuIHR9KX1mdW5jdGlvbiBGcihuLHQpe3JldHVybiBmdW5jdGlvbihyLGUpe2lmKG51bGw9PXIpcmV0dXJuIHI7aWYoIXN1KHIpKXJldHVybiBuKHIsZSk7Zm9yKHZhciB1PXIubGVuZ3RoLGk9dD91Oi0xLG89UXUocik7KHQ/aS0tOisraTx1KSYmZmFsc2UhPT1lKG9baV0saSxvKTspO3JldHVybiByfX1mdW5jdGlvbiBOcihuKXtyZXR1cm4gZnVuY3Rpb24odCxyLGUpe1xyXG4gIHZhciB1PS0xLGk9UXUodCk7ZT1lKHQpO2Zvcih2YXIgbz1lLmxlbmd0aDtvLS07KXt2YXIgZj1lW24/bzorK3VdO2lmKGZhbHNlPT09cihpW2ZdLGYsaSkpYnJlYWt9cmV0dXJuIHR9fWZ1bmN0aW9uIFByKG4sdCxyKXtmdW5jdGlvbiBlKCl7cmV0dXJuKHRoaXMmJnRoaXMhPT0kbiYmdGhpcyBpbnN0YW5jZW9mIGU/aTpuKS5hcHBseSh1P3I6dGhpcyxhcmd1bWVudHMpfXZhciB1PTEmdCxpPVZyKG4pO3JldHVybiBlfWZ1bmN0aW9uIFpyKG4pe3JldHVybiBmdW5jdGlvbih0KXt0PUl1KHQpO3ZhciByPVJuLnRlc3QodCk/TSh0KTpULGU9cj9yWzBdOnQuY2hhckF0KDApO3JldHVybiB0PXI/T3IociwxKS5qb2luKFwiXCIpOnQuc2xpY2UoMSksZVtuXSgpK3R9fWZ1bmN0aW9uIHFyKG4pe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gbChNdShEdSh0KS5yZXBsYWNlKGtuLFwiXCIpKSxuLFwiXCIpfX1mdW5jdGlvbiBWcihuKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHM7c3dpdGNoKHQubGVuZ3RoKXtcclxuICBjYXNlIDA6cmV0dXJuIG5ldyBuO2Nhc2UgMTpyZXR1cm4gbmV3IG4odFswXSk7Y2FzZSAyOnJldHVybiBuZXcgbih0WzBdLHRbMV0pO2Nhc2UgMzpyZXR1cm4gbmV3IG4odFswXSx0WzFdLHRbMl0pO2Nhc2UgNDpyZXR1cm4gbmV3IG4odFswXSx0WzFdLHRbMl0sdFszXSk7Y2FzZSA1OnJldHVybiBuZXcgbih0WzBdLHRbMV0sdFsyXSx0WzNdLHRbNF0pO2Nhc2UgNjpyZXR1cm4gbmV3IG4odFswXSx0WzFdLHRbMl0sdFszXSx0WzRdLHRbNV0pO2Nhc2UgNzpyZXR1cm4gbmV3IG4odFswXSx0WzFdLHRbMl0sdFszXSx0WzRdLHRbNV0sdFs2XSl9dmFyIHI9ZW8obi5wcm90b3R5cGUpLHQ9bi5hcHBseShyLHQpO3JldHVybiBkdSh0KT90OnJ9fWZ1bmN0aW9uIEtyKHQscixlKXtmdW5jdGlvbiB1KCl7Zm9yKHZhciBvPWFyZ3VtZW50cy5sZW5ndGgsZj1LdShvKSxjPW8sYT1kZSh1KTtjLS07KWZbY109YXJndW1lbnRzW2NdO3JldHVybiBjPTM+byYmZlswXSE9PWEmJmZbby0xXSE9PWE/W106TChmLGEpLFxyXG4gIG8tPWMubGVuZ3RoLG88ZT91ZSh0LHIsSnIsdS5wbGFjZWhvbGRlcixULGYsYyxULFQsZS1vKTpuKHRoaXMmJnRoaXMhPT0kbiYmdGhpcyBpbnN0YW5jZW9mIHU/aTp0LHRoaXMsZil9dmFyIGk9VnIodCk7cmV0dXJuIHV9ZnVuY3Rpb24gR3Iobil7cmV0dXJuIGZ1bmN0aW9uKHQscixlKXt2YXIgdT1RdSh0KTtpZighc3UodCkpe3ZhciBpPXllKHIsMyk7dD1XdSh0KSxyPWZ1bmN0aW9uKG4pe3JldHVybiBpKHVbbl0sbix1KX19cmV0dXJuIHI9bih0LHIsZSksLTE8cj91W2k/dFtyXTpyXTpUfX1mdW5jdGlvbiBIcihuKXtyZXR1cm4gcGUoZnVuY3Rpb24odCl7dmFyIHI9dC5sZW5ndGgsZT1yLHU9T24ucHJvdG90eXBlLnRocnU7Zm9yKG4mJnQucmV2ZXJzZSgpO2UtLTspe3ZhciBpPXRbZV07aWYodHlwZW9mIGkhPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgdGkoXCJFeHBlY3RlZCBhIGZ1bmN0aW9uXCIpO2lmKHUmJiFvJiZcIndyYXBwZXJcIj09Z2UoaSkpdmFyIG89bmV3IE9uKFtdLHRydWUpfWZvcihlPW8/ZTpyOysrZTxyOyl2YXIgaT10W2VdLHU9Z2UoaSksZj1cIndyYXBwZXJcIj09dT9obyhpKTpULG89ZiYmUmUoZlswXSkmJjQyND09ZlsxXSYmIWZbNF0ubGVuZ3RoJiYxPT1mWzldP29bZ2UoZlswXSldLmFwcGx5KG8sZlszXSk6MT09aS5sZW5ndGgmJlJlKGkpP29bdV0oKTpvLnRocnUoaSk7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49YXJndW1lbnRzLGU9blswXTtpZihvJiYxPT1uLmxlbmd0aCYmZmYoZSkpcmV0dXJuIG8ucGxhbnQoZSkudmFsdWUoKTtmb3IodmFyIHU9MCxuPXI/dFt1XS5hcHBseSh0aGlzLG4pOmU7Kyt1PHI7KW49dFt1XS5jYWxsKHRoaXMsbik7cmV0dXJuIG59fSl9ZnVuY3Rpb24gSnIobix0LHIsZSx1LGksbyxmLGMsYSl7ZnVuY3Rpb24gbCgpe2Zvcih2YXIgZD1hcmd1bWVudHMubGVuZ3RoLHk9S3UoZCksYj1kO2ItLTspeVtiXT1hcmd1bWVudHNbYl07aWYoXyl7dmFyIHgsaj1kZShsKSxiPXkubGVuZ3RoO2Zvcih4PTA7Yi0tOyl5W2JdPT09aiYmKyt4fWlmKGUmJih5PUJyKHksZSx1LF8pKSxpJiYoeT1Mcih5LGksbyxfKSksZC09eCxfJiZkPGEpcmV0dXJuIGo9TCh5LGopLHVlKG4sdCxKcixsLnBsYWNlaG9sZGVyLHIseSxqLGYsYyxhLWQpO2lmKGo9aD9yOnRoaXMsYj1wP2pbbl06bixkPXkubGVuZ3RoLGYpe3g9eS5sZW5ndGg7Zm9yKHZhciB3PUNpKGYubGVuZ3RoLHgpLG09VXIoeSk7dy0tOyl7XHJcbiAgdmFyIEE9Zlt3XTt5W3ddPVNlKEEseCk/bVtBXTpUfX1lbHNlIHYmJjE8ZCYmeS5yZXZlcnNlKCk7cmV0dXJuIHMmJmM8ZCYmKHkubGVuZ3RoPWMpLHRoaXMmJnRoaXMhPT0kbiYmdGhpcyBpbnN0YW5jZW9mIGwmJihiPWd8fFZyKGIpKSxiLmFwcGx5KGoseSl9dmFyIHM9MTI4JnQsaD0xJnQscD0yJnQsXz0yNCZ0LHY9NTEyJnQsZz1wP1Q6VnIobik7cmV0dXJuIGx9ZnVuY3Rpb24gWXIobix0KXtyZXR1cm4gZnVuY3Rpb24ocixlKXtyZXR1cm4gQnQocixuLHQoZSkpfX1mdW5jdGlvbiBRcihuLHQpe3JldHVybiBmdW5jdGlvbihyLGUpe3ZhciB1O2lmKHI9PT1UJiZlPT09VClyZXR1cm4gdDtpZihyIT09VCYmKHU9ciksZSE9PVQpe2lmKHU9PT1UKXJldHVybiBlO3R5cGVvZiByPT1cInN0cmluZ1wifHx0eXBlb2YgZT09XCJzdHJpbmdcIj8ocj15cihyKSxlPXlyKGUpKToocj1kcihyKSxlPWRyKGUpKSx1PW4ocixlKX1yZXR1cm4gdX19ZnVuY3Rpb24gWHIodCl7cmV0dXJuIHBlKGZ1bmN0aW9uKHIpe1xyXG4gIHJldHVybiByPWMocixrKHllKCkpKSxmcihmdW5jdGlvbihlKXt2YXIgdT10aGlzO3JldHVybiB0KHIsZnVuY3Rpb24odCl7cmV0dXJuIG4odCx1LGUpfSl9KX0pfWZ1bmN0aW9uIG5lKG4sdCl7dD10PT09VD9cIiBcIjp5cih0KTt2YXIgcj10Lmxlbmd0aDtyZXR1cm4gMj5yP3I/b3IodCxuKTp0OihyPW9yKHQsT2kobi9EKHQpKSksUm4udGVzdCh0KT9PcihNKHIpLDAsbikuam9pbihcIlwiKTpyLnNsaWNlKDAsbikpfWZ1bmN0aW9uIHRlKHQscixlLHUpe2Z1bmN0aW9uIGkoKXtmb3IodmFyIHI9LTEsYz1hcmd1bWVudHMubGVuZ3RoLGE9LTEsbD11Lmxlbmd0aCxzPUt1KGwrYyksaD10aGlzJiZ0aGlzIT09JG4mJnRoaXMgaW5zdGFuY2VvZiBpP2Y6dDsrK2E8bDspc1thXT11W2FdO2Zvcig7Yy0tOylzW2ErK109YXJndW1lbnRzWysrcl07cmV0dXJuIG4oaCxvP2U6dGhpcyxzKX12YXIgbz0xJnIsZj1Wcih0KTtyZXR1cm4gaX1mdW5jdGlvbiByZShuKXtyZXR1cm4gZnVuY3Rpb24odCxyLGUpe1xyXG4gIGUmJnR5cGVvZiBlIT1cIm51bWJlclwiJiZPZSh0LHIsZSkmJihyPWU9VCksdD1BdSh0KSxyPT09VD8ocj10LHQ9MCk6cj1BdShyKSxlPWU9PT1UP3Q8cj8xOi0xOkF1KGUpO3ZhciB1PS0xO3I9VWkoT2koKHItdCkvKGV8fDEpKSwwKTtmb3IodmFyIGk9S3Uocik7ci0tOylpW24/cjorK3VdPXQsdCs9ZTtyZXR1cm4gaX19ZnVuY3Rpb24gZWUobil7cmV0dXJuIGZ1bmN0aW9uKHQscil7cmV0dXJuIHR5cGVvZiB0PT1cInN0cmluZ1wiJiZ0eXBlb2Ygcj09XCJzdHJpbmdcInx8KHQ9U3UodCkscj1TdShyKSksbih0LHIpfX1mdW5jdGlvbiB1ZShuLHQscixlLHUsaSxvLGYsYyxhKXt2YXIgbD04JnQscz1sP286VDtvPWw/VDpvO3ZhciBoPWw/aTpUO3JldHVybiBpPWw/VDppLHQ9KHR8KGw/MzI6NjQpKSZ+KGw/NjQ6MzIpLDQmdHx8KHQmPS00KSx1PVtuLHQsdSxoLHMsaSxvLGYsYyxhXSxyPXIuYXBwbHkoVCx1KSxSZShuKSYmeW8ocix1KSxyLnBsYWNlaG9sZGVyPWUsVWUocixuLHQpfWZ1bmN0aW9uIGllKG4pe1xyXG4gIHZhciB0PVl1W25dO3JldHVybiBmdW5jdGlvbihuLHIpe2lmKG49U3UobiksKHI9bnVsbD09cj8wOkNpKEV1KHIpLDI5MikpJiZXaShuKSl7dmFyIGU9KEl1KG4pK1wiZVwiKS5zcGxpdChcImVcIiksZT10KGVbMF0rXCJlXCIrKCtlWzFdK3IpKSxlPShJdShlKStcImVcIikuc3BsaXQoXCJlXCIpO3JldHVybisoZVswXStcImVcIisoK2VbMV0tcikpfXJldHVybiB0KG4pfX1mdW5jdGlvbiBvZShuKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIHI9dm8odCk7cmV0dXJuXCJbb2JqZWN0IE1hcF1cIj09cj9XKHQpOlwiW29iamVjdCBTZXRdXCI9PXI/Qyh0KTpFKHQsbih0KSl9fWZ1bmN0aW9uIGZlKG4sdCxyLGUsdSxpLG8sZil7dmFyIGM9MiZ0O2lmKCFjJiZ0eXBlb2YgbiE9XCJmdW5jdGlvblwiKXRocm93IG5ldyB0aShcIkV4cGVjdGVkIGEgZnVuY3Rpb25cIik7dmFyIGE9ZT9lLmxlbmd0aDowO2lmKGF8fCh0Jj0tOTcsZT11PVQpLG89bz09PVQ/bzpVaShFdShvKSwwKSxmPWY9PT1UP2Y6RXUoZiksYS09dT91Lmxlbmd0aDowLFxyXG4gIDY0JnQpe3ZhciBsPWUscz11O2U9dT1UfXZhciBoPWM/VDpobyhuKTtyZXR1cm4gaT1bbix0LHIsZSx1LGwscyxpLG8sZl0saCYmKHI9aVsxXSxuPWhbMV0sdD1yfG4sZT0xMjg9PW4mJjg9PXJ8fDEyOD09biYmMjU2PT1yJiZpWzddLmxlbmd0aDw9aFs4XXx8Mzg0PT1uJiZoWzddLmxlbmd0aDw9aFs4XSYmOD09ciwxMzE+dHx8ZSkmJigxJm4mJihpWzJdPWhbMl0sdHw9MSZyPzA6NCksKHI9aFszXSkmJihlPWlbM10saVszXT1lP0JyKGUscixoWzRdKTpyLGlbNF09ZT9MKGlbM10sXCJfX2xvZGFzaF9wbGFjZWhvbGRlcl9fXCIpOmhbNF0pLChyPWhbNV0pJiYoZT1pWzVdLGlbNV09ZT9McihlLHIsaFs2XSk6cixpWzZdPWU/TChpWzVdLFwiX19sb2Rhc2hfcGxhY2Vob2xkZXJfX1wiKTpoWzZdKSwocj1oWzddKSYmKGlbN109ciksMTI4Jm4mJihpWzhdPW51bGw9PWlbOF0/aFs4XTpDaShpWzhdLGhbOF0pKSxudWxsPT1pWzldJiYoaVs5XT1oWzldKSxpWzBdPWhbMF0saVsxXT10KSxuPWlbMF0sXHJcbiAgdD1pWzFdLHI9aVsyXSxlPWlbM10sdT1pWzRdLGY9aVs5XT1pWzldPT09VD9jPzA6bi5sZW5ndGg6VWkoaVs5XS1hLDApLCFmJiYyNCZ0JiYodCY9LTI1KSxVZSgoaD9jbzp5bykodCYmMSE9dD84PT10fHwxNj09dD9LcihuLHQsZik6MzIhPXQmJjMzIT10fHx1Lmxlbmd0aD9Kci5hcHBseShULGkpOnRlKG4sdCxyLGUpOlByKG4sdCxyKSxpKSxuLHQpfWZ1bmN0aW9uIGNlKG4sdCxyLGUpe3JldHVybiBuPT09VHx8bHUobixlaVtyXSkmJiFvaS5jYWxsKGUscik/dDpufWZ1bmN0aW9uIGFlKG4sdCxyLGUsdSxpKXtyZXR1cm4gZHUobikmJmR1KHQpJiYoaS5zZXQodCxuKSxZdChuLHQsVCxhZSxpKSxpLmRlbGV0ZSh0KSksbn1mdW5jdGlvbiBsZShuKXtyZXR1cm4geHUobik/VDpufWZ1bmN0aW9uIHNlKG4sdCxyLGUsdSxpKXt2YXIgbz0xJnIsZj1uLmxlbmd0aCxjPXQubGVuZ3RoO2lmKGYhPWMmJiEobyYmYz5mKSlyZXR1cm4gZmFsc2U7aWYoKGM9aS5nZXQobikpJiZpLmdldCh0KSlyZXR1cm4gYz09dDtcclxuICB2YXIgYz0tMSxhPXRydWUsbD0yJnI/bmV3IE5uOlQ7Zm9yKGkuc2V0KG4sdCksaS5zZXQodCxuKTsrK2M8Zjspe3ZhciBzPW5bY10scD10W2NdO2lmKGUpdmFyIF89bz9lKHAscyxjLHQsbixpKTplKHMscCxjLG4sdCxpKTtpZihfIT09VCl7aWYoXyljb250aW51ZTthPWZhbHNlO2JyZWFrfWlmKGwpe2lmKCFoKHQsZnVuY3Rpb24obix0KXtpZighTyhsLHQpJiYocz09PW58fHUocyxuLHIsZSxpKSkpcmV0dXJuIGwucHVzaCh0KX0pKXthPWZhbHNlO2JyZWFrfX1lbHNlIGlmKHMhPT1wJiYhdShzLHAscixlLGkpKXthPWZhbHNlO2JyZWFrfX1yZXR1cm4gaS5kZWxldGUobiksaS5kZWxldGUodCksYX1mdW5jdGlvbiBoZShuLHQscixlLHUsaSxvKXtzd2l0Y2gocil7Y2FzZVwiW29iamVjdCBEYXRhVmlld11cIjppZihuLmJ5dGVMZW5ndGghPXQuYnl0ZUxlbmd0aHx8bi5ieXRlT2Zmc2V0IT10LmJ5dGVPZmZzZXQpYnJlYWs7bj1uLmJ1ZmZlcix0PXQuYnVmZmVyO2Nhc2VcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI6XHJcbiAgaWYobi5ieXRlTGVuZ3RoIT10LmJ5dGVMZW5ndGh8fCFpKG5ldyB2aShuKSxuZXcgdmkodCkpKWJyZWFrO3JldHVybiB0cnVlO2Nhc2VcIltvYmplY3QgQm9vbGVhbl1cIjpjYXNlXCJbb2JqZWN0IERhdGVdXCI6Y2FzZVwiW29iamVjdCBOdW1iZXJdXCI6cmV0dXJuIGx1KCtuLCt0KTtjYXNlXCJbb2JqZWN0IEVycm9yXVwiOnJldHVybiBuLm5hbWU9PXQubmFtZSYmbi5tZXNzYWdlPT10Lm1lc3NhZ2U7Y2FzZVwiW29iamVjdCBSZWdFeHBdXCI6Y2FzZVwiW29iamVjdCBTdHJpbmddXCI6cmV0dXJuIG49PXQrXCJcIjtjYXNlXCJbb2JqZWN0IE1hcF1cIjp2YXIgZj1XO2Nhc2VcIltvYmplY3QgU2V0XVwiOmlmKGZ8fChmPVUpLG4uc2l6ZSE9dC5zaXplJiYhKDEmZSkpYnJlYWs7cmV0dXJuKHI9by5nZXQobikpP3I9PXQ6KGV8PTIsby5zZXQobix0KSx0PXNlKGYobiksZih0KSxlLHUsaSxvKSxvLmRlbGV0ZShuKSx0KTtjYXNlXCJbb2JqZWN0IFN5bWJvbF1cIjppZih0bylyZXR1cm4gdG8uY2FsbChuKT09dG8uY2FsbCh0KX1cclxuICByZXR1cm4gZmFsc2V9ZnVuY3Rpb24gcGUobil7cmV0dXJuIHhvKEJlKG4sVCxaZSksbitcIlwiKX1mdW5jdGlvbiBfZShuKXtyZXR1cm4gU3QobixXdSxwbyl9ZnVuY3Rpb24gdmUobil7cmV0dXJuIFN0KG4sQnUsX28pfWZ1bmN0aW9uIGdlKG4pe2Zvcih2YXIgdD1uLm5hbWUrXCJcIixyPUdpW3RdLGU9b2kuY2FsbChHaSx0KT9yLmxlbmd0aDowO2UtLTspe3ZhciB1PXJbZV0saT11LmZ1bmM7aWYobnVsbD09aXx8aT09bilyZXR1cm4gdS5uYW1lfXJldHVybiB0fWZ1bmN0aW9uIGRlKG4pe3JldHVybihvaS5jYWxsKEFuLFwicGxhY2Vob2xkZXJcIik/QW46bikucGxhY2Vob2xkZXJ9ZnVuY3Rpb24geWUoKXt2YXIgbj1Bbi5pdGVyYXRlZXx8RnUsbj1uPT09RnU/cXQ6bjtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD9uKGFyZ3VtZW50c1swXSxhcmd1bWVudHNbMV0pOm59ZnVuY3Rpb24gYmUobix0KXt2YXIgcj1uLl9fZGF0YV9fLGU9dHlwZW9mIHQ7cmV0dXJuKFwic3RyaW5nXCI9PWV8fFwibnVtYmVyXCI9PWV8fFwic3ltYm9sXCI9PWV8fFwiYm9vbGVhblwiPT1lP1wiX19wcm90b19fXCIhPT10Om51bGw9PT10KT9yW3R5cGVvZiB0PT1cInN0cmluZ1wiP1wic3RyaW5nXCI6XCJoYXNoXCJdOnIubWFwO1xyXG4gIH1mdW5jdGlvbiB4ZShuKXtmb3IodmFyIHQ9V3Uobikscj10Lmxlbmd0aDtyLS07KXt2YXIgZT10W3JdLHU9bltlXTt0W3JdPVtlLHUsdT09PXUmJiFkdSh1KV19cmV0dXJuIHR9ZnVuY3Rpb24gamUobix0KXt2YXIgcj1udWxsPT1uP1Q6blt0XTtyZXR1cm4gRnQocik/cjpUfWZ1bmN0aW9uIHdlKG4sdCxyKXt0PVNyKHQsbik7Zm9yKHZhciBlPS0xLHU9dC5sZW5ndGgsaT1mYWxzZTsrK2U8dTspe3ZhciBvPU1lKHRbZV0pO2lmKCEoaT1udWxsIT1uJiZyKG4sbykpKWJyZWFrO249bltvXX1yZXR1cm4gaXx8KytlIT11P2k6KHU9bnVsbD09bj8wOm4ubGVuZ3RoLCEhdSYmZ3UodSkmJlNlKG8sdSkmJihmZihuKXx8b2YobikpKX1mdW5jdGlvbiBtZShuKXt2YXIgdD1uLmxlbmd0aCxyPW5ldyBuLmNvbnN0cnVjdG9yKHQpO3JldHVybiB0JiZcInN0cmluZ1wiPT10eXBlb2YgblswXSYmb2kuY2FsbChuLFwiaW5kZXhcIikmJihyLmluZGV4PW4uaW5kZXgsci5pbnB1dD1uLmlucHV0KSxyfWZ1bmN0aW9uIEFlKG4pe1xyXG4gIHJldHVybiB0eXBlb2Ygbi5jb25zdHJ1Y3RvciE9XCJmdW5jdGlvblwifHx6ZShuKT97fTplbyhkaShuKSl9ZnVuY3Rpb24gRWUobix0LHIpe3ZhciBlPW4uY29uc3RydWN0b3I7c3dpdGNoKHQpe2Nhc2VcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI6cmV0dXJuIFJyKG4pO2Nhc2VcIltvYmplY3QgQm9vbGVhbl1cIjpjYXNlXCJbb2JqZWN0IERhdGVdXCI6cmV0dXJuIG5ldyBlKCtuKTtjYXNlXCJbb2JqZWN0IERhdGFWaWV3XVwiOnJldHVybiB0PXI/UnIobi5idWZmZXIpOm4uYnVmZmVyLG5ldyBuLmNvbnN0cnVjdG9yKHQsbi5ieXRlT2Zmc2V0LG4uYnl0ZUxlbmd0aCk7Y2FzZVwiW29iamVjdCBGbG9hdDMyQXJyYXldXCI6Y2FzZVwiW29iamVjdCBGbG9hdDY0QXJyYXldXCI6Y2FzZVwiW29iamVjdCBJbnQ4QXJyYXldXCI6Y2FzZVwiW29iamVjdCBJbnQxNkFycmF5XVwiOmNhc2VcIltvYmplY3QgSW50MzJBcnJheV1cIjpjYXNlXCJbb2JqZWN0IFVpbnQ4QXJyYXldXCI6Y2FzZVwiW29iamVjdCBVaW50OENsYW1wZWRBcnJheV1cIjpcclxuICBjYXNlXCJbb2JqZWN0IFVpbnQxNkFycmF5XVwiOmNhc2VcIltvYmplY3QgVWludDMyQXJyYXldXCI6cmV0dXJuIHpyKG4scik7Y2FzZVwiW29iamVjdCBNYXBdXCI6cmV0dXJuIG5ldyBlO2Nhc2VcIltvYmplY3QgTnVtYmVyXVwiOmNhc2VcIltvYmplY3QgU3RyaW5nXVwiOnJldHVybiBuZXcgZShuKTtjYXNlXCJbb2JqZWN0IFJlZ0V4cF1cIjpyZXR1cm4gdD1uZXcgbi5jb25zdHJ1Y3RvcihuLnNvdXJjZSxfbi5leGVjKG4pKSx0Lmxhc3RJbmRleD1uLmxhc3RJbmRleCx0O2Nhc2VcIltvYmplY3QgU2V0XVwiOnJldHVybiBuZXcgZTtjYXNlXCJbb2JqZWN0IFN5bWJvbF1cIjpyZXR1cm4gdG8/UXUodG8uY2FsbChuKSk6e319fWZ1bmN0aW9uIGtlKG4pe3JldHVybiBmZihuKXx8b2Yobil8fCEhKGppJiZuJiZuW2ppXSl9ZnVuY3Rpb24gU2Uobix0KXt2YXIgcj10eXBlb2YgbjtyZXR1cm4gdD1udWxsPT10PzkwMDcxOTkyNTQ3NDA5OTE6dCwhIXQmJihcIm51bWJlclwiPT1yfHxcInN5bWJvbFwiIT1yJiZibi50ZXN0KG4pKSYmLTE8biYmMD09biUxJiZuPHQ7XHJcbiAgfWZ1bmN0aW9uIE9lKG4sdCxyKXtpZighZHUocikpcmV0dXJuIGZhbHNlO3ZhciBlPXR5cGVvZiB0O3JldHVybiEhKFwibnVtYmVyXCI9PWU/c3UocikmJlNlKHQsci5sZW5ndGgpOlwic3RyaW5nXCI9PWUmJnQgaW4gcikmJmx1KHJbdF0sbil9ZnVuY3Rpb24gSWUobix0KXtpZihmZihuKSlyZXR1cm4gZmFsc2U7dmFyIHI9dHlwZW9mIG47cmV0dXJuIShcIm51bWJlclwiIT1yJiZcInN5bWJvbFwiIT1yJiZcImJvb2xlYW5cIiE9ciYmbnVsbCE9biYmIXd1KG4pKXx8KG5uLnRlc3Qobil8fCFYLnRlc3Qobil8fG51bGwhPXQmJm4gaW4gUXUodCkpfWZ1bmN0aW9uIFJlKG4pe3ZhciB0PWdlKG4pLHI9QW5bdF07cmV0dXJuIHR5cGVvZiByPT1cImZ1bmN0aW9uXCImJnQgaW4gVW4ucHJvdG90eXBlJiYobj09PXJ8fCh0PWhvKHIpLCEhdCYmbj09PXRbMF0pKX1mdW5jdGlvbiB6ZShuKXt2YXIgdD1uJiZuLmNvbnN0cnVjdG9yO3JldHVybiBuPT09KHR5cGVvZiB0PT1cImZ1bmN0aW9uXCImJnQucHJvdG90eXBlfHxlaSl9ZnVuY3Rpb24gV2Uobix0KXtcclxuICByZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIG51bGwhPXImJihyW25dPT09dCYmKHQhPT1UfHxuIGluIFF1KHIpKSl9fWZ1bmN0aW9uIEJlKHQscixlKXtyZXR1cm4gcj1VaShyPT09VD90Lmxlbmd0aC0xOnIsMCksZnVuY3Rpb24oKXtmb3IodmFyIHU9YXJndW1lbnRzLGk9LTEsbz1VaSh1Lmxlbmd0aC1yLDApLGY9S3Uobyk7KytpPG87KWZbaV09dVtyK2ldO2ZvcihpPS0xLG89S3UocisxKTsrK2k8cjspb1tpXT11W2ldO3JldHVybiBvW3JdPWUoZiksbih0LHRoaXMsbyl9fWZ1bmN0aW9uIExlKG4sdCl7aWYoKFwiY29uc3RydWN0b3JcIiE9PXR8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIG5bdF0pJiZcIl9fcHJvdG9fX1wiIT10KXJldHVybiBuW3RdfWZ1bmN0aW9uIFVlKG4sdCxyKXt2YXIgZT10K1wiXCI7dD14bzt2YXIgdSxpPSRlO3JldHVybiB1PSh1PWUubWF0Y2goYW4pKT91WzFdLnNwbGl0KGxuKTpbXSxyPWkodSxyKSwoaT1yLmxlbmd0aCkmJih1PWktMSxyW3VdPSgxPGk/XCImIFwiOlwiXCIpK3JbdV0sXHJcbiAgcj1yLmpvaW4oMjxpP1wiLCBcIjpcIiBcIiksZT1lLnJlcGxhY2UoY24sXCJ7XFxuLyogW3dyYXBwZWQgd2l0aCBcIityK1wiXSAqL1xcblwiKSksdChuLGUpfWZ1bmN0aW9uIENlKG4pe3ZhciB0PTAscj0wO3JldHVybiBmdW5jdGlvbigpe3ZhciBlPURpKCksdT0xNi0oZS1yKTtpZihyPWUsMDx1KXtpZig4MDA8PSsrdClyZXR1cm4gYXJndW1lbnRzWzBdfWVsc2UgdD0wO3JldHVybiBuLmFwcGx5KFQsYXJndW1lbnRzKX19ZnVuY3Rpb24gRGUobix0KXt2YXIgcj0tMSxlPW4ubGVuZ3RoLHU9ZS0xO2Zvcih0PXQ9PT1UP2U6dDsrK3I8dDspe3ZhciBlPWlyKHIsdSksaT1uW2VdO25bZV09bltyXSxuW3JdPWl9cmV0dXJuIG4ubGVuZ3RoPXQsbn1mdW5jdGlvbiBNZShuKXtpZih0eXBlb2Ygbj09XCJzdHJpbmdcInx8d3UobikpcmV0dXJuIG47dmFyIHQ9bitcIlwiO3JldHVyblwiMFwiPT10JiYxL249PS0kP1wiLTBcIjp0fWZ1bmN0aW9uIFRlKG4pe2lmKG51bGwhPW4pe3RyeXtyZXR1cm4gaWkuY2FsbChuKX1jYXRjaChuKXt9XHJcbiAgcmV0dXJuIG4rXCJcIn1yZXR1cm5cIlwifWZ1bmN0aW9uICRlKG4sdCl7cmV0dXJuIHIoTixmdW5jdGlvbihyKXt2YXIgZT1cIl8uXCIrclswXTt0JnJbMV0mJiFvKG4sZSkmJm4ucHVzaChlKX0pLG4uc29ydCgpfWZ1bmN0aW9uIEZlKG4pe2lmKG4gaW5zdGFuY2VvZiBVbilyZXR1cm4gbi5jbG9uZSgpO3ZhciB0PW5ldyBPbihuLl9fd3JhcHBlZF9fLG4uX19jaGFpbl9fKTtyZXR1cm4gdC5fX2FjdGlvbnNfXz1VcihuLl9fYWN0aW9uc19fKSx0Ll9faW5kZXhfXz1uLl9faW5kZXhfXyx0Ll9fdmFsdWVzX189bi5fX3ZhbHVlc19fLHR9ZnVuY3Rpb24gTmUobix0LHIpe3ZhciBlPW51bGw9PW4/MDpuLmxlbmd0aDtyZXR1cm4gZT8ocj1udWxsPT1yPzA6RXUociksMD5yJiYocj1VaShlK3IsMCkpLF8obix5ZSh0LDMpLHIpKTotMX1mdW5jdGlvbiBQZShuLHQscil7dmFyIGU9bnVsbD09bj8wOm4ubGVuZ3RoO2lmKCFlKXJldHVybi0xO3ZhciB1PWUtMTtyZXR1cm4gciE9PVQmJih1PUV1KHIpLHU9MD5yP1VpKGUrdSwwKTpDaSh1LGUtMSkpLFxyXG4gIF8obix5ZSh0LDMpLHUsdHJ1ZSl9ZnVuY3Rpb24gWmUobil7cmV0dXJuKG51bGw9PW4/MDpuLmxlbmd0aCk/d3QobiwxKTpbXX1mdW5jdGlvbiBxZShuKXtyZXR1cm4gbiYmbi5sZW5ndGg/blswXTpUfWZ1bmN0aW9uIFZlKG4pe3ZhciB0PW51bGw9PW4/MDpuLmxlbmd0aDtyZXR1cm4gdD9uW3QtMV06VH1mdW5jdGlvbiBLZShuLHQpe3JldHVybiBuJiZuLmxlbmd0aCYmdCYmdC5sZW5ndGg/ZXIobix0KTpufWZ1bmN0aW9uIEdlKG4pe3JldHVybiBudWxsPT1uP246JGkuY2FsbChuKX1mdW5jdGlvbiBIZShuKXtpZighbnx8IW4ubGVuZ3RoKXJldHVybltdO3ZhciB0PTA7cmV0dXJuIG49aShuLGZ1bmN0aW9uKG4pe2lmKGh1KG4pKXJldHVybiB0PVVpKG4ubGVuZ3RoLHQpLHRydWV9KSxBKHQsZnVuY3Rpb24odCl7cmV0dXJuIGMobixiKHQpKX0pfWZ1bmN0aW9uIEplKHQscil7aWYoIXR8fCF0Lmxlbmd0aClyZXR1cm5bXTt2YXIgZT1IZSh0KTtyZXR1cm4gbnVsbD09cj9lOmMoZSxmdW5jdGlvbih0KXtcclxuICByZXR1cm4gbihyLFQsdCl9KX1mdW5jdGlvbiBZZShuKXtyZXR1cm4gbj1BbihuKSxuLl9fY2hhaW5fXz10cnVlLG59ZnVuY3Rpb24gUWUobix0KXtyZXR1cm4gdChuKX1mdW5jdGlvbiBYZSgpe3JldHVybiB0aGlzfWZ1bmN0aW9uIG51KG4sdCl7cmV0dXJuKGZmKG4pP3I6dW8pKG4seWUodCwzKSl9ZnVuY3Rpb24gdHUobix0KXtyZXR1cm4oZmYobik/ZTppbykobix5ZSh0LDMpKX1mdW5jdGlvbiBydShuLHQpe3JldHVybihmZihuKT9jOkd0KShuLHllKHQsMykpfWZ1bmN0aW9uIGV1KG4sdCxyKXtyZXR1cm4gdD1yP1Q6dCx0PW4mJm51bGw9PXQ/bi5sZW5ndGg6dCxmZShuLDEyOCxULFQsVCxULHQpfWZ1bmN0aW9uIHV1KG4sdCl7dmFyIHI7aWYodHlwZW9mIHQhPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgdGkoXCJFeHBlY3RlZCBhIGZ1bmN0aW9uXCIpO3JldHVybiBuPUV1KG4pLGZ1bmN0aW9uKCl7cmV0dXJuIDA8LS1uJiYocj10LmFwcGx5KHRoaXMsYXJndW1lbnRzKSksMT49biYmKHQ9VCksXHJcbiAgcn19ZnVuY3Rpb24gaXUobix0LHIpe3JldHVybiB0PXI/VDp0LG49ZmUobiw4LFQsVCxULFQsVCx0KSxuLnBsYWNlaG9sZGVyPWl1LnBsYWNlaG9sZGVyLG59ZnVuY3Rpb24gb3Uobix0LHIpe3JldHVybiB0PXI/VDp0LG49ZmUobiwxNixULFQsVCxULFQsdCksbi5wbGFjZWhvbGRlcj1vdS5wbGFjZWhvbGRlcixufWZ1bmN0aW9uIGZ1KG4sdCxyKXtmdW5jdGlvbiBlKHQpe3ZhciByPWMsZT1hO3JldHVybiBjPWE9VCxfPXQscz1uLmFwcGx5KGUscil9ZnVuY3Rpb24gdShuKXt2YXIgcj1uLXA7cmV0dXJuIG4tPV8scD09PVR8fHI+PXR8fDA+cnx8ZyYmbj49bH1mdW5jdGlvbiBpKCl7dmFyIG49R28oKTtpZih1KG4pKXJldHVybiBvKG4pO3ZhciByLGU9Ym87cj1uLV8sbj10LShuLXApLHI9Zz9DaShuLGwtcik6bixoPWUoaSxyKX1mdW5jdGlvbiBvKG4pe3JldHVybiBoPVQsZCYmYz9lKG4pOihjPWE9VCxzKX1mdW5jdGlvbiBmKCl7dmFyIG49R28oKSxyPXUobik7aWYoYz1hcmd1bWVudHMsXHJcbiAgYT10aGlzLHA9bixyKXtpZihoPT09VClyZXR1cm4gXz1uPXAsaD1ibyhpLHQpLHY/ZShuKTpzO2lmKGcpcmV0dXJuIGxvKGgpLGg9Ym8oaSx0KSxlKHApfXJldHVybiBoPT09VCYmKGg9Ym8oaSx0KSksc312YXIgYyxhLGwscyxoLHAsXz0wLHY9ZmFsc2UsZz1mYWxzZSxkPXRydWU7aWYodHlwZW9mIG4hPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgdGkoXCJFeHBlY3RlZCBhIGZ1bmN0aW9uXCIpO3JldHVybiB0PVN1KHQpfHwwLGR1KHIpJiYodj0hIXIubGVhZGluZyxsPShnPVwibWF4V2FpdFwiaW4gcik/VWkoU3Uoci5tYXhXYWl0KXx8MCx0KTpsLGQ9XCJ0cmFpbGluZ1wiaW4gcj8hIXIudHJhaWxpbmc6ZCksZi5jYW5jZWw9ZnVuY3Rpb24oKXtoIT09VCYmbG8oaCksXz0wLGM9cD1hPWg9VH0sZi5mbHVzaD1mdW5jdGlvbigpe3JldHVybiBoPT09VD9zOm8oR28oKSl9LGZ9ZnVuY3Rpb24gY3Uobix0KXtmdW5jdGlvbiByKCl7dmFyIGU9YXJndW1lbnRzLHU9dD90LmFwcGx5KHRoaXMsZSk6ZVswXSxpPXIuY2FjaGU7XHJcbiAgcmV0dXJuIGkuaGFzKHUpP2kuZ2V0KHUpOihlPW4uYXBwbHkodGhpcyxlKSxyLmNhY2hlPWkuc2V0KHUsZSl8fGksZSl9aWYodHlwZW9mIG4hPVwiZnVuY3Rpb25cInx8bnVsbCE9dCYmdHlwZW9mIHQhPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgdGkoXCJFeHBlY3RlZCBhIGZ1bmN0aW9uXCIpO3JldHVybiByLmNhY2hlPW5ldyhjdS5DYWNoZXx8Rm4pLHJ9ZnVuY3Rpb24gYXUobil7aWYodHlwZW9mIG4hPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgdGkoXCJFeHBlY3RlZCBhIGZ1bmN0aW9uXCIpO3JldHVybiBmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cztzd2l0Y2godC5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4hbi5jYWxsKHRoaXMpO2Nhc2UgMTpyZXR1cm4hbi5jYWxsKHRoaXMsdFswXSk7Y2FzZSAyOnJldHVybiFuLmNhbGwodGhpcyx0WzBdLHRbMV0pO2Nhc2UgMzpyZXR1cm4hbi5jYWxsKHRoaXMsdFswXSx0WzFdLHRbMl0pfXJldHVybiFuLmFwcGx5KHRoaXMsdCl9fWZ1bmN0aW9uIGx1KG4sdCl7cmV0dXJuIG49PT10fHxuIT09biYmdCE9PXQ7XHJcbiAgfWZ1bmN0aW9uIHN1KG4pe3JldHVybiBudWxsIT1uJiZndShuLmxlbmd0aCkmJiFfdShuKX1mdW5jdGlvbiBodShuKXtyZXR1cm4geXUobikmJnN1KG4pfWZ1bmN0aW9uIHB1KG4pe2lmKCF5dShuKSlyZXR1cm4gZmFsc2U7dmFyIHQ9T3Qobik7cmV0dXJuXCJbb2JqZWN0IEVycm9yXVwiPT10fHxcIltvYmplY3QgRE9NRXhjZXB0aW9uXVwiPT10fHx0eXBlb2Ygbi5tZXNzYWdlPT1cInN0cmluZ1wiJiZ0eXBlb2Ygbi5uYW1lPT1cInN0cmluZ1wiJiYheHUobil9ZnVuY3Rpb24gX3Uobil7cmV0dXJuISFkdShuKSYmKG49T3QobiksXCJbb2JqZWN0IEZ1bmN0aW9uXVwiPT1ufHxcIltvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dXCI9PW58fFwiW29iamVjdCBBc3luY0Z1bmN0aW9uXVwiPT1ufHxcIltvYmplY3QgUHJveHldXCI9PW4pfWZ1bmN0aW9uIHZ1KG4pe3JldHVybiB0eXBlb2Ygbj09XCJudW1iZXJcIiYmbj09RXUobil9ZnVuY3Rpb24gZ3Uobil7cmV0dXJuIHR5cGVvZiBuPT1cIm51bWJlclwiJiYtMTxuJiYwPT1uJTEmJjkwMDcxOTkyNTQ3NDA5OTE+PW47XHJcbiAgfWZ1bmN0aW9uIGR1KG4pe3ZhciB0PXR5cGVvZiBuO3JldHVybiBudWxsIT1uJiYoXCJvYmplY3RcIj09dHx8XCJmdW5jdGlvblwiPT10KX1mdW5jdGlvbiB5dShuKXtyZXR1cm4gbnVsbCE9biYmdHlwZW9mIG49PVwib2JqZWN0XCJ9ZnVuY3Rpb24gYnUobil7cmV0dXJuIHR5cGVvZiBuPT1cIm51bWJlclwifHx5dShuKSYmXCJbb2JqZWN0IE51bWJlcl1cIj09T3Qobil9ZnVuY3Rpb24geHUobil7cmV0dXJuISgheXUobil8fFwiW29iamVjdCBPYmplY3RdXCIhPU90KG4pKSYmKG49ZGkobiksbnVsbD09PW58fChuPW9pLmNhbGwobixcImNvbnN0cnVjdG9yXCIpJiZuLmNvbnN0cnVjdG9yLHR5cGVvZiBuPT1cImZ1bmN0aW9uXCImJm4gaW5zdGFuY2VvZiBuJiZpaS5jYWxsKG4pPT1saSkpfWZ1bmN0aW9uIGp1KG4pe3JldHVybiB0eXBlb2Ygbj09XCJzdHJpbmdcInx8IWZmKG4pJiZ5dShuKSYmXCJbb2JqZWN0IFN0cmluZ11cIj09T3Qobil9ZnVuY3Rpb24gd3Uobil7cmV0dXJuIHR5cGVvZiBuPT1cInN5bWJvbFwifHx5dShuKSYmXCJbb2JqZWN0IFN5bWJvbF1cIj09T3Qobik7XHJcbiAgfWZ1bmN0aW9uIG11KG4pe2lmKCFuKXJldHVybltdO2lmKHN1KG4pKXJldHVybiBqdShuKT9NKG4pOlVyKG4pO2lmKHdpJiZuW3dpXSl7bj1uW3dpXSgpO2Zvcih2YXIgdCxyPVtdOyEodD1uLm5leHQoKSkuZG9uZTspci5wdXNoKHQudmFsdWUpO3JldHVybiByfXJldHVybiB0PXZvKG4pLChcIltvYmplY3QgTWFwXVwiPT10P1c6XCJbb2JqZWN0IFNldF1cIj09dD9VOlV1KShuKX1mdW5jdGlvbiBBdShuKXtyZXR1cm4gbj8obj1TdShuKSxuPT09JHx8bj09PS0kPzEuNzk3NjkzMTM0ODYyMzE1N2UzMDgqKDA+bj8tMToxKTpuPT09bj9uOjApOjA9PT1uP246MH1mdW5jdGlvbiBFdShuKXtuPUF1KG4pO3ZhciB0PW4lMTtyZXR1cm4gbj09PW4/dD9uLXQ6bjowfWZ1bmN0aW9uIGt1KG4pe3JldHVybiBuP3B0KEV1KG4pLDAsNDI5NDk2NzI5NSk6MH1mdW5jdGlvbiBTdShuKXtpZih0eXBlb2Ygbj09XCJudW1iZXJcIilyZXR1cm4gbjtpZih3dShuKSlyZXR1cm4gRjtpZihkdShuKSYmKG49dHlwZW9mIG4udmFsdWVPZj09XCJmdW5jdGlvblwiP24udmFsdWVPZigpOm4sXHJcbiAgbj1kdShuKT9uK1wiXCI6biksdHlwZW9mIG4hPVwic3RyaW5nXCIpcmV0dXJuIDA9PT1uP246K247bj1uLnJlcGxhY2UodW4sXCJcIik7dmFyIHQ9Z24udGVzdChuKTtyZXR1cm4gdHx8eW4udGVzdChuKT9EbihuLnNsaWNlKDIpLHQ/Mjo4KTp2bi50ZXN0KG4pP0Y6K259ZnVuY3Rpb24gT3Uobil7cmV0dXJuIENyKG4sQnUobikpfWZ1bmN0aW9uIEl1KG4pe3JldHVybiBudWxsPT1uP1wiXCI6eXIobil9ZnVuY3Rpb24gUnUobix0LHIpe3JldHVybiBuPW51bGw9PW4/VDprdChuLHQpLG49PT1UP3I6bn1mdW5jdGlvbiB6dShuLHQpe3JldHVybiBudWxsIT1uJiZ3ZShuLHQsenQpfWZ1bmN0aW9uIFd1KG4pe3JldHVybiBzdShuKT9xbihuKTpWdChuKX1mdW5jdGlvbiBCdShuKXtpZihzdShuKSluPXFuKG4sdHJ1ZSk7ZWxzZSBpZihkdShuKSl7dmFyIHQscj16ZShuKSxlPVtdO2Zvcih0IGluIG4pKFwiY29uc3RydWN0b3JcIiE9dHx8IXImJm9pLmNhbGwobix0KSkmJmUucHVzaCh0KTtuPWV9ZWxzZXtpZih0PVtdLFxyXG4gIG51bGwhPW4pZm9yKHIgaW4gUXUobikpdC5wdXNoKHIpO249dH1yZXR1cm4gbn1mdW5jdGlvbiBMdShuLHQpe2lmKG51bGw9PW4pcmV0dXJue307dmFyIHI9Yyh2ZShuKSxmdW5jdGlvbihuKXtyZXR1cm5bbl19KTtyZXR1cm4gdD15ZSh0KSx0cihuLHIsZnVuY3Rpb24obixyKXtyZXR1cm4gdChuLHJbMF0pfSl9ZnVuY3Rpb24gVXUobil7cmV0dXJuIG51bGw9PW4/W106UyhuLFd1KG4pKX1mdW5jdGlvbiBDdShuKXtyZXR1cm4gJGYoSXUobikudG9Mb3dlckNhc2UoKSl9ZnVuY3Rpb24gRHUobil7cmV0dXJuKG49SXUobikpJiZuLnJlcGxhY2UoeG4sWG4pLnJlcGxhY2UoU24sXCJcIil9ZnVuY3Rpb24gTXUobix0LHIpe3JldHVybiBuPUl1KG4pLHQ9cj9UOnQsdD09PVQ/em4udGVzdChuKT9uLm1hdGNoKEluKXx8W106bi5tYXRjaChzbil8fFtdOm4ubWF0Y2godCl8fFtdfWZ1bmN0aW9uIFR1KG4pe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBufX1mdW5jdGlvbiAkdShuKXtyZXR1cm4gbjtcclxuICB9ZnVuY3Rpb24gRnUobil7cmV0dXJuIHF0KHR5cGVvZiBuPT1cImZ1bmN0aW9uXCI/bjpfdChuLDEpKX1mdW5jdGlvbiBOdShuLHQsZSl7dmFyIHU9V3UodCksaT1FdCh0LHUpO251bGwhPWV8fGR1KHQpJiYoaS5sZW5ndGh8fCF1Lmxlbmd0aCl8fChlPXQsdD1uLG49dGhpcyxpPUV0KHQsV3UodCkpKTt2YXIgbz0hKGR1KGUpJiZcImNoYWluXCJpbiBlJiYhZS5jaGFpbiksZj1fdShuKTtyZXR1cm4gcihpLGZ1bmN0aW9uKHIpe3ZhciBlPXRbcl07bltyXT1lLGYmJihuLnByb3RvdHlwZVtyXT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX19jaGFpbl9fO2lmKG98fHQpe3ZhciByPW4odGhpcy5fX3dyYXBwZWRfXyk7cmV0dXJuKHIuX19hY3Rpb25zX189VXIodGhpcy5fX2FjdGlvbnNfXykpLnB1c2goe2Z1bmM6ZSxhcmdzOmFyZ3VtZW50cyx0aGlzQXJnOm59KSxyLl9fY2hhaW5fXz10LHJ9cmV0dXJuIGUuYXBwbHkobixhKFt0aGlzLnZhbHVlKCldLGFyZ3VtZW50cykpfSl9KSxufWZ1bmN0aW9uIFB1KCl7fVxyXG4gIGZ1bmN0aW9uIFp1KG4pe3JldHVybiBJZShuKT9iKE1lKG4pKTpycihuKX1mdW5jdGlvbiBxdSgpe3JldHVybltdfWZ1bmN0aW9uIFZ1KCl7cmV0dXJuIGZhbHNlfW1uPW51bGw9PW1uPyRuOnJ0LmRlZmF1bHRzKCRuLk9iamVjdCgpLG1uLHJ0LnBpY2soJG4sV24pKTt2YXIgS3U9bW4uQXJyYXksR3U9bW4uRGF0ZSxIdT1tbi5FcnJvcixKdT1tbi5GdW5jdGlvbixZdT1tbi5NYXRoLFF1PW1uLk9iamVjdCxYdT1tbi5SZWdFeHAsbmk9bW4uU3RyaW5nLHRpPW1uLlR5cGVFcnJvcixyaT1LdS5wcm90b3R5cGUsZWk9UXUucHJvdG90eXBlLHVpPW1uW1wiX19jb3JlLWpzX3NoYXJlZF9fXCJdLGlpPUp1LnByb3RvdHlwZS50b1N0cmluZyxvaT1laS5oYXNPd25Qcm9wZXJ0eSxmaT0wLGNpPWZ1bmN0aW9uKCl7dmFyIG49L1teLl0rJC8uZXhlYyh1aSYmdWkua2V5cyYmdWkua2V5cy5JRV9QUk9UT3x8XCJcIik7cmV0dXJuIG4/XCJTeW1ib2woc3JjKV8xLlwiK246XCJcIn0oKSxhaT1laS50b1N0cmluZyxsaT1paS5jYWxsKFF1KSxzaT0kbi5fLGhpPVh1KFwiXlwiK2lpLmNhbGwob2kpLnJlcGxhY2Uocm4sXCJcXFxcJCZcIikucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZyxcIiQxLio/XCIpK1wiJFwiKSxwaT1Qbj9tbi5CdWZmZXI6VCxfaT1tbi5TeW1ib2wsdmk9bW4uVWludDhBcnJheSxnaT1waT9waS5nOlQsZGk9QihRdS5nZXRQcm90b3R5cGVPZixRdSkseWk9UXUuY3JlYXRlLGJpPWVpLnByb3BlcnR5SXNFbnVtZXJhYmxlLHhpPXJpLnNwbGljZSxqaT1faT9faS5pc0NvbmNhdFNwcmVhZGFibGU6VCx3aT1faT9faS5pdGVyYXRvcjpULG1pPV9pP19pLnRvU3RyaW5nVGFnOlQsQWk9ZnVuY3Rpb24oKXtcclxuICB0cnl7dmFyIG49amUoUXUsXCJkZWZpbmVQcm9wZXJ0eVwiKTtyZXR1cm4gbih7fSxcIlwiLHt9KSxufWNhdGNoKG4pe319KCksRWk9bW4uY2xlYXJUaW1lb3V0IT09JG4uY2xlYXJUaW1lb3V0JiZtbi5jbGVhclRpbWVvdXQsa2k9R3UmJkd1Lm5vdyE9PSRuLkRhdGUubm93JiZHdS5ub3csU2k9bW4uc2V0VGltZW91dCE9PSRuLnNldFRpbWVvdXQmJm1uLnNldFRpbWVvdXQsT2k9WXUuY2VpbCxJaT1ZdS5mbG9vcixSaT1RdS5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsemk9cGk/cGkuaXNCdWZmZXI6VCxXaT1tbi5pc0Zpbml0ZSxCaT1yaS5qb2luLExpPUIoUXUua2V5cyxRdSksVWk9WXUubWF4LENpPVl1Lm1pbixEaT1HdS5ub3csTWk9bW4ucGFyc2VJbnQsVGk9WXUucmFuZG9tLCRpPXJpLnJldmVyc2UsRmk9amUobW4sXCJEYXRhVmlld1wiKSxOaT1qZShtbixcIk1hcFwiKSxQaT1qZShtbixcIlByb21pc2VcIiksWmk9amUobW4sXCJTZXRcIikscWk9amUobW4sXCJXZWFrTWFwXCIpLFZpPWplKFF1LFwiY3JlYXRlXCIpLEtpPXFpJiZuZXcgcWksR2k9e30sSGk9VGUoRmkpLEppPVRlKE5pKSxZaT1UZShQaSksUWk9VGUoWmkpLFhpPVRlKHFpKSxubz1faT9faS5wcm90b3R5cGU6VCx0bz1ubz9uby52YWx1ZU9mOlQscm89bm8/bm8udG9TdHJpbmc6VCxlbz1mdW5jdGlvbigpe1xyXG4gIGZ1bmN0aW9uIG4oKXt9cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBkdSh0KT95aT95aSh0KToobi5wcm90b3R5cGU9dCx0PW5ldyBuLG4ucHJvdG90eXBlPVQsdCk6e319fSgpO0FuLnRlbXBsYXRlU2V0dGluZ3M9e2VzY2FwZTpKLGV2YWx1YXRlOlksaW50ZXJwb2xhdGU6USx2YXJpYWJsZTpcIlwiLGltcG9ydHM6e186QW59fSxBbi5wcm90b3R5cGU9RW4ucHJvdG90eXBlLEFuLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1BbixPbi5wcm90b3R5cGU9ZW8oRW4ucHJvdG90eXBlKSxPbi5wcm90b3R5cGUuY29uc3RydWN0b3I9T24sVW4ucHJvdG90eXBlPWVvKEVuLnByb3RvdHlwZSksVW4ucHJvdG90eXBlLmNvbnN0cnVjdG9yPVVuLE1uLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuX19kYXRhX189Vmk/VmkobnVsbCk6e30sdGhpcy5zaXplPTB9LE1uLnByb3RvdHlwZS5kZWxldGU9ZnVuY3Rpb24obil7cmV0dXJuIG49dGhpcy5oYXMobikmJmRlbGV0ZSB0aGlzLl9fZGF0YV9fW25dLFxyXG4gIHRoaXMuc2l6ZS09bj8xOjAsbn0sTW4ucHJvdG90eXBlLmdldD1mdW5jdGlvbihuKXt2YXIgdD10aGlzLl9fZGF0YV9fO3JldHVybiBWaT8obj10W25dLFwiX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfX1wiPT09bj9UOm4pOm9pLmNhbGwodCxuKT90W25dOlR9LE1uLnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24obil7dmFyIHQ9dGhpcy5fX2RhdGFfXztyZXR1cm4gVmk/dFtuXSE9PVQ6b2kuY2FsbCh0LG4pfSxNbi5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKG4sdCl7dmFyIHI9dGhpcy5fX2RhdGFfXztyZXR1cm4gdGhpcy5zaXplKz10aGlzLmhhcyhuKT8wOjEscltuXT1WaSYmdD09PVQ/XCJfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fXCI6dCx0aGlzfSxUbi5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLl9fZGF0YV9fPVtdLHRoaXMuc2l6ZT0wfSxUbi5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKG4pe3ZhciB0PXRoaXMuX19kYXRhX187cmV0dXJuIG49ZnQodCxuKSwhKDA+bikmJihuPT10Lmxlbmd0aC0xP3QucG9wKCk6eGkuY2FsbCh0LG4sMSksXHJcbiAgLS10aGlzLnNpemUsdHJ1ZSl9LFRuLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24obil7dmFyIHQ9dGhpcy5fX2RhdGFfXztyZXR1cm4gbj1mdCh0LG4pLDA+bj9UOnRbbl1bMV19LFRuLnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24obil7cmV0dXJuLTE8ZnQodGhpcy5fX2RhdGFfXyxuKX0sVG4ucHJvdG90eXBlLnNldD1mdW5jdGlvbihuLHQpe3ZhciByPXRoaXMuX19kYXRhX18sZT1mdChyLG4pO3JldHVybiAwPmU/KCsrdGhpcy5zaXplLHIucHVzaChbbix0XSkpOnJbZV1bMV09dCx0aGlzfSxGbi5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLnNpemU9MCx0aGlzLl9fZGF0YV9fPXtoYXNoOm5ldyBNbixtYXA6bmV3KE5pfHxUbiksc3RyaW5nOm5ldyBNbn19LEZuLnByb3RvdHlwZS5kZWxldGU9ZnVuY3Rpb24obil7cmV0dXJuIG49YmUodGhpcyxuKS5kZWxldGUobiksdGhpcy5zaXplLT1uPzE6MCxufSxGbi5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKG4pe3JldHVybiBiZSh0aGlzLG4pLmdldChuKTtcclxuICB9LEZuLnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24obil7cmV0dXJuIGJlKHRoaXMsbikuaGFzKG4pfSxGbi5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKG4sdCl7dmFyIHI9YmUodGhpcyxuKSxlPXIuc2l6ZTtyZXR1cm4gci5zZXQobix0KSx0aGlzLnNpemUrPXIuc2l6ZT09ZT8wOjEsdGhpc30sTm4ucHJvdG90eXBlLmFkZD1Obi5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5fX2RhdGFfXy5zZXQobixcIl9fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX19cIiksdGhpc30sTm4ucHJvdG90eXBlLmhhcz1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMobil9LFpuLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuX19kYXRhX189bmV3IFRuLHRoaXMuc2l6ZT0wfSxabi5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKG4pe3ZhciB0PXRoaXMuX19kYXRhX187cmV0dXJuIG49dC5kZWxldGUobiksdGhpcy5zaXplPXQuc2l6ZSxufSxabi5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKG4pe1xyXG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChuKX0sWm4ucHJvdG90eXBlLmhhcz1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMobil9LFpuLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24obix0KXt2YXIgcj10aGlzLl9fZGF0YV9fO2lmKHIgaW5zdGFuY2VvZiBUbil7dmFyIGU9ci5fX2RhdGFfXztpZighTml8fDE5OT5lLmxlbmd0aClyZXR1cm4gZS5wdXNoKFtuLHRdKSx0aGlzLnNpemU9KytyLnNpemUsdGhpcztyPXRoaXMuX19kYXRhX189bmV3IEZuKGUpfXJldHVybiByLnNldChuLHQpLHRoaXMuc2l6ZT1yLnNpemUsdGhpc307dmFyIHVvPUZyKG10KSxpbz1GcihBdCx0cnVlKSxvbz1OcigpLGZvPU5yKHRydWUpLGNvPUtpP2Z1bmN0aW9uKG4sdCl7cmV0dXJuIEtpLnNldChuLHQpLG59OiR1LGFvPUFpP2Z1bmN0aW9uKG4sdCl7cmV0dXJuIEFpKG4sXCJ0b1N0cmluZ1wiLHtjb25maWd1cmFibGU6dHJ1ZSxlbnVtZXJhYmxlOmZhbHNlLHZhbHVlOlR1KHQpLHdyaXRhYmxlOnRydWV9KX06JHUsbG89RWl8fGZ1bmN0aW9uKG4pe1xyXG4gIHJldHVybiAkbi5jbGVhclRpbWVvdXQobil9LHNvPVppJiYxL1UobmV3IFppKFssLTBdKSlbMV09PSQ/ZnVuY3Rpb24obil7cmV0dXJuIG5ldyBaaShuKX06UHUsaG89S2k/ZnVuY3Rpb24obil7cmV0dXJuIEtpLmdldChuKX06UHUscG89Umk/ZnVuY3Rpb24obil7cmV0dXJuIG51bGw9PW4/W106KG49UXUobiksaShSaShuKSxmdW5jdGlvbih0KXtyZXR1cm4gYmkuY2FsbChuLHQpfSkpfTpxdSxfbz1SaT9mdW5jdGlvbihuKXtmb3IodmFyIHQ9W107bjspYSh0LHBvKG4pKSxuPWRpKG4pO3JldHVybiB0fTpxdSx2bz1PdDsoRmkmJlwiW29iamVjdCBEYXRhVmlld11cIiE9dm8obmV3IEZpKG5ldyBBcnJheUJ1ZmZlcigxKSkpfHxOaSYmXCJbb2JqZWN0IE1hcF1cIiE9dm8obmV3IE5pKXx8UGkmJlwiW29iamVjdCBQcm9taXNlXVwiIT12byhQaS5yZXNvbHZlKCkpfHxaaSYmXCJbb2JqZWN0IFNldF1cIiE9dm8obmV3IFppKXx8cWkmJlwiW29iamVjdCBXZWFrTWFwXVwiIT12byhuZXcgcWkpKSYmKHZvPWZ1bmN0aW9uKG4pe1xyXG4gIHZhciB0PU90KG4pO2lmKG49KG49XCJbb2JqZWN0IE9iamVjdF1cIj09dD9uLmNvbnN0cnVjdG9yOlQpP1RlKG4pOlwiXCIpc3dpdGNoKG4pe2Nhc2UgSGk6cmV0dXJuXCJbb2JqZWN0IERhdGFWaWV3XVwiO2Nhc2UgSmk6cmV0dXJuXCJbb2JqZWN0IE1hcF1cIjtjYXNlIFlpOnJldHVyblwiW29iamVjdCBQcm9taXNlXVwiO2Nhc2UgUWk6cmV0dXJuXCJbb2JqZWN0IFNldF1cIjtjYXNlIFhpOnJldHVyblwiW29iamVjdCBXZWFrTWFwXVwifXJldHVybiB0fSk7dmFyIGdvPXVpP191OlZ1LHlvPUNlKGNvKSxibz1TaXx8ZnVuY3Rpb24obix0KXtyZXR1cm4gJG4uc2V0VGltZW91dChuLHQpfSx4bz1DZShhbyksam89ZnVuY3Rpb24obil7bj1jdShuLGZ1bmN0aW9uKG4pe3JldHVybiA1MDA9PT10LnNpemUmJnQuY2xlYXIoKSxufSk7dmFyIHQ9bi5jYWNoZTtyZXR1cm4gbn0oZnVuY3Rpb24obil7dmFyIHQ9W107cmV0dXJuIDQ2PT09bi5jaGFyQ29kZUF0KDApJiZ0LnB1c2goXCJcIiksbi5yZXBsYWNlKHRuLGZ1bmN0aW9uKG4scixlLHUpe1xyXG4gIHQucHVzaChlP3UucmVwbGFjZShobixcIiQxXCIpOnJ8fG4pfSksdH0pLHdvPWZyKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIGh1KG4pP3l0KG4sd3QodCwxLGh1LHRydWUpKTpbXX0pLG1vPWZyKGZ1bmN0aW9uKG4sdCl7dmFyIHI9VmUodCk7cmV0dXJuIGh1KHIpJiYocj1UKSxodShuKT95dChuLHd0KHQsMSxodSx0cnVlKSx5ZShyLDIpKTpbXX0pLEFvPWZyKGZ1bmN0aW9uKG4sdCl7dmFyIHI9VmUodCk7cmV0dXJuIGh1KHIpJiYocj1UKSxodShuKT95dChuLHd0KHQsMSxodSx0cnVlKSxULHIpOltdfSksRW89ZnIoZnVuY3Rpb24obil7dmFyIHQ9YyhuLEVyKTtyZXR1cm4gdC5sZW5ndGgmJnRbMF09PT1uWzBdP1d0KHQpOltdfSksa289ZnIoZnVuY3Rpb24obil7dmFyIHQ9VmUobikscj1jKG4sRXIpO3JldHVybiB0PT09VmUocik/dD1UOnIucG9wKCksci5sZW5ndGgmJnJbMF09PT1uWzBdP1d0KHIseWUodCwyKSk6W119KSxTbz1mcihmdW5jdGlvbihuKXt2YXIgdD1WZShuKSxyPWMobixFcik7cmV0dXJuKHQ9dHlwZW9mIHQ9PVwiZnVuY3Rpb25cIj90OlQpJiZyLnBvcCgpLFxyXG4gIHIubGVuZ3RoJiZyWzBdPT09blswXT9XdChyLFQsdCk6W119KSxPbz1mcihLZSksSW89cGUoZnVuY3Rpb24obix0KXt2YXIgcj1udWxsPT1uPzA6bi5sZW5ndGgsZT1odChuLHQpO3JldHVybiB1cihuLGModCxmdW5jdGlvbihuKXtyZXR1cm4gU2UobixyKT8rbjpufSkuc29ydChXcikpLGV9KSxSbz1mcihmdW5jdGlvbihuKXtyZXR1cm4gYnIod3QobiwxLGh1LHRydWUpKX0pLHpvPWZyKGZ1bmN0aW9uKG4pe3ZhciB0PVZlKG4pO3JldHVybiBodSh0KSYmKHQ9VCksYnIod3QobiwxLGh1LHRydWUpLHllKHQsMikpfSksV289ZnIoZnVuY3Rpb24obil7dmFyIHQ9VmUobiksdD10eXBlb2YgdD09XCJmdW5jdGlvblwiP3Q6VDtyZXR1cm4gYnIod3QobiwxLGh1LHRydWUpLFQsdCl9KSxCbz1mcihmdW5jdGlvbihuLHQpe3JldHVybiBodShuKT95dChuLHQpOltdfSksTG89ZnIoZnVuY3Rpb24obil7cmV0dXJuIG1yKGkobixodSkpfSksVW89ZnIoZnVuY3Rpb24obil7dmFyIHQ9VmUobik7cmV0dXJuIGh1KHQpJiYodD1UKSxcclxuICBtcihpKG4saHUpLHllKHQsMikpfSksQ289ZnIoZnVuY3Rpb24obil7dmFyIHQ9VmUobiksdD10eXBlb2YgdD09XCJmdW5jdGlvblwiP3Q6VDtyZXR1cm4gbXIoaShuLGh1KSxULHQpfSksRG89ZnIoSGUpLE1vPWZyKGZ1bmN0aW9uKG4pe3ZhciB0PW4ubGVuZ3RoLHQ9MTx0P25bdC0xXTpULHQ9dHlwZW9mIHQ9PVwiZnVuY3Rpb25cIj8obi5wb3AoKSx0KTpUO3JldHVybiBKZShuLHQpfSksVG89cGUoZnVuY3Rpb24obil7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gaHQodCxuKX12YXIgcj1uLmxlbmd0aCxlPXI/blswXTowLHU9dGhpcy5fX3dyYXBwZWRfXztyZXR1cm4hKDE8cnx8dGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgpJiZ1IGluc3RhbmNlb2YgVW4mJlNlKGUpPyh1PXUuc2xpY2UoZSwrZSsocj8xOjApKSx1Ll9fYWN0aW9uc19fLnB1c2goe2Z1bmM6UWUsYXJnczpbdF0sdGhpc0FyZzpUfSksbmV3IE9uKHUsdGhpcy5fX2NoYWluX18pLnRocnUoZnVuY3Rpb24obil7cmV0dXJuIHImJiFuLmxlbmd0aCYmbi5wdXNoKFQpLFxyXG4gIG59KSk6dGhpcy50aHJ1KHQpfSksJG89VHIoZnVuY3Rpb24obix0LHIpe29pLmNhbGwobixyKT8rK25bcl06c3QobixyLDEpfSksRm89R3IoTmUpLE5vPUdyKFBlKSxQbz1UcihmdW5jdGlvbihuLHQscil7b2kuY2FsbChuLHIpP25bcl0ucHVzaCh0KTpzdChuLHIsW3RdKX0pLFpvPWZyKGZ1bmN0aW9uKHQscixlKXt2YXIgdT0tMSxpPXR5cGVvZiByPT1cImZ1bmN0aW9uXCIsbz1zdSh0KT9LdSh0Lmxlbmd0aCk6W107cmV0dXJuIHVvKHQsZnVuY3Rpb24odCl7b1srK3VdPWk/bihyLHQsZSk6THQodCxyLGUpfSksb30pLHFvPVRyKGZ1bmN0aW9uKG4sdCxyKXtzdChuLHIsdCl9KSxWbz1UcihmdW5jdGlvbihuLHQscil7bltyPzA6MV0ucHVzaCh0KX0sZnVuY3Rpb24oKXtyZXR1cm5bW10sW11dfSksS289ZnIoZnVuY3Rpb24obix0KXtpZihudWxsPT1uKXJldHVybltdO3ZhciByPXQubGVuZ3RoO3JldHVybiAxPHImJk9lKG4sdFswXSx0WzFdKT90PVtdOjI8ciYmT2UodFswXSx0WzFdLHRbMl0pJiYodD1bdFswXV0pLFxyXG4gIFh0KG4sd3QodCwxKSxbXSl9KSxHbz1raXx8ZnVuY3Rpb24oKXtyZXR1cm4gJG4uRGF0ZS5ub3coKX0sSG89ZnIoZnVuY3Rpb24obix0LHIpe3ZhciBlPTE7aWYoci5sZW5ndGgpdmFyIHU9TChyLGRlKEhvKSksZT0zMnxlO3JldHVybiBmZShuLGUsdCxyLHUpfSksSm89ZnIoZnVuY3Rpb24obix0LHIpe3ZhciBlPTM7aWYoci5sZW5ndGgpdmFyIHU9TChyLGRlKEpvKSksZT0zMnxlO3JldHVybiBmZSh0LGUsbixyLHUpfSksWW89ZnIoZnVuY3Rpb24obix0KXtyZXR1cm4gZHQobiwxLHQpfSksUW89ZnIoZnVuY3Rpb24obix0LHIpe3JldHVybiBkdChuLFN1KHQpfHwwLHIpfSk7Y3UuQ2FjaGU9Rm47dmFyIFhvPWZyKGZ1bmN0aW9uKHQscil7cj0xPT1yLmxlbmd0aCYmZmYoclswXSk/YyhyWzBdLGsoeWUoKSkpOmMod3QociwxKSxrKHllKCkpKTt2YXIgZT1yLmxlbmd0aDtyZXR1cm4gZnIoZnVuY3Rpb24odSl7Zm9yKHZhciBpPS0xLG89Q2kodS5sZW5ndGgsZSk7KytpPG87KXVbaV09cltpXS5jYWxsKHRoaXMsdVtpXSk7XHJcbiAgcmV0dXJuIG4odCx0aGlzLHUpfSl9KSxuZj1mcihmdW5jdGlvbihuLHQpe3JldHVybiBmZShuLDMyLFQsdCxMKHQsZGUobmYpKSl9KSx0Zj1mcihmdW5jdGlvbihuLHQpe3JldHVybiBmZShuLDY0LFQsdCxMKHQsZGUodGYpKSl9KSxyZj1wZShmdW5jdGlvbihuLHQpe3JldHVybiBmZShuLDI1NixULFQsVCx0KX0pLGVmPWVlKEl0KSx1Zj1lZShmdW5jdGlvbihuLHQpe3JldHVybiBuPj10fSksb2Y9VXQoZnVuY3Rpb24oKXtyZXR1cm4gYXJndW1lbnRzfSgpKT9VdDpmdW5jdGlvbihuKXtyZXR1cm4geXUobikmJm9pLmNhbGwobixcImNhbGxlZVwiKSYmIWJpLmNhbGwobixcImNhbGxlZVwiKX0sZmY9S3UuaXNBcnJheSxjZj1Wbj9rKFZuKTpDdCxhZj16aXx8VnUsbGY9S24/ayhLbik6RHQsc2Y9R24/ayhHbik6VHQsaGY9SG4/ayhIbik6TnQscGY9Sm4/ayhKbik6UHQsX2Y9WW4/ayhZbik6WnQsdmY9ZWUoS3QpLGdmPWVlKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIG48PXR9KSxkZj0kcihmdW5jdGlvbihuLHQpe1xyXG4gIGlmKHplKHQpfHxzdSh0KSlDcih0LFd1KHQpLG4pO2Vsc2UgZm9yKHZhciByIGluIHQpb2kuY2FsbCh0LHIpJiZvdChuLHIsdFtyXSl9KSx5Zj0kcihmdW5jdGlvbihuLHQpe0NyKHQsQnUodCksbil9KSxiZj0kcihmdW5jdGlvbihuLHQscixlKXtDcih0LEJ1KHQpLG4sZSl9KSx4Zj0kcihmdW5jdGlvbihuLHQscixlKXtDcih0LFd1KHQpLG4sZSl9KSxqZj1wZShodCksd2Y9ZnIoZnVuY3Rpb24obix0KXtuPVF1KG4pO3ZhciByPS0xLGU9dC5sZW5ndGgsdT0yPGU/dFsyXTpUO2Zvcih1JiZPZSh0WzBdLHRbMV0sdSkmJihlPTEpOysrcjxlOylmb3IodmFyIHU9dFtyXSxpPUJ1KHUpLG89LTEsZj1pLmxlbmd0aDsrK288Zjspe3ZhciBjPWlbb10sYT1uW2NdOyhhPT09VHx8bHUoYSxlaVtjXSkmJiFvaS5jYWxsKG4sYykpJiYobltjXT11W2NdKX1yZXR1cm4gbn0pLG1mPWZyKGZ1bmN0aW9uKHQpe3JldHVybiB0LnB1c2goVCxhZSksbihPZixULHQpfSksQWY9WXIoZnVuY3Rpb24obix0LHIpe1xyXG4gIG51bGwhPXQmJnR5cGVvZiB0LnRvU3RyaW5nIT1cImZ1bmN0aW9uXCImJih0PWFpLmNhbGwodCkpLG5bdF09cn0sVHUoJHUpKSxFZj1ZcihmdW5jdGlvbihuLHQscil7bnVsbCE9dCYmdHlwZW9mIHQudG9TdHJpbmchPVwiZnVuY3Rpb25cIiYmKHQ9YWkuY2FsbCh0KSksb2kuY2FsbChuLHQpP25bdF0ucHVzaChyKTpuW3RdPVtyXX0seWUpLGtmPWZyKEx0KSxTZj0kcihmdW5jdGlvbihuLHQscil7WXQobix0LHIpfSksT2Y9JHIoZnVuY3Rpb24obix0LHIsZSl7WXQobix0LHIsZSl9KSxJZj1wZShmdW5jdGlvbihuLHQpe3ZhciByPXt9O2lmKG51bGw9PW4pcmV0dXJuIHI7dmFyIGU9ZmFsc2U7dD1jKHQsZnVuY3Rpb24odCl7cmV0dXJuIHQ9U3IodCxuKSxlfHwoZT0xPHQubGVuZ3RoKSx0fSksQ3Iobix2ZShuKSxyKSxlJiYocj1fdChyLDcsbGUpKTtmb3IodmFyIHU9dC5sZW5ndGg7dS0tOyl4cihyLHRbdV0pO3JldHVybiByfSksUmY9cGUoZnVuY3Rpb24obix0KXtyZXR1cm4gbnVsbD09bj97fTpucihuLHQpO1xyXG4gIH0pLHpmPW9lKFd1KSxXZj1vZShCdSksQmY9cXIoZnVuY3Rpb24obix0LHIpe3JldHVybiB0PXQudG9Mb3dlckNhc2UoKSxuKyhyP0N1KHQpOnQpfSksTGY9cXIoZnVuY3Rpb24obix0LHIpe3JldHVybiBuKyhyP1wiLVwiOlwiXCIpK3QudG9Mb3dlckNhc2UoKX0pLFVmPXFyKGZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gbisocj9cIiBcIjpcIlwiKSt0LnRvTG93ZXJDYXNlKCl9KSxDZj1acihcInRvTG93ZXJDYXNlXCIpLERmPXFyKGZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gbisocj9cIl9cIjpcIlwiKSt0LnRvTG93ZXJDYXNlKCl9KSxNZj1xcihmdW5jdGlvbihuLHQscil7cmV0dXJuIG4rKHI/XCIgXCI6XCJcIikrJGYodCl9KSxUZj1xcihmdW5jdGlvbihuLHQscil7cmV0dXJuIG4rKHI/XCIgXCI6XCJcIikrdC50b1VwcGVyQ2FzZSgpfSksJGY9WnIoXCJ0b1VwcGVyQ2FzZVwiKSxGZj1mcihmdW5jdGlvbih0LHIpe3RyeXtyZXR1cm4gbih0LFQscil9Y2F0Y2gobil7cmV0dXJuIHB1KG4pP246bmV3IEh1KG4pfX0pLE5mPXBlKGZ1bmN0aW9uKG4sdCl7XHJcbiAgcmV0dXJuIHIodCxmdW5jdGlvbih0KXt0PU1lKHQpLHN0KG4sdCxIbyhuW3RdLG4pKX0pLG59KSxQZj1IcigpLFpmPUhyKHRydWUpLHFmPWZyKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIGZ1bmN0aW9uKHIpe3JldHVybiBMdChyLG4sdCl9fSksVmY9ZnIoZnVuY3Rpb24obix0KXtyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIEx0KG4scix0KX19KSxLZj1YcihjKSxHZj1Ycih1KSxIZj1YcihoKSxKZj1yZSgpLFlmPXJlKHRydWUpLFFmPVFyKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4rdH0sMCksWGY9aWUoXCJjZWlsXCIpLG5jPVFyKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4vdH0sMSksdGM9aWUoXCJmbG9vclwiKSxyYz1RcihmdW5jdGlvbihuLHQpe3JldHVybiBuKnR9LDEpLGVjPWllKFwicm91bmRcIiksdWM9UXIoZnVuY3Rpb24obix0KXtyZXR1cm4gbi10fSwwKTtyZXR1cm4gQW4uYWZ0ZXI9ZnVuY3Rpb24obix0KXtpZih0eXBlb2YgdCE9XCJmdW5jdGlvblwiKXRocm93IG5ldyB0aShcIkV4cGVjdGVkIGEgZnVuY3Rpb25cIik7XHJcbiAgcmV0dXJuIG49RXUobiksZnVuY3Rpb24oKXtpZigxPi0tbilyZXR1cm4gdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSxBbi5hcnk9ZXUsQW4uYXNzaWduPWRmLEFuLmFzc2lnbkluPXlmLEFuLmFzc2lnbkluV2l0aD1iZixBbi5hc3NpZ25XaXRoPXhmLEFuLmF0PWpmLEFuLmJlZm9yZT11dSxBbi5iaW5kPUhvLEFuLmJpbmRBbGw9TmYsQW4uYmluZEtleT1KbyxBbi5jYXN0QXJyYXk9ZnVuY3Rpb24oKXtpZighYXJndW1lbnRzLmxlbmd0aClyZXR1cm5bXTt2YXIgbj1hcmd1bWVudHNbMF07cmV0dXJuIGZmKG4pP246W25dfSxBbi5jaGFpbj1ZZSxBbi5jaHVuaz1mdW5jdGlvbihuLHQscil7aWYodD0ocj9PZShuLHQscik6dD09PVQpPzE6VWkoRXUodCksMCkscj1udWxsPT1uPzA6bi5sZW5ndGgsIXJ8fDE+dClyZXR1cm5bXTtmb3IodmFyIGU9MCx1PTAsaT1LdShPaShyL3QpKTtlPHI7KWlbdSsrXT1ocihuLGUsZSs9dCk7cmV0dXJuIGl9LEFuLmNvbXBhY3Q9ZnVuY3Rpb24obil7Zm9yKHZhciB0PS0xLHI9bnVsbD09bj8wOm4ubGVuZ3RoLGU9MCx1PVtdOysrdDxyOyl7XHJcbiAgdmFyIGk9blt0XTtpJiYodVtlKytdPWkpfXJldHVybiB1fSxBbi5jb25jYXQ9ZnVuY3Rpb24oKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoO2lmKCFuKXJldHVybltdO2Zvcih2YXIgdD1LdShuLTEpLHI9YXJndW1lbnRzWzBdO24tLTspdFtuLTFdPWFyZ3VtZW50c1tuXTtyZXR1cm4gYShmZihyKT9VcihyKTpbcl0sd3QodCwxKSl9LEFuLmNvbmQ9ZnVuY3Rpb24odCl7dmFyIHI9bnVsbD09dD8wOnQubGVuZ3RoLGU9eWUoKTtyZXR1cm4gdD1yP2ModCxmdW5jdGlvbihuKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBuWzFdKXRocm93IG5ldyB0aShcIkV4cGVjdGVkIGEgZnVuY3Rpb25cIik7cmV0dXJuW2UoblswXSksblsxXV19KTpbXSxmcihmdW5jdGlvbihlKXtmb3IodmFyIHU9LTE7Kyt1PHI7KXt2YXIgaT10W3VdO2lmKG4oaVswXSx0aGlzLGUpKXJldHVybiBuKGlbMV0sdGhpcyxlKX19KX0sQW4uY29uZm9ybXM9ZnVuY3Rpb24obil7cmV0dXJuIHZ0KF90KG4sMSkpfSxBbi5jb25zdGFudD1UdSxcclxuICBBbi5jb3VudEJ5PSRvLEFuLmNyZWF0ZT1mdW5jdGlvbihuLHQpe3ZhciByPWVvKG4pO3JldHVybiBudWxsPT10P3I6YXQocix0KX0sQW4uY3Vycnk9aXUsQW4uY3VycnlSaWdodD1vdSxBbi5kZWJvdW5jZT1mdSxBbi5kZWZhdWx0cz13ZixBbi5kZWZhdWx0c0RlZXA9bWYsQW4uZGVmZXI9WW8sQW4uZGVsYXk9UW8sQW4uZGlmZmVyZW5jZT13byxBbi5kaWZmZXJlbmNlQnk9bW8sQW4uZGlmZmVyZW5jZVdpdGg9QW8sQW4uZHJvcD1mdW5jdGlvbihuLHQscil7dmFyIGU9bnVsbD09bj8wOm4ubGVuZ3RoO3JldHVybiBlPyh0PXJ8fHQ9PT1UPzE6RXUodCksaHIobiwwPnQ/MDp0LGUpKTpbXX0sQW4uZHJvcFJpZ2h0PWZ1bmN0aW9uKG4sdCxyKXt2YXIgZT1udWxsPT1uPzA6bi5sZW5ndGg7cmV0dXJuIGU/KHQ9cnx8dD09PVQ/MTpFdSh0KSx0PWUtdCxocihuLDAsMD50PzA6dCkpOltdfSxBbi5kcm9wUmlnaHRXaGlsZT1mdW5jdGlvbihuLHQpe3JldHVybiBuJiZuLmxlbmd0aD9qcihuLHllKHQsMyksdHJ1ZSx0cnVlKTpbXTtcclxuICB9LEFuLmRyb3BXaGlsZT1mdW5jdGlvbihuLHQpe3JldHVybiBuJiZuLmxlbmd0aD9qcihuLHllKHQsMyksdHJ1ZSk6W119LEFuLmZpbGw9ZnVuY3Rpb24obix0LHIsZSl7dmFyIHU9bnVsbD09bj8wOm4ubGVuZ3RoO2lmKCF1KXJldHVybltdO2ZvcihyJiZ0eXBlb2YgciE9XCJudW1iZXJcIiYmT2Uobix0LHIpJiYocj0wLGU9dSksdT1uLmxlbmd0aCxyPUV1KHIpLDA+ciYmKHI9LXI+dT8wOnUrciksZT1lPT09VHx8ZT51P3U6RXUoZSksMD5lJiYoZSs9dSksZT1yPmU/MDprdShlKTtyPGU7KW5bcisrXT10O3JldHVybiBufSxBbi5maWx0ZXI9ZnVuY3Rpb24obix0KXtyZXR1cm4oZmYobik/aTpqdCkobix5ZSh0LDMpKX0sQW4uZmxhdE1hcD1mdW5jdGlvbihuLHQpe3JldHVybiB3dChydShuLHQpLDEpfSxBbi5mbGF0TWFwRGVlcD1mdW5jdGlvbihuLHQpe3JldHVybiB3dChydShuLHQpLCQpfSxBbi5mbGF0TWFwRGVwdGg9ZnVuY3Rpb24obix0LHIpe3JldHVybiByPXI9PT1UPzE6RXUociksXHJcbiAgd3QocnUobix0KSxyKX0sQW4uZmxhdHRlbj1aZSxBbi5mbGF0dGVuRGVlcD1mdW5jdGlvbihuKXtyZXR1cm4obnVsbD09bj8wOm4ubGVuZ3RoKT93dChuLCQpOltdfSxBbi5mbGF0dGVuRGVwdGg9ZnVuY3Rpb24obix0KXtyZXR1cm4gbnVsbCE9biYmbi5sZW5ndGg/KHQ9dD09PVQ/MTpFdSh0KSx3dChuLHQpKTpbXX0sQW4uZmxpcD1mdW5jdGlvbihuKXtyZXR1cm4gZmUobiw1MTIpfSxBbi5mbG93PVBmLEFuLmZsb3dSaWdodD1aZixBbi5mcm9tUGFpcnM9ZnVuY3Rpb24obil7Zm9yKHZhciB0PS0xLHI9bnVsbD09bj8wOm4ubGVuZ3RoLGU9e307Kyt0PHI7KXt2YXIgdT1uW3RdO2VbdVswXV09dVsxXX1yZXR1cm4gZX0sQW4uZnVuY3Rpb25zPWZ1bmN0aW9uKG4pe3JldHVybiBudWxsPT1uP1tdOkV0KG4sV3UobikpfSxBbi5mdW5jdGlvbnNJbj1mdW5jdGlvbihuKXtyZXR1cm4gbnVsbD09bj9bXTpFdChuLEJ1KG4pKX0sQW4uZ3JvdXBCeT1QbyxBbi5pbml0aWFsPWZ1bmN0aW9uKG4pe1xyXG4gIHJldHVybihudWxsPT1uPzA6bi5sZW5ndGgpP2hyKG4sMCwtMSk6W119LEFuLmludGVyc2VjdGlvbj1FbyxBbi5pbnRlcnNlY3Rpb25CeT1rbyxBbi5pbnRlcnNlY3Rpb25XaXRoPVNvLEFuLmludmVydD1BZixBbi5pbnZlcnRCeT1FZixBbi5pbnZva2VNYXA9Wm8sQW4uaXRlcmF0ZWU9RnUsQW4ua2V5Qnk9cW8sQW4ua2V5cz1XdSxBbi5rZXlzSW49QnUsQW4ubWFwPXJ1LEFuLm1hcEtleXM9ZnVuY3Rpb24obix0KXt2YXIgcj17fTtyZXR1cm4gdD15ZSh0LDMpLG10KG4sZnVuY3Rpb24obixlLHUpe3N0KHIsdChuLGUsdSksbil9KSxyfSxBbi5tYXBWYWx1ZXM9ZnVuY3Rpb24obix0KXt2YXIgcj17fTtyZXR1cm4gdD15ZSh0LDMpLG10KG4sZnVuY3Rpb24obixlLHUpe3N0KHIsZSx0KG4sZSx1KSl9KSxyfSxBbi5tYXRjaGVzPWZ1bmN0aW9uKG4pe3JldHVybiBIdChfdChuLDEpKX0sQW4ubWF0Y2hlc1Byb3BlcnR5PWZ1bmN0aW9uKG4sdCl7cmV0dXJuIEp0KG4sX3QodCwxKSl9LEFuLm1lbW9pemU9Y3UsXHJcbiAgQW4ubWVyZ2U9U2YsQW4ubWVyZ2VXaXRoPU9mLEFuLm1ldGhvZD1xZixBbi5tZXRob2RPZj1WZixBbi5taXhpbj1OdSxBbi5uZWdhdGU9YXUsQW4ubnRoQXJnPWZ1bmN0aW9uKG4pe3JldHVybiBuPUV1KG4pLGZyKGZ1bmN0aW9uKHQpe3JldHVybiBRdCh0LG4pfSl9LEFuLm9taXQ9SWYsQW4ub21pdEJ5PWZ1bmN0aW9uKG4sdCl7cmV0dXJuIEx1KG4sYXUoeWUodCkpKX0sQW4ub25jZT1mdW5jdGlvbihuKXtyZXR1cm4gdXUoMixuKX0sQW4ub3JkZXJCeT1mdW5jdGlvbihuLHQscixlKXtyZXR1cm4gbnVsbD09bj9bXTooZmYodCl8fCh0PW51bGw9PXQ/W106W3RdKSxyPWU/VDpyLGZmKHIpfHwocj1udWxsPT1yP1tdOltyXSksWHQobix0LHIpKX0sQW4ub3Zlcj1LZixBbi5vdmVyQXJncz1YbyxBbi5vdmVyRXZlcnk9R2YsQW4ub3ZlclNvbWU9SGYsQW4ucGFydGlhbD1uZixBbi5wYXJ0aWFsUmlnaHQ9dGYsQW4ucGFydGl0aW9uPVZvLEFuLnBpY2s9UmYsQW4ucGlja0J5PUx1LEFuLnByb3BlcnR5PVp1LFxyXG4gIEFuLnByb3BlcnR5T2Y9ZnVuY3Rpb24obil7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBudWxsPT1uP1Q6a3Qobix0KX19LEFuLnB1bGw9T28sQW4ucHVsbEFsbD1LZSxBbi5wdWxsQWxsQnk9ZnVuY3Rpb24obix0LHIpe3JldHVybiBuJiZuLmxlbmd0aCYmdCYmdC5sZW5ndGg/ZXIobix0LHllKHIsMikpOm59LEFuLnB1bGxBbGxXaXRoPWZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gbiYmbi5sZW5ndGgmJnQmJnQubGVuZ3RoP2VyKG4sdCxULHIpOm59LEFuLnB1bGxBdD1JbyxBbi5yYW5nZT1KZixBbi5yYW5nZVJpZ2h0PVlmLEFuLnJlYXJnPXJmLEFuLnJlamVjdD1mdW5jdGlvbihuLHQpe3JldHVybihmZihuKT9pOmp0KShuLGF1KHllKHQsMykpKX0sQW4ucmVtb3ZlPWZ1bmN0aW9uKG4sdCl7dmFyIHI9W107aWYoIW58fCFuLmxlbmd0aClyZXR1cm4gcjt2YXIgZT0tMSx1PVtdLGk9bi5sZW5ndGg7Zm9yKHQ9eWUodCwzKTsrK2U8aTspe3ZhciBvPW5bZV07dChvLGUsbikmJihyLnB1c2gobyksXHJcbiAgdS5wdXNoKGUpKX1yZXR1cm4gdXIobix1KSxyfSxBbi5yZXN0PWZ1bmN0aW9uKG4sdCl7aWYodHlwZW9mIG4hPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgdGkoXCJFeHBlY3RlZCBhIGZ1bmN0aW9uXCIpO3JldHVybiB0PXQ9PT1UP3Q6RXUodCksZnIobix0KX0sQW4ucmV2ZXJzZT1HZSxBbi5zYW1wbGVTaXplPWZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gdD0ocj9PZShuLHQscik6dD09PVQpPzE6RXUodCksKGZmKG4pP2V0OmFyKShuLHQpfSxBbi5zZXQ9ZnVuY3Rpb24obix0LHIpe3JldHVybiBudWxsPT1uP246bHIobix0LHIpfSxBbi5zZXRXaXRoPWZ1bmN0aW9uKG4sdCxyLGUpe3JldHVybiBlPXR5cGVvZiBlPT1cImZ1bmN0aW9uXCI/ZTpULG51bGw9PW4/bjpscihuLHQscixlKX0sQW4uc2h1ZmZsZT1mdW5jdGlvbihuKXtyZXR1cm4oZmYobik/dXQ6c3IpKG4pfSxBbi5zbGljZT1mdW5jdGlvbihuLHQscil7dmFyIGU9bnVsbD09bj8wOm4ubGVuZ3RoO3JldHVybiBlPyhyJiZ0eXBlb2YgciE9XCJudW1iZXJcIiYmT2Uobix0LHIpPyh0PTAsXHJcbiAgcj1lKToodD1udWxsPT10PzA6RXUodCkscj1yPT09VD9lOkV1KHIpKSxocihuLHQscikpOltdfSxBbi5zb3J0Qnk9S28sQW4uc29ydGVkVW5pcT1mdW5jdGlvbihuKXtyZXR1cm4gbiYmbi5sZW5ndGg/Z3Iobik6W119LEFuLnNvcnRlZFVuaXFCeT1mdW5jdGlvbihuLHQpe3JldHVybiBuJiZuLmxlbmd0aD9ncihuLHllKHQsMikpOltdfSxBbi5zcGxpdD1mdW5jdGlvbihuLHQscil7cmV0dXJuIHImJnR5cGVvZiByIT1cIm51bWJlclwiJiZPZShuLHQscikmJih0PXI9VCkscj1yPT09VD80Mjk0OTY3Mjk1OnI+Pj4wLHI/KG49SXUobikpJiYodHlwZW9mIHQ9PVwic3RyaW5nXCJ8fG51bGwhPXQmJiFoZih0KSkmJih0PXlyKHQpLCF0JiZSbi50ZXN0KG4pKT9PcihNKG4pLDAscik6bi5zcGxpdCh0LHIpOltdfSxBbi5zcHJlYWQ9ZnVuY3Rpb24odCxyKXtpZih0eXBlb2YgdCE9XCJmdW5jdGlvblwiKXRocm93IG5ldyB0aShcIkV4cGVjdGVkIGEgZnVuY3Rpb25cIik7cmV0dXJuIHI9bnVsbD09cj8wOlVpKEV1KHIpLDApLFxyXG4gIGZyKGZ1bmN0aW9uKGUpe3ZhciB1PWVbcl07cmV0dXJuIGU9T3IoZSwwLHIpLHUmJmEoZSx1KSxuKHQsdGhpcyxlKX0pfSxBbi50YWlsPWZ1bmN0aW9uKG4pe3ZhciB0PW51bGw9PW4/MDpuLmxlbmd0aDtyZXR1cm4gdD9ocihuLDEsdCk6W119LEFuLnRha2U9ZnVuY3Rpb24obix0LHIpe3JldHVybiBuJiZuLmxlbmd0aD8odD1yfHx0PT09VD8xOkV1KHQpLGhyKG4sMCwwPnQ/MDp0KSk6W119LEFuLnRha2VSaWdodD1mdW5jdGlvbihuLHQscil7dmFyIGU9bnVsbD09bj8wOm4ubGVuZ3RoO3JldHVybiBlPyh0PXJ8fHQ9PT1UPzE6RXUodCksdD1lLXQsaHIobiwwPnQ/MDp0LGUpKTpbXX0sQW4udGFrZVJpZ2h0V2hpbGU9ZnVuY3Rpb24obix0KXtyZXR1cm4gbiYmbi5sZW5ndGg/anIobix5ZSh0LDMpLGZhbHNlLHRydWUpOltdfSxBbi50YWtlV2hpbGU9ZnVuY3Rpb24obix0KXtyZXR1cm4gbiYmbi5sZW5ndGg/anIobix5ZSh0LDMpKTpbXX0sQW4udGFwPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIHQobiksXHJcbiAgbn0sQW4udGhyb3R0bGU9ZnVuY3Rpb24obix0LHIpe3ZhciBlPXRydWUsdT10cnVlO2lmKHR5cGVvZiBuIT1cImZ1bmN0aW9uXCIpdGhyb3cgbmV3IHRpKFwiRXhwZWN0ZWQgYSBmdW5jdGlvblwiKTtyZXR1cm4gZHUocikmJihlPVwibGVhZGluZ1wiaW4gcj8hIXIubGVhZGluZzplLHU9XCJ0cmFpbGluZ1wiaW4gcj8hIXIudHJhaWxpbmc6dSksZnUobix0LHtsZWFkaW5nOmUsbWF4V2FpdDp0LHRyYWlsaW5nOnV9KX0sQW4udGhydT1RZSxBbi50b0FycmF5PW11LEFuLnRvUGFpcnM9emYsQW4udG9QYWlyc0luPVdmLEFuLnRvUGF0aD1mdW5jdGlvbihuKXtyZXR1cm4gZmYobik/YyhuLE1lKTp3dShuKT9bbl06VXIoam8oSXUobikpKX0sQW4udG9QbGFpbk9iamVjdD1PdSxBbi50cmFuc2Zvcm09ZnVuY3Rpb24obix0LGUpe3ZhciB1PWZmKG4pLGk9dXx8YWYobil8fF9mKG4pO2lmKHQ9eWUodCw0KSxudWxsPT1lKXt2YXIgbz1uJiZuLmNvbnN0cnVjdG9yO2U9aT91P25ldyBvOltdOmR1KG4pJiZfdShvKT9lbyhkaShuKSk6e307XHJcbiAgfXJldHVybihpP3I6bXQpKG4sZnVuY3Rpb24obixyLHUpe3JldHVybiB0KGUsbixyLHUpfSksZX0sQW4udW5hcnk9ZnVuY3Rpb24obil7cmV0dXJuIGV1KG4sMSl9LEFuLnVuaW9uPVJvLEFuLnVuaW9uQnk9em8sQW4udW5pb25XaXRoPVdvLEFuLnVuaXE9ZnVuY3Rpb24obil7cmV0dXJuIG4mJm4ubGVuZ3RoP2JyKG4pOltdfSxBbi51bmlxQnk9ZnVuY3Rpb24obix0KXtyZXR1cm4gbiYmbi5sZW5ndGg/YnIobix5ZSh0LDIpKTpbXX0sQW4udW5pcVdpdGg9ZnVuY3Rpb24obix0KXtyZXR1cm4gdD10eXBlb2YgdD09XCJmdW5jdGlvblwiP3Q6VCxuJiZuLmxlbmd0aD9icihuLFQsdCk6W119LEFuLnVuc2V0PWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG51bGw9PW58fHhyKG4sdCl9LEFuLnVuemlwPUhlLEFuLnVuemlwV2l0aD1KZSxBbi51cGRhdGU9ZnVuY3Rpb24obix0LHIpe3JldHVybiBudWxsPT1uP246bHIobix0LGtyKHIpKGt0KG4sdCkpLHZvaWQgMCl9LEFuLnVwZGF0ZVdpdGg9ZnVuY3Rpb24obix0LHIsZSl7XHJcbiAgcmV0dXJuIGU9dHlwZW9mIGU9PVwiZnVuY3Rpb25cIj9lOlQsbnVsbCE9biYmKG49bHIobix0LGtyKHIpKGt0KG4sdCkpLGUpKSxufSxBbi52YWx1ZXM9VXUsQW4udmFsdWVzSW49ZnVuY3Rpb24obil7cmV0dXJuIG51bGw9PW4/W106UyhuLEJ1KG4pKX0sQW4ud2l0aG91dD1CbyxBbi53b3Jkcz1NdSxBbi53cmFwPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG5mKGtyKHQpLG4pfSxBbi54b3I9TG8sQW4ueG9yQnk9VW8sQW4ueG9yV2l0aD1DbyxBbi56aXA9RG8sQW4uemlwT2JqZWN0PWZ1bmN0aW9uKG4sdCl7cmV0dXJuIEFyKG58fFtdLHR8fFtdLG90KX0sQW4uemlwT2JqZWN0RGVlcD1mdW5jdGlvbihuLHQpe3JldHVybiBBcihufHxbXSx0fHxbXSxscil9LEFuLnppcFdpdGg9TW8sQW4uZW50cmllcz16ZixBbi5lbnRyaWVzSW49V2YsQW4uZXh0ZW5kPXlmLEFuLmV4dGVuZFdpdGg9YmYsTnUoQW4sQW4pLEFuLmFkZD1RZixBbi5hdHRlbXB0PUZmLEFuLmNhbWVsQ2FzZT1CZixBbi5jYXBpdGFsaXplPUN1LFxyXG4gIEFuLmNlaWw9WGYsQW4uY2xhbXA9ZnVuY3Rpb24obix0LHIpe3JldHVybiByPT09VCYmKHI9dCx0PVQpLHIhPT1UJiYocj1TdShyKSxyPXI9PT1yP3I6MCksdCE9PVQmJih0PVN1KHQpLHQ9dD09PXQ/dDowKSxwdChTdShuKSx0LHIpfSxBbi5jbG9uZT1mdW5jdGlvbihuKXtyZXR1cm4gX3Qobiw0KX0sQW4uY2xvbmVEZWVwPWZ1bmN0aW9uKG4pe3JldHVybiBfdChuLDUpfSxBbi5jbG9uZURlZXBXaXRoPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIHQ9dHlwZW9mIHQ9PVwiZnVuY3Rpb25cIj90OlQsX3Qobiw1LHQpfSxBbi5jbG9uZVdpdGg9ZnVuY3Rpb24obix0KXtyZXR1cm4gdD10eXBlb2YgdD09XCJmdW5jdGlvblwiP3Q6VCxfdChuLDQsdCl9LEFuLmNvbmZvcm1zVG89ZnVuY3Rpb24obix0KXtyZXR1cm4gbnVsbD09dHx8Z3Qobix0LFd1KHQpKX0sQW4uZGVidXJyPUR1LEFuLmRlZmF1bHRUbz1mdW5jdGlvbihuLHQpe3JldHVybiBudWxsPT1ufHxuIT09bj90Om59LEFuLmRpdmlkZT1uYyxBbi5lbmRzV2l0aD1mdW5jdGlvbihuLHQscil7XHJcbiAgbj1JdShuKSx0PXlyKHQpO3ZhciBlPW4ubGVuZ3RoLGU9cj1yPT09VD9lOnB0KEV1KHIpLDAsZSk7cmV0dXJuIHItPXQubGVuZ3RoLDA8PXImJm4uc2xpY2UocixlKT09dH0sQW4uZXE9bHUsQW4uZXNjYXBlPWZ1bmN0aW9uKG4pe3JldHVybihuPUl1KG4pKSYmSC50ZXN0KG4pP24ucmVwbGFjZShLLG50KTpufSxBbi5lc2NhcGVSZWdFeHA9ZnVuY3Rpb24obil7cmV0dXJuKG49SXUobikpJiZlbi50ZXN0KG4pP24ucmVwbGFjZShybixcIlxcXFwkJlwiKTpufSxBbi5ldmVyeT1mdW5jdGlvbihuLHQscil7dmFyIGU9ZmYobik/dTpidDtyZXR1cm4gciYmT2Uobix0LHIpJiYodD1UKSxlKG4seWUodCwzKSl9LEFuLmZpbmQ9Rm8sQW4uZmluZEluZGV4PU5lLEFuLmZpbmRLZXk9ZnVuY3Rpb24obix0KXtyZXR1cm4gcChuLHllKHQsMyksbXQpfSxBbi5maW5kTGFzdD1ObyxBbi5maW5kTGFzdEluZGV4PVBlLEFuLmZpbmRMYXN0S2V5PWZ1bmN0aW9uKG4sdCl7cmV0dXJuIHAobix5ZSh0LDMpLEF0KTtcclxuICB9LEFuLmZsb29yPXRjLEFuLmZvckVhY2g9bnUsQW4uZm9yRWFjaFJpZ2h0PXR1LEFuLmZvckluPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG51bGw9PW4/bjpvbyhuLHllKHQsMyksQnUpfSxBbi5mb3JJblJpZ2h0PWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG51bGw9PW4/bjpmbyhuLHllKHQsMyksQnUpfSxBbi5mb3JPd249ZnVuY3Rpb24obix0KXtyZXR1cm4gbiYmbXQobix5ZSh0LDMpKX0sQW4uZm9yT3duUmlnaHQ9ZnVuY3Rpb24obix0KXtyZXR1cm4gbiYmQXQobix5ZSh0LDMpKX0sQW4uZ2V0PVJ1LEFuLmd0PWVmLEFuLmd0ZT11ZixBbi5oYXM9ZnVuY3Rpb24obix0KXtyZXR1cm4gbnVsbCE9biYmd2Uobix0LFJ0KX0sQW4uaGFzSW49enUsQW4uaGVhZD1xZSxBbi5pZGVudGl0eT0kdSxBbi5pbmNsdWRlcz1mdW5jdGlvbihuLHQscixlKXtyZXR1cm4gbj1zdShuKT9uOlV1KG4pLHI9ciYmIWU/RXUocik6MCxlPW4ubGVuZ3RoLDA+ciYmKHI9VWkoZStyLDApKSxqdShuKT9yPD1lJiYtMTxuLmluZGV4T2YodCxyKTohIWUmJi0xPHYobix0LHIpO1xyXG4gIH0sQW4uaW5kZXhPZj1mdW5jdGlvbihuLHQscil7dmFyIGU9bnVsbD09bj8wOm4ubGVuZ3RoO3JldHVybiBlPyhyPW51bGw9PXI/MDpFdShyKSwwPnImJihyPVVpKGUrciwwKSksdihuLHQscikpOi0xfSxBbi5pblJhbmdlPWZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gdD1BdSh0KSxyPT09VD8ocj10LHQ9MCk6cj1BdShyKSxuPVN1KG4pLG4+PUNpKHQscikmJm48VWkodCxyKX0sQW4uaW52b2tlPWtmLEFuLmlzQXJndW1lbnRzPW9mLEFuLmlzQXJyYXk9ZmYsQW4uaXNBcnJheUJ1ZmZlcj1jZixBbi5pc0FycmF5TGlrZT1zdSxBbi5pc0FycmF5TGlrZU9iamVjdD1odSxBbi5pc0Jvb2xlYW49ZnVuY3Rpb24obil7cmV0dXJuIHRydWU9PT1ufHxmYWxzZT09PW58fHl1KG4pJiZcIltvYmplY3QgQm9vbGVhbl1cIj09T3Qobil9LEFuLmlzQnVmZmVyPWFmLEFuLmlzRGF0ZT1sZixBbi5pc0VsZW1lbnQ9ZnVuY3Rpb24obil7cmV0dXJuIHl1KG4pJiYxPT09bi5ub2RlVHlwZSYmIXh1KG4pfSxBbi5pc0VtcHR5PWZ1bmN0aW9uKG4pe1xyXG4gIGlmKG51bGw9PW4pcmV0dXJuIHRydWU7aWYoc3UobikmJihmZihuKXx8dHlwZW9mIG49PVwic3RyaW5nXCJ8fHR5cGVvZiBuLnNwbGljZT09XCJmdW5jdGlvblwifHxhZihuKXx8X2Yobil8fG9mKG4pKSlyZXR1cm4hbi5sZW5ndGg7dmFyIHQ9dm8obik7aWYoXCJbb2JqZWN0IE1hcF1cIj09dHx8XCJbb2JqZWN0IFNldF1cIj09dClyZXR1cm4hbi5zaXplO2lmKHplKG4pKXJldHVybiFWdChuKS5sZW5ndGg7Zm9yKHZhciByIGluIG4paWYob2kuY2FsbChuLHIpKXJldHVybiBmYWxzZTtyZXR1cm4gdHJ1ZX0sQW4uaXNFcXVhbD1mdW5jdGlvbihuLHQpe3JldHVybiBNdChuLHQpfSxBbi5pc0VxdWFsV2l0aD1mdW5jdGlvbihuLHQscil7dmFyIGU9KHI9dHlwZW9mIHI9PVwiZnVuY3Rpb25cIj9yOlQpP3Iobix0KTpUO3JldHVybiBlPT09VD9NdChuLHQsVCxyKTohIWV9LEFuLmlzRXJyb3I9cHUsQW4uaXNGaW5pdGU9ZnVuY3Rpb24obil7cmV0dXJuIHR5cGVvZiBuPT1cIm51bWJlclwiJiZXaShuKX0sQW4uaXNGdW5jdGlvbj1fdSxcclxuICBBbi5pc0ludGVnZXI9dnUsQW4uaXNMZW5ndGg9Z3UsQW4uaXNNYXA9c2YsQW4uaXNNYXRjaD1mdW5jdGlvbihuLHQpe3JldHVybiBuPT09dHx8JHQobix0LHhlKHQpKX0sQW4uaXNNYXRjaFdpdGg9ZnVuY3Rpb24obix0LHIpe3JldHVybiByPXR5cGVvZiByPT1cImZ1bmN0aW9uXCI/cjpULCR0KG4sdCx4ZSh0KSxyKX0sQW4uaXNOYU49ZnVuY3Rpb24obil7cmV0dXJuIGJ1KG4pJiZuIT0rbn0sQW4uaXNOYXRpdmU9ZnVuY3Rpb24obil7aWYoZ28obikpdGhyb3cgbmV3IEh1KFwiVW5zdXBwb3J0ZWQgY29yZS1qcyB1c2UuIFRyeSBodHRwczovL25wbXMuaW8vc2VhcmNoP3E9cG9ueWZpbGwuXCIpO3JldHVybiBGdChuKX0sQW4uaXNOaWw9ZnVuY3Rpb24obil7cmV0dXJuIG51bGw9PW59LEFuLmlzTnVsbD1mdW5jdGlvbihuKXtyZXR1cm4gbnVsbD09PW59LEFuLmlzTnVtYmVyPWJ1LEFuLmlzT2JqZWN0PWR1LEFuLmlzT2JqZWN0TGlrZT15dSxBbi5pc1BsYWluT2JqZWN0PXh1LEFuLmlzUmVnRXhwPWhmLFxyXG4gIEFuLmlzU2FmZUludGVnZXI9ZnVuY3Rpb24obil7cmV0dXJuIHZ1KG4pJiYtOTAwNzE5OTI1NDc0MDk5MTw9biYmOTAwNzE5OTI1NDc0MDk5MT49bn0sQW4uaXNTZXQ9cGYsQW4uaXNTdHJpbmc9anUsQW4uaXNTeW1ib2w9d3UsQW4uaXNUeXBlZEFycmF5PV9mLEFuLmlzVW5kZWZpbmVkPWZ1bmN0aW9uKG4pe3JldHVybiBuPT09VH0sQW4uaXNXZWFrTWFwPWZ1bmN0aW9uKG4pe3JldHVybiB5dShuKSYmXCJbb2JqZWN0IFdlYWtNYXBdXCI9PXZvKG4pfSxBbi5pc1dlYWtTZXQ9ZnVuY3Rpb24obil7cmV0dXJuIHl1KG4pJiZcIltvYmplY3QgV2Vha1NldF1cIj09T3Qobil9LEFuLmpvaW49ZnVuY3Rpb24obix0KXtyZXR1cm4gbnVsbD09bj9cIlwiOkJpLmNhbGwobix0KX0sQW4ua2ViYWJDYXNlPUxmLEFuLmxhc3Q9VmUsQW4ubGFzdEluZGV4T2Y9ZnVuY3Rpb24obix0LHIpe3ZhciBlPW51bGw9PW4/MDpuLmxlbmd0aDtpZighZSlyZXR1cm4tMTt2YXIgdT1lO2lmKHIhPT1UJiYodT1FdShyKSx1PTA+dT9VaShlK3UsMCk6Q2kodSxlLTEpKSxcclxuICB0PT09dCl7Zm9yKHI9dSsxO3ItLSYmbltyXSE9PXQ7KTtuPXJ9ZWxzZSBuPV8obixkLHUsdHJ1ZSk7cmV0dXJuIG59LEFuLmxvd2VyQ2FzZT1VZixBbi5sb3dlckZpcnN0PUNmLEFuLmx0PXZmLEFuLmx0ZT1nZixBbi5tYXg9ZnVuY3Rpb24obil7cmV0dXJuIG4mJm4ubGVuZ3RoP3h0KG4sJHUsSXQpOlR9LEFuLm1heEJ5PWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4mJm4ubGVuZ3RoP3h0KG4seWUodCwyKSxJdCk6VH0sQW4ubWVhbj1mdW5jdGlvbihuKXtyZXR1cm4geShuLCR1KX0sQW4ubWVhbkJ5PWZ1bmN0aW9uKG4sdCl7cmV0dXJuIHkobix5ZSh0LDIpKX0sQW4ubWluPWZ1bmN0aW9uKG4pe3JldHVybiBuJiZuLmxlbmd0aD94dChuLCR1LEt0KTpUfSxBbi5taW5CeT1mdW5jdGlvbihuLHQpe3JldHVybiBuJiZuLmxlbmd0aD94dChuLHllKHQsMiksS3QpOlR9LEFuLnN0dWJBcnJheT1xdSxBbi5zdHViRmFsc2U9VnUsQW4uc3R1Yk9iamVjdD1mdW5jdGlvbigpe3JldHVybnt9fSxBbi5zdHViU3RyaW5nPWZ1bmN0aW9uKCl7XHJcbiAgcmV0dXJuXCJcIn0sQW4uc3R1YlRydWU9ZnVuY3Rpb24oKXtyZXR1cm4gdHJ1ZX0sQW4ubXVsdGlwbHk9cmMsQW4ubnRoPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4mJm4ubGVuZ3RoP1F0KG4sRXUodCkpOlR9LEFuLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gJG4uXz09PXRoaXMmJigkbi5fPXNpKSx0aGlzfSxBbi5ub29wPVB1LEFuLm5vdz1HbyxBbi5wYWQ9ZnVuY3Rpb24obix0LHIpe249SXUobik7dmFyIGU9KHQ9RXUodCkpP0Qobik6MDtyZXR1cm4hdHx8ZT49dD9uOih0PSh0LWUpLzIsbmUoSWkodCkscikrbituZShPaSh0KSxyKSl9LEFuLnBhZEVuZD1mdW5jdGlvbihuLHQscil7bj1JdShuKTt2YXIgZT0odD1FdSh0KSk/RChuKTowO3JldHVybiB0JiZlPHQ/bituZSh0LWUscik6bn0sQW4ucGFkU3RhcnQ9ZnVuY3Rpb24obix0LHIpe249SXUobik7dmFyIGU9KHQ9RXUodCkpP0Qobik6MDtyZXR1cm4gdCYmZTx0P25lKHQtZSxyKStuOm59LEFuLnBhcnNlSW50PWZ1bmN0aW9uKG4sdCxyKXtcclxuICByZXR1cm4gcnx8bnVsbD09dD90PTA6dCYmKHQ9K3QpLE1pKEl1KG4pLnJlcGxhY2Uob24sXCJcIiksdHx8MCl9LEFuLnJhbmRvbT1mdW5jdGlvbihuLHQscil7aWYociYmdHlwZW9mIHIhPVwiYm9vbGVhblwiJiZPZShuLHQscikmJih0PXI9VCkscj09PVQmJih0eXBlb2YgdD09XCJib29sZWFuXCI/KHI9dCx0PVQpOnR5cGVvZiBuPT1cImJvb2xlYW5cIiYmKHI9bixuPVQpKSxuPT09VCYmdD09PVQ/KG49MCx0PTEpOihuPUF1KG4pLHQ9PT1UPyh0PW4sbj0wKTp0PUF1KHQpKSxuPnQpe3ZhciBlPW47bj10LHQ9ZX1yZXR1cm4gcnx8biUxfHx0JTE/KHI9VGkoKSxDaShuK3IqKHQtbitDbihcIjFlLVwiKygocitcIlwiKS5sZW5ndGgtMSkpKSx0KSk6aXIobix0KX0sQW4ucmVkdWNlPWZ1bmN0aW9uKG4sdCxyKXt2YXIgZT1mZihuKT9sOmosdT0zPmFyZ3VtZW50cy5sZW5ndGg7cmV0dXJuIGUobix5ZSh0LDQpLHIsdSx1byl9LEFuLnJlZHVjZVJpZ2h0PWZ1bmN0aW9uKG4sdCxyKXt2YXIgZT1mZihuKT9zOmosdT0zPmFyZ3VtZW50cy5sZW5ndGg7XHJcbiAgcmV0dXJuIGUobix5ZSh0LDQpLHIsdSxpbyl9LEFuLnJlcGVhdD1mdW5jdGlvbihuLHQscil7cmV0dXJuIHQ9KHI/T2Uobix0LHIpOnQ9PT1UKT8xOkV1KHQpLG9yKEl1KG4pLHQpfSxBbi5yZXBsYWNlPWZ1bmN0aW9uKCl7dmFyIG49YXJndW1lbnRzLHQ9SXUoblswXSk7cmV0dXJuIDM+bi5sZW5ndGg/dDp0LnJlcGxhY2UoblsxXSxuWzJdKX0sQW4ucmVzdWx0PWZ1bmN0aW9uKG4sdCxyKXt0PVNyKHQsbik7dmFyIGU9LTEsdT10Lmxlbmd0aDtmb3IodXx8KHU9MSxuPVQpOysrZTx1Oyl7dmFyIGk9bnVsbD09bj9UOm5bTWUodFtlXSldO2k9PT1UJiYoZT11LGk9ciksbj1fdShpKT9pLmNhbGwobik6aX1yZXR1cm4gbn0sQW4ucm91bmQ9ZWMsQW4ucnVuSW5Db250ZXh0PXgsQW4uc2FtcGxlPWZ1bmN0aW9uKG4pe3JldHVybihmZihuKT9Rbjpjcikobil9LEFuLnNpemU9ZnVuY3Rpb24obil7aWYobnVsbD09bilyZXR1cm4gMDtpZihzdShuKSlyZXR1cm4ganUobik/RChuKTpuLmxlbmd0aDtcclxuICB2YXIgdD12byhuKTtyZXR1cm5cIltvYmplY3QgTWFwXVwiPT10fHxcIltvYmplY3QgU2V0XVwiPT10P24uc2l6ZTpWdChuKS5sZW5ndGh9LEFuLnNuYWtlQ2FzZT1EZixBbi5zb21lPWZ1bmN0aW9uKG4sdCxyKXt2YXIgZT1mZihuKT9oOnByO3JldHVybiByJiZPZShuLHQscikmJih0PVQpLGUobix5ZSh0LDMpKX0sQW4uc29ydGVkSW5kZXg9ZnVuY3Rpb24obix0KXtyZXR1cm4gX3Iobix0KX0sQW4uc29ydGVkSW5kZXhCeT1mdW5jdGlvbihuLHQscil7cmV0dXJuIHZyKG4sdCx5ZShyLDIpKX0sQW4uc29ydGVkSW5kZXhPZj1mdW5jdGlvbihuLHQpe3ZhciByPW51bGw9PW4/MDpuLmxlbmd0aDtpZihyKXt2YXIgZT1fcihuLHQpO2lmKGU8ciYmbHUobltlXSx0KSlyZXR1cm4gZX1yZXR1cm4tMX0sQW4uc29ydGVkTGFzdEluZGV4PWZ1bmN0aW9uKG4sdCl7cmV0dXJuIF9yKG4sdCx0cnVlKX0sQW4uc29ydGVkTGFzdEluZGV4Qnk9ZnVuY3Rpb24obix0LHIpe3JldHVybiB2cihuLHQseWUociwyKSx0cnVlKTtcclxuICB9LEFuLnNvcnRlZExhc3RJbmRleE9mPWZ1bmN0aW9uKG4sdCl7aWYobnVsbD09bj8wOm4ubGVuZ3RoKXt2YXIgcj1fcihuLHQsdHJ1ZSktMTtpZihsdShuW3JdLHQpKXJldHVybiByfXJldHVybi0xfSxBbi5zdGFydENhc2U9TWYsQW4uc3RhcnRzV2l0aD1mdW5jdGlvbihuLHQscil7cmV0dXJuIG49SXUobikscj1udWxsPT1yPzA6cHQoRXUociksMCxuLmxlbmd0aCksdD15cih0KSxuLnNsaWNlKHIscit0Lmxlbmd0aCk9PXR9LEFuLnN1YnRyYWN0PXVjLEFuLnN1bT1mdW5jdGlvbihuKXtyZXR1cm4gbiYmbi5sZW5ndGg/bShuLCR1KTowfSxBbi5zdW1CeT1mdW5jdGlvbihuLHQpe3JldHVybiBuJiZuLmxlbmd0aD9tKG4seWUodCwyKSk6MH0sQW4udGVtcGxhdGU9ZnVuY3Rpb24obix0LHIpe3ZhciBlPUFuLnRlbXBsYXRlU2V0dGluZ3M7ciYmT2Uobix0LHIpJiYodD1UKSxuPUl1KG4pLHQ9YmYoe30sdCxlLGNlKSxyPWJmKHt9LHQuaW1wb3J0cyxlLmltcG9ydHMsY2UpO3ZhciB1LGksbz1XdShyKSxmPVMocixvKSxjPTA7XHJcbiAgcj10LmludGVycG9sYXRlfHxqbjt2YXIgYT1cIl9fcCs9J1wiO3I9WHUoKHQuZXNjYXBlfHxqbikuc291cmNlK1wifFwiK3Iuc291cmNlK1wifFwiKyhyPT09UT9wbjpqbikuc291cmNlK1wifFwiKyh0LmV2YWx1YXRlfHxqbikuc291cmNlK1wifCRcIixcImdcIik7dmFyIGw9b2kuY2FsbCh0LFwic291cmNlVVJMXCIpP1wiLy8jIHNvdXJjZVVSTD1cIisodC5zb3VyY2VVUkwrXCJcIikucmVwbGFjZSgvW1xcclxcbl0vZyxcIiBcIikrXCJcXG5cIjpcIlwiO2lmKG4ucmVwbGFjZShyLGZ1bmN0aW9uKHQscixlLG8sZixsKXtyZXR1cm4gZXx8KGU9byksYSs9bi5zbGljZShjLGwpLnJlcGxhY2Uod24seiksciYmKHU9dHJ1ZSxhKz1cIicrX19lKFwiK3IrXCIpKydcIiksZiYmKGk9dHJ1ZSxhKz1cIic7XCIrZitcIjtcXG5fX3ArPSdcIiksZSYmKGErPVwiJysoKF9fdD0oXCIrZStcIikpPT1udWxsPycnOl9fdCkrJ1wiKSxjPWwrdC5sZW5ndGgsdH0pLGErPVwiJztcIiwodD1vaS5jYWxsKHQsXCJ2YXJpYWJsZVwiKSYmdC52YXJpYWJsZSl8fChhPVwid2l0aChvYmope1wiK2ErXCJ9XCIpLFxyXG4gIGE9KGk/YS5yZXBsYWNlKFAsXCJcIik6YSkucmVwbGFjZShaLFwiJDFcIikucmVwbGFjZShxLFwiJDE7XCIpLGE9XCJmdW5jdGlvbihcIisodHx8XCJvYmpcIikrXCIpe1wiKyh0P1wiXCI6XCJvYmp8fChvYmo9e30pO1wiKStcInZhciBfX3QsX19wPScnXCIrKHU/XCIsX19lPV8uZXNjYXBlXCI6XCJcIikrKGk/XCIsX19qPUFycmF5LnByb3RvdHlwZS5qb2luO2Z1bmN0aW9uIHByaW50KCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpfVwiOlwiO1wiKSthK1wicmV0dXJuIF9fcH1cIix0PUZmKGZ1bmN0aW9uKCl7cmV0dXJuIEp1KG8sbCtcInJldHVybiBcIithKS5hcHBseShULGYpfSksdC5zb3VyY2U9YSxwdSh0KSl0aHJvdyB0O3JldHVybiB0fSxBbi50aW1lcz1mdW5jdGlvbihuLHQpe2lmKG49RXUobiksMT5ufHw5MDA3MTk5MjU0NzQwOTkxPG4pcmV0dXJuW107dmFyIHI9NDI5NDk2NzI5NSxlPUNpKG4sNDI5NDk2NzI5NSk7Zm9yKHQ9eWUodCksbi09NDI5NDk2NzI5NSxlPUEoZSx0KTsrK3I8bjspdChyKTtyZXR1cm4gZX0sQW4udG9GaW5pdGU9QXUsXHJcbiAgQW4udG9JbnRlZ2VyPUV1LEFuLnRvTGVuZ3RoPWt1LEFuLnRvTG93ZXI9ZnVuY3Rpb24obil7cmV0dXJuIEl1KG4pLnRvTG93ZXJDYXNlKCl9LEFuLnRvTnVtYmVyPVN1LEFuLnRvU2FmZUludGVnZXI9ZnVuY3Rpb24obil7cmV0dXJuIG4/cHQoRXUobiksLTkwMDcxOTkyNTQ3NDA5OTEsOTAwNzE5OTI1NDc0MDk5MSk6MD09PW4/bjowfSxBbi50b1N0cmluZz1JdSxBbi50b1VwcGVyPWZ1bmN0aW9uKG4pe3JldHVybiBJdShuKS50b1VwcGVyQ2FzZSgpfSxBbi50cmltPWZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4obj1JdShuKSkmJihyfHx0PT09VCk/bi5yZXBsYWNlKHVuLFwiXCIpOm4mJih0PXlyKHQpKT8obj1NKG4pLHI9TSh0KSx0PUkobixyKSxyPVIobixyKSsxLE9yKG4sdCxyKS5qb2luKFwiXCIpKTpufSxBbi50cmltRW5kPWZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4obj1JdShuKSkmJihyfHx0PT09VCk/bi5yZXBsYWNlKGZuLFwiXCIpOm4mJih0PXlyKHQpKT8obj1NKG4pLHQ9UihuLE0odCkpKzEsXHJcbiAgT3IobiwwLHQpLmpvaW4oXCJcIikpOm59LEFuLnRyaW1TdGFydD1mdW5jdGlvbihuLHQscil7cmV0dXJuKG49SXUobikpJiYocnx8dD09PVQpP24ucmVwbGFjZShvbixcIlwiKTpuJiYodD15cih0KSk/KG49TShuKSx0PUkobixNKHQpKSxPcihuLHQpLmpvaW4oXCJcIikpOm59LEFuLnRydW5jYXRlPWZ1bmN0aW9uKG4sdCl7dmFyIHI9MzAsZT1cIi4uLlwiO2lmKGR1KHQpKXZhciB1PVwic2VwYXJhdG9yXCJpbiB0P3Quc2VwYXJhdG9yOnUscj1cImxlbmd0aFwiaW4gdD9FdSh0Lmxlbmd0aCk6cixlPVwib21pc3Npb25cImluIHQ/eXIodC5vbWlzc2lvbik6ZTtuPUl1KG4pO3ZhciBpPW4ubGVuZ3RoO2lmKFJuLnRlc3QobikpdmFyIG89TShuKSxpPW8ubGVuZ3RoO2lmKHI+PWkpcmV0dXJuIG47aWYoaT1yLUQoZSksMT5pKXJldHVybiBlO2lmKHI9bz9PcihvLDAsaSkuam9pbihcIlwiKTpuLnNsaWNlKDAsaSksdT09PVQpcmV0dXJuIHIrZTtpZihvJiYoaSs9ci5sZW5ndGgtaSksaGYodSkpe2lmKG4uc2xpY2UoaSkuc2VhcmNoKHUpKXtcclxuICB2YXIgZj1yO2Zvcih1Lmdsb2JhbHx8KHU9WHUodS5zb3VyY2UsSXUoX24uZXhlYyh1KSkrXCJnXCIpKSx1Lmxhc3RJbmRleD0wO289dS5leGVjKGYpOyl2YXIgYz1vLmluZGV4O3I9ci5zbGljZSgwLGM9PT1UP2k6Yyl9fWVsc2Ugbi5pbmRleE9mKHlyKHUpLGkpIT1pJiYodT1yLmxhc3RJbmRleE9mKHUpLC0xPHUmJihyPXIuc2xpY2UoMCx1KSkpO3JldHVybiByK2V9LEFuLnVuZXNjYXBlPWZ1bmN0aW9uKG4pe3JldHVybihuPUl1KG4pKSYmRy50ZXN0KG4pP24ucmVwbGFjZShWLHR0KTpufSxBbi51bmlxdWVJZD1mdW5jdGlvbihuKXt2YXIgdD0rK2ZpO3JldHVybiBJdShuKSt0fSxBbi51cHBlckNhc2U9VGYsQW4udXBwZXJGaXJzdD0kZixBbi5lYWNoPW51LEFuLmVhY2hSaWdodD10dSxBbi5maXJzdD1xZSxOdShBbixmdW5jdGlvbigpe3ZhciBuPXt9O3JldHVybiBtdChBbixmdW5jdGlvbih0LHIpe29pLmNhbGwoQW4ucHJvdG90eXBlLHIpfHwobltyXT10KX0pLG59KCkse2NoYWluOmZhbHNlXHJcbiAgfSksQW4uVkVSU0lPTj1cIjQuMTcuMTVcIixyKFwiYmluZCBiaW5kS2V5IGN1cnJ5IGN1cnJ5UmlnaHQgcGFydGlhbCBwYXJ0aWFsUmlnaHRcIi5zcGxpdChcIiBcIiksZnVuY3Rpb24obil7QW5bbl0ucGxhY2Vob2xkZXI9QW59KSxyKFtcImRyb3BcIixcInRha2VcIl0sZnVuY3Rpb24obix0KXtVbi5wcm90b3R5cGVbbl09ZnVuY3Rpb24ocil7cj1yPT09VD8xOlVpKEV1KHIpLDApO3ZhciBlPXRoaXMuX19maWx0ZXJlZF9fJiYhdD9uZXcgVW4odGhpcyk6dGhpcy5jbG9uZSgpO3JldHVybiBlLl9fZmlsdGVyZWRfXz9lLl9fdGFrZUNvdW50X189Q2kocixlLl9fdGFrZUNvdW50X18pOmUuX192aWV3c19fLnB1c2goe3NpemU6Q2kociw0Mjk0OTY3Mjk1KSx0eXBlOm4rKDA+ZS5fX2Rpcl9fP1wiUmlnaHRcIjpcIlwiKX0pLGV9LFVuLnByb3RvdHlwZVtuK1wiUmlnaHRcIl09ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMucmV2ZXJzZSgpW25dKHQpLnJldmVyc2UoKX19KSxyKFtcImZpbHRlclwiLFwibWFwXCIsXCJ0YWtlV2hpbGVcIl0sZnVuY3Rpb24obix0KXtcclxuICB2YXIgcj10KzEsZT0xPT1yfHwzPT1yO1VuLnByb3RvdHlwZVtuXT1mdW5jdGlvbihuKXt2YXIgdD10aGlzLmNsb25lKCk7cmV0dXJuIHQuX19pdGVyYXRlZXNfXy5wdXNoKHtpdGVyYXRlZTp5ZShuLDMpLHR5cGU6cn0pLHQuX19maWx0ZXJlZF9fPXQuX19maWx0ZXJlZF9ffHxlLHR9fSkscihbXCJoZWFkXCIsXCJsYXN0XCJdLGZ1bmN0aW9uKG4sdCl7dmFyIHI9XCJ0YWtlXCIrKHQ/XCJSaWdodFwiOlwiXCIpO1VuLnByb3RvdHlwZVtuXT1mdW5jdGlvbigpe3JldHVybiB0aGlzW3JdKDEpLnZhbHVlKClbMF19fSkscihbXCJpbml0aWFsXCIsXCJ0YWlsXCJdLGZ1bmN0aW9uKG4sdCl7dmFyIHI9XCJkcm9wXCIrKHQ/XCJcIjpcIlJpZ2h0XCIpO1VuLnByb3RvdHlwZVtuXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9fZmlsdGVyZWRfXz9uZXcgVW4odGhpcyk6dGhpc1tyXSgxKX19KSxVbi5wcm90b3R5cGUuY29tcGFjdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmZpbHRlcigkdSl9LFVuLnByb3RvdHlwZS5maW5kPWZ1bmN0aW9uKG4pe1xyXG4gIHJldHVybiB0aGlzLmZpbHRlcihuKS5oZWFkKCl9LFVuLnByb3RvdHlwZS5maW5kTGFzdD1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5yZXZlcnNlKCkuZmluZChuKX0sVW4ucHJvdG90eXBlLmludm9rZU1hcD1mcihmdW5jdGlvbihuLHQpe3JldHVybiB0eXBlb2Ygbj09XCJmdW5jdGlvblwiP25ldyBVbih0aGlzKTp0aGlzLm1hcChmdW5jdGlvbihyKXtyZXR1cm4gTHQocixuLHQpfSl9KSxVbi5wcm90b3R5cGUucmVqZWN0PWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLmZpbHRlcihhdSh5ZShuKSkpfSxVbi5wcm90b3R5cGUuc2xpY2U9ZnVuY3Rpb24obix0KXtuPUV1KG4pO3ZhciByPXRoaXM7cmV0dXJuIHIuX19maWx0ZXJlZF9fJiYoMDxufHwwPnQpP25ldyBVbihyKTooMD5uP3I9ci50YWtlUmlnaHQoLW4pOm4mJihyPXIuZHJvcChuKSksdCE9PVQmJih0PUV1KHQpLHI9MD50P3IuZHJvcFJpZ2h0KC10KTpyLnRha2UodC1uKSkscil9LFVuLnByb3RvdHlwZS50YWtlUmlnaHRXaGlsZT1mdW5jdGlvbihuKXtcclxuICByZXR1cm4gdGhpcy5yZXZlcnNlKCkudGFrZVdoaWxlKG4pLnJldmVyc2UoKX0sVW4ucHJvdG90eXBlLnRvQXJyYXk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50YWtlKDQyOTQ5NjcyOTUpfSxtdChVbi5wcm90b3R5cGUsZnVuY3Rpb24obix0KXt2YXIgcj0vXig/OmZpbHRlcnxmaW5kfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdCh0KSxlPS9eKD86aGVhZHxsYXN0KSQvLnRlc3QodCksdT1BbltlP1widGFrZVwiKyhcImxhc3RcIj09dD9cIlJpZ2h0XCI6XCJcIik6dF0saT1lfHwvXmZpbmQvLnRlc3QodCk7dSYmKEFuLnByb3RvdHlwZVt0XT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQobil7cmV0dXJuIG49dS5hcHBseShBbixhKFtuXSxmKSksZSYmaD9uWzBdOm59dmFyIG89dGhpcy5fX3dyYXBwZWRfXyxmPWU/WzFdOmFyZ3VtZW50cyxjPW8gaW5zdGFuY2VvZiBVbixsPWZbMF0scz1jfHxmZihvKTtzJiZyJiZ0eXBlb2YgbD09XCJmdW5jdGlvblwiJiYxIT1sLmxlbmd0aCYmKGM9cz1mYWxzZSk7dmFyIGg9dGhpcy5fX2NoYWluX18scD0hIXRoaXMuX19hY3Rpb25zX18ubGVuZ3RoLGw9aSYmIWgsYz1jJiYhcDtcclxuICByZXR1cm4haSYmcz8obz1jP286bmV3IFVuKHRoaXMpLG89bi5hcHBseShvLGYpLG8uX19hY3Rpb25zX18ucHVzaCh7ZnVuYzpRZSxhcmdzOlt0XSx0aGlzQXJnOlR9KSxuZXcgT24obyxoKSk6bCYmYz9uLmFwcGx5KHRoaXMsZik6KG89dGhpcy50aHJ1KHQpLGw/ZT9vLnZhbHVlKClbMF06by52YWx1ZSgpOm8pfSl9KSxyKFwicG9wIHB1c2ggc2hpZnQgc29ydCBzcGxpY2UgdW5zaGlmdFwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihuKXt2YXIgdD1yaVtuXSxyPS9eKD86cHVzaHxzb3J0fHVuc2hpZnQpJC8udGVzdChuKT9cInRhcFwiOlwidGhydVwiLGU9L14oPzpwb3B8c2hpZnQpJC8udGVzdChuKTtBbi5wcm90b3R5cGVbbl09ZnVuY3Rpb24oKXt2YXIgbj1hcmd1bWVudHM7aWYoZSYmIXRoaXMuX19jaGFpbl9fKXt2YXIgdT10aGlzLnZhbHVlKCk7cmV0dXJuIHQuYXBwbHkoZmYodSk/dTpbXSxuKX1yZXR1cm4gdGhpc1tyXShmdW5jdGlvbihyKXtyZXR1cm4gdC5hcHBseShmZihyKT9yOltdLG4pfSk7XHJcbiAgfX0pLG10KFVuLnByb3RvdHlwZSxmdW5jdGlvbihuLHQpe3ZhciByPUFuW3RdO2lmKHIpe3ZhciBlPXIubmFtZStcIlwiO29pLmNhbGwoR2ksZSl8fChHaVtlXT1bXSksR2lbZV0ucHVzaCh7bmFtZTp0LGZ1bmM6cn0pfX0pLEdpW0pyKFQsMikubmFtZV09W3tuYW1lOlwid3JhcHBlclwiLGZ1bmM6VH1dLFVuLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBuPW5ldyBVbih0aGlzLl9fd3JhcHBlZF9fKTtyZXR1cm4gbi5fX2FjdGlvbnNfXz1Vcih0aGlzLl9fYWN0aW9uc19fKSxuLl9fZGlyX189dGhpcy5fX2Rpcl9fLG4uX19maWx0ZXJlZF9fPXRoaXMuX19maWx0ZXJlZF9fLG4uX19pdGVyYXRlZXNfXz1Vcih0aGlzLl9faXRlcmF0ZWVzX18pLG4uX190YWtlQ291bnRfXz10aGlzLl9fdGFrZUNvdW50X18sbi5fX3ZpZXdzX189VXIodGhpcy5fX3ZpZXdzX18pLG59LFVuLnByb3RvdHlwZS5yZXZlcnNlPWZ1bmN0aW9uKCl7aWYodGhpcy5fX2ZpbHRlcmVkX18pe3ZhciBuPW5ldyBVbih0aGlzKTtcclxuICBuLl9fZGlyX189LTEsbi5fX2ZpbHRlcmVkX189dHJ1ZX1lbHNlIG49dGhpcy5jbG9uZSgpLG4uX19kaXJfXyo9LTE7cmV0dXJuIG59LFVuLnByb3RvdHlwZS52YWx1ZT1mdW5jdGlvbigpe3ZhciBuLHQ9dGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLHI9dGhpcy5fX2Rpcl9fLGU9ZmYodCksdT0wPnIsaT1lP3QubGVuZ3RoOjA7bj1pO2Zvcih2YXIgbz10aGlzLl9fdmlld3NfXyxmPTAsYz0tMSxhPW8ubGVuZ3RoOysrYzxhOyl7dmFyIGw9b1tjXSxzPWwuc2l6ZTtzd2l0Y2gobC50eXBlKXtjYXNlXCJkcm9wXCI6Zis9czticmVhaztjYXNlXCJkcm9wUmlnaHRcIjpuLT1zO2JyZWFrO2Nhc2VcInRha2VcIjpuPUNpKG4sZitzKTticmVhaztjYXNlXCJ0YWtlUmlnaHRcIjpmPVVpKGYsbi1zKX19aWYobj17c3RhcnQ6ZixlbmQ6bn0sbz1uLnN0YXJ0LGY9bi5lbmQsbj1mLW8sbz11P2Y6by0xLGY9dGhpcy5fX2l0ZXJhdGVlc19fLGM9Zi5sZW5ndGgsYT0wLGw9Q2kobix0aGlzLl9fdGFrZUNvdW50X18pLCFlfHwhdSYmaT09biYmbD09bilyZXR1cm4gd3IodCx0aGlzLl9fYWN0aW9uc19fKTtcclxuICBlPVtdO246Zm9yKDtuLS0mJmE8bDspe2ZvcihvKz1yLHU9LTEsaT10W29dOysrdTxjOyl7dmFyIGg9Zlt1XSxzPWgudHlwZSxoPSgwLGguaXRlcmF0ZWUpKGkpO2lmKDI9PXMpaT1oO2Vsc2UgaWYoIWgpe2lmKDE9PXMpY29udGludWUgbjticmVhayBufX1lW2ErK109aX1yZXR1cm4gZX0sQW4ucHJvdG90eXBlLmF0PVRvLEFuLnByb3RvdHlwZS5jaGFpbj1mdW5jdGlvbigpe3JldHVybiBZZSh0aGlzKX0sQW4ucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3JldHVybiBuZXcgT24odGhpcy52YWx1ZSgpLHRoaXMuX19jaGFpbl9fKX0sQW4ucHJvdG90eXBlLm5leHQ9ZnVuY3Rpb24oKXt0aGlzLl9fdmFsdWVzX189PT1UJiYodGhpcy5fX3ZhbHVlc19fPW11KHRoaXMudmFsdWUoKSkpO3ZhciBuPXRoaXMuX19pbmRleF9fPj10aGlzLl9fdmFsdWVzX18ubGVuZ3RoO3JldHVybntkb25lOm4sdmFsdWU6bj9UOnRoaXMuX192YWx1ZXNfX1t0aGlzLl9faW5kZXhfXysrXX19LEFuLnByb3RvdHlwZS5wbGFudD1mdW5jdGlvbihuKXtcclxuICBmb3IodmFyIHQscj10aGlzO3IgaW5zdGFuY2VvZiBFbjspe3ZhciBlPUZlKHIpO2UuX19pbmRleF9fPTAsZS5fX3ZhbHVlc19fPVQsdD91Ll9fd3JhcHBlZF9fPWU6dD1lO3ZhciB1PWUscj1yLl9fd3JhcHBlZF9ffXJldHVybiB1Ll9fd3JhcHBlZF9fPW4sdH0sQW4ucHJvdG90eXBlLnJldmVyc2U9ZnVuY3Rpb24oKXt2YXIgbj10aGlzLl9fd3JhcHBlZF9fO3JldHVybiBuIGluc3RhbmNlb2YgVW4/KHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoJiYobj1uZXcgVW4odGhpcykpLG49bi5yZXZlcnNlKCksbi5fX2FjdGlvbnNfXy5wdXNoKHtmdW5jOlFlLGFyZ3M6W0dlXSx0aGlzQXJnOlR9KSxuZXcgT24obix0aGlzLl9fY2hhaW5fXykpOnRoaXMudGhydShHZSl9LEFuLnByb3RvdHlwZS50b0pTT049QW4ucHJvdG90eXBlLnZhbHVlT2Y9QW4ucHJvdG90eXBlLnZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIHdyKHRoaXMuX193cmFwcGVkX18sdGhpcy5fX2FjdGlvbnNfXyl9LEFuLnByb3RvdHlwZS5maXJzdD1Bbi5wcm90b3R5cGUuaGVhZCxcclxuICB3aSYmKEFuLnByb3RvdHlwZVt3aV09WGUpLEFufSgpO3R5cGVvZiBkZWZpbmU9PVwiZnVuY3Rpb25cIiYmdHlwZW9mIGRlZmluZS5hbWQ9PVwib2JqZWN0XCImJmRlZmluZS5hbWQ/KCRuLl89cnQsIGRlZmluZShmdW5jdGlvbigpe3JldHVybiBydH0pKTpObj8oKE5uLmV4cG9ydHM9cnQpLl89cnQsRm4uXz1ydCk6JG4uXz1ydH0pLmNhbGwodGhpcyk7XHJcbiIsIi8qIVxuICogU2Nyb2xsVHJpZ2dlciAzLjExLjNcbiAqIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAyMDIyLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3IgQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiAqL1xuXG4hZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT90KGV4cG9ydHMpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiZXhwb3J0c1wiXSx0KTp0KChlPWV8fHNlbGYpLndpbmRvdz1lLndpbmRvd3x8e30pfSh0aGlzLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1mdW5jdGlvbiBxKCl7cmV0dXJuIHdlfHxcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYod2U9d2luZG93LmdzYXApJiZ3ZS5yZWdpc3RlclBsdWdpbiYmd2V9ZnVuY3Rpb24geShlLHQpe3JldHVybn5GZS5pbmRleE9mKGUpJiZGZVtGZS5pbmRleE9mKGUpKzFdW3RdfWZ1bmN0aW9uIHooZSl7cmV0dXJuISF+dC5pbmRleE9mKGUpfWZ1bmN0aW9uIEEoZSx0LHIsbixvKXtyZXR1cm4gZS5hZGRFdmVudExpc3RlbmVyKHQscix7cGFzc2l2ZTohbixjYXB0dXJlOiEhb30pfWZ1bmN0aW9uIEIoZSx0LHIsbil7cmV0dXJuIGUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LHIsISFuKX1mdW5jdGlvbiBFKCl7cmV0dXJuIHplJiZ6ZS5pc1ByZXNzZWR8fExlLmNhY2hlKyt9ZnVuY3Rpb24gRihyLG4pe2Z1bmN0aW9uIFNjKGUpe2lmKGV8fDA9PT1lKXtvJiYoQWUuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbj1cIm1hbnVhbFwiKTt2YXIgdD16ZSYmemUuaXNQcmVzc2VkO2U9U2Mudj1NYXRoLnJvdW5kKGUpfHwoemUmJnplLmlPUz8xOjApLHIoZSksU2MuY2FjaGVJRD1MZS5jYWNoZSx0JiZpKFwic3NcIixlKX1lbHNlKG58fExlLmNhY2hlIT09U2MuY2FjaGVJRHx8aShcInJlZlwiKSkmJihTYy5jYWNoZUlEPUxlLmNhY2hlLFNjLnY9cigpKTtyZXR1cm4gU2MuditTYy5vZmZzZXR9cmV0dXJuIFNjLm9mZnNldD0wLHImJlNjfWZ1bmN0aW9uIEkoZSl7cmV0dXJuIHdlLnV0aWxzLnRvQXJyYXkoZSlbMF18fChcInN0cmluZ1wiPT10eXBlb2YgZSYmITEhPT13ZS5jb25maWcoKS5udWxsVGFyZ2V0V2Fybj9jb25zb2xlLndhcm4oXCJFbGVtZW50IG5vdCBmb3VuZDpcIixlKTpudWxsKX1mdW5jdGlvbiBKKHQsZSl7dmFyIHI9ZS5zLG49ZS5zYzt6KHQpJiYodD1FZS5zY3JvbGxpbmdFbGVtZW50fHxNZSk7dmFyIG89TGUuaW5kZXhPZih0KSxpPW49PT1OZS5zYz8xOjI7fm98fChvPUxlLnB1c2godCktMSksTGVbbytpXXx8dC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsRSk7dmFyIGE9TGVbbytpXSxzPWF8fChMZVtvK2ldPUYoeSh0LHIpLCEwKXx8KHoodCk/bjpGKGZ1bmN0aW9uKGUpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoP3Rbcl09ZTp0W3JdfSkpKTtyZXR1cm4gcy50YXJnZXQ9dCxhfHwocy5zbW9vdGg9XCJzbW9vdGhcIj09PXdlLmdldFByb3BlcnR5KHQsXCJzY3JvbGxCZWhhdmlvclwiKSksc31mdW5jdGlvbiBLKGUsdCxvKXtmdW5jdGlvbiBvZChlLHQpe3ZhciByPUhlKCk7dHx8bjxyLXM/KGE9aSxpPWUsbD1zLHM9cik6bz9pKz1lOmk9YSsoZS1hKS8oci1sKSoocy1sKX12YXIgaT1lLGE9ZSxzPUhlKCksbD1zLG49dHx8NTAsYz1NYXRoLm1heCg1MDAsMypuKTtyZXR1cm57dXBkYXRlOm9kLHJlc2V0OmZ1bmN0aW9uIHJlc2V0KCl7YT1pPW8/MDppLGw9cz0wfSxnZXRWZWxvY2l0eTpmdW5jdGlvbiBnZXRWZWxvY2l0eShlKXt2YXIgdD1sLHI9YSxuPUhlKCk7cmV0dXJuIWUmJjAhPT1lfHxlPT09aXx8b2QoZSkscz09PWx8fGM8bi1sPzA6KGkrKG8/cjotcikpLygobz9uOnMpLXQpKjFlM319fWZ1bmN0aW9uIEwoZSx0KXtyZXR1cm4gdCYmIWUuX2dzYXBBbGxvdyYmZS5wcmV2ZW50RGVmYXVsdCgpLGUuY2hhbmdlZFRvdWNoZXM/ZS5jaGFuZ2VkVG91Y2hlc1swXTplfWZ1bmN0aW9uIE0oZSl7dmFyIHQ9TWF0aC5tYXguYXBwbHkoTWF0aCxlKSxyPU1hdGgubWluLmFwcGx5KE1hdGgsZSk7cmV0dXJuIE1hdGguYWJzKHQpPj1NYXRoLmFicyhyKT90OnJ9ZnVuY3Rpb24gTigpeyhJZT13ZS5jb3JlLmdsb2JhbHMoKS5TY3JvbGxUcmlnZ2VyKSYmSWUuY29yZSYmZnVuY3Rpb24gX2ludGVncmF0ZSgpe3ZhciBlPUllLmNvcmUscj1lLmJyaWRnZXx8e30sdD1lLl9zY3JvbGxlcnMsbj1lLl9wcm94aWVzO3QucHVzaC5hcHBseSh0LExlKSxuLnB1c2guYXBwbHkobixGZSksTGU9dCxGZT1uLGk9ZnVuY3Rpb24gX2JyaWRnZShlLHQpe3JldHVybiByW2VdKHQpfX0oKX1mdW5jdGlvbiBPKGUpe3JldHVybih3ZT1lfHxxKCkpJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQmJmRvY3VtZW50LmJvZHkmJihBZT13aW5kb3csTWU9KEVlPWRvY3VtZW50KS5kb2N1bWVudEVsZW1lbnQsQ2U9RWUuYm9keSx0PVtBZSxFZSxNZSxDZV0sd2UudXRpbHMuY2xhbXAsRGU9XCJvbnBvaW50ZXJlbnRlclwiaW4gQ2U/XCJwb2ludGVyXCI6XCJtb3VzZVwiLE9lPWsuaXNUb3VjaD1BZS5tYXRjaE1lZGlhJiZBZS5tYXRjaE1lZGlhKFwiKGhvdmVyOiBub25lKSwgKHBvaW50ZXI6IGNvYXJzZSlcIikubWF0Y2hlcz8xOlwib250b3VjaHN0YXJ0XCJpbiBBZXx8MDxuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHN8fDA8bmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHM/MjowLEJlPWsuZXZlbnRUeXBlcz0oXCJvbnRvdWNoc3RhcnRcImluIE1lP1widG91Y2hzdGFydCx0b3VjaG1vdmUsdG91Y2hjYW5jZWwsdG91Y2hlbmRcIjpcIm9ucG9pbnRlcmRvd25cImluIE1lP1wicG9pbnRlcmRvd24scG9pbnRlcm1vdmUscG9pbnRlcmNhbmNlbCxwb2ludGVydXBcIjpcIm1vdXNlZG93bixtb3VzZW1vdmUsbW91c2V1cCxtb3VzZXVwXCIpLnNwbGl0KFwiLFwiKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cmV0dXJuIG89MH0sNTAwKSxOKCksa2U9MSksa2V9dmFyIHdlLGtlLEFlLEVlLE1lLENlLE9lLERlLEllLHQsemUsQmUsbz0xLFJlPVtdLExlPVtdLEZlPVtdLEhlPURhdGUubm93LGk9ZnVuY3Rpb24gX2JyaWRnZShlLHQpe3JldHVybiB0fSxyPVwic2Nyb2xsTGVmdFwiLG49XCJzY3JvbGxUb3BcIixKZT17czpyLHA6XCJsZWZ0XCIscDI6XCJMZWZ0XCIsb3M6XCJyaWdodFwiLG9zMjpcIlJpZ2h0XCIsZDpcIndpZHRoXCIsZDI6XCJXaWR0aFwiLGE6XCJ4XCIsc2M6RihmdW5jdGlvbihlKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD9BZS5zY3JvbGxUbyhlLE5lLnNjKCkpOkFlLnBhZ2VYT2Zmc2V0fHxFZVtyXXx8TWVbcl18fENlW3JdfHwwfSl9LE5lPXtzOm4scDpcInRvcFwiLHAyOlwiVG9wXCIsb3M6XCJib3R0b21cIixvczI6XCJCb3R0b21cIixkOlwiaGVpZ2h0XCIsZDI6XCJIZWlnaHRcIixhOlwieVwiLG9wOkplLHNjOkYoZnVuY3Rpb24oZSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/QWUuc2Nyb2xsVG8oSmUuc2MoKSxlKTpBZS5wYWdlWU9mZnNldHx8RWVbbl18fE1lW25dfHxDZVtuXXx8MH0pfTtKZS5vcD1OZSxMZS5jYWNoZT0wO3ZhciBrPShPYnNlcnZlci5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbiBpbml0KGUpe2tlfHxPKHdlKXx8Y29uc29sZS53YXJuKFwiUGxlYXNlIGdzYXAucmVnaXN0ZXJQbHVnaW4oT2JzZXJ2ZXIpXCIpLEllfHxOKCk7dmFyIG89ZS50b2xlcmFuY2UsYT1lLmRyYWdNaW5pbXVtLHQ9ZS50eXBlLG49ZS50YXJnZXQscj1lLmxpbmVIZWlnaHQsaT1lLmRlYm91bmNlLHM9ZS5wcmV2ZW50RGVmYXVsdCxsPWUub25TdG9wLGM9ZS5vblN0b3BEZWxheSx1PWUuaWdub3JlLGY9ZS53aGVlbFNwZWVkLGQ9ZS5ldmVudCxwPWUub25EcmFnU3RhcnQsZz1lLm9uRHJhZ0VuZCxoPWUub25EcmFnLHY9ZS5vblByZXNzLGI9ZS5vblJlbGVhc2UsbT1lLm9uUmlnaHQseT1lLm9uTGVmdCx4PWUub25VcCxTPWUub25Eb3duLHc9ZS5vbkNoYW5nZVgsXz1lLm9uQ2hhbmdlWSxUPWUub25DaGFuZ2Usaz1lLm9uVG9nZ2xlWCxQPWUub25Ub2dnbGVZLEM9ZS5vbkhvdmVyLEQ9ZS5vbkhvdmVyRW5kLFI9ZS5vbk1vdmUsWD1lLmlnbm9yZUNoZWNrLEY9ZS5pc05vcm1hbGl6ZXIsWT1lLm9uR2VzdHVyZVN0YXJ0LEg9ZS5vbkdlc3R1cmVFbmQsVj1lLm9uV2hlZWwsVz1lLm9uRW5hYmxlLGo9ZS5vbkRpc2FibGUscT1lLm9uQ2xpY2ssVT1lLnNjcm9sbFNwZWVkLEc9ZS5jYXB0dXJlLCQ9ZS5hbGxvd0NsaWNrcyxRPWUubG9ja0F4aXMsWj1lLm9uTG9ja0F4aXM7ZnVuY3Rpb24gUGUoKXtyZXR1cm4geWU9SGUoKX1mdW5jdGlvbiBRZShlLHQpe3JldHVybihzZS5ldmVudD1lKSYmdSYmfnUuaW5kZXhPZihlLnRhcmdldCl8fHQmJmdlJiZcInRvdWNoXCIhPT1lLnBvaW50ZXJUeXBlfHxYJiZYKGUsdCl9ZnVuY3Rpb24gU2UoKXt2YXIgZT1zZS5kZWx0YVg9TShiZSksdD1zZS5kZWx0YVk9TShtZSkscj1NYXRoLmFicyhlKT49byxuPU1hdGguYWJzKHQpPj1vO1QmJihyfHxuKSYmVChzZSxlLHQsYmUsbWUpLHImJihtJiYwPHNlLmRlbHRhWCYmbShzZSkseSYmc2UuZGVsdGFYPDAmJnkoc2UpLHcmJncoc2UpLGsmJnNlLmRlbHRhWDwwIT1sZTwwJiZrKHNlKSxsZT1zZS5kZWx0YVgsYmVbMF09YmVbMV09YmVbMl09MCksbiYmKFMmJjA8c2UuZGVsdGFZJiZTKHNlKSx4JiZzZS5kZWx0YVk8MCYmeChzZSksXyYmXyhzZSksUCYmc2UuZGVsdGFZPDAhPWNlPDAmJlAoc2UpLGNlPXNlLmRlbHRhWSxtZVswXT1tZVsxXT1tZVsyXT0wKSwobmV8fHJlKSYmKFImJlIoc2UpLHJlJiYoaChzZSkscmU9ITEpLG5lPSExKSxpZSYmIShpZT0hMSkmJlomJlooc2UpLG9lJiYoVihzZSksb2U9ITEpLGVlPTB9ZnVuY3Rpb24gVGUoZSx0LHIpe2JlW3JdKz1lLG1lW3JdKz10LHNlLl92eC51cGRhdGUoZSksc2UuX3Z5LnVwZGF0ZSh0KSxpP2VlPWVlfHxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoU2UpOlNlKCl9ZnVuY3Rpb24gVWUoZSx0KXtRJiYhYWUmJihzZS5heGlzPWFlPU1hdGguYWJzKGUpPk1hdGguYWJzKHQpP1wieFwiOlwieVwiLGllPSEwKSxcInlcIiE9PWFlJiYoYmVbMl0rPWUsc2UuX3Z4LnVwZGF0ZShlLCEwKSksXCJ4XCIhPT1hZSYmKG1lWzJdKz10LHNlLl92eS51cGRhdGUodCwhMCkpLGk/ZWU9ZWV8fHJlcXVlc3RBbmltYXRpb25GcmFtZShTZSk6U2UoKX1mdW5jdGlvbiBWZShlKXtpZighUWUoZSwxKSl7dmFyIHQ9KGU9TChlLHMpKS5jbGllbnRYLHI9ZS5jbGllbnRZLG49dC1zZS54LG89ci1zZS55LGk9c2UuaXNEcmFnZ2luZztzZS54PXQsc2UueT1yLChpfHxNYXRoLmFicyhzZS5zdGFydFgtdCk+PWF8fE1hdGguYWJzKHNlLnN0YXJ0WS1yKT49YSkmJihoJiYocmU9ITApLGl8fChzZS5pc0RyYWdnaW5nPSEwKSxVZShuLG8pLGl8fHAmJnAoc2UpKX19ZnVuY3Rpb24gWGUodCl7aWYoIVFlKHQsMSkpe0IoRj9uOnZlLEJlWzFdLFZlLCEwKTt2YXIgZT1zZS5pc0RyYWdnaW5nJiYoMzxNYXRoLmFicyhzZS54LXNlLnN0YXJ0WCl8fDM8TWF0aC5hYnMoc2UueS1zZS5zdGFydFkpKSxyPUwodCk7ZXx8KHNlLl92eC5yZXNldCgpLHNlLl92eS5yZXNldCgpLHMmJiQmJndlLmRlbGF5ZWRDYWxsKC4wOCxmdW5jdGlvbigpe2lmKDMwMDxIZSgpLXllJiYhdC5kZWZhdWx0UHJldmVudGVkKWlmKHQudGFyZ2V0LmNsaWNrKXQudGFyZ2V0LmNsaWNrKCk7ZWxzZSBpZih2ZS5jcmVhdGVFdmVudCl7dmFyIGU9dmUuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtlLmluaXRNb3VzZUV2ZW50KFwiY2xpY2tcIiwhMCwhMCxBZSwxLHIuc2NyZWVuWCxyLnNjcmVlblksci5jbGllbnRYLHIuY2xpZW50WSwhMSwhMSwhMSwhMSwwLG51bGwpLHQudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZSl9fSkpLHNlLmlzRHJhZ2dpbmc9c2UuaXNHZXN0dXJpbmc9c2UuaXNQcmVzc2VkPSExLGwmJiFGJiZ0ZS5yZXN0YXJ0KCEwKSxnJiZlJiZnKHNlKSxiJiZiKHNlLGUpfX1mdW5jdGlvbiBZZShlKXtyZXR1cm4gZS50b3VjaGVzJiYxPGUudG91Y2hlcy5sZW5ndGgmJihzZS5pc0dlc3R1cmluZz0hMCkmJlkoZSxzZS5pc0RyYWdnaW5nKX1mdW5jdGlvbiBaZSgpe3JldHVybihzZS5pc0dlc3R1cmluZz0hMSl8fEgoc2UpfWZ1bmN0aW9uICRlKGUpe2lmKCFRZShlKSl7dmFyIHQ9dWUoKSxyPWZlKCk7VGUoKHQtZGUpKlUsKHItcGUpKlUsMSksZGU9dCxwZT1yLGwmJnRlLnJlc3RhcnQoITApfX1mdW5jdGlvbiBfZShlKXtpZighUWUoZSkpe2U9TChlLHMpLFYmJihvZT0hMCk7dmFyIHQ9KDE9PT1lLmRlbHRhTW9kZT9yOjI9PT1lLmRlbHRhTW9kZT9BZS5pbm5lckhlaWdodDoxKSpmO1RlKGUuZGVsdGFYKnQsZS5kZWx0YVkqdCwwKSxsJiYhRiYmdGUucmVzdGFydCghMCl9fWZ1bmN0aW9uIGFmKGUpe2lmKCFRZShlKSl7dmFyIHQ9ZS5jbGllbnRYLHI9ZS5jbGllbnRZLG49dC1zZS54LG89ci1zZS55O3NlLng9dCxzZS55PXIsbmU9ITAsKG58fG8pJiZVZShuLG8pfX1mdW5jdGlvbiBiZihlKXtzZS5ldmVudD1lLEMoc2UpfWZ1bmN0aW9uIGNmKGUpe3NlLmV2ZW50PWUsRChzZSl9ZnVuY3Rpb24gZGYoZSl7cmV0dXJuIFFlKGUpfHxMKGUscykmJnEoc2UpfXRoaXMudGFyZ2V0PW49SShuKXx8TWUsdGhpcy52YXJzPWUsdT11JiZ3ZS51dGlscy50b0FycmF5KHUpLG89b3x8MWUtOSxhPWF8fDAsZj1mfHwxLFU9VXx8MSx0PXR8fFwid2hlZWwsdG91Y2gscG9pbnRlclwiLGk9ITEhPT1pLHI9cnx8cGFyc2VGbG9hdChBZS5nZXRDb21wdXRlZFN0eWxlKENlKS5saW5lSGVpZ2h0KXx8MjI7dmFyIGVlLHRlLHJlLG5lLG9lLGllLGFlLHNlPXRoaXMsbGU9MCxjZT0wLHVlPUoobixKZSksZmU9SihuLE5lKSxkZT11ZSgpLHBlPWZlKCksZ2U9fnQuaW5kZXhPZihcInRvdWNoXCIpJiYhfnQuaW5kZXhPZihcInBvaW50ZXJcIikmJlwicG9pbnRlcmRvd25cIj09PUJlWzBdLGhlPXoobiksdmU9bi5vd25lckRvY3VtZW50fHxFZSxiZT1bMCwwLDBdLG1lPVswLDAsMF0seWU9MCx4ZT1zZS5vblByZXNzPWZ1bmN0aW9uKGUpe1FlKGUsMSl8fChzZS5heGlzPWFlPW51bGwsdGUucGF1c2UoKSxzZS5pc1ByZXNzZWQ9ITAsZT1MKGUpLGxlPWNlPTAsc2Uuc3RhcnRYPXNlLng9ZS5jbGllbnRYLHNlLnN0YXJ0WT1zZS55PWUuY2xpZW50WSxzZS5fdngucmVzZXQoKSxzZS5fdnkucmVzZXQoKSxBKEY/bjp2ZSxCZVsxXSxWZSxzLCEwKSxzZS5kZWx0YVg9c2UuZGVsdGFZPTAsdiYmdihzZSkpfTt0ZT1zZS5fZGM9d2UuZGVsYXllZENhbGwoY3x8LjI1LGZ1bmN0aW9uIG9uU3RvcEZ1bmMoKXtzZS5fdngucmVzZXQoKSxzZS5fdnkucmVzZXQoKSx0ZS5wYXVzZSgpLGwmJmwoc2UpfSkucGF1c2UoKSxzZS5kZWx0YVg9c2UuZGVsdGFZPTAsc2UuX3Z4PUsoMCw1MCwhMCksc2UuX3Z5PUsoMCw1MCwhMCksc2Uuc2Nyb2xsWD11ZSxzZS5zY3JvbGxZPWZlLHNlLmlzRHJhZ2dpbmc9c2UuaXNHZXN0dXJpbmc9c2UuaXNQcmVzc2VkPSExLHNlLmVuYWJsZT1mdW5jdGlvbihlKXtyZXR1cm4gc2UuaXNFbmFibGVkfHwoQShoZT92ZTpuLFwic2Nyb2xsXCIsRSksMDw9dC5pbmRleE9mKFwic2Nyb2xsXCIpJiZBKGhlP3ZlOm4sXCJzY3JvbGxcIiwkZSxzLEcpLDA8PXQuaW5kZXhPZihcIndoZWVsXCIpJiZBKG4sXCJ3aGVlbFwiLF9lLHMsRyksKDA8PXQuaW5kZXhPZihcInRvdWNoXCIpJiZPZXx8MDw9dC5pbmRleE9mKFwicG9pbnRlclwiKSkmJihBKG4sQmVbMF0seGUscyxHKSxBKHZlLEJlWzJdLFhlKSxBKHZlLEJlWzNdLFhlKSwkJiZBKG4sXCJjbGlja1wiLFBlLCExLCEwKSxxJiZBKG4sXCJjbGlja1wiLGRmKSxZJiZBKHZlLFwiZ2VzdHVyZXN0YXJ0XCIsWWUpLEgmJkEodmUsXCJnZXN0dXJlZW5kXCIsWmUpLEMmJkEobixEZStcImVudGVyXCIsYmYpLEQmJkEobixEZStcImxlYXZlXCIsY2YpLFImJkEobixEZStcIm1vdmVcIixhZikpLHNlLmlzRW5hYmxlZD0hMCxlJiZlLnR5cGUmJnhlKGUpLFcmJlcoc2UpKSxzZX0sc2UuZGlzYWJsZT1mdW5jdGlvbigpe3NlLmlzRW5hYmxlZCYmKFJlLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZSE9PXNlJiZ6KGUudGFyZ2V0KX0pLmxlbmd0aHx8QihoZT92ZTpuLFwic2Nyb2xsXCIsRSksc2UuaXNQcmVzc2VkJiYoc2UuX3Z4LnJlc2V0KCksc2UuX3Z5LnJlc2V0KCksQihGP246dmUsQmVbMV0sVmUsITApKSxCKGhlP3ZlOm4sXCJzY3JvbGxcIiwkZSxHKSxCKG4sXCJ3aGVlbFwiLF9lLEcpLEIobixCZVswXSx4ZSxHKSxCKHZlLEJlWzJdLFhlKSxCKHZlLEJlWzNdLFhlKSxCKG4sXCJjbGlja1wiLFBlLCEwKSxCKG4sXCJjbGlja1wiLGRmKSxCKHZlLFwiZ2VzdHVyZXN0YXJ0XCIsWWUpLEIodmUsXCJnZXN0dXJlZW5kXCIsWmUpLEIobixEZStcImVudGVyXCIsYmYpLEIobixEZStcImxlYXZlXCIsY2YpLEIobixEZStcIm1vdmVcIixhZiksc2UuaXNFbmFibGVkPXNlLmlzUHJlc3NlZD1zZS5pc0RyYWdnaW5nPSExLGomJmooc2UpKX0sc2Uua2lsbD1mdW5jdGlvbigpe3NlLmRpc2FibGUoKTt2YXIgZT1SZS5pbmRleE9mKHNlKTswPD1lJiZSZS5zcGxpY2UoZSwxKSx6ZT09PXNlJiYoemU9MCl9LFJlLnB1c2goc2UpLEYmJnoobikmJih6ZT1zZSksc2UuZW5hYmxlKGQpfSxmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSx0LHIpe3JldHVybiB0JiZfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSx0KSxyJiZfZGVmaW5lUHJvcGVydGllcyhlLHIpLGV9KE9ic2VydmVyLFt7a2V5OlwidmVsb2NpdHlYXCIsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiB0aGlzLl92eC5nZXRWZWxvY2l0eSgpfX0se2tleTpcInZlbG9jaXR5WVwiLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gdGhpcy5fdnkuZ2V0VmVsb2NpdHkoKX19XSksT2JzZXJ2ZXIpO2Z1bmN0aW9uIE9ic2VydmVyKGUpe3RoaXMuaW5pdChlKX1rLnZlcnNpb249XCIzLjExLjNcIixrLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGsoZSl9LGsucmVnaXN0ZXI9TyxrLmdldEFsbD1mdW5jdGlvbigpe3JldHVybiBSZS5zbGljZSgpfSxrLmdldEJ5SWQ9ZnVuY3Rpb24odCl7cmV0dXJuIFJlLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS52YXJzLmlkPT09dH0pWzBdfSxxKCkmJndlLnJlZ2lzdGVyUGx1Z2luKGspO2Z1bmN0aW9uIHhhKCl7cmV0dXJuIG90PTF9ZnVuY3Rpb24geWEoKXtyZXR1cm4gb3Q9MH1mdW5jdGlvbiB6YShlKXtyZXR1cm4gZX1mdW5jdGlvbiBBYShlKXtyZXR1cm4gTWF0aC5yb3VuZCgxZTUqZSkvMWU1fHwwfWZ1bmN0aW9uIEJhKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvd31mdW5jdGlvbiBDYSgpe3JldHVybiBLZXx8QmEoKSYmKEtlPXdpbmRvdy5nc2FwKSYmS2UucmVnaXN0ZXJQbHVnaW4mJktlfWZ1bmN0aW9uIERhKGUpe3JldHVybiEhfnMuaW5kZXhPZihlKX1mdW5jdGlvbiBFYShlKXtyZXR1cm4geShlLFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIpfHwoRGEoZSk/ZnVuY3Rpb24oKXtyZXR1cm4gWHQud2lkdGg9V2UuaW5uZXJXaWR0aCxYdC5oZWlnaHQ9V2UuaW5uZXJIZWlnaHQsWHR9OmZ1bmN0aW9uKCl7cmV0dXJuIE10KGUpfSl9ZnVuY3Rpb24gSGEoZSx0KXt2YXIgcj10LnMsbj10LmQyLG89dC5kLGk9dC5hO3JldHVybihyPVwic2Nyb2xsXCIrbikmJihpPXkoZSxyKSk/aSgpLUVhKGUpKClbb106RGEoZSk/KHFlW3JdfHxHZVtyXSktKFdlW1wiaW5uZXJcIituXXx8cWVbXCJjbGllbnRcIituXXx8R2VbXCJjbGllbnRcIituXSk6ZVtyXS1lW1wib2Zmc2V0XCIrbl19ZnVuY3Rpb24gSWEoZSx0KXtmb3IodmFyIHI9MDtyPHAubGVuZ3RoO3IrPTMpdCYmIX50LmluZGV4T2YocFtyKzFdKXx8ZShwW3JdLHBbcisxXSxwW3IrMl0pfWZ1bmN0aW9uIEphKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlfWZ1bmN0aW9uIEthKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV9ZnVuY3Rpb24gTGEoZSl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIGV9ZnVuY3Rpb24gTWEoZSl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGV9ZnVuY3Rpb24gTmEoZSx0LHIpe3JldHVybiBlJiZlLnByb2dyZXNzKHQ/MDoxKSYmciYmZS5wYXVzZSgpfWZ1bmN0aW9uIE9hKGUsdCl7aWYoZS5lbmFibGVkKXt2YXIgcj10KGUpO3ImJnIudG90YWxUaW1lJiYoZS5jYWxsYmFja0FuaW1hdGlvbj1yKX19ZnVuY3Rpb24gZGIoZSl7cmV0dXJuIFdlLmdldENvbXB1dGVkU3R5bGUoZSl9ZnVuY3Rpb24gZmIoZSx0KXtmb3IodmFyIHIgaW4gdClyIGluIGV8fChlW3JdPXRbcl0pO3JldHVybiBlfWZ1bmN0aW9uIGhiKGUsdCl7dmFyIHI9dC5kMjtyZXR1cm4gZVtcIm9mZnNldFwiK3JdfHxlW1wiY2xpZW50XCIrcl18fDB9ZnVuY3Rpb24gaWIoZSl7dmFyIHQscj1bXSxuPWUubGFiZWxzLG89ZS5kdXJhdGlvbigpO2Zvcih0IGluIG4pci5wdXNoKG5bdF0vbyk7cmV0dXJuIHJ9ZnVuY3Rpb24ga2Iobyl7dmFyIGk9S2UudXRpbHMuc25hcChvKSxhPUFycmF5LmlzQXJyYXkobykmJm8uc2xpY2UoMCkuc29ydChmdW5jdGlvbihlLHQpe3JldHVybiBlLXR9KTtyZXR1cm4gYT9mdW5jdGlvbihlLHQscil7dmFyIG47aWYodm9pZCAwPT09ciYmKHI9LjAwMSksIXQpcmV0dXJuIGkoZSk7aWYoMDx0KXtmb3IoZS09cixuPTA7bjxhLmxlbmd0aDtuKyspaWYoYVtuXT49ZSlyZXR1cm4gYVtuXTtyZXR1cm4gYVtuLTFdfWZvcihuPWEubGVuZ3RoLGUrPXI7bi0tOylpZihhW25dPD1lKXJldHVybiBhW25dO3JldHVybiBhWzBdfTpmdW5jdGlvbihlLHQscil7dm9pZCAwPT09ciYmKHI9LjAwMSk7dmFyIG49aShlKTtyZXR1cm4hdHx8TWF0aC5hYnMobi1lKTxyfHxuLWU8MD09dDwwP246aSh0PDA/ZS1vOmUrbyl9fWZ1bmN0aW9uIG1iKHQscixlLG4pe3JldHVybiBlLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiB0KHIsZSxuKX0pfWZ1bmN0aW9uIG5iKGUsdCxyLG4sbyl7cmV0dXJuIGUuYWRkRXZlbnRMaXN0ZW5lcih0LHIse3Bhc3NpdmU6IW4sY2FwdHVyZTohIW99KX1mdW5jdGlvbiBvYihlLHQscixuKXtyZXR1cm4gZS5yZW1vdmVFdmVudExpc3RlbmVyKHQsciwhIW4pfWZ1bmN0aW9uIHBiKGUsdCxyKXtyZXR1cm4gciYmci53aGVlbEhhbmRsZXImJmUodCxcIndoZWVsXCIscil9ZnVuY3Rpb24gdGIoZSx0KXtpZihKYShlKSl7dmFyIHI9ZS5pbmRleE9mKFwiPVwiKSxuPX5yPyhlLmNoYXJBdChyLTEpKzEpKnBhcnNlRmxvYXQoZS5zdWJzdHIocisxKSk6MDt+ciYmKGUuaW5kZXhPZihcIiVcIik+ciYmKG4qPXQvMTAwKSxlPWUuc3Vic3RyKDAsci0xKSksZT1uKyhlIGluIEQ/RFtlXSp0On5lLmluZGV4T2YoXCIlXCIpP3BhcnNlRmxvYXQoZSkqdC8xMDA6cGFyc2VGbG9hdChlKXx8MCl9cmV0dXJuIGV9ZnVuY3Rpb24gdWIoZSx0LHIsbixvLGksYSxzKXt2YXIgbD1vLnN0YXJ0Q29sb3IsYz1vLmVuZENvbG9yLHU9by5mb250U2l6ZSxmPW8uaW5kZW50LGQ9by5mb250V2VpZ2h0LHA9amUuY3JlYXRlRWxlbWVudChcImRpdlwiKSxnPURhKHIpfHxcImZpeGVkXCI9PT15KHIsXCJwaW5UeXBlXCIpLGg9LTEhPT1lLmluZGV4T2YoXCJzY3JvbGxlclwiKSx2PWc/R2U6cixiPS0xIT09ZS5pbmRleE9mKFwic3RhcnRcIiksbT1iP2w6Yyx4PVwiYm9yZGVyLWNvbG9yOlwiK20rXCI7Zm9udC1zaXplOlwiK3UrXCI7Y29sb3I6XCIrbStcIjtmb250LXdlaWdodDpcIitkK1wiO3BvaW50ZXItZXZlbnRzOm5vbmU7d2hpdGUtc3BhY2U6bm93cmFwO2ZvbnQtZmFtaWx5OnNhbnMtc2VyaWYsQXJpYWw7ei1pbmRleDoxMDAwO3BhZGRpbmc6NHB4IDhweDtib3JkZXItd2lkdGg6MDtib3JkZXItc3R5bGU6c29saWQ7XCI7cmV0dXJuIHgrPVwicG9zaXRpb246XCIrKChofHxzKSYmZz9cImZpeGVkO1wiOlwiYWJzb2x1dGU7XCIpLCFoJiYhcyYmZ3x8KHgrPShuPT09TmU/XzpUKStcIjpcIisoaStwYXJzZUZsb2F0KGYpKStcInB4O1wiKSxhJiYoeCs9XCJib3gtc2l6aW5nOmJvcmRlci1ib3g7dGV4dC1hbGlnbjpsZWZ0O3dpZHRoOlwiK2Eub2Zmc2V0V2lkdGgrXCJweDtcIikscC5faXNTdGFydD1iLHAuc2V0QXR0cmlidXRlKFwiY2xhc3NcIixcImdzYXAtbWFya2VyLVwiK2UrKHQ/XCIgbWFya2VyLVwiK3Q6XCJcIikpLHAuc3R5bGUuY3NzVGV4dD14LHAuaW5uZXJUZXh0PXR8fDA9PT10P2UrXCItXCIrdDplLHYuY2hpbGRyZW5bMF0/di5pbnNlcnRCZWZvcmUocCx2LmNoaWxkcmVuWzBdKTp2LmFwcGVuZENoaWxkKHApLHAuX29mZnNldD1wW1wib2Zmc2V0XCIrbi5vcC5kMl0sUihwLDAsbixiKSxwfWZ1bmN0aW9uIHpiKCl7cmV0dXJuIDM0PGd0KCktaHQmJihTPVN8fHJlcXVlc3RBbmltYXRpb25GcmFtZShqKSl9ZnVuY3Rpb24gQWIoKXtoJiZoLmlzUHJlc3NlZCYmIShoLnN0YXJ0WD5HZS5jbGllbnRXaWR0aCl8fChMZS5jYWNoZSsrLGg/Uz1TfHxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoaik6aigpLGh0fHxIKFwic2Nyb2xsU3RhcnRcIiksaHQ9Z3QoKSl9ZnVuY3Rpb24gQmIoKXttPVdlLmlubmVyV2lkdGgsYj1XZS5pbm5lckhlaWdodH1mdW5jdGlvbiBDYigpe0xlLmNhY2hlKyssbnR8fGd8fGplLmZ1bGxzY3JlZW5FbGVtZW50fHxqZS53ZWJraXRGdWxsc2NyZWVuRWxlbWVudHx8diYmbT09PVdlLmlubmVyV2lkdGgmJiEoTWF0aC5hYnMoV2UuaW5uZXJIZWlnaHQtYik+LjI1KldlLmlubmVySGVpZ2h0KXx8bC5yZXN0YXJ0KCEwKX1mdW5jdGlvbiBGYigpe3JldHVybiBvYihaLFwic2Nyb2xsRW5kXCIsRmIpfHx6dCghMCl9ZnVuY3Rpb24gSWIoZSl7Zm9yKHZhciB0PTA7dDxWLmxlbmd0aDt0Kz01KSghZXx8Vlt0KzRdJiZWW3QrNF0ucXVlcnk9PT1lKSYmKFZbdF0uc3R5bGUuY3NzVGV4dD1WW3QrMV0sVlt0XS5nZXRCQm94JiZWW3RdLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLFZbdCsyXXx8XCJcIiksVlt0KzNdLnVuY2FjaGU9MSl9ZnVuY3Rpb24gSmIoZSx0KXt2YXIgcjtmb3IoaXQ9MDtpdDxPdC5sZW5ndGg7aXQrKykhKHI9T3RbaXRdKXx8dCYmci5fY3R4IT09dHx8KGU/ci5raWxsKDEpOnIucmV2ZXJ0KCEwLCEwKSk7dCYmSWIodCksdHx8SChcInJldmVydFwiKX1mdW5jdGlvbiBLYihlLHQpe0xlLmNhY2hlKyssIXQmJnV0fHxMZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBLYShlKSYmZS5jYWNoZUlEKysmJihlLnJlYz0wKX0pLEphKGUpJiYoV2UuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbj14PWUpfWZ1bmN0aW9uIFhiKGUsdCxyLG4pe2lmKCFlLl9nc2FwLnN3YXBwZWRJbil7Zm9yKHZhciBvLGk9VS5sZW5ndGgsYT10LnN0eWxlLHM9ZS5zdHlsZTtpLS07KWFbbz1VW2ldXT1yW29dO2EucG9zaXRpb249XCJhYnNvbHV0ZVwiPT09ci5wb3NpdGlvbj9cImFic29sdXRlXCI6XCJyZWxhdGl2ZVwiLFwiaW5saW5lXCI9PT1yLmRpc3BsYXkmJihhLmRpc3BsYXk9XCJpbmxpbmUtYmxvY2tcIiksc1tUXT1zW19dPVwiYXV0b1wiLGEuZmxleEJhc2lzPXIuZmxleEJhc2lzfHxcImF1dG9cIixhLm92ZXJmbG93PVwidmlzaWJsZVwiLGEuYm94U2l6aW5nPVwiYm9yZGVyLWJveFwiLGFbbXRdPWhiKGUsSmUpK0V0LGFbeXRdPWhiKGUsTmUpK0V0LGFbVHRdPXNba3RdPXMudG9wPXMubGVmdD1cIjBcIixSdChuKSxzW210XT1zLm1heFdpZHRoPXJbbXRdLHNbeXRdPXMubWF4SGVpZ2h0PXJbeXRdLHNbVHRdPXJbVHRdLGUucGFyZW50Tm9kZSE9PXQmJihlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsZSksdC5hcHBlbmRDaGlsZChlKSksZS5fZ3NhcC5zd2FwcGVkSW49ITB9fWZ1bmN0aW9uICRiKGUpe2Zvcih2YXIgdD1HLmxlbmd0aCxyPWUuc3R5bGUsbj1bXSxvPTA7bzx0O28rKyluLnB1c2goR1tvXSxyW0dbb11dKTtyZXR1cm4gbi50PWUsbn1mdW5jdGlvbiBiYyhlLHQscixuLG8saSxhLHMsbCxjLHUsZixkKXtLYShlKSYmKGU9ZShzKSksSmEoZSkmJlwibWF4XCI9PT1lLnN1YnN0cigwLDMpJiYoZT1mKyhcIj1cIj09PWUuY2hhckF0KDQpP3RiKFwiMFwiK2Uuc3Vic3RyKDMpLHIpOjApKTt2YXIgcCxnLGgsdj1kP2QudGltZSgpOjA7aWYoZCYmZC5zZWVrKDApLExhKGUpKWEmJlIoYSxyLG4sITApO2Vsc2V7S2EodCkmJih0PXQocykpO3ZhciBiLG0seSx4LFM9KGV8fFwiMFwiKS5zcGxpdChcIiBcIik7aD1JKHQpfHxHZSwoYj1NdChoKXx8e30pJiYoYi5sZWZ0fHxiLnRvcCl8fFwibm9uZVwiIT09ZGIoaCkuZGlzcGxheXx8KHg9aC5zdHlsZS5kaXNwbGF5LGguc3R5bGUuZGlzcGxheT1cImJsb2NrXCIsYj1NdChoKSx4P2guc3R5bGUuZGlzcGxheT14Omguc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJkaXNwbGF5XCIpKSxtPXRiKFNbMF0sYltuLmRdKSx5PXRiKFNbMV18fFwiMFwiLHIpLGU9YltuLnBdLWxbbi5wXS1jK20rby15LGEmJlIoYSx5LG4sci15PDIwfHxhLl9pc1N0YXJ0JiYyMDx5KSxyLT1yLXl9aWYoaSl7dmFyIHc9ZStyLF89aS5faXNTdGFydDtwPVwic2Nyb2xsXCIrbi5kMixSKGksdyxuLF8mJjIwPHd8fCFfJiYodT9NYXRoLm1heChHZVtwXSxxZVtwXSk6aS5wYXJlbnROb2RlW3BdKTw9dysxKSx1JiYobD1NdChhKSx1JiYoaS5zdHlsZVtuLm9wLnBdPWxbbi5vcC5wXS1uLm9wLm0taS5fb2Zmc2V0K0V0KSl9cmV0dXJuIGQmJmgmJihwPU10KGgpLGQuc2VlayhmKSxnPU10KGgpLGQuX2NhU2Nyb2xsRGlzdD1wW24ucF0tZ1tuLnBdLGU9ZS9kLl9jYVNjcm9sbERpc3QqZiksZCYmZC5zZWVrKHYpLGQ/ZTpNYXRoLnJvdW5kKGUpfWZ1bmN0aW9uIGRjKGUsdCxyLG4pe2lmKGUucGFyZW50Tm9kZSE9PXQpe3ZhciBvLGksYT1lLnN0eWxlO2lmKHQ9PT1HZSl7Zm9yKG8gaW4gZS5fc3RPcmlnPWEuY3NzVGV4dCxpPWRiKGUpKStvfHxRLnRlc3Qobyl8fCFpW29dfHxcInN0cmluZ1wiIT10eXBlb2YgYVtvXXx8XCIwXCI9PT1vfHwoYVtvXT1pW29dKTthLnRvcD1yLGEubGVmdD1ufWVsc2UgYS5jc3NUZXh0PWUuX3N0T3JpZztLZS5jb3JlLmdldENhY2hlKGUpLnVuY2FjaGU9MSx0LmFwcGVuZENoaWxkKGUpfX1mdW5jdGlvbiBlYyhsLGUpe2Z1bmN0aW9uIFNqKGUsdCxyLG4sbyl7dmFyIGk9U2oudHdlZW4sYT10Lm9uQ29tcGxldGUscz17fTtyZXR1cm4gcj1yfHxmKCksbz1uJiZvfHwwLG49bnx8ZS1yLGkmJmkua2lsbCgpLGM9TWF0aC5yb3VuZChyKSx0W2RdPWUsKHQubW9kaWZpZXJzPXMpW2RdPWZ1bmN0aW9uKGUpe3JldHVybihlPU1hdGgucm91bmQoZigpKSkhPT1jJiZlIT09dSYmMzxNYXRoLmFicyhlLWMpJiYzPE1hdGguYWJzKGUtdSk/KGkua2lsbCgpLFNqLnR3ZWVuPTApOmU9cituKmkucmF0aW8rbyppLnJhdGlvKmkucmF0aW8sdT1jLGM9TWF0aC5yb3VuZChlKX0sdC5vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7U2oudHdlZW49MCxhJiZhLmNhbGwoaSl9LGk9U2oudHdlZW49S2UudG8obCx0KX12YXIgYyx1LGY9SihsLGUpLGQ9XCJfc2Nyb2xsXCIrZS5wMjtyZXR1cm4obFtkXT1mKS53aGVlbEhhbmRsZXI9ZnVuY3Rpb24oKXtyZXR1cm4gU2oudHdlZW4mJlNqLnR3ZWVuLmtpbGwoKSYmKFNqLnR3ZWVuPTApfSxuYihsLFwid2hlZWxcIixmLndoZWVsSGFuZGxlciksU2p9dmFyIEtlLGEsV2UsamUscWUsR2UscyxsLGV0LHR0LHJ0LGMsbnQsb3QsdSxpdCxmLGQscCxhdCxzdCxnLGgsdixiLG0sUCxsdCx4LGN0LFMsdXQsZnQsZHQscHQ9MSxndD1EYXRlLm5vdyx3PWd0KCksaHQ9MCx2dD0wLGJ0PU1hdGguYWJzLF89XCJyaWdodFwiLFQ9XCJib3R0b21cIixtdD1cIndpZHRoXCIseXQ9XCJoZWlnaHRcIix4dD1cIlJpZ2h0XCIsU3Q9XCJMZWZ0XCIsd3Q9XCJUb3BcIixfdD1cIkJvdHRvbVwiLFR0PVwicGFkZGluZ1wiLGt0PVwibWFyZ2luXCIsQXQ9XCJXaWR0aFwiLEM9XCJIZWlnaHRcIixFdD1cInB4XCIsTXQ9ZnVuY3Rpb24gX2dldEJvdW5kcyhlLHQpe3ZhciByPXQmJlwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIhPT1kYihlKVt1XSYmS2UudG8oZSx7eDowLHk6MCx4UGVyY2VudDowLHlQZXJjZW50OjAscm90YXRpb246MCxyb3RhdGlvblg6MCxyb3RhdGlvblk6MCxzY2FsZToxLHNrZXdYOjAsc2tld1k6MH0pLnByb2dyZXNzKDEpLG49ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtyZXR1cm4gciYmci5wcm9ncmVzcygwKS5raWxsKCksbn0sUHQ9e3N0YXJ0Q29sb3I6XCJncmVlblwiLGVuZENvbG9yOlwicmVkXCIsaW5kZW50OjAsZm9udFNpemU6XCIxNnB4XCIsZm9udFdlaWdodDpcIm5vcm1hbFwifSxDdD17dG9nZ2xlQWN0aW9uczpcInBsYXlcIixhbnRpY2lwYXRlUGluOjB9LEQ9e3RvcDowLGxlZnQ6MCxjZW50ZXI6LjUsYm90dG9tOjEscmlnaHQ6MX0sUj1mdW5jdGlvbiBfcG9zaXRpb25NYXJrZXIoZSx0LHIsbil7dmFyIG89e2Rpc3BsYXk6XCJibG9ja1wifSxpPXJbbj9cIm9zMlwiOlwicDJcIl0sYT1yW24/XCJwMlwiOlwib3MyXCJdO2UuX2lzRmxpcHBlZD1uLG9bci5hK1wiUGVyY2VudFwiXT1uPy0xMDA6MCxvW3IuYV09bj9cIjFweFwiOjAsb1tcImJvcmRlclwiK2krQXRdPTEsb1tcImJvcmRlclwiK2ErQXRdPTAsb1tyLnBdPXQrXCJweFwiLEtlLnNldChlLG8pfSxPdD1bXSxEdD17fSxYPXt9LFk9W10sSD1mdW5jdGlvbiBfZGlzcGF0Y2goZSl7cmV0dXJuIFhbZV0mJlhbZV0ubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlKCl9KXx8WX0sVj1bXSxJdD0wLHp0PWZ1bmN0aW9uIF9yZWZyZXNoQWxsKGUsdCl7aWYoIWh0fHxlKXt1dD1aLmlzUmVmcmVzaGluZz0hMCxMZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBLYShlKSYmZS5jYWNoZUlEKysmJihlLnJlYz1lKCkpfSk7dmFyIHI9SChcInJlZnJlc2hJbml0XCIpO2F0JiZaLnNvcnQoKSx0fHxKYigpLExlLmZvckVhY2goZnVuY3Rpb24oZSl7S2EoZSkmJihlLnNtb290aCYmKGUudGFyZ2V0LnN0eWxlLnNjcm9sbEJlaGF2aW9yPVwiYXV0b1wiKSxlKDApKX0pLE90LnNsaWNlKDApLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVmcmVzaCgpfSksT3QuZm9yRWFjaChmdW5jdGlvbihlLHQpe2lmKGUuX3N1YlBpbk9mZnNldCYmZS5waW4pe3ZhciByPWUudmFycy5ob3Jpem9udGFsP1wib2Zmc2V0V2lkdGhcIjpcIm9mZnNldEhlaWdodFwiLG49ZS5waW5bcl07ZS5yZXZlcnQoITAsMSksZS5hZGp1c3RQaW5TcGFjaW5nKGUucGluW3JdLW4pLGUucmV2ZXJ0KCExLDEpfX0pLE90LmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuXCJtYXhcIj09PWUudmFycy5lbmQmJmUuc2V0UG9zaXRpb25zKGUuc3RhcnQsTWF0aC5tYXgoZS5zdGFydCsxLEhhKGUuc2Nyb2xsZXIsZS5fZGlyKSkpfSksci5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLnJlbmRlciYmZS5yZW5kZXIoLTEpfSksTGUuZm9yRWFjaChmdW5jdGlvbihlKXtLYShlKSYmKGUuc21vb3RoJiZyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKXtyZXR1cm4gZS50YXJnZXQuc3R5bGUuc2Nyb2xsQmVoYXZpb3I9XCJzbW9vdGhcIn0pLGUucmVjJiZlKGUucmVjKSl9KSxLYih4LDEpLGwucGF1c2UoKSxJdCsrLGooMiksT3QuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gS2EoZS52YXJzLm9uUmVmcmVzaCkmJmUudmFycy5vblJlZnJlc2goZSl9KSx1dD1aLmlzUmVmcmVzaGluZz0hMSxIKFwicmVmcmVzaFwiKX1lbHNlIG5iKFosXCJzY3JvbGxFbmRcIixGYil9LFc9MCxCdD0xLGo9ZnVuY3Rpb24gX3VwZGF0ZUFsbChlKXtpZighdXR8fDI9PT1lKXtaLmlzVXBkYXRpbmc9ITAsZHQmJmR0LnVwZGF0ZSgwKTt2YXIgdD1PdC5sZW5ndGgscj1ndCgpLG49NTA8PXItdyxvPXQmJk90WzBdLnNjcm9sbCgpO2lmKEJ0PW88Vz8tMToxLFc9byxuJiYoaHQmJiFvdCYmMjAwPHItaHQmJihodD0wLEgoXCJzY3JvbGxFbmRcIikpLHJ0PXcsdz1yKSxCdDwwKXtmb3IoaXQ9dDswPGl0LS07KU90W2l0XSYmT3RbaXRdLnVwZGF0ZSgwLG4pO0J0PTF9ZWxzZSBmb3IoaXQ9MDtpdDx0O2l0KyspT3RbaXRdJiZPdFtpdF0udXBkYXRlKDAsbik7Wi5pc1VwZGF0aW5nPSExfVM9MH0sVT1bXCJsZWZ0XCIsXCJ0b3BcIixULF8sa3QrX3Qsa3QreHQsa3Qrd3Qsa3QrU3QsXCJkaXNwbGF5XCIsXCJmbGV4U2hyaW5rXCIsXCJmbG9hdFwiLFwiekluZGV4XCIsXCJncmlkQ29sdW1uU3RhcnRcIixcImdyaWRDb2x1bW5FbmRcIixcImdyaWRSb3dTdGFydFwiLFwiZ3JpZFJvd0VuZFwiLFwiZ3JpZEFyZWFcIixcImp1c3RpZnlTZWxmXCIsXCJhbGlnblNlbGZcIixcInBsYWNlU2VsZlwiLFwib3JkZXJcIl0sRz1VLmNvbmNhdChbbXQseXQsXCJib3hTaXppbmdcIixcIm1heFwiK0F0LFwibWF4XCIrQyxcInBvc2l0aW9uXCIsa3QsVHQsVHQrd3QsVHQreHQsVHQrX3QsVHQrU3RdKSwkPS8oW0EtWl0pL2csUnQ9ZnVuY3Rpb24gX3NldFN0YXRlKGUpe2lmKGUpe3ZhciB0LHIsbj1lLnQuc3R5bGUsbz1lLmxlbmd0aCxpPTA7Zm9yKChlLnQuX2dzYXB8fEtlLmNvcmUuZ2V0Q2FjaGUoZS50KSkudW5jYWNoZT0xO2k8bztpKz0yKXI9ZVtpKzFdLHQ9ZVtpXSxyP25bdF09cjpuW3RdJiZuLnJlbW92ZVByb3BlcnR5KHQucmVwbGFjZSgkLFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpfX0sWHQ9e2xlZnQ6MCx0b3A6MH0sUT0vKHdlYmtpdHxtb3p8bGVuZ3RofGNzc1RleHR8aW5zZXQpL2ksWj0oU2Nyb2xsVHJpZ2dlci5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbiBpbml0KF8sVCl7aWYodGhpcy5wcm9ncmVzcz10aGlzLnN0YXJ0PTAsdGhpcy52YXJzJiZ0aGlzLmtpbGwoITAsITApLHZ0KXt2YXIgayxuLHAsQSxFLE0sUCxDLE8sRCx6LGUsQixSLFgsTCxGLHQsWSxiLEgsTixtLEsseCxTLHIsdyxWLFcsbyxnLGoscSxVLEcsJCxpLFE9KF89ZmIoSmEoXyl8fExhKF8pfHxfLm5vZGVUeXBlP3t0cmlnZ2VyOl99Ol8sQ3QpKS5vblVwZGF0ZSxaPV8udG9nZ2xlQ2xhc3MsYT1fLmlkLGVlPV8ub25Ub2dnbGUsdGU9Xy5vblJlZnJlc2gscmU9Xy5zY3J1YixuZT1fLnRyaWdnZXIsb2U9Xy5waW4saWU9Xy5waW5TcGFjaW5nLGFlPV8uaW52YWxpZGF0ZU9uUmVmcmVzaCxzZT1fLmFudGljaXBhdGVQaW4scz1fLm9uU2NydWJDb21wbGV0ZSxoPV8ub25TbmFwQ29tcGxldGUsbGU9Xy5vbmNlLGNlPV8uc25hcCx1ZT1fLnBpblJlcGFyZW50LGw9Xy5waW5TcGFjZXIsZmU9Xy5jb250YWluZXJBbmltYXRpb24sZGU9Xy5mYXN0U2Nyb2xsRW5kLHBlPV8ucHJldmVudE92ZXJsYXBzLGdlPV8uaG9yaXpvbnRhbHx8Xy5jb250YWluZXJBbmltYXRpb24mJiExIT09Xy5ob3Jpem9udGFsP0plOk5lLGhlPSFyZSYmMCE9PXJlLHZlPUkoXy5zY3JvbGxlcnx8V2UpLGM9S2UuY29yZS5nZXRDYWNoZSh2ZSksYmU9RGEodmUpLG1lPVwiZml4ZWRcIj09PShcInBpblR5cGVcImluIF8/Xy5waW5UeXBlOnkodmUsXCJwaW5UeXBlXCIpfHxiZSYmXCJmaXhlZFwiKSx5ZT1bXy5vbkVudGVyLF8ub25MZWF2ZSxfLm9uRW50ZXJCYWNrLF8ub25MZWF2ZUJhY2tdLHhlPWhlJiZfLnRvZ2dsZUFjdGlvbnMuc3BsaXQoXCIgXCIpLHU9XCJtYXJrZXJzXCJpbiBfP18ubWFya2VyczpDdC5tYXJrZXJzLFNlPWJlPzA6cGFyc2VGbG9hdChkYih2ZSlbXCJib3JkZXJcIitnZS5wMitBdF0pfHwwLHdlPXRoaXMsX2U9Xy5vblJlZnJlc2hJbml0JiZmdW5jdGlvbigpe3JldHVybiBfLm9uUmVmcmVzaEluaXQod2UpfSxUZT1mdW5jdGlvbiBfZ2V0U2l6ZUZ1bmMoZSx0LHIpe3ZhciBuPXIuZCxvPXIuZDIsaT1yLmE7cmV0dXJuKGk9eShlLFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIpKT9mdW5jdGlvbigpe3JldHVybiBpKClbbl19OmZ1bmN0aW9uKCl7cmV0dXJuKHQ/V2VbXCJpbm5lclwiK29dOmVbXCJjbGllbnRcIitvXSl8fDB9fSh2ZSxiZSxnZSksa2U9ZnVuY3Rpb24gX2dldE9mZnNldHNGdW5jKGUsdCl7cmV0dXJuIXR8fH5GZS5pbmRleE9mKGUpP0VhKGUpOmZ1bmN0aW9uKCl7cmV0dXJuIFh0fX0odmUsYmUpLEFlPTAsRWU9MCxNZT1KKHZlLGdlKTtpZihsdCh3ZSksd2UuX2Rpcj1nZSxzZSo9NDUsd2Uuc2Nyb2xsZXI9dmUsd2Uuc2Nyb2xsPWZlP2ZlLnRpbWUuYmluZChmZSk6TWUsQT1NZSgpLHdlLnZhcnM9XyxUPVR8fF8uYW5pbWF0aW9uLFwicmVmcmVzaFByaW9yaXR5XCJpbiBfJiYoYXQ9MSwtOTk5OT09PV8ucmVmcmVzaFByaW9yaXR5JiYoZHQ9d2UpKSxjLnR3ZWVuU2Nyb2xsPWMudHdlZW5TY3JvbGx8fHt0b3A6ZWModmUsTmUpLGxlZnQ6ZWModmUsSmUpfSx3ZS50d2VlblRvPWs9Yy50d2VlblNjcm9sbFtnZS5wXSx3ZS5zY3J1YkR1cmF0aW9uPWZ1bmN0aW9uKGUpeyhvPUxhKGUpJiZlKT9XP1cuZHVyYXRpb24oZSk6Vz1LZS50byhULHtlYXNlOlwiZXhwb1wiLHRvdGFsUHJvZ3Jlc3M6XCIrPTAuMDAxXCIsZHVyYXRpb246byxwYXVzZWQ6ITAsb25Db21wbGV0ZTpmdW5jdGlvbiBvbkNvbXBsZXRlKCl7cmV0dXJuIHMmJnMod2UpfX0pOihXJiZXLnByb2dyZXNzKDEpLmtpbGwoKSxXPTApfSxUJiYoVC52YXJzLmxhenk9ITEsVC5faW5pdHRlZHx8ITEhPT1ULnZhcnMuaW1tZWRpYXRlUmVuZGVyJiYhMSE9PV8uaW1tZWRpYXRlUmVuZGVyJiZULmR1cmF0aW9uKCkmJlQucmVuZGVyKDAsITAsITApLHdlLmFuaW1hdGlvbj1ULnBhdXNlKCksKFQuc2Nyb2xsVHJpZ2dlcj13ZSkuc2NydWJEdXJhdGlvbihyZSksdz0wLGE9YXx8VC52YXJzLmlkKSxPdC5wdXNoKHdlKSxjZSYmKE1hKGNlKSYmIWNlLnB1c2h8fChjZT17c25hcFRvOmNlfSksXCJzY3JvbGxCZWhhdmlvclwiaW4gR2Uuc3R5bGUmJktlLnNldChiZT9bR2UscWVdOnZlLHtzY3JvbGxCZWhhdmlvcjpcImF1dG9cIn0pLExlLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIEthKGUpJiZlLnRhcmdldD09PShiZT9qZS5zY3JvbGxpbmdFbGVtZW50fHxxZTp2ZSkmJihlLnNtb290aD0hMSl9KSxwPUthKGNlLnNuYXBUbyk/Y2Uuc25hcFRvOlwibGFiZWxzXCI9PT1jZS5zbmFwVG8/ZnVuY3Rpb24gX2dldENsb3Nlc3RMYWJlbCh0KXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIEtlLnV0aWxzLnNuYXAoaWIodCksZSl9fShUKTpcImxhYmVsc0RpcmVjdGlvbmFsXCI9PT1jZS5zbmFwVG8/ZnVuY3Rpb24gX2dldExhYmVsQXREaXJlY3Rpb24ocil7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGtiKGliKHIpKShlLHQuZGlyZWN0aW9uKX19KFQpOiExIT09Y2UuZGlyZWN0aW9uYWw/ZnVuY3Rpb24oZSx0KXtyZXR1cm4ga2IoY2Uuc25hcFRvKShlLGd0KCktRWU8NTAwPzA6dC5kaXJlY3Rpb24pfTpLZS51dGlscy5zbmFwKGNlLnNuYXBUbyksZz1jZS5kdXJhdGlvbnx8e21pbjouMSxtYXg6Mn0sZz1NYShnKT90dChnLm1pbixnLm1heCk6dHQoZyxnKSxqPUtlLmRlbGF5ZWRDYWxsKGNlLmRlbGF5fHxvLzJ8fC4xLGZ1bmN0aW9uKCl7dmFyIGU9TWUoKSx0PWd0KCktRWU8NTAwLHI9ay50d2VlbjtpZighKHR8fE1hdGguYWJzKHdlLmdldFZlbG9jaXR5KCkpPDEwKXx8cnx8b3R8fEFlPT09ZSl3ZS5pc0FjdGl2ZSYmQWUhPT1lJiZqLnJlc3RhcnQoITApO2Vsc2V7dmFyIG49KGUtTSkvQixvPVQmJiFoZT9ULnRvdGFsUHJvZ3Jlc3MoKTpuLGk9dD8wOihvLVYpLyhndCgpLXJ0KSoxZTN8fDAsYT1LZS51dGlscy5jbGFtcCgtbiwxLW4sYnQoaS8yKSppLy4xODUpLHM9bisoITE9PT1jZS5pbmVydGlhPzA6YSksbD10dCgwLDEscChzLHdlKSksYz1NYXRoLnJvdW5kKE0rbCpCKSx1PWNlLm9uU3RhcnQsZj1jZS5vbkludGVycnVwdCxkPWNlLm9uQ29tcGxldGU7aWYoZTw9UCYmTTw9ZSYmYyE9PWUpe2lmKHImJiFyLl9pbml0dGVkJiZyLmRhdGE8PWJ0KGMtZSkpcmV0dXJuOyExPT09Y2UuaW5lcnRpYSYmKGE9bC1uKSxrKGMse2R1cmF0aW9uOmcoYnQoLjE4NSpNYXRoLm1heChidChzLW8pLGJ0KGwtbykpL2kvLjA1fHwwKSksZWFzZTpjZS5lYXNlfHxcInBvd2VyM1wiLGRhdGE6YnQoYy1lKSxvbkludGVycnVwdDpmdW5jdGlvbiBvbkludGVycnVwdCgpe3JldHVybiBqLnJlc3RhcnQoITApJiZmJiZmKHdlKX0sb25Db21wbGV0ZTpmdW5jdGlvbiBvbkNvbXBsZXRlKCl7d2UudXBkYXRlKCksQWU9TWUoKSx3PVY9VCYmIWhlP1QudG90YWxQcm9ncmVzcygpOndlLnByb2dyZXNzLGgmJmgod2UpLGQmJmQod2UpfX0sZSxhKkIsYy1lLWEqQiksdSYmdSh3ZSxrLnR3ZWVuKX19fSkucGF1c2UoKSksYSYmKER0W2FdPXdlKSxpPShpPShuZT13ZS50cmlnZ2VyPUkobmV8fG9lKSkmJm5lLl9nc2FwJiZuZS5fZ3NhcC5zdFJldmVydCkmJmkod2UpLG9lPSEwPT09b2U/bmU6SShvZSksSmEoWikmJihaPXt0YXJnZXRzOm5lLGNsYXNzTmFtZTpafSksb2UmJighMT09PWllfHxpZT09PWt0fHwoaWU9ISghaWUmJm9lLnBhcmVudE5vZGUmJm9lLnBhcmVudE5vZGUuc3R5bGUmJlwiZmxleFwiPT09ZGIob2UucGFyZW50Tm9kZSkuZGlzcGxheSkmJlR0KSx3ZS5waW49b2UsKG49S2UuY29yZS5nZXRDYWNoZShvZSkpLnNwYWNlcj9SPW4ucGluU3RhdGU6KGwmJigobD1JKGwpKSYmIWwubm9kZVR5cGUmJihsPWwuY3VycmVudHx8bC5uYXRpdmVFbGVtZW50KSxuLnNwYWNlcklzTmF0aXZlPSEhbCxsJiYobi5zcGFjZXJTdGF0ZT0kYihsKSkpLG4uc3BhY2VyPUY9bHx8amUuY3JlYXRlRWxlbWVudChcImRpdlwiKSxGLmNsYXNzTGlzdC5hZGQoXCJwaW4tc3BhY2VyXCIpLGEmJkYuY2xhc3NMaXN0LmFkZChcInBpbi1zcGFjZXItXCIrYSksbi5waW5TdGF0ZT1SPSRiKG9lKSksITEhPT1fLmZvcmNlM0QmJktlLnNldChvZSx7Zm9yY2UzRDohMH0pLHdlLnNwYWNlcj1GPW4uc3BhY2VyLHI9ZGIob2UpLG09cltpZStnZS5vczJdLFk9S2UuZ2V0UHJvcGVydHkob2UpLGI9S2UucXVpY2tTZXR0ZXIob2UsZ2UuYSxFdCksWGIob2UsRixyKSxMPSRiKG9lKSksdSl7ZT1NYSh1KT9mYih1LFB0KTpQdCxEPXViKFwic2Nyb2xsZXItc3RhcnRcIixhLHZlLGdlLGUsMCksej11YihcInNjcm9sbGVyLWVuZFwiLGEsdmUsZ2UsZSwwLEQpLHQ9RFtcIm9mZnNldFwiK2dlLm9wLmQyXTt2YXIgZj1JKHkodmUsXCJjb250ZW50XCIpfHx2ZSk7Qz10aGlzLm1hcmtlclN0YXJ0PXViKFwic3RhcnRcIixhLGYsZ2UsZSx0LDAsZmUpLE89dGhpcy5tYXJrZXJFbmQ9dWIoXCJlbmRcIixhLGYsZ2UsZSx0LDAsZmUpLGZlJiYoJD1LZS5xdWlja1NldHRlcihbQyxPXSxnZS5hLEV0KSksbWV8fEZlLmxlbmd0aCYmITA9PT15KHZlLFwiZml4ZWRNYXJrZXJzXCIpfHwoZnVuY3Rpb24gX21ha2VQb3NpdGlvbmFibGUoZSl7dmFyIHQ9ZGIoZSkucG9zaXRpb247ZS5zdHlsZS5wb3NpdGlvbj1cImFic29sdXRlXCI9PT10fHxcImZpeGVkXCI9PT10P3Q6XCJyZWxhdGl2ZVwifShiZT9HZTp2ZSksS2Uuc2V0KFtELHpdLHtmb3JjZTNEOiEwfSkseD1LZS5xdWlja1NldHRlcihELGdlLmEsRXQpLFM9S2UucXVpY2tTZXR0ZXIoeixnZS5hLEV0KSl9aWYoZmUpe3ZhciBkPWZlLnZhcnMub25VcGRhdGUsdj1mZS52YXJzLm9uVXBkYXRlUGFyYW1zO2ZlLmV2ZW50Q2FsbGJhY2soXCJvblVwZGF0ZVwiLGZ1bmN0aW9uKCl7d2UudXBkYXRlKDAsMCwxKSxkJiZkLmFwcGx5KHZ8fFtdKX0pfXdlLnByZXZpb3VzPWZ1bmN0aW9uKCl7cmV0dXJuIE90W090LmluZGV4T2Yod2UpLTFdfSx3ZS5uZXh0PWZ1bmN0aW9uKCl7cmV0dXJuIE90W090LmluZGV4T2Yod2UpKzFdfSx3ZS5yZXZlcnQ9ZnVuY3Rpb24oZSx0KXtpZighdClyZXR1cm4gd2Uua2lsbCghMCk7dmFyIHI9ITEhPT1lfHwhd2UuZW5hYmxlZCxuPW50O3IhPT13ZS5pc1JldmVydGVkJiYociYmKFU9TWF0aC5tYXgoTWUoKSx3ZS5zY3JvbGwucmVjfHwwKSxxPXdlLnByb2dyZXNzLEc9VCYmVC5wcm9ncmVzcygpKSxDJiZbQyxPLEQsel0uZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5zdHlsZS5kaXNwbGF5PXI/XCJub25lXCI6XCJibG9ja1wifSksciYmKG50PTEsd2UudXBkYXRlKHIpKSxvZSYmKHI/ZnVuY3Rpb24gX3N3YXBQaW5PdXQoZSx0LHIpe1J0KHIpO3ZhciBuPWUuX2dzYXA7aWYobi5zcGFjZXJJc05hdGl2ZSlSdChuLnNwYWNlclN0YXRlKTtlbHNlIGlmKGUuX2dzYXAuc3dhcHBlZEluKXt2YXIgbz10LnBhcmVudE5vZGU7byYmKG8uaW5zZXJ0QmVmb3JlKGUsdCksby5yZW1vdmVDaGlsZCh0KSl9ZS5fZ3NhcC5zd2FwcGVkSW49ITF9KG9lLEYsUik6dWUmJndlLmlzQWN0aXZlfHxYYihvZSxGLGRiKG9lKSxLKSkscnx8d2UudXBkYXRlKHIpLG50PW4sd2UuaXNSZXZlcnRlZD1yKX0sd2UucmVmcmVzaD1mdW5jdGlvbihlLHQpe2lmKCFudCYmd2UuZW5hYmxlZHx8dClpZihvZSYmZSYmaHQpbmIoU2Nyb2xsVHJpZ2dlcixcInNjcm9sbEVuZFwiLEZiKTtlbHNleyF1dCYmX2UmJl9lKHdlKSxudD0xLEVlPWd0KCksay50d2VlbiYmKGsudHdlZW4ua2lsbCgpLGsudHdlZW49MCksVyYmVy5wYXVzZSgpLGFlJiZUJiZULnJldmVydCh7a2lsbDohMX0pLmludmFsaWRhdGUoKSx3ZS5pc1JldmVydGVkfHx3ZS5yZXZlcnQoITAsITApLHdlLl9zdWJQaW5PZmZzZXQ9ITE7Zm9yKHZhciByLG4sbyxpLGEscyxsLGMsdSxmLGQ9VGUoKSxwPWtlKCksZz1mZT9mZS5kdXJhdGlvbigpOkhhKHZlLGdlKSxoPTAsdj0wLGI9Xy5lbmQsbT1fLmVuZFRyaWdnZXJ8fG5lLHk9Xy5zdGFydHx8KDAhPT1fLnN0YXJ0JiZuZT9vZT9cIjAgMFwiOlwiMCAxMDAlXCI6MCkseD13ZS5waW5uZWRDb250YWluZXI9Xy5waW5uZWRDb250YWluZXImJkkoXy5waW5uZWRDb250YWluZXIpLFM9bmUmJk1hdGgubWF4KDAsT3QuaW5kZXhPZih3ZSkpfHwwLHc9Uzt3LS07KShzPU90W3ddKS5lbmR8fHMucmVmcmVzaCgwLDEpfHwobnQ9MSksIShsPXMucGluKXx8bCE9PW5lJiZsIT09b2V8fHMuaXNSZXZlcnRlZHx8KChmPWZ8fFtdKS51bnNoaWZ0KHMpLHMucmV2ZXJ0KCEwLCEwKSkscyE9PU90W3ddJiYoUy0tLHctLSk7Zm9yKEthKHkpJiYoeT15KHdlKSksTT1iYyh5LG5lLGQsZ2UsTWUoKSxDLEQsd2UscCxTZSxtZSxnLGZlKXx8KG9lPy0uMDAxOjApLEthKGIpJiYoYj1iKHdlKSksSmEoYikmJiFiLmluZGV4T2YoXCIrPVwiKSYmKH5iLmluZGV4T2YoXCIgXCIpP2I9KEphKHkpP3kuc3BsaXQoXCIgXCIpWzBdOlwiXCIpK2I6KGg9dGIoYi5zdWJzdHIoMiksZCksYj1KYSh5KT95Ok0raCxtPW5lKSksUD1NYXRoLm1heChNLGJjKGJ8fChtP1wiMTAwJSAwXCI6ZyksbSxkLGdlLE1lKCkraCxPLHosd2UscCxTZSxtZSxnLGZlKSl8fC0uMDAxLEI9UC1NfHwoTS09LjAxKSYmLjAwMSxoPTAsdz1TO3ctLTspKGw9KHM9T3Rbd10pLnBpbikmJnMuc3RhcnQtcy5fcGluUHVzaDw9TSYmIWZlJiYwPHMuZW5kJiYocj1zLmVuZC1zLnN0YXJ0LChsPT09bmUmJnMuc3RhcnQtcy5fcGluUHVzaDxNfHxsPT09eCkmJiFMYSh5KSYmKGgrPXIqKDEtcy5wcm9ncmVzcykpLGw9PT1vZSYmKHYrPXIpKTtpZihNKz1oLFArPWgsd2UuX3BpblB1c2g9dixDJiZoJiYoKHI9e30pW2dlLmFdPVwiKz1cIitoLHgmJihyW2dlLnBdPVwiLT1cIitNZSgpKSxLZS5zZXQoW0MsT10scikpLG9lKXI9ZGIob2UpLGk9Z2U9PT1OZSxvPU1lKCksSD1wYXJzZUZsb2F0KFkoZ2UuYSkpK3YsIWcmJjE8UCYmKChiZT9HZTp2ZSkuc3R5bGVbXCJvdmVyZmxvdy1cIitnZS5hXT1cInNjcm9sbFwiKSxYYihvZSxGLHIpLEw9JGIob2UpLG49TXQob2UsITApLGM9bWUmJkoodmUsaT9KZTpOZSkoKSxpZSYmKChLPVtpZStnZS5vczIsQit2K0V0XSkudD1GLCh3PWllPT09VHQ/aGIob2UsZ2UpK0IrdjowKSYmSy5wdXNoKGdlLmQsdytFdCksUnQoSykseCYmT3QuZm9yRWFjaChmdW5jdGlvbihlKXtlLnBpbj09PXgmJiExIT09ZS52YXJzLnBpblNwYWNpbmcmJihlLl9zdWJQaW5PZmZzZXQ9ITApfSksbWUmJk1lKFUpKSxtZSYmKChhPXt0b3A6bi50b3ArKGk/by1NOmMpK0V0LGxlZnQ6bi5sZWZ0KyhpP2M6by1NKStFdCxib3hTaXppbmc6XCJib3JkZXItYm94XCIscG9zaXRpb246XCJmaXhlZFwifSlbbXRdPWEubWF4V2lkdGg9TWF0aC5jZWlsKG4ud2lkdGgpK0V0LGFbeXRdPWEubWF4SGVpZ2h0PU1hdGguY2VpbChuLmhlaWdodCkrRXQsYVtrdF09YVtrdCt3dF09YVtrdCt4dF09YVtrdCtfdF09YVtrdCtTdF09XCIwXCIsYVtUdF09cltUdF0sYVtUdCt3dF09cltUdCt3dF0sYVtUdCt4dF09cltUdCt4dF0sYVtUdCtfdF09cltUdCtfdF0sYVtUdCtTdF09cltUdCtTdF0sWD1mdW5jdGlvbiBfY29weVN0YXRlKGUsdCxyKXtmb3IodmFyIG4sbz1bXSxpPWUubGVuZ3RoLGE9cj84OjA7YTxpO2ErPTIpbj1lW2FdLG8ucHVzaChuLG4gaW4gdD90W25dOmVbYSsxXSk7cmV0dXJuIG8udD1lLnQsb30oUixhLHVlKSx1dCYmTWUoMCkpLFQ/KHU9VC5faW5pdHRlZCxzdCgxKSxULnJlbmRlcihULmR1cmF0aW9uKCksITAsITApLE49WShnZS5hKS1IK0IrdixCIT09TiYmbWUmJlguc3BsaWNlKFgubGVuZ3RoLTIsMiksVC5yZW5kZXIoMCwhMCwhMCksdXx8VC5pbnZhbGlkYXRlKCEwKSxULnBhcmVudHx8VC50b3RhbFRpbWUoVC50b3RhbFRpbWUoKSksc3QoMCkpOk49QjtlbHNlIGlmKG5lJiZNZSgpJiYhZmUpZm9yKG49bmUucGFyZW50Tm9kZTtuJiZuIT09R2U7KW4uX3Bpbk9mZnNldCYmKE0tPW4uX3Bpbk9mZnNldCxQLT1uLl9waW5PZmZzZXQpLG49bi5wYXJlbnROb2RlO2YmJmYuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXZlcnQoITEsITApfSksd2Uuc3RhcnQ9TSx3ZS5lbmQ9UCxBPUU9dXQ/VTpNZSgpLGZlfHx1dHx8KEE8VSYmTWUoVSksd2Uuc2Nyb2xsLnJlYz0wKSx3ZS5yZXZlcnQoITEsITApLGomJihBZT0tMSx3ZS5pc0FjdGl2ZSYmTWUoTStCKnEpLGoucmVzdGFydCghMCkpLG50PTAsVCYmaGUmJihULl9pbml0dGVkfHxHKSYmVC5wcm9ncmVzcygpIT09RyYmVC5wcm9ncmVzcyhHLCEwKS5yZW5kZXIoVC50aW1lKCksITAsITApLHE9PT13ZS5wcm9ncmVzcyYmIWZlfHwoVCYmIWhlJiZULnRvdGFsUHJvZ3Jlc3MocSwhMCksd2UucHJvZ3Jlc3M9KEEtTSkvQj09PXE/MDpxKSxvZSYmaWUmJihGLl9waW5PZmZzZXQ9TWF0aC5yb3VuZCh3ZS5wcm9ncmVzcypOKSksdGUmJiF1dCYmdGUod2UpfX0sd2UuZ2V0VmVsb2NpdHk9ZnVuY3Rpb24oKXtyZXR1cm4oTWUoKS1FKS8oZ3QoKS1ydCkqMWUzfHwwfSx3ZS5lbmRBbmltYXRpb249ZnVuY3Rpb24oKXtOYSh3ZS5jYWxsYmFja0FuaW1hdGlvbiksVCYmKFc/Vy5wcm9ncmVzcygxKTpULnBhdXNlZCgpP2hlfHxOYShULHdlLmRpcmVjdGlvbjwwLDEpOk5hKFQsVC5yZXZlcnNlZCgpKSl9LHdlLmxhYmVsVG9TY3JvbGw9ZnVuY3Rpb24oZSl7cmV0dXJuIFQmJlQubGFiZWxzJiYoTXx8d2UucmVmcmVzaCgpfHxNKStULmxhYmVsc1tlXS9ULmR1cmF0aW9uKCkqQnx8MH0sd2UuZ2V0VHJhaWxpbmc9ZnVuY3Rpb24odCl7dmFyIGU9T3QuaW5kZXhPZih3ZSkscj0wPHdlLmRpcmVjdGlvbj9PdC5zbGljZSgwLGUpLnJldmVyc2UoKTpPdC5zbGljZShlKzEpO3JldHVybihKYSh0KT9yLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS52YXJzLnByZXZlbnRPdmVybGFwcz09PXR9KTpyKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIDA8d2UuZGlyZWN0aW9uP2UuZW5kPD1NOmUuc3RhcnQ+PVB9KX0sd2UudXBkYXRlPWZ1bmN0aW9uKGUsdCxyKXtpZighZmV8fHJ8fGUpe3ZhciBuLG8saSxhLHMsbCxjLHU9dXQ/VTp3ZS5zY3JvbGwoKSxmPWU/MDoodS1NKS9CLGQ9ZjwwPzA6MTxmPzE6Znx8MCxwPXdlLnByb2dyZXNzO2lmKHQmJihFPUEsQT1mZT9NZSgpOnUsY2UmJihWPXcsdz1UJiYhaGU/VC50b3RhbFByb2dyZXNzKCk6ZCkpLHNlJiYhZCYmb2UmJiFudCYmIXB0JiZodCYmTTx1Kyh1LUUpLyhndCgpLXJ0KSpzZSYmKGQ9MWUtNCksZCE9PXAmJndlLmVuYWJsZWQpe2lmKGE9KHM9KG49d2UuaXNBY3RpdmU9ISFkJiZkPDEpIT0oISFwJiZwPDEpKXx8ISFkIT0hIXAsd2UuZGlyZWN0aW9uPXA8ZD8xOi0xLHdlLnByb2dyZXNzPWQsYSYmIW50JiYobz1kJiYhcD8wOjE9PT1kPzE6MT09PXA/MjozLGhlJiYoaT0hcyYmXCJub25lXCIhPT14ZVtvKzFdJiZ4ZVtvKzFdfHx4ZVtvXSxjPVQmJihcImNvbXBsZXRlXCI9PT1pfHxcInJlc2V0XCI9PT1pfHxpIGluIFQpKSkscGUmJihzfHxjKSYmKGN8fHJlfHwhVCkmJihLYShwZSk/cGUod2UpOndlLmdldFRyYWlsaW5nKHBlKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBlLmVuZEFuaW1hdGlvbigpfSkpLGhlfHwoIVd8fG50fHxwdD9UJiZULnRvdGFsUHJvZ3Jlc3MoZCwhIW50KTooKGZlfHxkdCYmZHQhPT13ZSkmJlcucmVuZGVyKFcuX2RwLl90aW1lLVcuX3N0YXJ0KSxXLnJlc2V0VG8/Vy5yZXNldFRvKFwidG90YWxQcm9ncmVzc1wiLGQsVC5fdFRpbWUvVC5fdER1cik6KFcudmFycy50b3RhbFByb2dyZXNzPWQsVy5pbnZhbGlkYXRlKCkucmVzdGFydCgpKSkpLG9lKWlmKGUmJmllJiYoRi5zdHlsZVtpZStnZS5vczJdPW0pLG1lKXtpZihhKXtpZihsPSFlJiZwPGQmJnU8UCsxJiZ1KzE+PUhhKHZlLGdlKSx1ZSlpZihlfHwhbiYmIWwpZGMob2UsRik7ZWxzZXt2YXIgZz1NdChvZSwhMCksaD11LU07ZGMob2UsR2UsZy50b3ArKGdlPT09TmU/aDowKStFdCxnLmxlZnQrKGdlPT09TmU/MDpoKStFdCl9UnQobnx8bD9YOkwpLE4hPT1CJiZkPDEmJm58fGIoSCsoMSE9PWR8fGw/MDpOKSl9fWVsc2UgYihBYShIK04qZCkpOyFjZXx8ay50d2Vlbnx8bnR8fHB0fHxqLnJlc3RhcnQoITApLFomJihzfHxsZSYmZCYmKGQ8MXx8IWN0KSkmJmV0KFoudGFyZ2V0cykuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5jbGFzc0xpc3Rbbnx8bGU/XCJhZGRcIjpcInJlbW92ZVwiXShaLmNsYXNzTmFtZSl9KSwhUXx8aGV8fGV8fFEod2UpLGEmJiFudD8oaGUmJihjJiYoXCJjb21wbGV0ZVwiPT09aT9ULnBhdXNlKCkudG90YWxQcm9ncmVzcygxKTpcInJlc2V0XCI9PT1pP1QucmVzdGFydCghMCkucGF1c2UoKTpcInJlc3RhcnRcIj09PWk/VC5yZXN0YXJ0KCEwKTpUW2ldKCkpLFEmJlEod2UpKSwhcyYmY3R8fChlZSYmcyYmT2Eod2UsZWUpLHllW29dJiZPYSh3ZSx5ZVtvXSksbGUmJigxPT09ZD93ZS5raWxsKCExLDEpOnllW29dPTApLHN8fHllW289MT09PWQ/MTozXSYmT2Eod2UseWVbb10pKSxkZSYmIW4mJk1hdGguYWJzKHdlLmdldFZlbG9jaXR5KCkpPihMYShkZSk/ZGU6MjUwMCkmJihOYSh3ZS5jYWxsYmFja0FuaW1hdGlvbiksVz9XLnByb2dyZXNzKDEpOk5hKFQsXCJyZXZlcnNlXCI9PT1pPzE6IWQsMSkpKTpoZSYmUSYmIW50JiZRKHdlKX1pZihTKXt2YXIgdj1mZT91L2ZlLmR1cmF0aW9uKCkqKGZlLl9jYVNjcm9sbERpc3R8fDApOnU7eCh2KyhELl9pc0ZsaXBwZWQ/MTowKSksUyh2KX0kJiYkKC11L2ZlLmR1cmF0aW9uKCkqKGZlLl9jYVNjcm9sbERpc3R8fDApKX19LHdlLmVuYWJsZT1mdW5jdGlvbihlLHQpe3dlLmVuYWJsZWR8fCh3ZS5lbmFibGVkPSEwLG5iKHZlLFwicmVzaXplXCIsQ2IpLG5iKGJlP2plOnZlLFwic2Nyb2xsXCIsQWIpLF9lJiZuYihTY3JvbGxUcmlnZ2VyLFwicmVmcmVzaEluaXRcIixfZSksITEhPT1lJiYod2UucHJvZ3Jlc3M9cT0wLEE9RT1BZT1NZSgpKSwhMSE9PXQmJndlLnJlZnJlc2goKSl9LHdlLmdldFR3ZWVuPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZrP2sudHdlZW46V30sd2Uuc2V0UG9zaXRpb25zPWZ1bmN0aW9uKGUsdCl7b2UmJihIKz1lLU0sTis9dC1lLUIsaWU9PT1UdCYmd2UuYWRqdXN0UGluU3BhY2luZyh0LWUtQikpLHdlLnN0YXJ0PU09ZSx3ZS5lbmQ9UD10LEI9dC1lLHdlLnVwZGF0ZSgpfSx3ZS5hZGp1c3RQaW5TcGFjaW5nPWZ1bmN0aW9uKGUpe2lmKEspe3ZhciB0PUsuaW5kZXhPZihnZS5kKSsxO0tbdF09cGFyc2VGbG9hdChLW3RdKStlK0V0LEtbMV09cGFyc2VGbG9hdChLWzFdKStlK0V0LFJ0KEspfX0sd2UuZGlzYWJsZT1mdW5jdGlvbihlLHQpe2lmKHdlLmVuYWJsZWQmJighMSE9PWUmJndlLnJldmVydCghMCwhMCksd2UuZW5hYmxlZD13ZS5pc0FjdGl2ZT0hMSx0fHxXJiZXLnBhdXNlKCksVT0wLG4mJihuLnVuY2FjaGU9MSksX2UmJm9iKFNjcm9sbFRyaWdnZXIsXCJyZWZyZXNoSW5pdFwiLF9lKSxqJiYoai5wYXVzZSgpLGsudHdlZW4mJmsudHdlZW4ua2lsbCgpJiYoay50d2Vlbj0wKSksIWJlKSl7Zm9yKHZhciByPU90Lmxlbmd0aDtyLS07KWlmKE90W3JdLnNjcm9sbGVyPT09dmUmJk90W3JdIT09d2UpcmV0dXJuO29iKHZlLFwicmVzaXplXCIsQ2IpLG9iKHZlLFwic2Nyb2xsXCIsQWIpfX0sd2Uua2lsbD1mdW5jdGlvbihlLHQpe3dlLmRpc2FibGUoZSx0KSxXJiYhdCYmVy5raWxsKCksYSYmZGVsZXRlIER0W2FdO3ZhciByPU90LmluZGV4T2Yod2UpOzA8PXImJk90LnNwbGljZShyLDEpLHI9PT1pdCYmMDxCdCYmaXQtLSxyPTAsT3QuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5zY3JvbGxlcj09PXdlLnNjcm9sbGVyJiYocj0xKX0pLHJ8fHV0fHwod2Uuc2Nyb2xsLnJlYz0wKSxUJiYoVC5zY3JvbGxUcmlnZ2VyPW51bGwsZSYmVC5yZXZlcnQoe2tpbGw6ITF9KSx0fHxULmtpbGwoKSksQyYmW0MsTyxELHpdLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGUucGFyZW50Tm9kZSYmZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpfSksZHQ9PT13ZSYmKGR0PTApLG9lJiYobiYmKG4udW5jYWNoZT0xKSxyPTAsT3QuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5waW49PT1vZSYmcisrfSkscnx8KG4uc3BhY2VyPTApKSxfLm9uS2lsbCYmXy5vbktpbGwod2UpfSx3ZS5lbmFibGUoITEsITEpLGkmJmkod2UpLFQmJlQuYWRkJiYhQj9LZS5kZWxheWVkQ2FsbCguMDEsZnVuY3Rpb24oKXtyZXR1cm4gTXx8UHx8d2UucmVmcmVzaCgpfSkmJihCPS4wMSkmJihNPVA9MCk6d2UucmVmcmVzaCgpLG9lJiZmdW5jdGlvbiBfcXVldWVSZWZyZXNoQWxsKCl7aWYoZnQhPT1JdCl7dmFyIGU9ZnQ9SXQ7cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCl7cmV0dXJuIGU9PT1JdCYmenQoITApfSl9fSgpfWVsc2UgdGhpcy51cGRhdGU9dGhpcy5yZWZyZXNoPXRoaXMua2lsbD16YX0sU2Nyb2xsVHJpZ2dlci5yZWdpc3Rlcj1mdW5jdGlvbiByZWdpc3RlcihlKXtyZXR1cm4gYXx8KEtlPWV8fENhKCksQmEoKSYmd2luZG93LmRvY3VtZW50JiZTY3JvbGxUcmlnZ2VyLmVuYWJsZSgpLGE9dnQpLGF9LFNjcm9sbFRyaWdnZXIuZGVmYXVsdHM9ZnVuY3Rpb24gZGVmYXVsdHMoZSl7aWYoZSlmb3IodmFyIHQgaW4gZSlDdFt0XT1lW3RdO3JldHVybiBDdH0sU2Nyb2xsVHJpZ2dlci5kaXNhYmxlPWZ1bmN0aW9uIGRpc2FibGUodCxyKXt2dD0wLE90LmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGVbcj9cImtpbGxcIjpcImRpc2FibGVcIl0odCl9KSxvYihXZSxcIndoZWVsXCIsQWIpLG9iKGplLFwic2Nyb2xsXCIsQWIpLGNsZWFySW50ZXJ2YWwoYyksb2IoamUsXCJ0b3VjaGNhbmNlbFwiLHphKSxvYihHZSxcInRvdWNoc3RhcnRcIix6YSksbWIob2IsamUsXCJwb2ludGVyZG93bix0b3VjaHN0YXJ0LG1vdXNlZG93blwiLHhhKSxtYihvYixqZSxcInBvaW50ZXJ1cCx0b3VjaGVuZCxtb3VzZXVwXCIseWEpLGwua2lsbCgpLElhKG9iKTtmb3IodmFyIGU9MDtlPExlLmxlbmd0aDtlKz0zKXBiKG9iLExlW2VdLExlW2UrMV0pLHBiKG9iLExlW2VdLExlW2UrMl0pfSxTY3JvbGxUcmlnZ2VyLmVuYWJsZT1mdW5jdGlvbiBlbmFibGUoKXtpZihXZT13aW5kb3csamU9ZG9jdW1lbnQscWU9amUuZG9jdW1lbnRFbGVtZW50LEdlPWplLmJvZHksS2UmJihldD1LZS51dGlscy50b0FycmF5LHR0PUtlLnV0aWxzLmNsYW1wLGx0PUtlLmNvcmUuY29udGV4dHx8emEsc3Q9S2UuY29yZS5zdXBwcmVzc092ZXJ3cml0ZXN8fHphLHg9V2UuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbnx8XCJhdXRvXCIsS2UuY29yZS5nbG9iYWxzKFwiU2Nyb2xsVHJpZ2dlclwiLFNjcm9sbFRyaWdnZXIpLEdlKSl7dnQ9MSxrLnJlZ2lzdGVyKEtlKSxTY3JvbGxUcmlnZ2VyLmlzVG91Y2g9ay5pc1RvdWNoLFA9ay5pc1RvdWNoJiYvKGlQYWR8aVBob25lfGlQb2R8TWFjKS9nLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksbmIoV2UsXCJ3aGVlbFwiLEFiKSxzPVtXZSxqZSxxZSxHZV0sS2UubWF0Y2hNZWRpYT8oU2Nyb2xsVHJpZ2dlci5tYXRjaE1lZGlhPWZ1bmN0aW9uKGUpe3ZhciB0LHI9S2UubWF0Y2hNZWRpYSgpO2Zvcih0IGluIGUpci5hZGQodCxlW3RdKTtyZXR1cm4gcn0sS2UuYWRkRXZlbnRMaXN0ZW5lcihcIm1hdGNoTWVkaWFJbml0XCIsZnVuY3Rpb24oKXtyZXR1cm4gSmIoKX0pLEtlLmFkZEV2ZW50TGlzdGVuZXIoXCJtYXRjaE1lZGlhUmV2ZXJ0XCIsZnVuY3Rpb24oKXtyZXR1cm4gSWIoKX0pLEtlLmFkZEV2ZW50TGlzdGVuZXIoXCJtYXRjaE1lZGlhXCIsZnVuY3Rpb24oKXt6dCgwLDEpLEgoXCJtYXRjaE1lZGlhXCIpfSksS2UubWF0Y2hNZWRpYShcIihvcmllbnRhdGlvbjogcG9ydHJhaXQpXCIsZnVuY3Rpb24oKXtyZXR1cm4gQmIoKSxCYn0pKTpjb25zb2xlLndhcm4oXCJSZXF1aXJlcyBHU0FQIDMuMTEuMCBvciBsYXRlclwiKSxCYigpLG5iKGplLFwic2Nyb2xsXCIsQWIpO3ZhciBlLHQscj1HZS5zdHlsZSxuPXIuYm9yZGVyVG9wU3R5bGUsbz1LZS5jb3JlLkFuaW1hdGlvbi5wcm90b3R5cGU7Zm9yKG8ucmV2ZXJ0fHxPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcInJldmVydFwiLHt2YWx1ZTpmdW5jdGlvbiB2YWx1ZSgpe3JldHVybiB0aGlzLnRpbWUoLS4wMSwhMCl9fSksci5ib3JkZXJUb3BTdHlsZT1cInNvbGlkXCIsZT1NdChHZSksTmUubT1NYXRoLnJvdW5kKGUudG9wK05lLnNjKCkpfHwwLEplLm09TWF0aC5yb3VuZChlLmxlZnQrSmUuc2MoKSl8fDAsbj9yLmJvcmRlclRvcFN0eWxlPW46ci5yZW1vdmVQcm9wZXJ0eShcImJvcmRlci10b3Atc3R5bGVcIiksYz1zZXRJbnRlcnZhbCh6YiwyNTApLEtlLmRlbGF5ZWRDYWxsKC41LGZ1bmN0aW9uKCl7cmV0dXJuIHB0PTB9KSxuYihqZSxcInRvdWNoY2FuY2VsXCIsemEpLG5iKEdlLFwidG91Y2hzdGFydFwiLHphKSxtYihuYixqZSxcInBvaW50ZXJkb3duLHRvdWNoc3RhcnQsbW91c2Vkb3duXCIseGEpLG1iKG5iLGplLFwicG9pbnRlcnVwLHRvdWNoZW5kLG1vdXNldXBcIix5YSksdT1LZS51dGlscy5jaGVja1ByZWZpeChcInRyYW5zZm9ybVwiKSxHLnB1c2godSksYT1ndCgpLGw9S2UuZGVsYXllZENhbGwoLjIsenQpLnBhdXNlKCkscD1bamUsXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsZnVuY3Rpb24oKXt2YXIgZT1XZS5pbm5lcldpZHRoLHQ9V2UuaW5uZXJIZWlnaHQ7amUuaGlkZGVuPyhmPWUsZD10KTpmPT09ZSYmZD09PXR8fENiKCl9LGplLFwiRE9NQ29udGVudExvYWRlZFwiLHp0LFdlLFwibG9hZFwiLHp0LFdlLFwicmVzaXplXCIsQ2JdLElhKG5iKSxPdC5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBlLmVuYWJsZSgwLDEpfSksdD0wO3Q8TGUubGVuZ3RoO3QrPTMpcGIob2IsTGVbdF0sTGVbdCsxXSkscGIob2IsTGVbdF0sTGVbdCsyXSl9fSxTY3JvbGxUcmlnZ2VyLmNvbmZpZz1mdW5jdGlvbiBjb25maWcoZSl7XCJsaW1pdENhbGxiYWNrc1wiaW4gZSYmKGN0PSEhZS5saW1pdENhbGxiYWNrcyk7dmFyIHQ9ZS5zeW5jSW50ZXJ2YWw7dCYmY2xlYXJJbnRlcnZhbChjKXx8KGM9dCkmJnNldEludGVydmFsKHpiLHQpLFwiaWdub3JlTW9iaWxlUmVzaXplXCJpbiBlJiYodj0xPT09U2Nyb2xsVHJpZ2dlci5pc1RvdWNoJiZlLmlnbm9yZU1vYmlsZVJlc2l6ZSksXCJhdXRvUmVmcmVzaEV2ZW50c1wiaW4gZSYmKElhKG9iKXx8SWEobmIsZS5hdXRvUmVmcmVzaEV2ZW50c3x8XCJub25lXCIpLGc9LTE9PT0oZS5hdXRvUmVmcmVzaEV2ZW50cytcIlwiKS5pbmRleE9mKFwicmVzaXplXCIpKX0sU2Nyb2xsVHJpZ2dlci5zY3JvbGxlclByb3h5PWZ1bmN0aW9uIHNjcm9sbGVyUHJveHkoZSx0KXt2YXIgcj1JKGUpLG49TGUuaW5kZXhPZihyKSxvPURhKHIpO35uJiZMZS5zcGxpY2UobixvPzY6MiksdCYmKG8/RmUudW5zaGlmdChXZSx0LEdlLHQscWUsdCk6RmUudW5zaGlmdChyLHQpKX0sU2Nyb2xsVHJpZ2dlci5jbGVhck1hdGNoTWVkaWE9ZnVuY3Rpb24gY2xlYXJNYXRjaE1lZGlhKHQpe090LmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGUuX2N0eCYmZS5fY3R4LnF1ZXJ5PT09dCYmZS5fY3R4LmtpbGwoITAsITApfSl9LFNjcm9sbFRyaWdnZXIuaXNJblZpZXdwb3J0PWZ1bmN0aW9uIGlzSW5WaWV3cG9ydChlLHQscil7dmFyIG49KEphKGUpP0koZSk6ZSkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbz1uW3I/bXQ6eXRdKnR8fDA7cmV0dXJuIHI/MDxuLnJpZ2h0LW8mJm4ubGVmdCtvPFdlLmlubmVyV2lkdGg6MDxuLmJvdHRvbS1vJiZuLnRvcCtvPFdlLmlubmVySGVpZ2h0fSxTY3JvbGxUcmlnZ2VyLnBvc2l0aW9uSW5WaWV3cG9ydD1mdW5jdGlvbiBwb3NpdGlvbkluVmlld3BvcnQoZSx0LHIpe0phKGUpJiYoZT1JKGUpKTt2YXIgbj1lLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG89bltyP210Onl0XSxpPW51bGw9PXQ/by8yOnQgaW4gRD9EW3RdKm86fnQuaW5kZXhPZihcIiVcIik/cGFyc2VGbG9hdCh0KSpvLzEwMDpwYXJzZUZsb2F0KHQpfHwwO3JldHVybiByPyhuLmxlZnQraSkvV2UuaW5uZXJXaWR0aDoobi50b3AraSkvV2UuaW5uZXJIZWlnaHR9LFNjcm9sbFRyaWdnZXIua2lsbEFsbD1mdW5jdGlvbiBraWxsQWxsKGUpe2lmKE90LmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuXCJTY3JvbGxTbW9vdGhlclwiIT09ZS52YXJzLmlkJiZlLmtpbGwoKX0pLCEwIT09ZSl7dmFyIHQ9WC5raWxsQWxsfHxbXTtYPXt9LHQuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZSgpfSl9fSxTY3JvbGxUcmlnZ2VyKTtmdW5jdGlvbiBTY3JvbGxUcmlnZ2VyKGUsdCl7YXx8U2Nyb2xsVHJpZ2dlci5yZWdpc3RlcihLZSl8fGNvbnNvbGUud2FybihcIlBsZWFzZSBnc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpXCIpLHRoaXMuaW5pdChlLHQpfVoudmVyc2lvbj1cIjMuMTEuM1wiLFouc2F2ZVN0eWxlcz1mdW5jdGlvbihlKXtyZXR1cm4gZT9ldChlKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2lmKGUmJmUuc3R5bGUpe3ZhciB0PVYuaW5kZXhPZihlKTswPD10JiZWLnNwbGljZSh0LDUpLFYucHVzaChlLGUuc3R5bGUuY3NzVGV4dCxlLmdldEJCb3gmJmUuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpLEtlLmNvcmUuZ2V0Q2FjaGUoZSksbHQoKSl9fSk6Vn0sWi5yZXZlcnQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gSmIoIWUsdCl9LFouY3JlYXRlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBaKGUsdCl9LFoucmVmcmVzaD1mdW5jdGlvbihlKXtyZXR1cm4gZT9DYigpOihhfHxaLnJlZ2lzdGVyKCkpJiZ6dCghMCl9LFoudXBkYXRlPWosWi5jbGVhclNjcm9sbE1lbW9yeT1LYixaLm1heFNjcm9sbD1mdW5jdGlvbihlLHQpe3JldHVybiBIYShlLHQ/SmU6TmUpfSxaLmdldFNjcm9sbEZ1bmM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gSihJKGUpLHQ/SmU6TmUpfSxaLmdldEJ5SWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIER0W2VdfSxaLmdldEFsbD1mdW5jdGlvbigpe3JldHVybiBPdC5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuXCJTY3JvbGxTbW9vdGhlclwiIT09ZS52YXJzLmlkfSl9LFouaXNTY3JvbGxpbmc9ZnVuY3Rpb24oKXtyZXR1cm4hIWh0fSxaLnNuYXBEaXJlY3Rpb25hbD1rYixaLmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj1YW2VdfHwoWFtlXT1bXSk7fnIuaW5kZXhPZih0KXx8ci5wdXNoKHQpfSxaLnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj1YW2VdLG49ciYmci5pbmRleE9mKHQpOzA8PW4mJnIuc3BsaWNlKG4sMSl9LFouYmF0Y2g9ZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBEbyhlLHQpe3ZhciByPVtdLG49W10sbz1LZS5kZWxheWVkQ2FsbChpLGZ1bmN0aW9uKCl7dChyLG4pLHI9W10sbj1bXX0pLnBhdXNlKCk7cmV0dXJuIGZ1bmN0aW9uKGUpe3IubGVuZ3RofHxvLnJlc3RhcnQoITApLHIucHVzaChlLnRyaWdnZXIpLG4ucHVzaChlKSxhPD1yLmxlbmd0aCYmby5wcm9ncmVzcygxKX19dmFyIHIsbj1bXSxvPXt9LGk9dC5pbnRlcnZhbHx8LjAxNixhPXQuYmF0Y2hNYXh8fDFlOTtmb3IociBpbiB0KW9bcl09XCJvblwiPT09ci5zdWJzdHIoMCwyKSYmS2EodFtyXSkmJlwib25SZWZyZXNoSW5pdFwiIT09cj9EbygwLHRbcl0pOnRbcl07cmV0dXJuIEthKGEpJiYoYT1hKCksbmIoWixcInJlZnJlc2hcIixmdW5jdGlvbigpe3JldHVybiBhPXQuYmF0Y2hNYXgoKX0pKSxldChlKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PXt9O2ZvcihyIGluIG8pdFtyXT1vW3JdO3QudHJpZ2dlcj1lLG4ucHVzaChaLmNyZWF0ZSh0KSl9KSxufTtmdW5jdGlvbiBnYyhlLHQscixuKXtyZXR1cm4gbjx0P2Uobik6dDwwJiZlKDApLG48cj8obi10KS8oci10KTpyPDA/dC8odC1yKToxfWZ1bmN0aW9uIGhjKGUsdCl7ITA9PT10P2Uuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ0b3VjaC1hY3Rpb25cIik6ZS5zdHlsZS50b3VjaEFjdGlvbj0hMD09PXQ/XCJhdXRvXCI6dD9cInBhbi1cIit0KyhrLmlzVG91Y2g/XCIgcGluY2gtem9vbVwiOlwiXCIpOlwibm9uZVwiLGU9PT1xZSYmaGMoR2UsdCl9ZnVuY3Rpb24gamMoZSl7dmFyIHQscj1lLmV2ZW50LG49ZS50YXJnZXQsbz1lLmF4aXMsaT0oci5jaGFuZ2VkVG91Y2hlcz9yLmNoYW5nZWRUb3VjaGVzWzBdOnIpLnRhcmdldCxhPWkuX2dzYXB8fEtlLmNvcmUuZ2V0Q2FjaGUoaSkscz1ndCgpO2lmKCFhLl9pc1Njcm9sbFR8fDJlMzxzLWEuX2lzU2Nyb2xsVCl7Zm9yKDtpJiZpLnNjcm9sbEhlaWdodDw9aS5jbGllbnRIZWlnaHQ7KWk9aS5wYXJlbnROb2RlO2EuX2lzU2Nyb2xsPWkmJiFEYShpKSYmaSE9PW4mJih0ZVsodD1kYihpKSkub3ZlcmZsb3dZXXx8dGVbdC5vdmVyZmxvd1hdKSxhLl9pc1Njcm9sbFQ9c30hYS5faXNTY3JvbGwmJlwieFwiIT09b3x8KHIuc3RvcFByb3BhZ2F0aW9uKCksci5fZ3NhcEFsbG93PSEwKX1mdW5jdGlvbiBrYyhlLHQscixuKXtyZXR1cm4gay5jcmVhdGUoe3RhcmdldDplLGNhcHR1cmU6ITAsZGVib3VuY2U6ITEsbG9ja0F4aXM6ITAsdHlwZTp0LG9uV2hlZWw6bj1uJiZqYyxvblByZXNzOm4sb25EcmFnOm4sb25TY3JvbGw6bixvbkVuYWJsZTpmdW5jdGlvbiBvbkVuYWJsZSgpe3JldHVybiByJiZuYihqZSxrLmV2ZW50VHlwZXNbMF0sbmUsITEsITApfSxvbkRpc2FibGU6ZnVuY3Rpb24gb25EaXNhYmxlKCl7cmV0dXJuIG9iKGplLGsuZXZlbnRUeXBlc1swXSxuZSwhMCl9fSl9ZnVuY3Rpb24gb2MoZSl7ZnVuY3Rpb24genAoKXtyZXR1cm4gbz0hMX1mdW5jdGlvbiBDcCgpe2k9SGEoZCxOZSksVD10dChQPzE6MCxpKSxmJiYoXz10dCgwLEhhKGQsSmUpKSksbD1JdH1mdW5jdGlvbiBEcCgpe2guX2dzYXAueT1BYShwYXJzZUZsb2F0KGguX2dzYXAueSkrdi5vZmZzZXQpK1wicHhcIixoLnN0eWxlLnRyYW5zZm9ybT1cIm1hdHJpeDNkKDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIFwiK3BhcnNlRmxvYXQoaC5fZ3NhcC55KStcIiwgMCwgMSlcIix2Lm9mZnNldD12LmNhY2hlSUQ9MH1mdW5jdGlvbiBKcCgpe0NwKCksYS5pc0FjdGl2ZSgpJiZhLnZhcnMuc2Nyb2xsWT5pJiYodigpPmk/YS5wcm9ncmVzcygxKSYmdihpKTphLnJlc2V0VG8oXCJzY3JvbGxZXCIsaSkpfU1hKGUpfHwoZT17fSksZS5wcmV2ZW50RGVmYXVsdD1lLmlzTm9ybWFsaXplcj1lLmFsbG93Q2xpY2tzPSEwLGUudHlwZXx8KGUudHlwZT1cIndoZWVsLHRvdWNoXCIpLGUuZGVib3VuY2U9ISFlLmRlYm91bmNlLGUuaWQ9ZS5pZHx8XCJub3JtYWxpemVyXCI7dmFyIG4saSxsLG8sYSxjLHUscyxmPWUubm9ybWFsaXplU2Nyb2xsWCx0PWUubW9tZW50dW0scj1lLmFsbG93TmVzdGVkU2Nyb2xsLGQ9SShlLnRhcmdldCl8fHFlLHA9S2UuY29yZS5nbG9iYWxzKCkuU2Nyb2xsU21vb3RoZXIsZz1wJiZwLmdldCgpLGg9UCYmKGUuY29udGVudCYmSShlLmNvbnRlbnQpfHxnJiYhMSE9PWUuY29udGVudCYmIWcuc21vb3RoKCkmJmcuY29udGVudCgpKSx2PUooZCxOZSksYj1KKGQsSmUpLG09MSx5PShrLmlzVG91Y2gmJldlLnZpc3VhbFZpZXdwb3J0P1dlLnZpc3VhbFZpZXdwb3J0LnNjYWxlKldlLnZpc3VhbFZpZXdwb3J0LndpZHRoOldlLm91dGVyV2lkdGgpL1dlLmlubmVyV2lkdGgseD0wLFM9S2EodCk/ZnVuY3Rpb24oKXtyZXR1cm4gdChuKX06ZnVuY3Rpb24oKXtyZXR1cm4gdHx8Mi44fSx3PWtjKGQsZS50eXBlLCEwLHIpLF89emEsVD16YTtyZXR1cm4gaCYmS2Uuc2V0KGgse3k6XCIrPTBcIn0pLGUuaWdub3JlQ2hlY2s9ZnVuY3Rpb24oZSl7cmV0dXJuIFAmJlwidG91Y2htb3ZlXCI9PT1lLnR5cGUmJmZ1bmN0aW9uIGlnbm9yZURyYWcoKXtpZihvKXtyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoenApO3ZhciBlPUFhKG4uZGVsdGFZLzIpLHQ9VCh2LnYtZSk7aWYoaCYmdCE9PXYudit2Lm9mZnNldCl7di5vZmZzZXQ9dC12LnY7dmFyIHI9QWEoKHBhcnNlRmxvYXQoaCYmaC5fZ3NhcC55KXx8MCktdi5vZmZzZXQpO2guc3R5bGUudHJhbnNmb3JtPVwibWF0cml4M2QoMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgXCIrcitcIiwgMCwgMSlcIixoLl9nc2FwLnk9citcInB4XCIsdi5jYWNoZUlEPUxlLmNhY2hlLGooKX1yZXR1cm4hMH12Lm9mZnNldCYmRHAoKSxvPSEwfSgpfHwxLjA1PG0mJlwidG91Y2hzdGFydFwiIT09ZS50eXBlfHxuLmlzR2VzdHVyaW5nfHxlLnRvdWNoZXMmJjE8ZS50b3VjaGVzLmxlbmd0aH0sZS5vblByZXNzPWZ1bmN0aW9uKCl7dmFyIGU9bTttPUFhKChXZS52aXN1YWxWaWV3cG9ydCYmV2UudmlzdWFsVmlld3BvcnQuc2NhbGV8fDEpL3kpLGEucGF1c2UoKSxlIT09bSYmaGMoZCwxLjAxPG18fCFmJiZcInhcIiksYz1iKCksdT12KCksQ3AoKSxsPUl0fSxlLm9uUmVsZWFzZT1lLm9uR2VzdHVyZVN0YXJ0PWZ1bmN0aW9uKGUsdCl7aWYodi5vZmZzZXQmJkRwKCksdCl7TGUuY2FjaGUrKzt2YXIgcixuLG89UygpO2YmJihuPShyPWIoKSkrLjA1Km8qLWUudmVsb2NpdHlYLy4yMjcsbyo9Z2MoYixyLG4sSGEoZCxKZSkpLGEudmFycy5zY3JvbGxYPV8obikpLG49KHI9digpKSsuMDUqbyotZS52ZWxvY2l0eVkvLjIyNyxvKj1nYyh2LHIsbixIYShkLE5lKSksYS52YXJzLnNjcm9sbFk9VChuKSxhLmludmFsaWRhdGUoKS5kdXJhdGlvbihvKS5wbGF5KC4wMSksKFAmJmEudmFycy5zY3JvbGxZPj1pfHxpLTE8PXIpJiZLZS50byh7fSx7b25VcGRhdGU6SnAsZHVyYXRpb246b30pfWVsc2Ugcy5yZXN0YXJ0KCEwKX0sZS5vbldoZWVsPWZ1bmN0aW9uKCl7YS5fdHMmJmEucGF1c2UoKSwxZTM8Z3QoKS14JiYobD0wLHg9Z3QoKSl9LGUub25DaGFuZ2U9ZnVuY3Rpb24oZSx0LHIsbixvKXtpZihJdCE9PWwmJkNwKCksdCYmZiYmYihfKG5bMl09PT10P2MrKGUuc3RhcnRYLWUueCk6YigpK3QtblsxXSkpLHIpe3Yub2Zmc2V0JiZEcCgpO3ZhciBpPW9bMl09PT1yLGE9aT91K2Uuc3RhcnRZLWUueTp2KCkrci1vWzFdLHM9VChhKTtpJiZhIT09cyYmKHUrPXMtYSksdihzKX0ocnx8dCkmJmooKX0sZS5vbkVuYWJsZT1mdW5jdGlvbigpe2hjKGQsIWYmJlwieFwiKSxaLmFkZEV2ZW50TGlzdGVuZXIoXCJyZWZyZXNoXCIsSnApLG5iKFdlLFwicmVzaXplXCIsSnApLHYuc21vb3RoJiYodi50YXJnZXQuc3R5bGUuc2Nyb2xsQmVoYXZpb3I9XCJhdXRvXCIsdi5zbW9vdGg9Yi5zbW9vdGg9ITEpLHcuZW5hYmxlKCl9LGUub25EaXNhYmxlPWZ1bmN0aW9uKCl7aGMoZCwhMCksb2IoV2UsXCJyZXNpemVcIixKcCksWi5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVmcmVzaFwiLEpwKSx3LmtpbGwoKX0sZS5sb2NrQXhpcz0hMSE9PWUubG9ja0F4aXMsKChuPW5ldyBrKGUpKS5pT1M9UCkmJiF2KCkmJnYoMSksUCYmS2UudGlja2VyLmFkZCh6YSkscz1uLl9kYyxhPUtlLnRvKG4se2Vhc2U6XCJwb3dlcjRcIixwYXVzZWQ6ITAsc2Nyb2xsWDpmP1wiKz0wLjFcIjpcIis9MFwiLHNjcm9sbFk6XCIrPTAuMVwiLG9uQ29tcGxldGU6cy52YXJzLm9uQ29tcGxldGV9KSxufXZhciBlZSx0ZT17YXV0bzoxLHNjcm9sbDoxfSxyZT0vKGlucHV0fGxhYmVsfHNlbGVjdHx0ZXh0YXJlYSkvaSxuZT1mdW5jdGlvbiBfY2FwdHVyZUlucHV0cyhlKXt2YXIgdD1yZS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpOyh0fHxlZSkmJihlLl9nc2FwQWxsb3c9ITAsZWU9dCl9O1ouc29ydD1mdW5jdGlvbihlKXtyZXR1cm4gT3Quc29ydChlfHxmdW5jdGlvbihlLHQpe3JldHVybi0xZTYqKGUudmFycy5yZWZyZXNoUHJpb3JpdHl8fDApK2Uuc3RhcnQtKHQuc3RhcnQrLTFlNioodC52YXJzLnJlZnJlc2hQcmlvcml0eXx8MCkpfSl9LFoub2JzZXJ2ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGsoZSl9LFoubm9ybWFsaXplU2Nyb2xsPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuIGg7aWYoITA9PT1lJiZoKXJldHVybiBoLmVuYWJsZSgpO2lmKCExPT09ZSlyZXR1cm4gaCYmaC5raWxsKCk7dmFyIHQ9ZSBpbnN0YW5jZW9mIGs/ZTpvYyhlKTtyZXR1cm4gaCYmaC50YXJnZXQ9PT10LnRhcmdldCYmaC5raWxsKCksRGEodC50YXJnZXQpJiYoaD10KSx0fSxaLmNvcmU9e19nZXRWZWxvY2l0eVByb3A6SyxfaW5wdXRPYnNlcnZlcjprYyxfc2Nyb2xsZXJzOkxlLF9wcm94aWVzOkZlLGJyaWRnZTp7c3M6ZnVuY3Rpb24gc3MoKXtodHx8SChcInNjcm9sbFN0YXJ0XCIpLGh0PWd0KCl9LHJlZjpmdW5jdGlvbiByZWYoKXtyZXR1cm4gbnR9fX0sQ2EoKSYmS2UucmVnaXN0ZXJQbHVnaW4oWiksZS5TY3JvbGxUcmlnZ2VyPVosZS5kZWZhdWx0PVo7aWYgKHR5cGVvZih3aW5kb3cpPT09XCJ1bmRlZmluZWRcInx8d2luZG93IT09ZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9IGVsc2Uge2RlbGV0ZSBlLmRlZmF1bHR9fSk7XG4iLCIvKipcbiAqIFN3aXBlciAxMS4xLjE1XG4gKiBNb3N0IG1vZGVybiBtb2JpbGUgdG91Y2ggc2xpZGVyIGFuZCBmcmFtZXdvcmsgd2l0aCBoYXJkd2FyZSBhY2NlbGVyYXRlZCB0cmFuc2l0aW9uc1xuICogaHR0cHM6Ly9zd2lwZXJqcy5jb21cbiAqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDI0IFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKlxuICogUmVsZWFzZWQgb246IE5vdmVtYmVyIDE4LCAyMDI0XG4gKi9cblxuXG53aW5kb3cuU3dpcGVyID0gZnVuY3Rpb24gKCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBmdW5jdGlvbiBlKGUpIHtcbiAgICByZXR1cm4gbnVsbCAhPT0gZSAmJiBcIm9iamVjdFwiID09IHR5cGVvZiBlICYmIFwiY29uc3RydWN0b3JcIiBpbiBlICYmIGUuY29uc3RydWN0b3IgPT09IE9iamVjdFxuICB9XG5cbiAgZnVuY3Rpb24gdChzLCBhKSB7XG4gICAgdm9pZCAwID09PSBzICYmIChzID0ge30pLCB2b2lkIDAgPT09IGEgJiYgKGEgPSB7fSksIE9iamVjdC5rZXlzKGEpLmZvckVhY2goKGkgPT4ge1xuICAgICAgdm9pZCAwID09PSBzW2ldID8gc1tpXSA9IGFbaV0gOiBlKGFbaV0pICYmIGUoc1tpXSkgJiYgT2JqZWN0LmtleXMoYVtpXSkubGVuZ3RoID4gMCAmJiB0KHNbaV0sIGFbaV0pXG4gICAgfSkpXG4gIH1cblxuICBjb25zdCBzID0ge1xuICAgIGJvZHk6IHt9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgfSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyKCkge1xuICAgIH0sXG4gICAgYWN0aXZlRWxlbWVudDoge1xuICAgICAgYmx1cigpIHtcbiAgICAgIH0sIG5vZGVOYW1lOiBcIlwiXG4gICAgfSxcbiAgICBxdWVyeVNlbGVjdG9yOiAoKSA9PiBudWxsLFxuICAgIHF1ZXJ5U2VsZWN0b3JBbGw6ICgpID0+IFtdLFxuICAgIGdldEVsZW1lbnRCeUlkOiAoKSA9PiBudWxsLFxuICAgIGNyZWF0ZUV2ZW50OiAoKSA9PiAoe1xuICAgICAgaW5pdEV2ZW50KCkge1xuICAgICAgfVxuICAgIH0pLFxuICAgIGNyZWF0ZUVsZW1lbnQ6ICgpID0+ICh7XG4gICAgICBjaGlsZHJlbjogW10sIGNoaWxkTm9kZXM6IFtdLCBzdHlsZToge30sIHNldEF0dHJpYnV0ZSgpIHtcbiAgICAgIH0sIGdldEVsZW1lbnRzQnlUYWdOYW1lOiAoKSA9PiBbXVxuICAgIH0pLFxuICAgIGNyZWF0ZUVsZW1lbnROUzogKCkgPT4gKHt9KSxcbiAgICBpbXBvcnROb2RlOiAoKSA9PiBudWxsLFxuICAgIGxvY2F0aW9uOiB7aGFzaDogXCJcIiwgaG9zdDogXCJcIiwgaG9zdG5hbWU6IFwiXCIsIGhyZWY6IFwiXCIsIG9yaWdpbjogXCJcIiwgcGF0aG5hbWU6IFwiXCIsIHByb3RvY29sOiBcIlwiLCBzZWFyY2g6IFwiXCJ9XG4gIH07XG5cbiAgZnVuY3Rpb24gYSgpIHtcbiAgICBjb25zdCBlID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgZG9jdW1lbnQgPyBkb2N1bWVudCA6IHt9O1xuICAgIHJldHVybiB0KGUsIHMpLCBlXG4gIH1cblxuICBjb25zdCBpID0ge1xuICAgIGRvY3VtZW50OiBzLFxuICAgIG5hdmlnYXRvcjoge3VzZXJBZ2VudDogXCJcIn0sXG4gICAgbG9jYXRpb246IHtoYXNoOiBcIlwiLCBob3N0OiBcIlwiLCBob3N0bmFtZTogXCJcIiwgaHJlZjogXCJcIiwgb3JpZ2luOiBcIlwiLCBwYXRobmFtZTogXCJcIiwgcHJvdG9jb2w6IFwiXCIsIHNlYXJjaDogXCJcIn0sXG4gICAgaGlzdG9yeToge1xuICAgICAgcmVwbGFjZVN0YXRlKCkge1xuICAgICAgfSwgcHVzaFN0YXRlKCkge1xuICAgICAgfSwgZ28oKSB7XG4gICAgICB9LCBiYWNrKCkge1xuICAgICAgfVxuICAgIH0sXG4gICAgQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcbiAgICBhZGRFdmVudExpc3RlbmVyKCkge1xuICAgIH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHtcbiAgICB9LFxuICAgIGdldENvbXB1dGVkU3R5bGU6ICgpID0+ICh7Z2V0UHJvcGVydHlWYWx1ZTogKCkgPT4gXCJcIn0pLFxuICAgIEltYWdlKCkge1xuICAgIH0sXG4gICAgRGF0ZSgpIHtcbiAgICB9LFxuICAgIHNjcmVlbjoge30sXG4gICAgc2V0VGltZW91dCgpIHtcbiAgICB9LFxuICAgIGNsZWFyVGltZW91dCgpIHtcbiAgICB9LFxuICAgIG1hdGNoTWVkaWE6ICgpID0+ICh7fSksXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lOiBlID0+IFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIHNldFRpbWVvdXQgPyAoZSgpLCBudWxsKSA6IHNldFRpbWVvdXQoZSwgMCksXG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZSkge1xuICAgICAgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygc2V0VGltZW91dCAmJiBjbGVhclRpbWVvdXQoZSlcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gcigpIHtcbiAgICBjb25zdCBlID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDoge307XG4gICAgcmV0dXJuIHQoZSwgaSksIGVcbiAgfVxuXG4gIGZ1bmN0aW9uIG4oZSkge1xuICAgIHJldHVybiB2b2lkIDAgPT09IGUgJiYgKGUgPSBcIlwiKSwgZS50cmltKCkuc3BsaXQoXCIgXCIpLmZpbHRlcigoZSA9PiAhIWUudHJpbSgpKSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGwoZSwgdCkge1xuICAgIHJldHVybiB2b2lkIDAgPT09IHQgJiYgKHQgPSAwKSwgc2V0VGltZW91dChlLCB0KVxuICB9XG5cbiAgZnVuY3Rpb24gbygpIHtcbiAgICByZXR1cm4gRGF0ZS5ub3coKVxuICB9XG5cbiAgZnVuY3Rpb24gZChlLCB0KSB7XG4gICAgdm9pZCAwID09PSB0ICYmICh0ID0gXCJ4XCIpO1xuICAgIGNvbnN0IHMgPSByKCk7XG4gICAgbGV0IGEsIGksIG47XG4gICAgY29uc3QgbCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBjb25zdCB0ID0gcigpO1xuICAgICAgbGV0IHM7XG4gICAgICByZXR1cm4gdC5nZXRDb21wdXRlZFN0eWxlICYmIChzID0gdC5nZXRDb21wdXRlZFN0eWxlKGUsIG51bGwpKSwgIXMgJiYgZS5jdXJyZW50U3R5bGUgJiYgKHMgPSBlLmN1cnJlbnRTdHlsZSksIHMgfHwgKHMgPSBlLnN0eWxlKSwgc1xuICAgIH0oZSk7XG4gICAgcmV0dXJuIHMuV2ViS2l0Q1NTTWF0cml4ID8gKGkgPSBsLnRyYW5zZm9ybSB8fCBsLndlYmtpdFRyYW5zZm9ybSwgaS5zcGxpdChcIixcIikubGVuZ3RoID4gNiAmJiAoaSA9IGkuc3BsaXQoXCIsIFwiKS5tYXAoKGUgPT4gZS5yZXBsYWNlKFwiLFwiLCBcIi5cIikpKS5qb2luKFwiLCBcIikpLCBuID0gbmV3IHMuV2ViS2l0Q1NTTWF0cml4KFwibm9uZVwiID09PSBpID8gXCJcIiA6IGkpKSA6IChuID0gbC5Nb3pUcmFuc2Zvcm0gfHwgbC5PVHJhbnNmb3JtIHx8IGwuTXNUcmFuc2Zvcm0gfHwgbC5tc1RyYW5zZm9ybSB8fCBsLnRyYW5zZm9ybSB8fCBsLmdldFByb3BlcnR5VmFsdWUoXCJ0cmFuc2Zvcm1cIikucmVwbGFjZShcInRyYW5zbGF0ZShcIiwgXCJtYXRyaXgoMSwgMCwgMCwgMSxcIiksIGEgPSBuLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpKSwgXCJ4XCIgPT09IHQgJiYgKGkgPSBzLldlYktpdENTU01hdHJpeCA/IG4ubTQxIDogMTYgPT09IGEubGVuZ3RoID8gcGFyc2VGbG9hdChhWzEyXSkgOiBwYXJzZUZsb2F0KGFbNF0pKSwgXCJ5XCIgPT09IHQgJiYgKGkgPSBzLldlYktpdENTU01hdHJpeCA/IG4ubTQyIDogMTYgPT09IGEubGVuZ3RoID8gcGFyc2VGbG9hdChhWzEzXSkgOiBwYXJzZUZsb2F0KGFbNV0pKSwgaSB8fCAwXG4gIH1cblxuICBmdW5jdGlvbiBjKGUpIHtcbiAgICByZXR1cm4gXCJvYmplY3RcIiA9PSB0eXBlb2YgZSAmJiBudWxsICE9PSBlICYmIGUuY29uc3RydWN0b3IgJiYgXCJPYmplY3RcIiA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsIC0xKVxuICB9XG5cbiAgZnVuY3Rpb24gcCgpIHtcbiAgICBjb25zdCBlID0gT2JqZWN0KGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHZvaWQgMCA6IGFyZ3VtZW50c1swXSksIHQgPSBbXCJfX3Byb3RvX19cIiwgXCJjb25zdHJ1Y3RvclwiLCBcInByb3RvdHlwZVwiXTtcbiAgICBmb3IgKGxldCBhID0gMTsgYSA8IGFyZ3VtZW50cy5sZW5ndGg7IGEgKz0gMSkge1xuICAgICAgY29uc3QgaSA9IGEgPCAwIHx8IGFyZ3VtZW50cy5sZW5ndGggPD0gYSA/IHZvaWQgMCA6IGFyZ3VtZW50c1thXTtcbiAgICAgIGlmIChudWxsICE9IGkgJiYgKHMgPSBpLCAhKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHdpbmRvdyAmJiB2b2lkIDAgIT09IHdpbmRvdy5IVE1MRWxlbWVudCA/IHMgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA6IHMgJiYgKDEgPT09IHMubm9kZVR5cGUgfHwgMTEgPT09IHMubm9kZVR5cGUpKSkpIHtcbiAgICAgICAgY29uc3QgcyA9IE9iamVjdC5rZXlzKE9iamVjdChpKSkuZmlsdGVyKChlID0+IHQuaW5kZXhPZihlKSA8IDApKTtcbiAgICAgICAgZm9yIChsZXQgdCA9IDAsIGEgPSBzLmxlbmd0aDsgdCA8IGE7IHQgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IGEgPSBzW3RdLCByID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihpLCBhKTtcbiAgICAgICAgICB2b2lkIDAgIT09IHIgJiYgci5lbnVtZXJhYmxlICYmIChjKGVbYV0pICYmIGMoaVthXSkgPyBpW2FdLl9fc3dpcGVyX18gPyBlW2FdID0gaVthXSA6IHAoZVthXSwgaVthXSkgOiAhYyhlW2FdKSAmJiBjKGlbYV0pID8gKGVbYV0gPSB7fSwgaVthXS5fX3N3aXBlcl9fID8gZVthXSA9IGlbYV0gOiBwKGVbYV0sIGlbYV0pKSA6IGVbYV0gPSBpW2FdKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBzO1xuICAgIHJldHVybiBlXG4gIH1cblxuICBmdW5jdGlvbiB1KGUsIHQsIHMpIHtcbiAgICBlLnN0eWxlLnNldFByb3BlcnR5KHQsIHMpXG4gIH1cblxuICBmdW5jdGlvbiBtKGUpIHtcbiAgICBsZXQge3N3aXBlcjogdCwgdGFyZ2V0UG9zaXRpb246IHMsIHNpZGU6IGF9ID0gZTtcbiAgICBjb25zdCBpID0gcigpLCBuID0gLXQudHJhbnNsYXRlO1xuICAgIGxldCBsLCBvID0gbnVsbDtcbiAgICBjb25zdCBkID0gdC5wYXJhbXMuc3BlZWQ7XG4gICAgdC53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSBcIm5vbmVcIiwgaS5jYW5jZWxBbmltYXRpb25GcmFtZSh0LmNzc01vZGVGcmFtZUlEKTtcbiAgICBjb25zdCBjID0gcyA+IG4gPyBcIm5leHRcIiA6IFwicHJldlwiLCBwID0gKGUsIHQpID0+IFwibmV4dFwiID09PSBjICYmIGUgPj0gdCB8fCBcInByZXZcIiA9PT0gYyAmJiBlIDw9IHQsIHUgPSAoKSA9PiB7XG4gICAgICBsID0gKG5ldyBEYXRlKS5nZXRUaW1lKCksIG51bGwgPT09IG8gJiYgKG8gPSBsKTtcbiAgICAgIGNvbnN0IGUgPSBNYXRoLm1heChNYXRoLm1pbigobCAtIG8pIC8gZCwgMSksIDApLCByID0gLjUgLSBNYXRoLmNvcyhlICogTWF0aC5QSSkgLyAyO1xuICAgICAgbGV0IGMgPSBuICsgciAqIChzIC0gbik7XG4gICAgICBpZiAocChjLCBzKSAmJiAoYyA9IHMpLCB0LndyYXBwZXJFbC5zY3JvbGxUbyh7W2FdOiBjfSksIHAoYywgcykpIHJldHVybiB0LndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCIsIHQud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gXCJcIiwgc2V0VGltZW91dCgoKCkgPT4ge1xuICAgICAgICB0LndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9IFwiXCIsIHQud3JhcHBlckVsLnNjcm9sbFRvKHtbYV06IGN9KVxuICAgICAgfSkpLCB2b2lkIGkuY2FuY2VsQW5pbWF0aW9uRnJhbWUodC5jc3NNb2RlRnJhbWVJRCk7XG4gICAgICB0LmNzc01vZGVGcmFtZUlEID0gaS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodSlcbiAgICB9O1xuICAgIHUoKVxuICB9XG5cbiAgZnVuY3Rpb24gaChlKSB7XG4gICAgcmV0dXJuIGUucXVlcnlTZWxlY3RvcihcIi5zd2lwZXItc2xpZGUtdHJhbnNmb3JtXCIpIHx8IGUuc2hhZG93Um9vdCAmJiBlLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcIi5zd2lwZXItc2xpZGUtdHJhbnNmb3JtXCIpIHx8IGVcbiAgfVxuXG4gIGZ1bmN0aW9uIGYoZSwgdCkge1xuICAgIHZvaWQgMCA9PT0gdCAmJiAodCA9IFwiXCIpO1xuICAgIGNvbnN0IHMgPSBbLi4uZS5jaGlsZHJlbl07XG4gICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBIVE1MU2xvdEVsZW1lbnQgJiYgcy5wdXNoKC4uLmUuYXNzaWduZWRFbGVtZW50cygpKSwgdCA/IHMuZmlsdGVyKChlID0+IGUubWF0Y2hlcyh0KSkpIDogc1xuICB9XG5cbiAgZnVuY3Rpb24gZyhlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB2b2lkIGNvbnNvbGUud2FybihlKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB2KGUsIHQpIHtcbiAgICB2b2lkIDAgPT09IHQgJiYgKHQgPSBbXSk7XG4gICAgY29uc3QgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZSk7XG4gICAgcmV0dXJuIHMuY2xhc3NMaXN0LmFkZCguLi5BcnJheS5pc0FycmF5KHQpID8gdCA6IG4odCkpLCBzXG4gIH1cblxuICBmdW5jdGlvbiB3KGUpIHtcbiAgICBjb25zdCB0ID0gcigpLCBzID0gYSgpLCBpID0gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgbiA9IHMuYm9keSwgbCA9IGUuY2xpZW50VG9wIHx8IG4uY2xpZW50VG9wIHx8IDAsXG4gICAgICBvID0gZS5jbGllbnRMZWZ0IHx8IG4uY2xpZW50TGVmdCB8fCAwLCBkID0gZSA9PT0gdCA/IHQuc2Nyb2xsWSA6IGUuc2Nyb2xsVG9wLFxuICAgICAgYyA9IGUgPT09IHQgPyB0LnNjcm9sbFggOiBlLnNjcm9sbExlZnQ7XG4gICAgcmV0dXJuIHt0b3A6IGkudG9wICsgZCAtIGwsIGxlZnQ6IGkubGVmdCArIGMgLSBvfVxuICB9XG5cbiAgZnVuY3Rpb24gYihlLCB0KSB7XG4gICAgcmV0dXJuIHIoKS5nZXRDb21wdXRlZFN0eWxlKGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUodClcbiAgfVxuXG4gIGZ1bmN0aW9uIHkoZSkge1xuICAgIGxldCB0LCBzID0gZTtcbiAgICBpZiAocykge1xuICAgICAgZm9yICh0ID0gMDsgbnVsbCAhPT0gKHMgPSBzLnByZXZpb3VzU2libGluZyk7KSAxID09PSBzLm5vZGVUeXBlICYmICh0ICs9IDEpO1xuICAgICAgcmV0dXJuIHRcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBFKGUsIHQpIHtcbiAgICBjb25zdCBzID0gW107XG4gICAgbGV0IGEgPSBlLnBhcmVudEVsZW1lbnQ7XG4gICAgZm9yICg7IGE7KSB0ID8gYS5tYXRjaGVzKHQpICYmIHMucHVzaChhKSA6IHMucHVzaChhKSwgYSA9IGEucGFyZW50RWxlbWVudDtcbiAgICByZXR1cm4gc1xuICB9XG5cbiAgZnVuY3Rpb24geChlLCB0KSB7XG4gICAgdCAmJiBlLmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIChmdW5jdGlvbiBzKGEpIHtcbiAgICAgIGEudGFyZ2V0ID09PSBlICYmICh0LmNhbGwoZSwgYSksIGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIiwgcykpXG4gICAgfSkpXG4gIH1cblxuICBmdW5jdGlvbiBTKGUsIHQsIHMpIHtcbiAgICBjb25zdCBhID0gcigpO1xuICAgIHJldHVybiBzID8gZVtcIndpZHRoXCIgPT09IHQgPyBcIm9mZnNldFdpZHRoXCIgOiBcIm9mZnNldEhlaWdodFwiXSArIHBhcnNlRmxvYXQoYS5nZXRDb21wdXRlZFN0eWxlKGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoXCJ3aWR0aFwiID09PSB0ID8gXCJtYXJnaW4tcmlnaHRcIiA6IFwibWFyZ2luLXRvcFwiKSkgKyBwYXJzZUZsb2F0KGEuZ2V0Q29tcHV0ZWRTdHlsZShlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKFwid2lkdGhcIiA9PT0gdCA/IFwibWFyZ2luLWxlZnRcIiA6IFwibWFyZ2luLWJvdHRvbVwiKSkgOiBlLm9mZnNldFdpZHRoXG4gIH1cblxuICBmdW5jdGlvbiBUKGUpIHtcbiAgICByZXR1cm4gKEFycmF5LmlzQXJyYXkoZSkgPyBlIDogW2VdKS5maWx0ZXIoKGUgPT4gISFlKSlcbiAgfVxuXG4gIGZ1bmN0aW9uIE0oZSkge1xuICAgIHJldHVybiB0ID0+IE1hdGguYWJzKHQpID4gMCAmJiBlLmJyb3dzZXIgJiYgZS5icm93c2VyLm5lZWQzZEZpeCAmJiBNYXRoLmFicyh0KSAlIDkwID09IDAgPyB0ICsgLjAwMSA6IHRcbiAgfVxuXG4gIGxldCBDLCBQLCBMO1xuXG4gIGZ1bmN0aW9uIEkoKSB7XG4gICAgcmV0dXJuIEMgfHwgKEMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBlID0gcigpLCB0ID0gYSgpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc21vb3RoU2Nyb2xsOiB0LmRvY3VtZW50RWxlbWVudCAmJiB0LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBcInNjcm9sbEJlaGF2aW9yXCIgaW4gdC5kb2N1bWVudEVsZW1lbnQuc3R5bGUsXG4gICAgICAgIHRvdWNoOiAhIShcIm9udG91Y2hzdGFydFwiIGluIGUgfHwgZS5Eb2N1bWVudFRvdWNoICYmIHQgaW5zdGFuY2VvZiBlLkRvY3VtZW50VG91Y2gpXG4gICAgICB9XG4gICAgfSgpKSwgQ1xuICB9XG5cbiAgZnVuY3Rpb24geihlKSB7XG4gICAgcmV0dXJuIHZvaWQgMCA9PT0gZSAmJiAoZSA9IHt9KSwgUCB8fCAoUCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBsZXQge3VzZXJBZ2VudDogdH0gPSB2b2lkIDAgPT09IGUgPyB7fSA6IGU7XG4gICAgICBjb25zdCBzID0gSSgpLCBhID0gcigpLCBpID0gYS5uYXZpZ2F0b3IucGxhdGZvcm0sIG4gPSB0IHx8IGEubmF2aWdhdG9yLnVzZXJBZ2VudCwgbCA9IHtpb3M6ICExLCBhbmRyb2lkOiAhMX0sXG4gICAgICAgIG8gPSBhLnNjcmVlbi53aWR0aCwgZCA9IGEuc2NyZWVuLmhlaWdodCwgYyA9IG4ubWF0Y2goLyhBbmRyb2lkKTs/W1xcc1xcL10rKFtcXGQuXSspPy8pO1xuICAgICAgbGV0IHAgPSBuLm1hdGNoKC8oaVBhZCkuKk9TXFxzKFtcXGRfXSspLyk7XG4gICAgICBjb25zdCB1ID0gbi5tYXRjaCgvKGlQb2QpKC4qT1NcXHMoW1xcZF9dKykpPy8pLCBtID0gIXAgJiYgbi5tYXRjaCgvKGlQaG9uZVxcc09TfGlPUylcXHMoW1xcZF9dKykvKSwgaCA9IFwiV2luMzJcIiA9PT0gaTtcbiAgICAgIGxldCBmID0gXCJNYWNJbnRlbFwiID09PSBpO1xuICAgICAgcmV0dXJuICFwICYmIGYgJiYgcy50b3VjaCAmJiBbXCIxMDI0eDEzNjZcIiwgXCIxMzY2eDEwMjRcIiwgXCI4MzR4MTE5NFwiLCBcIjExOTR4ODM0XCIsIFwiODM0eDExMTJcIiwgXCIxMTEyeDgzNFwiLCBcIjc2OHgxMDI0XCIsIFwiMTAyNHg3NjhcIiwgXCI4MjB4MTE4MFwiLCBcIjExODB4ODIwXCIsIFwiODEweDEwODBcIiwgXCIxMDgweDgxMFwiXS5pbmRleE9mKGAke299eCR7ZH1gKSA+PSAwICYmIChwID0gbi5tYXRjaCgvKFZlcnNpb24pXFwvKFtcXGQuXSspLyksIHAgfHwgKHAgPSBbMCwgMSwgXCIxM18wXzBcIl0pLCBmID0gITEpLCBjICYmICFoICYmIChsLm9zID0gXCJhbmRyb2lkXCIsIGwuYW5kcm9pZCA9ICEwKSwgKHAgfHwgbSB8fCB1KSAmJiAobC5vcyA9IFwiaW9zXCIsIGwuaW9zID0gITApLCBsXG4gICAgfShlKSksIFBcbiAgfVxuXG4gIGZ1bmN0aW9uIEEoKSB7XG4gICAgcmV0dXJuIEwgfHwgKEwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBlID0gcigpLCB0ID0geigpO1xuICAgICAgbGV0IHMgPSAhMTtcblxuICAgICAgZnVuY3Rpb24gYSgpIHtcbiAgICAgICAgY29uc3QgdCA9IGUubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXR1cm4gdC5pbmRleE9mKFwic2FmYXJpXCIpID49IDAgJiYgdC5pbmRleE9mKFwiY2hyb21lXCIpIDwgMCAmJiB0LmluZGV4T2YoXCJhbmRyb2lkXCIpIDwgMFxuICAgICAgfVxuXG4gICAgICBpZiAoYSgpKSB7XG4gICAgICAgIGNvbnN0IHQgPSBTdHJpbmcoZS5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgICAgaWYgKHQuaW5jbHVkZXMoXCJWZXJzaW9uL1wiKSkge1xuICAgICAgICAgIGNvbnN0IFtlLCBhXSA9IHQuc3BsaXQoXCJWZXJzaW9uL1wiKVsxXS5zcGxpdChcIiBcIilbMF0uc3BsaXQoXCIuXCIpLm1hcCgoZSA9PiBOdW1iZXIoZSkpKTtcbiAgICAgICAgICBzID0gZSA8IDE2IHx8IDE2ID09PSBlICYmIGEgPCAyXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGkgPSAvKGlQaG9uZXxpUG9kfGlQYWQpLipBcHBsZVdlYktpdCg/IS4qU2FmYXJpKS9pLnRlc3QoZS5uYXZpZ2F0b3IudXNlckFnZW50KSwgbiA9IGEoKTtcbiAgICAgIHJldHVybiB7aXNTYWZhcmk6IHMgfHwgbiwgbmVlZFBlcnNwZWN0aXZlRml4OiBzLCBuZWVkM2RGaXg6IG4gfHwgaSAmJiB0LmlvcywgaXNXZWJWaWV3OiBpfVxuICAgIH0oKSksIExcbiAgfVxuXG4gIHZhciAkID0ge1xuICAgIG9uKGUsIHQsIHMpIHtcbiAgICAgIGNvbnN0IGEgPSB0aGlzO1xuICAgICAgaWYgKCFhLmV2ZW50c0xpc3RlbmVycyB8fCBhLmRlc3Ryb3llZCkgcmV0dXJuIGE7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0KSByZXR1cm4gYTtcbiAgICAgIGNvbnN0IGkgPSBzID8gXCJ1bnNoaWZ0XCIgOiBcInB1c2hcIjtcbiAgICAgIHJldHVybiBlLnNwbGl0KFwiIFwiKS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgYS5ldmVudHNMaXN0ZW5lcnNbZV0gfHwgKGEuZXZlbnRzTGlzdGVuZXJzW2VdID0gW10pLCBhLmV2ZW50c0xpc3RlbmVyc1tlXVtpXSh0KVxuICAgICAgfSkpLCBhXG4gICAgfSwgb25jZShlLCB0LCBzKSB7XG4gICAgICBjb25zdCBhID0gdGhpcztcbiAgICAgIGlmICghYS5ldmVudHNMaXN0ZW5lcnMgfHwgYS5kZXN0cm95ZWQpIHJldHVybiBhO1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdCkgcmV0dXJuIGE7XG5cbiAgICAgIGZ1bmN0aW9uIGkoKSB7XG4gICAgICAgIGEub2ZmKGUsIGkpLCBpLl9fZW1pdHRlclByb3h5ICYmIGRlbGV0ZSBpLl9fZW1pdHRlclByb3h5O1xuICAgICAgICBmb3IgKHZhciBzID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IG5ldyBBcnJheShzKSwgbiA9IDA7IG4gPCBzOyBuKyspIHJbbl0gPSBhcmd1bWVudHNbbl07XG4gICAgICAgIHQuYXBwbHkoYSwgcilcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGkuX19lbWl0dGVyUHJveHkgPSB0LCBhLm9uKGUsIGksIHMpXG4gICAgfSwgb25BbnkoZSwgdCkge1xuICAgICAgY29uc3QgcyA9IHRoaXM7XG4gICAgICBpZiAoIXMuZXZlbnRzTGlzdGVuZXJzIHx8IHMuZGVzdHJveWVkKSByZXR1cm4gcztcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpIHJldHVybiBzO1xuICAgICAgY29uc3QgYSA9IHQgPyBcInVuc2hpZnRcIiA6IFwicHVzaFwiO1xuICAgICAgcmV0dXJuIHMuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoZSkgPCAwICYmIHMuZXZlbnRzQW55TGlzdGVuZXJzW2FdKGUpLCBzXG4gICAgfSwgb2ZmQW55KGUpIHtcbiAgICAgIGNvbnN0IHQgPSB0aGlzO1xuICAgICAgaWYgKCF0LmV2ZW50c0xpc3RlbmVycyB8fCB0LmRlc3Ryb3llZCkgcmV0dXJuIHQ7XG4gICAgICBpZiAoIXQuZXZlbnRzQW55TGlzdGVuZXJzKSByZXR1cm4gdDtcbiAgICAgIGNvbnN0IHMgPSB0LmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGUpO1xuICAgICAgcmV0dXJuIHMgPj0gMCAmJiB0LmV2ZW50c0FueUxpc3RlbmVycy5zcGxpY2UocywgMSksIHRcbiAgICB9LCBvZmYoZSwgdCkge1xuICAgICAgY29uc3QgcyA9IHRoaXM7XG4gICAgICByZXR1cm4gIXMuZXZlbnRzTGlzdGVuZXJzIHx8IHMuZGVzdHJveWVkID8gcyA6IHMuZXZlbnRzTGlzdGVuZXJzID8gKGUuc3BsaXQoXCIgXCIpLmZvckVhY2goKGUgPT4ge1xuICAgICAgICB2b2lkIDAgPT09IHQgPyBzLmV2ZW50c0xpc3RlbmVyc1tlXSA9IFtdIDogcy5ldmVudHNMaXN0ZW5lcnNbZV0gJiYgcy5ldmVudHNMaXN0ZW5lcnNbZV0uZm9yRWFjaCgoKGEsIGkpID0+IHtcbiAgICAgICAgICAoYSA9PT0gdCB8fCBhLl9fZW1pdHRlclByb3h5ICYmIGEuX19lbWl0dGVyUHJveHkgPT09IHQpICYmIHMuZXZlbnRzTGlzdGVuZXJzW2VdLnNwbGljZShpLCAxKVxuICAgICAgICB9KSlcbiAgICAgIH0pKSwgcykgOiBzXG4gICAgfSwgZW1pdCgpIHtcbiAgICAgIGNvbnN0IGUgPSB0aGlzO1xuICAgICAgaWYgKCFlLmV2ZW50c0xpc3RlbmVycyB8fCBlLmRlc3Ryb3llZCkgcmV0dXJuIGU7XG4gICAgICBpZiAoIWUuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gZTtcbiAgICAgIGxldCB0LCBzLCBhO1xuICAgICAgZm9yICh2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBuZXcgQXJyYXkoaSksIG4gPSAwOyBuIDwgaTsgbisrKSByW25dID0gYXJndW1lbnRzW25dO1xuICAgICAgXCJzdHJpbmdcIiA9PSB0eXBlb2YgclswXSB8fCBBcnJheS5pc0FycmF5KHJbMF0pID8gKHQgPSByWzBdLCBzID0gci5zbGljZSgxLCByLmxlbmd0aCksIGEgPSBlKSA6ICh0ID0gclswXS5ldmVudHMsIHMgPSByWzBdLmRhdGEsIGEgPSByWzBdLmNvbnRleHQgfHwgZSksIHMudW5zaGlmdChhKTtcbiAgICAgIHJldHVybiAoQXJyYXkuaXNBcnJheSh0KSA/IHQgOiB0LnNwbGl0KFwiIFwiKSkuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgIGUuZXZlbnRzQW55TGlzdGVuZXJzICYmIGUuZXZlbnRzQW55TGlzdGVuZXJzLmxlbmd0aCAmJiBlLmV2ZW50c0FueUxpc3RlbmVycy5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICBlLmFwcGx5KGEsIFt0LCAuLi5zXSlcbiAgICAgICAgfSkpLCBlLmV2ZW50c0xpc3RlbmVycyAmJiBlLmV2ZW50c0xpc3RlbmVyc1t0XSAmJiBlLmV2ZW50c0xpc3RlbmVyc1t0XS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICBlLmFwcGx5KGEsIHMpXG4gICAgICAgIH0pKVxuICAgICAgfSkpLCBlXG4gICAgfVxuICB9O1xuICBjb25zdCBrID0gKGUsIHQsIHMpID0+IHtcbiAgICB0ICYmICFlLmNsYXNzTGlzdC5jb250YWlucyhzKSA/IGUuY2xhc3NMaXN0LmFkZChzKSA6ICF0ICYmIGUuY2xhc3NMaXN0LmNvbnRhaW5zKHMpICYmIGUuY2xhc3NMaXN0LnJlbW92ZShzKVxuICB9O1xuICBjb25zdCBPID0gKGUsIHQsIHMpID0+IHtcbiAgICB0ICYmICFlLmNsYXNzTGlzdC5jb250YWlucyhzKSA/IGUuY2xhc3NMaXN0LmFkZChzKSA6ICF0ICYmIGUuY2xhc3NMaXN0LmNvbnRhaW5zKHMpICYmIGUuY2xhc3NMaXN0LnJlbW92ZShzKVxuICB9O1xuICBjb25zdCBEID0gKGUsIHQpID0+IHtcbiAgICBpZiAoIWUgfHwgZS5kZXN0cm95ZWQgfHwgIWUucGFyYW1zKSByZXR1cm47XG4gICAgY29uc3QgcyA9IHQuY2xvc2VzdChlLmlzRWxlbWVudCA/IFwic3dpcGVyLXNsaWRlXCIgOiBgLiR7ZS5wYXJhbXMuc2xpZGVDbGFzc31gKTtcbiAgICBpZiAocykge1xuICAgICAgbGV0IHQgPSBzLnF1ZXJ5U2VsZWN0b3IoYC4ke2UucGFyYW1zLmxhenlQcmVsb2FkZXJDbGFzc31gKTtcbiAgICAgICF0ICYmIGUuaXNFbGVtZW50ICYmIChzLnNoYWRvd1Jvb3QgPyB0ID0gcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoYC4ke2UucGFyYW1zLmxhenlQcmVsb2FkZXJDbGFzc31gKSA6IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKCkgPT4ge1xuICAgICAgICBzLnNoYWRvd1Jvb3QgJiYgKHQgPSBzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihgLiR7ZS5wYXJhbXMubGF6eVByZWxvYWRlckNsYXNzfWApLCB0ICYmIHQucmVtb3ZlKCkpXG4gICAgICB9KSkpLCB0ICYmIHQucmVtb3ZlKClcbiAgICB9XG4gIH0sIEcgPSAoZSwgdCkgPT4ge1xuICAgIGlmICghZS5zbGlkZXNbdF0pIHJldHVybjtcbiAgICBjb25zdCBzID0gZS5zbGlkZXNbdF0ucXVlcnlTZWxlY3RvcignW2xvYWRpbmc9XCJsYXp5XCJdJyk7XG4gICAgcyAmJiBzLnJlbW92ZUF0dHJpYnV0ZShcImxvYWRpbmdcIilcbiAgfSwgSCA9IGUgPT4ge1xuICAgIGlmICghZSB8fCBlLmRlc3Ryb3llZCB8fCAhZS5wYXJhbXMpIHJldHVybjtcbiAgICBsZXQgdCA9IGUucGFyYW1zLmxhenlQcmVsb2FkUHJldk5leHQ7XG4gICAgY29uc3QgcyA9IGUuc2xpZGVzLmxlbmd0aDtcbiAgICBpZiAoIXMgfHwgIXQgfHwgdCA8IDApIHJldHVybjtcbiAgICB0ID0gTWF0aC5taW4odCwgcyk7XG4gICAgY29uc3QgYSA9IFwiYXV0b1wiID09PSBlLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID8gZS5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogTWF0aC5jZWlsKGUucGFyYW1zLnNsaWRlc1BlclZpZXcpLFxuICAgICAgaSA9IGUuYWN0aXZlSW5kZXg7XG4gICAgaWYgKGUucGFyYW1zLmdyaWQgJiYgZS5wYXJhbXMuZ3JpZC5yb3dzID4gMSkge1xuICAgICAgY29uc3QgcyA9IGksIHIgPSBbcyAtIHRdO1xuICAgICAgcmV0dXJuIHIucHVzaCguLi5BcnJheS5mcm9tKHtsZW5ndGg6IHR9KS5tYXAoKChlLCB0KSA9PiBzICsgYSArIHQpKSksIHZvaWQgZS5zbGlkZXMuZm9yRWFjaCgoKHQsIHMpID0+IHtcbiAgICAgICAgci5pbmNsdWRlcyh0LmNvbHVtbikgJiYgRyhlLCBzKVxuICAgICAgfSkpXG4gICAgfVxuICAgIGNvbnN0IHIgPSBpICsgYSAtIDE7XG4gICAgaWYgKGUucGFyYW1zLnJld2luZCB8fCBlLnBhcmFtcy5sb29wKSBmb3IgKGxldCBhID0gaSAtIHQ7IGEgPD0gciArIHQ7IGEgKz0gMSkge1xuICAgICAgY29uc3QgdCA9IChhICUgcyArIHMpICUgcztcbiAgICAgICh0IDwgaSB8fCB0ID4gcikgJiYgRyhlLCB0KVxuICAgIH0gZWxzZSBmb3IgKGxldCBhID0gTWF0aC5tYXgoaSAtIHQsIDApOyBhIDw9IE1hdGgubWluKHIgKyB0LCBzIC0gMSk7IGEgKz0gMSkgYSAhPT0gaSAmJiAoYSA+IHIgfHwgYSA8IGkpICYmIEcoZSwgYSlcbiAgfTtcbiAgdmFyIEIgPSB7XG4gICAgdXBkYXRlU2l6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZSA9IHRoaXM7XG4gICAgICBsZXQgdCwgcztcbiAgICAgIGNvbnN0IGEgPSBlLmVsO1xuICAgICAgdCA9IHZvaWQgMCAhPT0gZS5wYXJhbXMud2lkdGggJiYgbnVsbCAhPT0gZS5wYXJhbXMud2lkdGggPyBlLnBhcmFtcy53aWR0aCA6IGEuY2xpZW50V2lkdGgsIHMgPSB2b2lkIDAgIT09IGUucGFyYW1zLmhlaWdodCAmJiBudWxsICE9PSBlLnBhcmFtcy5oZWlnaHQgPyBlLnBhcmFtcy5oZWlnaHQgOiBhLmNsaWVudEhlaWdodCwgMCA9PT0gdCAmJiBlLmlzSG9yaXpvbnRhbCgpIHx8IDAgPT09IHMgJiYgZS5pc1ZlcnRpY2FsKCkgfHwgKHQgPSB0IC0gcGFyc2VJbnQoYihhLCBcInBhZGRpbmctbGVmdFwiKSB8fCAwLCAxMCkgLSBwYXJzZUludChiKGEsIFwicGFkZGluZy1yaWdodFwiKSB8fCAwLCAxMCksIHMgPSBzIC0gcGFyc2VJbnQoYihhLCBcInBhZGRpbmctdG9wXCIpIHx8IDAsIDEwKSAtIHBhcnNlSW50KGIoYSwgXCJwYWRkaW5nLWJvdHRvbVwiKSB8fCAwLCAxMCksIE51bWJlci5pc05hTih0KSAmJiAodCA9IDApLCBOdW1iZXIuaXNOYU4ocykgJiYgKHMgPSAwKSwgT2JqZWN0LmFzc2lnbihlLCB7XG4gICAgICAgIHdpZHRoOiB0LFxuICAgICAgICBoZWlnaHQ6IHMsXG4gICAgICAgIHNpemU6IGUuaXNIb3Jpem9udGFsKCkgPyB0IDogc1xuICAgICAgfSkpXG4gICAgfSwgdXBkYXRlU2xpZGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBlID0gdGhpcztcblxuICAgICAgZnVuY3Rpb24gdCh0LCBzKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHQuZ2V0UHJvcGVydHlWYWx1ZShlLmdldERpcmVjdGlvbkxhYmVsKHMpKSB8fCAwKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBzID0gZS5wYXJhbXMsIHt3cmFwcGVyRWw6IGEsIHNsaWRlc0VsOiBpLCBzaXplOiByLCBydGxUcmFuc2xhdGU6IG4sIHdyb25nUlRMOiBsfSA9IGUsXG4gICAgICAgIG8gPSBlLnZpcnR1YWwgJiYgcy52aXJ0dWFsLmVuYWJsZWQsIGQgPSBvID8gZS52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBlLnNsaWRlcy5sZW5ndGgsXG4gICAgICAgIGMgPSBmKGksIGAuJHtlLnBhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCksIHAgPSBvID8gZS52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBjLmxlbmd0aDtcbiAgICAgIGxldCBtID0gW107XG4gICAgICBjb25zdCBoID0gW10sIGcgPSBbXTtcbiAgICAgIGxldCB2ID0gcy5zbGlkZXNPZmZzZXRCZWZvcmU7XG4gICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHYgJiYgKHYgPSBzLnNsaWRlc09mZnNldEJlZm9yZS5jYWxsKGUpKTtcbiAgICAgIGxldCB3ID0gcy5zbGlkZXNPZmZzZXRBZnRlcjtcbiAgICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdyAmJiAodyA9IHMuc2xpZGVzT2Zmc2V0QWZ0ZXIuY2FsbChlKSk7XG4gICAgICBjb25zdCB5ID0gZS5zbmFwR3JpZC5sZW5ndGgsIEUgPSBlLnNsaWRlc0dyaWQubGVuZ3RoO1xuICAgICAgbGV0IHggPSBzLnNwYWNlQmV0d2VlbiwgVCA9IC12LCBNID0gMCwgQyA9IDA7XG4gICAgICBpZiAodm9pZCAwID09PSByKSByZXR1cm47XG4gICAgICBcInN0cmluZ1wiID09IHR5cGVvZiB4ICYmIHguaW5kZXhPZihcIiVcIikgPj0gMCA/IHggPSBwYXJzZUZsb2F0KHgucmVwbGFjZShcIiVcIiwgXCJcIikpIC8gMTAwICogciA6IFwic3RyaW5nXCIgPT0gdHlwZW9mIHggJiYgKHggPSBwYXJzZUZsb2F0KHgpKSwgZS52aXJ0dWFsU2l6ZSA9IC14LCBjLmZvckVhY2goKGUgPT4ge1xuICAgICAgICBuID8gZS5zdHlsZS5tYXJnaW5MZWZ0ID0gXCJcIiA6IGUuc3R5bGUubWFyZ2luUmlnaHQgPSBcIlwiLCBlLnN0eWxlLm1hcmdpbkJvdHRvbSA9IFwiXCIsIGUuc3R5bGUubWFyZ2luVG9wID0gXCJcIlxuICAgICAgfSkpLCBzLmNlbnRlcmVkU2xpZGVzICYmIHMuY3NzTW9kZSAmJiAodShhLCBcIi0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1iZWZvcmVcIiwgXCJcIiksIHUoYSwgXCItLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYWZ0ZXJcIiwgXCJcIikpO1xuICAgICAgY29uc3QgUCA9IHMuZ3JpZCAmJiBzLmdyaWQucm93cyA+IDEgJiYgZS5ncmlkO1xuICAgICAgbGV0IEw7XG4gICAgICBQID8gZS5ncmlkLmluaXRTbGlkZXMoYykgOiBlLmdyaWQgJiYgZS5ncmlkLnVuc2V0U2xpZGVzKCk7XG4gICAgICBjb25zdCBJID0gXCJhdXRvXCIgPT09IHMuc2xpZGVzUGVyVmlldyAmJiBzLmJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKHMuYnJlYWtwb2ludHMpLmZpbHRlcigoZSA9PiB2b2lkIDAgIT09IHMuYnJlYWtwb2ludHNbZV0uc2xpZGVzUGVyVmlldykpLmxlbmd0aCA+IDA7XG4gICAgICBmb3IgKGxldCBhID0gMDsgYSA8IHA7IGEgKz0gMSkge1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgaWYgKEwgPSAwLCBjW2FdICYmIChpID0gY1thXSksIFAgJiYgZS5ncmlkLnVwZGF0ZVNsaWRlKGEsIGksIGMpLCAhY1thXSB8fCBcIm5vbmVcIiAhPT0gYihpLCBcImRpc3BsYXlcIikpIHtcbiAgICAgICAgICBpZiAoXCJhdXRvXCIgPT09IHMuc2xpZGVzUGVyVmlldykge1xuICAgICAgICAgICAgSSAmJiAoY1thXS5zdHlsZVtlLmdldERpcmVjdGlvbkxhYmVsKFwid2lkdGhcIildID0gXCJcIik7XG4gICAgICAgICAgICBjb25zdCByID0gZ2V0Q29tcHV0ZWRTdHlsZShpKSwgbiA9IGkuc3R5bGUudHJhbnNmb3JtLCBsID0gaS5zdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgICAgICAgICBpZiAobiAmJiAoaS5zdHlsZS50cmFuc2Zvcm0gPSBcIm5vbmVcIiksIGwgJiYgKGkuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gXCJub25lXCIpLCBzLnJvdW5kTGVuZ3RocykgTCA9IGUuaXNIb3Jpem9udGFsKCkgPyBTKGksIFwid2lkdGhcIiwgITApIDogUyhpLCBcImhlaWdodFwiLCAhMCk7IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCBlID0gdChyLCBcIndpZHRoXCIpLCBzID0gdChyLCBcInBhZGRpbmctbGVmdFwiKSwgYSA9IHQociwgXCJwYWRkaW5nLXJpZ2h0XCIpLCBuID0gdChyLCBcIm1hcmdpbi1sZWZ0XCIpLFxuICAgICAgICAgICAgICAgIGwgPSB0KHIsIFwibWFyZ2luLXJpZ2h0XCIpLCBvID0gci5nZXRQcm9wZXJ0eVZhbHVlKFwiYm94LXNpemluZ1wiKTtcbiAgICAgICAgICAgICAgaWYgKG8gJiYgXCJib3JkZXItYm94XCIgPT09IG8pIEwgPSBlICsgbiArIGw7IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHtjbGllbnRXaWR0aDogdCwgb2Zmc2V0V2lkdGg6IHJ9ID0gaTtcbiAgICAgICAgICAgICAgICBMID0gZSArIHMgKyBhICsgbiArIGwgKyAociAtIHQpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG4gJiYgKGkuc3R5bGUudHJhbnNmb3JtID0gbiksIGwgJiYgKGkuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gbCksIHMucm91bmRMZW5ndGhzICYmIChMID0gTWF0aC5mbG9vcihMKSlcbiAgICAgICAgICB9IGVsc2UgTCA9IChyIC0gKHMuc2xpZGVzUGVyVmlldyAtIDEpICogeCkgLyBzLnNsaWRlc1BlclZpZXcsIHMucm91bmRMZW5ndGhzICYmIChMID0gTWF0aC5mbG9vcihMKSksIGNbYV0gJiYgKGNbYV0uc3R5bGVbZS5nZXREaXJlY3Rpb25MYWJlbChcIndpZHRoXCIpXSA9IGAke0x9cHhgKTtcbiAgICAgICAgICBjW2FdICYmIChjW2FdLnN3aXBlclNsaWRlU2l6ZSA9IEwpLCBnLnB1c2goTCksIHMuY2VudGVyZWRTbGlkZXMgPyAoVCA9IFQgKyBMIC8gMiArIE0gLyAyICsgeCwgMCA9PT0gTSAmJiAwICE9PSBhICYmIChUID0gVCAtIHIgLyAyIC0geCksIDAgPT09IGEgJiYgKFQgPSBUIC0gciAvIDIgLSB4KSwgTWF0aC5hYnMoVCkgPCAuMDAxICYmIChUID0gMCksIHMucm91bmRMZW5ndGhzICYmIChUID0gTWF0aC5mbG9vcihUKSksIEMgJSBzLnNsaWRlc1Blckdyb3VwID09IDAgJiYgbS5wdXNoKFQpLCBoLnB1c2goVCkpIDogKHMucm91bmRMZW5ndGhzICYmIChUID0gTWF0aC5mbG9vcihUKSksIChDIC0gTWF0aC5taW4oZS5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBDKSkgJSBlLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PSAwICYmIG0ucHVzaChUKSwgaC5wdXNoKFQpLCBUID0gVCArIEwgKyB4KSwgZS52aXJ0dWFsU2l6ZSArPSBMICsgeCwgTSA9IEwsIEMgKz0gMVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZS52aXJ0dWFsU2l6ZSA9IE1hdGgubWF4KGUudmlydHVhbFNpemUsIHIpICsgdywgbiAmJiBsICYmIChcInNsaWRlXCIgPT09IHMuZWZmZWN0IHx8IFwiY292ZXJmbG93XCIgPT09IHMuZWZmZWN0KSAmJiAoYS5zdHlsZS53aWR0aCA9IGAke2UudmlydHVhbFNpemUgKyB4fXB4YCksIHMuc2V0V3JhcHBlclNpemUgJiYgKGEuc3R5bGVbZS5nZXREaXJlY3Rpb25MYWJlbChcIndpZHRoXCIpXSA9IGAke2UudmlydHVhbFNpemUgKyB4fXB4YCksIFAgJiYgZS5ncmlkLnVwZGF0ZVdyYXBwZXJTaXplKEwsIG0pLCAhcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBjb25zdCB0ID0gW107XG4gICAgICAgIGZvciAobGV0IGEgPSAwOyBhIDwgbS5sZW5ndGg7IGEgKz0gMSkge1xuICAgICAgICAgIGxldCBpID0gbVthXTtcbiAgICAgICAgICBzLnJvdW5kTGVuZ3RocyAmJiAoaSA9IE1hdGguZmxvb3IoaSkpLCBtW2FdIDw9IGUudmlydHVhbFNpemUgLSByICYmIHQucHVzaChpKVxuICAgICAgICB9XG4gICAgICAgIG0gPSB0LCBNYXRoLmZsb29yKGUudmlydHVhbFNpemUgLSByKSAtIE1hdGguZmxvb3IobVttLmxlbmd0aCAtIDFdKSA+IDEgJiYgbS5wdXNoKGUudmlydHVhbFNpemUgLSByKVxuICAgICAgfVxuICAgICAgaWYgKG8gJiYgcy5sb29wKSB7XG4gICAgICAgIGNvbnN0IHQgPSBnWzBdICsgeDtcbiAgICAgICAgaWYgKHMuc2xpZGVzUGVyR3JvdXAgPiAxKSB7XG4gICAgICAgICAgY29uc3QgYSA9IE1hdGguY2VpbCgoZS52aXJ0dWFsLnNsaWRlc0JlZm9yZSArIGUudmlydHVhbC5zbGlkZXNBZnRlcikgLyBzLnNsaWRlc1Blckdyb3VwKSxcbiAgICAgICAgICAgIGkgPSB0ICogcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgICAgICBmb3IgKGxldCBlID0gMDsgZSA8IGE7IGUgKz0gMSkgbS5wdXNoKG1bbS5sZW5ndGggLSAxXSArIGkpXG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgYSA9IDA7IGEgPCBlLnZpcnR1YWwuc2xpZGVzQmVmb3JlICsgZS52aXJ0dWFsLnNsaWRlc0FmdGVyOyBhICs9IDEpIDEgPT09IHMuc2xpZGVzUGVyR3JvdXAgJiYgbS5wdXNoKG1bbS5sZW5ndGggLSAxXSArIHQpLCBoLnB1c2goaFtoLmxlbmd0aCAtIDFdICsgdCksIGUudmlydHVhbFNpemUgKz0gdFxuICAgICAgfVxuICAgICAgaWYgKDAgPT09IG0ubGVuZ3RoICYmIChtID0gWzBdKSwgMCAhPT0geCkge1xuICAgICAgICBjb25zdCB0ID0gZS5pc0hvcml6b250YWwoKSAmJiBuID8gXCJtYXJnaW5MZWZ0XCIgOiBlLmdldERpcmVjdGlvbkxhYmVsKFwibWFyZ2luUmlnaHRcIik7XG4gICAgICAgIGMuZmlsdGVyKCgoZSwgdCkgPT4gIShzLmNzc01vZGUgJiYgIXMubG9vcCkgfHwgdCAhPT0gYy5sZW5ndGggLSAxKSkuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgZS5zdHlsZVt0XSA9IGAke3h9cHhgXG4gICAgICAgIH0pKVxuICAgICAgfVxuICAgICAgaWYgKHMuY2VudGVyZWRTbGlkZXMgJiYgcy5jZW50ZXJlZFNsaWRlc0JvdW5kcykge1xuICAgICAgICBsZXQgZSA9IDA7XG4gICAgICAgIGcuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgZSArPSB0ICsgKHggfHwgMClcbiAgICAgICAgfSkpLCBlIC09IHg7XG4gICAgICAgIGNvbnN0IHQgPSBlID4gciA/IGUgLSByIDogMDtcbiAgICAgICAgbSA9IG0ubWFwKChlID0+IGUgPD0gMCA/IC12IDogZSA+IHQgPyB0ICsgdyA6IGUpKVxuICAgICAgfVxuICAgICAgaWYgKHMuY2VudGVySW5zdWZmaWNpZW50U2xpZGVzKSB7XG4gICAgICAgIGxldCBlID0gMDtcbiAgICAgICAgZy5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICBlICs9IHQgKyAoeCB8fCAwKVxuICAgICAgICB9KSksIGUgLT0geDtcbiAgICAgICAgY29uc3QgdCA9IChzLnNsaWRlc09mZnNldEJlZm9yZSB8fCAwKSArIChzLnNsaWRlc09mZnNldEFmdGVyIHx8IDApO1xuICAgICAgICBpZiAoZSArIHQgPCByKSB7XG4gICAgICAgICAgY29uc3QgcyA9IChyIC0gZSAtIHQpIC8gMjtcbiAgICAgICAgICBtLmZvckVhY2goKChlLCB0KSA9PiB7XG4gICAgICAgICAgICBtW3RdID0gZSAtIHNcbiAgICAgICAgICB9KSksIGguZm9yRWFjaCgoKGUsIHQpID0+IHtcbiAgICAgICAgICAgIGhbdF0gPSBlICsgc1xuICAgICAgICAgIH0pKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoT2JqZWN0LmFzc2lnbihlLCB7XG4gICAgICAgIHNsaWRlczogYyxcbiAgICAgICAgc25hcEdyaWQ6IG0sXG4gICAgICAgIHNsaWRlc0dyaWQ6IGgsXG4gICAgICAgIHNsaWRlc1NpemVzR3JpZDogZ1xuICAgICAgfSksIHMuY2VudGVyZWRTbGlkZXMgJiYgcy5jc3NNb2RlICYmICFzLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgICAgIHUoYSwgXCItLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYmVmb3JlXCIsIC1tWzBdICsgXCJweFwiKSwgdShhLCBcIi0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlclwiLCBlLnNpemUgLyAyIC0gZ1tnLmxlbmd0aCAtIDFdIC8gMiArIFwicHhcIik7XG4gICAgICAgIGNvbnN0IHQgPSAtZS5zbmFwR3JpZFswXSwgcyA9IC1lLnNsaWRlc0dyaWRbMF07XG4gICAgICAgIGUuc25hcEdyaWQgPSBlLnNuYXBHcmlkLm1hcCgoZSA9PiBlICsgdCkpLCBlLnNsaWRlc0dyaWQgPSBlLnNsaWRlc0dyaWQubWFwKChlID0+IGUgKyBzKSlcbiAgICAgIH1cbiAgICAgIGlmIChwICE9PSBkICYmIGUuZW1pdChcInNsaWRlc0xlbmd0aENoYW5nZVwiKSwgbS5sZW5ndGggIT09IHkgJiYgKGUucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgZS5jaGVja092ZXJmbG93KCksIGUuZW1pdChcInNuYXBHcmlkTGVuZ3RoQ2hhbmdlXCIpKSwgaC5sZW5ndGggIT09IEUgJiYgZS5lbWl0KFwic2xpZGVzR3JpZExlbmd0aENoYW5nZVwiKSwgcy53YXRjaFNsaWRlc1Byb2dyZXNzICYmIGUudXBkYXRlU2xpZGVzT2Zmc2V0KCksIGUuZW1pdChcInNsaWRlc1VwZGF0ZWRcIiksICEobyB8fCBzLmNzc01vZGUgfHwgXCJzbGlkZVwiICE9PSBzLmVmZmVjdCAmJiBcImZhZGVcIiAhPT0gcy5lZmZlY3QpKSB7XG4gICAgICAgIGNvbnN0IHQgPSBgJHtzLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9YmFja2ZhY2UtaGlkZGVuYCwgYSA9IGUuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKHQpO1xuICAgICAgICBwIDw9IHMubWF4QmFja2ZhY2VIaWRkZW5TbGlkZXMgPyBhIHx8IGUuZWwuY2xhc3NMaXN0LmFkZCh0KSA6IGEgJiYgZS5lbC5jbGFzc0xpc3QucmVtb3ZlKHQpXG4gICAgICB9XG4gICAgfSwgdXBkYXRlQXV0b0hlaWdodDogZnVuY3Rpb24gKGUpIHtcbiAgICAgIGNvbnN0IHQgPSB0aGlzLCBzID0gW10sIGEgPSB0LnZpcnR1YWwgJiYgdC5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgICAgbGV0IGksIHIgPSAwO1xuICAgICAgXCJudW1iZXJcIiA9PSB0eXBlb2YgZSA/IHQuc2V0VHJhbnNpdGlvbihlKSA6ICEwID09PSBlICYmIHQuc2V0VHJhbnNpdGlvbih0LnBhcmFtcy5zcGVlZCk7XG4gICAgICBjb25zdCBuID0gZSA9PiBhID8gdC5zbGlkZXNbdC5nZXRTbGlkZUluZGV4QnlEYXRhKGUpXSA6IHQuc2xpZGVzW2VdO1xuICAgICAgaWYgKFwiYXV0b1wiICE9PSB0LnBhcmFtcy5zbGlkZXNQZXJWaWV3ICYmIHQucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSBpZiAodC5wYXJhbXMuY2VudGVyZWRTbGlkZXMpICh0LnZpc2libGVTbGlkZXMgfHwgW10pLmZvckVhY2goKGUgPT4ge1xuICAgICAgICBzLnB1c2goZSlcbiAgICAgIH0pKTsgZWxzZSBmb3IgKGkgPSAwOyBpIDwgTWF0aC5jZWlsKHQucGFyYW1zLnNsaWRlc1BlclZpZXcpOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgZSA9IHQuYWN0aXZlSW5kZXggKyBpO1xuICAgICAgICBpZiAoZSA+IHQuc2xpZGVzLmxlbmd0aCAmJiAhYSkgYnJlYWs7XG4gICAgICAgIHMucHVzaChuKGUpKVxuICAgICAgfSBlbHNlIHMucHVzaChuKHQuYWN0aXZlSW5kZXgpKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSArPSAxKSBpZiAodm9pZCAwICE9PSBzW2ldKSB7XG4gICAgICAgIGNvbnN0IGUgPSBzW2ldLm9mZnNldEhlaWdodDtcbiAgICAgICAgciA9IGUgPiByID8gZSA6IHJcbiAgICAgIH1cbiAgICAgIChyIHx8IDAgPT09IHIpICYmICh0LndyYXBwZXJFbC5zdHlsZS5oZWlnaHQgPSBgJHtyfXB4YClcbiAgICB9LCB1cGRhdGVTbGlkZXNPZmZzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGUgPSB0aGlzLCB0ID0gZS5zbGlkZXMsXG4gICAgICAgIHMgPSBlLmlzRWxlbWVudCA/IGUuaXNIb3Jpem9udGFsKCkgPyBlLndyYXBwZXJFbC5vZmZzZXRMZWZ0IDogZS53cmFwcGVyRWwub2Zmc2V0VG9wIDogMDtcbiAgICAgIGZvciAobGV0IGEgPSAwOyBhIDwgdC5sZW5ndGg7IGEgKz0gMSkgdFthXS5zd2lwZXJTbGlkZU9mZnNldCA9IChlLmlzSG9yaXpvbnRhbCgpID8gdFthXS5vZmZzZXRMZWZ0IDogdFthXS5vZmZzZXRUb3ApIC0gcyAtIGUuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KClcbiAgICB9LCB1cGRhdGVTbGlkZXNQcm9ncmVzczogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IHRoaXMgJiYgdGhpcy50cmFuc2xhdGUgfHwgMCk7XG4gICAgICBjb25zdCB0ID0gdGhpcywgcyA9IHQucGFyYW1zLCB7c2xpZGVzOiBhLCBydGxUcmFuc2xhdGU6IGksIHNuYXBHcmlkOiByfSA9IHQ7XG4gICAgICBpZiAoMCA9PT0gYS5sZW5ndGgpIHJldHVybjtcbiAgICAgIHZvaWQgMCA9PT0gYVswXS5zd2lwZXJTbGlkZU9mZnNldCAmJiB0LnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICAgICAgbGV0IG4gPSAtZTtcbiAgICAgIGkgJiYgKG4gPSBlKSwgdC52aXNpYmxlU2xpZGVzSW5kZXhlcyA9IFtdLCB0LnZpc2libGVTbGlkZXMgPSBbXTtcbiAgICAgIGxldCBsID0gcy5zcGFjZUJldHdlZW47XG4gICAgICBcInN0cmluZ1wiID09IHR5cGVvZiBsICYmIGwuaW5kZXhPZihcIiVcIikgPj0gMCA/IGwgPSBwYXJzZUZsb2F0KGwucmVwbGFjZShcIiVcIiwgXCJcIikpIC8gMTAwICogdC5zaXplIDogXCJzdHJpbmdcIiA9PSB0eXBlb2YgbCAmJiAobCA9IHBhcnNlRmxvYXQobCkpO1xuICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCBhLmxlbmd0aDsgZSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG8gPSBhW2VdO1xuICAgICAgICBsZXQgZCA9IG8uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICAgIHMuY3NzTW9kZSAmJiBzLmNlbnRlcmVkU2xpZGVzICYmIChkIC09IGFbMF0uc3dpcGVyU2xpZGVPZmZzZXQpO1xuICAgICAgICBjb25zdCBjID0gKG4gKyAocy5jZW50ZXJlZFNsaWRlcyA/IHQubWluVHJhbnNsYXRlKCkgOiAwKSAtIGQpIC8gKG8uc3dpcGVyU2xpZGVTaXplICsgbCksXG4gICAgICAgICAgcCA9IChuIC0gclswXSArIChzLmNlbnRlcmVkU2xpZGVzID8gdC5taW5UcmFuc2xhdGUoKSA6IDApIC0gZCkgLyAoby5zd2lwZXJTbGlkZVNpemUgKyBsKSwgdSA9IC0obiAtIGQpLFxuICAgICAgICAgIG0gPSB1ICsgdC5zbGlkZXNTaXplc0dyaWRbZV0sIGggPSB1ID49IDAgJiYgdSA8PSB0LnNpemUgLSB0LnNsaWRlc1NpemVzR3JpZFtlXSxcbiAgICAgICAgICBmID0gdSA+PSAwICYmIHUgPCB0LnNpemUgLSAxIHx8IG0gPiAxICYmIG0gPD0gdC5zaXplIHx8IHUgPD0gMCAmJiBtID49IHQuc2l6ZTtcbiAgICAgICAgZiAmJiAodC52aXNpYmxlU2xpZGVzLnB1c2gobyksIHQudmlzaWJsZVNsaWRlc0luZGV4ZXMucHVzaChlKSksIGsobywgZiwgcy5zbGlkZVZpc2libGVDbGFzcyksIGsobywgaCwgcy5zbGlkZUZ1bGx5VmlzaWJsZUNsYXNzKSwgby5wcm9ncmVzcyA9IGkgPyAtYyA6IGMsIG8ub3JpZ2luYWxQcm9ncmVzcyA9IGkgPyAtcCA6IHBcbiAgICAgIH1cbiAgICB9LCB1cGRhdGVQcm9ncmVzczogZnVuY3Rpb24gKGUpIHtcbiAgICAgIGNvbnN0IHQgPSB0aGlzO1xuICAgICAgaWYgKHZvaWQgMCA9PT0gZSkge1xuICAgICAgICBjb25zdCBzID0gdC5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7XG4gICAgICAgIGUgPSB0ICYmIHQudHJhbnNsYXRlICYmIHQudHJhbnNsYXRlICogcyB8fCAwXG4gICAgICB9XG4gICAgICBjb25zdCBzID0gdC5wYXJhbXMsIGEgPSB0Lm1heFRyYW5zbGF0ZSgpIC0gdC5taW5UcmFuc2xhdGUoKTtcbiAgICAgIGxldCB7cHJvZ3Jlc3M6IGksIGlzQmVnaW5uaW5nOiByLCBpc0VuZDogbiwgcHJvZ3Jlc3NMb29wOiBsfSA9IHQ7XG4gICAgICBjb25zdCBvID0gciwgZCA9IG47XG4gICAgICBpZiAoMCA9PT0gYSkgaSA9IDAsIHIgPSAhMCwgbiA9ICEwOyBlbHNlIHtcbiAgICAgICAgaSA9IChlIC0gdC5taW5UcmFuc2xhdGUoKSkgLyBhO1xuICAgICAgICBjb25zdCBzID0gTWF0aC5hYnMoZSAtIHQubWluVHJhbnNsYXRlKCkpIDwgMSwgbCA9IE1hdGguYWJzKGUgLSB0Lm1heFRyYW5zbGF0ZSgpKSA8IDE7XG4gICAgICAgIHIgPSBzIHx8IGkgPD0gMCwgbiA9IGwgfHwgaSA+PSAxLCBzICYmIChpID0gMCksIGwgJiYgKGkgPSAxKVxuICAgICAgfVxuICAgICAgaWYgKHMubG9vcCkge1xuICAgICAgICBjb25zdCBzID0gdC5nZXRTbGlkZUluZGV4QnlEYXRhKDApLCBhID0gdC5nZXRTbGlkZUluZGV4QnlEYXRhKHQuc2xpZGVzLmxlbmd0aCAtIDEpLCBpID0gdC5zbGlkZXNHcmlkW3NdLFxuICAgICAgICAgIHIgPSB0LnNsaWRlc0dyaWRbYV0sIG4gPSB0LnNsaWRlc0dyaWRbdC5zbGlkZXNHcmlkLmxlbmd0aCAtIDFdLCBvID0gTWF0aC5hYnMoZSk7XG4gICAgICAgIGwgPSBvID49IGkgPyAobyAtIGkpIC8gbiA6IChvICsgbiAtIHIpIC8gbiwgbCA+IDEgJiYgKGwgLT0gMSlcbiAgICAgIH1cbiAgICAgIE9iamVjdC5hc3NpZ24odCwge1xuICAgICAgICBwcm9ncmVzczogaSxcbiAgICAgICAgcHJvZ3Jlc3NMb29wOiBsLFxuICAgICAgICBpc0JlZ2lubmluZzogcixcbiAgICAgICAgaXNFbmQ6IG5cbiAgICAgIH0pLCAocy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHMuY2VudGVyZWRTbGlkZXMgJiYgcy5hdXRvSGVpZ2h0KSAmJiB0LnVwZGF0ZVNsaWRlc1Byb2dyZXNzKGUpLCByICYmICFvICYmIHQuZW1pdChcInJlYWNoQmVnaW5uaW5nIHRvRWRnZVwiKSwgbiAmJiAhZCAmJiB0LmVtaXQoXCJyZWFjaEVuZCB0b0VkZ2VcIiksIChvICYmICFyIHx8IGQgJiYgIW4pICYmIHQuZW1pdChcImZyb21FZGdlXCIpLCB0LmVtaXQoXCJwcm9ncmVzc1wiLCBpKVxuICAgIH0sIHVwZGF0ZVNsaWRlc0NsYXNzZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGUgPSB0aGlzLCB7c2xpZGVzOiB0LCBwYXJhbXM6IHMsIHNsaWRlc0VsOiBhLCBhY3RpdmVJbmRleDogaX0gPSBlLCByID0gZS52aXJ0dWFsICYmIHMudmlydHVhbC5lbmFibGVkLFxuICAgICAgICBuID0gZS5ncmlkICYmIHMuZ3JpZCAmJiBzLmdyaWQucm93cyA+IDEsIGwgPSBlID0+IGYoYSwgYC4ke3Muc2xpZGVDbGFzc30ke2V9LCBzd2lwZXItc2xpZGUke2V9YClbMF07XG4gICAgICBsZXQgbywgZCwgYztcbiAgICAgIGlmIChyKSBpZiAocy5sb29wKSB7XG4gICAgICAgIGxldCB0ID0gaSAtIGUudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgICAgIHQgPCAwICYmICh0ID0gZS52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyB0KSwgdCA+PSBlLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCAmJiAodCAtPSBlLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCksIG8gPSBsKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3R9XCJdYClcbiAgICAgIH0gZWxzZSBvID0gbChgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtpfVwiXWApOyBlbHNlIG4gPyAobyA9IHQuZmlsdGVyKChlID0+IGUuY29sdW1uID09PSBpKSlbMF0sIGMgPSB0LmZpbHRlcigoZSA9PiBlLmNvbHVtbiA9PT0gaSArIDEpKVswXSwgZCA9IHQuZmlsdGVyKChlID0+IGUuY29sdW1uID09PSBpIC0gMSkpWzBdKSA6IG8gPSB0W2ldO1xuICAgICAgbyAmJiAobiB8fCAoYyA9IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgIGNvbnN0IHMgPSBbXTtcbiAgICAgICAgZm9yICg7IGUubmV4dEVsZW1lbnRTaWJsaW5nOykge1xuICAgICAgICAgIGNvbnN0IGEgPSBlLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICB0ID8gYS5tYXRjaGVzKHQpICYmIHMucHVzaChhKSA6IHMucHVzaChhKSwgZSA9IGFcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc1xuICAgICAgfShvLCBgLiR7cy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYClbMF0sIHMubG9vcCAmJiAhYyAmJiAoYyA9IHRbMF0pLCBkID0gZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgY29uc3QgcyA9IFtdO1xuICAgICAgICBmb3IgKDsgZS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nOykge1xuICAgICAgICAgIGNvbnN0IGEgPSBlLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgdCA/IGEubWF0Y2hlcyh0KSAmJiBzLnB1c2goYSkgOiBzLnB1c2goYSksIGUgPSBhXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNcbiAgICAgIH0obywgYC4ke3Muc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApWzBdLCBzLmxvb3AgJiYgMCA9PT0gIWQgJiYgKGQgPSB0W3QubGVuZ3RoIC0gMV0pKSksIHQuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgIE8oZSwgZSA9PT0gbywgcy5zbGlkZUFjdGl2ZUNsYXNzKSwgTyhlLCBlID09PSBjLCBzLnNsaWRlTmV4dENsYXNzKSwgTyhlLCBlID09PSBkLCBzLnNsaWRlUHJldkNsYXNzKVxuICAgICAgfSkpLCBlLmVtaXRTbGlkZXNDbGFzc2VzKClcbiAgICB9LCB1cGRhdGVBY3RpdmVJbmRleDogZnVuY3Rpb24gKGUpIHtcbiAgICAgIGNvbnN0IHQgPSB0aGlzLCBzID0gdC5ydGxUcmFuc2xhdGUgPyB0LnRyYW5zbGF0ZSA6IC10LnRyYW5zbGF0ZSwge1xuICAgICAgICBzbmFwR3JpZDogYSxcbiAgICAgICAgcGFyYW1zOiBpLFxuICAgICAgICBhY3RpdmVJbmRleDogcixcbiAgICAgICAgcmVhbEluZGV4OiBuLFxuICAgICAgICBzbmFwSW5kZXg6IGxcbiAgICAgIH0gPSB0O1xuICAgICAgbGV0IG8sIGQgPSBlO1xuICAgICAgY29uc3QgYyA9IGUgPT4ge1xuICAgICAgICBsZXQgcyA9IGUgLSB0LnZpcnR1YWwuc2xpZGVzQmVmb3JlO1xuICAgICAgICByZXR1cm4gcyA8IDAgJiYgKHMgPSB0LnZpcnR1YWwuc2xpZGVzLmxlbmd0aCArIHMpLCBzID49IHQudmlydHVhbC5zbGlkZXMubGVuZ3RoICYmIChzIC09IHQudmlydHVhbC5zbGlkZXMubGVuZ3RoKSwgc1xuICAgICAgfTtcbiAgICAgIGlmICh2b2lkIDAgPT09IGQgJiYgKGQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBjb25zdCB7c2xpZGVzR3JpZDogdCwgcGFyYW1zOiBzfSA9IGUsIGEgPSBlLnJ0bFRyYW5zbGF0ZSA/IGUudHJhbnNsYXRlIDogLWUudHJhbnNsYXRlO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCB0Lmxlbmd0aDsgZSArPSAxKSB2b2lkIDAgIT09IHRbZSArIDFdID8gYSA+PSB0W2VdICYmIGEgPCB0W2UgKyAxXSAtICh0W2UgKyAxXSAtIHRbZV0pIC8gMiA/IGkgPSBlIDogYSA+PSB0W2VdICYmIGEgPCB0W2UgKyAxXSAmJiAoaSA9IGUgKyAxKSA6IGEgPj0gdFtlXSAmJiAoaSA9IGUpO1xuICAgICAgICByZXR1cm4gcy5ub3JtYWxpemVTbGlkZUluZGV4ICYmIChpIDwgMCB8fCB2b2lkIDAgPT09IGkpICYmIChpID0gMCksIGlcbiAgICAgIH0odCkpLCBhLmluZGV4T2YocykgPj0gMCkgbyA9IGEuaW5kZXhPZihzKTsgZWxzZSB7XG4gICAgICAgIGNvbnN0IGUgPSBNYXRoLm1pbihpLnNsaWRlc1Blckdyb3VwU2tpcCwgZCk7XG4gICAgICAgIG8gPSBlICsgTWF0aC5mbG9vcigoZCAtIGUpIC8gaS5zbGlkZXNQZXJHcm91cClcbiAgICAgIH1cbiAgICAgIGlmIChvID49IGEubGVuZ3RoICYmIChvID0gYS5sZW5ndGggLSAxKSwgZCA9PT0gciAmJiAhdC5wYXJhbXMubG9vcCkgcmV0dXJuIHZvaWQgKG8gIT09IGwgJiYgKHQuc25hcEluZGV4ID0gbywgdC5lbWl0KFwic25hcEluZGV4Q2hhbmdlXCIpKSk7XG4gICAgICBpZiAoZCA9PT0gciAmJiB0LnBhcmFtcy5sb29wICYmIHQudmlydHVhbCAmJiB0LnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybiB2b2lkICh0LnJlYWxJbmRleCA9IGMoZCkpO1xuICAgICAgY29uc3QgcCA9IHQuZ3JpZCAmJiBpLmdyaWQgJiYgaS5ncmlkLnJvd3MgPiAxO1xuICAgICAgbGV0IHU7XG4gICAgICBpZiAodC52aXJ0dWFsICYmIGkudmlydHVhbC5lbmFibGVkICYmIGkubG9vcCkgdSA9IGMoZCk7IGVsc2UgaWYgKHApIHtcbiAgICAgICAgY29uc3QgZSA9IHQuc2xpZGVzLmZpbHRlcigoZSA9PiBlLmNvbHVtbiA9PT0gZCkpWzBdO1xuICAgICAgICBsZXQgcyA9IHBhcnNlSW50KGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIiksIDEwKTtcbiAgICAgICAgTnVtYmVyLmlzTmFOKHMpICYmIChzID0gTWF0aC5tYXgodC5zbGlkZXMuaW5kZXhPZihlKSwgMCkpLCB1ID0gTWF0aC5mbG9vcihzIC8gaS5ncmlkLnJvd3MpXG4gICAgICB9IGVsc2UgaWYgKHQuc2xpZGVzW2RdKSB7XG4gICAgICAgIGNvbnN0IGUgPSB0LnNsaWRlc1tkXS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKTtcbiAgICAgICAgdSA9IGUgPyBwYXJzZUludChlLCAxMCkgOiBkXG4gICAgICB9IGVsc2UgdSA9IGQ7XG4gICAgICBPYmplY3QuYXNzaWduKHQsIHtcbiAgICAgICAgcHJldmlvdXNTbmFwSW5kZXg6IGwsXG4gICAgICAgIHNuYXBJbmRleDogbyxcbiAgICAgICAgcHJldmlvdXNSZWFsSW5kZXg6IG4sXG4gICAgICAgIHJlYWxJbmRleDogdSxcbiAgICAgICAgcHJldmlvdXNJbmRleDogcixcbiAgICAgICAgYWN0aXZlSW5kZXg6IGRcbiAgICAgIH0pLCB0LmluaXRpYWxpemVkICYmIEgodCksIHQuZW1pdChcImFjdGl2ZUluZGV4Q2hhbmdlXCIpLCB0LmVtaXQoXCJzbmFwSW5kZXhDaGFuZ2VcIiksICh0LmluaXRpYWxpemVkIHx8IHQucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCkgJiYgKG4gIT09IHUgJiYgdC5lbWl0KFwicmVhbEluZGV4Q2hhbmdlXCIpLCB0LmVtaXQoXCJzbGlkZUNoYW5nZVwiKSlcbiAgICB9LCB1cGRhdGVDbGlja2VkU2xpZGU6IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICBjb25zdCBzID0gdGhpcywgYSA9IHMucGFyYW1zO1xuICAgICAgbGV0IGkgPSBlLmNsb3Nlc3QoYC4ke2Euc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICAgICAgIWkgJiYgcy5pc0VsZW1lbnQgJiYgdCAmJiB0Lmxlbmd0aCA+IDEgJiYgdC5pbmNsdWRlcyhlKSAmJiBbLi4udC5zbGljZSh0LmluZGV4T2YoZSkgKyAxLCB0Lmxlbmd0aCldLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAhaSAmJiBlLm1hdGNoZXMgJiYgZS5tYXRjaGVzKGAuJHthLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKSAmJiAoaSA9IGUpXG4gICAgICB9KSk7XG4gICAgICBsZXQgciwgbiA9ICExO1xuICAgICAgaWYgKGkpIGZvciAobGV0IGUgPSAwOyBlIDwgcy5zbGlkZXMubGVuZ3RoOyBlICs9IDEpIGlmIChzLnNsaWRlc1tlXSA9PT0gaSkge1xuICAgICAgICBuID0gITAsIHIgPSBlO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgaWYgKCFpIHx8ICFuKSByZXR1cm4gcy5jbGlja2VkU2xpZGUgPSB2b2lkIDAsIHZvaWQgKHMuY2xpY2tlZEluZGV4ID0gdm9pZCAwKTtcbiAgICAgIHMuY2xpY2tlZFNsaWRlID0gaSwgcy52aXJ0dWFsICYmIHMucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHMuY2xpY2tlZEluZGV4ID0gcGFyc2VJbnQoaS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKSwgMTApIDogcy5jbGlja2VkSW5kZXggPSByLCBhLnNsaWRlVG9DbGlja2VkU2xpZGUgJiYgdm9pZCAwICE9PSBzLmNsaWNrZWRJbmRleCAmJiBzLmNsaWNrZWRJbmRleCAhPT0gcy5hY3RpdmVJbmRleCAmJiBzLnNsaWRlVG9DbGlja2VkU2xpZGUoKVxuICAgIH1cbiAgfTtcbiAgdmFyIE4gPSB7XG4gICAgZ2V0VHJhbnNsYXRlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgdm9pZCAwID09PSBlICYmIChlID0gdGhpcy5pc0hvcml6b250YWwoKSA/IFwieFwiIDogXCJ5XCIpO1xuICAgICAgY29uc3Qge3BhcmFtczogdCwgcnRsVHJhbnNsYXRlOiBzLCB0cmFuc2xhdGU6IGEsIHdyYXBwZXJFbDogaX0gPSB0aGlzO1xuICAgICAgaWYgKHQudmlydHVhbFRyYW5zbGF0ZSkgcmV0dXJuIHMgPyAtYSA6IGE7XG4gICAgICBpZiAodC5jc3NNb2RlKSByZXR1cm4gYTtcbiAgICAgIGxldCByID0gZChpLCBlKTtcbiAgICAgIHJldHVybiByICs9IHRoaXMuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCksIHMgJiYgKHIgPSAtciksIHIgfHwgMFxuICAgIH0sIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgIGNvbnN0IHMgPSB0aGlzLCB7cnRsVHJhbnNsYXRlOiBhLCBwYXJhbXM6IGksIHdyYXBwZXJFbDogciwgcHJvZ3Jlc3M6IG59ID0gcztcbiAgICAgIGxldCBsLCBvID0gMCwgZCA9IDA7XG4gICAgICBzLmlzSG9yaXpvbnRhbCgpID8gbyA9IGEgPyAtZSA6IGUgOiBkID0gZSwgaS5yb3VuZExlbmd0aHMgJiYgKG8gPSBNYXRoLmZsb29yKG8pLCBkID0gTWF0aC5mbG9vcihkKSksIHMucHJldmlvdXNUcmFuc2xhdGUgPSBzLnRyYW5zbGF0ZSwgcy50cmFuc2xhdGUgPSBzLmlzSG9yaXpvbnRhbCgpID8gbyA6IGQsIGkuY3NzTW9kZSA/IHJbcy5pc0hvcml6b250YWwoKSA/IFwic2Nyb2xsTGVmdFwiIDogXCJzY3JvbGxUb3BcIl0gPSBzLmlzSG9yaXpvbnRhbCgpID8gLW8gOiAtZCA6IGkudmlydHVhbFRyYW5zbGF0ZSB8fCAocy5pc0hvcml6b250YWwoKSA/IG8gLT0gcy5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKSA6IGQgLT0gcy5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKSwgci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHtvfXB4LCAke2R9cHgsIDBweClgKTtcbiAgICAgIGNvbnN0IGMgPSBzLm1heFRyYW5zbGF0ZSgpIC0gcy5taW5UcmFuc2xhdGUoKTtcbiAgICAgIGwgPSAwID09PSBjID8gMCA6IChlIC0gcy5taW5UcmFuc2xhdGUoKSkgLyBjLCBsICE9PSBuICYmIHMudXBkYXRlUHJvZ3Jlc3MoZSksIHMuZW1pdChcInNldFRyYW5zbGF0ZVwiLCBzLnRyYW5zbGF0ZSwgdClcbiAgICB9LCBtaW5UcmFuc2xhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAtdGhpcy5zbmFwR3JpZFswXVxuICAgIH0sIG1heFRyYW5zbGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIC10aGlzLnNuYXBHcmlkW3RoaXMuc25hcEdyaWQubGVuZ3RoIC0gMV1cbiAgICB9LCB0cmFuc2xhdGVUbzogZnVuY3Rpb24gKGUsIHQsIHMsIGEsIGkpIHtcbiAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IDApLCB2b2lkIDAgPT09IHQgJiYgKHQgPSB0aGlzLnBhcmFtcy5zcGVlZCksIHZvaWQgMCA9PT0gcyAmJiAocyA9ICEwKSwgdm9pZCAwID09PSBhICYmIChhID0gITApO1xuICAgICAgY29uc3QgciA9IHRoaXMsIHtwYXJhbXM6IG4sIHdyYXBwZXJFbDogbH0gPSByO1xuICAgICAgaWYgKHIuYW5pbWF0aW5nICYmIG4ucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSByZXR1cm4gITE7XG4gICAgICBjb25zdCBvID0gci5taW5UcmFuc2xhdGUoKSwgZCA9IHIubWF4VHJhbnNsYXRlKCk7XG4gICAgICBsZXQgYztcbiAgICAgIGlmIChjID0gYSAmJiBlID4gbyA/IG8gOiBhICYmIGUgPCBkID8gZCA6IGUsIHIudXBkYXRlUHJvZ3Jlc3MoYyksIG4uY3NzTW9kZSkge1xuICAgICAgICBjb25zdCBlID0gci5pc0hvcml6b250YWwoKTtcbiAgICAgICAgaWYgKDAgPT09IHQpIGxbZSA/IFwic2Nyb2xsTGVmdFwiIDogXCJzY3JvbGxUb3BcIl0gPSAtYzsgZWxzZSB7XG4gICAgICAgICAgaWYgKCFyLnN1cHBvcnQuc21vb3RoU2Nyb2xsKSByZXR1cm4gbSh7c3dpcGVyOiByLCB0YXJnZXRQb3NpdGlvbjogLWMsIHNpZGU6IGUgPyBcImxlZnRcIiA6IFwidG9wXCJ9KSwgITA7XG4gICAgICAgICAgbC5zY3JvbGxUbyh7W2UgPyBcImxlZnRcIiA6IFwidG9wXCJdOiAtYywgYmVoYXZpb3I6IFwic21vb3RoXCJ9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMFxuICAgICAgfVxuICAgICAgcmV0dXJuIDAgPT09IHQgPyAoci5zZXRUcmFuc2l0aW9uKDApLCByLnNldFRyYW5zbGF0ZShjKSwgcyAmJiAoci5lbWl0KFwiYmVmb3JlVHJhbnNpdGlvblN0YXJ0XCIsIHQsIGkpLCByLmVtaXQoXCJ0cmFuc2l0aW9uRW5kXCIpKSkgOiAoci5zZXRUcmFuc2l0aW9uKHQpLCByLnNldFRyYW5zbGF0ZShjKSwgcyAmJiAoci5lbWl0KFwiYmVmb3JlVHJhbnNpdGlvblN0YXJ0XCIsIHQsIGkpLCByLmVtaXQoXCJ0cmFuc2l0aW9uU3RhcnRcIikpLCByLmFuaW1hdGluZyB8fCAoci5hbmltYXRpbmcgPSAhMCwgci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgfHwgKHIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgciAmJiAhci5kZXN0cm95ZWQgJiYgZS50YXJnZXQgPT09IHRoaXMgJiYgKHIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIHIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSwgci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsLCBkZWxldGUgci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQsIHIuYW5pbWF0aW5nID0gITEsIHMgJiYgci5lbWl0KFwidHJhbnNpdGlvbkVuZFwiKSlcbiAgICAgIH0pLCByLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCByLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkpKSwgITBcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gWChlKSB7XG4gICAgbGV0IHtzd2lwZXI6IHQsIHJ1bkNhbGxiYWNrczogcywgZGlyZWN0aW9uOiBhLCBzdGVwOiBpfSA9IGU7XG4gICAgY29uc3Qge2FjdGl2ZUluZGV4OiByLCBwcmV2aW91c0luZGV4OiBufSA9IHQ7XG4gICAgbGV0IGwgPSBhO1xuICAgIGlmIChsIHx8IChsID0gciA+IG4gPyBcIm5leHRcIiA6IHIgPCBuID8gXCJwcmV2XCIgOiBcInJlc2V0XCIpLCB0LmVtaXQoYHRyYW5zaXRpb24ke2l9YCksIHMgJiYgciAhPT0gbikge1xuICAgICAgaWYgKFwicmVzZXRcIiA9PT0gbCkgcmV0dXJuIHZvaWQgdC5lbWl0KGBzbGlkZVJlc2V0VHJhbnNpdGlvbiR7aX1gKTtcbiAgICAgIHQuZW1pdChgc2xpZGVDaGFuZ2VUcmFuc2l0aW9uJHtpfWApLCBcIm5leHRcIiA9PT0gbCA/IHQuZW1pdChgc2xpZGVOZXh0VHJhbnNpdGlvbiR7aX1gKSA6IHQuZW1pdChgc2xpZGVQcmV2VHJhbnNpdGlvbiR7aX1gKVxuICAgIH1cbiAgfVxuXG4gIHZhciBZID0ge1xuICAgIHNsaWRlVG86IGZ1bmN0aW9uIChlLCB0LCBzLCBhLCBpKSB7XG4gICAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSAwKSwgdm9pZCAwID09PSBzICYmIChzID0gITApLCBcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIChlID0gcGFyc2VJbnQoZSwgMTApKTtcbiAgICAgIGNvbnN0IHIgPSB0aGlzO1xuICAgICAgbGV0IG4gPSBlO1xuICAgICAgbiA8IDAgJiYgKG4gPSAwKTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcGFyYW1zOiBsLFxuICAgICAgICBzbmFwR3JpZDogbyxcbiAgICAgICAgc2xpZGVzR3JpZDogZCxcbiAgICAgICAgcHJldmlvdXNJbmRleDogYyxcbiAgICAgICAgYWN0aXZlSW5kZXg6IHAsXG4gICAgICAgIHJ0bFRyYW5zbGF0ZTogdSxcbiAgICAgICAgd3JhcHBlckVsOiBoLFxuICAgICAgICBlbmFibGVkOiBmXG4gICAgICB9ID0gcjtcbiAgICAgIGlmICghZiAmJiAhYSAmJiAhaSB8fCByLmRlc3Ryb3llZCB8fCByLmFuaW1hdGluZyAmJiBsLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikgcmV0dXJuICExO1xuICAgICAgdm9pZCAwID09PSB0ICYmICh0ID0gci5wYXJhbXMuc3BlZWQpO1xuICAgICAgY29uc3QgZyA9IE1hdGgubWluKHIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgbik7XG4gICAgICBsZXQgdiA9IGcgKyBNYXRoLmZsb29yKChuIC0gZykgLyByLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgICB2ID49IG8ubGVuZ3RoICYmICh2ID0gby5sZW5ndGggLSAxKTtcbiAgICAgIGNvbnN0IHcgPSAtb1t2XTtcbiAgICAgIGlmIChsLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIGZvciAobGV0IGUgPSAwOyBlIDwgZC5sZW5ndGg7IGUgKz0gMSkge1xuICAgICAgICBjb25zdCB0ID0gLU1hdGguZmxvb3IoMTAwICogdyksIHMgPSBNYXRoLmZsb29yKDEwMCAqIGRbZV0pLCBhID0gTWF0aC5mbG9vcigxMDAgKiBkW2UgKyAxXSk7XG4gICAgICAgIHZvaWQgMCAhPT0gZFtlICsgMV0gPyB0ID49IHMgJiYgdCA8IGEgLSAoYSAtIHMpIC8gMiA/IG4gPSBlIDogdCA+PSBzICYmIHQgPCBhICYmIChuID0gZSArIDEpIDogdCA+PSBzICYmIChuID0gZSlcbiAgICAgIH1cbiAgICAgIGlmIChyLmluaXRpYWxpemVkICYmIG4gIT09IHApIHtcbiAgICAgICAgaWYgKCFyLmFsbG93U2xpZGVOZXh0ICYmICh1ID8gdyA+IHIudHJhbnNsYXRlICYmIHcgPiByLm1pblRyYW5zbGF0ZSgpIDogdyA8IHIudHJhbnNsYXRlICYmIHcgPCByLm1pblRyYW5zbGF0ZSgpKSkgcmV0dXJuICExO1xuICAgICAgICBpZiAoIXIuYWxsb3dTbGlkZVByZXYgJiYgdyA+IHIudHJhbnNsYXRlICYmIHcgPiByLm1heFRyYW5zbGF0ZSgpICYmIChwIHx8IDApICE9PSBuKSByZXR1cm4gITFcbiAgICAgIH1cbiAgICAgIGxldCBiO1xuICAgICAgbiAhPT0gKGMgfHwgMCkgJiYgcyAmJiByLmVtaXQoXCJiZWZvcmVTbGlkZUNoYW5nZVN0YXJ0XCIpLCByLnVwZGF0ZVByb2dyZXNzKHcpLCBiID0gbiA+IHAgPyBcIm5leHRcIiA6IG4gPCBwID8gXCJwcmV2XCIgOiBcInJlc2V0XCI7XG4gICAgICBjb25zdCB5ID0gci52aXJ0dWFsICYmIHIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICAgIGlmICghKHkgJiYgaSkgJiYgKHUgJiYgLXcgPT09IHIudHJhbnNsYXRlIHx8ICF1ICYmIHcgPT09IHIudHJhbnNsYXRlKSkgcmV0dXJuIHIudXBkYXRlQWN0aXZlSW5kZXgobiksIGwuYXV0b0hlaWdodCAmJiByLnVwZGF0ZUF1dG9IZWlnaHQoKSwgci51cGRhdGVTbGlkZXNDbGFzc2VzKCksIFwic2xpZGVcIiAhPT0gbC5lZmZlY3QgJiYgci5zZXRUcmFuc2xhdGUodyksIFwicmVzZXRcIiAhPT0gYiAmJiAoci50cmFuc2l0aW9uU3RhcnQocywgYiksIHIudHJhbnNpdGlvbkVuZChzLCBiKSksICExO1xuICAgICAgaWYgKGwuY3NzTW9kZSkge1xuICAgICAgICBjb25zdCBlID0gci5pc0hvcml6b250YWwoKSwgcyA9IHUgPyB3IDogLXc7XG4gICAgICAgIGlmICgwID09PSB0KSB5ICYmIChyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9IFwibm9uZVwiLCByLl9pbW1lZGlhdGVWaXJ0dWFsID0gITApLCB5ICYmICFyLl9jc3NNb2RlVmlydHVhbEluaXRpYWxTZXQgJiYgci5wYXJhbXMuaW5pdGlhbFNsaWRlID4gMCA/IChyLl9jc3NNb2RlVmlydHVhbEluaXRpYWxTZXQgPSAhMCwgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgoKSA9PiB7XG4gICAgICAgICAgaFtlID8gXCJzY3JvbGxMZWZ0XCIgOiBcInNjcm9sbFRvcFwiXSA9IHNcbiAgICAgICAgfSkpKSA6IGhbZSA/IFwic2Nyb2xsTGVmdFwiIDogXCJzY3JvbGxUb3BcIl0gPSBzLCB5ICYmIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKCkgPT4ge1xuICAgICAgICAgIHIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gXCJcIiwgci5faW1tZWRpYXRlVmlydHVhbCA9ICExXG4gICAgICAgIH0pKTsgZWxzZSB7XG4gICAgICAgICAgaWYgKCFyLnN1cHBvcnQuc21vb3RoU2Nyb2xsKSByZXR1cm4gbSh7c3dpcGVyOiByLCB0YXJnZXRQb3NpdGlvbjogcywgc2lkZTogZSA/IFwibGVmdFwiIDogXCJ0b3BcIn0pLCAhMDtcbiAgICAgICAgICBoLnNjcm9sbFRvKHtbZSA/IFwibGVmdFwiIDogXCJ0b3BcIl06IHMsIGJlaGF2aW9yOiBcInNtb290aFwifSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gITBcbiAgICAgIH1cbiAgICAgIHJldHVybiByLnNldFRyYW5zaXRpb24odCksIHIuc2V0VHJhbnNsYXRlKHcpLCByLnVwZGF0ZUFjdGl2ZUluZGV4KG4pLCByLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKSwgci5lbWl0KFwiYmVmb3JlVHJhbnNpdGlvblN0YXJ0XCIsIHQsIGEpLCByLnRyYW5zaXRpb25TdGFydChzLCBiKSwgMCA9PT0gdCA/IHIudHJhbnNpdGlvbkVuZChzLCBiKSA6IHIuYW5pbWF0aW5nIHx8IChyLmFuaW1hdGluZyA9ICEwLCByLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIHx8IChyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgciAmJiAhci5kZXN0cm95ZWQgJiYgZS50YXJnZXQgPT09IHRoaXMgJiYgKHIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIHIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpLCByLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbCwgZGVsZXRlIHIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQsIHIudHJhbnNpdGlvbkVuZChzLCBiKSlcbiAgICAgIH0pLCByLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCByLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSksICEwXG4gICAgfSwgc2xpZGVUb0xvb3A6IGZ1bmN0aW9uIChlLCB0LCBzLCBhKSB7XG4gICAgICBpZiAodm9pZCAwID09PSBlICYmIChlID0gMCksIHZvaWQgMCA9PT0gcyAmJiAocyA9ICEwKSwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSkge1xuICAgICAgICBlID0gcGFyc2VJbnQoZSwgMTApXG4gICAgICB9XG4gICAgICBjb25zdCBpID0gdGhpcztcbiAgICAgIGlmIChpLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgdm9pZCAwID09PSB0ICYmICh0ID0gaS5wYXJhbXMuc3BlZWQpO1xuICAgICAgY29uc3QgciA9IGkuZ3JpZCAmJiBpLnBhcmFtcy5ncmlkICYmIGkucGFyYW1zLmdyaWQucm93cyA+IDE7XG4gICAgICBsZXQgbiA9IGU7XG4gICAgICBpZiAoaS5wYXJhbXMubG9vcCkgaWYgKGkudmlydHVhbCAmJiBpLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIG4gKz0gaS52aXJ0dWFsLnNsaWRlc0JlZm9yZTsgZWxzZSB7XG4gICAgICAgIGxldCBlO1xuICAgICAgICBpZiAocikge1xuICAgICAgICAgIGNvbnN0IHQgPSBuICogaS5wYXJhbXMuZ3JpZC5yb3dzO1xuICAgICAgICAgIGUgPSBpLnNsaWRlcy5maWx0ZXIoKGUgPT4gMSAqIGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIikgPT09IHQpKVswXS5jb2x1bW5cbiAgICAgICAgfSBlbHNlIGUgPSBpLmdldFNsaWRlSW5kZXhCeURhdGEobik7XG4gICAgICAgIGNvbnN0IHQgPSByID8gTWF0aC5jZWlsKGkuc2xpZGVzLmxlbmd0aCAvIGkucGFyYW1zLmdyaWQucm93cykgOiBpLnNsaWRlcy5sZW5ndGgsIHtjZW50ZXJlZFNsaWRlczogc30gPSBpLnBhcmFtcztcbiAgICAgICAgbGV0IGwgPSBpLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgICBcImF1dG9cIiA9PT0gbCA/IGwgPSBpLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiAobCA9IE1hdGguY2VpbChwYXJzZUZsb2F0KGkucGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSksIHMgJiYgbCAlIDIgPT0gMCAmJiAobCArPSAxKSk7XG4gICAgICAgIGxldCBvID0gdCAtIGUgPCBsO1xuICAgICAgICBpZiAocyAmJiAobyA9IG8gfHwgZSA8IE1hdGguY2VpbChsIC8gMikpLCBhICYmIHMgJiYgXCJhdXRvXCIgIT09IGkucGFyYW1zLnNsaWRlc1BlclZpZXcgJiYgIXIgJiYgKG8gPSAhMSksIG8pIHtcbiAgICAgICAgICBjb25zdCBhID0gcyA/IGUgPCBpLmFjdGl2ZUluZGV4ID8gXCJwcmV2XCIgOiBcIm5leHRcIiA6IGUgLSBpLmFjdGl2ZUluZGV4IC0gMSA8IGkucGFyYW1zLnNsaWRlc1BlclZpZXcgPyBcIm5leHRcIiA6IFwicHJldlwiO1xuICAgICAgICAgIGkubG9vcEZpeCh7XG4gICAgICAgICAgICBkaXJlY3Rpb246IGEsXG4gICAgICAgICAgICBzbGlkZVRvOiAhMCxcbiAgICAgICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IFwibmV4dFwiID09PSBhID8gZSArIDEgOiBlIC0gdCArIDEsXG4gICAgICAgICAgICBzbGlkZVJlYWxJbmRleDogXCJuZXh0XCIgPT09IGEgPyBpLnJlYWxJbmRleCA6IHZvaWQgMFxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICBjb25zdCBlID0gbiAqIGkucGFyYW1zLmdyaWQucm93cztcbiAgICAgICAgICBuID0gaS5zbGlkZXMuZmlsdGVyKCh0ID0+IDEgKiB0LmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIpID09PSBlKSlbMF0uY29sdW1uXG4gICAgICAgIH0gZWxzZSBuID0gaS5nZXRTbGlkZUluZGV4QnlEYXRhKG4pXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgoKSA9PiB7XG4gICAgICAgIGkuc2xpZGVUbyhuLCB0LCBzLCBhKVxuICAgICAgfSkpLCBpXG4gICAgfSwgc2xpZGVOZXh0OiBmdW5jdGlvbiAoZSwgdCwgcykge1xuICAgICAgdm9pZCAwID09PSB0ICYmICh0ID0gITApO1xuICAgICAgY29uc3QgYSA9IHRoaXMsIHtlbmFibGVkOiBpLCBwYXJhbXM6IHIsIGFuaW1hdGluZzogbn0gPSBhO1xuICAgICAgaWYgKCFpIHx8IGEuZGVzdHJveWVkKSByZXR1cm4gYTtcbiAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IGEucGFyYW1zLnNwZWVkKTtcbiAgICAgIGxldCBsID0gci5zbGlkZXNQZXJHcm91cDtcbiAgICAgIFwiYXV0b1wiID09PSByLnNsaWRlc1BlclZpZXcgJiYgMSA9PT0gci5zbGlkZXNQZXJHcm91cCAmJiByLnNsaWRlc1Blckdyb3VwQXV0byAmJiAobCA9IE1hdGgubWF4KGEuc2xpZGVzUGVyVmlld0R5bmFtaWMoXCJjdXJyZW50XCIsICEwKSwgMSkpO1xuICAgICAgY29uc3QgbyA9IGEuYWN0aXZlSW5kZXggPCByLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBsLCBkID0gYS52aXJ0dWFsICYmIHIudmlydHVhbC5lbmFibGVkO1xuICAgICAgaWYgKHIubG9vcCkge1xuICAgICAgICBpZiAobiAmJiAhZCAmJiByLmxvb3BQcmV2ZW50c1NsaWRpbmcpIHJldHVybiAhMTtcbiAgICAgICAgaWYgKGEubG9vcEZpeCh7ZGlyZWN0aW9uOiBcIm5leHRcIn0pLCBhLl9jbGllbnRMZWZ0ID0gYS53cmFwcGVyRWwuY2xpZW50TGVmdCwgYS5hY3RpdmVJbmRleCA9PT0gYS5zbGlkZXMubGVuZ3RoIC0gMSAmJiByLmNzc01vZGUpIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCgpID0+IHtcbiAgICAgICAgICBhLnNsaWRlVG8oYS5hY3RpdmVJbmRleCArIG8sIGUsIHQsIHMpXG4gICAgICAgIH0pKSwgITBcbiAgICAgIH1cbiAgICAgIHJldHVybiByLnJld2luZCAmJiBhLmlzRW5kID8gYS5zbGlkZVRvKDAsIGUsIHQsIHMpIDogYS5zbGlkZVRvKGEuYWN0aXZlSW5kZXggKyBvLCBlLCB0LCBzKVxuICAgIH0sIHNsaWRlUHJldjogZnVuY3Rpb24gKGUsIHQsIHMpIHtcbiAgICAgIHZvaWQgMCA9PT0gdCAmJiAodCA9ICEwKTtcbiAgICAgIGNvbnN0IGEgPSB0aGlzLCB7cGFyYW1zOiBpLCBzbmFwR3JpZDogciwgc2xpZGVzR3JpZDogbiwgcnRsVHJhbnNsYXRlOiBsLCBlbmFibGVkOiBvLCBhbmltYXRpbmc6IGR9ID0gYTtcbiAgICAgIGlmICghbyB8fCBhLmRlc3Ryb3llZCkgcmV0dXJuIGE7XG4gICAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSBhLnBhcmFtcy5zcGVlZCk7XG4gICAgICBjb25zdCBjID0gYS52aXJ0dWFsICYmIGkudmlydHVhbC5lbmFibGVkO1xuICAgICAgaWYgKGkubG9vcCkge1xuICAgICAgICBpZiAoZCAmJiAhYyAmJiBpLmxvb3BQcmV2ZW50c1NsaWRpbmcpIHJldHVybiAhMTtcbiAgICAgICAgYS5sb29wRml4KHtkaXJlY3Rpb246IFwicHJldlwifSksIGEuX2NsaWVudExlZnQgPSBhLndyYXBwZXJFbC5jbGllbnRMZWZ0XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHAoZSkge1xuICAgICAgICByZXR1cm4gZSA8IDAgPyAtTWF0aC5mbG9vcihNYXRoLmFicyhlKSkgOiBNYXRoLmZsb29yKGUpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHUgPSBwKGwgPyBhLnRyYW5zbGF0ZSA6IC1hLnRyYW5zbGF0ZSksIG0gPSByLm1hcCgoZSA9PiBwKGUpKSk7XG4gICAgICBsZXQgaCA9IHJbbS5pbmRleE9mKHUpIC0gMV07XG4gICAgICBpZiAodm9pZCAwID09PSBoICYmIGkuY3NzTW9kZSkge1xuICAgICAgICBsZXQgZTtcbiAgICAgICAgci5mb3JFYWNoKCgodCwgcykgPT4ge1xuICAgICAgICAgIHUgPj0gdCAmJiAoZSA9IHMpXG4gICAgICAgIH0pKSwgdm9pZCAwICE9PSBlICYmIChoID0gcltlID4gMCA/IGUgLSAxIDogZV0pXG4gICAgICB9XG4gICAgICBsZXQgZiA9IDA7XG4gICAgICBpZiAodm9pZCAwICE9PSBoICYmIChmID0gbi5pbmRleE9mKGgpLCBmIDwgMCAmJiAoZiA9IGEuYWN0aXZlSW5kZXggLSAxKSwgXCJhdXRvXCIgPT09IGkuc2xpZGVzUGVyVmlldyAmJiAxID09PSBpLnNsaWRlc1Blckdyb3VwICYmIGkuc2xpZGVzUGVyR3JvdXBBdXRvICYmIChmID0gZiAtIGEuc2xpZGVzUGVyVmlld0R5bmFtaWMoXCJwcmV2aW91c1wiLCAhMCkgKyAxLCBmID0gTWF0aC5tYXgoZiwgMCkpKSwgaS5yZXdpbmQgJiYgYS5pc0JlZ2lubmluZykge1xuICAgICAgICBjb25zdCBpID0gYS5wYXJhbXMudmlydHVhbCAmJiBhLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgYS52aXJ0dWFsID8gYS52aXJ0dWFsLnNsaWRlcy5sZW5ndGggLSAxIDogYS5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgcmV0dXJuIGEuc2xpZGVUbyhpLCBlLCB0LCBzKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGkubG9vcCAmJiAwID09PSBhLmFjdGl2ZUluZGV4ICYmIGkuY3NzTW9kZSA/IChyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCgpID0+IHtcbiAgICAgICAgYS5zbGlkZVRvKGYsIGUsIHQsIHMpXG4gICAgICB9KSksICEwKSA6IGEuc2xpZGVUbyhmLCBlLCB0LCBzKVxuICAgIH0sIHNsaWRlUmVzZXQ6IGZ1bmN0aW9uIChlLCB0LCBzKSB7XG4gICAgICB2b2lkIDAgPT09IHQgJiYgKHQgPSAhMCk7XG4gICAgICBjb25zdCBhID0gdGhpcztcbiAgICAgIGlmICghYS5kZXN0cm95ZWQpIHJldHVybiB2b2lkIDAgPT09IGUgJiYgKGUgPSBhLnBhcmFtcy5zcGVlZCksIGEuc2xpZGVUbyhhLmFjdGl2ZUluZGV4LCBlLCB0LCBzKVxuICAgIH0sIHNsaWRlVG9DbG9zZXN0OiBmdW5jdGlvbiAoZSwgdCwgcywgYSkge1xuICAgICAgdm9pZCAwID09PSB0ICYmICh0ID0gITApLCB2b2lkIDAgPT09IGEgJiYgKGEgPSAuNSk7XG4gICAgICBjb25zdCBpID0gdGhpcztcbiAgICAgIGlmIChpLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgdm9pZCAwID09PSBlICYmIChlID0gaS5wYXJhbXMuc3BlZWQpO1xuICAgICAgbGV0IHIgPSBpLmFjdGl2ZUluZGV4O1xuICAgICAgY29uc3QgbiA9IE1hdGgubWluKGkucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgciksIGwgPSBuICsgTWF0aC5mbG9vcigociAtIG4pIC8gaS5wYXJhbXMuc2xpZGVzUGVyR3JvdXApLFxuICAgICAgICBvID0gaS5ydGxUcmFuc2xhdGUgPyBpLnRyYW5zbGF0ZSA6IC1pLnRyYW5zbGF0ZTtcbiAgICAgIGlmIChvID49IGkuc25hcEdyaWRbbF0pIHtcbiAgICAgICAgY29uc3QgZSA9IGkuc25hcEdyaWRbbF07XG4gICAgICAgIG8gLSBlID4gKGkuc25hcEdyaWRbbCArIDFdIC0gZSkgKiBhICYmIChyICs9IGkucGFyYW1zLnNsaWRlc1Blckdyb3VwKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZSA9IGkuc25hcEdyaWRbbCAtIDFdO1xuICAgICAgICBvIC0gZSA8PSAoaS5zbmFwR3JpZFtsXSAtIGUpICogYSAmJiAociAtPSBpLnBhcmFtcy5zbGlkZXNQZXJHcm91cClcbiAgICAgIH1cbiAgICAgIHJldHVybiByID0gTWF0aC5tYXgociwgMCksIHIgPSBNYXRoLm1pbihyLCBpLnNsaWRlc0dyaWQubGVuZ3RoIC0gMSksIGkuc2xpZGVUbyhyLCBlLCB0LCBzKVxuICAgIH0sIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGUgPSB0aGlzO1xuICAgICAgaWYgKGUuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICBjb25zdCB7cGFyYW1zOiB0LCBzbGlkZXNFbDogc30gPSBlLCBhID0gXCJhdXRvXCIgPT09IHQuc2xpZGVzUGVyVmlldyA/IGUuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IHQuc2xpZGVzUGVyVmlldztcbiAgICAgIGxldCBpLCByID0gZS5jbGlja2VkSW5kZXg7XG4gICAgICBjb25zdCBuID0gZS5pc0VsZW1lbnQgPyBcInN3aXBlci1zbGlkZVwiIDogYC4ke3Quc2xpZGVDbGFzc31gO1xuICAgICAgaWYgKHQubG9vcCkge1xuICAgICAgICBpZiAoZS5hbmltYXRpbmcpIHJldHVybjtcbiAgICAgICAgaSA9IHBhcnNlSW50KGUuY2xpY2tlZFNsaWRlLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIpLCAxMCksIHQuY2VudGVyZWRTbGlkZXMgPyByIDwgZS5sb29wZWRTbGlkZXMgLSBhIC8gMiB8fCByID4gZS5zbGlkZXMubGVuZ3RoIC0gZS5sb29wZWRTbGlkZXMgKyBhIC8gMiA/IChlLmxvb3BGaXgoKSwgciA9IGUuZ2V0U2xpZGVJbmRleChmKHMsIGAke259W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtpfVwiXWApWzBdKSwgbCgoKCkgPT4ge1xuICAgICAgICAgIGUuc2xpZGVUbyhyKVxuICAgICAgICB9KSkpIDogZS5zbGlkZVRvKHIpIDogciA+IGUuc2xpZGVzLmxlbmd0aCAtIGEgPyAoZS5sb29wRml4KCksIHIgPSBlLmdldFNsaWRlSW5kZXgoZihzLCBgJHtufVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7aX1cIl1gKVswXSksIGwoKCgpID0+IHtcbiAgICAgICAgICBlLnNsaWRlVG8ocilcbiAgICAgICAgfSkpKSA6IGUuc2xpZGVUbyhyKVxuICAgICAgfSBlbHNlIGUuc2xpZGVUbyhyKVxuICAgIH1cbiAgfTtcbiAgdmFyIFIgPSB7XG4gICAgbG9vcENyZWF0ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgIGNvbnN0IHQgPSB0aGlzLCB7cGFyYW1zOiBzLCBzbGlkZXNFbDogYX0gPSB0O1xuICAgICAgaWYgKCFzLmxvb3AgfHwgdC52aXJ0dWFsICYmIHQucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgY29uc3QgaSA9ICgpID0+IHtcbiAgICAgICAgICBmKGEsIGAuJHtzLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKS5mb3JFYWNoKCgoZSwgdCkgPT4ge1xuICAgICAgICAgICAgZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiLCB0KVxuICAgICAgICAgIH0pKVxuICAgICAgICB9LCByID0gdC5ncmlkICYmIHMuZ3JpZCAmJiBzLmdyaWQucm93cyA+IDEsIG4gPSBzLnNsaWRlc1Blckdyb3VwICogKHIgPyBzLmdyaWQucm93cyA6IDEpLFxuICAgICAgICBsID0gdC5zbGlkZXMubGVuZ3RoICUgbiAhPSAwLCBvID0gciAmJiB0LnNsaWRlcy5sZW5ndGggJSBzLmdyaWQucm93cyAhPSAwLCBkID0gZSA9PiB7XG4gICAgICAgICAgZm9yIChsZXQgYSA9IDA7IGEgPCBlOyBhICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LmlzRWxlbWVudCA/IHYoXCJzd2lwZXItc2xpZGVcIiwgW3Muc2xpZGVCbGFua0NsYXNzXSkgOiB2KFwiZGl2XCIsIFtzLnNsaWRlQ2xhc3MsIHMuc2xpZGVCbGFua0NsYXNzXSk7XG4gICAgICAgICAgICB0LnNsaWRlc0VsLmFwcGVuZChlKVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIGlmIChsKSB7XG4gICAgICAgIGlmIChzLmxvb3BBZGRCbGFua1NsaWRlcykge1xuICAgICAgICAgIGQobiAtIHQuc2xpZGVzLmxlbmd0aCAlIG4pLCB0LnJlY2FsY1NsaWRlcygpLCB0LnVwZGF0ZVNsaWRlcygpXG4gICAgICAgIH0gZWxzZSBnKFwiU3dpcGVyIExvb3AgV2FybmluZzogVGhlIG51bWJlciBvZiBzbGlkZXMgaXMgbm90IGV2ZW4gdG8gc2xpZGVzUGVyR3JvdXAsIGxvb3AgbW9kZSBtYXkgbm90IGZ1bmN0aW9uIHByb3Blcmx5LiBZb3UgbmVlZCB0byBhZGQgbW9yZSBzbGlkZXMgKG9yIG1ha2UgZHVwbGljYXRlcywgb3IgZW1wdHkgc2xpZGVzKVwiKTtcbiAgICAgICAgaSgpXG4gICAgICB9IGVsc2UgaWYgKG8pIHtcbiAgICAgICAgaWYgKHMubG9vcEFkZEJsYW5rU2xpZGVzKSB7XG4gICAgICAgICAgZChzLmdyaWQucm93cyAtIHQuc2xpZGVzLmxlbmd0aCAlIHMuZ3JpZC5yb3dzKSwgdC5yZWNhbGNTbGlkZXMoKSwgdC51cGRhdGVTbGlkZXMoKVxuICAgICAgICB9IGVsc2UgZyhcIlN3aXBlciBMb29wIFdhcm5pbmc6IFRoZSBudW1iZXIgb2Ygc2xpZGVzIGlzIG5vdCBldmVuIHRvIGdyaWQucm93cywgbG9vcCBtb2RlIG1heSBub3QgZnVuY3Rpb24gcHJvcGVybHkuIFlvdSBuZWVkIHRvIGFkZCBtb3JlIHNsaWRlcyAob3IgbWFrZSBkdXBsaWNhdGVzLCBvciBlbXB0eSBzbGlkZXMpXCIpO1xuICAgICAgICBpKClcbiAgICAgIH0gZWxzZSBpKCk7XG4gICAgICB0Lmxvb3BGaXgoe3NsaWRlUmVhbEluZGV4OiBlLCBkaXJlY3Rpb246IHMuY2VudGVyZWRTbGlkZXMgPyB2b2lkIDAgOiBcIm5leHRcIn0pXG4gICAgfSwgbG9vcEZpeDogZnVuY3Rpb24gKGUpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIHNsaWRlUmVhbEluZGV4OiB0LFxuICAgICAgICBzbGlkZVRvOiBzID0gITAsXG4gICAgICAgIGRpcmVjdGlvbjogYSxcbiAgICAgICAgc2V0VHJhbnNsYXRlOiBpLFxuICAgICAgICBhY3RpdmVTbGlkZUluZGV4OiByLFxuICAgICAgICBieUNvbnRyb2xsZXI6IG4sXG4gICAgICAgIGJ5TW91c2V3aGVlbDogbFxuICAgICAgfSA9IHZvaWQgMCA9PT0gZSA/IHt9IDogZTtcbiAgICAgIGNvbnN0IG8gPSB0aGlzO1xuICAgICAgaWYgKCFvLnBhcmFtcy5sb29wKSByZXR1cm47XG4gICAgICBvLmVtaXQoXCJiZWZvcmVMb29wRml4XCIpO1xuICAgICAgY29uc3Qge3NsaWRlczogZCwgYWxsb3dTbGlkZVByZXY6IGMsIGFsbG93U2xpZGVOZXh0OiBwLCBzbGlkZXNFbDogdSwgcGFyYW1zOiBtfSA9IG8sIHtjZW50ZXJlZFNsaWRlczogaH0gPSBtO1xuICAgICAgaWYgKG8uYWxsb3dTbGlkZVByZXYgPSAhMCwgby5hbGxvd1NsaWRlTmV4dCA9ICEwLCBvLnZpcnR1YWwgJiYgbS52aXJ0dWFsLmVuYWJsZWQpIHJldHVybiBzICYmIChtLmNlbnRlcmVkU2xpZGVzIHx8IDAgIT09IG8uc25hcEluZGV4ID8gbS5jZW50ZXJlZFNsaWRlcyAmJiBvLnNuYXBJbmRleCA8IG0uc2xpZGVzUGVyVmlldyA/IG8uc2xpZGVUbyhvLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCArIG8uc25hcEluZGV4LCAwLCAhMSwgITApIDogby5zbmFwSW5kZXggPT09IG8uc25hcEdyaWQubGVuZ3RoIC0gMSAmJiBvLnNsaWRlVG8oby52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgITEsICEwKSA6IG8uc2xpZGVUbyhvLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCwgMCwgITEsICEwKSksIG8uYWxsb3dTbGlkZVByZXYgPSBjLCBvLmFsbG93U2xpZGVOZXh0ID0gcCwgdm9pZCBvLmVtaXQoXCJsb29wRml4XCIpO1xuICAgICAgbGV0IGYgPSBtLnNsaWRlc1BlclZpZXc7XG4gICAgICBcImF1dG9cIiA9PT0gZiA/IGYgPSBvLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiAoZiA9IE1hdGguY2VpbChwYXJzZUZsb2F0KG0uc2xpZGVzUGVyVmlldywgMTApKSwgaCAmJiBmICUgMiA9PSAwICYmIChmICs9IDEpKTtcbiAgICAgIGNvbnN0IHYgPSBtLnNsaWRlc1Blckdyb3VwQXV0byA/IGYgOiBtLnNsaWRlc1Blckdyb3VwO1xuICAgICAgbGV0IHcgPSB2O1xuICAgICAgdyAlIHYgIT0gMCAmJiAodyArPSB2IC0gdyAlIHYpLCB3ICs9IG0ubG9vcEFkZGl0aW9uYWxTbGlkZXMsIG8ubG9vcGVkU2xpZGVzID0gdztcbiAgICAgIGNvbnN0IGIgPSBvLmdyaWQgJiYgbS5ncmlkICYmIG0uZ3JpZC5yb3dzID4gMTtcbiAgICAgIGQubGVuZ3RoIDwgZiArIHcgPyBnKFwiU3dpcGVyIExvb3AgV2FybmluZzogVGhlIG51bWJlciBvZiBzbGlkZXMgaXMgbm90IGVub3VnaCBmb3IgbG9vcCBtb2RlLCBpdCB3aWxsIGJlIGRpc2FibGVkIGFuZCBub3QgZnVuY3Rpb24gcHJvcGVybHkuIFlvdSBuZWVkIHRvIGFkZCBtb3JlIHNsaWRlcyAob3IgbWFrZSBkdXBsaWNhdGVzKSBvciBsb3dlciB0aGUgdmFsdWVzIG9mIHNsaWRlc1BlclZpZXcgYW5kIHNsaWRlc1Blckdyb3VwIHBhcmFtZXRlcnNcIikgOiBiICYmIFwicm93XCIgPT09IG0uZ3JpZC5maWxsICYmIGcoXCJTd2lwZXIgTG9vcCBXYXJuaW5nOiBMb29wIG1vZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBncmlkLmZpbGwgPSBgcm93YFwiKTtcbiAgICAgIGNvbnN0IHkgPSBbXSwgRSA9IFtdO1xuICAgICAgbGV0IHggPSBvLmFjdGl2ZUluZGV4O1xuICAgICAgdm9pZCAwID09PSByID8gciA9IG8uZ2V0U2xpZGVJbmRleChkLmZpbHRlcigoZSA9PiBlLmNsYXNzTGlzdC5jb250YWlucyhtLnNsaWRlQWN0aXZlQ2xhc3MpKSlbMF0pIDogeCA9IHI7XG4gICAgICBjb25zdCBTID0gXCJuZXh0XCIgPT09IGEgfHwgIWEsIFQgPSBcInByZXZcIiA9PT0gYSB8fCAhYTtcbiAgICAgIGxldCBNID0gMCwgQyA9IDA7XG4gICAgICBjb25zdCBQID0gYiA/IE1hdGguY2VpbChkLmxlbmd0aCAvIG0uZ3JpZC5yb3dzKSA6IGQubGVuZ3RoLFxuICAgICAgICBMID0gKGIgPyBkW3JdLmNvbHVtbiA6IHIpICsgKGggJiYgdm9pZCAwID09PSBpID8gLWYgLyAyICsgLjUgOiAwKTtcbiAgICAgIGlmIChMIDwgdykge1xuICAgICAgICBNID0gTWF0aC5tYXgodyAtIEwsIHYpO1xuICAgICAgICBmb3IgKGxldCBlID0gMDsgZSA8IHcgLSBMOyBlICs9IDEpIHtcbiAgICAgICAgICBjb25zdCB0ID0gZSAtIE1hdGguZmxvb3IoZSAvIFApICogUDtcbiAgICAgICAgICBpZiAoYikge1xuICAgICAgICAgICAgY29uc3QgZSA9IFAgLSB0IC0gMTtcbiAgICAgICAgICAgIGZvciAobGV0IHQgPSBkLmxlbmd0aCAtIDE7IHQgPj0gMDsgdCAtPSAxKSBkW3RdLmNvbHVtbiA9PT0gZSAmJiB5LnB1c2godClcbiAgICAgICAgICB9IGVsc2UgeS5wdXNoKFAgLSB0IC0gMSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChMICsgZiA+IFAgLSB3KSB7XG4gICAgICAgIEMgPSBNYXRoLm1heChMIC0gKFAgLSAyICogdyksIHYpO1xuICAgICAgICBmb3IgKGxldCBlID0gMDsgZSA8IEM7IGUgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IHQgPSBlIC0gTWF0aC5mbG9vcihlIC8gUCkgKiBQO1xuICAgICAgICAgIGIgPyBkLmZvckVhY2goKChlLCBzKSA9PiB7XG4gICAgICAgICAgICBlLmNvbHVtbiA9PT0gdCAmJiBFLnB1c2gocylcbiAgICAgICAgICB9KSkgOiBFLnB1c2godClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG8uX19wcmV2ZW50T2JzZXJ2ZXJfXyA9ICEwLCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCgpID0+IHtcbiAgICAgICAgby5fX3ByZXZlbnRPYnNlcnZlcl9fID0gITFcbiAgICAgIH0pKSwgVCAmJiB5LmZvckVhY2goKGUgPT4ge1xuICAgICAgICBkW2VdLnN3aXBlckxvb3BNb3ZlRE9NID0gITAsIHUucHJlcGVuZChkW2VdKSwgZFtlXS5zd2lwZXJMb29wTW92ZURPTSA9ICExXG4gICAgICB9KSksIFMgJiYgRS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgZFtlXS5zd2lwZXJMb29wTW92ZURPTSA9ICEwLCB1LmFwcGVuZChkW2VdKSwgZFtlXS5zd2lwZXJMb29wTW92ZURPTSA9ICExXG4gICAgICB9KSksIG8ucmVjYWxjU2xpZGVzKCksIFwiYXV0b1wiID09PSBtLnNsaWRlc1BlclZpZXcgPyBvLnVwZGF0ZVNsaWRlcygpIDogYiAmJiAoeS5sZW5ndGggPiAwICYmIFQgfHwgRS5sZW5ndGggPiAwICYmIFMpICYmIG8uc2xpZGVzLmZvckVhY2goKChlLCB0KSA9PiB7XG4gICAgICAgIG8uZ3JpZC51cGRhdGVTbGlkZSh0LCBlLCBvLnNsaWRlcylcbiAgICAgIH0pKSwgbS53YXRjaFNsaWRlc1Byb2dyZXNzICYmIG8udXBkYXRlU2xpZGVzT2Zmc2V0KCksIHMpIGlmICh5Lmxlbmd0aCA+IDAgJiYgVCkge1xuICAgICAgICBpZiAodm9pZCAwID09PSB0KSB7XG4gICAgICAgICAgY29uc3QgZSA9IG8uc2xpZGVzR3JpZFt4XSwgdCA9IG8uc2xpZGVzR3JpZFt4ICsgTV0gLSBlO1xuICAgICAgICAgIGwgPyBvLnNldFRyYW5zbGF0ZShvLnRyYW5zbGF0ZSAtIHQpIDogKG8uc2xpZGVUbyh4ICsgTWF0aC5jZWlsKE0pLCAwLCAhMSwgITApLCBpICYmIChvLnRvdWNoRXZlbnRzRGF0YS5zdGFydFRyYW5zbGF0ZSA9IG8udG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlIC0gdCwgby50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSA9IG8udG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgLSB0KSlcbiAgICAgICAgfSBlbHNlIGlmIChpKSB7XG4gICAgICAgICAgY29uc3QgZSA9IGIgPyB5Lmxlbmd0aCAvIG0uZ3JpZC5yb3dzIDogeS5sZW5ndGg7XG4gICAgICAgICAgby5zbGlkZVRvKG8uYWN0aXZlSW5kZXggKyBlLCAwLCAhMSwgITApLCBvLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlID0gby50cmFuc2xhdGVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChFLmxlbmd0aCA+IDAgJiYgUykgaWYgKHZvaWQgMCA9PT0gdCkge1xuICAgICAgICBjb25zdCBlID0gby5zbGlkZXNHcmlkW3hdLCB0ID0gby5zbGlkZXNHcmlkW3ggLSBDXSAtIGU7XG4gICAgICAgIGwgPyBvLnNldFRyYW5zbGF0ZShvLnRyYW5zbGF0ZSAtIHQpIDogKG8uc2xpZGVUbyh4IC0gQywgMCwgITEsICEwKSwgaSAmJiAoby50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgPSBvLnRvdWNoRXZlbnRzRGF0YS5zdGFydFRyYW5zbGF0ZSAtIHQsIG8udG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBvLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlIC0gdCkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBlID0gYiA/IEUubGVuZ3RoIC8gbS5ncmlkLnJvd3MgOiBFLmxlbmd0aDtcbiAgICAgICAgby5zbGlkZVRvKG8uYWN0aXZlSW5kZXggLSBlLCAwLCAhMSwgITApXG4gICAgICB9XG4gICAgICBpZiAoby5hbGxvd1NsaWRlUHJldiA9IGMsIG8uYWxsb3dTbGlkZU5leHQgPSBwLCBvLmNvbnRyb2xsZXIgJiYgby5jb250cm9sbGVyLmNvbnRyb2wgJiYgIW4pIHtcbiAgICAgICAgY29uc3QgZSA9IHtzbGlkZVJlYWxJbmRleDogdCwgZGlyZWN0aW9uOiBhLCBzZXRUcmFuc2xhdGU6IGksIGFjdGl2ZVNsaWRlSW5kZXg6IHIsIGJ5Q29udHJvbGxlcjogITB9O1xuICAgICAgICBBcnJheS5pc0FycmF5KG8uY29udHJvbGxlci5jb250cm9sKSA/IG8uY29udHJvbGxlci5jb250cm9sLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICF0LmRlc3Ryb3llZCAmJiB0LnBhcmFtcy5sb29wICYmIHQubG9vcEZpeCh7Li4uZSwgc2xpZGVUbzogdC5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gbS5zbGlkZXNQZXJWaWV3ICYmIHN9KVxuICAgICAgICB9KSkgOiBvLmNvbnRyb2xsZXIuY29udHJvbCBpbnN0YW5jZW9mIG8uY29uc3RydWN0b3IgJiYgby5jb250cm9sbGVyLmNvbnRyb2wucGFyYW1zLmxvb3AgJiYgby5jb250cm9sbGVyLmNvbnRyb2wubG9vcEZpeCh7XG4gICAgICAgICAgLi4uZSxcbiAgICAgICAgICBzbGlkZVRvOiBvLmNvbnRyb2xsZXIuY29udHJvbC5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gbS5zbGlkZXNQZXJWaWV3ICYmIHNcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIG8uZW1pdChcImxvb3BGaXhcIilcbiAgICB9LCBsb29wRGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZSA9IHRoaXMsIHtwYXJhbXM6IHQsIHNsaWRlc0VsOiBzfSA9IGU7XG4gICAgICBpZiAoIXQubG9vcCB8fCBlLnZpcnR1YWwgJiYgZS5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gICAgICBlLnJlY2FsY1NsaWRlcygpO1xuICAgICAgY29uc3QgYSA9IFtdO1xuICAgICAgZS5zbGlkZXMuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgIGNvbnN0IHQgPSB2b2lkIDAgPT09IGUuc3dpcGVyU2xpZGVJbmRleCA/IDEgKiBlLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIpIDogZS5zd2lwZXJTbGlkZUluZGV4O1xuICAgICAgICBhW3RdID0gZVxuICAgICAgfSkpLCBlLnNsaWRlcy5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgZS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKVxuICAgICAgfSkpLCBhLmZvckVhY2goKGUgPT4ge1xuICAgICAgICBzLmFwcGVuZChlKVxuICAgICAgfSkpLCBlLnJlY2FsY1NsaWRlcygpLCBlLnNsaWRlVG8oZS5yZWFsSW5kZXgsIDApXG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHEoZSwgdCwgcykge1xuICAgIGNvbnN0IGEgPSByKCksIHtwYXJhbXM6IGl9ID0gZSwgbiA9IGkuZWRnZVN3aXBlRGV0ZWN0aW9uLCBsID0gaS5lZGdlU3dpcGVUaHJlc2hvbGQ7XG4gICAgcmV0dXJuICFuIHx8ICEocyA8PSBsIHx8IHMgPj0gYS5pbm5lcldpZHRoIC0gbCkgfHwgXCJwcmV2ZW50XCIgPT09IG4gJiYgKHQucHJldmVudERlZmF1bHQoKSwgITApXG4gIH1cblxuICBmdW5jdGlvbiBGKGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcywgcyA9IGEoKTtcbiAgICBsZXQgaSA9IGU7XG4gICAgaS5vcmlnaW5hbEV2ZW50ICYmIChpID0gaS5vcmlnaW5hbEV2ZW50KTtcbiAgICBjb25zdCBuID0gdC50b3VjaEV2ZW50c0RhdGE7XG4gICAgaWYgKFwicG9pbnRlcmRvd25cIiA9PT0gaS50eXBlKSB7XG4gICAgICBpZiAobnVsbCAhPT0gbi5wb2ludGVySWQgJiYgbi5wb2ludGVySWQgIT09IGkucG9pbnRlcklkKSByZXR1cm47XG4gICAgICBuLnBvaW50ZXJJZCA9IGkucG9pbnRlcklkXG4gICAgfSBlbHNlIFwidG91Y2hzdGFydFwiID09PSBpLnR5cGUgJiYgMSA9PT0gaS50YXJnZXRUb3VjaGVzLmxlbmd0aCAmJiAobi50b3VjaElkID0gaS50YXJnZXRUb3VjaGVzWzBdLmlkZW50aWZpZXIpO1xuICAgIGlmIChcInRvdWNoc3RhcnRcIiA9PT0gaS50eXBlKSByZXR1cm4gdm9pZCBxKHQsIGksIGkudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCk7XG4gICAgY29uc3Qge3BhcmFtczogbCwgdG91Y2hlczogZCwgZW5hYmxlZDogY30gPSB0O1xuICAgIGlmICghYykgcmV0dXJuO1xuICAgIGlmICghbC5zaW11bGF0ZVRvdWNoICYmIFwibW91c2VcIiA9PT0gaS5wb2ludGVyVHlwZSkgcmV0dXJuO1xuICAgIGlmICh0LmFuaW1hdGluZyAmJiBsLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikgcmV0dXJuO1xuICAgICF0LmFuaW1hdGluZyAmJiBsLmNzc01vZGUgJiYgbC5sb29wICYmIHQubG9vcEZpeCgpO1xuICAgIGxldCBwID0gaS50YXJnZXQ7XG4gICAgaWYgKFwid3JhcHBlclwiID09PSBsLnRvdWNoRXZlbnRzVGFyZ2V0ICYmICFmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgY29uc3QgcyA9IHQuY29udGFpbnMoZSk7XG4gICAgICBpZiAoIXMgJiYgdCBpbnN0YW5jZW9mIEhUTUxTbG90RWxlbWVudCkgcmV0dXJuIFsuLi50LmFzc2lnbmVkRWxlbWVudHMoKV0uaW5jbHVkZXMoZSk7XG4gICAgICByZXR1cm4gc1xuICAgIH0ocCwgdC53cmFwcGVyRWwpKSByZXR1cm47XG4gICAgaWYgKFwid2hpY2hcIiBpbiBpICYmIDMgPT09IGkud2hpY2gpIHJldHVybjtcbiAgICBpZiAoXCJidXR0b25cIiBpbiBpICYmIGkuYnV0dG9uID4gMCkgcmV0dXJuO1xuICAgIGlmIChuLmlzVG91Y2hlZCAmJiBuLmlzTW92ZWQpIHJldHVybjtcbiAgICBjb25zdCB1ID0gISFsLm5vU3dpcGluZ0NsYXNzICYmIFwiXCIgIT09IGwubm9Td2lwaW5nQ2xhc3MsIG0gPSBpLmNvbXBvc2VkUGF0aCA/IGkuY29tcG9zZWRQYXRoKCkgOiBpLnBhdGg7XG4gICAgdSAmJiBpLnRhcmdldCAmJiBpLnRhcmdldC5zaGFkb3dSb290ICYmIG0gJiYgKHAgPSBtWzBdKTtcbiAgICBjb25zdCBoID0gbC5ub1N3aXBpbmdTZWxlY3RvciA/IGwubm9Td2lwaW5nU2VsZWN0b3IgOiBgLiR7bC5ub1N3aXBpbmdDbGFzc31gLFxuICAgICAgZiA9ICEoIWkudGFyZ2V0IHx8ICFpLnRhcmdldC5zaGFkb3dSb290KTtcbiAgICBpZiAobC5ub1N3aXBpbmcgJiYgKGYgPyBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gdCAmJiAodCA9IHRoaXMpLCBmdW5jdGlvbiB0KHMpIHtcbiAgICAgICAgaWYgKCFzIHx8IHMgPT09IGEoKSB8fCBzID09PSByKCkpIHJldHVybiBudWxsO1xuICAgICAgICBzLmFzc2lnbmVkU2xvdCAmJiAocyA9IHMuYXNzaWduZWRTbG90KTtcbiAgICAgICAgY29uc3QgaSA9IHMuY2xvc2VzdChlKTtcbiAgICAgICAgcmV0dXJuIGkgfHwgcy5nZXRSb290Tm9kZSA/IGkgfHwgdChzLmdldFJvb3ROb2RlKCkuaG9zdCkgOiBudWxsXG4gICAgICB9KHQpXG4gICAgfShoLCBwKSA6IHAuY2xvc2VzdChoKSkpIHJldHVybiB2b2lkICh0LmFsbG93Q2xpY2sgPSAhMCk7XG4gICAgaWYgKGwuc3dpcGVIYW5kbGVyICYmICFwLmNsb3Nlc3QobC5zd2lwZUhhbmRsZXIpKSByZXR1cm47XG4gICAgZC5jdXJyZW50WCA9IGkucGFnZVgsIGQuY3VycmVudFkgPSBpLnBhZ2VZO1xuICAgIGNvbnN0IGcgPSBkLmN1cnJlbnRYLCB2ID0gZC5jdXJyZW50WTtcbiAgICBpZiAoIXEodCwgaSwgZykpIHJldHVybjtcbiAgICBPYmplY3QuYXNzaWduKG4sIHtcbiAgICAgIGlzVG91Y2hlZDogITAsXG4gICAgICBpc01vdmVkOiAhMSxcbiAgICAgIGFsbG93VG91Y2hDYWxsYmFja3M6ICEwLFxuICAgICAgaXNTY3JvbGxpbmc6IHZvaWQgMCxcbiAgICAgIHN0YXJ0TW92aW5nOiB2b2lkIDBcbiAgICB9KSwgZC5zdGFydFggPSBnLCBkLnN0YXJ0WSA9IHYsIG4udG91Y2hTdGFydFRpbWUgPSBvKCksIHQuYWxsb3dDbGljayA9ICEwLCB0LnVwZGF0ZVNpemUoKSwgdC5zd2lwZURpcmVjdGlvbiA9IHZvaWQgMCwgbC50aHJlc2hvbGQgPiAwICYmIChuLmFsbG93VGhyZXNob2xkTW92ZSA9ICExKTtcbiAgICBsZXQgdyA9ICEwO1xuICAgIHAubWF0Y2hlcyhuLmZvY3VzYWJsZUVsZW1lbnRzKSAmJiAodyA9ICExLCBcIlNFTEVDVFwiID09PSBwLm5vZGVOYW1lICYmIChuLmlzVG91Y2hlZCA9ICExKSksIHMuYWN0aXZlRWxlbWVudCAmJiBzLmFjdGl2ZUVsZW1lbnQubWF0Y2hlcyhuLmZvY3VzYWJsZUVsZW1lbnRzKSAmJiBzLmFjdGl2ZUVsZW1lbnQgIT09IHAgJiYgKFwibW91c2VcIiA9PT0gaS5wb2ludGVyVHlwZSB8fCBcIm1vdXNlXCIgIT09IGkucG9pbnRlclR5cGUgJiYgIXAubWF0Y2hlcyhuLmZvY3VzYWJsZUVsZW1lbnRzKSkgJiYgcy5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICBjb25zdCBiID0gdyAmJiB0LmFsbG93VG91Y2hNb3ZlICYmIGwudG91Y2hTdGFydFByZXZlbnREZWZhdWx0O1xuICAgICFsLnRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0ICYmICFiIHx8IHAuaXNDb250ZW50RWRpdGFibGUgfHwgaS5wcmV2ZW50RGVmYXVsdCgpLCBsLmZyZWVNb2RlICYmIGwuZnJlZU1vZGUuZW5hYmxlZCAmJiB0LmZyZWVNb2RlICYmIHQuYW5pbWF0aW5nICYmICFsLmNzc01vZGUgJiYgdC5mcmVlTW9kZS5vblRvdWNoU3RhcnQoKSwgdC5lbWl0KFwidG91Y2hTdGFydFwiLCBpKVxuICB9XG5cbiAgZnVuY3Rpb24gVihlKSB7XG4gICAgY29uc3QgdCA9IGEoKSwgcyA9IHRoaXMsIGkgPSBzLnRvdWNoRXZlbnRzRGF0YSwge3BhcmFtczogciwgdG91Y2hlczogbiwgcnRsVHJhbnNsYXRlOiBsLCBlbmFibGVkOiBkfSA9IHM7XG4gICAgaWYgKCFkKSByZXR1cm47XG4gICAgaWYgKCFyLnNpbXVsYXRlVG91Y2ggJiYgXCJtb3VzZVwiID09PSBlLnBvaW50ZXJUeXBlKSByZXR1cm47XG4gICAgbGV0IGMsIHAgPSBlO1xuICAgIGlmIChwLm9yaWdpbmFsRXZlbnQgJiYgKHAgPSBwLm9yaWdpbmFsRXZlbnQpLCBcInBvaW50ZXJtb3ZlXCIgPT09IHAudHlwZSkge1xuICAgICAgaWYgKG51bGwgIT09IGkudG91Y2hJZCkgcmV0dXJuO1xuICAgICAgaWYgKHAucG9pbnRlcklkICE9PSBpLnBvaW50ZXJJZCkgcmV0dXJuXG4gICAgfVxuICAgIGlmIChcInRvdWNobW92ZVwiID09PSBwLnR5cGUpIHtcbiAgICAgIGlmIChjID0gWy4uLnAuY2hhbmdlZFRvdWNoZXNdLmZpbHRlcigoZSA9PiBlLmlkZW50aWZpZXIgPT09IGkudG91Y2hJZCkpWzBdLCAhYyB8fCBjLmlkZW50aWZpZXIgIT09IGkudG91Y2hJZCkgcmV0dXJuXG4gICAgfSBlbHNlIGMgPSBwO1xuICAgIGlmICghaS5pc1RvdWNoZWQpIHJldHVybiB2b2lkIChpLnN0YXJ0TW92aW5nICYmIGkuaXNTY3JvbGxpbmcgJiYgcy5lbWl0KFwidG91Y2hNb3ZlT3Bwb3NpdGVcIiwgcCkpO1xuICAgIGNvbnN0IHUgPSBjLnBhZ2VYLCBtID0gYy5wYWdlWTtcbiAgICBpZiAocC5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlcikgcmV0dXJuIG4uc3RhcnRYID0gdSwgdm9pZCAobi5zdGFydFkgPSBtKTtcbiAgICBpZiAoIXMuYWxsb3dUb3VjaE1vdmUpIHJldHVybiBwLnRhcmdldC5tYXRjaGVzKGkuZm9jdXNhYmxlRWxlbWVudHMpIHx8IChzLmFsbG93Q2xpY2sgPSAhMSksIHZvaWQgKGkuaXNUb3VjaGVkICYmIChPYmplY3QuYXNzaWduKG4sIHtcbiAgICAgIHN0YXJ0WDogdSxcbiAgICAgIHN0YXJ0WTogbSxcbiAgICAgIGN1cnJlbnRYOiB1LFxuICAgICAgY3VycmVudFk6IG1cbiAgICB9KSwgaS50b3VjaFN0YXJ0VGltZSA9IG8oKSkpO1xuICAgIGlmIChyLnRvdWNoUmVsZWFzZU9uRWRnZXMgJiYgIXIubG9vcCkgaWYgKHMuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICBpZiAobSA8IG4uc3RhcnRZICYmIHMudHJhbnNsYXRlIDw9IHMubWF4VHJhbnNsYXRlKCkgfHwgbSA+IG4uc3RhcnRZICYmIHMudHJhbnNsYXRlID49IHMubWluVHJhbnNsYXRlKCkpIHJldHVybiBpLmlzVG91Y2hlZCA9ICExLCB2b2lkIChpLmlzTW92ZWQgPSAhMSlcbiAgICB9IGVsc2UgaWYgKHUgPCBuLnN0YXJ0WCAmJiBzLnRyYW5zbGF0ZSA8PSBzLm1heFRyYW5zbGF0ZSgpIHx8IHUgPiBuLnN0YXJ0WCAmJiBzLnRyYW5zbGF0ZSA+PSBzLm1pblRyYW5zbGF0ZSgpKSByZXR1cm47XG4gICAgaWYgKHQuYWN0aXZlRWxlbWVudCAmJiB0LmFjdGl2ZUVsZW1lbnQubWF0Y2hlcyhpLmZvY3VzYWJsZUVsZW1lbnRzKSAmJiB0LmFjdGl2ZUVsZW1lbnQgIT09IHAudGFyZ2V0ICYmIFwibW91c2VcIiAhPT0gcC5wb2ludGVyVHlwZSAmJiB0LmFjdGl2ZUVsZW1lbnQuYmx1cigpLCB0LmFjdGl2ZUVsZW1lbnQgJiYgcC50YXJnZXQgPT09IHQuYWN0aXZlRWxlbWVudCAmJiBwLnRhcmdldC5tYXRjaGVzKGkuZm9jdXNhYmxlRWxlbWVudHMpKSByZXR1cm4gaS5pc01vdmVkID0gITAsIHZvaWQgKHMuYWxsb3dDbGljayA9ICExKTtcbiAgICBpLmFsbG93VG91Y2hDYWxsYmFja3MgJiYgcy5lbWl0KFwidG91Y2hNb3ZlXCIsIHApLCBuLnByZXZpb3VzWCA9IG4uY3VycmVudFgsIG4ucHJldmlvdXNZID0gbi5jdXJyZW50WSwgbi5jdXJyZW50WCA9IHUsIG4uY3VycmVudFkgPSBtO1xuICAgIGNvbnN0IGggPSBuLmN1cnJlbnRYIC0gbi5zdGFydFgsIGYgPSBuLmN1cnJlbnRZIC0gbi5zdGFydFk7XG4gICAgaWYgKHMucGFyYW1zLnRocmVzaG9sZCAmJiBNYXRoLnNxcnQoaCAqKiAyICsgZiAqKiAyKSA8IHMucGFyYW1zLnRocmVzaG9sZCkgcmV0dXJuO1xuICAgIGlmICh2b2lkIDAgPT09IGkuaXNTY3JvbGxpbmcpIHtcbiAgICAgIGxldCBlO1xuICAgICAgcy5pc0hvcml6b250YWwoKSAmJiBuLmN1cnJlbnRZID09PSBuLnN0YXJ0WSB8fCBzLmlzVmVydGljYWwoKSAmJiBuLmN1cnJlbnRYID09PSBuLnN0YXJ0WCA/IGkuaXNTY3JvbGxpbmcgPSAhMSA6IGggKiBoICsgZiAqIGYgPj0gMjUgJiYgKGUgPSAxODAgKiBNYXRoLmF0YW4yKE1hdGguYWJzKGYpLCBNYXRoLmFicyhoKSkgLyBNYXRoLlBJLCBpLmlzU2Nyb2xsaW5nID0gcy5pc0hvcml6b250YWwoKSA/IGUgPiByLnRvdWNoQW5nbGUgOiA5MCAtIGUgPiByLnRvdWNoQW5nbGUpXG4gICAgfVxuICAgIGlmIChpLmlzU2Nyb2xsaW5nICYmIHMuZW1pdChcInRvdWNoTW92ZU9wcG9zaXRlXCIsIHApLCB2b2lkIDAgPT09IGkuc3RhcnRNb3ZpbmcgJiYgKG4uY3VycmVudFggPT09IG4uc3RhcnRYICYmIG4uY3VycmVudFkgPT09IG4uc3RhcnRZIHx8IChpLnN0YXJ0TW92aW5nID0gITApKSwgaS5pc1Njcm9sbGluZyB8fCBcInRvdWNobW92ZVwiID09PSBwLnR5cGUgJiYgaS5wcmV2ZW50VG91Y2hNb3ZlRnJvbVBvaW50ZXJNb3ZlKSByZXR1cm4gdm9pZCAoaS5pc1RvdWNoZWQgPSAhMSk7XG4gICAgaWYgKCFpLnN0YXJ0TW92aW5nKSByZXR1cm47XG4gICAgcy5hbGxvd0NsaWNrID0gITEsICFyLmNzc01vZGUgJiYgcC5jYW5jZWxhYmxlICYmIHAucHJldmVudERlZmF1bHQoKSwgci50b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24gJiYgIXIubmVzdGVkICYmIHAuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgbGV0IGcgPSBzLmlzSG9yaXpvbnRhbCgpID8gaCA6IGYsIHYgPSBzLmlzSG9yaXpvbnRhbCgpID8gbi5jdXJyZW50WCAtIG4ucHJldmlvdXNYIDogbi5jdXJyZW50WSAtIG4ucHJldmlvdXNZO1xuICAgIHIub25lV2F5TW92ZW1lbnQgJiYgKGcgPSBNYXRoLmFicyhnKSAqIChsID8gMSA6IC0xKSwgdiA9IE1hdGguYWJzKHYpICogKGwgPyAxIDogLTEpKSwgbi5kaWZmID0gZywgZyAqPSByLnRvdWNoUmF0aW8sIGwgJiYgKGcgPSAtZywgdiA9IC12KTtcbiAgICBjb25zdCB3ID0gcy50b3VjaGVzRGlyZWN0aW9uO1xuICAgIHMuc3dpcGVEaXJlY3Rpb24gPSBnID4gMCA/IFwicHJldlwiIDogXCJuZXh0XCIsIHMudG91Y2hlc0RpcmVjdGlvbiA9IHYgPiAwID8gXCJwcmV2XCIgOiBcIm5leHRcIjtcbiAgICBjb25zdCBiID0gcy5wYXJhbXMubG9vcCAmJiAhci5jc3NNb2RlLFxuICAgICAgeSA9IFwibmV4dFwiID09PSBzLnRvdWNoZXNEaXJlY3Rpb24gJiYgcy5hbGxvd1NsaWRlTmV4dCB8fCBcInByZXZcIiA9PT0gcy50b3VjaGVzRGlyZWN0aW9uICYmIHMuYWxsb3dTbGlkZVByZXY7XG4gICAgaWYgKCFpLmlzTW92ZWQpIHtcbiAgICAgIGlmIChiICYmIHkgJiYgcy5sb29wRml4KHtkaXJlY3Rpb246IHMuc3dpcGVEaXJlY3Rpb259KSwgaS5zdGFydFRyYW5zbGF0ZSA9IHMuZ2V0VHJhbnNsYXRlKCksIHMuc2V0VHJhbnNpdGlvbigwKSwgcy5hbmltYXRpbmcpIHtcbiAgICAgICAgY29uc3QgZSA9IG5ldyB3aW5kb3cuQ3VzdG9tRXZlbnQoXCJ0cmFuc2l0aW9uZW5kXCIsIHtcbiAgICAgICAgICBidWJibGVzOiAhMCxcbiAgICAgICAgICBjYW5jZWxhYmxlOiAhMCxcbiAgICAgICAgICBkZXRhaWw6IHtieVN3aXBlclRvdWNoTW92ZTogITB9XG4gICAgICAgIH0pO1xuICAgICAgICBzLndyYXBwZXJFbC5kaXNwYXRjaEV2ZW50KGUpXG4gICAgICB9XG4gICAgICBpLmFsbG93TW9tZW50dW1Cb3VuY2UgPSAhMSwgIXIuZ3JhYkN1cnNvciB8fCAhMCAhPT0gcy5hbGxvd1NsaWRlTmV4dCAmJiAhMCAhPT0gcy5hbGxvd1NsaWRlUHJldiB8fCBzLnNldEdyYWJDdXJzb3IoITApLCBzLmVtaXQoXCJzbGlkZXJGaXJzdE1vdmVcIiwgcClcbiAgICB9XG4gICAgaWYgKChuZXcgRGF0ZSkuZ2V0VGltZSgpLCBpLmlzTW92ZWQgJiYgaS5hbGxvd1RocmVzaG9sZE1vdmUgJiYgdyAhPT0gcy50b3VjaGVzRGlyZWN0aW9uICYmIGIgJiYgeSAmJiBNYXRoLmFicyhnKSA+PSAxKSByZXR1cm4gT2JqZWN0LmFzc2lnbihuLCB7XG4gICAgICBzdGFydFg6IHUsXG4gICAgICBzdGFydFk6IG0sXG4gICAgICBjdXJyZW50WDogdSxcbiAgICAgIGN1cnJlbnRZOiBtLFxuICAgICAgc3RhcnRUcmFuc2xhdGU6IGkuY3VycmVudFRyYW5zbGF0ZVxuICAgIH0pLCBpLmxvb3BTd2FwUmVzZXQgPSAhMCwgdm9pZCAoaS5zdGFydFRyYW5zbGF0ZSA9IGkuY3VycmVudFRyYW5zbGF0ZSk7XG4gICAgcy5lbWl0KFwic2xpZGVyTW92ZVwiLCBwKSwgaS5pc01vdmVkID0gITAsIGkuY3VycmVudFRyYW5zbGF0ZSA9IGcgKyBpLnN0YXJ0VHJhbnNsYXRlO1xuICAgIGxldCBFID0gITAsIHggPSByLnJlc2lzdGFuY2VSYXRpbztcbiAgICBpZiAoci50b3VjaFJlbGVhc2VPbkVkZ2VzICYmICh4ID0gMCksIGcgPiAwID8gKGIgJiYgeSAmJiBpLmFsbG93VGhyZXNob2xkTW92ZSAmJiBpLmN1cnJlbnRUcmFuc2xhdGUgPiAoci5jZW50ZXJlZFNsaWRlcyA/IHMubWluVHJhbnNsYXRlKCkgLSBzLnNsaWRlc1NpemVzR3JpZFtzLmFjdGl2ZUluZGV4ICsgMV0gLSAoXCJhdXRvXCIgIT09IHIuc2xpZGVzUGVyVmlldyAmJiBzLnNsaWRlcy5sZW5ndGggLSByLnNsaWRlc1BlclZpZXcgPj0gMiA/IHMuc2xpZGVzU2l6ZXNHcmlkW3MuYWN0aXZlSW5kZXggKyAxXSArIHMucGFyYW1zLnNwYWNlQmV0d2VlbiA6IDApIC0gcy5wYXJhbXMuc3BhY2VCZXR3ZWVuIDogcy5taW5UcmFuc2xhdGUoKSkgJiYgcy5sb29wRml4KHtcbiAgICAgIGRpcmVjdGlvbjogXCJwcmV2XCIsXG4gICAgICBzZXRUcmFuc2xhdGU6ICEwLFxuICAgICAgYWN0aXZlU2xpZGVJbmRleDogMFxuICAgIH0pLCBpLmN1cnJlbnRUcmFuc2xhdGUgPiBzLm1pblRyYW5zbGF0ZSgpICYmIChFID0gITEsIHIucmVzaXN0YW5jZSAmJiAoaS5jdXJyZW50VHJhbnNsYXRlID0gcy5taW5UcmFuc2xhdGUoKSAtIDEgKyAoLXMubWluVHJhbnNsYXRlKCkgKyBpLnN0YXJ0VHJhbnNsYXRlICsgZykgKiogeCkpKSA6IGcgPCAwICYmIChiICYmIHkgJiYgaS5hbGxvd1RocmVzaG9sZE1vdmUgJiYgaS5jdXJyZW50VHJhbnNsYXRlIDwgKHIuY2VudGVyZWRTbGlkZXMgPyBzLm1heFRyYW5zbGF0ZSgpICsgcy5zbGlkZXNTaXplc0dyaWRbcy5zbGlkZXNTaXplc0dyaWQubGVuZ3RoIC0gMV0gKyBzLnBhcmFtcy5zcGFjZUJldHdlZW4gKyAoXCJhdXRvXCIgIT09IHIuc2xpZGVzUGVyVmlldyAmJiBzLnNsaWRlcy5sZW5ndGggLSByLnNsaWRlc1BlclZpZXcgPj0gMiA/IHMuc2xpZGVzU2l6ZXNHcmlkW3Muc2xpZGVzU2l6ZXNHcmlkLmxlbmd0aCAtIDFdICsgcy5wYXJhbXMuc3BhY2VCZXR3ZWVuIDogMCkgOiBzLm1heFRyYW5zbGF0ZSgpKSAmJiBzLmxvb3BGaXgoe1xuICAgICAgZGlyZWN0aW9uOiBcIm5leHRcIixcbiAgICAgIHNldFRyYW5zbGF0ZTogITAsXG4gICAgICBhY3RpdmVTbGlkZUluZGV4OiBzLnNsaWRlcy5sZW5ndGggLSAoXCJhdXRvXCIgPT09IHIuc2xpZGVzUGVyVmlldyA/IHMuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IE1hdGguY2VpbChwYXJzZUZsb2F0KHIuc2xpZGVzUGVyVmlldywgMTApKSlcbiAgICB9KSwgaS5jdXJyZW50VHJhbnNsYXRlIDwgcy5tYXhUcmFuc2xhdGUoKSAmJiAoRSA9ICExLCByLnJlc2lzdGFuY2UgJiYgKGkuY3VycmVudFRyYW5zbGF0ZSA9IHMubWF4VHJhbnNsYXRlKCkgKyAxIC0gKHMubWF4VHJhbnNsYXRlKCkgLSBpLnN0YXJ0VHJhbnNsYXRlIC0gZykgKiogeCkpKSwgRSAmJiAocC5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciA9ICEwKSwgIXMuYWxsb3dTbGlkZU5leHQgJiYgXCJuZXh0XCIgPT09IHMuc3dpcGVEaXJlY3Rpb24gJiYgaS5jdXJyZW50VHJhbnNsYXRlIDwgaS5zdGFydFRyYW5zbGF0ZSAmJiAoaS5jdXJyZW50VHJhbnNsYXRlID0gaS5zdGFydFRyYW5zbGF0ZSksICFzLmFsbG93U2xpZGVQcmV2ICYmIFwicHJldlwiID09PSBzLnN3aXBlRGlyZWN0aW9uICYmIGkuY3VycmVudFRyYW5zbGF0ZSA+IGkuc3RhcnRUcmFuc2xhdGUgJiYgKGkuY3VycmVudFRyYW5zbGF0ZSA9IGkuc3RhcnRUcmFuc2xhdGUpLCBzLmFsbG93U2xpZGVQcmV2IHx8IHMuYWxsb3dTbGlkZU5leHQgfHwgKGkuY3VycmVudFRyYW5zbGF0ZSA9IGkuc3RhcnRUcmFuc2xhdGUpLCByLnRocmVzaG9sZCA+IDApIHtcbiAgICAgIGlmICghKE1hdGguYWJzKGcpID4gci50aHJlc2hvbGQgfHwgaS5hbGxvd1RocmVzaG9sZE1vdmUpKSByZXR1cm4gdm9pZCAoaS5jdXJyZW50VHJhbnNsYXRlID0gaS5zdGFydFRyYW5zbGF0ZSk7XG4gICAgICBpZiAoIWkuYWxsb3dUaHJlc2hvbGRNb3ZlKSByZXR1cm4gaS5hbGxvd1RocmVzaG9sZE1vdmUgPSAhMCwgbi5zdGFydFggPSBuLmN1cnJlbnRYLCBuLnN0YXJ0WSA9IG4uY3VycmVudFksIGkuY3VycmVudFRyYW5zbGF0ZSA9IGkuc3RhcnRUcmFuc2xhdGUsIHZvaWQgKG4uZGlmZiA9IHMuaXNIb3Jpem9udGFsKCkgPyBuLmN1cnJlbnRYIC0gbi5zdGFydFggOiBuLmN1cnJlbnRZIC0gbi5zdGFydFkpXG4gICAgfVxuICAgIHIuZm9sbG93RmluZ2VyICYmICFyLmNzc01vZGUgJiYgKChyLmZyZWVNb2RlICYmIHIuZnJlZU1vZGUuZW5hYmxlZCAmJiBzLmZyZWVNb2RlIHx8IHIud2F0Y2hTbGlkZXNQcm9ncmVzcykgJiYgKHMudXBkYXRlQWN0aXZlSW5kZXgoKSwgcy51cGRhdGVTbGlkZXNDbGFzc2VzKCkpLCByLmZyZWVNb2RlICYmIHIuZnJlZU1vZGUuZW5hYmxlZCAmJiBzLmZyZWVNb2RlICYmIHMuZnJlZU1vZGUub25Ub3VjaE1vdmUoKSwgcy51cGRhdGVQcm9ncmVzcyhpLmN1cnJlbnRUcmFuc2xhdGUpLCBzLnNldFRyYW5zbGF0ZShpLmN1cnJlbnRUcmFuc2xhdGUpKVxuICB9XG5cbiAgZnVuY3Rpb24gXyhlKSB7XG4gICAgY29uc3QgdCA9IHRoaXMsIHMgPSB0LnRvdWNoRXZlbnRzRGF0YTtcbiAgICBsZXQgYSwgaSA9IGU7XG4gICAgaS5vcmlnaW5hbEV2ZW50ICYmIChpID0gaS5vcmlnaW5hbEV2ZW50KTtcbiAgICBpZiAoXCJ0b3VjaGVuZFwiID09PSBpLnR5cGUgfHwgXCJ0b3VjaGNhbmNlbFwiID09PSBpLnR5cGUpIHtcbiAgICAgIGlmIChhID0gWy4uLmkuY2hhbmdlZFRvdWNoZXNdLmZpbHRlcigoZSA9PiBlLmlkZW50aWZpZXIgPT09IHMudG91Y2hJZCkpWzBdLCAhYSB8fCBhLmlkZW50aWZpZXIgIT09IHMudG91Y2hJZCkgcmV0dXJuXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChudWxsICE9PSBzLnRvdWNoSWQpIHJldHVybjtcbiAgICAgIGlmIChpLnBvaW50ZXJJZCAhPT0gcy5wb2ludGVySWQpIHJldHVybjtcbiAgICAgIGEgPSBpXG4gICAgfVxuICAgIGlmIChbXCJwb2ludGVyY2FuY2VsXCIsIFwicG9pbnRlcm91dFwiLCBcInBvaW50ZXJsZWF2ZVwiLCBcImNvbnRleHRtZW51XCJdLmluY2x1ZGVzKGkudHlwZSkpIHtcbiAgICAgIGlmICghKFtcInBvaW50ZXJjYW5jZWxcIiwgXCJjb250ZXh0bWVudVwiXS5pbmNsdWRlcyhpLnR5cGUpICYmICh0LmJyb3dzZXIuaXNTYWZhcmkgfHwgdC5icm93c2VyLmlzV2ViVmlldykpKSByZXR1cm5cbiAgICB9XG4gICAgcy5wb2ludGVySWQgPSBudWxsLCBzLnRvdWNoSWQgPSBudWxsO1xuICAgIGNvbnN0IHtwYXJhbXM6IHIsIHRvdWNoZXM6IG4sIHJ0bFRyYW5zbGF0ZTogZCwgc2xpZGVzR3JpZDogYywgZW5hYmxlZDogcH0gPSB0O1xuICAgIGlmICghcCkgcmV0dXJuO1xuICAgIGlmICghci5zaW11bGF0ZVRvdWNoICYmIFwibW91c2VcIiA9PT0gaS5wb2ludGVyVHlwZSkgcmV0dXJuO1xuICAgIGlmIChzLmFsbG93VG91Y2hDYWxsYmFja3MgJiYgdC5lbWl0KFwidG91Y2hFbmRcIiwgaSksIHMuYWxsb3dUb3VjaENhbGxiYWNrcyA9ICExLCAhcy5pc1RvdWNoZWQpIHJldHVybiBzLmlzTW92ZWQgJiYgci5ncmFiQ3Vyc29yICYmIHQuc2V0R3JhYkN1cnNvcighMSksIHMuaXNNb3ZlZCA9ICExLCB2b2lkIChzLnN0YXJ0TW92aW5nID0gITEpO1xuICAgIHIuZ3JhYkN1cnNvciAmJiBzLmlzTW92ZWQgJiYgcy5pc1RvdWNoZWQgJiYgKCEwID09PSB0LmFsbG93U2xpZGVOZXh0IHx8ICEwID09PSB0LmFsbG93U2xpZGVQcmV2KSAmJiB0LnNldEdyYWJDdXJzb3IoITEpO1xuICAgIGNvbnN0IHUgPSBvKCksIG0gPSB1IC0gcy50b3VjaFN0YXJ0VGltZTtcbiAgICBpZiAodC5hbGxvd0NsaWNrKSB7XG4gICAgICBjb25zdCBlID0gaS5wYXRoIHx8IGkuY29tcG9zZWRQYXRoICYmIGkuY29tcG9zZWRQYXRoKCk7XG4gICAgICB0LnVwZGF0ZUNsaWNrZWRTbGlkZShlICYmIGVbMF0gfHwgaS50YXJnZXQsIGUpLCB0LmVtaXQoXCJ0YXAgY2xpY2tcIiwgaSksIG0gPCAzMDAgJiYgdSAtIHMubGFzdENsaWNrVGltZSA8IDMwMCAmJiB0LmVtaXQoXCJkb3VibGVUYXAgZG91YmxlQ2xpY2tcIiwgaSlcbiAgICB9XG4gICAgaWYgKHMubGFzdENsaWNrVGltZSA9IG8oKSwgbCgoKCkgPT4ge1xuICAgICAgdC5kZXN0cm95ZWQgfHwgKHQuYWxsb3dDbGljayA9ICEwKVxuICAgIH0pKSwgIXMuaXNUb3VjaGVkIHx8ICFzLmlzTW92ZWQgfHwgIXQuc3dpcGVEaXJlY3Rpb24gfHwgMCA9PT0gbi5kaWZmICYmICFzLmxvb3BTd2FwUmVzZXQgfHwgcy5jdXJyZW50VHJhbnNsYXRlID09PSBzLnN0YXJ0VHJhbnNsYXRlICYmICFzLmxvb3BTd2FwUmVzZXQpIHJldHVybiBzLmlzVG91Y2hlZCA9ICExLCBzLmlzTW92ZWQgPSAhMSwgdm9pZCAocy5zdGFydE1vdmluZyA9ICExKTtcbiAgICBsZXQgaDtcbiAgICBpZiAocy5pc1RvdWNoZWQgPSAhMSwgcy5pc01vdmVkID0gITEsIHMuc3RhcnRNb3ZpbmcgPSAhMSwgaCA9IHIuZm9sbG93RmluZ2VyID8gZCA/IHQudHJhbnNsYXRlIDogLXQudHJhbnNsYXRlIDogLXMuY3VycmVudFRyYW5zbGF0ZSwgci5jc3NNb2RlKSByZXR1cm47XG4gICAgaWYgKHIuZnJlZU1vZGUgJiYgci5mcmVlTW9kZS5lbmFibGVkKSByZXR1cm4gdm9pZCB0LmZyZWVNb2RlLm9uVG91Y2hFbmQoe2N1cnJlbnRQb3M6IGh9KTtcbiAgICBjb25zdCBmID0gaCA+PSAtdC5tYXhUcmFuc2xhdGUoKSAmJiAhdC5wYXJhbXMubG9vcDtcbiAgICBsZXQgZyA9IDAsIHYgPSB0LnNsaWRlc1NpemVzR3JpZFswXTtcbiAgICBmb3IgKGxldCBlID0gMDsgZSA8IGMubGVuZ3RoOyBlICs9IGUgPCByLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiByLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgICBjb25zdCB0ID0gZSA8IHIuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiByLnNsaWRlc1Blckdyb3VwO1xuICAgICAgdm9pZCAwICE9PSBjW2UgKyB0XSA/IChmIHx8IGggPj0gY1tlXSAmJiBoIDwgY1tlICsgdF0pICYmIChnID0gZSwgdiA9IGNbZSArIHRdIC0gY1tlXSkgOiAoZiB8fCBoID49IGNbZV0pICYmIChnID0gZSwgdiA9IGNbYy5sZW5ndGggLSAxXSAtIGNbYy5sZW5ndGggLSAyXSlcbiAgICB9XG4gICAgbGV0IHcgPSBudWxsLCBiID0gbnVsbDtcbiAgICByLnJld2luZCAmJiAodC5pc0JlZ2lubmluZyA/IGIgPSByLnZpcnR1YWwgJiYgci52aXJ0dWFsLmVuYWJsZWQgJiYgdC52aXJ0dWFsID8gdC52aXJ0dWFsLnNsaWRlcy5sZW5ndGggLSAxIDogdC5zbGlkZXMubGVuZ3RoIC0gMSA6IHQuaXNFbmQgJiYgKHcgPSAwKSk7XG4gICAgY29uc3QgeSA9IChoIC0gY1tnXSkgLyB2LCBFID0gZyA8IHIuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiByLnNsaWRlc1Blckdyb3VwO1xuICAgIGlmIChtID4gci5sb25nU3dpcGVzTXMpIHtcbiAgICAgIGlmICghci5sb25nU3dpcGVzKSByZXR1cm4gdm9pZCB0LnNsaWRlVG8odC5hY3RpdmVJbmRleCk7XG4gICAgICBcIm5leHRcIiA9PT0gdC5zd2lwZURpcmVjdGlvbiAmJiAoeSA+PSByLmxvbmdTd2lwZXNSYXRpbyA/IHQuc2xpZGVUbyhyLnJld2luZCAmJiB0LmlzRW5kID8gdyA6IGcgKyBFKSA6IHQuc2xpZGVUbyhnKSksIFwicHJldlwiID09PSB0LnN3aXBlRGlyZWN0aW9uICYmICh5ID4gMSAtIHIubG9uZ1N3aXBlc1JhdGlvID8gdC5zbGlkZVRvKGcgKyBFKSA6IG51bGwgIT09IGIgJiYgeSA8IDAgJiYgTWF0aC5hYnMoeSkgPiByLmxvbmdTd2lwZXNSYXRpbyA/IHQuc2xpZGVUbyhiKSA6IHQuc2xpZGVUbyhnKSlcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFyLnNob3J0U3dpcGVzKSByZXR1cm4gdm9pZCB0LnNsaWRlVG8odC5hY3RpdmVJbmRleCk7XG4gICAgICB0Lm5hdmlnYXRpb24gJiYgKGkudGFyZ2V0ID09PSB0Lm5hdmlnYXRpb24ubmV4dEVsIHx8IGkudGFyZ2V0ID09PSB0Lm5hdmlnYXRpb24ucHJldkVsKSA/IGkudGFyZ2V0ID09PSB0Lm5hdmlnYXRpb24ubmV4dEVsID8gdC5zbGlkZVRvKGcgKyBFKSA6IHQuc2xpZGVUbyhnKSA6IChcIm5leHRcIiA9PT0gdC5zd2lwZURpcmVjdGlvbiAmJiB0LnNsaWRlVG8obnVsbCAhPT0gdyA/IHcgOiBnICsgRSksIFwicHJldlwiID09PSB0LnN3aXBlRGlyZWN0aW9uICYmIHQuc2xpZGVUbyhudWxsICE9PSBiID8gYiA6IGcpKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIFcoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMsIHtwYXJhbXM6IHQsIGVsOiBzfSA9IGU7XG4gICAgaWYgKHMgJiYgMCA9PT0gcy5vZmZzZXRXaWR0aCkgcmV0dXJuO1xuICAgIHQuYnJlYWtwb2ludHMgJiYgZS5zZXRCcmVha3BvaW50KCk7XG4gICAgY29uc3Qge2FsbG93U2xpZGVOZXh0OiBhLCBhbGxvd1NsaWRlUHJldjogaSwgc25hcEdyaWQ6IHJ9ID0gZSwgbiA9IGUudmlydHVhbCAmJiBlLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgZS5hbGxvd1NsaWRlTmV4dCA9ICEwLCBlLmFsbG93U2xpZGVQcmV2ID0gITAsIGUudXBkYXRlU2l6ZSgpLCBlLnVwZGF0ZVNsaWRlcygpLCBlLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBjb25zdCBsID0gbiAmJiB0Lmxvb3A7XG4gICAgIShcImF1dG9cIiA9PT0gdC5zbGlkZXNQZXJWaWV3IHx8IHQuc2xpZGVzUGVyVmlldyA+IDEpIHx8ICFlLmlzRW5kIHx8IGUuaXNCZWdpbm5pbmcgfHwgZS5wYXJhbXMuY2VudGVyZWRTbGlkZXMgfHwgbCA/IGUucGFyYW1zLmxvb3AgJiYgIW4gPyBlLnNsaWRlVG9Mb29wKGUucmVhbEluZGV4LCAwLCAhMSwgITApIDogZS5zbGlkZVRvKGUuYWN0aXZlSW5kZXgsIDAsICExLCAhMCkgOiBlLnNsaWRlVG8oZS5zbGlkZXMubGVuZ3RoIC0gMSwgMCwgITEsICEwKSwgZS5hdXRvcGxheSAmJiBlLmF1dG9wbGF5LnJ1bm5pbmcgJiYgZS5hdXRvcGxheS5wYXVzZWQgJiYgKGNsZWFyVGltZW91dChlLmF1dG9wbGF5LnJlc2l6ZVRpbWVvdXQpLCBlLmF1dG9wbGF5LnJlc2l6ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgoKSA9PiB7XG4gICAgICBlLmF1dG9wbGF5ICYmIGUuYXV0b3BsYXkucnVubmluZyAmJiBlLmF1dG9wbGF5LnBhdXNlZCAmJiBlLmF1dG9wbGF5LnJlc3VtZSgpXG4gICAgfSksIDUwMCkpLCBlLmFsbG93U2xpZGVQcmV2ID0gaSwgZS5hbGxvd1NsaWRlTmV4dCA9IGEsIGUucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgciAhPT0gZS5zbmFwR3JpZCAmJiBlLmNoZWNrT3ZlcmZsb3coKVxuICB9XG5cbiAgZnVuY3Rpb24gaihlKSB7XG4gICAgY29uc3QgdCA9IHRoaXM7XG4gICAgdC5lbmFibGVkICYmICh0LmFsbG93Q2xpY2sgfHwgKHQucGFyYW1zLnByZXZlbnRDbGlja3MgJiYgZS5wcmV2ZW50RGVmYXVsdCgpLCB0LnBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24gJiYgdC5hbmltYXRpbmcgJiYgKGUuc3RvcFByb3BhZ2F0aW9uKCksIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkpKSlcbiAgfVxuXG4gIGZ1bmN0aW9uIFUoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMsIHt3cmFwcGVyRWw6IHQsIHJ0bFRyYW5zbGF0ZTogcywgZW5hYmxlZDogYX0gPSBlO1xuICAgIGlmICghYSkgcmV0dXJuO1xuICAgIGxldCBpO1xuICAgIGUucHJldmlvdXNUcmFuc2xhdGUgPSBlLnRyYW5zbGF0ZSwgZS5pc0hvcml6b250YWwoKSA/IGUudHJhbnNsYXRlID0gLXQuc2Nyb2xsTGVmdCA6IGUudHJhbnNsYXRlID0gLXQuc2Nyb2xsVG9wLCAwID09PSBlLnRyYW5zbGF0ZSAmJiAoZS50cmFuc2xhdGUgPSAwKSwgZS51cGRhdGVBY3RpdmVJbmRleCgpLCBlLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBjb25zdCByID0gZS5tYXhUcmFuc2xhdGUoKSAtIGUubWluVHJhbnNsYXRlKCk7XG4gICAgaSA9IDAgPT09IHIgPyAwIDogKGUudHJhbnNsYXRlIC0gZS5taW5UcmFuc2xhdGUoKSkgLyByLCBpICE9PSBlLnByb2dyZXNzICYmIGUudXBkYXRlUHJvZ3Jlc3MocyA/IC1lLnRyYW5zbGF0ZSA6IGUudHJhbnNsYXRlKSwgZS5lbWl0KFwic2V0VHJhbnNsYXRlXCIsIGUudHJhbnNsYXRlLCAhMSlcbiAgfVxuXG4gIGZ1bmN0aW9uIEsoZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzO1xuICAgIEQodCwgZS50YXJnZXQpLCB0LnBhcmFtcy5jc3NNb2RlIHx8IFwiYXV0b1wiICE9PSB0LnBhcmFtcy5zbGlkZXNQZXJWaWV3ICYmICF0LnBhcmFtcy5hdXRvSGVpZ2h0IHx8IHQudXBkYXRlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIFooKSB7XG4gICAgY29uc3QgZSA9IHRoaXM7XG4gICAgZS5kb2N1bWVudFRvdWNoSGFuZGxlclByb2NlZWRlZCB8fCAoZS5kb2N1bWVudFRvdWNoSGFuZGxlclByb2NlZWRlZCA9ICEwLCBlLnBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzICYmIChlLmVsLnN0eWxlLnRvdWNoQWN0aW9uID0gXCJhdXRvXCIpKVxuICB9XG5cbiAgY29uc3QgUSA9IChlLCB0KSA9PiB7XG4gICAgY29uc3QgcyA9IGEoKSwge3BhcmFtczogaSwgZWw6IHIsIHdyYXBwZXJFbDogbiwgZGV2aWNlOiBsfSA9IGUsIG8gPSAhIWkubmVzdGVkLFxuICAgICAgZCA9IFwib25cIiA9PT0gdCA/IFwiYWRkRXZlbnRMaXN0ZW5lclwiIDogXCJyZW1vdmVFdmVudExpc3RlbmVyXCIsIGMgPSB0O1xuICAgIHIgJiYgXCJzdHJpbmdcIiAhPSB0eXBlb2YgciAmJiAoc1tkXShcInRvdWNoc3RhcnRcIiwgZS5vbkRvY3VtZW50VG91Y2hTdGFydCwge1xuICAgICAgcGFzc2l2ZTogITEsXG4gICAgICBjYXB0dXJlOiBvXG4gICAgfSksIHJbZF0oXCJ0b3VjaHN0YXJ0XCIsIGUub25Ub3VjaFN0YXJ0LCB7cGFzc2l2ZTogITF9KSwgcltkXShcInBvaW50ZXJkb3duXCIsIGUub25Ub3VjaFN0YXJ0LCB7cGFzc2l2ZTogITF9KSwgc1tkXShcInRvdWNobW92ZVwiLCBlLm9uVG91Y2hNb3ZlLCB7XG4gICAgICBwYXNzaXZlOiAhMSxcbiAgICAgIGNhcHR1cmU6IG9cbiAgICB9KSwgc1tkXShcInBvaW50ZXJtb3ZlXCIsIGUub25Ub3VjaE1vdmUsIHtcbiAgICAgIHBhc3NpdmU6ICExLFxuICAgICAgY2FwdHVyZTogb1xuICAgIH0pLCBzW2RdKFwidG91Y2hlbmRcIiwgZS5vblRvdWNoRW5kLCB7cGFzc2l2ZTogITB9KSwgc1tkXShcInBvaW50ZXJ1cFwiLCBlLm9uVG91Y2hFbmQsIHtwYXNzaXZlOiAhMH0pLCBzW2RdKFwicG9pbnRlcmNhbmNlbFwiLCBlLm9uVG91Y2hFbmQsIHtwYXNzaXZlOiAhMH0pLCBzW2RdKFwidG91Y2hjYW5jZWxcIiwgZS5vblRvdWNoRW5kLCB7cGFzc2l2ZTogITB9KSwgc1tkXShcInBvaW50ZXJvdXRcIiwgZS5vblRvdWNoRW5kLCB7cGFzc2l2ZTogITB9KSwgc1tkXShcInBvaW50ZXJsZWF2ZVwiLCBlLm9uVG91Y2hFbmQsIHtwYXNzaXZlOiAhMH0pLCBzW2RdKFwiY29udGV4dG1lbnVcIiwgZS5vblRvdWNoRW5kLCB7cGFzc2l2ZTogITB9KSwgKGkucHJldmVudENsaWNrcyB8fCBpLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbikgJiYgcltkXShcImNsaWNrXCIsIGUub25DbGljaywgITApLCBpLmNzc01vZGUgJiYgbltkXShcInNjcm9sbFwiLCBlLm9uU2Nyb2xsKSwgaS51cGRhdGVPbldpbmRvd1Jlc2l6ZSA/IGVbY10obC5pb3MgfHwgbC5hbmRyb2lkID8gXCJyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGVcIiA6IFwicmVzaXplIG9ic2VydmVyVXBkYXRlXCIsIFcsICEwKSA6IGVbY10oXCJvYnNlcnZlclVwZGF0ZVwiLCBXLCAhMCksIHJbZF0oXCJsb2FkXCIsIGUub25Mb2FkLCB7Y2FwdHVyZTogITB9KSlcbiAgfTtcbiAgY29uc3QgSiA9IChlLCB0KSA9PiBlLmdyaWQgJiYgdC5ncmlkICYmIHQuZ3JpZC5yb3dzID4gMTtcbiAgdmFyIGVlID0ge1xuICAgIGluaXQ6ICEwLFxuICAgIGRpcmVjdGlvbjogXCJob3Jpem9udGFsXCIsXG4gICAgb25lV2F5TW92ZW1lbnQ6ICExLFxuICAgIHN3aXBlckVsZW1lbnROb2RlTmFtZTogXCJTV0lQRVItQ09OVEFJTkVSXCIsXG4gICAgdG91Y2hFdmVudHNUYXJnZXQ6IFwid3JhcHBlclwiLFxuICAgIGluaXRpYWxTbGlkZTogMCxcbiAgICBzcGVlZDogMzAwLFxuICAgIGNzc01vZGU6ICExLFxuICAgIHVwZGF0ZU9uV2luZG93UmVzaXplOiAhMCxcbiAgICByZXNpemVPYnNlcnZlcjogITAsXG4gICAgbmVzdGVkOiAhMSxcbiAgICBjcmVhdGVFbGVtZW50czogITEsXG4gICAgZXZlbnRzUHJlZml4OiBcInN3aXBlclwiLFxuICAgIGVuYWJsZWQ6ICEwLFxuICAgIGZvY3VzYWJsZUVsZW1lbnRzOiBcImlucHV0LCBzZWxlY3QsIG9wdGlvbiwgdGV4dGFyZWEsIGJ1dHRvbiwgdmlkZW8sIGxhYmVsXCIsXG4gICAgd2lkdGg6IG51bGwsXG4gICAgaGVpZ2h0OiBudWxsLFxuICAgIHByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbjogITEsXG4gICAgdXNlckFnZW50OiBudWxsLFxuICAgIHVybDogbnVsbCxcbiAgICBlZGdlU3dpcGVEZXRlY3Rpb246ICExLFxuICAgIGVkZ2VTd2lwZVRocmVzaG9sZDogMjAsXG4gICAgYXV0b0hlaWdodDogITEsXG4gICAgc2V0V3JhcHBlclNpemU6ICExLFxuICAgIHZpcnR1YWxUcmFuc2xhdGU6ICExLFxuICAgIGVmZmVjdDogXCJzbGlkZVwiLFxuICAgIGJyZWFrcG9pbnRzOiB2b2lkIDAsXG4gICAgYnJlYWtwb2ludHNCYXNlOiBcIndpbmRvd1wiLFxuICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgIHNsaWRlc1Blckdyb3VwU2tpcDogMCxcbiAgICBzbGlkZXNQZXJHcm91cEF1dG86ICExLFxuICAgIGNlbnRlcmVkU2xpZGVzOiAhMSxcbiAgICBjZW50ZXJlZFNsaWRlc0JvdW5kczogITEsXG4gICAgc2xpZGVzT2Zmc2V0QmVmb3JlOiAwLFxuICAgIHNsaWRlc09mZnNldEFmdGVyOiAwLFxuICAgIG5vcm1hbGl6ZVNsaWRlSW5kZXg6ICEwLFxuICAgIGNlbnRlckluc3VmZmljaWVudFNsaWRlczogITEsXG4gICAgd2F0Y2hPdmVyZmxvdzogITAsXG4gICAgcm91bmRMZW5ndGhzOiAhMSxcbiAgICB0b3VjaFJhdGlvOiAxLFxuICAgIHRvdWNoQW5nbGU6IDQ1LFxuICAgIHNpbXVsYXRlVG91Y2g6ICEwLFxuICAgIHNob3J0U3dpcGVzOiAhMCxcbiAgICBsb25nU3dpcGVzOiAhMCxcbiAgICBsb25nU3dpcGVzUmF0aW86IC41LFxuICAgIGxvbmdTd2lwZXNNczogMzAwLFxuICAgIGZvbGxvd0ZpbmdlcjogITAsXG4gICAgYWxsb3dUb3VjaE1vdmU6ICEwLFxuICAgIHRocmVzaG9sZDogNSxcbiAgICB0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb246ICExLFxuICAgIHRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDogITAsXG4gICAgdG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQ6ICExLFxuICAgIHRvdWNoUmVsZWFzZU9uRWRnZXM6ICExLFxuICAgIHVuaXF1ZU5hdkVsZW1lbnRzOiAhMCxcbiAgICByZXNpc3RhbmNlOiAhMCxcbiAgICByZXNpc3RhbmNlUmF0aW86IC44NSxcbiAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiAhMSxcbiAgICBncmFiQ3Vyc29yOiAhMSxcbiAgICBwcmV2ZW50Q2xpY2tzOiAhMCxcbiAgICBwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb246ICEwLFxuICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6ICExLFxuICAgIGxvb3A6ICExLFxuICAgIGxvb3BBZGRCbGFua1NsaWRlczogITAsXG4gICAgbG9vcEFkZGl0aW9uYWxTbGlkZXM6IDAsXG4gICAgbG9vcFByZXZlbnRzU2xpZGluZzogITAsXG4gICAgcmV3aW5kOiAhMSxcbiAgICBhbGxvd1NsaWRlUHJldjogITAsXG4gICAgYWxsb3dTbGlkZU5leHQ6ICEwLFxuICAgIHN3aXBlSGFuZGxlcjogbnVsbCxcbiAgICBub1N3aXBpbmc6ICEwLFxuICAgIG5vU3dpcGluZ0NsYXNzOiBcInN3aXBlci1uby1zd2lwaW5nXCIsXG4gICAgbm9Td2lwaW5nU2VsZWN0b3I6IG51bGwsXG4gICAgcGFzc2l2ZUxpc3RlbmVyczogITAsXG4gICAgbWF4QmFja2ZhY2VIaWRkZW5TbGlkZXM6IDEwLFxuICAgIGNvbnRhaW5lck1vZGlmaWVyQ2xhc3M6IFwic3dpcGVyLVwiLFxuICAgIHNsaWRlQ2xhc3M6IFwic3dpcGVyLXNsaWRlXCIsXG4gICAgc2xpZGVCbGFua0NsYXNzOiBcInN3aXBlci1zbGlkZS1ibGFua1wiLFxuICAgIHNsaWRlQWN0aXZlQ2xhc3M6IFwic3dpcGVyLXNsaWRlLWFjdGl2ZVwiLFxuICAgIHNsaWRlVmlzaWJsZUNsYXNzOiBcInN3aXBlci1zbGlkZS12aXNpYmxlXCIsXG4gICAgc2xpZGVGdWxseVZpc2libGVDbGFzczogXCJzd2lwZXItc2xpZGUtZnVsbHktdmlzaWJsZVwiLFxuICAgIHNsaWRlTmV4dENsYXNzOiBcInN3aXBlci1zbGlkZS1uZXh0XCIsXG4gICAgc2xpZGVQcmV2Q2xhc3M6IFwic3dpcGVyLXNsaWRlLXByZXZcIixcbiAgICB3cmFwcGVyQ2xhc3M6IFwic3dpcGVyLXdyYXBwZXJcIixcbiAgICBsYXp5UHJlbG9hZGVyQ2xhc3M6IFwic3dpcGVyLWxhenktcHJlbG9hZGVyXCIsXG4gICAgbGF6eVByZWxvYWRQcmV2TmV4dDogMCxcbiAgICBydW5DYWxsYmFja3NPbkluaXQ6ICEwLFxuICAgIF9lbWl0Q2xhc3NlczogITFcbiAgfTtcblxuICBmdW5jdGlvbiB0ZShlLCB0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzKSB7XG4gICAgICB2b2lkIDAgPT09IHMgJiYgKHMgPSB7fSk7XG4gICAgICBjb25zdCBhID0gT2JqZWN0LmtleXMocylbMF0sIGkgPSBzW2FdO1xuICAgICAgXCJvYmplY3RcIiA9PSB0eXBlb2YgaSAmJiBudWxsICE9PSBpID8gKCEwID09PSBlW2FdICYmIChlW2FdID0ge2VuYWJsZWQ6ICEwfSksIFwibmF2aWdhdGlvblwiID09PSBhICYmIGVbYV0gJiYgZVthXS5lbmFibGVkICYmICFlW2FdLnByZXZFbCAmJiAhZVthXS5uZXh0RWwgJiYgKGVbYV0uYXV0byA9ICEwKSwgW1wicGFnaW5hdGlvblwiLCBcInNjcm9sbGJhclwiXS5pbmRleE9mKGEpID49IDAgJiYgZVthXSAmJiBlW2FdLmVuYWJsZWQgJiYgIWVbYV0uZWwgJiYgKGVbYV0uYXV0byA9ICEwKSwgYSBpbiBlICYmIFwiZW5hYmxlZFwiIGluIGkgPyAoXCJvYmplY3RcIiAhPSB0eXBlb2YgZVthXSB8fCBcImVuYWJsZWRcIiBpbiBlW2FdIHx8IChlW2FdLmVuYWJsZWQgPSAhMCksIGVbYV0gfHwgKGVbYV0gPSB7ZW5hYmxlZDogITF9KSwgcCh0LCBzKSkgOiBwKHQsIHMpKSA6IHAodCwgcylcbiAgICB9XG4gIH1cblxuICBjb25zdCBzZSA9IHtcbiAgICBldmVudHNFbWl0dGVyOiAkLCB1cGRhdGU6IEIsIHRyYW5zbGF0ZTogTiwgdHJhbnNpdGlvbjoge1xuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgY29uc3QgcyA9IHRoaXM7XG4gICAgICAgIHMucGFyYW1zLmNzc01vZGUgfHwgKHMud3JhcHBlckVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2V9bXNgLCBzLndyYXBwZXJFbC5zdHlsZS50cmFuc2l0aW9uRGVsYXkgPSAwID09PSBlID8gXCIwbXNcIiA6IFwiXCIpLCBzLmVtaXQoXCJzZXRUcmFuc2l0aW9uXCIsIGUsIHQpXG4gICAgICB9LCB0cmFuc2l0aW9uU3RhcnQ6IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9ICEwKTtcbiAgICAgICAgY29uc3QgcyA9IHRoaXMsIHtwYXJhbXM6IGF9ID0gcztcbiAgICAgICAgYS5jc3NNb2RlIHx8IChhLmF1dG9IZWlnaHQgJiYgcy51cGRhdGVBdXRvSGVpZ2h0KCksIFgoe1xuICAgICAgICAgIHN3aXBlcjogcyxcbiAgICAgICAgICBydW5DYWxsYmFja3M6IGUsXG4gICAgICAgICAgZGlyZWN0aW9uOiB0LFxuICAgICAgICAgIHN0ZXA6IFwiU3RhcnRcIlxuICAgICAgICB9KSlcbiAgICAgIH0sIHRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9ICEwKTtcbiAgICAgICAgY29uc3QgcyA9IHRoaXMsIHtwYXJhbXM6IGF9ID0gcztcbiAgICAgICAgcy5hbmltYXRpbmcgPSAhMSwgYS5jc3NNb2RlIHx8IChzLnNldFRyYW5zaXRpb24oMCksIFgoe3N3aXBlcjogcywgcnVuQ2FsbGJhY2tzOiBlLCBkaXJlY3Rpb246IHQsIHN0ZXA6IFwiRW5kXCJ9KSlcbiAgICAgIH1cbiAgICB9LCBzbGlkZTogWSwgbG9vcDogUiwgZ3JhYkN1cnNvcjoge1xuICAgICAgc2V0R3JhYkN1cnNvcjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc3QgdCA9IHRoaXM7XG4gICAgICAgIGlmICghdC5wYXJhbXMuc2ltdWxhdGVUb3VjaCB8fCB0LnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHQuaXNMb2NrZWQgfHwgdC5wYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBzID0gXCJjb250YWluZXJcIiA9PT0gdC5wYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPyB0LmVsIDogdC53cmFwcGVyRWw7XG4gICAgICAgIHQuaXNFbGVtZW50ICYmICh0Ll9fcHJldmVudE9ic2VydmVyX18gPSAhMCksIHMuc3R5bGUuY3Vyc29yID0gXCJtb3ZlXCIsIHMuc3R5bGUuY3Vyc29yID0gZSA/IFwiZ3JhYmJpbmdcIiA6IFwiZ3JhYlwiLCB0LmlzRWxlbWVudCAmJiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCgpID0+IHtcbiAgICAgICAgICB0Ll9fcHJldmVudE9ic2VydmVyX18gPSAhMVxuICAgICAgICB9KSlcbiAgICAgIH0sIHVuc2V0R3JhYkN1cnNvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcztcbiAgICAgICAgZS5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBlLmlzTG9ja2VkIHx8IGUucGFyYW1zLmNzc01vZGUgfHwgKGUuaXNFbGVtZW50ICYmIChlLl9fcHJldmVudE9ic2VydmVyX18gPSAhMCksIGVbXCJjb250YWluZXJcIiA9PT0gZS5wYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPyBcImVsXCIgOiBcIndyYXBwZXJFbFwiXS5zdHlsZS5jdXJzb3IgPSBcIlwiLCBlLmlzRWxlbWVudCAmJiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCgpID0+IHtcbiAgICAgICAgICBlLl9fcHJldmVudE9ic2VydmVyX18gPSAhMVxuICAgICAgICB9KSkpXG4gICAgICB9XG4gICAgfSwgZXZlbnRzOiB7XG4gICAgICBhdHRhY2hFdmVudHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMsIHtwYXJhbXM6IHR9ID0gZTtcbiAgICAgICAgZS5vblRvdWNoU3RhcnQgPSBGLmJpbmQoZSksIGUub25Ub3VjaE1vdmUgPSBWLmJpbmQoZSksIGUub25Ub3VjaEVuZCA9IF8uYmluZChlKSwgZS5vbkRvY3VtZW50VG91Y2hTdGFydCA9IFouYmluZChlKSwgdC5jc3NNb2RlICYmIChlLm9uU2Nyb2xsID0gVS5iaW5kKGUpKSwgZS5vbkNsaWNrID0gai5iaW5kKGUpLCBlLm9uTG9hZCA9IEsuYmluZChlKSwgUShlLCBcIm9uXCIpXG4gICAgICB9LCBkZXRhY2hFdmVudHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgUSh0aGlzLCBcIm9mZlwiKVxuICAgICAgfVxuICAgIH0sIGJyZWFrcG9pbnRzOiB7XG4gICAgICBzZXRCcmVha3BvaW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLCB7cmVhbEluZGV4OiB0LCBpbml0aWFsaXplZDogcywgcGFyYW1zOiBhLCBlbDogaX0gPSBlLCByID0gYS5icmVha3BvaW50cztcbiAgICAgICAgaWYgKCFyIHx8IHIgJiYgMCA9PT0gT2JqZWN0LmtleXMocikubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIGNvbnN0IG4gPSBlLmdldEJyZWFrcG9pbnQociwgZS5wYXJhbXMuYnJlYWtwb2ludHNCYXNlLCBlLmVsKTtcbiAgICAgICAgaWYgKCFuIHx8IGUuY3VycmVudEJyZWFrcG9pbnQgPT09IG4pIHJldHVybjtcbiAgICAgICAgY29uc3QgbCA9IChuIGluIHIgPyByW25dIDogdm9pZCAwKSB8fCBlLm9yaWdpbmFsUGFyYW1zLCBvID0gSihlLCBhKSwgZCA9IEooZSwgbCksIGMgPSBlLnBhcmFtcy5ncmFiQ3Vyc29yLFxuICAgICAgICAgIHUgPSBsLmdyYWJDdXJzb3IsIG0gPSBhLmVuYWJsZWQ7XG4gICAgICAgIG8gJiYgIWQgPyAoaS5jbGFzc0xpc3QucmVtb3ZlKGAke2EuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkYCwgYCR7YS5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCksIGUuZW1pdENvbnRhaW5lckNsYXNzZXMoKSkgOiAhbyAmJiBkICYmIChpLmNsYXNzTGlzdC5hZGQoYCR7YS5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWRgKSwgKGwuZ3JpZC5maWxsICYmIFwiY29sdW1uXCIgPT09IGwuZ3JpZC5maWxsIHx8ICFsLmdyaWQuZmlsbCAmJiBcImNvbHVtblwiID09PSBhLmdyaWQuZmlsbCkgJiYgaS5jbGFzc0xpc3QuYWRkKGAke2EuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkLWNvbHVtbmApLCBlLmVtaXRDb250YWluZXJDbGFzc2VzKCkpLCBjICYmICF1ID8gZS51bnNldEdyYWJDdXJzb3IoKSA6ICFjICYmIHUgJiYgZS5zZXRHcmFiQ3Vyc29yKCksIFtcIm5hdmlnYXRpb25cIiwgXCJwYWdpbmF0aW9uXCIsIFwic2Nyb2xsYmFyXCJdLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgIGlmICh2b2lkIDAgPT09IGxbdF0pIHJldHVybjtcbiAgICAgICAgICBjb25zdCBzID0gYVt0XSAmJiBhW3RdLmVuYWJsZWQsIGkgPSBsW3RdICYmIGxbdF0uZW5hYmxlZDtcbiAgICAgICAgICBzICYmICFpICYmIGVbdF0uZGlzYWJsZSgpLCAhcyAmJiBpICYmIGVbdF0uZW5hYmxlKClcbiAgICAgICAgfSkpO1xuICAgICAgICBjb25zdCBoID0gbC5kaXJlY3Rpb24gJiYgbC5kaXJlY3Rpb24gIT09IGEuZGlyZWN0aW9uLCBmID0gYS5sb29wICYmIChsLnNsaWRlc1BlclZpZXcgIT09IGEuc2xpZGVzUGVyVmlldyB8fCBoKSxcbiAgICAgICAgICBnID0gYS5sb29wO1xuICAgICAgICBoICYmIHMgJiYgZS5jaGFuZ2VEaXJlY3Rpb24oKSwgcChlLnBhcmFtcywgbCk7XG4gICAgICAgIGNvbnN0IHYgPSBlLnBhcmFtcy5lbmFibGVkLCB3ID0gZS5wYXJhbXMubG9vcDtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihlLCB7XG4gICAgICAgICAgYWxsb3dUb3VjaE1vdmU6IGUucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgICAgICAgIGFsbG93U2xpZGVOZXh0OiBlLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgICAgICBhbGxvd1NsaWRlUHJldjogZS5wYXJhbXMuYWxsb3dTbGlkZVByZXZcbiAgICAgICAgfSksIG0gJiYgIXYgPyBlLmRpc2FibGUoKSA6ICFtICYmIHYgJiYgZS5lbmFibGUoKSwgZS5jdXJyZW50QnJlYWtwb2ludCA9IG4sIGUuZW1pdChcIl9iZWZvcmVCcmVha3BvaW50XCIsIGwpLCBzICYmIChmID8gKGUubG9vcERlc3Ryb3koKSwgZS5sb29wQ3JlYXRlKHQpLCBlLnVwZGF0ZVNsaWRlcygpKSA6ICFnICYmIHcgPyAoZS5sb29wQ3JlYXRlKHQpLCBlLnVwZGF0ZVNsaWRlcygpKSA6IGcgJiYgIXcgJiYgZS5sb29wRGVzdHJveSgpKSwgZS5lbWl0KFwiYnJlYWtwb2ludFwiLCBsKVxuICAgICAgfSwgZ2V0QnJlYWtwb2ludDogZnVuY3Rpb24gKGUsIHQsIHMpIHtcbiAgICAgICAgaWYgKHZvaWQgMCA9PT0gdCAmJiAodCA9IFwid2luZG93XCIpLCAhZSB8fCBcImNvbnRhaW5lclwiID09PSB0ICYmICFzKSByZXR1cm47XG4gICAgICAgIGxldCBhID0gITE7XG4gICAgICAgIGNvbnN0IGkgPSByKCksIG4gPSBcIndpbmRvd1wiID09PSB0ID8gaS5pbm5lckhlaWdodCA6IHMuY2xpZW50SGVpZ2h0LCBsID0gT2JqZWN0LmtleXMoZSkubWFwKChlID0+IHtcbiAgICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSAmJiAwID09PSBlLmluZGV4T2YoXCJAXCIpKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gcGFyc2VGbG9hdChlLnN1YnN0cigxKSk7XG4gICAgICAgICAgICByZXR1cm4ge3ZhbHVlOiBuICogdCwgcG9pbnQ6IGV9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7dmFsdWU6IGUsIHBvaW50OiBlfVxuICAgICAgICB9KSk7XG4gICAgICAgIGwuc29ydCgoKGUsIHQpID0+IHBhcnNlSW50KGUudmFsdWUsIDEwKSAtIHBhcnNlSW50KHQudmFsdWUsIDEwKSkpO1xuICAgICAgICBmb3IgKGxldCBlID0gMDsgZSA8IGwubGVuZ3RoOyBlICs9IDEpIHtcbiAgICAgICAgICBjb25zdCB7cG9pbnQ6IHIsIHZhbHVlOiBufSA9IGxbZV07XG4gICAgICAgICAgXCJ3aW5kb3dcIiA9PT0gdCA/IGkubWF0Y2hNZWRpYShgKG1pbi13aWR0aDogJHtufXB4KWApLm1hdGNoZXMgJiYgKGEgPSByKSA6IG4gPD0gcy5jbGllbnRXaWR0aCAmJiAoYSA9IHIpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGEgfHwgXCJtYXhcIlxuICAgICAgfVxuICAgIH0sIGNoZWNrT3ZlcmZsb3c6IHtcbiAgICAgIGNoZWNrT3ZlcmZsb3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgZSA9IHRoaXMsIHtpc0xvY2tlZDogdCwgcGFyYW1zOiBzfSA9IGUsIHtzbGlkZXNPZmZzZXRCZWZvcmU6IGF9ID0gcztcbiAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICBjb25zdCB0ID0gZS5zbGlkZXMubGVuZ3RoIC0gMSwgcyA9IGUuc2xpZGVzR3JpZFt0XSArIGUuc2xpZGVzU2l6ZXNHcmlkW3RdICsgMiAqIGE7XG4gICAgICAgICAgZS5pc0xvY2tlZCA9IGUuc2l6ZSA+IHNcbiAgICAgICAgfSBlbHNlIGUuaXNMb2NrZWQgPSAxID09PSBlLnNuYXBHcmlkLmxlbmd0aDtcbiAgICAgICAgITAgPT09IHMuYWxsb3dTbGlkZU5leHQgJiYgKGUuYWxsb3dTbGlkZU5leHQgPSAhZS5pc0xvY2tlZCksICEwID09PSBzLmFsbG93U2xpZGVQcmV2ICYmIChlLmFsbG93U2xpZGVQcmV2ID0gIWUuaXNMb2NrZWQpLCB0ICYmIHQgIT09IGUuaXNMb2NrZWQgJiYgKGUuaXNFbmQgPSAhMSksIHQgIT09IGUuaXNMb2NrZWQgJiYgZS5lbWl0KGUuaXNMb2NrZWQgPyBcImxvY2tcIiA6IFwidW5sb2NrXCIpXG4gICAgICB9XG4gICAgfSwgY2xhc3Nlczoge1xuICAgICAgYWRkQ2xhc3NlczogZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBlID0gdGhpcywge2NsYXNzTmFtZXM6IHQsIHBhcmFtczogcywgcnRsOiBhLCBlbDogaSwgZGV2aWNlOiByfSA9IGUsIG4gPSBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgIGNvbnN0IHMgPSBbXTtcbiAgICAgICAgICByZXR1cm4gZS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICAgIFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgPyBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKChhID0+IHtcbiAgICAgICAgICAgICAgZVthXSAmJiBzLnB1c2godCArIGEpXG4gICAgICAgICAgICB9KSkgOiBcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIHMucHVzaCh0ICsgZSlcbiAgICAgICAgICB9KSksIHNcbiAgICAgICAgfShbXCJpbml0aWFsaXplZFwiLCBzLmRpcmVjdGlvbiwge1wiZnJlZS1tb2RlXCI6IGUucGFyYW1zLmZyZWVNb2RlICYmIHMuZnJlZU1vZGUuZW5hYmxlZH0sIHthdXRvaGVpZ2h0OiBzLmF1dG9IZWlnaHR9LCB7cnRsOiBhfSwge2dyaWQ6IHMuZ3JpZCAmJiBzLmdyaWQucm93cyA+IDF9LCB7XCJncmlkLWNvbHVtblwiOiBzLmdyaWQgJiYgcy5ncmlkLnJvd3MgPiAxICYmIFwiY29sdW1uXCIgPT09IHMuZ3JpZC5maWxsfSwge2FuZHJvaWQ6IHIuYW5kcm9pZH0sIHtpb3M6IHIuaW9zfSwge1wiY3NzLW1vZGVcIjogcy5jc3NNb2RlfSwge2NlbnRlcmVkOiBzLmNzc01vZGUgJiYgcy5jZW50ZXJlZFNsaWRlc30sIHtcIndhdGNoLXByb2dyZXNzXCI6IHMud2F0Y2hTbGlkZXNQcm9ncmVzc31dLCBzLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpO1xuICAgICAgICB0LnB1c2goLi4ubiksIGkuY2xhc3NMaXN0LmFkZCguLi50KSwgZS5lbWl0Q29udGFpbmVyQ2xhc3NlcygpXG4gICAgICB9LCByZW1vdmVDbGFzc2VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHtlbDogZSwgY2xhc3NOYW1lczogdH0gPSB0aGlzO1xuICAgICAgICBlICYmIFwic3RyaW5nXCIgIT0gdHlwZW9mIGUgJiYgKGUuY2xhc3NMaXN0LnJlbW92ZSguLi50KSwgdGhpcy5lbWl0Q29udGFpbmVyQ2xhc3NlcygpKVxuICAgICAgfVxuICAgIH1cbiAgfSwgYWUgPSB7fTtcblxuICBjbGFzcyBpZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBsZXQgZSwgdDtcbiAgICAgIGZvciAodmFyIHMgPSBhcmd1bWVudHMubGVuZ3RoLCBpID0gbmV3IEFycmF5KHMpLCByID0gMDsgciA8IHM7IHIrKykgaVtyXSA9IGFyZ3VtZW50c1tyXTtcbiAgICAgIDEgPT09IGkubGVuZ3RoICYmIGlbMF0uY29uc3RydWN0b3IgJiYgXCJPYmplY3RcIiA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlbMF0pLnNsaWNlKDgsIC0xKSA/IHQgPSBpWzBdIDogW2UsIHRdID0gaSwgdCB8fCAodCA9IHt9KSwgdCA9IHAoe30sIHQpLCBlICYmICF0LmVsICYmICh0LmVsID0gZSk7XG4gICAgICBjb25zdCBuID0gYSgpO1xuICAgICAgaWYgKHQuZWwgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdC5lbCAmJiBuLnF1ZXJ5U2VsZWN0b3JBbGwodC5lbCkubGVuZ3RoID4gMSkge1xuICAgICAgICBjb25zdCBlID0gW107XG4gICAgICAgIHJldHVybiBuLnF1ZXJ5U2VsZWN0b3JBbGwodC5lbCkuZm9yRWFjaCgocyA9PiB7XG4gICAgICAgICAgY29uc3QgYSA9IHAoe30sIHQsIHtlbDogc30pO1xuICAgICAgICAgIGUucHVzaChuZXcgaWUoYSkpXG4gICAgICAgIH0pKSwgZVxuICAgICAgfVxuICAgICAgY29uc3QgbCA9IHRoaXM7XG4gICAgICBsLl9fc3dpcGVyX18gPSAhMCwgbC5zdXBwb3J0ID0gSSgpLCBsLmRldmljZSA9IHooe3VzZXJBZ2VudDogdC51c2VyQWdlbnR9KSwgbC5icm93c2VyID0gQSgpLCBsLmV2ZW50c0xpc3RlbmVycyA9IHt9LCBsLmV2ZW50c0FueUxpc3RlbmVycyA9IFtdLCBsLm1vZHVsZXMgPSBbLi4ubC5fX21vZHVsZXNfX10sIHQubW9kdWxlcyAmJiBBcnJheS5pc0FycmF5KHQubW9kdWxlcykgJiYgbC5tb2R1bGVzLnB1c2goLi4udC5tb2R1bGVzKTtcbiAgICAgIGNvbnN0IG8gPSB7fTtcbiAgICAgIGwubW9kdWxlcy5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgZSh7XG4gICAgICAgICAgcGFyYW1zOiB0LFxuICAgICAgICAgIHN3aXBlcjogbCxcbiAgICAgICAgICBleHRlbmRQYXJhbXM6IHRlKHQsIG8pLFxuICAgICAgICAgIG9uOiBsLm9uLmJpbmQobCksXG4gICAgICAgICAgb25jZTogbC5vbmNlLmJpbmQobCksXG4gICAgICAgICAgb2ZmOiBsLm9mZi5iaW5kKGwpLFxuICAgICAgICAgIGVtaXQ6IGwuZW1pdC5iaW5kKGwpXG4gICAgICAgIH0pXG4gICAgICB9KSk7XG4gICAgICBjb25zdCBkID0gcCh7fSwgZWUsIG8pO1xuICAgICAgcmV0dXJuIGwucGFyYW1zID0gcCh7fSwgZCwgYWUsIHQpLCBsLm9yaWdpbmFsUGFyYW1zID0gcCh7fSwgbC5wYXJhbXMpLCBsLnBhc3NlZFBhcmFtcyA9IHAoe30sIHQpLCBsLnBhcmFtcyAmJiBsLnBhcmFtcy5vbiAmJiBPYmplY3Qua2V5cyhsLnBhcmFtcy5vbikuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgIGwub24oZSwgbC5wYXJhbXMub25bZV0pXG4gICAgICB9KSksIGwucGFyYW1zICYmIGwucGFyYW1zLm9uQW55ICYmIGwub25BbnkobC5wYXJhbXMub25BbnkpLCBPYmplY3QuYXNzaWduKGwsIHtcbiAgICAgICAgZW5hYmxlZDogbC5wYXJhbXMuZW5hYmxlZCxcbiAgICAgICAgZWw6IGUsXG4gICAgICAgIGNsYXNzTmFtZXM6IFtdLFxuICAgICAgICBzbGlkZXM6IFtdLFxuICAgICAgICBzbGlkZXNHcmlkOiBbXSxcbiAgICAgICAgc25hcEdyaWQ6IFtdLFxuICAgICAgICBzbGlkZXNTaXplc0dyaWQ6IFtdLFxuICAgICAgICBpc0hvcml6b250YWw6ICgpID0+IFwiaG9yaXpvbnRhbFwiID09PSBsLnBhcmFtcy5kaXJlY3Rpb24sXG4gICAgICAgIGlzVmVydGljYWw6ICgpID0+IFwidmVydGljYWxcIiA9PT0gbC5wYXJhbXMuZGlyZWN0aW9uLFxuICAgICAgICBhY3RpdmVJbmRleDogMCxcbiAgICAgICAgcmVhbEluZGV4OiAwLFxuICAgICAgICBpc0JlZ2lubmluZzogITAsXG4gICAgICAgIGlzRW5kOiAhMSxcbiAgICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgICBwcmV2aW91c1RyYW5zbGF0ZTogMCxcbiAgICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgICBhbmltYXRpbmc6ICExLFxuICAgICAgICBjc3NPdmVyZmxvd0FkanVzdG1lbnQoKSB7XG4gICAgICAgICAgcmV0dXJuIE1hdGgudHJ1bmModGhpcy50cmFuc2xhdGUgLyAyICoqIDIzKSAqIDIgKiogMjNcbiAgICAgICAgfSxcbiAgICAgICAgYWxsb3dTbGlkZU5leHQ6IGwucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgICAgICBhbGxvd1NsaWRlUHJldjogbC5wYXJhbXMuYWxsb3dTbGlkZVByZXYsXG4gICAgICAgIHRvdWNoRXZlbnRzRGF0YToge1xuICAgICAgICAgIGlzVG91Y2hlZDogdm9pZCAwLFxuICAgICAgICAgIGlzTW92ZWQ6IHZvaWQgMCxcbiAgICAgICAgICBhbGxvd1RvdWNoQ2FsbGJhY2tzOiB2b2lkIDAsXG4gICAgICAgICAgdG91Y2hTdGFydFRpbWU6IHZvaWQgMCxcbiAgICAgICAgICBpc1Njcm9sbGluZzogdm9pZCAwLFxuICAgICAgICAgIGN1cnJlbnRUcmFuc2xhdGU6IHZvaWQgMCxcbiAgICAgICAgICBzdGFydFRyYW5zbGF0ZTogdm9pZCAwLFxuICAgICAgICAgIGFsbG93VGhyZXNob2xkTW92ZTogdm9pZCAwLFxuICAgICAgICAgIGZvY3VzYWJsZUVsZW1lbnRzOiBsLnBhcmFtcy5mb2N1c2FibGVFbGVtZW50cyxcbiAgICAgICAgICBsYXN0Q2xpY2tUaW1lOiAwLFxuICAgICAgICAgIGNsaWNrVGltZW91dDogdm9pZCAwLFxuICAgICAgICAgIHZlbG9jaXRpZXM6IFtdLFxuICAgICAgICAgIGFsbG93TW9tZW50dW1Cb3VuY2U6IHZvaWQgMCxcbiAgICAgICAgICBzdGFydE1vdmluZzogdm9pZCAwLFxuICAgICAgICAgIHBvaW50ZXJJZDogbnVsbCxcbiAgICAgICAgICB0b3VjaElkOiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGFsbG93Q2xpY2s6ICEwLFxuICAgICAgICBhbGxvd1RvdWNoTW92ZTogbC5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgICAgIHRvdWNoZXM6IHtzdGFydFg6IDAsIHN0YXJ0WTogMCwgY3VycmVudFg6IDAsIGN1cnJlbnRZOiAwLCBkaWZmOiAwfSxcbiAgICAgICAgaW1hZ2VzVG9Mb2FkOiBbXSxcbiAgICAgICAgaW1hZ2VzTG9hZGVkOiAwXG4gICAgICB9KSwgbC5lbWl0KFwiX3N3aXBlclwiKSwgbC5wYXJhbXMuaW5pdCAmJiBsLmluaXQoKSwgbFxuICAgIH1cblxuICAgIGdldERpcmVjdGlvbkxhYmVsKGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzSG9yaXpvbnRhbCgpID8gZSA6IHtcbiAgICAgICAgd2lkdGg6IFwiaGVpZ2h0XCIsXG4gICAgICAgIFwibWFyZ2luLXRvcFwiOiBcIm1hcmdpbi1sZWZ0XCIsXG4gICAgICAgIFwibWFyZ2luLWJvdHRvbSBcIjogXCJtYXJnaW4tcmlnaHRcIixcbiAgICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcIm1hcmdpbi10b3BcIixcbiAgICAgICAgXCJtYXJnaW4tcmlnaHRcIjogXCJtYXJnaW4tYm90dG9tXCIsXG4gICAgICAgIFwicGFkZGluZy1sZWZ0XCI6IFwicGFkZGluZy10b3BcIixcbiAgICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwicGFkZGluZy1ib3R0b21cIixcbiAgICAgICAgbWFyZ2luUmlnaHQ6IFwibWFyZ2luQm90dG9tXCJcbiAgICAgIH1bZV1cbiAgICB9XG5cbiAgICBnZXRTbGlkZUluZGV4KGUpIHtcbiAgICAgIGNvbnN0IHtzbGlkZXNFbDogdCwgcGFyYW1zOiBzfSA9IHRoaXMsIGEgPSB5KGYodCwgYC4ke3Muc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApWzBdKTtcbiAgICAgIHJldHVybiB5KGUpIC0gYVxuICAgIH1cblxuICAgIGdldFNsaWRlSW5kZXhCeURhdGEoZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0U2xpZGVJbmRleCh0aGlzLnNsaWRlcy5maWx0ZXIoKHQgPT4gMSAqIHQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIikgPT09IGUpKVswXSlcbiAgICB9XG5cbiAgICByZWNhbGNTbGlkZXMoKSB7XG4gICAgICBjb25zdCB7c2xpZGVzRWw6IGUsIHBhcmFtczogdH0gPSB0aGlzO1xuICAgICAgdGhpcy5zbGlkZXMgPSBmKGUsIGAuJHt0LnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKVxuICAgIH1cblxuICAgIGVuYWJsZSgpIHtcbiAgICAgIGNvbnN0IGUgPSB0aGlzO1xuICAgICAgZS5lbmFibGVkIHx8IChlLmVuYWJsZWQgPSAhMCwgZS5wYXJhbXMuZ3JhYkN1cnNvciAmJiBlLnNldEdyYWJDdXJzb3IoKSwgZS5lbWl0KFwiZW5hYmxlXCIpKVxuICAgIH1cblxuICAgIGRpc2FibGUoKSB7XG4gICAgICBjb25zdCBlID0gdGhpcztcbiAgICAgIGUuZW5hYmxlZCAmJiAoZS5lbmFibGVkID0gITEsIGUucGFyYW1zLmdyYWJDdXJzb3IgJiYgZS51bnNldEdyYWJDdXJzb3IoKSwgZS5lbWl0KFwiZGlzYWJsZVwiKSlcbiAgICB9XG5cbiAgICBzZXRQcm9ncmVzcyhlLCB0KSB7XG4gICAgICBjb25zdCBzID0gdGhpcztcbiAgICAgIGUgPSBNYXRoLm1pbihNYXRoLm1heChlLCAwKSwgMSk7XG4gICAgICBjb25zdCBhID0gcy5taW5UcmFuc2xhdGUoKSwgaSA9IChzLm1heFRyYW5zbGF0ZSgpIC0gYSkgKiBlICsgYTtcbiAgICAgIHMudHJhbnNsYXRlVG8oaSwgdm9pZCAwID09PSB0ID8gMCA6IHQpLCBzLnVwZGF0ZUFjdGl2ZUluZGV4KCksIHMudXBkYXRlU2xpZGVzQ2xhc3NlcygpXG4gICAgfVxuXG4gICAgZW1pdENvbnRhaW5lckNsYXNzZXMoKSB7XG4gICAgICBjb25zdCBlID0gdGhpcztcbiAgICAgIGlmICghZS5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFlLmVsKSByZXR1cm47XG4gICAgICBjb25zdCB0ID0gZS5lbC5jbGFzc05hbWUuc3BsaXQoXCIgXCIpLmZpbHRlcigodCA9PiAwID09PSB0LmluZGV4T2YoXCJzd2lwZXJcIikgfHwgMCA9PT0gdC5pbmRleE9mKGUucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpKSk7XG4gICAgICBlLmVtaXQoXCJfY29udGFpbmVyQ2xhc3Nlc1wiLCB0LmpvaW4oXCIgXCIpKVxuICAgIH1cblxuICAgIGdldFNsaWRlQ2xhc3NlcyhlKSB7XG4gICAgICBjb25zdCB0ID0gdGhpcztcbiAgICAgIHJldHVybiB0LmRlc3Ryb3llZCA/IFwiXCIgOiBlLmNsYXNzTmFtZS5zcGxpdChcIiBcIikuZmlsdGVyKChlID0+IDAgPT09IGUuaW5kZXhPZihcInN3aXBlci1zbGlkZVwiKSB8fCAwID09PSBlLmluZGV4T2YodC5wYXJhbXMuc2xpZGVDbGFzcykpKS5qb2luKFwiIFwiKVxuICAgIH1cblxuICAgIGVtaXRTbGlkZXNDbGFzc2VzKCkge1xuICAgICAgY29uc3QgZSA9IHRoaXM7XG4gICAgICBpZiAoIWUucGFyYW1zLl9lbWl0Q2xhc3NlcyB8fCAhZS5lbCkgcmV0dXJuO1xuICAgICAgY29uc3QgdCA9IFtdO1xuICAgICAgZS5zbGlkZXMuZm9yRWFjaCgocyA9PiB7XG4gICAgICAgIGNvbnN0IGEgPSBlLmdldFNsaWRlQ2xhc3NlcyhzKTtcbiAgICAgICAgdC5wdXNoKHtzbGlkZUVsOiBzLCBjbGFzc05hbWVzOiBhfSksIGUuZW1pdChcIl9zbGlkZUNsYXNzXCIsIHMsIGEpXG4gICAgICB9KSksIGUuZW1pdChcIl9zbGlkZUNsYXNzZXNcIiwgdClcbiAgICB9XG5cbiAgICBzbGlkZXNQZXJWaWV3RHluYW1pYyhlLCB0KSB7XG4gICAgICB2b2lkIDAgPT09IGUgJiYgKGUgPSBcImN1cnJlbnRcIiksIHZvaWQgMCA9PT0gdCAmJiAodCA9ICExKTtcbiAgICAgIGNvbnN0IHtwYXJhbXM6IHMsIHNsaWRlczogYSwgc2xpZGVzR3JpZDogaSwgc2xpZGVzU2l6ZXNHcmlkOiByLCBzaXplOiBuLCBhY3RpdmVJbmRleDogbH0gPSB0aGlzO1xuICAgICAgbGV0IG8gPSAxO1xuICAgICAgaWYgKFwibnVtYmVyXCIgPT0gdHlwZW9mIHMuc2xpZGVzUGVyVmlldykgcmV0dXJuIHMuc2xpZGVzUGVyVmlldztcbiAgICAgIGlmIChzLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIGxldCBlLCB0ID0gYVtsXSA/IE1hdGguY2VpbChhW2xdLnN3aXBlclNsaWRlU2l6ZSkgOiAwO1xuICAgICAgICBmb3IgKGxldCBzID0gbCArIDE7IHMgPCBhLmxlbmd0aDsgcyArPSAxKSBhW3NdICYmICFlICYmICh0ICs9IE1hdGguY2VpbChhW3NdLnN3aXBlclNsaWRlU2l6ZSksIG8gKz0gMSwgdCA+IG4gJiYgKGUgPSAhMCkpO1xuICAgICAgICBmb3IgKGxldCBzID0gbCAtIDE7IHMgPj0gMDsgcyAtPSAxKSBhW3NdICYmICFlICYmICh0ICs9IGFbc10uc3dpcGVyU2xpZGVTaXplLCBvICs9IDEsIHQgPiBuICYmIChlID0gITApKVxuICAgICAgfSBlbHNlIGlmIChcImN1cnJlbnRcIiA9PT0gZSkgZm9yIChsZXQgZSA9IGwgKyAxOyBlIDwgYS5sZW5ndGg7IGUgKz0gMSkge1xuICAgICAgICAodCA/IGlbZV0gKyByW2VdIC0gaVtsXSA8IG4gOiBpW2VdIC0gaVtsXSA8IG4pICYmIChvICs9IDEpXG4gICAgICB9IGVsc2UgZm9yIChsZXQgZSA9IGwgLSAxOyBlID49IDA7IGUgLT0gMSkge1xuICAgICAgICBpW2xdIC0gaVtlXSA8IG4gJiYgKG8gKz0gMSlcbiAgICAgIH1cbiAgICAgIHJldHVybiBvXG4gICAgfVxuXG4gICAgdXBkYXRlKCkge1xuICAgICAgY29uc3QgZSA9IHRoaXM7XG4gICAgICBpZiAoIWUgfHwgZS5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgIGNvbnN0IHtzbmFwR3JpZDogdCwgcGFyYW1zOiBzfSA9IGU7XG5cbiAgICAgIGZ1bmN0aW9uIGEoKSB7XG4gICAgICAgIGNvbnN0IHQgPSBlLnJ0bFRyYW5zbGF0ZSA/IC0xICogZS50cmFuc2xhdGUgOiBlLnRyYW5zbGF0ZSxcbiAgICAgICAgICBzID0gTWF0aC5taW4oTWF0aC5tYXgodCwgZS5tYXhUcmFuc2xhdGUoKSksIGUubWluVHJhbnNsYXRlKCkpO1xuICAgICAgICBlLnNldFRyYW5zbGF0ZShzKSwgZS51cGRhdGVBY3RpdmVJbmRleCgpLCBlLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKVxuICAgICAgfVxuXG4gICAgICBsZXQgaTtcbiAgICAgIGlmIChzLmJyZWFrcG9pbnRzICYmIGUuc2V0QnJlYWtwb2ludCgpLCBbLi4uZS5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKV0uZm9yRWFjaCgodCA9PiB7XG4gICAgICAgIHQuY29tcGxldGUgJiYgRChlLCB0KVxuICAgICAgfSkpLCBlLnVwZGF0ZVNpemUoKSwgZS51cGRhdGVTbGlkZXMoKSwgZS51cGRhdGVQcm9ncmVzcygpLCBlLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKSwgcy5mcmVlTW9kZSAmJiBzLmZyZWVNb2RlLmVuYWJsZWQgJiYgIXMuY3NzTW9kZSkgYSgpLCBzLmF1dG9IZWlnaHQgJiYgZS51cGRhdGVBdXRvSGVpZ2h0KCk7IGVsc2Uge1xuICAgICAgICBpZiAoKFwiYXV0b1wiID09PSBzLnNsaWRlc1BlclZpZXcgfHwgcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgZS5pc0VuZCAmJiAhcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICAgIGNvbnN0IHQgPSBlLnZpcnR1YWwgJiYgcy52aXJ0dWFsLmVuYWJsZWQgPyBlLnZpcnR1YWwuc2xpZGVzIDogZS5zbGlkZXM7XG4gICAgICAgICAgaSA9IGUuc2xpZGVUbyh0Lmxlbmd0aCAtIDEsIDAsICExLCAhMClcbiAgICAgICAgfSBlbHNlIGkgPSBlLnNsaWRlVG8oZS5hY3RpdmVJbmRleCwgMCwgITEsICEwKTtcbiAgICAgICAgaSB8fCBhKClcbiAgICAgIH1cbiAgICAgIHMud2F0Y2hPdmVyZmxvdyAmJiB0ICE9PSBlLnNuYXBHcmlkICYmIGUuY2hlY2tPdmVyZmxvdygpLCBlLmVtaXQoXCJ1cGRhdGVcIilcbiAgICB9XG5cbiAgICBjaGFuZ2VEaXJlY3Rpb24oZSwgdCkge1xuICAgICAgdm9pZCAwID09PSB0ICYmICh0ID0gITApO1xuICAgICAgY29uc3QgcyA9IHRoaXMsIGEgPSBzLnBhcmFtcy5kaXJlY3Rpb247XG4gICAgICByZXR1cm4gZSB8fCAoZSA9IFwiaG9yaXpvbnRhbFwiID09PSBhID8gXCJ2ZXJ0aWNhbFwiIDogXCJob3Jpem9udGFsXCIpLCBlID09PSBhIHx8IFwiaG9yaXpvbnRhbFwiICE9PSBlICYmIFwidmVydGljYWxcIiAhPT0gZSB8fCAocy5lbC5jbGFzc0xpc3QucmVtb3ZlKGAke3MucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHthfWApLCBzLmVsLmNsYXNzTGlzdC5hZGQoYCR7cy5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke2V9YCksIHMuZW1pdENvbnRhaW5lckNsYXNzZXMoKSwgcy5wYXJhbXMuZGlyZWN0aW9uID0gZSwgcy5zbGlkZXMuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgIFwidmVydGljYWxcIiA9PT0gZSA/IHQuc3R5bGUud2lkdGggPSBcIlwiIDogdC5zdHlsZS5oZWlnaHQgPSBcIlwiXG4gICAgICB9KSksIHMuZW1pdChcImNoYW5nZURpcmVjdGlvblwiKSwgdCAmJiBzLnVwZGF0ZSgpKSwgc1xuICAgIH1cblxuICAgIGNoYW5nZUxhbmd1YWdlRGlyZWN0aW9uKGUpIHtcbiAgICAgIGNvbnN0IHQgPSB0aGlzO1xuICAgICAgdC5ydGwgJiYgXCJydGxcIiA9PT0gZSB8fCAhdC5ydGwgJiYgXCJsdHJcIiA9PT0gZSB8fCAodC5ydGwgPSBcInJ0bFwiID09PSBlLCB0LnJ0bFRyYW5zbGF0ZSA9IFwiaG9yaXpvbnRhbFwiID09PSB0LnBhcmFtcy5kaXJlY3Rpb24gJiYgdC5ydGwsIHQucnRsID8gKHQuZWwuY2xhc3NMaXN0LmFkZChgJHt0LnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfXJ0bGApLCB0LmVsLmRpciA9IFwicnRsXCIpIDogKHQuZWwuY2xhc3NMaXN0LnJlbW92ZShgJHt0LnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfXJ0bGApLCB0LmVsLmRpciA9IFwibHRyXCIpLCB0LnVwZGF0ZSgpKVxuICAgIH1cblxuICAgIG1vdW50KGUpIHtcbiAgICAgIGNvbnN0IHQgPSB0aGlzO1xuICAgICAgaWYgKHQubW91bnRlZCkgcmV0dXJuICEwO1xuICAgICAgbGV0IHMgPSBlIHx8IHQucGFyYW1zLmVsO1xuICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHMgJiYgKHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHMpKSwgIXMpIHJldHVybiAhMTtcbiAgICAgIHMuc3dpcGVyID0gdCwgcy5wYXJlbnROb2RlICYmIHMucGFyZW50Tm9kZS5ob3N0ICYmIHMucGFyZW50Tm9kZS5ob3N0Lm5vZGVOYW1lID09PSB0LnBhcmFtcy5zd2lwZXJFbGVtZW50Tm9kZU5hbWUudG9VcHBlckNhc2UoKSAmJiAodC5pc0VsZW1lbnQgPSAhMCk7XG4gICAgICBjb25zdCBhID0gKCkgPT4gYC4keyh0LnBhcmFtcy53cmFwcGVyQ2xhc3MgfHwgXCJcIikudHJpbSgpLnNwbGl0KFwiIFwiKS5qb2luKFwiLlwiKX1gO1xuICAgICAgbGV0IGkgPSAoKCkgPT4ge1xuICAgICAgICBpZiAocyAmJiBzLnNoYWRvd1Jvb3QgJiYgcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IpIHtcbiAgICAgICAgICByZXR1cm4gcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoYSgpKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmKHMsIGEoKSlbMF1cbiAgICAgIH0pKCk7XG4gICAgICByZXR1cm4gIWkgJiYgdC5wYXJhbXMuY3JlYXRlRWxlbWVudHMgJiYgKGkgPSB2KFwiZGl2XCIsIHQucGFyYW1zLndyYXBwZXJDbGFzcyksIHMuYXBwZW5kKGkpLCBmKHMsIGAuJHt0LnBhcmFtcy5zbGlkZUNsYXNzfWApLmZvckVhY2goKGUgPT4ge1xuICAgICAgICBpLmFwcGVuZChlKVxuICAgICAgfSkpKSwgT2JqZWN0LmFzc2lnbih0LCB7XG4gICAgICAgIGVsOiBzLFxuICAgICAgICB3cmFwcGVyRWw6IGksXG4gICAgICAgIHNsaWRlc0VsOiB0LmlzRWxlbWVudCAmJiAhcy5wYXJlbnROb2RlLmhvc3Quc2xpZGVTbG90cyA/IHMucGFyZW50Tm9kZS5ob3N0IDogaSxcbiAgICAgICAgaG9zdEVsOiB0LmlzRWxlbWVudCA/IHMucGFyZW50Tm9kZS5ob3N0IDogcyxcbiAgICAgICAgbW91bnRlZDogITAsXG4gICAgICAgIHJ0bDogXCJydGxcIiA9PT0gcy5kaXIudG9Mb3dlckNhc2UoKSB8fCBcInJ0bFwiID09PSBiKHMsIFwiZGlyZWN0aW9uXCIpLFxuICAgICAgICBydGxUcmFuc2xhdGU6IFwiaG9yaXpvbnRhbFwiID09PSB0LnBhcmFtcy5kaXJlY3Rpb24gJiYgKFwicnRsXCIgPT09IHMuZGlyLnRvTG93ZXJDYXNlKCkgfHwgXCJydGxcIiA9PT0gYihzLCBcImRpcmVjdGlvblwiKSksXG4gICAgICAgIHdyb25nUlRMOiBcIi13ZWJraXQtYm94XCIgPT09IGIoaSwgXCJkaXNwbGF5XCIpXG4gICAgICB9KSwgITBcbiAgICB9XG5cbiAgICBpbml0KGUpIHtcbiAgICAgIGNvbnN0IHQgPSB0aGlzO1xuICAgICAgaWYgKHQuaW5pdGlhbGl6ZWQpIHJldHVybiB0O1xuICAgICAgaWYgKCExID09PSB0Lm1vdW50KGUpKSByZXR1cm4gdDtcbiAgICAgIHQuZW1pdChcImJlZm9yZUluaXRcIiksIHQucGFyYW1zLmJyZWFrcG9pbnRzICYmIHQuc2V0QnJlYWtwb2ludCgpLCB0LmFkZENsYXNzZXMoKSwgdC51cGRhdGVTaXplKCksIHQudXBkYXRlU2xpZGVzKCksIHQucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgdC5jaGVja092ZXJmbG93KCksIHQucGFyYW1zLmdyYWJDdXJzb3IgJiYgdC5lbmFibGVkICYmIHQuc2V0R3JhYkN1cnNvcigpLCB0LnBhcmFtcy5sb29wICYmIHQudmlydHVhbCAmJiB0LnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyB0LnNsaWRlVG8odC5wYXJhbXMuaW5pdGlhbFNsaWRlICsgdC52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgdC5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCAhMSwgITApIDogdC5zbGlkZVRvKHQucGFyYW1zLmluaXRpYWxTbGlkZSwgMCwgdC5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCAhMSwgITApLCB0LnBhcmFtcy5sb29wICYmIHQubG9vcENyZWF0ZSgpLCB0LmF0dGFjaEV2ZW50cygpO1xuICAgICAgY29uc3QgcyA9IFsuLi50LmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsb2FkaW5nPVwibGF6eVwiXScpXTtcbiAgICAgIHJldHVybiB0LmlzRWxlbWVudCAmJiBzLnB1c2goLi4udC5ob3N0RWwucXVlcnlTZWxlY3RvckFsbCgnW2xvYWRpbmc9XCJsYXp5XCJdJykpLCBzLmZvckVhY2goKGUgPT4ge1xuICAgICAgICBlLmNvbXBsZXRlID8gRCh0LCBlKSA6IGUuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKGUgPT4ge1xuICAgICAgICAgIEQodCwgZS50YXJnZXQpXG4gICAgICAgIH0pKVxuICAgICAgfSkpLCBIKHQpLCB0LmluaXRpYWxpemVkID0gITAsIEgodCksIHQuZW1pdChcImluaXRcIiksIHQuZW1pdChcImFmdGVySW5pdFwiKSwgdFxuICAgIH1cblxuICAgIGRlc3Ryb3koZSwgdCkge1xuICAgICAgdm9pZCAwID09PSBlICYmIChlID0gITApLCB2b2lkIDAgPT09IHQgJiYgKHQgPSAhMCk7XG4gICAgICBjb25zdCBzID0gdGhpcywge3BhcmFtczogYSwgZWw6IGksIHdyYXBwZXJFbDogciwgc2xpZGVzOiBufSA9IHM7XG4gICAgICByZXR1cm4gdm9pZCAwID09PSBzLnBhcmFtcyB8fCBzLmRlc3Ryb3llZCB8fCAocy5lbWl0KFwiYmVmb3JlRGVzdHJveVwiKSwgcy5pbml0aWFsaXplZCA9ICExLCBzLmRldGFjaEV2ZW50cygpLCBhLmxvb3AgJiYgcy5sb29wRGVzdHJveSgpLCB0ICYmIChzLnJlbW92ZUNsYXNzZXMoKSwgaSAmJiBcInN0cmluZ1wiICE9IHR5cGVvZiBpICYmIGkucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIiksIHIgJiYgci5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKSwgbiAmJiBuLmxlbmd0aCAmJiBuLmZvckVhY2goKGUgPT4ge1xuICAgICAgICBlLmNsYXNzTGlzdC5yZW1vdmUoYS5zbGlkZVZpc2libGVDbGFzcywgYS5zbGlkZUZ1bGx5VmlzaWJsZUNsYXNzLCBhLnNsaWRlQWN0aXZlQ2xhc3MsIGEuc2xpZGVOZXh0Q2xhc3MsIGEuc2xpZGVQcmV2Q2xhc3MpLCBlLnJlbW92ZUF0dHJpYnV0ZShcInN0eWxlXCIpLCBlLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIpXG4gICAgICB9KSkpLCBzLmVtaXQoXCJkZXN0cm95XCIpLCBPYmplY3Qua2V5cyhzLmV2ZW50c0xpc3RlbmVycykuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgIHMub2ZmKGUpXG4gICAgICB9KSksICExICE9PSBlICYmIChzLmVsICYmIFwic3RyaW5nXCIgIT0gdHlwZW9mIHMuZWwgJiYgKHMuZWwuc3dpcGVyID0gbnVsbCksIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBlO1xuICAgICAgICBPYmplY3Qua2V5cyh0KS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdFtlXSA9IG51bGxcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkZWxldGUgdFtlXVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKVxuICAgICAgfShzKSksIHMuZGVzdHJveWVkID0gITApLCBudWxsXG4gICAgfVxuXG4gICAgc3RhdGljIGV4dGVuZERlZmF1bHRzKGUpIHtcbiAgICAgIHAoYWUsIGUpXG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBleHRlbmRlZERlZmF1bHRzKCkge1xuICAgICAgcmV0dXJuIGFlXG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBkZWZhdWx0cygpIHtcbiAgICAgIHJldHVybiBlZVxuICAgIH1cblxuICAgIHN0YXRpYyBpbnN0YWxsTW9kdWxlKGUpIHtcbiAgICAgIGllLnByb3RvdHlwZS5fX21vZHVsZXNfXyB8fCAoaWUucHJvdG90eXBlLl9fbW9kdWxlc19fID0gW10pO1xuICAgICAgY29uc3QgdCA9IGllLnByb3RvdHlwZS5fX21vZHVsZXNfXztcbiAgICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSAmJiB0LmluZGV4T2YoZSkgPCAwICYmIHQucHVzaChlKVxuICAgIH1cblxuICAgIHN0YXRpYyB1c2UoZSkge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZSkgPyAoZS5mb3JFYWNoKChlID0+IGllLmluc3RhbGxNb2R1bGUoZSkpKSwgaWUpIDogKGllLmluc3RhbGxNb2R1bGUoZSksIGllKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlKGUsIHQsIHMsIGEpIHtcbiAgICByZXR1cm4gZS5wYXJhbXMuY3JlYXRlRWxlbWVudHMgJiYgT2JqZWN0LmtleXMoYSkuZm9yRWFjaCgoaSA9PiB7XG4gICAgICBpZiAoIXNbaV0gJiYgITAgPT09IHMuYXV0bykge1xuICAgICAgICBsZXQgciA9IGYoZS5lbCwgYC4ke2FbaV19YClbMF07XG4gICAgICAgIHIgfHwgKHIgPSB2KFwiZGl2XCIsIGFbaV0pLCByLmNsYXNzTmFtZSA9IGFbaV0sIGUuZWwuYXBwZW5kKHIpKSwgc1tpXSA9IHIsIHRbaV0gPSByXG4gICAgICB9XG4gICAgfSkpLCBzXG4gIH1cblxuICBmdW5jdGlvbiBuZShlKSB7XG4gICAgcmV0dXJuIHZvaWQgMCA9PT0gZSAmJiAoZSA9IFwiXCIpLCBgLiR7ZS50cmltKCkucmVwbGFjZSgvKFtcXC46IStcXC9dKS9nLCBcIlxcXFwkMVwiKS5yZXBsYWNlKC8gL2csIFwiLlwiKX1gXG4gIH1cblxuICBmdW5jdGlvbiBsZShlKSB7XG4gICAgY29uc3QgdCA9IHRoaXMsIHtwYXJhbXM6IHMsIHNsaWRlc0VsOiBhfSA9IHQ7XG4gICAgcy5sb29wICYmIHQubG9vcERlc3Ryb3koKTtcbiAgICBjb25zdCBpID0gZSA9PiB7XG4gICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSkge1xuICAgICAgICBjb25zdCB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdC5pbm5lckhUTUwgPSBlLCBhLmFwcGVuZCh0LmNoaWxkcmVuWzBdKSwgdC5pbm5lckhUTUwgPSBcIlwiXG4gICAgICB9IGVsc2UgYS5hcHBlbmQoZSlcbiAgICB9O1xuICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBlICYmIFwibGVuZ3RoXCIgaW4gZSkgZm9yIChsZXQgdCA9IDA7IHQgPCBlLmxlbmd0aDsgdCArPSAxKSBlW3RdICYmIGkoZVt0XSk7IGVsc2UgaShlKTtcbiAgICB0LnJlY2FsY1NsaWRlcygpLCBzLmxvb3AgJiYgdC5sb29wQ3JlYXRlKCksIHMub2JzZXJ2ZXIgJiYgIXQuaXNFbGVtZW50IHx8IHQudXBkYXRlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIG9lKGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcywge3BhcmFtczogcywgYWN0aXZlSW5kZXg6IGEsIHNsaWRlc0VsOiBpfSA9IHQ7XG4gICAgcy5sb29wICYmIHQubG9vcERlc3Ryb3koKTtcbiAgICBsZXQgciA9IGEgKyAxO1xuICAgIGNvbnN0IG4gPSBlID0+IHtcbiAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0LmlubmVySFRNTCA9IGUsIGkucHJlcGVuZCh0LmNoaWxkcmVuWzBdKSwgdC5pbm5lckhUTUwgPSBcIlwiXG4gICAgICB9IGVsc2UgaS5wcmVwZW5kKGUpXG4gICAgfTtcbiAgICBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgZSAmJiBcImxlbmd0aFwiIGluIGUpIHtcbiAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgZS5sZW5ndGg7IHQgKz0gMSkgZVt0XSAmJiBuKGVbdF0pO1xuICAgICAgciA9IGEgKyBlLmxlbmd0aFxuICAgIH0gZWxzZSBuKGUpO1xuICAgIHQucmVjYWxjU2xpZGVzKCksIHMubG9vcCAmJiB0Lmxvb3BDcmVhdGUoKSwgcy5vYnNlcnZlciAmJiAhdC5pc0VsZW1lbnQgfHwgdC51cGRhdGUoKSwgdC5zbGlkZVRvKHIsIDAsICExKVxuICB9XG5cbiAgZnVuY3Rpb24gZGUoZSwgdCkge1xuICAgIGNvbnN0IHMgPSB0aGlzLCB7cGFyYW1zOiBhLCBhY3RpdmVJbmRleDogaSwgc2xpZGVzRWw6IHJ9ID0gcztcbiAgICBsZXQgbiA9IGk7XG4gICAgYS5sb29wICYmIChuIC09IHMubG9vcGVkU2xpZGVzLCBzLmxvb3BEZXN0cm95KCksIHMucmVjYWxjU2xpZGVzKCkpO1xuICAgIGNvbnN0IGwgPSBzLnNsaWRlcy5sZW5ndGg7XG4gICAgaWYgKGUgPD0gMCkgcmV0dXJuIHZvaWQgcy5wcmVwZW5kU2xpZGUodCk7XG4gICAgaWYgKGUgPj0gbCkgcmV0dXJuIHZvaWQgcy5hcHBlbmRTbGlkZSh0KTtcbiAgICBsZXQgbyA9IG4gPiBlID8gbiArIDEgOiBuO1xuICAgIGNvbnN0IGQgPSBbXTtcbiAgICBmb3IgKGxldCB0ID0gbCAtIDE7IHQgPj0gZTsgdCAtPSAxKSB7XG4gICAgICBjb25zdCBlID0gcy5zbGlkZXNbdF07XG4gICAgICBlLnJlbW92ZSgpLCBkLnVuc2hpZnQoZSlcbiAgICB9XG4gICAgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIHQgJiYgXCJsZW5ndGhcIiBpbiB0KSB7XG4gICAgICBmb3IgKGxldCBlID0gMDsgZSA8IHQubGVuZ3RoOyBlICs9IDEpIHRbZV0gJiYgci5hcHBlbmQodFtlXSk7XG4gICAgICBvID0gbiA+IGUgPyBuICsgdC5sZW5ndGggOiBuXG4gICAgfSBlbHNlIHIuYXBwZW5kKHQpO1xuICAgIGZvciAobGV0IGUgPSAwOyBlIDwgZC5sZW5ndGg7IGUgKz0gMSkgci5hcHBlbmQoZFtlXSk7XG4gICAgcy5yZWNhbGNTbGlkZXMoKSwgYS5sb29wICYmIHMubG9vcENyZWF0ZSgpLCBhLm9ic2VydmVyICYmICFzLmlzRWxlbWVudCB8fCBzLnVwZGF0ZSgpLCBhLmxvb3AgPyBzLnNsaWRlVG8obyArIHMubG9vcGVkU2xpZGVzLCAwLCAhMSkgOiBzLnNsaWRlVG8obywgMCwgITEpXG4gIH1cblxuICBmdW5jdGlvbiBjZShlKSB7XG4gICAgY29uc3QgdCA9IHRoaXMsIHtwYXJhbXM6IHMsIGFjdGl2ZUluZGV4OiBhfSA9IHQ7XG4gICAgbGV0IGkgPSBhO1xuICAgIHMubG9vcCAmJiAoaSAtPSB0Lmxvb3BlZFNsaWRlcywgdC5sb29wRGVzdHJveSgpKTtcbiAgICBsZXQgciwgbiA9IGk7XG4gICAgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgJiYgXCJsZW5ndGhcIiBpbiBlKSB7XG4gICAgICBmb3IgKGxldCBzID0gMDsgcyA8IGUubGVuZ3RoOyBzICs9IDEpIHIgPSBlW3NdLCB0LnNsaWRlc1tyXSAmJiB0LnNsaWRlc1tyXS5yZW1vdmUoKSwgciA8IG4gJiYgKG4gLT0gMSk7XG4gICAgICBuID0gTWF0aC5tYXgobiwgMClcbiAgICB9IGVsc2UgciA9IGUsIHQuc2xpZGVzW3JdICYmIHQuc2xpZGVzW3JdLnJlbW92ZSgpLCByIDwgbiAmJiAobiAtPSAxKSwgbiA9IE1hdGgubWF4KG4sIDApO1xuICAgIHQucmVjYWxjU2xpZGVzKCksIHMubG9vcCAmJiB0Lmxvb3BDcmVhdGUoKSwgcy5vYnNlcnZlciAmJiAhdC5pc0VsZW1lbnQgfHwgdC51cGRhdGUoKSwgcy5sb29wID8gdC5zbGlkZVRvKG4gKyB0Lmxvb3BlZFNsaWRlcywgMCwgITEpIDogdC5zbGlkZVRvKG4sIDAsICExKVxuICB9XG5cbiAgZnVuY3Rpb24gcGUoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMsIHQgPSBbXTtcbiAgICBmb3IgKGxldCBzID0gMDsgcyA8IGUuc2xpZGVzLmxlbmd0aDsgcyArPSAxKSB0LnB1c2gocyk7XG4gICAgZS5yZW1vdmVTbGlkZSh0KVxuICB9XG5cbiAgZnVuY3Rpb24gdWUoZSkge1xuICAgIGNvbnN0IHtcbiAgICAgIGVmZmVjdDogdCxcbiAgICAgIHN3aXBlcjogcyxcbiAgICAgIG9uOiBhLFxuICAgICAgc2V0VHJhbnNsYXRlOiBpLFxuICAgICAgc2V0VHJhbnNpdGlvbjogcixcbiAgICAgIG92ZXJ3cml0ZVBhcmFtczogbixcbiAgICAgIHBlcnNwZWN0aXZlOiBsLFxuICAgICAgcmVjcmVhdGVTaGFkb3dzOiBvLFxuICAgICAgZ2V0RWZmZWN0UGFyYW1zOiBkXG4gICAgfSA9IGU7XG4gICAgbGV0IGM7XG4gICAgYShcImJlZm9yZUluaXRcIiwgKCgpID0+IHtcbiAgICAgIGlmIChzLnBhcmFtcy5lZmZlY3QgIT09IHQpIHJldHVybjtcbiAgICAgIHMuY2xhc3NOYW1lcy5wdXNoKGAke3MucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHt0fWApLCBsICYmIGwoKSAmJiBzLmNsYXNzTmFtZXMucHVzaChgJHtzLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfTNkYCk7XG4gICAgICBjb25zdCBlID0gbiA/IG4oKSA6IHt9O1xuICAgICAgT2JqZWN0LmFzc2lnbihzLnBhcmFtcywgZSksIE9iamVjdC5hc3NpZ24ocy5vcmlnaW5hbFBhcmFtcywgZSlcbiAgICB9KSksIGEoXCJzZXRUcmFuc2xhdGVcIiwgKCgpID0+IHtcbiAgICAgIHMucGFyYW1zLmVmZmVjdCA9PT0gdCAmJiBpKClcbiAgICB9KSksIGEoXCJzZXRUcmFuc2l0aW9uXCIsICgoZSwgYSkgPT4ge1xuICAgICAgcy5wYXJhbXMuZWZmZWN0ID09PSB0ICYmIHIoYSlcbiAgICB9KSksIGEoXCJ0cmFuc2l0aW9uRW5kXCIsICgoKSA9PiB7XG4gICAgICBpZiAocy5wYXJhbXMuZWZmZWN0ID09PSB0ICYmIG8pIHtcbiAgICAgICAgaWYgKCFkIHx8ICFkKCkuc2xpZGVTaGFkb3dzKSByZXR1cm47XG4gICAgICAgIHMuc2xpZGVzLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgIGUucXVlcnlTZWxlY3RvckFsbChcIi5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdFwiKS5mb3JFYWNoKChlID0+IGUucmVtb3ZlKCkpKVxuICAgICAgICB9KSksIG8oKVxuICAgICAgfVxuICAgIH0pKSwgYShcInZpcnR1YWxVcGRhdGVcIiwgKCgpID0+IHtcbiAgICAgIHMucGFyYW1zLmVmZmVjdCA9PT0gdCAmJiAocy5zbGlkZXMubGVuZ3RoIHx8IChjID0gITApLCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCgpID0+IHtcbiAgICAgICAgYyAmJiBzLnNsaWRlcyAmJiBzLnNsaWRlcy5sZW5ndGggJiYgKGkoKSwgYyA9ICExKVxuICAgICAgfSkpKVxuICAgIH0pKVxuICB9XG5cbiAgZnVuY3Rpb24gbWUoZSwgdCkge1xuICAgIGNvbnN0IHMgPSBoKHQpO1xuICAgIHJldHVybiBzICE9PSB0ICYmIChzLnN0eWxlLmJhY2tmYWNlVmlzaWJpbGl0eSA9IFwiaGlkZGVuXCIsIHMuc3R5bGVbXCItd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHlcIl0gPSBcImhpZGRlblwiKSwgc1xuICB9XG5cbiAgZnVuY3Rpb24gaGUoZSkge1xuICAgIGxldCB7c3dpcGVyOiB0LCBkdXJhdGlvbjogcywgdHJhbnNmb3JtRWxlbWVudHM6IGEsIGFsbFNsaWRlczogaX0gPSBlO1xuICAgIGNvbnN0IHthY3RpdmVJbmRleDogcn0gPSB0O1xuICAgIGlmICh0LnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlICYmIDAgIT09IHMpIHtcbiAgICAgIGxldCBlLCBzID0gITE7XG4gICAgICBlID0gaSA/IGEgOiBhLmZpbHRlcigoZSA9PiB7XG4gICAgICAgIGNvbnN0IHMgPSBlLmNsYXNzTGlzdC5jb250YWlucyhcInN3aXBlci1zbGlkZS10cmFuc2Zvcm1cIikgPyAoZSA9PiB7XG4gICAgICAgICAgaWYgKCFlLnBhcmVudEVsZW1lbnQpIHJldHVybiB0LnNsaWRlcy5maWx0ZXIoKHQgPT4gdC5zaGFkb3dSb290ICYmIHQuc2hhZG93Um9vdCA9PT0gZS5wYXJlbnROb2RlKSlbMF07XG4gICAgICAgICAgcmV0dXJuIGUucGFyZW50RWxlbWVudFxuICAgICAgICB9KShlKSA6IGU7XG4gICAgICAgIHJldHVybiB0LmdldFNsaWRlSW5kZXgocykgPT09IHJcbiAgICAgIH0pKSwgZS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgeChlLCAoKCkgPT4ge1xuICAgICAgICAgIGlmIChzKSByZXR1cm47XG4gICAgICAgICAgaWYgKCF0IHx8IHQuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgcyA9ICEwLCB0LmFuaW1hdGluZyA9ICExO1xuICAgICAgICAgIGNvbnN0IGUgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KFwidHJhbnNpdGlvbmVuZFwiLCB7YnViYmxlczogITAsIGNhbmNlbGFibGU6ICEwfSk7XG4gICAgICAgICAgdC53cmFwcGVyRWwuZGlzcGF0Y2hFdmVudChlKVxuICAgICAgICB9KSlcbiAgICAgIH0pKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZlKGUsIHQsIHMpIHtcbiAgICBjb25zdCBhID0gYHN3aXBlci1zbGlkZS1zaGFkb3cke3MgPyBgLSR7c31gIDogXCJcIn0ke2UgPyBgIHN3aXBlci1zbGlkZS1zaGFkb3ctJHtlfWAgOiBcIlwifWAsIGkgPSBoKHQpO1xuICAgIGxldCByID0gaS5xdWVyeVNlbGVjdG9yKGAuJHthLnNwbGl0KFwiIFwiKS5qb2luKFwiLlwiKX1gKTtcbiAgICByZXR1cm4gciB8fCAociA9IHYoXCJkaXZcIiwgYS5zcGxpdChcIiBcIikpLCBpLmFwcGVuZChyKSksIHJcbiAgfVxuXG4gIE9iamVjdC5rZXlzKHNlKS5mb3JFYWNoKChlID0+IHtcbiAgICBPYmplY3Qua2V5cyhzZVtlXSkuZm9yRWFjaCgodCA9PiB7XG4gICAgICBpZS5wcm90b3R5cGVbdF0gPSBzZVtlXVt0XVxuICAgIH0pKVxuICB9KSksIGllLnVzZShbZnVuY3Rpb24gKGUpIHtcbiAgICBsZXQge3N3aXBlcjogdCwgb246IHMsIGVtaXQ6IGF9ID0gZTtcbiAgICBjb25zdCBpID0gcigpO1xuICAgIGxldCBuID0gbnVsbCwgbCA9IG51bGw7XG4gICAgY29uc3QgbyA9ICgpID0+IHtcbiAgICAgIHQgJiYgIXQuZGVzdHJveWVkICYmIHQuaW5pdGlhbGl6ZWQgJiYgKGEoXCJiZWZvcmVSZXNpemVcIiksIGEoXCJyZXNpemVcIikpXG4gICAgfSwgZCA9ICgpID0+IHtcbiAgICAgIHQgJiYgIXQuZGVzdHJveWVkICYmIHQuaW5pdGlhbGl6ZWQgJiYgYShcIm9yaWVudGF0aW9uY2hhbmdlXCIpXG4gICAgfTtcbiAgICBzKFwiaW5pdFwiLCAoKCkgPT4ge1xuICAgICAgdC5wYXJhbXMucmVzaXplT2JzZXJ2ZXIgJiYgdm9pZCAwICE9PSBpLlJlc2l6ZU9ic2VydmVyID8gdCAmJiAhdC5kZXN0cm95ZWQgJiYgdC5pbml0aWFsaXplZCAmJiAobiA9IG5ldyBSZXNpemVPYnNlcnZlcigoZSA9PiB7XG4gICAgICAgIGwgPSBpLnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHt3aWR0aDogcywgaGVpZ2h0OiBhfSA9IHQ7XG4gICAgICAgICAgbGV0IGkgPSBzLCByID0gYTtcbiAgICAgICAgICBlLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgICAgbGV0IHtjb250ZW50Qm94U2l6ZTogcywgY29udGVudFJlY3Q6IGEsIHRhcmdldDogbn0gPSBlO1xuICAgICAgICAgICAgbiAmJiBuICE9PSB0LmVsIHx8IChpID0gYSA/IGEud2lkdGggOiAoc1swXSB8fCBzKS5pbmxpbmVTaXplLCByID0gYSA/IGEuaGVpZ2h0IDogKHNbMF0gfHwgcykuYmxvY2tTaXplKVxuICAgICAgICAgIH0pKSwgaSA9PT0gcyAmJiByID09PSBhIHx8IG8oKVxuICAgICAgICB9KSlcbiAgICAgIH0pKSwgbi5vYnNlcnZlKHQuZWwpKSA6IChpLmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgbyksIGkuYWRkRXZlbnRMaXN0ZW5lcihcIm9yaWVudGF0aW9uY2hhbmdlXCIsIGQpKVxuICAgIH0pKSwgcyhcImRlc3Ryb3lcIiwgKCgpID0+IHtcbiAgICAgIGwgJiYgaS5jYW5jZWxBbmltYXRpb25GcmFtZShsKSwgbiAmJiBuLnVub2JzZXJ2ZSAmJiB0LmVsICYmIChuLnVub2JzZXJ2ZSh0LmVsKSwgbiA9IG51bGwpLCBpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgbyksIGkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9yaWVudGF0aW9uY2hhbmdlXCIsIGQpXG4gICAgfSkpXG4gIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgbGV0IHtzd2lwZXI6IHQsIGV4dGVuZFBhcmFtczogcywgb246IGEsIGVtaXQ6IGl9ID0gZTtcbiAgICBjb25zdCBuID0gW10sIGwgPSByKCksIG8gPSBmdW5jdGlvbiAoZSwgcykge1xuICAgICAgdm9pZCAwID09PSBzICYmIChzID0ge30pO1xuICAgICAgY29uc3QgYSA9IG5ldyAobC5NdXRhdGlvbk9ic2VydmVyIHx8IGwuV2Via2l0TXV0YXRpb25PYnNlcnZlcikoKGUgPT4ge1xuICAgICAgICBpZiAodC5fX3ByZXZlbnRPYnNlcnZlcl9fKSByZXR1cm47XG4gICAgICAgIGlmICgxID09PSBlLmxlbmd0aCkgcmV0dXJuIHZvaWQgaShcIm9ic2VydmVyVXBkYXRlXCIsIGVbMF0pO1xuICAgICAgICBjb25zdCBzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGkoXCJvYnNlcnZlclVwZGF0ZVwiLCBlWzBdKVxuICAgICAgICB9O1xuICAgICAgICBsLnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IGwucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHMpIDogbC5zZXRUaW1lb3V0KHMsIDApXG4gICAgICB9KSk7XG4gICAgICBhLm9ic2VydmUoZSwge1xuICAgICAgICBhdHRyaWJ1dGVzOiB2b2lkIDAgPT09IHMuYXR0cmlidXRlcyB8fCBzLmF0dHJpYnV0ZXMsXG4gICAgICAgIGNoaWxkTGlzdDogdC5pc0VsZW1lbnQgfHwgKHZvaWQgMCA9PT0gcy5jaGlsZExpc3QgfHwgcykuY2hpbGRMaXN0LFxuICAgICAgICBjaGFyYWN0ZXJEYXRhOiB2b2lkIDAgPT09IHMuY2hhcmFjdGVyRGF0YSB8fCBzLmNoYXJhY3RlckRhdGFcbiAgICAgIH0pLCBuLnB1c2goYSlcbiAgICB9O1xuICAgIHMoe29ic2VydmVyOiAhMSwgb2JzZXJ2ZVBhcmVudHM6ICExLCBvYnNlcnZlU2xpZGVDaGlsZHJlbjogITF9KSwgYShcImluaXRcIiwgKCgpID0+IHtcbiAgICAgIGlmICh0LnBhcmFtcy5vYnNlcnZlcikge1xuICAgICAgICBpZiAodC5wYXJhbXMub2JzZXJ2ZVBhcmVudHMpIHtcbiAgICAgICAgICBjb25zdCBlID0gRSh0Lmhvc3RFbCk7XG4gICAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCBlLmxlbmd0aDsgdCArPSAxKSBvKGVbdF0pXG4gICAgICAgIH1cbiAgICAgICAgbyh0Lmhvc3RFbCwge2NoaWxkTGlzdDogdC5wYXJhbXMub2JzZXJ2ZVNsaWRlQ2hpbGRyZW59KSwgbyh0LndyYXBwZXJFbCwge2F0dHJpYnV0ZXM6ICExfSlcbiAgICAgIH1cbiAgICB9KSksIGEoXCJkZXN0cm95XCIsICgoKSA9PiB7XG4gICAgICBuLmZvckVhY2goKGUgPT4ge1xuICAgICAgICBlLmRpc2Nvbm5lY3QoKVxuICAgICAgfSkpLCBuLnNwbGljZSgwLCBuLmxlbmd0aClcbiAgICB9KSlcbiAgfV0pO1xuICBjb25zdCBnZSA9IFtmdW5jdGlvbiAoZSkge1xuICAgIGxldCB0LCB7c3dpcGVyOiBzLCBleHRlbmRQYXJhbXM6IGksIG9uOiByLCBlbWl0OiBufSA9IGU7XG4gICAgaSh7XG4gICAgICB2aXJ0dWFsOiB7XG4gICAgICAgIGVuYWJsZWQ6ICExLFxuICAgICAgICBzbGlkZXM6IFtdLFxuICAgICAgICBjYWNoZTogITAsXG4gICAgICAgIHJlbmRlclNsaWRlOiBudWxsLFxuICAgICAgICByZW5kZXJFeHRlcm5hbDogbnVsbCxcbiAgICAgICAgcmVuZGVyRXh0ZXJuYWxVcGRhdGU6ICEwLFxuICAgICAgICBhZGRTbGlkZXNCZWZvcmU6IDAsXG4gICAgICAgIGFkZFNsaWRlc0FmdGVyOiAwXG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgbCA9IGEoKTtcbiAgICBzLnZpcnR1YWwgPSB7Y2FjaGU6IHt9LCBmcm9tOiB2b2lkIDAsIHRvOiB2b2lkIDAsIHNsaWRlczogW10sIG9mZnNldDogMCwgc2xpZGVzR3JpZDogW119O1xuICAgIGNvbnN0IG8gPSBsLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgICBmdW5jdGlvbiBkKGUsIHQpIHtcbiAgICAgIGNvbnN0IGEgPSBzLnBhcmFtcy52aXJ0dWFsO1xuICAgICAgaWYgKGEuY2FjaGUgJiYgcy52aXJ0dWFsLmNhY2hlW3RdKSByZXR1cm4gcy52aXJ0dWFsLmNhY2hlW3RdO1xuICAgICAgbGV0IGk7XG4gICAgICByZXR1cm4gYS5yZW5kZXJTbGlkZSA/IChpID0gYS5yZW5kZXJTbGlkZS5jYWxsKHMsIGUsIHQpLCBcInN0cmluZ1wiID09IHR5cGVvZiBpICYmIChvLmlubmVySFRNTCA9IGksIGkgPSBvLmNoaWxkcmVuWzBdKSkgOiBpID0gcy5pc0VsZW1lbnQgPyB2KFwic3dpcGVyLXNsaWRlXCIpIDogdihcImRpdlwiLCBzLnBhcmFtcy5zbGlkZUNsYXNzKSwgaS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiLCB0KSwgYS5yZW5kZXJTbGlkZSB8fCAoaS5pbm5lckhUTUwgPSBlKSwgYS5jYWNoZSAmJiAocy52aXJ0dWFsLmNhY2hlW3RdID0gaSksIGlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjKGUsIHQpIHtcbiAgICAgIGNvbnN0IHtzbGlkZXNQZXJWaWV3OiBhLCBzbGlkZXNQZXJHcm91cDogaSwgY2VudGVyZWRTbGlkZXM6IHIsIGxvb3A6IGwsIGluaXRpYWxTbGlkZTogb30gPSBzLnBhcmFtcztcbiAgICAgIGlmICh0ICYmICFsICYmIG8gPiAwKSByZXR1cm47XG4gICAgICBjb25zdCB7YWRkU2xpZGVzQmVmb3JlOiBjLCBhZGRTbGlkZXNBZnRlcjogcH0gPSBzLnBhcmFtcy52aXJ0dWFsLCB7XG4gICAgICAgIGZyb206IHUsXG4gICAgICAgIHRvOiBtLFxuICAgICAgICBzbGlkZXM6IGgsXG4gICAgICAgIHNsaWRlc0dyaWQ6IGcsXG4gICAgICAgIG9mZnNldDogdlxuICAgICAgfSA9IHMudmlydHVhbDtcbiAgICAgIHMucGFyYW1zLmNzc01vZGUgfHwgcy51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgY29uc3QgdyA9IHMuYWN0aXZlSW5kZXggfHwgMDtcbiAgICAgIGxldCBiLCB5LCBFO1xuICAgICAgYiA9IHMucnRsVHJhbnNsYXRlID8gXCJyaWdodFwiIDogcy5pc0hvcml6b250YWwoKSA/IFwibGVmdFwiIDogXCJ0b3BcIiwgciA/ICh5ID0gTWF0aC5mbG9vcihhIC8gMikgKyBpICsgcCwgRSA9IE1hdGguZmxvb3IoYSAvIDIpICsgaSArIGMpIDogKHkgPSBhICsgKGkgLSAxKSArIHAsIEUgPSAobCA/IGEgOiBpKSArIGMpO1xuICAgICAgbGV0IHggPSB3IC0gRSwgUyA9IHcgKyB5O1xuICAgICAgbCB8fCAoeCA9IE1hdGgubWF4KHgsIDApLCBTID0gTWF0aC5taW4oUywgaC5sZW5ndGggLSAxKSk7XG4gICAgICBsZXQgVCA9IChzLnNsaWRlc0dyaWRbeF0gfHwgMCkgLSAocy5zbGlkZXNHcmlkWzBdIHx8IDApO1xuXG4gICAgICBmdW5jdGlvbiBNKCkge1xuICAgICAgICBzLnVwZGF0ZVNsaWRlcygpLCBzLnVwZGF0ZVByb2dyZXNzKCksIHMudXBkYXRlU2xpZGVzQ2xhc3NlcygpLCBuKFwidmlydHVhbFVwZGF0ZVwiKVxuICAgICAgfVxuXG4gICAgICBpZiAobCAmJiB3ID49IEUgPyAoeCAtPSBFLCByIHx8IChUICs9IHMuc2xpZGVzR3JpZFswXSkpIDogbCAmJiB3IDwgRSAmJiAoeCA9IC1FLCByICYmIChUICs9IHMuc2xpZGVzR3JpZFswXSkpLCBPYmplY3QuYXNzaWduKHMudmlydHVhbCwge1xuICAgICAgICBmcm9tOiB4LFxuICAgICAgICB0bzogUyxcbiAgICAgICAgb2Zmc2V0OiBULFxuICAgICAgICBzbGlkZXNHcmlkOiBzLnNsaWRlc0dyaWQsXG4gICAgICAgIHNsaWRlc0JlZm9yZTogRSxcbiAgICAgICAgc2xpZGVzQWZ0ZXI6IHlcbiAgICAgIH0pLCB1ID09PSB4ICYmIG0gPT09IFMgJiYgIWUpIHJldHVybiBzLnNsaWRlc0dyaWQgIT09IGcgJiYgVCAhPT0gdiAmJiBzLnNsaWRlcy5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgZS5zdHlsZVtiXSA9IFQgLSBNYXRoLmFicyhzLmNzc092ZXJmbG93QWRqdXN0bWVudCgpKSArIFwicHhcIlxuICAgICAgfSkpLCBzLnVwZGF0ZVByb2dyZXNzKCksIHZvaWQgbihcInZpcnR1YWxVcGRhdGVcIik7XG4gICAgICBpZiAocy5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbCkgcmV0dXJuIHMucGFyYW1zLnZpcnR1YWwucmVuZGVyRXh0ZXJuYWwuY2FsbChzLCB7XG4gICAgICAgIG9mZnNldDogVCxcbiAgICAgICAgZnJvbTogeCxcbiAgICAgICAgdG86IFMsXG4gICAgICAgIHNsaWRlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnN0IGUgPSBbXTtcbiAgICAgICAgICBmb3IgKGxldCB0ID0geDsgdCA8PSBTOyB0ICs9IDEpIGUucHVzaChoW3RdKTtcbiAgICAgICAgICByZXR1cm4gZVxuICAgICAgICB9KClcbiAgICAgIH0pLCB2b2lkIChzLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsVXBkYXRlID8gTSgpIDogbihcInZpcnR1YWxVcGRhdGVcIikpO1xuICAgICAgY29uc3QgQyA9IFtdLCBQID0gW10sIEwgPSBlID0+IHtcbiAgICAgICAgbGV0IHQgPSBlO1xuICAgICAgICByZXR1cm4gZSA8IDAgPyB0ID0gaC5sZW5ndGggKyBlIDogdCA+PSBoLmxlbmd0aCAmJiAodCAtPSBoLmxlbmd0aCksIHRcbiAgICAgIH07XG4gICAgICBpZiAoZSkgcy5zbGlkZXMuZmlsdGVyKChlID0+IGUubWF0Y2hlcyhgLiR7cy5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApKSkuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgIGUucmVtb3ZlKClcbiAgICAgIH0pKTsgZWxzZSBmb3IgKGxldCBlID0gdTsgZSA8PSBtOyBlICs9IDEpIGlmIChlIDwgeCB8fCBlID4gUykge1xuICAgICAgICBjb25zdCB0ID0gTChlKTtcbiAgICAgICAgcy5zbGlkZXMuZmlsdGVyKChlID0+IGUubWF0Y2hlcyhgLiR7cy5wYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3R9XCJdLCBzd2lwZXItc2xpZGVbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3R9XCJdYCkpKS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICBlLnJlbW92ZSgpXG4gICAgICAgIH0pKVxuICAgICAgfVxuICAgICAgY29uc3QgSSA9IGwgPyAtaC5sZW5ndGggOiAwLCB6ID0gbCA/IDIgKiBoLmxlbmd0aCA6IGgubGVuZ3RoO1xuICAgICAgZm9yIChsZXQgdCA9IEk7IHQgPCB6OyB0ICs9IDEpIGlmICh0ID49IHggJiYgdCA8PSBTKSB7XG4gICAgICAgIGNvbnN0IHMgPSBMKHQpO1xuICAgICAgICB2b2lkIDAgPT09IG0gfHwgZSA/IFAucHVzaChzKSA6ICh0ID4gbSAmJiBQLnB1c2gocyksIHQgPCB1ICYmIEMucHVzaChzKSlcbiAgICAgIH1cbiAgICAgIGlmIChQLmZvckVhY2goKGUgPT4ge1xuICAgICAgICBzLnNsaWRlc0VsLmFwcGVuZChkKGhbZV0sIGUpKVxuICAgICAgfSkpLCBsKSBmb3IgKGxldCBlID0gQy5sZW5ndGggLSAxOyBlID49IDA7IGUgLT0gMSkge1xuICAgICAgICBjb25zdCB0ID0gQ1tlXTtcbiAgICAgICAgcy5zbGlkZXNFbC5wcmVwZW5kKGQoaFt0XSwgdCkpXG4gICAgICB9IGVsc2UgQy5zb3J0KCgoZSwgdCkgPT4gdCAtIGUpKSwgQy5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgcy5zbGlkZXNFbC5wcmVwZW5kKGQoaFtlXSwgZSkpXG4gICAgICB9KSk7XG4gICAgICBmKHMuc2xpZGVzRWwsIFwiLnN3aXBlci1zbGlkZSwgc3dpcGVyLXNsaWRlXCIpLmZvckVhY2goKGUgPT4ge1xuICAgICAgICBlLnN0eWxlW2JdID0gVCAtIE1hdGguYWJzKHMuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCkpICsgXCJweFwiXG4gICAgICB9KSksIE0oKVxuICAgIH1cblxuICAgIHIoXCJiZWZvcmVJbml0XCIsICgoKSA9PiB7XG4gICAgICBpZiAoIXMucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgbGV0IGU7XG4gICAgICBpZiAodm9pZCAwID09PSBzLnBhc3NlZFBhcmFtcy52aXJ0dWFsLnNsaWRlcykge1xuICAgICAgICBjb25zdCB0ID0gWy4uLnMuc2xpZGVzRWwuY2hpbGRyZW5dLmZpbHRlcigoZSA9PiBlLm1hdGNoZXMoYC4ke3MucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKSkpO1xuICAgICAgICB0ICYmIHQubGVuZ3RoICYmIChzLnZpcnR1YWwuc2xpZGVzID0gWy4uLnRdLCBlID0gITAsIHQuZm9yRWFjaCgoKGUsIHQpID0+IHtcbiAgICAgICAgICBlLnNldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIsIHQpLCBzLnZpcnR1YWwuY2FjaGVbdF0gPSBlLCBlLnJlbW92ZSgpXG4gICAgICAgIH0pKSlcbiAgICAgIH1cbiAgICAgIGUgfHwgKHMudmlydHVhbC5zbGlkZXMgPSBzLnBhcmFtcy52aXJ0dWFsLnNsaWRlcyksIHMuY2xhc3NOYW1lcy5wdXNoKGAke3MucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9dmlydHVhbGApLCBzLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gITAsIHMub3JpZ2luYWxQYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9ICEwLCBjKCExLCAhMClcbiAgICB9KSksIHIoXCJzZXRUcmFuc2xhdGVcIiwgKCgpID0+IHtcbiAgICAgIHMucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiAocy5wYXJhbXMuY3NzTW9kZSAmJiAhcy5faW1tZWRpYXRlVmlydHVhbCA/IChjbGVhclRpbWVvdXQodCksIHQgPSBzZXRUaW1lb3V0KCgoKSA9PiB7XG4gICAgICAgIGMoKVxuICAgICAgfSksIDEwMCkpIDogYygpKVxuICAgIH0pKSwgcihcImluaXQgdXBkYXRlIHJlc2l6ZVwiLCAoKCkgPT4ge1xuICAgICAgcy5wYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHMucGFyYW1zLmNzc01vZGUgJiYgdShzLndyYXBwZXJFbCwgXCItLXN3aXBlci12aXJ0dWFsLXNpemVcIiwgYCR7cy52aXJ0dWFsU2l6ZX1weGApXG4gICAgfSkpLCBPYmplY3QuYXNzaWduKHMudmlydHVhbCwge1xuICAgICAgYXBwZW5kU2xpZGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBlICYmIFwibGVuZ3RoXCIgaW4gZSkgZm9yIChsZXQgdCA9IDA7IHQgPCBlLmxlbmd0aDsgdCArPSAxKSBlW3RdICYmIHMudmlydHVhbC5zbGlkZXMucHVzaChlW3RdKTsgZWxzZSBzLnZpcnR1YWwuc2xpZGVzLnB1c2goZSk7XG4gICAgICAgIGMoITApXG4gICAgICB9LCBwcmVwZW5kU2xpZGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBzLmFjdGl2ZUluZGV4O1xuICAgICAgICBsZXQgYSA9IHQgKyAxLCBpID0gMTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IGUubGVuZ3RoOyB0ICs9IDEpIGVbdF0gJiYgcy52aXJ0dWFsLnNsaWRlcy51bnNoaWZ0KGVbdF0pO1xuICAgICAgICAgIGEgPSB0ICsgZS5sZW5ndGgsIGkgPSBlLmxlbmd0aFxuICAgICAgICB9IGVsc2Ugcy52aXJ0dWFsLnNsaWRlcy51bnNoaWZ0KGUpO1xuICAgICAgICBpZiAocy5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgICAgIGNvbnN0IGUgPSBzLnZpcnR1YWwuY2FjaGUsIHQgPSB7fTtcbiAgICAgICAgICBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKChzID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBlW3NdLCByID0gYS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKTtcbiAgICAgICAgICAgIHIgJiYgYS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiLCBwYXJzZUludChyLCAxMCkgKyBpKSwgdFtwYXJzZUludChzLCAxMCkgKyBpXSA9IGFcbiAgICAgICAgICB9KSksIHMudmlydHVhbC5jYWNoZSA9IHRcbiAgICAgICAgfVxuICAgICAgICBjKCEwKSwgcy5zbGlkZVRvKGEsIDApXG4gICAgICB9LCByZW1vdmVTbGlkZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKG51bGwgPT0gZSkgcmV0dXJuO1xuICAgICAgICBsZXQgdCA9IHMuYWN0aXZlSW5kZXg7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSBmb3IgKGxldCBhID0gZS5sZW5ndGggLSAxOyBhID49IDA7IGEgLT0gMSkgcy5wYXJhbXMudmlydHVhbC5jYWNoZSAmJiAoZGVsZXRlIHMudmlydHVhbC5jYWNoZVtlW2FdXSwgT2JqZWN0LmtleXMocy52aXJ0dWFsLmNhY2hlKS5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICB0ID4gZSAmJiAocy52aXJ0dWFsLmNhY2hlW3QgLSAxXSA9IHMudmlydHVhbC5jYWNoZVt0XSwgcy52aXJ0dWFsLmNhY2hlW3QgLSAxXS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiLCB0IC0gMSksIGRlbGV0ZSBzLnZpcnR1YWwuY2FjaGVbdF0pXG4gICAgICAgIH0pKSksIHMudmlydHVhbC5zbGlkZXMuc3BsaWNlKGVbYV0sIDEpLCBlW2FdIDwgdCAmJiAodCAtPSAxKSwgdCA9IE1hdGgubWF4KHQsIDApOyBlbHNlIHMucGFyYW1zLnZpcnR1YWwuY2FjaGUgJiYgKGRlbGV0ZSBzLnZpcnR1YWwuY2FjaGVbZV0sIE9iamVjdC5rZXlzKHMudmlydHVhbC5jYWNoZSkuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgdCA+IGUgJiYgKHMudmlydHVhbC5jYWNoZVt0IC0gMV0gPSBzLnZpcnR1YWwuY2FjaGVbdF0sIHMudmlydHVhbC5jYWNoZVt0IC0gMV0uc2V0QXR0cmlidXRlKFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIiwgdCAtIDEpLCBkZWxldGUgcy52aXJ0dWFsLmNhY2hlW3RdKVxuICAgICAgICB9KSkpLCBzLnZpcnR1YWwuc2xpZGVzLnNwbGljZShlLCAxKSwgZSA8IHQgJiYgKHQgLT0gMSksIHQgPSBNYXRoLm1heCh0LCAwKTtcbiAgICAgICAgYyghMCksIHMuc2xpZGVUbyh0LCAwKVxuICAgICAgfSwgcmVtb3ZlQWxsU2xpZGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHMudmlydHVhbC5zbGlkZXMgPSBbXSwgcy5wYXJhbXMudmlydHVhbC5jYWNoZSAmJiAocy52aXJ0dWFsLmNhY2hlID0ge30pLCBjKCEwKSwgcy5zbGlkZVRvKDAsIDApXG4gICAgICB9LCB1cGRhdGU6IGNcbiAgICB9KVxuICB9LCBmdW5jdGlvbiAoZSkge1xuICAgIGxldCB7c3dpcGVyOiB0LCBleHRlbmRQYXJhbXM6IHMsIG9uOiBpLCBlbWl0OiBufSA9IGU7XG4gICAgY29uc3QgbCA9IGEoKSwgbyA9IHIoKTtcblxuICAgIGZ1bmN0aW9uIGQoZSkge1xuICAgICAgaWYgKCF0LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIGNvbnN0IHtydGxUcmFuc2xhdGU6IHN9ID0gdDtcbiAgICAgIGxldCBhID0gZTtcbiAgICAgIGEub3JpZ2luYWxFdmVudCAmJiAoYSA9IGEub3JpZ2luYWxFdmVudCk7XG4gICAgICBjb25zdCBpID0gYS5rZXlDb2RlIHx8IGEuY2hhckNvZGUsIHIgPSB0LnBhcmFtcy5rZXlib2FyZC5wYWdlVXBEb3duLCBkID0gciAmJiAzMyA9PT0gaSwgYyA9IHIgJiYgMzQgPT09IGksXG4gICAgICAgIHAgPSAzNyA9PT0gaSwgdSA9IDM5ID09PSBpLCBtID0gMzggPT09IGksIGggPSA0MCA9PT0gaTtcbiAgICAgIGlmICghdC5hbGxvd1NsaWRlTmV4dCAmJiAodC5pc0hvcml6b250YWwoKSAmJiB1IHx8IHQuaXNWZXJ0aWNhbCgpICYmIGggfHwgYykpIHJldHVybiAhMTtcbiAgICAgIGlmICghdC5hbGxvd1NsaWRlUHJldiAmJiAodC5pc0hvcml6b250YWwoKSAmJiBwIHx8IHQuaXNWZXJ0aWNhbCgpICYmIG0gfHwgZCkpIHJldHVybiAhMTtcbiAgICAgIGlmICghKGEuc2hpZnRLZXkgfHwgYS5hbHRLZXkgfHwgYS5jdHJsS2V5IHx8IGEubWV0YUtleSB8fCBsLmFjdGl2ZUVsZW1lbnQgJiYgbC5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lICYmIChcImlucHV0XCIgPT09IGwuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIHx8IFwidGV4dGFyZWFcIiA9PT0gbC5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpKSkge1xuICAgICAgICBpZiAodC5wYXJhbXMua2V5Ym9hcmQub25seUluVmlld3BvcnQgJiYgKGQgfHwgYyB8fCBwIHx8IHUgfHwgbSB8fCBoKSkge1xuICAgICAgICAgIGxldCBlID0gITE7XG4gICAgICAgICAgaWYgKEUodC5lbCwgYC4ke3QucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKS5sZW5ndGggPiAwICYmIDAgPT09IEUodC5lbCwgYC4ke3QucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3N9YCkubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgY29uc3QgYSA9IHQuZWwsIGkgPSBhLmNsaWVudFdpZHRoLCByID0gYS5jbGllbnRIZWlnaHQsIG4gPSBvLmlubmVyV2lkdGgsIGwgPSBvLmlubmVySGVpZ2h0LCBkID0gdyhhKTtcbiAgICAgICAgICBzICYmIChkLmxlZnQgLT0gYS5zY3JvbGxMZWZ0KTtcbiAgICAgICAgICBjb25zdCBjID0gW1tkLmxlZnQsIGQudG9wXSwgW2QubGVmdCArIGksIGQudG9wXSwgW2QubGVmdCwgZC50b3AgKyByXSwgW2QubGVmdCArIGksIGQudG9wICsgcl1dO1xuICAgICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgYy5sZW5ndGg7IHQgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgcyA9IGNbdF07XG4gICAgICAgICAgICBpZiAoc1swXSA+PSAwICYmIHNbMF0gPD0gbiAmJiBzWzFdID49IDAgJiYgc1sxXSA8PSBsKSB7XG4gICAgICAgICAgICAgIGlmICgwID09PSBzWzBdICYmIDAgPT09IHNbMV0pIGNvbnRpbnVlO1xuICAgICAgICAgICAgICBlID0gITBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFlKSByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICB0LmlzSG9yaXpvbnRhbCgpID8gKChkIHx8IGMgfHwgcCB8fCB1KSAmJiAoYS5wcmV2ZW50RGVmYXVsdCA/IGEucHJldmVudERlZmF1bHQoKSA6IGEucmV0dXJuVmFsdWUgPSAhMSksICgoYyB8fCB1KSAmJiAhcyB8fCAoZCB8fCBwKSAmJiBzKSAmJiB0LnNsaWRlTmV4dCgpLCAoKGQgfHwgcCkgJiYgIXMgfHwgKGMgfHwgdSkgJiYgcykgJiYgdC5zbGlkZVByZXYoKSkgOiAoKGQgfHwgYyB8fCBtIHx8IGgpICYmIChhLnByZXZlbnREZWZhdWx0ID8gYS5wcmV2ZW50RGVmYXVsdCgpIDogYS5yZXR1cm5WYWx1ZSA9ICExKSwgKGMgfHwgaCkgJiYgdC5zbGlkZU5leHQoKSwgKGQgfHwgbSkgJiYgdC5zbGlkZVByZXYoKSksIG4oXCJrZXlQcmVzc1wiLCBpKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGMoKSB7XG4gICAgICB0LmtleWJvYXJkLmVuYWJsZWQgfHwgKGwuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZCksIHQua2V5Ym9hcmQuZW5hYmxlZCA9ICEwKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHAoKSB7XG4gICAgICB0LmtleWJvYXJkLmVuYWJsZWQgJiYgKGwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZCksIHQua2V5Ym9hcmQuZW5hYmxlZCA9ICExKVxuICAgIH1cblxuICAgIHQua2V5Ym9hcmQgPSB7ZW5hYmxlZDogITF9LCBzKHtrZXlib2FyZDoge2VuYWJsZWQ6ICExLCBvbmx5SW5WaWV3cG9ydDogITAsIHBhZ2VVcERvd246ICEwfX0pLCBpKFwiaW5pdFwiLCAoKCkgPT4ge1xuICAgICAgdC5wYXJhbXMua2V5Ym9hcmQuZW5hYmxlZCAmJiBjKClcbiAgICB9KSksIGkoXCJkZXN0cm95XCIsICgoKSA9PiB7XG4gICAgICB0LmtleWJvYXJkLmVuYWJsZWQgJiYgcCgpXG4gICAgfSkpLCBPYmplY3QuYXNzaWduKHQua2V5Ym9hcmQsIHtlbmFibGU6IGMsIGRpc2FibGU6IHB9KVxuICB9LCBmdW5jdGlvbiAoZSkge1xuICAgIGxldCB7c3dpcGVyOiB0LCBleHRlbmRQYXJhbXM6IHMsIG9uOiBhLCBlbWl0OiBpfSA9IGU7XG4gICAgY29uc3QgbiA9IHIoKTtcbiAgICBsZXQgZDtcbiAgICBzKHtcbiAgICAgIG1vdXNld2hlZWw6IHtcbiAgICAgICAgZW5hYmxlZDogITEsXG4gICAgICAgIHJlbGVhc2VPbkVkZ2VzOiAhMSxcbiAgICAgICAgaW52ZXJ0OiAhMSxcbiAgICAgICAgZm9yY2VUb0F4aXM6ICExLFxuICAgICAgICBzZW5zaXRpdml0eTogMSxcbiAgICAgICAgZXZlbnRzVGFyZ2V0OiBcImNvbnRhaW5lclwiLFxuICAgICAgICB0aHJlc2hvbGREZWx0YTogbnVsbCxcbiAgICAgICAgdGhyZXNob2xkVGltZTogbnVsbCxcbiAgICAgICAgbm9Nb3VzZXdoZWVsQ2xhc3M6IFwic3dpcGVyLW5vLW1vdXNld2hlZWxcIlxuICAgICAgfVxuICAgIH0pLCB0Lm1vdXNld2hlZWwgPSB7ZW5hYmxlZDogITF9O1xuICAgIGxldCBjLCBwID0gbygpO1xuICAgIGNvbnN0IHUgPSBbXTtcblxuICAgIGZ1bmN0aW9uIG0oKSB7XG4gICAgICB0LmVuYWJsZWQgJiYgKHQubW91c2VFbnRlcmVkID0gITApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaCgpIHtcbiAgICAgIHQuZW5hYmxlZCAmJiAodC5tb3VzZUVudGVyZWQgPSAhMSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmKGUpIHtcbiAgICAgIHJldHVybiAhKHQucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkRGVsdGEgJiYgZS5kZWx0YSA8IHQucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkRGVsdGEpICYmICghKHQucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkVGltZSAmJiBvKCkgLSBwIDwgdC5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGRUaW1lKSAmJiAoZS5kZWx0YSA+PSA2ICYmIG8oKSAtIHAgPCA2MCB8fCAoZS5kaXJlY3Rpb24gPCAwID8gdC5pc0VuZCAmJiAhdC5wYXJhbXMubG9vcCB8fCB0LmFuaW1hdGluZyB8fCAodC5zbGlkZU5leHQoKSwgaShcInNjcm9sbFwiLCBlLnJhdykpIDogdC5pc0JlZ2lubmluZyAmJiAhdC5wYXJhbXMubG9vcCB8fCB0LmFuaW1hdGluZyB8fCAodC5zbGlkZVByZXYoKSwgaShcInNjcm9sbFwiLCBlLnJhdykpLCBwID0gKG5ldyBuLkRhdGUpLmdldFRpbWUoKSwgITEpKSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnKGUpIHtcbiAgICAgIGxldCBzID0gZSwgYSA9ICEwO1xuICAgICAgaWYgKCF0LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIGlmIChlLnRhcmdldC5jbG9zZXN0KGAuJHt0LnBhcmFtcy5tb3VzZXdoZWVsLm5vTW91c2V3aGVlbENsYXNzfWApKSByZXR1cm47XG4gICAgICBjb25zdCByID0gdC5wYXJhbXMubW91c2V3aGVlbDtcbiAgICAgIHQucGFyYW1zLmNzc01vZGUgJiYgcy5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgbGV0IG4gPSB0LmVsO1xuICAgICAgXCJjb250YWluZXJcIiAhPT0gdC5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQgJiYgKG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHQucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0KSk7XG4gICAgICBjb25zdCBwID0gbiAmJiBuLmNvbnRhaW5zKHMudGFyZ2V0KTtcbiAgICAgIGlmICghdC5tb3VzZUVudGVyZWQgJiYgIXAgJiYgIXIucmVsZWFzZU9uRWRnZXMpIHJldHVybiAhMDtcbiAgICAgIHMub3JpZ2luYWxFdmVudCAmJiAocyA9IHMub3JpZ2luYWxFdmVudCk7XG4gICAgICBsZXQgbSA9IDA7XG4gICAgICBjb25zdCBoID0gdC5ydGxUcmFuc2xhdGUgPyAtMSA6IDEsIGcgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBsZXQgdCA9IDAsIHMgPSAwLCBhID0gMCwgaSA9IDA7XG4gICAgICAgIHJldHVybiBcImRldGFpbFwiIGluIGUgJiYgKHMgPSBlLmRldGFpbCksIFwid2hlZWxEZWx0YVwiIGluIGUgJiYgKHMgPSAtZS53aGVlbERlbHRhIC8gMTIwKSwgXCJ3aGVlbERlbHRhWVwiIGluIGUgJiYgKHMgPSAtZS53aGVlbERlbHRhWSAvIDEyMCksIFwid2hlZWxEZWx0YVhcIiBpbiBlICYmICh0ID0gLWUud2hlZWxEZWx0YVggLyAxMjApLCBcImF4aXNcIiBpbiBlICYmIGUuYXhpcyA9PT0gZS5IT1JJWk9OVEFMX0FYSVMgJiYgKHQgPSBzLCBzID0gMCksIGEgPSAxMCAqIHQsIGkgPSAxMCAqIHMsIFwiZGVsdGFZXCIgaW4gZSAmJiAoaSA9IGUuZGVsdGFZKSwgXCJkZWx0YVhcIiBpbiBlICYmIChhID0gZS5kZWx0YVgpLCBlLnNoaWZ0S2V5ICYmICFhICYmIChhID0gaSwgaSA9IDApLCAoYSB8fCBpKSAmJiBlLmRlbHRhTW9kZSAmJiAoMSA9PT0gZS5kZWx0YU1vZGUgPyAoYSAqPSA0MCwgaSAqPSA0MCkgOiAoYSAqPSA4MDAsIGkgKj0gODAwKSksIGEgJiYgIXQgJiYgKHQgPSBhIDwgMSA/IC0xIDogMSksIGkgJiYgIXMgJiYgKHMgPSBpIDwgMSA/IC0xIDogMSksIHtcbiAgICAgICAgICBzcGluWDogdCxcbiAgICAgICAgICBzcGluWTogcyxcbiAgICAgICAgICBwaXhlbFg6IGEsXG4gICAgICAgICAgcGl4ZWxZOiBpXG4gICAgICAgIH1cbiAgICAgIH0ocyk7XG4gICAgICBpZiAoci5mb3JjZVRvQXhpcykgaWYgKHQuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgaWYgKCEoTWF0aC5hYnMoZy5waXhlbFgpID4gTWF0aC5hYnMoZy5waXhlbFkpKSkgcmV0dXJuICEwO1xuICAgICAgICBtID0gLWcucGl4ZWxYICogaFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCEoTWF0aC5hYnMoZy5waXhlbFkpID4gTWF0aC5hYnMoZy5waXhlbFgpKSkgcmV0dXJuICEwO1xuICAgICAgICBtID0gLWcucGl4ZWxZXG4gICAgICB9IGVsc2UgbSA9IE1hdGguYWJzKGcucGl4ZWxYKSA+IE1hdGguYWJzKGcucGl4ZWxZKSA/IC1nLnBpeGVsWCAqIGggOiAtZy5waXhlbFk7XG4gICAgICBpZiAoMCA9PT0gbSkgcmV0dXJuICEwO1xuICAgICAgci5pbnZlcnQgJiYgKG0gPSAtbSk7XG4gICAgICBsZXQgdiA9IHQuZ2V0VHJhbnNsYXRlKCkgKyBtICogci5zZW5zaXRpdml0eTtcbiAgICAgIGlmICh2ID49IHQubWluVHJhbnNsYXRlKCkgJiYgKHYgPSB0Lm1pblRyYW5zbGF0ZSgpKSwgdiA8PSB0Lm1heFRyYW5zbGF0ZSgpICYmICh2ID0gdC5tYXhUcmFuc2xhdGUoKSksIGEgPSAhIXQucGFyYW1zLmxvb3AgfHwgISh2ID09PSB0Lm1pblRyYW5zbGF0ZSgpIHx8IHYgPT09IHQubWF4VHJhbnNsYXRlKCkpLCBhICYmIHQucGFyYW1zLm5lc3RlZCAmJiBzLnN0b3BQcm9wYWdhdGlvbigpLCB0LnBhcmFtcy5mcmVlTW9kZSAmJiB0LnBhcmFtcy5mcmVlTW9kZS5lbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IGUgPSB7dGltZTogbygpLCBkZWx0YTogTWF0aC5hYnMobSksIGRpcmVjdGlvbjogTWF0aC5zaWduKG0pfSxcbiAgICAgICAgICBhID0gYyAmJiBlLnRpbWUgPCBjLnRpbWUgKyA1MDAgJiYgZS5kZWx0YSA8PSBjLmRlbHRhICYmIGUuZGlyZWN0aW9uID09PSBjLmRpcmVjdGlvbjtcbiAgICAgICAgaWYgKCFhKSB7XG4gICAgICAgICAgYyA9IHZvaWQgMDtcbiAgICAgICAgICBsZXQgbiA9IHQuZ2V0VHJhbnNsYXRlKCkgKyBtICogci5zZW5zaXRpdml0eTtcbiAgICAgICAgICBjb25zdCBvID0gdC5pc0JlZ2lubmluZywgcCA9IHQuaXNFbmQ7XG4gICAgICAgICAgaWYgKG4gPj0gdC5taW5UcmFuc2xhdGUoKSAmJiAobiA9IHQubWluVHJhbnNsYXRlKCkpLCBuIDw9IHQubWF4VHJhbnNsYXRlKCkgJiYgKG4gPSB0Lm1heFRyYW5zbGF0ZSgpKSwgdC5zZXRUcmFuc2l0aW9uKDApLCB0LnNldFRyYW5zbGF0ZShuKSwgdC51cGRhdGVQcm9ncmVzcygpLCB0LnVwZGF0ZUFjdGl2ZUluZGV4KCksIHQudXBkYXRlU2xpZGVzQ2xhc3NlcygpLCAoIW8gJiYgdC5pc0JlZ2lubmluZyB8fCAhcCAmJiB0LmlzRW5kKSAmJiB0LnVwZGF0ZVNsaWRlc0NsYXNzZXMoKSwgdC5wYXJhbXMubG9vcCAmJiB0Lmxvb3BGaXgoe1xuICAgICAgICAgICAgZGlyZWN0aW9uOiBlLmRpcmVjdGlvbiA8IDAgPyBcIm5leHRcIiA6IFwicHJldlwiLFxuICAgICAgICAgICAgYnlNb3VzZXdoZWVsOiAhMFxuICAgICAgICAgIH0pLCB0LnBhcmFtcy5mcmVlTW9kZS5zdGlja3kpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChkKSwgZCA9IHZvaWQgMCwgdS5sZW5ndGggPj0gMTUgJiYgdS5zaGlmdCgpO1xuICAgICAgICAgICAgY29uc3QgcyA9IHUubGVuZ3RoID8gdVt1Lmxlbmd0aCAtIDFdIDogdm9pZCAwLCBhID0gdVswXTtcbiAgICAgICAgICAgIGlmICh1LnB1c2goZSksIHMgJiYgKGUuZGVsdGEgPiBzLmRlbHRhIHx8IGUuZGlyZWN0aW9uICE9PSBzLmRpcmVjdGlvbikpIHUuc3BsaWNlKDApOyBlbHNlIGlmICh1Lmxlbmd0aCA+PSAxNSAmJiBlLnRpbWUgLSBhLnRpbWUgPCA1MDAgJiYgYS5kZWx0YSAtIGUuZGVsdGEgPj0gMSAmJiBlLmRlbHRhIDw9IDYpIHtcbiAgICAgICAgICAgICAgY29uc3QgcyA9IG0gPiAwID8gLjggOiAuMjtcbiAgICAgICAgICAgICAgYyA9IGUsIHUuc3BsaWNlKDApLCBkID0gbCgoKCkgPT4ge1xuICAgICAgICAgICAgICAgICF0LmRlc3Ryb3llZCAmJiB0LnBhcmFtcyAmJiB0LnNsaWRlVG9DbG9zZXN0KHQucGFyYW1zLnNwZWVkLCAhMCwgdm9pZCAwLCBzKVxuICAgICAgICAgICAgICB9KSwgMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGQgfHwgKGQgPSBsKCgoKSA9PiB7XG4gICAgICAgICAgICAgIGlmICh0LmRlc3Ryb3llZCB8fCAhdC5wYXJhbXMpIHJldHVybjtcbiAgICAgICAgICAgICAgYyA9IGUsIHUuc3BsaWNlKDApLCB0LnNsaWRlVG9DbG9zZXN0KHQucGFyYW1zLnNwZWVkLCAhMCwgdm9pZCAwLCAuNSlcbiAgICAgICAgICAgIH0pLCA1MDApKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYSB8fCBpKFwic2Nyb2xsXCIsIHMpLCB0LnBhcmFtcy5hdXRvcGxheSAmJiB0LnBhcmFtcy5hdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uICYmIHQuYXV0b3BsYXkuc3RvcCgpLCByLnJlbGVhc2VPbkVkZ2VzICYmIChuID09PSB0Lm1pblRyYW5zbGF0ZSgpIHx8IG4gPT09IHQubWF4VHJhbnNsYXRlKCkpKSByZXR1cm4gITBcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcyA9IHt0aW1lOiBvKCksIGRlbHRhOiBNYXRoLmFicyhtKSwgZGlyZWN0aW9uOiBNYXRoLnNpZ24obSksIHJhdzogZX07XG4gICAgICAgIHUubGVuZ3RoID49IDIgJiYgdS5zaGlmdCgpO1xuICAgICAgICBjb25zdCBhID0gdS5sZW5ndGggPyB1W3UubGVuZ3RoIC0gMV0gOiB2b2lkIDA7XG4gICAgICAgIGlmICh1LnB1c2gocyksIGEgPyAocy5kaXJlY3Rpb24gIT09IGEuZGlyZWN0aW9uIHx8IHMuZGVsdGEgPiBhLmRlbHRhIHx8IHMudGltZSA+IGEudGltZSArIDE1MCkgJiYgZihzKSA6IGYocyksIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgY29uc3QgcyA9IHQucGFyYW1zLm1vdXNld2hlZWw7XG4gICAgICAgICAgaWYgKGUuZGlyZWN0aW9uIDwgMCkge1xuICAgICAgICAgICAgaWYgKHQuaXNFbmQgJiYgIXQucGFyYW1zLmxvb3AgJiYgcy5yZWxlYXNlT25FZGdlcykgcmV0dXJuICEwXG4gICAgICAgICAgfSBlbHNlIGlmICh0LmlzQmVnaW5uaW5nICYmICF0LnBhcmFtcy5sb29wICYmIHMucmVsZWFzZU9uRWRnZXMpIHJldHVybiAhMDtcbiAgICAgICAgICByZXR1cm4gITFcbiAgICAgICAgfShzKSkgcmV0dXJuICEwXG4gICAgICB9XG4gICAgICByZXR1cm4gcy5wcmV2ZW50RGVmYXVsdCA/IHMucHJldmVudERlZmF1bHQoKSA6IHMucmV0dXJuVmFsdWUgPSAhMSwgITFcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2KGUpIHtcbiAgICAgIGxldCBzID0gdC5lbDtcbiAgICAgIFwiY29udGFpbmVyXCIgIT09IHQucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0ICYmIChzID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0LnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCkpLCBzW2VdKFwibW91c2VlbnRlclwiLCBtKSwgc1tlXShcIm1vdXNlbGVhdmVcIiwgaCksIHNbZV0oXCJ3aGVlbFwiLCBnKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHcoKSB7XG4gICAgICByZXR1cm4gdC5wYXJhbXMuY3NzTW9kZSA/ICh0LndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgZyksICEwKSA6ICF0Lm1vdXNld2hlZWwuZW5hYmxlZCAmJiAodihcImFkZEV2ZW50TGlzdGVuZXJcIiksIHQubW91c2V3aGVlbC5lbmFibGVkID0gITAsICEwKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGIoKSB7XG4gICAgICByZXR1cm4gdC5wYXJhbXMuY3NzTW9kZSA/ICh0LndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBnKSwgITApIDogISF0Lm1vdXNld2hlZWwuZW5hYmxlZCAmJiAodihcInJlbW92ZUV2ZW50TGlzdGVuZXJcIiksIHQubW91c2V3aGVlbC5lbmFibGVkID0gITEsICEwKVxuICAgIH1cblxuICAgIGEoXCJpbml0XCIsICgoKSA9PiB7XG4gICAgICAhdC5wYXJhbXMubW91c2V3aGVlbC5lbmFibGVkICYmIHQucGFyYW1zLmNzc01vZGUgJiYgYigpLCB0LnBhcmFtcy5tb3VzZXdoZWVsLmVuYWJsZWQgJiYgdygpXG4gICAgfSkpLCBhKFwiZGVzdHJveVwiLCAoKCkgPT4ge1xuICAgICAgdC5wYXJhbXMuY3NzTW9kZSAmJiB3KCksIHQubW91c2V3aGVlbC5lbmFibGVkICYmIGIoKVxuICAgIH0pKSwgT2JqZWN0LmFzc2lnbih0Lm1vdXNld2hlZWwsIHtlbmFibGU6IHcsIGRpc2FibGU6IGJ9KVxuICB9LCBmdW5jdGlvbiAoZSkge1xuICAgIGxldCB7c3dpcGVyOiB0LCBleHRlbmRQYXJhbXM6IHMsIG9uOiBhLCBlbWl0OiBpfSA9IGU7XG5cbiAgICBmdW5jdGlvbiByKGUpIHtcbiAgICAgIGxldCBzO1xuICAgICAgcmV0dXJuIGUgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSAmJiB0LmlzRWxlbWVudCAmJiAocyA9IHQuZWwucXVlcnlTZWxlY3RvcihlKSB8fCB0Lmhvc3RFbC5xdWVyeVNlbGVjdG9yKGUpLCBzKSA/IHMgOiAoZSAmJiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSAmJiAocyA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGUpXSksIHQucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgJiYgcyAmJiBzLmxlbmd0aCA+IDEgJiYgMSA9PT0gdC5lbC5xdWVyeVNlbGVjdG9yQWxsKGUpLmxlbmd0aCA/IHMgPSB0LmVsLnF1ZXJ5U2VsZWN0b3IoZSkgOiBzICYmIDEgPT09IHMubGVuZ3RoICYmIChzID0gc1swXSkpLCBlICYmICFzID8gZSA6IHMpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbihlLCBzKSB7XG4gICAgICBjb25zdCBhID0gdC5wYXJhbXMubmF2aWdhdGlvbjtcbiAgICAgIChlID0gVChlKSkuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgIGUgJiYgKGUuY2xhc3NMaXN0W3MgPyBcImFkZFwiIDogXCJyZW1vdmVcIl0oLi4uYS5kaXNhYmxlZENsYXNzLnNwbGl0KFwiIFwiKSksIFwiQlVUVE9OXCIgPT09IGUudGFnTmFtZSAmJiAoZS5kaXNhYmxlZCA9IHMpLCB0LnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHQuZW5hYmxlZCAmJiBlLmNsYXNzTGlzdFt0LmlzTG9ja2VkID8gXCJhZGRcIiA6IFwicmVtb3ZlXCJdKGEubG9ja0NsYXNzKSlcbiAgICAgIH0pKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGwoKSB7XG4gICAgICBjb25zdCB7bmV4dEVsOiBlLCBwcmV2RWw6IHN9ID0gdC5uYXZpZ2F0aW9uO1xuICAgICAgaWYgKHQucGFyYW1zLmxvb3ApIHJldHVybiBuKHMsICExKSwgdm9pZCBuKGUsICExKTtcbiAgICAgIG4ocywgdC5pc0JlZ2lubmluZyAmJiAhdC5wYXJhbXMucmV3aW5kKSwgbihlLCB0LmlzRW5kICYmICF0LnBhcmFtcy5yZXdpbmQpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbyhlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCksICghdC5pc0JlZ2lubmluZyB8fCB0LnBhcmFtcy5sb29wIHx8IHQucGFyYW1zLnJld2luZCkgJiYgKHQuc2xpZGVQcmV2KCksIGkoXCJuYXZpZ2F0aW9uUHJldlwiKSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKSwgKCF0LmlzRW5kIHx8IHQucGFyYW1zLmxvb3AgfHwgdC5wYXJhbXMucmV3aW5kKSAmJiAodC5zbGlkZU5leHQoKSwgaShcIm5hdmlnYXRpb25OZXh0XCIpKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGMoKSB7XG4gICAgICBjb25zdCBlID0gdC5wYXJhbXMubmF2aWdhdGlvbjtcbiAgICAgIGlmICh0LnBhcmFtcy5uYXZpZ2F0aW9uID0gcmUodCwgdC5vcmlnaW5hbFBhcmFtcy5uYXZpZ2F0aW9uLCB0LnBhcmFtcy5uYXZpZ2F0aW9uLCB7XG4gICAgICAgIG5leHRFbDogXCJzd2lwZXItYnV0dG9uLW5leHRcIixcbiAgICAgICAgcHJldkVsOiBcInN3aXBlci1idXR0b24tcHJldlwiXG4gICAgICB9KSwgIWUubmV4dEVsICYmICFlLnByZXZFbCkgcmV0dXJuO1xuICAgICAgbGV0IHMgPSByKGUubmV4dEVsKSwgYSA9IHIoZS5wcmV2RWwpO1xuICAgICAgT2JqZWN0LmFzc2lnbih0Lm5hdmlnYXRpb24sIHtuZXh0RWw6IHMsIHByZXZFbDogYX0pLCBzID0gVChzKSwgYSA9IFQoYSk7XG4gICAgICBjb25zdCBpID0gKHMsIGEpID0+IHtcbiAgICAgICAgcyAmJiBzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBcIm5leHRcIiA9PT0gYSA/IGQgOiBvKSwgIXQuZW5hYmxlZCAmJiBzICYmIHMuY2xhc3NMaXN0LmFkZCguLi5lLmxvY2tDbGFzcy5zcGxpdChcIiBcIikpXG4gICAgICB9O1xuICAgICAgcy5mb3JFYWNoKChlID0+IGkoZSwgXCJuZXh0XCIpKSksIGEuZm9yRWFjaCgoZSA9PiBpKGUsIFwicHJldlwiKSkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcCgpIHtcbiAgICAgIGxldCB7bmV4dEVsOiBlLCBwcmV2RWw6IHN9ID0gdC5uYXZpZ2F0aW9uO1xuICAgICAgZSA9IFQoZSksIHMgPSBUKHMpO1xuICAgICAgY29uc3QgYSA9IChlLCBzKSA9PiB7XG4gICAgICAgIGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIFwibmV4dFwiID09PSBzID8gZCA6IG8pLCBlLmNsYXNzTGlzdC5yZW1vdmUoLi4udC5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzLnNwbGl0KFwiIFwiKSlcbiAgICAgIH07XG4gICAgICBlLmZvckVhY2goKGUgPT4gYShlLCBcIm5leHRcIikpKSwgcy5mb3JFYWNoKChlID0+IGEoZSwgXCJwcmV2XCIpKSlcbiAgICB9XG5cbiAgICBzKHtcbiAgICAgIG5hdmlnYXRpb246IHtcbiAgICAgICAgbmV4dEVsOiBudWxsLFxuICAgICAgICBwcmV2RWw6IG51bGwsXG4gICAgICAgIGhpZGVPbkNsaWNrOiAhMSxcbiAgICAgICAgZGlzYWJsZWRDbGFzczogXCJzd2lwZXItYnV0dG9uLWRpc2FibGVkXCIsXG4gICAgICAgIGhpZGRlbkNsYXNzOiBcInN3aXBlci1idXR0b24taGlkZGVuXCIsXG4gICAgICAgIGxvY2tDbGFzczogXCJzd2lwZXItYnV0dG9uLWxvY2tcIixcbiAgICAgICAgbmF2aWdhdGlvbkRpc2FibGVkQ2xhc3M6IFwic3dpcGVyLW5hdmlnYXRpb24tZGlzYWJsZWRcIlxuICAgICAgfVxuICAgIH0pLCB0Lm5hdmlnYXRpb24gPSB7bmV4dEVsOiBudWxsLCBwcmV2RWw6IG51bGx9LCBhKFwiaW5pdFwiLCAoKCkgPT4ge1xuICAgICAgITEgPT09IHQucGFyYW1zLm5hdmlnYXRpb24uZW5hYmxlZCA/IHUoKSA6IChjKCksIGwoKSlcbiAgICB9KSksIGEoXCJ0b0VkZ2UgZnJvbUVkZ2UgbG9jayB1bmxvY2tcIiwgKCgpID0+IHtcbiAgICAgIGwoKVxuICAgIH0pKSwgYShcImRlc3Ryb3lcIiwgKCgpID0+IHtcbiAgICAgIHAoKVxuICAgIH0pKSwgYShcImVuYWJsZSBkaXNhYmxlXCIsICgoKSA9PiB7XG4gICAgICBsZXQge25leHRFbDogZSwgcHJldkVsOiBzfSA9IHQubmF2aWdhdGlvbjtcbiAgICAgIGUgPSBUKGUpLCBzID0gVChzKSwgdC5lbmFibGVkID8gbCgpIDogWy4uLmUsIC4uLnNdLmZpbHRlcigoZSA9PiAhIWUpKS5mb3JFYWNoKChlID0+IGUuY2xhc3NMaXN0LmFkZCh0LnBhcmFtcy5uYXZpZ2F0aW9uLmxvY2tDbGFzcykpKVxuICAgIH0pKSwgYShcImNsaWNrXCIsICgoZSwgcykgPT4ge1xuICAgICAgbGV0IHtuZXh0RWw6IGEsIHByZXZFbDogcn0gPSB0Lm5hdmlnYXRpb247XG4gICAgICBhID0gVChhKSwgciA9IFQocik7XG4gICAgICBjb25zdCBuID0gcy50YXJnZXQ7XG4gICAgICBsZXQgbCA9IHIuaW5jbHVkZXMobikgfHwgYS5pbmNsdWRlcyhuKTtcbiAgICAgIGlmICh0LmlzRWxlbWVudCAmJiAhbCkge1xuICAgICAgICBjb25zdCBlID0gcy5wYXRoIHx8IHMuY29tcG9zZWRQYXRoICYmIHMuY29tcG9zZWRQYXRoKCk7XG4gICAgICAgIGUgJiYgKGwgPSBlLmZpbmQoKGUgPT4gYS5pbmNsdWRlcyhlKSB8fCByLmluY2x1ZGVzKGUpKSkpXG4gICAgICB9XG4gICAgICBpZiAodC5wYXJhbXMubmF2aWdhdGlvbi5oaWRlT25DbGljayAmJiAhbCkge1xuICAgICAgICBpZiAodC5wYWdpbmF0aW9uICYmIHQucGFyYW1zLnBhZ2luYXRpb24gJiYgdC5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgKHQucGFnaW5hdGlvbi5lbCA9PT0gbiB8fCB0LnBhZ2luYXRpb24uZWwuY29udGFpbnMobikpKSByZXR1cm47XG4gICAgICAgIGxldCBlO1xuICAgICAgICBhLmxlbmd0aCA/IGUgPSBhWzBdLmNsYXNzTGlzdC5jb250YWlucyh0LnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKSA6IHIubGVuZ3RoICYmIChlID0gclswXS5jbGFzc0xpc3QuY29udGFpbnModC5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcykpLCBpKCEwID09PSBlID8gXCJuYXZpZ2F0aW9uU2hvd1wiIDogXCJuYXZpZ2F0aW9uSGlkZVwiKSwgWy4uLmEsIC4uLnJdLmZpbHRlcigoZSA9PiAhIWUpKS5mb3JFYWNoKChlID0+IGUuY2xhc3NMaXN0LnRvZ2dsZSh0LnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKSkpXG4gICAgICB9XG4gICAgfSkpO1xuICAgIGNvbnN0IHUgPSAoKSA9PiB7XG4gICAgICB0LmVsLmNsYXNzTGlzdC5hZGQoLi4udC5wYXJhbXMubmF2aWdhdGlvbi5uYXZpZ2F0aW9uRGlzYWJsZWRDbGFzcy5zcGxpdChcIiBcIikpLCBwKClcbiAgICB9O1xuICAgIE9iamVjdC5hc3NpZ24odC5uYXZpZ2F0aW9uLCB7XG4gICAgICBlbmFibGU6ICgpID0+IHtcbiAgICAgICAgdC5lbC5jbGFzc0xpc3QucmVtb3ZlKC4uLnQucGFyYW1zLm5hdmlnYXRpb24ubmF2aWdhdGlvbkRpc2FibGVkQ2xhc3Muc3BsaXQoXCIgXCIpKSwgYygpLCBsKClcbiAgICAgIH0sIGRpc2FibGU6IHUsIHVwZGF0ZTogbCwgaW5pdDogYywgZGVzdHJveTogcFxuICAgIH0pXG4gIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgbGV0IHtzd2lwZXI6IHQsIGV4dGVuZFBhcmFtczogcywgb246IGEsIGVtaXQ6IGl9ID0gZTtcbiAgICBjb25zdCByID0gXCJzd2lwZXItcGFnaW5hdGlvblwiO1xuICAgIGxldCBuO1xuICAgIHMoe1xuICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICBlbDogbnVsbCxcbiAgICAgICAgYnVsbGV0RWxlbWVudDogXCJzcGFuXCIsXG4gICAgICAgIGNsaWNrYWJsZTogITEsXG4gICAgICAgIGhpZGVPbkNsaWNrOiAhMSxcbiAgICAgICAgcmVuZGVyQnVsbGV0OiBudWxsLFxuICAgICAgICByZW5kZXJQcm9ncmVzc2JhcjogbnVsbCxcbiAgICAgICAgcmVuZGVyRnJhY3Rpb246IG51bGwsXG4gICAgICAgIHJlbmRlckN1c3RvbTogbnVsbCxcbiAgICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZTogITEsXG4gICAgICAgIHR5cGU6IFwiYnVsbGV0c1wiLFxuICAgICAgICBkeW5hbWljQnVsbGV0czogITEsXG4gICAgICAgIGR5bmFtaWNNYWluQnVsbGV0czogMSxcbiAgICAgICAgZm9ybWF0RnJhY3Rpb25DdXJyZW50OiBlID0+IGUsXG4gICAgICAgIGZvcm1hdEZyYWN0aW9uVG90YWw6IGUgPT4gZSxcbiAgICAgICAgYnVsbGV0Q2xhc3M6IGAke3J9LWJ1bGxldGAsXG4gICAgICAgIGJ1bGxldEFjdGl2ZUNsYXNzOiBgJHtyfS1idWxsZXQtYWN0aXZlYCxcbiAgICAgICAgbW9kaWZpZXJDbGFzczogYCR7cn0tYCxcbiAgICAgICAgY3VycmVudENsYXNzOiBgJHtyfS1jdXJyZW50YCxcbiAgICAgICAgdG90YWxDbGFzczogYCR7cn0tdG90YWxgLFxuICAgICAgICBoaWRkZW5DbGFzczogYCR7cn0taGlkZGVuYCxcbiAgICAgICAgcHJvZ3Jlc3NiYXJGaWxsQ2xhc3M6IGAke3J9LXByb2dyZXNzYmFyLWZpbGxgLFxuICAgICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3M6IGAke3J9LXByb2dyZXNzYmFyLW9wcG9zaXRlYCxcbiAgICAgICAgY2xpY2thYmxlQ2xhc3M6IGAke3J9LWNsaWNrYWJsZWAsXG4gICAgICAgIGxvY2tDbGFzczogYCR7cn0tbG9ja2AsXG4gICAgICAgIGhvcml6b250YWxDbGFzczogYCR7cn0taG9yaXpvbnRhbGAsXG4gICAgICAgIHZlcnRpY2FsQ2xhc3M6IGAke3J9LXZlcnRpY2FsYCxcbiAgICAgICAgcGFnaW5hdGlvbkRpc2FibGVkQ2xhc3M6IGAke3J9LWRpc2FibGVkYFxuICAgICAgfVxuICAgIH0pLCB0LnBhZ2luYXRpb24gPSB7ZWw6IG51bGwsIGJ1bGxldHM6IFtdfTtcbiAgICBsZXQgbCA9IDA7XG5cbiAgICBmdW5jdGlvbiBvKCkge1xuICAgICAgcmV0dXJuICF0LnBhcmFtcy5wYWdpbmF0aW9uLmVsIHx8ICF0LnBhZ2luYXRpb24uZWwgfHwgQXJyYXkuaXNBcnJheSh0LnBhZ2luYXRpb24uZWwpICYmIDAgPT09IHQucGFnaW5hdGlvbi5lbC5sZW5ndGhcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkKGUsIHMpIHtcbiAgICAgIGNvbnN0IHtidWxsZXRBY3RpdmVDbGFzczogYX0gPSB0LnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgICAgZSAmJiAoZSA9IGVbKFwicHJldlwiID09PSBzID8gXCJwcmV2aW91c1wiIDogXCJuZXh0XCIpICsgXCJFbGVtZW50U2libGluZ1wiXSkgJiYgKGUuY2xhc3NMaXN0LmFkZChgJHthfS0ke3N9YCksIChlID0gZVsoXCJwcmV2XCIgPT09IHMgPyBcInByZXZpb3VzXCIgOiBcIm5leHRcIikgKyBcIkVsZW1lbnRTaWJsaW5nXCJdKSAmJiBlLmNsYXNzTGlzdC5hZGQoYCR7YX0tJHtzfS0ke3N9YCkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYyhlKSB7XG4gICAgICBjb25zdCBzID0gZS50YXJnZXQuY2xvc2VzdChuZSh0LnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSk7XG4gICAgICBpZiAoIXMpIHJldHVybjtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IGEgPSB5KHMpICogdC5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICBpZiAodC5wYXJhbXMubG9vcCkge1xuICAgICAgICBpZiAodC5yZWFsSW5kZXggPT09IGEpIHJldHVybjtcbiAgICAgICAgY29uc3QgZSA9IChpID0gdC5yZWFsSW5kZXgsIHIgPSBhLCBuID0gdC5zbGlkZXMubGVuZ3RoLCAociAlPSBuKSA9PSAxICsgKGkgJT0gbikgPyBcIm5leHRcIiA6IHIgPT09IGkgLSAxID8gXCJwcmV2aW91c1wiIDogdm9pZCAwKTtcbiAgICAgICAgXCJuZXh0XCIgPT09IGUgPyB0LnNsaWRlTmV4dCgpIDogXCJwcmV2aW91c1wiID09PSBlID8gdC5zbGlkZVByZXYoKSA6IHQuc2xpZGVUb0xvb3AoYSlcbiAgICAgIH0gZWxzZSB0LnNsaWRlVG8oYSk7XG4gICAgICB2YXIgaSwgciwgblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHAoKSB7XG4gICAgICBjb25zdCBlID0gdC5ydGwsIHMgPSB0LnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgICAgaWYgKG8oKSkgcmV0dXJuO1xuICAgICAgbGV0IGEsIHIsIGMgPSB0LnBhZ2luYXRpb24uZWw7XG4gICAgICBjID0gVChjKTtcbiAgICAgIGNvbnN0IHAgPSB0LnZpcnR1YWwgJiYgdC5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gdC52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiB0LnNsaWRlcy5sZW5ndGgsXG4gICAgICAgIHUgPSB0LnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKHAgLyB0LnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiB0LnNuYXBHcmlkLmxlbmd0aDtcbiAgICAgIGlmICh0LnBhcmFtcy5sb29wID8gKHIgPSB0LnByZXZpb3VzUmVhbEluZGV4IHx8IDAsIGEgPSB0LnBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEgPyBNYXRoLmZsb29yKHQucmVhbEluZGV4IC8gdC5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogdC5yZWFsSW5kZXgpIDogdm9pZCAwICE9PSB0LnNuYXBJbmRleCA/IChhID0gdC5zbmFwSW5kZXgsIHIgPSB0LnByZXZpb3VzU25hcEluZGV4KSA6IChyID0gdC5wcmV2aW91c0luZGV4IHx8IDAsIGEgPSB0LmFjdGl2ZUluZGV4IHx8IDApLCBcImJ1bGxldHNcIiA9PT0gcy50eXBlICYmIHQucGFnaW5hdGlvbi5idWxsZXRzICYmIHQucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgaSA9IHQucGFnaW5hdGlvbi5idWxsZXRzO1xuICAgICAgICBsZXQgbywgcCwgdTtcbiAgICAgICAgaWYgKHMuZHluYW1pY0J1bGxldHMgJiYgKG4gPSBTKGlbMF0sIHQuaXNIb3Jpem9udGFsKCkgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiLCAhMCksIGMuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgZS5zdHlsZVt0LmlzSG9yaXpvbnRhbCgpID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gPSBuICogKHMuZHluYW1pY01haW5CdWxsZXRzICsgNCkgKyBcInB4XCJcbiAgICAgICAgfSkpLCBzLmR5bmFtaWNNYWluQnVsbGV0cyA+IDEgJiYgdm9pZCAwICE9PSByICYmIChsICs9IGEgLSAociB8fCAwKSwgbCA+IHMuZHluYW1pY01haW5CdWxsZXRzIC0gMSA/IGwgPSBzLmR5bmFtaWNNYWluQnVsbGV0cyAtIDEgOiBsIDwgMCAmJiAobCA9IDApKSwgbyA9IE1hdGgubWF4KGEgLSBsLCAwKSwgcCA9IG8gKyAoTWF0aC5taW4oaS5sZW5ndGgsIHMuZHluYW1pY01haW5CdWxsZXRzKSAtIDEpLCB1ID0gKHAgKyBvKSAvIDIpLCBpLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgIGNvbnN0IHQgPSBbLi4uW1wiXCIsIFwiLW5leHRcIiwgXCItbmV4dC1uZXh0XCIsIFwiLXByZXZcIiwgXCItcHJldi1wcmV2XCIsIFwiLW1haW5cIl0ubWFwKChlID0+IGAke3MuYnVsbGV0QWN0aXZlQ2xhc3N9JHtlfWApKV0ubWFwKChlID0+IFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgJiYgZS5pbmNsdWRlcyhcIiBcIikgPyBlLnNwbGl0KFwiIFwiKSA6IGUpKS5mbGF0KCk7XG4gICAgICAgICAgZS5jbGFzc0xpc3QucmVtb3ZlKC4uLnQpXG4gICAgICAgIH0pKSwgYy5sZW5ndGggPiAxKSBpLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgIGNvbnN0IGkgPSB5KGUpO1xuICAgICAgICAgIGkgPT09IGEgPyBlLmNsYXNzTGlzdC5hZGQoLi4ucy5idWxsZXRBY3RpdmVDbGFzcy5zcGxpdChcIiBcIikpIDogdC5pc0VsZW1lbnQgJiYgZS5zZXRBdHRyaWJ1dGUoXCJwYXJ0XCIsIFwiYnVsbGV0XCIpLCBzLmR5bmFtaWNCdWxsZXRzICYmIChpID49IG8gJiYgaSA8PSBwICYmIGUuY2xhc3NMaXN0LmFkZCguLi5gJHtzLmJ1bGxldEFjdGl2ZUNsYXNzfS1tYWluYC5zcGxpdChcIiBcIikpLCBpID09PSBvICYmIGQoZSwgXCJwcmV2XCIpLCBpID09PSBwICYmIGQoZSwgXCJuZXh0XCIpKVxuICAgICAgICB9KSk7IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGUgPSBpW2FdO1xuICAgICAgICAgIGlmIChlICYmIGUuY2xhc3NMaXN0LmFkZCguLi5zLmJ1bGxldEFjdGl2ZUNsYXNzLnNwbGl0KFwiIFwiKSksIHQuaXNFbGVtZW50ICYmIGkuZm9yRWFjaCgoKGUsIHQpID0+IHtcbiAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKFwicGFydFwiLCB0ID09PSBhID8gXCJidWxsZXQtYWN0aXZlXCIgOiBcImJ1bGxldFwiKVxuICAgICAgICAgIH0pKSwgcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgY29uc3QgZSA9IGlbb10sIHQgPSBpW3BdO1xuICAgICAgICAgICAgZm9yIChsZXQgZSA9IG87IGUgPD0gcDsgZSArPSAxKSBpW2VdICYmIGlbZV0uY2xhc3NMaXN0LmFkZCguLi5gJHtzLmJ1bGxldEFjdGl2ZUNsYXNzfS1tYWluYC5zcGxpdChcIiBcIikpO1xuICAgICAgICAgICAgZChlLCBcInByZXZcIiksIGQodCwgXCJuZXh0XCIpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgY29uc3QgYSA9IE1hdGgubWluKGkubGVuZ3RoLCBzLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpLCByID0gKG4gKiBhIC0gbikgLyAyIC0gdSAqIG4sIGwgPSBlID8gXCJyaWdodFwiIDogXCJsZWZ0XCI7XG4gICAgICAgICAgaS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICAgIGUuc3R5bGVbdC5pc0hvcml6b250YWwoKSA/IGwgOiBcInRvcFwiXSA9IGAke3J9cHhgXG4gICAgICAgICAgfSkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGMuZm9yRWFjaCgoKGUsIHIpID0+IHtcbiAgICAgICAgaWYgKFwiZnJhY3Rpb25cIiA9PT0gcy50eXBlICYmIChlLnF1ZXJ5U2VsZWN0b3JBbGwobmUocy5jdXJyZW50Q2xhc3MpKS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICBlLnRleHRDb250ZW50ID0gcy5mb3JtYXRGcmFjdGlvbkN1cnJlbnQoYSArIDEpXG4gICAgICAgIH0pKSwgZS5xdWVyeVNlbGVjdG9yQWxsKG5lKHMudG90YWxDbGFzcykpLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgIGUudGV4dENvbnRlbnQgPSBzLmZvcm1hdEZyYWN0aW9uVG90YWwodSlcbiAgICAgICAgfSkpKSwgXCJwcm9ncmVzc2JhclwiID09PSBzLnR5cGUpIHtcbiAgICAgICAgICBsZXQgaTtcbiAgICAgICAgICBpID0gcy5wcm9ncmVzc2Jhck9wcG9zaXRlID8gdC5pc0hvcml6b250YWwoKSA/IFwidmVydGljYWxcIiA6IFwiaG9yaXpvbnRhbFwiIDogdC5pc0hvcml6b250YWwoKSA/IFwiaG9yaXpvbnRhbFwiIDogXCJ2ZXJ0aWNhbFwiO1xuICAgICAgICAgIGNvbnN0IHIgPSAoYSArIDEpIC8gdTtcbiAgICAgICAgICBsZXQgbiA9IDEsIGwgPSAxO1xuICAgICAgICAgIFwiaG9yaXpvbnRhbFwiID09PSBpID8gbiA9IHIgOiBsID0gciwgZS5xdWVyeVNlbGVjdG9yQWxsKG5lKHMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpKS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICAgIGUuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoJHtufSkgc2NhbGVZKCR7bH0pYCwgZS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHt0LnBhcmFtcy5zcGVlZH1tc2BcbiAgICAgICAgICB9KSlcbiAgICAgICAgfVxuICAgICAgICBcImN1c3RvbVwiID09PSBzLnR5cGUgJiYgcy5yZW5kZXJDdXN0b20gPyAoZS5pbm5lckhUTUwgPSBzLnJlbmRlckN1c3RvbSh0LCBhICsgMSwgdSksIDAgPT09IHIgJiYgaShcInBhZ2luYXRpb25SZW5kZXJcIiwgZSkpIDogKDAgPT09IHIgJiYgaShcInBhZ2luYXRpb25SZW5kZXJcIiwgZSksIGkoXCJwYWdpbmF0aW9uVXBkYXRlXCIsIGUpKSwgdC5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiB0LmVuYWJsZWQgJiYgZS5jbGFzc0xpc3RbdC5pc0xvY2tlZCA/IFwiYWRkXCIgOiBcInJlbW92ZVwiXShzLmxvY2tDbGFzcylcbiAgICAgIH0pKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHUoKSB7XG4gICAgICBjb25zdCBlID0gdC5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICAgIGlmIChvKCkpIHJldHVybjtcbiAgICAgIGNvbnN0IHMgPSB0LnZpcnR1YWwgJiYgdC5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gdC52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiB0LmdyaWQgJiYgdC5wYXJhbXMuZ3JpZC5yb3dzID4gMSA/IHQuc2xpZGVzLmxlbmd0aCAvIE1hdGguY2VpbCh0LnBhcmFtcy5ncmlkLnJvd3MpIDogdC5zbGlkZXMubGVuZ3RoO1xuICAgICAgbGV0IGEgPSB0LnBhZ2luYXRpb24uZWw7XG4gICAgICBhID0gVChhKTtcbiAgICAgIGxldCByID0gXCJcIjtcbiAgICAgIGlmIChcImJ1bGxldHNcIiA9PT0gZS50eXBlKSB7XG4gICAgICAgIGxldCBhID0gdC5wYXJhbXMubG9vcCA/IE1hdGguY2VpbChzIC8gdC5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogdC5zbmFwR3JpZC5sZW5ndGg7XG4gICAgICAgIHQucGFyYW1zLmZyZWVNb2RlICYmIHQucGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgYSA+IHMgJiYgKGEgPSBzKTtcbiAgICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCBhOyBzICs9IDEpIGUucmVuZGVyQnVsbGV0ID8gciArPSBlLnJlbmRlckJ1bGxldC5jYWxsKHQsIHMsIGUuYnVsbGV0Q2xhc3MpIDogciArPSBgPCR7ZS5idWxsZXRFbGVtZW50fSAke3QuaXNFbGVtZW50ID8gJ3BhcnQ9XCJidWxsZXRcIicgOiBcIlwifSBjbGFzcz1cIiR7ZS5idWxsZXRDbGFzc31cIj48LyR7ZS5idWxsZXRFbGVtZW50fT5gXG4gICAgICB9XG4gICAgICBcImZyYWN0aW9uXCIgPT09IGUudHlwZSAmJiAociA9IGUucmVuZGVyRnJhY3Rpb24gPyBlLnJlbmRlckZyYWN0aW9uLmNhbGwodCwgZS5jdXJyZW50Q2xhc3MsIGUudG90YWxDbGFzcykgOiBgPHNwYW4gY2xhc3M9XCIke2UuY3VycmVudENsYXNzfVwiPjwvc3Bhbj4gLyA8c3BhbiBjbGFzcz1cIiR7ZS50b3RhbENsYXNzfVwiPjwvc3Bhbj5gKSwgXCJwcm9ncmVzc2JhclwiID09PSBlLnR5cGUgJiYgKHIgPSBlLnJlbmRlclByb2dyZXNzYmFyID8gZS5yZW5kZXJQcm9ncmVzc2Jhci5jYWxsKHQsIGUucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpIDogYDxzcGFuIGNsYXNzPVwiJHtlLnByb2dyZXNzYmFyRmlsbENsYXNzfVwiPjwvc3Bhbj5gKSwgdC5wYWdpbmF0aW9uLmJ1bGxldHMgPSBbXSwgYS5mb3JFYWNoKChzID0+IHtcbiAgICAgICAgXCJjdXN0b21cIiAhPT0gZS50eXBlICYmIChzLmlubmVySFRNTCA9IHIgfHwgXCJcIiksIFwiYnVsbGV0c1wiID09PSBlLnR5cGUgJiYgdC5wYWdpbmF0aW9uLmJ1bGxldHMucHVzaCguLi5zLnF1ZXJ5U2VsZWN0b3JBbGwobmUoZS5idWxsZXRDbGFzcykpKVxuICAgICAgfSkpLCBcImN1c3RvbVwiICE9PSBlLnR5cGUgJiYgaShcInBhZ2luYXRpb25SZW5kZXJcIiwgYVswXSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtKCkge1xuICAgICAgdC5wYXJhbXMucGFnaW5hdGlvbiA9IHJlKHQsIHQub3JpZ2luYWxQYXJhbXMucGFnaW5hdGlvbiwgdC5wYXJhbXMucGFnaW5hdGlvbiwge2VsOiBcInN3aXBlci1wYWdpbmF0aW9uXCJ9KTtcbiAgICAgIGNvbnN0IGUgPSB0LnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgICAgaWYgKCFlLmVsKSByZXR1cm47XG4gICAgICBsZXQgcztcbiAgICAgIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUuZWwgJiYgdC5pc0VsZW1lbnQgJiYgKHMgPSB0LmVsLnF1ZXJ5U2VsZWN0b3IoZS5lbCkpLCBzIHx8IFwic3RyaW5nXCIgIT0gdHlwZW9mIGUuZWwgfHwgKHMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlLmVsKV0pLCBzIHx8IChzID0gZS5lbCksIHMgJiYgMCAhPT0gcy5sZW5ndGggJiYgKHQucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUuZWwgJiYgQXJyYXkuaXNBcnJheShzKSAmJiBzLmxlbmd0aCA+IDEgJiYgKHMgPSBbLi4udC5lbC5xdWVyeVNlbGVjdG9yQWxsKGUuZWwpXSwgcy5sZW5ndGggPiAxICYmIChzID0gcy5maWx0ZXIoKGUgPT4gRShlLCBcIi5zd2lwZXJcIilbMF0gPT09IHQuZWwpKVswXSkpLCBBcnJheS5pc0FycmF5KHMpICYmIDEgPT09IHMubGVuZ3RoICYmIChzID0gc1swXSksIE9iamVjdC5hc3NpZ24odC5wYWdpbmF0aW9uLCB7ZWw6IHN9KSwgcyA9IFQocyksIHMuZm9yRWFjaCgocyA9PiB7XG4gICAgICAgIFwiYnVsbGV0c1wiID09PSBlLnR5cGUgJiYgZS5jbGlja2FibGUgJiYgcy5jbGFzc0xpc3QuYWRkKC4uLihlLmNsaWNrYWJsZUNsYXNzIHx8IFwiXCIpLnNwbGl0KFwiIFwiKSksIHMuY2xhc3NMaXN0LmFkZChlLm1vZGlmaWVyQ2xhc3MgKyBlLnR5cGUpLCBzLmNsYXNzTGlzdC5hZGQodC5pc0hvcml6b250YWwoKSA/IGUuaG9yaXpvbnRhbENsYXNzIDogZS52ZXJ0aWNhbENsYXNzKSwgXCJidWxsZXRzXCIgPT09IGUudHlwZSAmJiBlLmR5bmFtaWNCdWxsZXRzICYmIChzLmNsYXNzTGlzdC5hZGQoYCR7ZS5tb2RpZmllckNsYXNzfSR7ZS50eXBlfS1keW5hbWljYCksIGwgPSAwLCBlLmR5bmFtaWNNYWluQnVsbGV0cyA8IDEgJiYgKGUuZHluYW1pY01haW5CdWxsZXRzID0gMSkpLCBcInByb2dyZXNzYmFyXCIgPT09IGUudHlwZSAmJiBlLnByb2dyZXNzYmFyT3Bwb3NpdGUgJiYgcy5jbGFzc0xpc3QuYWRkKGUucHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzKSwgZS5jbGlja2FibGUgJiYgcy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYyksIHQuZW5hYmxlZCB8fCBzLmNsYXNzTGlzdC5hZGQoZS5sb2NrQ2xhc3MpXG4gICAgICB9KSkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaCgpIHtcbiAgICAgIGNvbnN0IGUgPSB0LnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgICAgaWYgKG8oKSkgcmV0dXJuO1xuICAgICAgbGV0IHMgPSB0LnBhZ2luYXRpb24uZWw7XG4gICAgICBzICYmIChzID0gVChzKSwgcy5mb3JFYWNoKChzID0+IHtcbiAgICAgICAgcy5jbGFzc0xpc3QucmVtb3ZlKGUuaGlkZGVuQ2xhc3MpLCBzLmNsYXNzTGlzdC5yZW1vdmUoZS5tb2RpZmllckNsYXNzICsgZS50eXBlKSwgcy5jbGFzc0xpc3QucmVtb3ZlKHQuaXNIb3Jpem9udGFsKCkgPyBlLmhvcml6b250YWxDbGFzcyA6IGUudmVydGljYWxDbGFzcyksIGUuY2xpY2thYmxlICYmIChzLmNsYXNzTGlzdC5yZW1vdmUoLi4uKGUuY2xpY2thYmxlQ2xhc3MgfHwgXCJcIikuc3BsaXQoXCIgXCIpKSwgcy5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYykpXG4gICAgICB9KSkpLCB0LnBhZ2luYXRpb24uYnVsbGV0cyAmJiB0LnBhZ2luYXRpb24uYnVsbGV0cy5mb3JFYWNoKCh0ID0+IHQuY2xhc3NMaXN0LnJlbW92ZSguLi5lLmJ1bGxldEFjdGl2ZUNsYXNzLnNwbGl0KFwiIFwiKSkpKVxuICAgIH1cblxuICAgIGEoXCJjaGFuZ2VEaXJlY3Rpb25cIiwgKCgpID0+IHtcbiAgICAgIGlmICghdC5wYWdpbmF0aW9uIHx8ICF0LnBhZ2luYXRpb24uZWwpIHJldHVybjtcbiAgICAgIGNvbnN0IGUgPSB0LnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgICAgbGV0IHtlbDogc30gPSB0LnBhZ2luYXRpb247XG4gICAgICBzID0gVChzKSwgcy5mb3JFYWNoKChzID0+IHtcbiAgICAgICAgcy5jbGFzc0xpc3QucmVtb3ZlKGUuaG9yaXpvbnRhbENsYXNzLCBlLnZlcnRpY2FsQ2xhc3MpLCBzLmNsYXNzTGlzdC5hZGQodC5pc0hvcml6b250YWwoKSA/IGUuaG9yaXpvbnRhbENsYXNzIDogZS52ZXJ0aWNhbENsYXNzKVxuICAgICAgfSkpXG4gICAgfSkpLCBhKFwiaW5pdFwiLCAoKCkgPT4ge1xuICAgICAgITEgPT09IHQucGFyYW1zLnBhZ2luYXRpb24uZW5hYmxlZCA/IGYoKSA6IChtKCksIHUoKSwgcCgpKVxuICAgIH0pKSwgYShcImFjdGl2ZUluZGV4Q2hhbmdlXCIsICgoKSA9PiB7XG4gICAgICB2b2lkIDAgPT09IHQuc25hcEluZGV4ICYmIHAoKVxuICAgIH0pKSwgYShcInNuYXBJbmRleENoYW5nZVwiLCAoKCkgPT4ge1xuICAgICAgcCgpXG4gICAgfSkpLCBhKFwic25hcEdyaWRMZW5ndGhDaGFuZ2VcIiwgKCgpID0+IHtcbiAgICAgIHUoKSwgcCgpXG4gICAgfSkpLCBhKFwiZGVzdHJveVwiLCAoKCkgPT4ge1xuICAgICAgaCgpXG4gICAgfSkpLCBhKFwiZW5hYmxlIGRpc2FibGVcIiwgKCgpID0+IHtcbiAgICAgIGxldCB7ZWw6IGV9ID0gdC5wYWdpbmF0aW9uO1xuICAgICAgZSAmJiAoZSA9IFQoZSksIGUuZm9yRWFjaCgoZSA9PiBlLmNsYXNzTGlzdFt0LmVuYWJsZWQgPyBcInJlbW92ZVwiIDogXCJhZGRcIl0odC5wYXJhbXMucGFnaW5hdGlvbi5sb2NrQ2xhc3MpKSkpXG4gICAgfSkpLCBhKFwibG9jayB1bmxvY2tcIiwgKCgpID0+IHtcbiAgICAgIHAoKVxuICAgIH0pKSwgYShcImNsaWNrXCIsICgoZSwgcykgPT4ge1xuICAgICAgY29uc3QgYSA9IHMudGFyZ2V0LCByID0gVCh0LnBhZ2luYXRpb24uZWwpO1xuICAgICAgaWYgKHQucGFyYW1zLnBhZ2luYXRpb24uZWwgJiYgdC5wYXJhbXMucGFnaW5hdGlvbi5oaWRlT25DbGljayAmJiByICYmIHIubGVuZ3RoID4gMCAmJiAhYS5jbGFzc0xpc3QuY29udGFpbnModC5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpIHtcbiAgICAgICAgaWYgKHQubmF2aWdhdGlvbiAmJiAodC5uYXZpZ2F0aW9uLm5leHRFbCAmJiBhID09PSB0Lm5hdmlnYXRpb24ubmV4dEVsIHx8IHQubmF2aWdhdGlvbi5wcmV2RWwgJiYgYSA9PT0gdC5uYXZpZ2F0aW9uLnByZXZFbCkpIHJldHVybjtcbiAgICAgICAgY29uc3QgZSA9IHJbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKHQucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICBpKCEwID09PSBlID8gXCJwYWdpbmF0aW9uU2hvd1wiIDogXCJwYWdpbmF0aW9uSGlkZVwiKSwgci5mb3JFYWNoKChlID0+IGUuY2xhc3NMaXN0LnRvZ2dsZSh0LnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKSkpXG4gICAgICB9XG4gICAgfSkpO1xuICAgIGNvbnN0IGYgPSAoKSA9PiB7XG4gICAgICB0LmVsLmNsYXNzTGlzdC5hZGQodC5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcyk7XG4gICAgICBsZXQge2VsOiBlfSA9IHQucGFnaW5hdGlvbjtcbiAgICAgIGUgJiYgKGUgPSBUKGUpLCBlLmZvckVhY2goKGUgPT4gZS5jbGFzc0xpc3QuYWRkKHQucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpKSkpLCBoKClcbiAgICB9O1xuICAgIE9iamVjdC5hc3NpZ24odC5wYWdpbmF0aW9uLCB7XG4gICAgICBlbmFibGU6ICgpID0+IHtcbiAgICAgICAgdC5lbC5jbGFzc0xpc3QucmVtb3ZlKHQucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpO1xuICAgICAgICBsZXQge2VsOiBlfSA9IHQucGFnaW5hdGlvbjtcbiAgICAgICAgZSAmJiAoZSA9IFQoZSksIGUuZm9yRWFjaCgoZSA9PiBlLmNsYXNzTGlzdC5yZW1vdmUodC5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcykpKSksIG0oKSwgdSgpLCBwKClcbiAgICAgIH0sIGRpc2FibGU6IGYsIHJlbmRlcjogdSwgdXBkYXRlOiBwLCBpbml0OiBtLCBkZXN0cm95OiBoXG4gICAgfSlcbiAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICBsZXQge3N3aXBlcjogdCwgZXh0ZW5kUGFyYW1zOiBzLCBvbjogaSwgZW1pdDogcn0gPSBlO1xuICAgIGNvbnN0IG8gPSBhKCk7XG4gICAgbGV0IGQsIGMsIHAsIHUsIG0gPSAhMSwgaCA9IG51bGwsIGYgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gZygpIHtcbiAgICAgIGlmICghdC5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICF0LnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgICAgY29uc3Qge3Njcm9sbGJhcjogZSwgcnRsVHJhbnNsYXRlOiBzfSA9IHQsIHtkcmFnRWw6IGEsIGVsOiBpfSA9IGUsIHIgPSB0LnBhcmFtcy5zY3JvbGxiYXIsXG4gICAgICAgIG4gPSB0LnBhcmFtcy5sb29wID8gdC5wcm9ncmVzc0xvb3AgOiB0LnByb2dyZXNzO1xuICAgICAgbGV0IGwgPSBjLCBvID0gKHAgLSBjKSAqIG47XG4gICAgICBzID8gKG8gPSAtbywgbyA+IDAgPyAobCA9IGMgLSBvLCBvID0gMCkgOiAtbyArIGMgPiBwICYmIChsID0gcCArIG8pKSA6IG8gPCAwID8gKGwgPSBjICsgbywgbyA9IDApIDogbyArIGMgPiBwICYmIChsID0gcCAtIG8pLCB0LmlzSG9yaXpvbnRhbCgpID8gKGEuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7b31weCwgMCwgMClgLCBhLnN0eWxlLndpZHRoID0gYCR7bH1weGApIDogKGEuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDBweCwgJHtvfXB4LCAwKWAsIGEuc3R5bGUuaGVpZ2h0ID0gYCR7bH1weGApLCByLmhpZGUgJiYgKGNsZWFyVGltZW91dChoKSwgaS5zdHlsZS5vcGFjaXR5ID0gMSwgaCA9IHNldFRpbWVvdXQoKCgpID0+IHtcbiAgICAgICAgaS5zdHlsZS5vcGFjaXR5ID0gMCwgaS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIjQwMG1zXCJcbiAgICAgIH0pLCAxZTMpKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGIoKSB7XG4gICAgICBpZiAoIXQucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhdC5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICAgIGNvbnN0IHtzY3JvbGxiYXI6IGV9ID0gdCwge2RyYWdFbDogcywgZWw6IGF9ID0gZTtcbiAgICAgIHMuc3R5bGUud2lkdGggPSBcIlwiLCBzLnN0eWxlLmhlaWdodCA9IFwiXCIsIHAgPSB0LmlzSG9yaXpvbnRhbCgpID8gYS5vZmZzZXRXaWR0aCA6IGEub2Zmc2V0SGVpZ2h0LCB1ID0gdC5zaXplIC8gKHQudmlydHVhbFNpemUgKyB0LnBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgLSAodC5wYXJhbXMuY2VudGVyZWRTbGlkZXMgPyB0LnNuYXBHcmlkWzBdIDogMCkpLCBjID0gXCJhdXRvXCIgPT09IHQucGFyYW1zLnNjcm9sbGJhci5kcmFnU2l6ZSA/IHAgKiB1IDogcGFyc2VJbnQodC5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdTaXplLCAxMCksIHQuaXNIb3Jpem9udGFsKCkgPyBzLnN0eWxlLndpZHRoID0gYCR7Y31weGAgOiBzLnN0eWxlLmhlaWdodCA9IGAke2N9cHhgLCBhLnN0eWxlLmRpc3BsYXkgPSB1ID49IDEgPyBcIm5vbmVcIiA6IFwiXCIsIHQucGFyYW1zLnNjcm9sbGJhci5oaWRlICYmIChhLnN0eWxlLm9wYWNpdHkgPSAwKSwgdC5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiB0LmVuYWJsZWQgJiYgZS5lbC5jbGFzc0xpc3RbdC5pc0xvY2tlZCA/IFwiYWRkXCIgOiBcInJlbW92ZVwiXSh0LnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHkoZSkge1xuICAgICAgcmV0dXJuIHQuaXNIb3Jpem9udGFsKCkgPyBlLmNsaWVudFggOiBlLmNsaWVudFlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBFKGUpIHtcbiAgICAgIGNvbnN0IHtzY3JvbGxiYXI6IHMsIHJ0bFRyYW5zbGF0ZTogYX0gPSB0LCB7ZWw6IGl9ID0gcztcbiAgICAgIGxldCByO1xuICAgICAgciA9ICh5KGUpIC0gdyhpKVt0LmlzSG9yaXpvbnRhbCgpID8gXCJsZWZ0XCIgOiBcInRvcFwiXSAtIChudWxsICE9PSBkID8gZCA6IGMgLyAyKSkgLyAocCAtIGMpLCByID0gTWF0aC5tYXgoTWF0aC5taW4ociwgMSksIDApLCBhICYmIChyID0gMSAtIHIpO1xuICAgICAgY29uc3QgbiA9IHQubWluVHJhbnNsYXRlKCkgKyAodC5tYXhUcmFuc2xhdGUoKSAtIHQubWluVHJhbnNsYXRlKCkpICogcjtcbiAgICAgIHQudXBkYXRlUHJvZ3Jlc3MobiksIHQuc2V0VHJhbnNsYXRlKG4pLCB0LnVwZGF0ZUFjdGl2ZUluZGV4KCksIHQudXBkYXRlU2xpZGVzQ2xhc3NlcygpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24geChlKSB7XG4gICAgICBjb25zdCBzID0gdC5wYXJhbXMuc2Nyb2xsYmFyLCB7c2Nyb2xsYmFyOiBhLCB3cmFwcGVyRWw6IGl9ID0gdCwge2VsOiBuLCBkcmFnRWw6IGx9ID0gYTtcbiAgICAgIG0gPSAhMCwgZCA9IGUudGFyZ2V0ID09PSBsID8geShlKSAtIGUudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3QuaXNIb3Jpem9udGFsKCkgPyBcImxlZnRcIiA6IFwidG9wXCJdIDogbnVsbCwgZS5wcmV2ZW50RGVmYXVsdCgpLCBlLnN0b3BQcm9wYWdhdGlvbigpLCBpLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiMTAwbXNcIiwgbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIjEwMG1zXCIsIEUoZSksIGNsZWFyVGltZW91dChmKSwgbi5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIjBtc1wiLCBzLmhpZGUgJiYgKG4uc3R5bGUub3BhY2l0eSA9IDEpLCB0LnBhcmFtcy5jc3NNb2RlICYmICh0LndyYXBwZXJFbC5zdHlsZVtcInNjcm9sbC1zbmFwLXR5cGVcIl0gPSBcIm5vbmVcIiksIHIoXCJzY3JvbGxiYXJEcmFnU3RhcnRcIiwgZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBTKGUpIHtcbiAgICAgIGNvbnN0IHtzY3JvbGxiYXI6IHMsIHdyYXBwZXJFbDogYX0gPSB0LCB7ZWw6IGksIGRyYWdFbDogbn0gPSBzO1xuICAgICAgbSAmJiAoZS5wcmV2ZW50RGVmYXVsdCAmJiBlLmNhbmNlbGFibGUgPyBlLnByZXZlbnREZWZhdWx0KCkgOiBlLnJldHVyblZhbHVlID0gITEsIEUoZSksIGEuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gXCIwbXNcIiwgaS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIjBtc1wiLCBuLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiMG1zXCIsIHIoXCJzY3JvbGxiYXJEcmFnTW92ZVwiLCBlKSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBNKGUpIHtcbiAgICAgIGNvbnN0IHMgPSB0LnBhcmFtcy5zY3JvbGxiYXIsIHtzY3JvbGxiYXI6IGEsIHdyYXBwZXJFbDogaX0gPSB0LCB7ZWw6IG59ID0gYTtcbiAgICAgIG0gJiYgKG0gPSAhMSwgdC5wYXJhbXMuY3NzTW9kZSAmJiAodC53cmFwcGVyRWwuc3R5bGVbXCJzY3JvbGwtc25hcC10eXBlXCJdID0gXCJcIiwgaS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIlwiKSwgcy5oaWRlICYmIChjbGVhclRpbWVvdXQoZiksIGYgPSBsKCgoKSA9PiB7XG4gICAgICAgIG4uc3R5bGUub3BhY2l0eSA9IDAsIG4uc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gXCI0MDBtc1wiXG4gICAgICB9KSwgMWUzKSksIHIoXCJzY3JvbGxiYXJEcmFnRW5kXCIsIGUpLCBzLnNuYXBPblJlbGVhc2UgJiYgdC5zbGlkZVRvQ2xvc2VzdCgpKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIEMoZSkge1xuICAgICAgY29uc3Qge3Njcm9sbGJhcjogcywgcGFyYW1zOiBhfSA9IHQsIGkgPSBzLmVsO1xuICAgICAgaWYgKCFpKSByZXR1cm47XG4gICAgICBjb25zdCByID0gaSwgbiA9ICEhYS5wYXNzaXZlTGlzdGVuZXJzICYmIHtwYXNzaXZlOiAhMSwgY2FwdHVyZTogITF9LFxuICAgICAgICBsID0gISFhLnBhc3NpdmVMaXN0ZW5lcnMgJiYge3Bhc3NpdmU6ICEwLCBjYXB0dXJlOiAhMX07XG4gICAgICBpZiAoIXIpIHJldHVybjtcbiAgICAgIGNvbnN0IGQgPSBcIm9uXCIgPT09IGUgPyBcImFkZEV2ZW50TGlzdGVuZXJcIiA6IFwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiO1xuICAgICAgcltkXShcInBvaW50ZXJkb3duXCIsIHgsIG4pLCBvW2RdKFwicG9pbnRlcm1vdmVcIiwgUywgbiksIG9bZF0oXCJwb2ludGVydXBcIiwgTSwgbClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBQKCkge1xuICAgICAgY29uc3Qge3Njcm9sbGJhcjogZSwgZWw6IHN9ID0gdDtcbiAgICAgIHQucGFyYW1zLnNjcm9sbGJhciA9IHJlKHQsIHQub3JpZ2luYWxQYXJhbXMuc2Nyb2xsYmFyLCB0LnBhcmFtcy5zY3JvbGxiYXIsIHtlbDogXCJzd2lwZXItc2Nyb2xsYmFyXCJ9KTtcbiAgICAgIGNvbnN0IGEgPSB0LnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgICBpZiAoIWEuZWwpIHJldHVybjtcbiAgICAgIGxldCBpLCByO1xuICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGEuZWwgJiYgdC5pc0VsZW1lbnQgJiYgKGkgPSB0LmVsLnF1ZXJ5U2VsZWN0b3IoYS5lbCkpLCBpIHx8IFwic3RyaW5nXCIgIT0gdHlwZW9mIGEuZWwpIGkgfHwgKGkgPSBhLmVsKTsgZWxzZSBpZiAoaSA9IG8ucXVlcnlTZWxlY3RvckFsbChhLmVsKSwgIWkubGVuZ3RoKSByZXR1cm47XG4gICAgICB0LnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBhLmVsICYmIGkubGVuZ3RoID4gMSAmJiAxID09PSBzLnF1ZXJ5U2VsZWN0b3JBbGwoYS5lbCkubGVuZ3RoICYmIChpID0gcy5xdWVyeVNlbGVjdG9yKGEuZWwpKSwgaS5sZW5ndGggPiAwICYmIChpID0gaVswXSksIGkuY2xhc3NMaXN0LmFkZCh0LmlzSG9yaXpvbnRhbCgpID8gYS5ob3Jpem9udGFsQ2xhc3MgOiBhLnZlcnRpY2FsQ2xhc3MpLCBpICYmIChyID0gaS5xdWVyeVNlbGVjdG9yKG5lKHQucGFyYW1zLnNjcm9sbGJhci5kcmFnQ2xhc3MpKSwgciB8fCAociA9IHYoXCJkaXZcIiwgdC5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdDbGFzcyksIGkuYXBwZW5kKHIpKSksIE9iamVjdC5hc3NpZ24oZSwge1xuICAgICAgICBlbDogaSxcbiAgICAgICAgZHJhZ0VsOiByXG4gICAgICB9KSwgYS5kcmFnZ2FibGUgJiYgdC5wYXJhbXMuc2Nyb2xsYmFyLmVsICYmIHQuc2Nyb2xsYmFyLmVsICYmIEMoXCJvblwiKSwgaSAmJiBpLmNsYXNzTGlzdFt0LmVuYWJsZWQgPyBcInJlbW92ZVwiIDogXCJhZGRcIl0oLi4ubih0LnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBMKCkge1xuICAgICAgY29uc3QgZSA9IHQucGFyYW1zLnNjcm9sbGJhciwgcyA9IHQuc2Nyb2xsYmFyLmVsO1xuICAgICAgcyAmJiBzLmNsYXNzTGlzdC5yZW1vdmUoLi4ubih0LmlzSG9yaXpvbnRhbCgpID8gZS5ob3Jpem9udGFsQ2xhc3MgOiBlLnZlcnRpY2FsQ2xhc3MpKSwgdC5wYXJhbXMuc2Nyb2xsYmFyLmVsICYmIHQuc2Nyb2xsYmFyLmVsICYmIEMoXCJvZmZcIilcbiAgICB9XG5cbiAgICBzKHtcbiAgICAgIHNjcm9sbGJhcjoge1xuICAgICAgICBlbDogbnVsbCxcbiAgICAgICAgZHJhZ1NpemU6IFwiYXV0b1wiLFxuICAgICAgICBoaWRlOiAhMSxcbiAgICAgICAgZHJhZ2dhYmxlOiAhMSxcbiAgICAgICAgc25hcE9uUmVsZWFzZTogITAsXG4gICAgICAgIGxvY2tDbGFzczogXCJzd2lwZXItc2Nyb2xsYmFyLWxvY2tcIixcbiAgICAgICAgZHJhZ0NsYXNzOiBcInN3aXBlci1zY3JvbGxiYXItZHJhZ1wiLFxuICAgICAgICBzY3JvbGxiYXJEaXNhYmxlZENsYXNzOiBcInN3aXBlci1zY3JvbGxiYXItZGlzYWJsZWRcIixcbiAgICAgICAgaG9yaXpvbnRhbENsYXNzOiBcInN3aXBlci1zY3JvbGxiYXItaG9yaXpvbnRhbFwiLFxuICAgICAgICB2ZXJ0aWNhbENsYXNzOiBcInN3aXBlci1zY3JvbGxiYXItdmVydGljYWxcIlxuICAgICAgfVxuICAgIH0pLCB0LnNjcm9sbGJhciA9IHtlbDogbnVsbCwgZHJhZ0VsOiBudWxsfSwgaShcImNoYW5nZURpcmVjdGlvblwiLCAoKCkgPT4ge1xuICAgICAgaWYgKCF0LnNjcm9sbGJhciB8fCAhdC5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICAgIGNvbnN0IGUgPSB0LnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgICBsZXQge2VsOiBzfSA9IHQuc2Nyb2xsYmFyO1xuICAgICAgcyA9IFQocyksIHMuZm9yRWFjaCgocyA9PiB7XG4gICAgICAgIHMuY2xhc3NMaXN0LnJlbW92ZShlLmhvcml6b250YWxDbGFzcywgZS52ZXJ0aWNhbENsYXNzKSwgcy5jbGFzc0xpc3QuYWRkKHQuaXNIb3Jpem9udGFsKCkgPyBlLmhvcml6b250YWxDbGFzcyA6IGUudmVydGljYWxDbGFzcylcbiAgICAgIH0pKVxuICAgIH0pKSwgaShcImluaXRcIiwgKCgpID0+IHtcbiAgICAgICExID09PSB0LnBhcmFtcy5zY3JvbGxiYXIuZW5hYmxlZCA/IEkoKSA6IChQKCksIGIoKSwgZygpKVxuICAgIH0pKSwgaShcInVwZGF0ZSByZXNpemUgb2JzZXJ2ZXJVcGRhdGUgbG9jayB1bmxvY2sgY2hhbmdlRGlyZWN0aW9uXCIsICgoKSA9PiB7XG4gICAgICBiKClcbiAgICB9KSksIGkoXCJzZXRUcmFuc2xhdGVcIiwgKCgpID0+IHtcbiAgICAgIGcoKVxuICAgIH0pKSwgaShcInNldFRyYW5zaXRpb25cIiwgKChlLCBzKSA9PiB7XG4gICAgICAhZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdC5wYXJhbXMuc2Nyb2xsYmFyLmVsICYmIHQuc2Nyb2xsYmFyLmVsICYmICh0LnNjcm9sbGJhci5kcmFnRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZX1tc2ApXG4gICAgICB9KHMpXG4gICAgfSkpLCBpKFwiZW5hYmxlIGRpc2FibGVcIiwgKCgpID0+IHtcbiAgICAgIGNvbnN0IHtlbDogZX0gPSB0LnNjcm9sbGJhcjtcbiAgICAgIGUgJiYgZS5jbGFzc0xpc3RbdC5lbmFibGVkID8gXCJyZW1vdmVcIiA6IFwiYWRkXCJdKC4uLm4odC5wYXJhbXMuc2Nyb2xsYmFyLmxvY2tDbGFzcykpXG4gICAgfSkpLCBpKFwiZGVzdHJveVwiLCAoKCkgPT4ge1xuICAgICAgTCgpXG4gICAgfSkpO1xuICAgIGNvbnN0IEkgPSAoKSA9PiB7XG4gICAgICB0LmVsLmNsYXNzTGlzdC5hZGQoLi4ubih0LnBhcmFtcy5zY3JvbGxiYXIuc2Nyb2xsYmFyRGlzYWJsZWRDbGFzcykpLCB0LnNjcm9sbGJhci5lbCAmJiB0LnNjcm9sbGJhci5lbC5jbGFzc0xpc3QuYWRkKC4uLm4odC5wYXJhbXMuc2Nyb2xsYmFyLnNjcm9sbGJhckRpc2FibGVkQ2xhc3MpKSwgTCgpXG4gICAgfTtcbiAgICBPYmplY3QuYXNzaWduKHQuc2Nyb2xsYmFyLCB7XG4gICAgICBlbmFibGU6ICgpID0+IHtcbiAgICAgICAgdC5lbC5jbGFzc0xpc3QucmVtb3ZlKC4uLm4odC5wYXJhbXMuc2Nyb2xsYmFyLnNjcm9sbGJhckRpc2FibGVkQ2xhc3MpKSwgdC5zY3JvbGxiYXIuZWwgJiYgdC5zY3JvbGxiYXIuZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5uKHQucGFyYW1zLnNjcm9sbGJhci5zY3JvbGxiYXJEaXNhYmxlZENsYXNzKSksIFAoKSwgYigpLCBnKClcbiAgICAgIH0sIGRpc2FibGU6IEksIHVwZGF0ZVNpemU6IGIsIHNldFRyYW5zbGF0ZTogZywgaW5pdDogUCwgZGVzdHJveTogTFxuICAgIH0pXG4gIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgbGV0IHtzd2lwZXI6IHQsIGV4dGVuZFBhcmFtczogcywgb246IGF9ID0gZTtcbiAgICBzKHtwYXJhbGxheDoge2VuYWJsZWQ6ICExfX0pO1xuICAgIGNvbnN0IGkgPSBcIltkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV1cIixcbiAgICAgIHIgPSAoZSwgcykgPT4ge1xuICAgICAgICBjb25zdCB7cnRsOiBhfSA9IHQsIGkgPSBhID8gLTEgOiAxLCByID0gZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1wYXJhbGxheFwiKSB8fCBcIjBcIjtcbiAgICAgICAgbGV0IG4gPSBlLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXBhcmFsbGF4LXhcIiksIGwgPSBlLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXBhcmFsbGF4LXlcIik7XG4gICAgICAgIGNvbnN0IG8gPSBlLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlXCIpLCBkID0gZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5XCIpLFxuICAgICAgICAgIGMgPSBlLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXBhcmFsbGF4LXJvdGF0ZVwiKTtcbiAgICAgICAgaWYgKG4gfHwgbCA/IChuID0gbiB8fCBcIjBcIiwgbCA9IGwgfHwgXCIwXCIpIDogdC5pc0hvcml6b250YWwoKSA/IChuID0gciwgbCA9IFwiMFwiKSA6IChsID0gciwgbiA9IFwiMFwiKSwgbiA9IG4uaW5kZXhPZihcIiVcIikgPj0gMCA/IHBhcnNlSW50KG4sIDEwKSAqIHMgKiBpICsgXCIlXCIgOiBuICogcyAqIGkgKyBcInB4XCIsIGwgPSBsLmluZGV4T2YoXCIlXCIpID49IDAgPyBwYXJzZUludChsLCAxMCkgKiBzICsgXCIlXCIgOiBsICogcyArIFwicHhcIiwgbnVsbCAhPSBkKSB7XG4gICAgICAgICAgY29uc3QgdCA9IGQgLSAoZCAtIDEpICogKDEgLSBNYXRoLmFicyhzKSk7XG4gICAgICAgICAgZS5zdHlsZS5vcGFjaXR5ID0gdFxuICAgICAgICB9XG4gICAgICAgIGxldCBwID0gYHRyYW5zbGF0ZTNkKCR7bn0sICR7bH0sIDBweClgO1xuICAgICAgICBpZiAobnVsbCAhPSBvKSB7XG4gICAgICAgICAgcCArPSBgIHNjYWxlKCR7byAtIChvIC0gMSkgKiAoMSAtIE1hdGguYWJzKHMpKX0pYFxuICAgICAgICB9XG4gICAgICAgIGlmIChjICYmIG51bGwgIT0gYykge1xuICAgICAgICAgIHAgKz0gYCByb3RhdGUoJHtjICogcyAqIC0xfWRlZylgXG4gICAgICAgIH1cbiAgICAgICAgZS5zdHlsZS50cmFuc2Zvcm0gPSBwXG4gICAgICB9LCBuID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB7ZWw6IGUsIHNsaWRlczogcywgcHJvZ3Jlc3M6IGEsIHNuYXBHcmlkOiBuLCBpc0VsZW1lbnQ6IGx9ID0gdCwgbyA9IGYoZSwgaSk7XG4gICAgICAgIHQuaXNFbGVtZW50ICYmIG8ucHVzaCguLi5mKHQuaG9zdEVsLCBpKSksIG8uZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgcihlLCBhKVxuICAgICAgICB9KSksIHMuZm9yRWFjaCgoKGUsIHMpID0+IHtcbiAgICAgICAgICBsZXQgbCA9IGUucHJvZ3Jlc3M7XG4gICAgICAgICAgdC5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxICYmIFwiYXV0b1wiICE9PSB0LnBhcmFtcy5zbGlkZXNQZXJWaWV3ICYmIChsICs9IE1hdGguY2VpbChzIC8gMikgLSBhICogKG4ubGVuZ3RoIC0gMSkpLCBsID0gTWF0aC5taW4oTWF0aC5tYXgobCwgLTEpLCAxKSwgZS5xdWVyeVNlbGVjdG9yQWxsKGAke2l9LCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtcm90YXRlXWApLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgICAgcihlLCBsKVxuICAgICAgICAgIH0pKVxuICAgICAgICB9KSlcbiAgICAgIH07XG4gICAgYShcImJlZm9yZUluaXRcIiwgKCgpID0+IHtcbiAgICAgIHQucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQgJiYgKHQucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSAhMCwgdC5vcmlnaW5hbFBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gITApXG4gICAgfSkpLCBhKFwiaW5pdFwiLCAoKCkgPT4ge1xuICAgICAgdC5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCAmJiBuKClcbiAgICB9KSksIGEoXCJzZXRUcmFuc2xhdGVcIiwgKCgpID0+IHtcbiAgICAgIHQucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQgJiYgbigpXG4gICAgfSkpLCBhKFwic2V0VHJhbnNpdGlvblwiLCAoKGUsIHMpID0+IHtcbiAgICAgIHQucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQgJiYgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdm9pZCAwID09PSBlICYmIChlID0gdC5wYXJhbXMuc3BlZWQpO1xuICAgICAgICBjb25zdCB7ZWw6IHMsIGhvc3RFbDogYX0gPSB0LCByID0gWy4uLnMucXVlcnlTZWxlY3RvckFsbChpKV07XG4gICAgICAgIHQuaXNFbGVtZW50ICYmIHIucHVzaCguLi5hLnF1ZXJ5U2VsZWN0b3JBbGwoaSkpLCByLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgIGxldCBzID0gcGFyc2VJbnQodC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1wYXJhbGxheC1kdXJhdGlvblwiKSwgMTApIHx8IGU7XG4gICAgICAgICAgMCA9PT0gZSAmJiAocyA9IDApLCB0LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke3N9bXNgXG4gICAgICAgIH0pKVxuICAgICAgfShzKVxuICAgIH0pKVxuICB9LCBmdW5jdGlvbiAoZSkge1xuICAgIGxldCB7c3dpcGVyOiB0LCBleHRlbmRQYXJhbXM6IHMsIG9uOiBhLCBlbWl0OiBpfSA9IGU7XG4gICAgY29uc3QgbiA9IHIoKTtcbiAgICBzKHtcbiAgICAgIHpvb206IHtcbiAgICAgICAgZW5hYmxlZDogITEsXG4gICAgICAgIGxpbWl0VG9PcmlnaW5hbFNpemU6ICExLFxuICAgICAgICBtYXhSYXRpbzogMyxcbiAgICAgICAgbWluUmF0aW86IDEsXG4gICAgICAgIHRvZ2dsZTogITAsXG4gICAgICAgIGNvbnRhaW5lckNsYXNzOiBcInN3aXBlci16b29tLWNvbnRhaW5lclwiLFxuICAgICAgICB6b29tZWRTbGlkZUNsYXNzOiBcInN3aXBlci1zbGlkZS16b29tZWRcIlxuICAgICAgfVxuICAgIH0pLCB0Lnpvb20gPSB7ZW5hYmxlZDogITF9O1xuICAgIGxldCBsLCBvLCBjID0gMSwgcCA9ICExO1xuICAgIGNvbnN0IHUgPSBbXSwgbSA9IHtcbiAgICAgIG9yaWdpblg6IDAsXG4gICAgICBvcmlnaW5ZOiAwLFxuICAgICAgc2xpZGVFbDogdm9pZCAwLFxuICAgICAgc2xpZGVXaWR0aDogdm9pZCAwLFxuICAgICAgc2xpZGVIZWlnaHQ6IHZvaWQgMCxcbiAgICAgIGltYWdlRWw6IHZvaWQgMCxcbiAgICAgIGltYWdlV3JhcEVsOiB2b2lkIDAsXG4gICAgICBtYXhSYXRpbzogM1xuICAgIH0sIGggPSB7XG4gICAgICBpc1RvdWNoZWQ6IHZvaWQgMCxcbiAgICAgIGlzTW92ZWQ6IHZvaWQgMCxcbiAgICAgIGN1cnJlbnRYOiB2b2lkIDAsXG4gICAgICBjdXJyZW50WTogdm9pZCAwLFxuICAgICAgbWluWDogdm9pZCAwLFxuICAgICAgbWluWTogdm9pZCAwLFxuICAgICAgbWF4WDogdm9pZCAwLFxuICAgICAgbWF4WTogdm9pZCAwLFxuICAgICAgd2lkdGg6IHZvaWQgMCxcbiAgICAgIGhlaWdodDogdm9pZCAwLFxuICAgICAgc3RhcnRYOiB2b2lkIDAsXG4gICAgICBzdGFydFk6IHZvaWQgMCxcbiAgICAgIHRvdWNoZXNTdGFydDoge30sXG4gICAgICB0b3VjaGVzQ3VycmVudDoge31cbiAgICB9LCBnID0ge3g6IHZvaWQgMCwgeTogdm9pZCAwLCBwcmV2UG9zaXRpb25YOiB2b2lkIDAsIHByZXZQb3NpdGlvblk6IHZvaWQgMCwgcHJldlRpbWU6IHZvaWQgMH07XG4gICAgbGV0IHYsIGIgPSAxO1xuXG4gICAgZnVuY3Rpb24geSgpIHtcbiAgICAgIGlmICh1Lmxlbmd0aCA8IDIpIHJldHVybiAxO1xuICAgICAgY29uc3QgZSA9IHVbMF0ucGFnZVgsIHQgPSB1WzBdLnBhZ2VZLCBzID0gdVsxXS5wYWdlWCwgYSA9IHVbMV0ucGFnZVk7XG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KChzIC0gZSkgKiogMiArIChhIC0gdCkgKiogMilcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB4KCkge1xuICAgICAgY29uc3QgZSA9IHQucGFyYW1zLnpvb20sIHMgPSBtLmltYWdlV3JhcEVsLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXpvb21cIikgfHwgZS5tYXhSYXRpbztcbiAgICAgIGlmIChlLmxpbWl0VG9PcmlnaW5hbFNpemUgJiYgbS5pbWFnZUVsICYmIG0uaW1hZ2VFbC5uYXR1cmFsV2lkdGgpIHtcbiAgICAgICAgY29uc3QgZSA9IG0uaW1hZ2VFbC5uYXR1cmFsV2lkdGggLyBtLmltYWdlRWwub2Zmc2V0V2lkdGg7XG4gICAgICAgIHJldHVybiBNYXRoLm1pbihlLCBzKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBTKGUpIHtcbiAgICAgIGNvbnN0IHMgPSB0LmlzRWxlbWVudCA/IFwic3dpcGVyLXNsaWRlXCIgOiBgLiR7dC5wYXJhbXMuc2xpZGVDbGFzc31gO1xuICAgICAgcmV0dXJuICEhZS50YXJnZXQubWF0Y2hlcyhzKSB8fCB0LnNsaWRlcy5maWx0ZXIoKHQgPT4gdC5jb250YWlucyhlLnRhcmdldCkpKS5sZW5ndGggPiAwXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gVChlKSB7XG4gICAgICBpZiAoXCJtb3VzZVwiID09PSBlLnBvaW50ZXJUeXBlICYmIHUuc3BsaWNlKDAsIHUubGVuZ3RoKSwgIVMoZSkpIHJldHVybjtcbiAgICAgIGNvbnN0IHMgPSB0LnBhcmFtcy56b29tO1xuICAgICAgaWYgKGwgPSAhMSwgbyA9ICExLCB1LnB1c2goZSksICEodS5sZW5ndGggPCAyKSkge1xuICAgICAgICBpZiAobCA9ICEwLCBtLnNjYWxlU3RhcnQgPSB5KCksICFtLnNsaWRlRWwpIHtcbiAgICAgICAgICBtLnNsaWRlRWwgPSBlLnRhcmdldC5jbG9zZXN0KGAuJHt0LnBhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCksIG0uc2xpZGVFbCB8fCAobS5zbGlkZUVsID0gdC5zbGlkZXNbdC5hY3RpdmVJbmRleF0pO1xuICAgICAgICAgIGxldCBhID0gbS5zbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoYC4ke3MuY29udGFpbmVyQ2xhc3N9YCk7XG4gICAgICAgICAgaWYgKGEgJiYgKGEgPSBhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJwaWN0dXJlLCBpbWcsIHN2ZywgY2FudmFzLCAuc3dpcGVyLXpvb20tdGFyZ2V0XCIpWzBdKSwgbS5pbWFnZUVsID0gYSwgbS5pbWFnZVdyYXBFbCA9IGEgPyBFKG0uaW1hZ2VFbCwgYC4ke3MuY29udGFpbmVyQ2xhc3N9YClbMF0gOiB2b2lkIDAsICFtLmltYWdlV3JhcEVsKSByZXR1cm4gdm9pZCAobS5pbWFnZUVsID0gdm9pZCAwKTtcbiAgICAgICAgICBtLm1heFJhdGlvID0geCgpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG0uaW1hZ2VFbCkge1xuICAgICAgICAgIGNvbnN0IFtlLCB0XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh1Lmxlbmd0aCA8IDIpIHJldHVybiB7eDogbnVsbCwgeTogbnVsbH07XG4gICAgICAgICAgICBjb25zdCBlID0gbS5pbWFnZUVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgcmV0dXJuIFsodVswXS5wYWdlWCArICh1WzFdLnBhZ2VYIC0gdVswXS5wYWdlWCkgLyAyIC0gZS54IC0gbi5zY3JvbGxYKSAvIGMsICh1WzBdLnBhZ2VZICsgKHVbMV0ucGFnZVkgLSB1WzBdLnBhZ2VZKSAvIDIgLSBlLnkgLSBuLnNjcm9sbFkpIC8gY11cbiAgICAgICAgICB9KCk7XG4gICAgICAgICAgbS5vcmlnaW5YID0gZSwgbS5vcmlnaW5ZID0gdCwgbS5pbWFnZUVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiMG1zXCJcbiAgICAgICAgfVxuICAgICAgICBwID0gITBcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBNKGUpIHtcbiAgICAgIGlmICghUyhlKSkgcmV0dXJuO1xuICAgICAgY29uc3QgcyA9IHQucGFyYW1zLnpvb20sIGEgPSB0Lnpvb20sIGkgPSB1LmZpbmRJbmRleCgodCA9PiB0LnBvaW50ZXJJZCA9PT0gZS5wb2ludGVySWQpKTtcbiAgICAgIGkgPj0gMCAmJiAodVtpXSA9IGUpLCB1Lmxlbmd0aCA8IDIgfHwgKG8gPSAhMCwgbS5zY2FsZU1vdmUgPSB5KCksIG0uaW1hZ2VFbCAmJiAoYS5zY2FsZSA9IG0uc2NhbGVNb3ZlIC8gbS5zY2FsZVN0YXJ0ICogYywgYS5zY2FsZSA+IG0ubWF4UmF0aW8gJiYgKGEuc2NhbGUgPSBtLm1heFJhdGlvIC0gMSArIChhLnNjYWxlIC0gbS5tYXhSYXRpbyArIDEpICoqIC41KSwgYS5zY2FsZSA8IHMubWluUmF0aW8gJiYgKGEuc2NhbGUgPSBzLm1pblJhdGlvICsgMSAtIChzLm1pblJhdGlvIC0gYS5zY2FsZSArIDEpICoqIC41KSwgbS5pbWFnZUVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoJHthLnNjYWxlfSlgKSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBDKGUpIHtcbiAgICAgIGlmICghUyhlKSkgcmV0dXJuO1xuICAgICAgaWYgKFwibW91c2VcIiA9PT0gZS5wb2ludGVyVHlwZSAmJiBcInBvaW50ZXJvdXRcIiA9PT0gZS50eXBlKSByZXR1cm47XG4gICAgICBjb25zdCBzID0gdC5wYXJhbXMuem9vbSwgYSA9IHQuem9vbSwgaSA9IHUuZmluZEluZGV4KCh0ID0+IHQucG9pbnRlcklkID09PSBlLnBvaW50ZXJJZCkpO1xuICAgICAgaSA+PSAwICYmIHUuc3BsaWNlKGksIDEpLCBsICYmIG8gJiYgKGwgPSAhMSwgbyA9ICExLCBtLmltYWdlRWwgJiYgKGEuc2NhbGUgPSBNYXRoLm1heChNYXRoLm1pbihhLnNjYWxlLCBtLm1heFJhdGlvKSwgcy5taW5SYXRpbyksIG0uaW1hZ2VFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHt0LnBhcmFtcy5zcGVlZH1tc2AsIG0uaW1hZ2VFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKCR7YS5zY2FsZX0pYCwgYyA9IGEuc2NhbGUsIHAgPSAhMSwgYS5zY2FsZSA+IDEgJiYgbS5zbGlkZUVsID8gbS5zbGlkZUVsLmNsYXNzTGlzdC5hZGQoYCR7cy56b29tZWRTbGlkZUNsYXNzfWApIDogYS5zY2FsZSA8PSAxICYmIG0uc2xpZGVFbCAmJiBtLnNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShgJHtzLnpvb21lZFNsaWRlQ2xhc3N9YCksIDEgPT09IGEuc2NhbGUgJiYgKG0ub3JpZ2luWCA9IDAsIG0ub3JpZ2luWSA9IDAsIG0uc2xpZGVFbCA9IHZvaWQgMCkpKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIFAoKSB7XG4gICAgICB0LnRvdWNoRXZlbnRzRGF0YS5wcmV2ZW50VG91Y2hNb3ZlRnJvbVBvaW50ZXJNb3ZlID0gITFcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBMKGUpIHtcbiAgICAgIGlmICghUyhlKSB8fCAhZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc3QgcyA9IGAuJHt0LnBhcmFtcy56b29tLmNvbnRhaW5lckNsYXNzfWA7XG4gICAgICAgIHJldHVybiAhIWUudGFyZ2V0Lm1hdGNoZXMocykgfHwgWy4uLnQuaG9zdEVsLnF1ZXJ5U2VsZWN0b3JBbGwocyldLmZpbHRlcigodCA9PiB0LmNvbnRhaW5zKGUudGFyZ2V0KSkpLmxlbmd0aCA+IDBcbiAgICAgIH0oZSkpIHJldHVybjtcbiAgICAgIGNvbnN0IHMgPSB0Lnpvb207XG4gICAgICBpZiAoIW0uaW1hZ2VFbCkgcmV0dXJuO1xuICAgICAgaWYgKCFoLmlzVG91Y2hlZCB8fCAhbS5zbGlkZUVsKSByZXR1cm47XG4gICAgICBoLmlzTW92ZWQgfHwgKGgud2lkdGggPSBtLmltYWdlRWwub2Zmc2V0V2lkdGggfHwgbS5pbWFnZUVsLmNsaWVudFdpZHRoLCBoLmhlaWdodCA9IG0uaW1hZ2VFbC5vZmZzZXRIZWlnaHQgfHwgbS5pbWFnZUVsLmNsaWVudEhlaWdodCwgaC5zdGFydFggPSBkKG0uaW1hZ2VXcmFwRWwsIFwieFwiKSB8fCAwLCBoLnN0YXJ0WSA9IGQobS5pbWFnZVdyYXBFbCwgXCJ5XCIpIHx8IDAsIG0uc2xpZGVXaWR0aCA9IG0uc2xpZGVFbC5vZmZzZXRXaWR0aCwgbS5zbGlkZUhlaWdodCA9IG0uc2xpZGVFbC5vZmZzZXRIZWlnaHQsIG0uaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gXCIwbXNcIik7XG4gICAgICBjb25zdCBhID0gaC53aWR0aCAqIHMuc2NhbGUsIGkgPSBoLmhlaWdodCAqIHMuc2NhbGU7XG4gICAgICBoLm1pblggPSBNYXRoLm1pbihtLnNsaWRlV2lkdGggLyAyIC0gYSAvIDIsIDApLCBoLm1heFggPSAtaC5taW5YLCBoLm1pblkgPSBNYXRoLm1pbihtLnNsaWRlSGVpZ2h0IC8gMiAtIGkgLyAyLCAwKSwgaC5tYXhZID0gLWgubWluWSwgaC50b3VjaGVzQ3VycmVudC54ID0gdS5sZW5ndGggPiAwID8gdVswXS5wYWdlWCA6IGUucGFnZVgsIGgudG91Y2hlc0N1cnJlbnQueSA9IHUubGVuZ3RoID4gMCA/IHVbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgICAgaWYgKE1hdGgubWF4KE1hdGguYWJzKGgudG91Y2hlc0N1cnJlbnQueCAtIGgudG91Y2hlc1N0YXJ0LngpLCBNYXRoLmFicyhoLnRvdWNoZXNDdXJyZW50LnkgLSBoLnRvdWNoZXNTdGFydC55KSkgPiA1ICYmICh0LmFsbG93Q2xpY2sgPSAhMSksICFoLmlzTW92ZWQgJiYgIXApIHtcbiAgICAgICAgaWYgKHQuaXNIb3Jpem9udGFsKCkgJiYgKE1hdGguZmxvb3IoaC5taW5YKSA9PT0gTWF0aC5mbG9vcihoLnN0YXJ0WCkgJiYgaC50b3VjaGVzQ3VycmVudC54IDwgaC50b3VjaGVzU3RhcnQueCB8fCBNYXRoLmZsb29yKGgubWF4WCkgPT09IE1hdGguZmxvb3IoaC5zdGFydFgpICYmIGgudG91Y2hlc0N1cnJlbnQueCA+IGgudG91Y2hlc1N0YXJ0LngpKSByZXR1cm4gaC5pc1RvdWNoZWQgPSAhMSwgdm9pZCBQKCk7XG4gICAgICAgIGlmICghdC5pc0hvcml6b250YWwoKSAmJiAoTWF0aC5mbG9vcihoLm1pblkpID09PSBNYXRoLmZsb29yKGguc3RhcnRZKSAmJiBoLnRvdWNoZXNDdXJyZW50LnkgPCBoLnRvdWNoZXNTdGFydC55IHx8IE1hdGguZmxvb3IoaC5tYXhZKSA9PT0gTWF0aC5mbG9vcihoLnN0YXJ0WSkgJiYgaC50b3VjaGVzQ3VycmVudC55ID4gaC50b3VjaGVzU3RhcnQueSkpIHJldHVybiBoLmlzVG91Y2hlZCA9ICExLCB2b2lkIFAoKVxuICAgICAgfVxuICAgICAgZS5jYW5jZWxhYmxlICYmIGUucHJldmVudERlZmF1bHQoKSwgZS5zdG9wUHJvcGFnYXRpb24oKSwgY2xlYXJUaW1lb3V0KHYpLCB0LnRvdWNoRXZlbnRzRGF0YS5wcmV2ZW50VG91Y2hNb3ZlRnJvbVBvaW50ZXJNb3ZlID0gITAsIHYgPSBzZXRUaW1lb3V0KCgoKSA9PiB7XG4gICAgICAgIHQuZGVzdHJveWVkIHx8IFAoKVxuICAgICAgfSkpLCBoLmlzTW92ZWQgPSAhMDtcbiAgICAgIGNvbnN0IHIgPSAocy5zY2FsZSAtIGMpIC8gKG0ubWF4UmF0aW8gLSB0LnBhcmFtcy56b29tLm1pblJhdGlvKSwge29yaWdpblg6IG4sIG9yaWdpblk6IGx9ID0gbTtcbiAgICAgIGguY3VycmVudFggPSBoLnRvdWNoZXNDdXJyZW50LnggLSBoLnRvdWNoZXNTdGFydC54ICsgaC5zdGFydFggKyByICogKGgud2lkdGggLSAyICogbiksIGguY3VycmVudFkgPSBoLnRvdWNoZXNDdXJyZW50LnkgLSBoLnRvdWNoZXNTdGFydC55ICsgaC5zdGFydFkgKyByICogKGguaGVpZ2h0IC0gMiAqIGwpLCBoLmN1cnJlbnRYIDwgaC5taW5YICYmIChoLmN1cnJlbnRYID0gaC5taW5YICsgMSAtIChoLm1pblggLSBoLmN1cnJlbnRYICsgMSkgKiogLjgpLCBoLmN1cnJlbnRYID4gaC5tYXhYICYmIChoLmN1cnJlbnRYID0gaC5tYXhYIC0gMSArIChoLmN1cnJlbnRYIC0gaC5tYXhYICsgMSkgKiogLjgpLCBoLmN1cnJlbnRZIDwgaC5taW5ZICYmIChoLmN1cnJlbnRZID0gaC5taW5ZICsgMSAtIChoLm1pblkgLSBoLmN1cnJlbnRZICsgMSkgKiogLjgpLCBoLmN1cnJlbnRZID4gaC5tYXhZICYmIChoLmN1cnJlbnRZID0gaC5tYXhZIC0gMSArIChoLmN1cnJlbnRZIC0gaC5tYXhZICsgMSkgKiogLjgpLCBnLnByZXZQb3NpdGlvblggfHwgKGcucHJldlBvc2l0aW9uWCA9IGgudG91Y2hlc0N1cnJlbnQueCksIGcucHJldlBvc2l0aW9uWSB8fCAoZy5wcmV2UG9zaXRpb25ZID0gaC50b3VjaGVzQ3VycmVudC55KSwgZy5wcmV2VGltZSB8fCAoZy5wcmV2VGltZSA9IERhdGUubm93KCkpLCBnLnggPSAoaC50b3VjaGVzQ3VycmVudC54IC0gZy5wcmV2UG9zaXRpb25YKSAvIChEYXRlLm5vdygpIC0gZy5wcmV2VGltZSkgLyAyLCBnLnkgPSAoaC50b3VjaGVzQ3VycmVudC55IC0gZy5wcmV2UG9zaXRpb25ZKSAvIChEYXRlLm5vdygpIC0gZy5wcmV2VGltZSkgLyAyLCBNYXRoLmFicyhoLnRvdWNoZXNDdXJyZW50LnggLSBnLnByZXZQb3NpdGlvblgpIDwgMiAmJiAoZy54ID0gMCksIE1hdGguYWJzKGgudG91Y2hlc0N1cnJlbnQueSAtIGcucHJldlBvc2l0aW9uWSkgPCAyICYmIChnLnkgPSAwKSwgZy5wcmV2UG9zaXRpb25YID0gaC50b3VjaGVzQ3VycmVudC54LCBnLnByZXZQb3NpdGlvblkgPSBoLnRvdWNoZXNDdXJyZW50LnksIGcucHJldlRpbWUgPSBEYXRlLm5vdygpLCBtLmltYWdlV3JhcEVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke2guY3VycmVudFh9cHgsICR7aC5jdXJyZW50WX1weCwwKWBcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBJKCkge1xuICAgICAgY29uc3QgZSA9IHQuem9vbTtcbiAgICAgIG0uc2xpZGVFbCAmJiB0LmFjdGl2ZUluZGV4ICE9PSB0LnNsaWRlcy5pbmRleE9mKG0uc2xpZGVFbCkgJiYgKG0uaW1hZ2VFbCAmJiAobS5pbWFnZUVsLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpXCIpLCBtLmltYWdlV3JhcEVsICYmIChtLmltYWdlV3JhcEVsLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoMCwwLDApXCIpLCBtLnNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShgJHt0LnBhcmFtcy56b29tLnpvb21lZFNsaWRlQ2xhc3N9YCksIGUuc2NhbGUgPSAxLCBjID0gMSwgbS5zbGlkZUVsID0gdm9pZCAwLCBtLmltYWdlRWwgPSB2b2lkIDAsIG0uaW1hZ2VXcmFwRWwgPSB2b2lkIDAsIG0ub3JpZ2luWCA9IDAsIG0ub3JpZ2luWSA9IDApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24geihlKSB7XG4gICAgICBjb25zdCBzID0gdC56b29tLCBhID0gdC5wYXJhbXMuem9vbTtcbiAgICAgIGlmICghbS5zbGlkZUVsKSB7XG4gICAgICAgIGUgJiYgZS50YXJnZXQgJiYgKG0uc2xpZGVFbCA9IGUudGFyZ2V0LmNsb3Nlc3QoYC4ke3QucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKSksIG0uc2xpZGVFbCB8fCAodC5wYXJhbXMudmlydHVhbCAmJiB0LnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgdC52aXJ0dWFsID8gbS5zbGlkZUVsID0gZih0LnNsaWRlc0VsLCBgLiR7dC5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzc31gKVswXSA6IG0uc2xpZGVFbCA9IHQuc2xpZGVzW3QuYWN0aXZlSW5kZXhdKTtcbiAgICAgICAgbGV0IHMgPSBtLnNsaWRlRWwucXVlcnlTZWxlY3RvcihgLiR7YS5jb250YWluZXJDbGFzc31gKTtcbiAgICAgICAgcyAmJiAocyA9IHMucXVlcnlTZWxlY3RvckFsbChcInBpY3R1cmUsIGltZywgc3ZnLCBjYW52YXMsIC5zd2lwZXItem9vbS10YXJnZXRcIilbMF0pLCBtLmltYWdlRWwgPSBzLCBtLmltYWdlV3JhcEVsID0gcyA/IEUobS5pbWFnZUVsLCBgLiR7YS5jb250YWluZXJDbGFzc31gKVswXSA6IHZvaWQgMFxuICAgICAgfVxuICAgICAgaWYgKCFtLmltYWdlRWwgfHwgIW0uaW1hZ2VXcmFwRWwpIHJldHVybjtcbiAgICAgIGxldCBpLCByLCBsLCBvLCBkLCBwLCB1LCBnLCB2LCBiLCB5LCBTLCBULCBNLCBDLCBQLCBMLCBJO1xuICAgICAgdC5wYXJhbXMuY3NzTW9kZSAmJiAodC53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiLCB0LndyYXBwZXJFbC5zdHlsZS50b3VjaEFjdGlvbiA9IFwibm9uZVwiKSwgbS5zbGlkZUVsLmNsYXNzTGlzdC5hZGQoYCR7YS56b29tZWRTbGlkZUNsYXNzfWApLCB2b2lkIDAgPT09IGgudG91Y2hlc1N0YXJ0LnggJiYgZSA/IChpID0gZS5wYWdlWCwgciA9IGUucGFnZVkpIDogKGkgPSBoLnRvdWNoZXNTdGFydC54LCByID0gaC50b3VjaGVzU3RhcnQueSk7XG4gICAgICBjb25zdCB6ID0gXCJudW1iZXJcIiA9PSB0eXBlb2YgZSA/IGUgOiBudWxsO1xuICAgICAgMSA9PT0gYyAmJiB6ICYmIChpID0gdm9pZCAwLCByID0gdm9pZCAwLCBoLnRvdWNoZXNTdGFydC54ID0gdm9pZCAwLCBoLnRvdWNoZXNTdGFydC55ID0gdm9pZCAwKTtcbiAgICAgIGNvbnN0IEEgPSB4KCk7XG4gICAgICBzLnNjYWxlID0geiB8fCBBLCBjID0geiB8fCBBLCAhZSB8fCAxID09PSBjICYmIHogPyAodSA9IDAsIGcgPSAwKSA6IChMID0gbS5zbGlkZUVsLm9mZnNldFdpZHRoLCBJID0gbS5zbGlkZUVsLm9mZnNldEhlaWdodCwgbCA9IHcobS5zbGlkZUVsKS5sZWZ0ICsgbi5zY3JvbGxYLCBvID0gdyhtLnNsaWRlRWwpLnRvcCArIG4uc2Nyb2xsWSwgZCA9IGwgKyBMIC8gMiAtIGksIHAgPSBvICsgSSAvIDIgLSByLCB2ID0gbS5pbWFnZUVsLm9mZnNldFdpZHRoIHx8IG0uaW1hZ2VFbC5jbGllbnRXaWR0aCwgYiA9IG0uaW1hZ2VFbC5vZmZzZXRIZWlnaHQgfHwgbS5pbWFnZUVsLmNsaWVudEhlaWdodCwgeSA9IHYgKiBzLnNjYWxlLCBTID0gYiAqIHMuc2NhbGUsIFQgPSBNYXRoLm1pbihMIC8gMiAtIHkgLyAyLCAwKSwgTSA9IE1hdGgubWluKEkgLyAyIC0gUyAvIDIsIDApLCBDID0gLVQsIFAgPSAtTSwgdSA9IGQgKiBzLnNjYWxlLCBnID0gcCAqIHMuc2NhbGUsIHUgPCBUICYmICh1ID0gVCksIHUgPiBDICYmICh1ID0gQyksIGcgPCBNICYmIChnID0gTSksIGcgPiBQICYmIChnID0gUCkpLCB6ICYmIDEgPT09IHMuc2NhbGUgJiYgKG0ub3JpZ2luWCA9IDAsIG0ub3JpZ2luWSA9IDApLCBtLmltYWdlV3JhcEVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiMzAwbXNcIiwgbS5pbWFnZVdyYXBFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt1fXB4LCAke2d9cHgsMClgLCBtLmltYWdlRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gXCIzMDBtc1wiLCBtLmltYWdlRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgke3Muc2NhbGV9KWBcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBBKCkge1xuICAgICAgY29uc3QgZSA9IHQuem9vbSwgcyA9IHQucGFyYW1zLnpvb207XG4gICAgICBpZiAoIW0uc2xpZGVFbCkge1xuICAgICAgICB0LnBhcmFtcy52aXJ0dWFsICYmIHQucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiB0LnZpcnR1YWwgPyBtLnNsaWRlRWwgPSBmKHQuc2xpZGVzRWwsIGAuJHt0LnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzfWApWzBdIDogbS5zbGlkZUVsID0gdC5zbGlkZXNbdC5hY3RpdmVJbmRleF07XG4gICAgICAgIGxldCBlID0gbS5zbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoYC4ke3MuY29udGFpbmVyQ2xhc3N9YCk7XG4gICAgICAgIGUgJiYgKGUgPSBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJwaWN0dXJlLCBpbWcsIHN2ZywgY2FudmFzLCAuc3dpcGVyLXpvb20tdGFyZ2V0XCIpWzBdKSwgbS5pbWFnZUVsID0gZSwgbS5pbWFnZVdyYXBFbCA9IGUgPyBFKG0uaW1hZ2VFbCwgYC4ke3MuY29udGFpbmVyQ2xhc3N9YClbMF0gOiB2b2lkIDBcbiAgICAgIH1cbiAgICAgIG0uaW1hZ2VFbCAmJiBtLmltYWdlV3JhcEVsICYmICh0LnBhcmFtcy5jc3NNb2RlICYmICh0LndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9IFwiXCIsIHQud3JhcHBlckVsLnN0eWxlLnRvdWNoQWN0aW9uID0gXCJcIiksIGUuc2NhbGUgPSAxLCBjID0gMSwgaC50b3VjaGVzU3RhcnQueCA9IHZvaWQgMCwgaC50b3VjaGVzU3RhcnQueSA9IHZvaWQgMCwgbS5pbWFnZVdyYXBFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIjMwMG1zXCIsIG0uaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUzZCgwLDAsMClcIiwgbS5pbWFnZUVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiMzAwbXNcIiwgbS5pbWFnZUVsLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpXCIsIG0uc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKGAke3Muem9vbWVkU2xpZGVDbGFzc31gKSwgbS5zbGlkZUVsID0gdm9pZCAwLCBtLm9yaWdpblggPSAwLCBtLm9yaWdpblkgPSAwKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uICQoZSkge1xuICAgICAgY29uc3QgcyA9IHQuem9vbTtcbiAgICAgIHMuc2NhbGUgJiYgMSAhPT0gcy5zY2FsZSA/IEEoKSA6IHooZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFzc2l2ZUxpc3RlbmVyOiAhIXQucGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgJiYge3Bhc3NpdmU6ICEwLCBjYXB0dXJlOiAhMX0sXG4gICAgICAgIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmU6ICF0LnBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzIHx8IHtwYXNzaXZlOiAhMSwgY2FwdHVyZTogITB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTygpIHtcbiAgICAgIGNvbnN0IGUgPSB0Lnpvb207XG4gICAgICBpZiAoZS5lbmFibGVkKSByZXR1cm47XG4gICAgICBlLmVuYWJsZWQgPSAhMDtcbiAgICAgIGNvbnN0IHtwYXNzaXZlTGlzdGVuZXI6IHMsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmU6IGF9ID0gaygpO1xuICAgICAgdC53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIFQsIHMpLCB0LndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIiwgTSwgYSksIFtcInBvaW50ZXJ1cFwiLCBcInBvaW50ZXJjYW5jZWxcIiwgXCJwb2ludGVyb3V0XCJdLmZvckVhY2goKGUgPT4ge1xuICAgICAgICB0LndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKGUsIEMsIHMpXG4gICAgICB9KSksIHQud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCBMLCBhKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIEQoKSB7XG4gICAgICBjb25zdCBlID0gdC56b29tO1xuICAgICAgaWYgKCFlLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIGUuZW5hYmxlZCA9ICExO1xuICAgICAgY29uc3Qge3Bhc3NpdmVMaXN0ZW5lcjogcywgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZTogYX0gPSBrKCk7XG4gICAgICB0LndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgVCwgcyksIHQud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCBNLCBhKSwgW1wicG9pbnRlcnVwXCIsIFwicG9pbnRlcmNhbmNlbFwiLCBcInBvaW50ZXJvdXRcIl0uZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgIHQud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZSwgQywgcylcbiAgICAgIH0pKSwgdC53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJtb3ZlXCIsIEwsIGEpXG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQuem9vbSwgXCJzY2FsZVwiLCB7XG4gICAgICBnZXQ6ICgpID0+IGIsIHNldChlKSB7XG4gICAgICAgIGlmIChiICE9PSBlKSB7XG4gICAgICAgICAgY29uc3QgdCA9IG0uaW1hZ2VFbCwgcyA9IG0uc2xpZGVFbDtcbiAgICAgICAgICBpKFwiem9vbUNoYW5nZVwiLCBlLCB0LCBzKVxuICAgICAgICB9XG4gICAgICAgIGIgPSBlXG4gICAgICB9XG4gICAgfSksIGEoXCJpbml0XCIsICgoKSA9PiB7XG4gICAgICB0LnBhcmFtcy56b29tLmVuYWJsZWQgJiYgTygpXG4gICAgfSkpLCBhKFwiZGVzdHJveVwiLCAoKCkgPT4ge1xuICAgICAgRCgpXG4gICAgfSkpLCBhKFwidG91Y2hTdGFydFwiLCAoKGUsIHMpID0+IHtcbiAgICAgIHQuem9vbS5lbmFibGVkICYmIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnN0IHMgPSB0LmRldmljZTtcbiAgICAgICAgaWYgKCFtLmltYWdlRWwpIHJldHVybjtcbiAgICAgICAgaWYgKGguaXNUb3VjaGVkKSByZXR1cm47XG4gICAgICAgIHMuYW5kcm9pZCAmJiBlLmNhbmNlbGFibGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpLCBoLmlzVG91Y2hlZCA9ICEwO1xuICAgICAgICBjb25zdCBhID0gdS5sZW5ndGggPiAwID8gdVswXSA6IGU7XG4gICAgICAgIGgudG91Y2hlc1N0YXJ0LnggPSBhLnBhZ2VYLCBoLnRvdWNoZXNTdGFydC55ID0gYS5wYWdlWVxuICAgICAgfShzKVxuICAgIH0pKSwgYShcInRvdWNoRW5kXCIsICgoZSwgcykgPT4ge1xuICAgICAgdC56b29tLmVuYWJsZWQgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBlID0gdC56b29tO1xuICAgICAgICBpZiAoIW0uaW1hZ2VFbCkgcmV0dXJuO1xuICAgICAgICBpZiAoIWguaXNUb3VjaGVkIHx8ICFoLmlzTW92ZWQpIHJldHVybiBoLmlzVG91Y2hlZCA9ICExLCB2b2lkIChoLmlzTW92ZWQgPSAhMSk7XG4gICAgICAgIGguaXNUb3VjaGVkID0gITEsIGguaXNNb3ZlZCA9ICExO1xuICAgICAgICBsZXQgcyA9IDMwMCwgYSA9IDMwMDtcbiAgICAgICAgY29uc3QgaSA9IGcueCAqIHMsIHIgPSBoLmN1cnJlbnRYICsgaSwgbiA9IGcueSAqIGEsIGwgPSBoLmN1cnJlbnRZICsgbjtcbiAgICAgICAgMCAhPT0gZy54ICYmIChzID0gTWF0aC5hYnMoKHIgLSBoLmN1cnJlbnRYKSAvIGcueCkpLCAwICE9PSBnLnkgJiYgKGEgPSBNYXRoLmFicygobCAtIGguY3VycmVudFkpIC8gZy55KSk7XG4gICAgICAgIGNvbnN0IG8gPSBNYXRoLm1heChzLCBhKTtcbiAgICAgICAgaC5jdXJyZW50WCA9IHIsIGguY3VycmVudFkgPSBsO1xuICAgICAgICBjb25zdCBkID0gaC53aWR0aCAqIGUuc2NhbGUsIGMgPSBoLmhlaWdodCAqIGUuc2NhbGU7XG4gICAgICAgIGgubWluWCA9IE1hdGgubWluKG0uc2xpZGVXaWR0aCAvIDIgLSBkIC8gMiwgMCksIGgubWF4WCA9IC1oLm1pblgsIGgubWluWSA9IE1hdGgubWluKG0uc2xpZGVIZWlnaHQgLyAyIC0gYyAvIDIsIDApLCBoLm1heFkgPSAtaC5taW5ZLCBoLmN1cnJlbnRYID0gTWF0aC5tYXgoTWF0aC5taW4oaC5jdXJyZW50WCwgaC5tYXhYKSwgaC5taW5YKSwgaC5jdXJyZW50WSA9IE1hdGgubWF4KE1hdGgubWluKGguY3VycmVudFksIGgubWF4WSksIGgubWluWSksIG0uaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7b31tc2AsIG0uaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7aC5jdXJyZW50WH1weCwgJHtoLmN1cnJlbnRZfXB4LDApYFxuICAgICAgfSgpXG4gICAgfSkpLCBhKFwiZG91YmxlVGFwXCIsICgoZSwgcykgPT4ge1xuICAgICAgIXQuYW5pbWF0aW5nICYmIHQucGFyYW1zLnpvb20uZW5hYmxlZCAmJiB0Lnpvb20uZW5hYmxlZCAmJiB0LnBhcmFtcy56b29tLnRvZ2dsZSAmJiAkKHMpXG4gICAgfSkpLCBhKFwidHJhbnNpdGlvbkVuZFwiLCAoKCkgPT4ge1xuICAgICAgdC56b29tLmVuYWJsZWQgJiYgdC5wYXJhbXMuem9vbS5lbmFibGVkICYmIEkoKVxuICAgIH0pKSwgYShcInNsaWRlQ2hhbmdlXCIsICgoKSA9PiB7XG4gICAgICB0Lnpvb20uZW5hYmxlZCAmJiB0LnBhcmFtcy56b29tLmVuYWJsZWQgJiYgdC5wYXJhbXMuY3NzTW9kZSAmJiBJKClcbiAgICB9KSksIE9iamVjdC5hc3NpZ24odC56b29tLCB7ZW5hYmxlOiBPLCBkaXNhYmxlOiBELCBpbjogeiwgb3V0OiBBLCB0b2dnbGU6ICR9KVxuICB9LCBmdW5jdGlvbiAoZSkge1xuICAgIGxldCB7c3dpcGVyOiB0LCBleHRlbmRQYXJhbXM6IHMsIG9uOiBhfSA9IGU7XG5cbiAgICBmdW5jdGlvbiBpKGUsIHQpIHtcbiAgICAgIGNvbnN0IHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBlLCB0LCBzO1xuICAgICAgICByZXR1cm4gKGEsIGkpID0+IHtcbiAgICAgICAgICBmb3IgKHQgPSAtMSwgZSA9IGEubGVuZ3RoOyBlIC0gdCA+IDE7KSBzID0gZSArIHQgPj4gMSwgYVtzXSA8PSBpID8gdCA9IHMgOiBlID0gcztcbiAgICAgICAgICByZXR1cm4gZVxuICAgICAgICB9XG4gICAgICB9KCk7XG4gICAgICBsZXQgYSwgaTtcbiAgICAgIHJldHVybiB0aGlzLnggPSBlLCB0aGlzLnkgPSB0LCB0aGlzLmxhc3RJbmRleCA9IGUubGVuZ3RoIC0gMSwgdGhpcy5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBlID8gKGkgPSBzKHRoaXMueCwgZSksIGEgPSBpIC0gMSwgKGUgLSB0aGlzLnhbYV0pICogKHRoaXMueVtpXSAtIHRoaXMueVthXSkgLyAodGhpcy54W2ldIC0gdGhpcy54W2FdKSArIHRoaXMueVthXSkgOiAwXG4gICAgICB9LCB0aGlzXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcigpIHtcbiAgICAgIHQuY29udHJvbGxlci5jb250cm9sICYmIHQuY29udHJvbGxlci5zcGxpbmUgJiYgKHQuY29udHJvbGxlci5zcGxpbmUgPSB2b2lkIDAsIGRlbGV0ZSB0LmNvbnRyb2xsZXIuc3BsaW5lKVxuICAgIH1cblxuICAgIHMoe1xuICAgICAgY29udHJvbGxlcjoge1xuICAgICAgICBjb250cm9sOiB2b2lkIDAsXG4gICAgICAgIGludmVyc2U6ICExLFxuICAgICAgICBieTogXCJzbGlkZVwiXG4gICAgICB9XG4gICAgfSksIHQuY29udHJvbGxlciA9IHtjb250cm9sOiB2b2lkIDB9LCBhKFwiYmVmb3JlSW5pdFwiLCAoKCkgPT4ge1xuICAgICAgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHdpbmRvdyAmJiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdC5wYXJhbXMuY29udHJvbGxlci5jb250cm9sIHx8IHQucGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkge1xuICAgICAgICAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdC5wYXJhbXMuY29udHJvbGxlci5jb250cm9sID8gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodC5wYXJhbXMuY29udHJvbGxlci5jb250cm9sKV0gOiBbdC5wYXJhbXMuY29udHJvbGxlci5jb250cm9sXSkuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgICAgaWYgKHQuY29udHJvbGxlci5jb250cm9sIHx8ICh0LmNvbnRyb2xsZXIuY29udHJvbCA9IFtdKSwgZSAmJiBlLnN3aXBlcikgdC5jb250cm9sbGVyLmNvbnRyb2wucHVzaChlLnN3aXBlcik7IGVsc2UgaWYgKGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBgJHt0LnBhcmFtcy5ldmVudHNQcmVmaXh9aW5pdGAsIGEgPSBpID0+IHtcbiAgICAgICAgICAgICAgdC5jb250cm9sbGVyLmNvbnRyb2wucHVzaChpLmRldGFpbFswXSksIHQudXBkYXRlKCksIGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihzLCBhKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGUuYWRkRXZlbnRMaXN0ZW5lcihzLCBhKVxuICAgICAgICAgIH1cbiAgICAgICAgfSkpXG4gICAgICB9IGVsc2UgdC5jb250cm9sbGVyLmNvbnRyb2wgPSB0LnBhcmFtcy5jb250cm9sbGVyLmNvbnRyb2xcbiAgICB9KSksIGEoXCJ1cGRhdGVcIiwgKCgpID0+IHtcbiAgICAgIHIoKVxuICAgIH0pKSwgYShcInJlc2l6ZVwiLCAoKCkgPT4ge1xuICAgICAgcigpXG4gICAgfSkpLCBhKFwib2JzZXJ2ZXJVcGRhdGVcIiwgKCgpID0+IHtcbiAgICAgIHIoKVxuICAgIH0pKSwgYShcInNldFRyYW5zbGF0ZVwiLCAoKGUsIHMsIGEpID0+IHtcbiAgICAgIHQuY29udHJvbGxlci5jb250cm9sICYmICF0LmNvbnRyb2xsZXIuY29udHJvbC5kZXN0cm95ZWQgJiYgdC5jb250cm9sbGVyLnNldFRyYW5zbGF0ZShzLCBhKVxuICAgIH0pKSwgYShcInNldFRyYW5zaXRpb25cIiwgKChlLCBzLCBhKSA9PiB7XG4gICAgICB0LmNvbnRyb2xsZXIuY29udHJvbCAmJiAhdC5jb250cm9sbGVyLmNvbnRyb2wuZGVzdHJveWVkICYmIHQuY29udHJvbGxlci5zZXRUcmFuc2l0aW9uKHMsIGEpXG4gICAgfSkpLCBPYmplY3QuYXNzaWduKHQuY29udHJvbGxlciwge1xuICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiAoZSwgcykge1xuICAgICAgICBjb25zdCBhID0gdC5jb250cm9sbGVyLmNvbnRyb2w7XG4gICAgICAgIGxldCByLCBuO1xuICAgICAgICBjb25zdCBsID0gdC5jb25zdHJ1Y3RvcjtcblxuICAgICAgICBmdW5jdGlvbiBvKGUpIHtcbiAgICAgICAgICBpZiAoZS5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBjb25zdCBzID0gdC5ydGxUcmFuc2xhdGUgPyAtdC50cmFuc2xhdGUgOiB0LnRyYW5zbGF0ZTtcbiAgICAgICAgICBcInNsaWRlXCIgPT09IHQucGFyYW1zLmNvbnRyb2xsZXIuYnkgJiYgKCFmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdC5jb250cm9sbGVyLnNwbGluZSA9IHQucGFyYW1zLmxvb3AgPyBuZXcgaSh0LnNsaWRlc0dyaWQsIGUuc2xpZGVzR3JpZCkgOiBuZXcgaSh0LnNuYXBHcmlkLCBlLnNuYXBHcmlkKVxuICAgICAgICAgIH0oZSksIG4gPSAtdC5jb250cm9sbGVyLnNwbGluZS5pbnRlcnBvbGF0ZSgtcykpLCBuICYmIFwiY29udGFpbmVyXCIgIT09IHQucGFyYW1zLmNvbnRyb2xsZXIuYnkgfHwgKHIgPSAoZS5tYXhUcmFuc2xhdGUoKSAtIGUubWluVHJhbnNsYXRlKCkpIC8gKHQubWF4VHJhbnNsYXRlKCkgLSB0Lm1pblRyYW5zbGF0ZSgpKSwgIU51bWJlci5pc05hTihyKSAmJiBOdW1iZXIuaXNGaW5pdGUocikgfHwgKHIgPSAxKSwgbiA9IChzIC0gdC5taW5UcmFuc2xhdGUoKSkgKiByICsgZS5taW5UcmFuc2xhdGUoKSksIHQucGFyYW1zLmNvbnRyb2xsZXIuaW52ZXJzZSAmJiAobiA9IGUubWF4VHJhbnNsYXRlKCkgLSBuKSwgZS51cGRhdGVQcm9ncmVzcyhuKSwgZS5zZXRUcmFuc2xhdGUobiwgdCksIGUudXBkYXRlQWN0aXZlSW5kZXgoKSwgZS51cGRhdGVTbGlkZXNDbGFzc2VzKClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGEpKSBmb3IgKGxldCBlID0gMDsgZSA8IGEubGVuZ3RoOyBlICs9IDEpIGFbZV0gIT09IHMgJiYgYVtlXSBpbnN0YW5jZW9mIGwgJiYgbyhhW2VdKTsgZWxzZSBhIGluc3RhbmNlb2YgbCAmJiBzICE9PSBhICYmIG8oYSlcbiAgICAgIH0sIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIChlLCBzKSB7XG4gICAgICAgIGNvbnN0IGEgPSB0LmNvbnN0cnVjdG9yLCBpID0gdC5jb250cm9sbGVyLmNvbnRyb2w7XG4gICAgICAgIGxldCByO1xuXG4gICAgICAgIGZ1bmN0aW9uIG4ocykge1xuICAgICAgICAgIHMuZGVzdHJveWVkIHx8IChzLnNldFRyYW5zaXRpb24oZSwgdCksIDAgIT09IGUgJiYgKHMudHJhbnNpdGlvblN0YXJ0KCksIHMucGFyYW1zLmF1dG9IZWlnaHQgJiYgbCgoKCkgPT4ge1xuICAgICAgICAgICAgcy51cGRhdGVBdXRvSGVpZ2h0KClcbiAgICAgICAgICB9KSksIHgocy53cmFwcGVyRWwsICgoKSA9PiB7XG4gICAgICAgICAgICBpICYmIHMudHJhbnNpdGlvbkVuZCgpXG4gICAgICAgICAgfSkpKSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGkpKSBmb3IgKHIgPSAwOyByIDwgaS5sZW5ndGg7IHIgKz0gMSkgaVtyXSAhPT0gcyAmJiBpW3JdIGluc3RhbmNlb2YgYSAmJiBuKGlbcl0pOyBlbHNlIGkgaW5zdGFuY2VvZiBhICYmIHMgIT09IGkgJiYgbihpKVxuICAgICAgfVxuICAgIH0pXG4gIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgbGV0IHtzd2lwZXI6IHQsIGV4dGVuZFBhcmFtczogcywgb246IGl9ID0gZTtcbiAgICBzKHtcbiAgICAgIGExMXk6IHtcbiAgICAgICAgZW5hYmxlZDogITAsXG4gICAgICAgIG5vdGlmaWNhdGlvbkNsYXNzOiBcInN3aXBlci1ub3RpZmljYXRpb25cIixcbiAgICAgICAgcHJldlNsaWRlTWVzc2FnZTogXCJQcmV2aW91cyBzbGlkZVwiLFxuICAgICAgICBuZXh0U2xpZGVNZXNzYWdlOiBcIk5leHQgc2xpZGVcIixcbiAgICAgICAgZmlyc3RTbGlkZU1lc3NhZ2U6IFwiVGhpcyBpcyB0aGUgZmlyc3Qgc2xpZGVcIixcbiAgICAgICAgbGFzdFNsaWRlTWVzc2FnZTogXCJUaGlzIGlzIHRoZSBsYXN0IHNsaWRlXCIsXG4gICAgICAgIHBhZ2luYXRpb25CdWxsZXRNZXNzYWdlOiBcIkdvIHRvIHNsaWRlIHt7aW5kZXh9fVwiLFxuICAgICAgICBzbGlkZUxhYmVsTWVzc2FnZTogXCJ7e2luZGV4fX0gLyB7e3NsaWRlc0xlbmd0aH19XCIsXG4gICAgICAgIGNvbnRhaW5lck1lc3NhZ2U6IG51bGwsXG4gICAgICAgIGNvbnRhaW5lclJvbGVEZXNjcmlwdGlvbk1lc3NhZ2U6IG51bGwsXG4gICAgICAgIGNvbnRhaW5lclJvbGU6IG51bGwsXG4gICAgICAgIGl0ZW1Sb2xlRGVzY3JpcHRpb25NZXNzYWdlOiBudWxsLFxuICAgICAgICBzbGlkZVJvbGU6IFwiZ3JvdXBcIixcbiAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgIHNjcm9sbE9uRm9jdXM6ICEwXG4gICAgICB9XG4gICAgfSksIHQuYTExeSA9IHtjbGlja2VkOiAhMX07XG4gICAgbGV0IHIsIG4sIGwgPSBudWxsLCBvID0gKG5ldyBEYXRlKS5nZXRUaW1lKCk7XG5cbiAgICBmdW5jdGlvbiBkKGUpIHtcbiAgICAgIGNvbnN0IHQgPSBsO1xuICAgICAgMCAhPT0gdC5sZW5ndGggJiYgKHQuaW5uZXJIVE1MID0gXCJcIiwgdC5pbm5lckhUTUwgPSBlKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGMoZSkge1xuICAgICAgKGUgPSBUKGUpKS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgZS5zZXRBdHRyaWJ1dGUoXCJ0YWJJbmRleFwiLCBcIjBcIilcbiAgICAgIH0pKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHAoZSkge1xuICAgICAgKGUgPSBUKGUpKS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgZS5zZXRBdHRyaWJ1dGUoXCJ0YWJJbmRleFwiLCBcIi0xXCIpXG4gICAgICB9KSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1KGUsIHQpIHtcbiAgICAgIChlID0gVChlKSkuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgIGUuc2V0QXR0cmlidXRlKFwicm9sZVwiLCB0KVxuICAgICAgfSkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbShlLCB0KSB7XG4gICAgICAoZSA9IFQoZSkpLmZvckVhY2goKGUgPT4ge1xuICAgICAgICBlLnNldEF0dHJpYnV0ZShcImFyaWEtcm9sZWRlc2NyaXB0aW9uXCIsIHQpXG4gICAgICB9KSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoKGUsIHQpIHtcbiAgICAgIChlID0gVChlKSkuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgIGUuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB0KVxuICAgICAgfSkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZihlKSB7XG4gICAgICAoZSA9IFQoZSkpLmZvckVhY2goKGUgPT4ge1xuICAgICAgICBlLnNldEF0dHJpYnV0ZShcImFyaWEtZGlzYWJsZWRcIiwgITApXG4gICAgICB9KSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnKGUpIHtcbiAgICAgIChlID0gVChlKSkuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgIGUuc2V0QXR0cmlidXRlKFwiYXJpYS1kaXNhYmxlZFwiLCAhMSlcbiAgICAgIH0pKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHcoZSkge1xuICAgICAgaWYgKDEzICE9PSBlLmtleUNvZGUgJiYgMzIgIT09IGUua2V5Q29kZSkgcmV0dXJuO1xuICAgICAgY29uc3QgcyA9IHQucGFyYW1zLmExMXksIGEgPSBlLnRhcmdldDtcbiAgICAgIGlmICghdC5wYWdpbmF0aW9uIHx8ICF0LnBhZ2luYXRpb24uZWwgfHwgYSAhPT0gdC5wYWdpbmF0aW9uLmVsICYmICF0LnBhZ2luYXRpb24uZWwuY29udGFpbnMoZS50YXJnZXQpIHx8IGUudGFyZ2V0Lm1hdGNoZXMobmUodC5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpKSB7XG4gICAgICAgIGlmICh0Lm5hdmlnYXRpb24gJiYgdC5uYXZpZ2F0aW9uLnByZXZFbCAmJiB0Lm5hdmlnYXRpb24ubmV4dEVsKSB7XG4gICAgICAgICAgY29uc3QgZSA9IFQodC5uYXZpZ2F0aW9uLnByZXZFbCk7XG4gICAgICAgICAgVCh0Lm5hdmlnYXRpb24ubmV4dEVsKS5pbmNsdWRlcyhhKSAmJiAodC5pc0VuZCAmJiAhdC5wYXJhbXMubG9vcCB8fCB0LnNsaWRlTmV4dCgpLCB0LmlzRW5kID8gZChzLmxhc3RTbGlkZU1lc3NhZ2UpIDogZChzLm5leHRTbGlkZU1lc3NhZ2UpKSwgZS5pbmNsdWRlcyhhKSAmJiAodC5pc0JlZ2lubmluZyAmJiAhdC5wYXJhbXMubG9vcCB8fCB0LnNsaWRlUHJldigpLCB0LmlzQmVnaW5uaW5nID8gZChzLmZpcnN0U2xpZGVNZXNzYWdlKSA6IGQocy5wcmV2U2xpZGVNZXNzYWdlKSlcbiAgICAgICAgfVxuICAgICAgICB0LnBhZ2luYXRpb24gJiYgYS5tYXRjaGVzKG5lKHQucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSAmJiBhLmNsaWNrKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBiKCkge1xuICAgICAgcmV0dXJuIHQucGFnaW5hdGlvbiAmJiB0LnBhZ2luYXRpb24uYnVsbGV0cyAmJiB0LnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGhcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBFKCkge1xuICAgICAgcmV0dXJuIGIoKSAmJiB0LnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZVxuICAgIH1cblxuICAgIGNvbnN0IHggPSAoZSwgdCwgcykgPT4ge1xuICAgICAgYyhlKSwgXCJCVVRUT05cIiAhPT0gZS50YWdOYW1lICYmICh1KGUsIFwiYnV0dG9uXCIpLCBlLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHcpKSwgaChlLCBzKSwgZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgKGUgPSBUKGUpKS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICBlLnNldEF0dHJpYnV0ZShcImFyaWEtY29udHJvbHNcIiwgdClcbiAgICAgICAgfSkpXG4gICAgICB9KGUsIHQpXG4gICAgfSwgUyA9IGUgPT4ge1xuICAgICAgbiAmJiBuICE9PSBlLnRhcmdldCAmJiAhbi5jb250YWlucyhlLnRhcmdldCkgJiYgKHIgPSAhMCksIHQuYTExeS5jbGlja2VkID0gITBcbiAgICB9LCBNID0gKCkgPT4ge1xuICAgICAgciA9ICExLCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCgpID0+IHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgoKSA9PiB7XG4gICAgICAgICAgdC5kZXN0cm95ZWQgfHwgKHQuYTExeS5jbGlja2VkID0gITEpXG4gICAgICAgIH0pKVxuICAgICAgfSkpXG4gICAgfSwgQyA9IGUgPT4ge1xuICAgICAgbyA9IChuZXcgRGF0ZSkuZ2V0VGltZSgpXG4gICAgfSwgUCA9IGUgPT4ge1xuICAgICAgaWYgKHQuYTExeS5jbGlja2VkIHx8ICF0LnBhcmFtcy5hMTF5LnNjcm9sbE9uRm9jdXMpIHJldHVybjtcbiAgICAgIGlmICgobmV3IERhdGUpLmdldFRpbWUoKSAtIG8gPCAxMDApIHJldHVybjtcbiAgICAgIGNvbnN0IHMgPSBlLnRhcmdldC5jbG9zZXN0KGAuJHt0LnBhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gICAgICBpZiAoIXMgfHwgIXQuc2xpZGVzLmluY2x1ZGVzKHMpKSByZXR1cm47XG4gICAgICBuID0gcztcbiAgICAgIGNvbnN0IGEgPSB0LnNsaWRlcy5pbmRleE9mKHMpID09PSB0LmFjdGl2ZUluZGV4LFxuICAgICAgICBpID0gdC5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyAmJiB0LnZpc2libGVTbGlkZXMgJiYgdC52aXNpYmxlU2xpZGVzLmluY2x1ZGVzKHMpO1xuICAgICAgYSB8fCBpIHx8IGUuc291cmNlQ2FwYWJpbGl0aWVzICYmIGUuc291cmNlQ2FwYWJpbGl0aWVzLmZpcmVzVG91Y2hFdmVudHMgfHwgKHQuaXNIb3Jpem9udGFsKCkgPyB0LmVsLnNjcm9sbExlZnQgPSAwIDogdC5lbC5zY3JvbGxUb3AgPSAwLCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCgpID0+IHtcbiAgICAgICAgciB8fCAodC5wYXJhbXMubG9vcCA/IHQuc2xpZGVUb0xvb3AocGFyc2VJbnQocy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKSksIDApIDogdC5zbGlkZVRvKHQuc2xpZGVzLmluZGV4T2YocyksIDApLCByID0gITEpXG4gICAgICB9KSkpXG4gICAgfSwgTCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGUgPSB0LnBhcmFtcy5hMTF5O1xuICAgICAgZS5pdGVtUm9sZURlc2NyaXB0aW9uTWVzc2FnZSAmJiBtKHQuc2xpZGVzLCBlLml0ZW1Sb2xlRGVzY3JpcHRpb25NZXNzYWdlKSwgZS5zbGlkZVJvbGUgJiYgdSh0LnNsaWRlcywgZS5zbGlkZVJvbGUpO1xuICAgICAgY29uc3QgcyA9IHQuc2xpZGVzLmxlbmd0aDtcbiAgICAgIGUuc2xpZGVMYWJlbE1lc3NhZ2UgJiYgdC5zbGlkZXMuZm9yRWFjaCgoKGEsIGkpID0+IHtcbiAgICAgICAgY29uc3QgciA9IHQucGFyYW1zLmxvb3AgPyBwYXJzZUludChhLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIpLCAxMCkgOiBpO1xuICAgICAgICBoKGEsIGUuc2xpZGVMYWJlbE1lc3NhZ2UucmVwbGFjZSgvXFx7XFx7aW5kZXhcXH1cXH0vLCByICsgMSkucmVwbGFjZSgvXFx7XFx7c2xpZGVzTGVuZ3RoXFx9XFx9LywgcykpXG4gICAgICB9KSlcbiAgICB9LCBJID0gKCkgPT4ge1xuICAgICAgY29uc3QgZSA9IHQucGFyYW1zLmExMXk7XG4gICAgICB0LmVsLmFwcGVuZChsKTtcbiAgICAgIGNvbnN0IHMgPSB0LmVsO1xuICAgICAgZS5jb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlICYmIG0ocywgZS5jb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlKSwgZS5jb250YWluZXJNZXNzYWdlICYmIGgocywgZS5jb250YWluZXJNZXNzYWdlKSwgZS5jb250YWluZXJSb2xlICYmIHUocywgZS5jb250YWluZXJSb2xlKTtcbiAgICAgIGNvbnN0IGkgPSB0LndyYXBwZXJFbCxcbiAgICAgICAgciA9IGUuaWQgfHwgaS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSB8fCBgc3dpcGVyLXdyYXBwZXItJHtuID0gMTYsIHZvaWQgMCA9PT0gbiAmJiAobiA9IDE2KSwgXCJ4XCIucmVwZWF0KG4pLnJlcGxhY2UoL3gvZywgKCgpID0+IE1hdGgucm91bmQoMTYgKiBNYXRoLnJhbmRvbSgpKS50b1N0cmluZygxNikpKX1gO1xuICAgICAgdmFyIG47XG4gICAgICBjb25zdCBvID0gdC5wYXJhbXMuYXV0b3BsYXkgJiYgdC5wYXJhbXMuYXV0b3BsYXkuZW5hYmxlZCA/IFwib2ZmXCIgOiBcInBvbGl0ZVwiO1xuICAgICAgdmFyIGQ7XG4gICAgICBkID0gciwgVChpKS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgZS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBkKVxuICAgICAgfSkpLCBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAoZSA9IFQoZSkpLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgIGUuc2V0QXR0cmlidXRlKFwiYXJpYS1saXZlXCIsIHQpXG4gICAgICAgIH0pKVxuICAgICAgfShpLCBvKSwgTCgpO1xuICAgICAgbGV0IHtuZXh0RWw6IGMsIHByZXZFbDogcH0gPSB0Lm5hdmlnYXRpb24gPyB0Lm5hdmlnYXRpb24gOiB7fTtcbiAgICAgIGlmIChjID0gVChjKSwgcCA9IFQocCksIGMgJiYgYy5mb3JFYWNoKCh0ID0+IHgodCwgciwgZS5uZXh0U2xpZGVNZXNzYWdlKSkpLCBwICYmIHAuZm9yRWFjaCgodCA9PiB4KHQsIHIsIGUucHJldlNsaWRlTWVzc2FnZSkpKSwgRSgpKSB7XG4gICAgICAgIFQodC5wYWdpbmF0aW9uLmVsKS5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICBlLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHcpXG4gICAgICAgIH0pKVxuICAgICAgfVxuICAgICAgYSgpLmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIEMpLCB0LmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCBQLCAhMCksIHQuZWwuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIFAsICEwKSwgdC5lbC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgUywgITApLCB0LmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgTSwgITApXG4gICAgfTtcbiAgICBpKFwiYmVmb3JlSW5pdFwiLCAoKCkgPT4ge1xuICAgICAgbCA9IHYoXCJzcGFuXCIsIHQucGFyYW1zLmExMXkubm90aWZpY2F0aW9uQ2xhc3MpLCBsLnNldEF0dHJpYnV0ZShcImFyaWEtbGl2ZVwiLCBcImFzc2VydGl2ZVwiKSwgbC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWF0b21pY1wiLCBcInRydWVcIilcbiAgICB9KSksIGkoXCJhZnRlckluaXRcIiwgKCgpID0+IHtcbiAgICAgIHQucGFyYW1zLmExMXkuZW5hYmxlZCAmJiBJKClcbiAgICB9KSksIGkoXCJzbGlkZXNMZW5ndGhDaGFuZ2Ugc25hcEdyaWRMZW5ndGhDaGFuZ2Ugc2xpZGVzR3JpZExlbmd0aENoYW5nZVwiLCAoKCkgPT4ge1xuICAgICAgdC5wYXJhbXMuYTExeS5lbmFibGVkICYmIEwoKVxuICAgIH0pKSwgaShcImZyb21FZGdlIHRvRWRnZSBhZnRlckluaXQgbG9jayB1bmxvY2tcIiwgKCgpID0+IHtcbiAgICAgIHQucGFyYW1zLmExMXkuZW5hYmxlZCAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0LnBhcmFtcy5sb29wIHx8IHQucGFyYW1zLnJld2luZCB8fCAhdC5uYXZpZ2F0aW9uKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHtuZXh0RWw6IGUsIHByZXZFbDogc30gPSB0Lm5hdmlnYXRpb247XG4gICAgICAgIHMgJiYgKHQuaXNCZWdpbm5pbmcgPyAoZihzKSwgcChzKSkgOiAoZyhzKSwgYyhzKSkpLCBlICYmICh0LmlzRW5kID8gKGYoZSksIHAoZSkpIDogKGcoZSksIGMoZSkpKVxuICAgICAgfSgpXG4gICAgfSkpLCBpKFwicGFnaW5hdGlvblVwZGF0ZVwiLCAoKCkgPT4ge1xuICAgICAgdC5wYXJhbXMuYTExeS5lbmFibGVkICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgZSA9IHQucGFyYW1zLmExMXk7XG4gICAgICAgIGIoKSAmJiB0LnBhZ2luYXRpb24uYnVsbGV0cy5mb3JFYWNoKChzID0+IHtcbiAgICAgICAgICB0LnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiAoYyhzKSwgdC5wYXJhbXMucGFnaW5hdGlvbi5yZW5kZXJCdWxsZXQgfHwgKHUocywgXCJidXR0b25cIiksIGgocywgZS5wYWdpbmF0aW9uQnVsbGV0TWVzc2FnZS5yZXBsYWNlKC9cXHtcXHtpbmRleFxcfVxcfS8sIHkocykgKyAxKSkpKSwgcy5tYXRjaGVzKG5lKHQucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0QWN0aXZlQ2xhc3MpKSA/IHMuc2V0QXR0cmlidXRlKFwiYXJpYS1jdXJyZW50XCIsIFwidHJ1ZVwiKSA6IHMucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1jdXJyZW50XCIpXG4gICAgICAgIH0pKVxuICAgICAgfSgpXG4gICAgfSkpLCBpKFwiZGVzdHJveVwiLCAoKCkgPT4ge1xuICAgICAgdC5wYXJhbXMuYTExeS5lbmFibGVkICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbCAmJiBsLnJlbW92ZSgpO1xuICAgICAgICBsZXQge25leHRFbDogZSwgcHJldkVsOiBzfSA9IHQubmF2aWdhdGlvbiA/IHQubmF2aWdhdGlvbiA6IHt9O1xuICAgICAgICBlID0gVChlKSwgcyA9IFQocyksIGUgJiYgZS5mb3JFYWNoKChlID0+IGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdykpKSwgcyAmJiBzLmZvckVhY2goKGUgPT4gZS5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB3KSkpLCBFKCkgJiYgVCh0LnBhZ2luYXRpb24uZWwpLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgIGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdylcbiAgICAgICAgfSkpO1xuICAgICAgICBhKCkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgQyksIHQuZWwgJiYgXCJzdHJpbmdcIiAhPSB0eXBlb2YgdC5lbCAmJiAodC5lbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgUCwgITApLCB0LmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVyZG93blwiLCBTLCAhMCksIHQuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCBNLCAhMCkpXG4gICAgICB9KClcbiAgICB9KSlcbiAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICBsZXQge3N3aXBlcjogdCwgZXh0ZW5kUGFyYW1zOiBzLCBvbjogYX0gPSBlO1xuICAgIHMoe2hpc3Rvcnk6IHtlbmFibGVkOiAhMSwgcm9vdDogXCJcIiwgcmVwbGFjZVN0YXRlOiAhMSwga2V5OiBcInNsaWRlc1wiLCBrZWVwUXVlcnk6ICExfX0pO1xuICAgIGxldCBpID0gITEsIG4gPSB7fTtcbiAgICBjb25zdCBsID0gZSA9PiBlLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCBcIi1cIikucmVwbGFjZSgvW15cXHctXSsvZywgXCJcIikucmVwbGFjZSgvLS0rL2csIFwiLVwiKS5yZXBsYWNlKC9eLSsvLCBcIlwiKS5yZXBsYWNlKC8tKyQvLCBcIlwiKSxcbiAgICAgIG8gPSBlID0+IHtcbiAgICAgICAgY29uc3QgdCA9IHIoKTtcbiAgICAgICAgbGV0IHM7XG4gICAgICAgIHMgPSBlID8gbmV3IFVSTChlKSA6IHQubG9jYXRpb247XG4gICAgICAgIGNvbnN0IGEgPSBzLnBhdGhuYW1lLnNsaWNlKDEpLnNwbGl0KFwiL1wiKS5maWx0ZXIoKGUgPT4gXCJcIiAhPT0gZSkpLCBpID0gYS5sZW5ndGg7XG4gICAgICAgIHJldHVybiB7a2V5OiBhW2kgLSAyXSwgdmFsdWU6IGFbaSAtIDFdfVxuICAgICAgfSwgZCA9IChlLCBzKSA9PiB7XG4gICAgICAgIGNvbnN0IGEgPSByKCk7XG4gICAgICAgIGlmICghaSB8fCAhdC5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSByZXR1cm47XG4gICAgICAgIGxldCBuO1xuICAgICAgICBuID0gdC5wYXJhbXMudXJsID8gbmV3IFVSTCh0LnBhcmFtcy51cmwpIDogYS5sb2NhdGlvbjtcbiAgICAgICAgY29uc3QgbyA9IHQudmlydHVhbCAmJiB0LnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyB0LnNsaWRlc0VsLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c31cIl1gKSA6IHQuc2xpZGVzW3NdO1xuICAgICAgICBsZXQgZCA9IGwoby5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhpc3RvcnlcIikpO1xuICAgICAgICBpZiAodC5wYXJhbXMuaGlzdG9yeS5yb290Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBsZXQgcyA9IHQucGFyYW1zLmhpc3Rvcnkucm9vdDtcbiAgICAgICAgICBcIi9cIiA9PT0gc1tzLmxlbmd0aCAtIDFdICYmIChzID0gcy5zbGljZSgwLCBzLmxlbmd0aCAtIDEpKSwgZCA9IGAke3N9LyR7ZSA/IGAke2V9L2AgOiBcIlwifSR7ZH1gXG4gICAgICAgIH0gZWxzZSBuLnBhdGhuYW1lLmluY2x1ZGVzKGUpIHx8IChkID0gYCR7ZSA/IGAke2V9L2AgOiBcIlwifSR7ZH1gKTtcbiAgICAgICAgdC5wYXJhbXMuaGlzdG9yeS5rZWVwUXVlcnkgJiYgKGQgKz0gbi5zZWFyY2gpO1xuICAgICAgICBjb25zdCBjID0gYS5oaXN0b3J5LnN0YXRlO1xuICAgICAgICBjICYmIGMudmFsdWUgPT09IGQgfHwgKHQucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlID8gYS5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7dmFsdWU6IGR9LCBudWxsLCBkKSA6IGEuaGlzdG9yeS5wdXNoU3RhdGUoe3ZhbHVlOiBkfSwgbnVsbCwgZCkpXG4gICAgICB9LCBjID0gKGUsIHMsIGEpID0+IHtcbiAgICAgICAgaWYgKHMpIGZvciAobGV0IGkgPSAwLCByID0gdC5zbGlkZXMubGVuZ3RoOyBpIDwgcjsgaSArPSAxKSB7XG4gICAgICAgICAgY29uc3QgciA9IHQuc2xpZGVzW2ldO1xuICAgICAgICAgIGlmIChsKHIuZ2V0QXR0cmlidXRlKFwiZGF0YS1oaXN0b3J5XCIpKSA9PT0gcykge1xuICAgICAgICAgICAgY29uc3QgcyA9IHQuZ2V0U2xpZGVJbmRleChyKTtcbiAgICAgICAgICAgIHQuc2xpZGVUbyhzLCBlLCBhKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHQuc2xpZGVUbygwLCBlLCBhKVxuICAgICAgfSwgcCA9ICgpID0+IHtcbiAgICAgICAgbiA9IG8odC5wYXJhbXMudXJsKSwgYyh0LnBhcmFtcy5zcGVlZCwgbi52YWx1ZSwgITEpXG4gICAgICB9O1xuICAgIGEoXCJpbml0XCIsICgoKSA9PiB7XG4gICAgICB0LnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQgJiYgKCgpID0+IHtcbiAgICAgICAgY29uc3QgZSA9IHIoKTtcbiAgICAgICAgaWYgKHQucGFyYW1zLmhpc3RvcnkpIHtcbiAgICAgICAgICBpZiAoIWUuaGlzdG9yeSB8fCAhZS5oaXN0b3J5LnB1c2hTdGF0ZSkgcmV0dXJuIHQucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCA9ICExLCB2b2lkICh0LnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkID0gITApO1xuICAgICAgICAgIGkgPSAhMCwgbiA9IG8odC5wYXJhbXMudXJsKSwgbi5rZXkgfHwgbi52YWx1ZSA/IChjKDAsIG4udmFsdWUsIHQucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCksIHQucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlIHx8IGUuYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIHApKSA6IHQucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlIHx8IGUuYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIHApXG4gICAgICAgIH1cbiAgICAgIH0pKClcbiAgICB9KSksIGEoXCJkZXN0cm95XCIsICgoKSA9PiB7XG4gICAgICB0LnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQgJiYgKCgpID0+IHtcbiAgICAgICAgY29uc3QgZSA9IHIoKTtcbiAgICAgICAgdC5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUgfHwgZS5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIiwgcClcbiAgICAgIH0pKClcbiAgICB9KSksIGEoXCJ0cmFuc2l0aW9uRW5kIF9mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlXCIsICgoKSA9PiB7XG4gICAgICBpICYmIGQodC5wYXJhbXMuaGlzdG9yeS5rZXksIHQuYWN0aXZlSW5kZXgpXG4gICAgfSkpLCBhKFwic2xpZGVDaGFuZ2VcIiwgKCgpID0+IHtcbiAgICAgIGkgJiYgdC5wYXJhbXMuY3NzTW9kZSAmJiBkKHQucGFyYW1zLmhpc3Rvcnkua2V5LCB0LmFjdGl2ZUluZGV4KVxuICAgIH0pKVxuICB9LCBmdW5jdGlvbiAoZSkge1xuICAgIGxldCB7c3dpcGVyOiB0LCBleHRlbmRQYXJhbXM6IHMsIGVtaXQ6IGksIG9uOiBufSA9IGUsIGwgPSAhMTtcbiAgICBjb25zdCBvID0gYSgpLCBkID0gcigpO1xuICAgIHMoe1xuICAgICAgaGFzaE5hdmlnYXRpb246IHtcbiAgICAgICAgZW5hYmxlZDogITEsIHJlcGxhY2VTdGF0ZTogITEsIHdhdGNoU3RhdGU6ICExLCBnZXRTbGlkZUluZGV4KGUsIHMpIHtcbiAgICAgICAgICBpZiAodC52aXJ0dWFsICYmIHQucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgICAgICAgY29uc3QgZSA9IHQuc2xpZGVzLmZpbHRlcigoZSA9PiBlLmdldEF0dHJpYnV0ZShcImRhdGEtaGFzaFwiKSA9PT0gcykpWzBdO1xuICAgICAgICAgICAgaWYgKCFlKSByZXR1cm4gMDtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChlLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLXNsaWRlLWluZGV4XCIpLCAxMClcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHQuZ2V0U2xpZGVJbmRleChmKHQuc2xpZGVzRWwsIGAuJHt0LnBhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLWhhc2g9XCIke3N9XCJdLCBzd2lwZXItc2xpZGVbZGF0YS1oYXNoPVwiJHtzfVwiXWApWzBdKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgYyA9ICgpID0+IHtcbiAgICAgIGkoXCJoYXNoQ2hhbmdlXCIpO1xuICAgICAgY29uc3QgZSA9IG8ubG9jYXRpb24uaGFzaC5yZXBsYWNlKFwiI1wiLCBcIlwiKSxcbiAgICAgICAgcyA9IHQudmlydHVhbCAmJiB0LnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyB0LnNsaWRlc0VsLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7dC5hY3RpdmVJbmRleH1cIl1gKSA6IHQuc2xpZGVzW3QuYWN0aXZlSW5kZXhdO1xuICAgICAgaWYgKGUgIT09IChzID8gcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhhc2hcIikgOiBcIlwiKSkge1xuICAgICAgICBjb25zdCBzID0gdC5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZ2V0U2xpZGVJbmRleCh0LCBlKTtcbiAgICAgICAgaWYgKHZvaWQgMCA9PT0gcyB8fCBOdW1iZXIuaXNOYU4ocykpIHJldHVybjtcbiAgICAgICAgdC5zbGlkZVRvKHMpXG4gICAgICB9XG4gICAgfSwgcCA9ICgpID0+IHtcbiAgICAgIGlmICghbCB8fCAhdC5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgY29uc3QgZSA9IHQudmlydHVhbCAmJiB0LnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyB0LnNsaWRlc0VsLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7dC5hY3RpdmVJbmRleH1cIl1gKSA6IHQuc2xpZGVzW3QuYWN0aXZlSW5kZXhdLFxuICAgICAgICBzID0gZSA/IGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1oYXNoXCIpIHx8IGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1oaXN0b3J5XCIpIDogXCJcIjtcbiAgICAgIHQucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLnJlcGxhY2VTdGF0ZSAmJiBkLmhpc3RvcnkgJiYgZC5oaXN0b3J5LnJlcGxhY2VTdGF0ZSA/IChkLmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIGAjJHtzfWAgfHwgXCJcIiksIGkoXCJoYXNoU2V0XCIpKSA6IChvLmxvY2F0aW9uLmhhc2ggPSBzIHx8IFwiXCIsIGkoXCJoYXNoU2V0XCIpKVxuICAgIH07XG4gICAgbihcImluaXRcIiwgKCgpID0+IHtcbiAgICAgIHQucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQgJiYgKCgpID0+IHtcbiAgICAgICAgaWYgKCF0LnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkIHx8IHQucGFyYW1zLmhpc3RvcnkgJiYgdC5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSByZXR1cm47XG4gICAgICAgIGwgPSAhMDtcbiAgICAgICAgY29uc3QgZSA9IG8ubG9jYXRpb24uaGFzaC5yZXBsYWNlKFwiI1wiLCBcIlwiKTtcbiAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICBjb25zdCBzID0gMCwgYSA9IHQucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmdldFNsaWRlSW5kZXgodCwgZSk7XG4gICAgICAgICAgdC5zbGlkZVRvKGEgfHwgMCwgcywgdC5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCAhMClcbiAgICAgICAgfVxuICAgICAgICB0LnBhcmFtcy5oYXNoTmF2aWdhdGlvbi53YXRjaFN0YXRlICYmIGQuYWRkRXZlbnRMaXN0ZW5lcihcImhhc2hjaGFuZ2VcIiwgYylcbiAgICAgIH0pKClcbiAgICB9KSksIG4oXCJkZXN0cm95XCIsICgoKSA9PiB7XG4gICAgICB0LnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkICYmIHQucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLndhdGNoU3RhdGUgJiYgZC5yZW1vdmVFdmVudExpc3RlbmVyKFwiaGFzaGNoYW5nZVwiLCBjKVxuICAgIH0pKSwgbihcInRyYW5zaXRpb25FbmQgX2ZyZWVNb2RlTm9Nb21lbnR1bVJlbGVhc2VcIiwgKCgpID0+IHtcbiAgICAgIGwgJiYgcCgpXG4gICAgfSkpLCBuKFwic2xpZGVDaGFuZ2VcIiwgKCgpID0+IHtcbiAgICAgIGwgJiYgdC5wYXJhbXMuY3NzTW9kZSAmJiBwKClcbiAgICB9KSlcbiAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICBsZXQgdCwgcywge3N3aXBlcjogaSwgZXh0ZW5kUGFyYW1zOiByLCBvbjogbiwgZW1pdDogbCwgcGFyYW1zOiBvfSA9IGU7XG4gICAgaS5hdXRvcGxheSA9IHtydW5uaW5nOiAhMSwgcGF1c2VkOiAhMSwgdGltZUxlZnQ6IDB9LCByKHtcbiAgICAgIGF1dG9wbGF5OiB7XG4gICAgICAgIGVuYWJsZWQ6ICExLFxuICAgICAgICBkZWxheTogM2UzLFxuICAgICAgICB3YWl0Rm9yVHJhbnNpdGlvbjogITAsXG4gICAgICAgIGRpc2FibGVPbkludGVyYWN0aW9uOiAhMSxcbiAgICAgICAgc3RvcE9uTGFzdFNsaWRlOiAhMSxcbiAgICAgICAgcmV2ZXJzZURpcmVjdGlvbjogITEsXG4gICAgICAgIHBhdXNlT25Nb3VzZUVudGVyOiAhMVxuICAgICAgfVxuICAgIH0pO1xuICAgIGxldCBkLCBjLCBwLCB1LCBtLCBoLCBmLCBnLCB2ID0gbyAmJiBvLmF1dG9wbGF5ID8gby5hdXRvcGxheS5kZWxheSA6IDNlMyxcbiAgICAgIHcgPSBvICYmIG8uYXV0b3BsYXkgPyBvLmF1dG9wbGF5LmRlbGF5IDogM2UzLCBiID0gKG5ldyBEYXRlKS5nZXRUaW1lKCk7XG5cbiAgICBmdW5jdGlvbiB5KGUpIHtcbiAgICAgIGkgJiYgIWkuZGVzdHJveWVkICYmIGkud3JhcHBlckVsICYmIGUudGFyZ2V0ID09PSBpLndyYXBwZXJFbCAmJiAoaS53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIiwgeSksIGcgfHwgZS5kZXRhaWwgJiYgZS5kZXRhaWwuYnlTd2lwZXJUb3VjaE1vdmUgfHwgQygpKVxuICAgIH1cblxuICAgIGNvbnN0IEUgPSAoKSA9PiB7XG4gICAgICBpZiAoaS5kZXN0cm95ZWQgfHwgIWkuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgICAgaS5hdXRvcGxheS5wYXVzZWQgPyBjID0gITAgOiBjICYmICh3ID0gZCwgYyA9ICExKTtcbiAgICAgIGNvbnN0IGUgPSBpLmF1dG9wbGF5LnBhdXNlZCA/IGQgOiBiICsgdyAtIChuZXcgRGF0ZSkuZ2V0VGltZSgpO1xuICAgICAgaS5hdXRvcGxheS50aW1lTGVmdCA9IGUsIGwoXCJhdXRvcGxheVRpbWVMZWZ0XCIsIGUsIGUgLyB2KSwgcyA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKCkgPT4ge1xuICAgICAgICBFKClcbiAgICAgIH0pKVxuICAgIH0sIHggPSBlID0+IHtcbiAgICAgIGlmIChpLmRlc3Ryb3llZCB8fCAhaS5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShzKSwgRSgpO1xuICAgICAgbGV0IGEgPSB2b2lkIDAgPT09IGUgPyBpLnBhcmFtcy5hdXRvcGxheS5kZWxheSA6IGU7XG4gICAgICB2ID0gaS5wYXJhbXMuYXV0b3BsYXkuZGVsYXksIHcgPSBpLnBhcmFtcy5hdXRvcGxheS5kZWxheTtcbiAgICAgIGNvbnN0IHIgPSAoKCkgPT4ge1xuICAgICAgICBsZXQgZTtcbiAgICAgICAgaWYgKGUgPSBpLnZpcnR1YWwgJiYgaS5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gaS5zbGlkZXMuZmlsdGVyKChlID0+IGUuY2xhc3NMaXN0LmNvbnRhaW5zKFwic3dpcGVyLXNsaWRlLWFjdGl2ZVwiKSkpWzBdIDogaS5zbGlkZXNbaS5hY3RpdmVJbmRleF0sICFlKSByZXR1cm47XG4gICAgICAgIHJldHVybiBwYXJzZUludChlLmdldEF0dHJpYnV0ZShcImRhdGEtc3dpcGVyLWF1dG9wbGF5XCIpLCAxMClcbiAgICAgIH0pKCk7XG4gICAgICAhTnVtYmVyLmlzTmFOKHIpICYmIHIgPiAwICYmIHZvaWQgMCA9PT0gZSAmJiAoYSA9IHIsIHYgPSByLCB3ID0gciksIGQgPSBhO1xuICAgICAgY29uc3QgbiA9IGkucGFyYW1zLnNwZWVkLCBvID0gKCkgPT4ge1xuICAgICAgICBpICYmICFpLmRlc3Ryb3llZCAmJiAoaS5wYXJhbXMuYXV0b3BsYXkucmV2ZXJzZURpcmVjdGlvbiA/ICFpLmlzQmVnaW5uaW5nIHx8IGkucGFyYW1zLmxvb3AgfHwgaS5wYXJhbXMucmV3aW5kID8gKGkuc2xpZGVQcmV2KG4sICEwLCAhMCksIGwoXCJhdXRvcGxheVwiKSkgOiBpLnBhcmFtcy5hdXRvcGxheS5zdG9wT25MYXN0U2xpZGUgfHwgKGkuc2xpZGVUbyhpLnNsaWRlcy5sZW5ndGggLSAxLCBuLCAhMCwgITApLCBsKFwiYXV0b3BsYXlcIikpIDogIWkuaXNFbmQgfHwgaS5wYXJhbXMubG9vcCB8fCBpLnBhcmFtcy5yZXdpbmQgPyAoaS5zbGlkZU5leHQobiwgITAsICEwKSwgbChcImF1dG9wbGF5XCIpKSA6IGkucGFyYW1zLmF1dG9wbGF5LnN0b3BPbkxhc3RTbGlkZSB8fCAoaS5zbGlkZVRvKDAsIG4sICEwLCAhMCksIGwoXCJhdXRvcGxheVwiKSksIGkucGFyYW1zLmNzc01vZGUgJiYgKGIgPSAobmV3IERhdGUpLmdldFRpbWUoKSwgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgoKSA9PiB7XG4gICAgICAgICAgeCgpXG4gICAgICAgIH0pKSkpXG4gICAgICB9O1xuICAgICAgcmV0dXJuIGEgPiAwID8gKGNsZWFyVGltZW91dCh0KSwgdCA9IHNldFRpbWVvdXQoKCgpID0+IHtcbiAgICAgICAgbygpXG4gICAgICB9KSwgYSkpIDogcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgoKSA9PiB7XG4gICAgICAgIG8oKVxuICAgICAgfSkpLCBhXG4gICAgfSwgUyA9ICgpID0+IHtcbiAgICAgIGIgPSAobmV3IERhdGUpLmdldFRpbWUoKSwgaS5hdXRvcGxheS5ydW5uaW5nID0gITAsIHgoKSwgbChcImF1dG9wbGF5U3RhcnRcIilcbiAgICB9LCBUID0gKCkgPT4ge1xuICAgICAgaS5hdXRvcGxheS5ydW5uaW5nID0gITEsIGNsZWFyVGltZW91dCh0KSwgY2FuY2VsQW5pbWF0aW9uRnJhbWUocyksIGwoXCJhdXRvcGxheVN0b3BcIilcbiAgICB9LCBNID0gKGUsIHMpID0+IHtcbiAgICAgIGlmIChpLmRlc3Ryb3llZCB8fCAhaS5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgICBjbGVhclRpbWVvdXQodCksIGUgfHwgKGYgPSAhMCk7XG4gICAgICBjb25zdCBhID0gKCkgPT4ge1xuICAgICAgICBsKFwiYXV0b3BsYXlQYXVzZVwiKSwgaS5wYXJhbXMuYXV0b3BsYXkud2FpdEZvclRyYW5zaXRpb24gPyBpLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCB5KSA6IEMoKVxuICAgICAgfTtcbiAgICAgIGlmIChpLmF1dG9wbGF5LnBhdXNlZCA9ICEwLCBzKSByZXR1cm4gaCAmJiAoZCA9IGkucGFyYW1zLmF1dG9wbGF5LmRlbGF5KSwgaCA9ICExLCB2b2lkIGEoKTtcbiAgICAgIGNvbnN0IHIgPSBkIHx8IGkucGFyYW1zLmF1dG9wbGF5LmRlbGF5O1xuICAgICAgZCA9IHIgLSAoKG5ldyBEYXRlKS5nZXRUaW1lKCkgLSBiKSwgaS5pc0VuZCAmJiBkIDwgMCAmJiAhaS5wYXJhbXMubG9vcCB8fCAoZCA8IDAgJiYgKGQgPSAwKSwgYSgpKVxuICAgIH0sIEMgPSAoKSA9PiB7XG4gICAgICBpLmlzRW5kICYmIGQgPCAwICYmICFpLnBhcmFtcy5sb29wIHx8IGkuZGVzdHJveWVkIHx8ICFpLmF1dG9wbGF5LnJ1bm5pbmcgfHwgKGIgPSAobmV3IERhdGUpLmdldFRpbWUoKSwgZiA/IChmID0gITEsIHgoZCkpIDogeCgpLCBpLmF1dG9wbGF5LnBhdXNlZCA9ICExLCBsKFwiYXV0b3BsYXlSZXN1bWVcIikpXG4gICAgfSwgUCA9ICgpID0+IHtcbiAgICAgIGlmIChpLmRlc3Ryb3llZCB8fCAhaS5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgICBjb25zdCBlID0gYSgpO1xuICAgICAgXCJoaWRkZW5cIiA9PT0gZS52aXNpYmlsaXR5U3RhdGUgJiYgKGYgPSAhMCwgTSghMCkpLCBcInZpc2libGVcIiA9PT0gZS52aXNpYmlsaXR5U3RhdGUgJiYgQygpXG4gICAgfSwgTCA9IGUgPT4ge1xuICAgICAgXCJtb3VzZVwiID09PSBlLnBvaW50ZXJUeXBlICYmIChmID0gITAsIGcgPSAhMCwgaS5hbmltYXRpbmcgfHwgaS5hdXRvcGxheS5wYXVzZWQgfHwgTSghMCkpXG4gICAgfSwgSSA9IGUgPT4ge1xuICAgICAgXCJtb3VzZVwiID09PSBlLnBvaW50ZXJUeXBlICYmIChnID0gITEsIGkuYXV0b3BsYXkucGF1c2VkICYmIEMoKSlcbiAgICB9O1xuICAgIG4oXCJpbml0XCIsICgoKSA9PiB7XG4gICAgICBpLnBhcmFtcy5hdXRvcGxheS5lbmFibGVkICYmIChpLnBhcmFtcy5hdXRvcGxheS5wYXVzZU9uTW91c2VFbnRlciAmJiAoaS5lbC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmVudGVyXCIsIEwpLCBpLmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVybGVhdmVcIiwgSSkpLCBhKCkuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgUCksIFMoKSlcbiAgICB9KSksIG4oXCJkZXN0cm95XCIsICgoKSA9PiB7XG4gICAgICBpLmVsICYmIFwic3RyaW5nXCIgIT0gdHlwZW9mIGkuZWwgJiYgKGkuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJlbnRlclwiLCBMKSwgaS5lbC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcmxlYXZlXCIsIEkpKSwgYSgpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIFApLCBpLmF1dG9wbGF5LnJ1bm5pbmcgJiYgVCgpXG4gICAgfSkpLCBuKFwiX2ZyZWVNb2RlU3RhdGljUmVsZWFzZVwiLCAoKCkgPT4ge1xuICAgICAgKHUgfHwgZikgJiYgQygpXG4gICAgfSkpLCBuKFwiX2ZyZWVNb2RlTm9Nb21lbnR1bVJlbGVhc2VcIiwgKCgpID0+IHtcbiAgICAgIGkucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uID8gVCgpIDogTSghMCwgITApXG4gICAgfSkpLCBuKFwiYmVmb3JlVHJhbnNpdGlvblN0YXJ0XCIsICgoZSwgdCwgcykgPT4ge1xuICAgICAgIWkuZGVzdHJveWVkICYmIGkuYXV0b3BsYXkucnVubmluZyAmJiAocyB8fCAhaS5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24gPyBNKCEwLCAhMCkgOiBUKCkpXG4gICAgfSkpLCBuKFwic2xpZGVyRmlyc3RNb3ZlXCIsICgoKSA9PiB7XG4gICAgICAhaS5kZXN0cm95ZWQgJiYgaS5hdXRvcGxheS5ydW5uaW5nICYmIChpLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbiA/IFQoKSA6IChwID0gITAsIHUgPSAhMSwgZiA9ICExLCBtID0gc2V0VGltZW91dCgoKCkgPT4ge1xuICAgICAgICBmID0gITAsIHUgPSAhMCwgTSghMClcbiAgICAgIH0pLCAyMDApKSlcbiAgICB9KSksIG4oXCJ0b3VjaEVuZFwiLCAoKCkgPT4ge1xuICAgICAgaWYgKCFpLmRlc3Ryb3llZCAmJiBpLmF1dG9wbGF5LnJ1bm5pbmcgJiYgcCkge1xuICAgICAgICBpZiAoY2xlYXJUaW1lb3V0KG0pLCBjbGVhclRpbWVvdXQodCksIGkucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSByZXR1cm4gdSA9ICExLCB2b2lkIChwID0gITEpO1xuICAgICAgICB1ICYmIGkucGFyYW1zLmNzc01vZGUgJiYgQygpLCB1ID0gITEsIHAgPSAhMVxuICAgICAgfVxuICAgIH0pKSwgbihcInNsaWRlQ2hhbmdlXCIsICgoKSA9PiB7XG4gICAgICAhaS5kZXN0cm95ZWQgJiYgaS5hdXRvcGxheS5ydW5uaW5nICYmIChoID0gITApXG4gICAgfSkpLCBPYmplY3QuYXNzaWduKGkuYXV0b3BsYXksIHtzdGFydDogUywgc3RvcDogVCwgcGF1c2U6IE0sIHJlc3VtZTogQ30pXG4gIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgbGV0IHtzd2lwZXI6IHQsIGV4dGVuZFBhcmFtczogcywgb246IGl9ID0gZTtcbiAgICBzKHtcbiAgICAgIHRodW1iczoge1xuICAgICAgICBzd2lwZXI6IG51bGwsXG4gICAgICAgIG11bHRpcGxlQWN0aXZlVGh1bWJzOiAhMCxcbiAgICAgICAgYXV0b1Njcm9sbE9mZnNldDogMCxcbiAgICAgICAgc2xpZGVUaHVtYkFjdGl2ZUNsYXNzOiBcInN3aXBlci1zbGlkZS10aHVtYi1hY3RpdmVcIixcbiAgICAgICAgdGh1bWJzQ29udGFpbmVyQ2xhc3M6IFwic3dpcGVyLXRodW1ic1wiXG4gICAgICB9XG4gICAgfSk7XG4gICAgbGV0IHIgPSAhMSwgbiA9ICExO1xuXG4gICAgZnVuY3Rpb24gbCgpIHtcbiAgICAgIGNvbnN0IGUgPSB0LnRodW1icy5zd2lwZXI7XG4gICAgICBpZiAoIWUgfHwgZS5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgIGNvbnN0IHMgPSBlLmNsaWNrZWRJbmRleCwgYSA9IGUuY2xpY2tlZFNsaWRlO1xuICAgICAgaWYgKGEgJiYgYS5jbGFzc0xpc3QuY29udGFpbnModC5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcykpIHJldHVybjtcbiAgICAgIGlmIChudWxsID09IHMpIHJldHVybjtcbiAgICAgIGxldCBpO1xuICAgICAgaSA9IGUucGFyYW1zLmxvb3AgPyBwYXJzZUludChlLmNsaWNrZWRTbGlkZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKSwgMTApIDogcywgdC5wYXJhbXMubG9vcCA/IHQuc2xpZGVUb0xvb3AoaSkgOiB0LnNsaWRlVG8oaSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvKCkge1xuICAgICAgY29uc3Qge3RodW1iczogZX0gPSB0LnBhcmFtcztcbiAgICAgIGlmIChyKSByZXR1cm4gITE7XG4gICAgICByID0gITA7XG4gICAgICBjb25zdCBzID0gdC5jb25zdHJ1Y3RvcjtcbiAgICAgIGlmIChlLnN3aXBlciBpbnN0YW5jZW9mIHMpIHQudGh1bWJzLnN3aXBlciA9IGUuc3dpcGVyLCBPYmplY3QuYXNzaWduKHQudGh1bWJzLnN3aXBlci5vcmlnaW5hbFBhcmFtcywge1xuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiAhMCxcbiAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogITFcbiAgICAgIH0pLCBPYmplY3QuYXNzaWduKHQudGh1bWJzLnN3aXBlci5wYXJhbXMsIHtcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogITAsXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6ICExXG4gICAgICB9KSwgdC50aHVtYnMuc3dpcGVyLnVwZGF0ZSgpOyBlbHNlIGlmIChjKGUuc3dpcGVyKSkge1xuICAgICAgICBjb25zdCBhID0gT2JqZWN0LmFzc2lnbih7fSwgZS5zd2lwZXIpO1xuICAgICAgICBPYmplY3QuYXNzaWduKGEsIHt3YXRjaFNsaWRlc1Byb2dyZXNzOiAhMCwgc2xpZGVUb0NsaWNrZWRTbGlkZTogITF9KSwgdC50aHVtYnMuc3dpcGVyID0gbmV3IHMoYSksIG4gPSAhMFxuICAgICAgfVxuICAgICAgcmV0dXJuIHQudGh1bWJzLnN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKHQucGFyYW1zLnRodW1icy50aHVtYnNDb250YWluZXJDbGFzcyksIHQudGh1bWJzLnN3aXBlci5vbihcInRhcFwiLCBsKSwgITBcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkKGUpIHtcbiAgICAgIGNvbnN0IHMgPSB0LnRodW1icy5zd2lwZXI7XG4gICAgICBpZiAoIXMgfHwgcy5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgIGNvbnN0IGEgPSBcImF1dG9cIiA9PT0gcy5wYXJhbXMuc2xpZGVzUGVyVmlldyA/IHMuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IHMucGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICBsZXQgaSA9IDE7XG4gICAgICBjb25zdCByID0gdC5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcztcbiAgICAgIGlmICh0LnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSAmJiAhdC5wYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgKGkgPSB0LnBhcmFtcy5zbGlkZXNQZXJWaWV3KSwgdC5wYXJhbXMudGh1bWJzLm11bHRpcGxlQWN0aXZlVGh1bWJzIHx8IChpID0gMSksIGkgPSBNYXRoLmZsb29yKGkpLCBzLnNsaWRlcy5mb3JFYWNoKChlID0+IGUuY2xhc3NMaXN0LnJlbW92ZShyKSkpLCBzLnBhcmFtcy5sb29wIHx8IHMucGFyYW1zLnZpcnR1YWwgJiYgcy5wYXJhbXMudmlydHVhbC5lbmFibGVkKSBmb3IgKGxldCBlID0gMDsgZSA8IGk7IGUgKz0gMSkgZihzLnNsaWRlc0VsLCBgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHt0LnJlYWxJbmRleCArIGV9XCJdYCkuZm9yRWFjaCgoZSA9PiB7XG4gICAgICAgIGUuY2xhc3NMaXN0LmFkZChyKVxuICAgICAgfSkpOyBlbHNlIGZvciAobGV0IGUgPSAwOyBlIDwgaTsgZSArPSAxKSBzLnNsaWRlc1t0LnJlYWxJbmRleCArIGVdICYmIHMuc2xpZGVzW3QucmVhbEluZGV4ICsgZV0uY2xhc3NMaXN0LmFkZChyKTtcbiAgICAgIGNvbnN0IG4gPSB0LnBhcmFtcy50aHVtYnMuYXV0b1Njcm9sbE9mZnNldCwgbCA9IG4gJiYgIXMucGFyYW1zLmxvb3A7XG4gICAgICBpZiAodC5yZWFsSW5kZXggIT09IHMucmVhbEluZGV4IHx8IGwpIHtcbiAgICAgICAgY29uc3QgaSA9IHMuYWN0aXZlSW5kZXg7XG4gICAgICAgIGxldCByLCBvO1xuICAgICAgICBpZiAocy5wYXJhbXMubG9vcCkge1xuICAgICAgICAgIGNvbnN0IGUgPSBzLnNsaWRlcy5maWx0ZXIoKGUgPT4gZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKSA9PT0gYCR7dC5yZWFsSW5kZXh9YCkpWzBdO1xuICAgICAgICAgIHIgPSBzLnNsaWRlcy5pbmRleE9mKGUpLCBvID0gdC5hY3RpdmVJbmRleCA+IHQucHJldmlvdXNJbmRleCA/IFwibmV4dFwiIDogXCJwcmV2XCJcbiAgICAgICAgfSBlbHNlIHIgPSB0LnJlYWxJbmRleCwgbyA9IHIgPiB0LnByZXZpb3VzSW5kZXggPyBcIm5leHRcIiA6IFwicHJldlwiO1xuICAgICAgICBsICYmIChyICs9IFwibmV4dFwiID09PSBvID8gbiA6IC0xICogbiksIHMudmlzaWJsZVNsaWRlc0luZGV4ZXMgJiYgcy52aXNpYmxlU2xpZGVzSW5kZXhlcy5pbmRleE9mKHIpIDwgMCAmJiAocy5wYXJhbXMuY2VudGVyZWRTbGlkZXMgPyByID0gciA+IGkgPyByIC0gTWF0aC5mbG9vcihhIC8gMikgKyAxIDogciArIE1hdGguZmxvb3IoYSAvIDIpIC0gMSA6IHIgPiBpICYmIHMucGFyYW1zLnNsaWRlc1Blckdyb3VwLCBzLnNsaWRlVG8ociwgZSA/IDAgOiB2b2lkIDApKVxuICAgICAgfVxuICAgIH1cblxuICAgIHQudGh1bWJzID0ge3N3aXBlcjogbnVsbH0sIGkoXCJiZWZvcmVJbml0XCIsICgoKSA9PiB7XG4gICAgICBjb25zdCB7dGh1bWJzOiBlfSA9IHQucGFyYW1zO1xuICAgICAgaWYgKGUgJiYgZS5zd2lwZXIpIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBlLnN3aXBlciB8fCBlLnN3aXBlciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IHMgPSBhKCksIGkgPSAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgYSA9IFwic3RyaW5nXCIgPT0gdHlwZW9mIGUuc3dpcGVyID8gcy5xdWVyeVNlbGVjdG9yKGUuc3dpcGVyKSA6IGUuc3dpcGVyO1xuICAgICAgICAgIGlmIChhICYmIGEuc3dpcGVyKSBlLnN3aXBlciA9IGEuc3dpcGVyLCBvKCksIGQoITApOyBlbHNlIGlmIChhKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gYCR7dC5wYXJhbXMuZXZlbnRzUHJlZml4fWluaXRgLCBpID0gciA9PiB7XG4gICAgICAgICAgICAgIGUuc3dpcGVyID0gci5kZXRhaWxbMF0sIGEucmVtb3ZlRXZlbnRMaXN0ZW5lcihzLCBpKSwgbygpLCBkKCEwKSwgZS5zd2lwZXIudXBkYXRlKCksIHQudXBkYXRlKClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhLmFkZEV2ZW50TGlzdGVuZXIocywgaSlcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGFcbiAgICAgICAgfSwgciA9ICgpID0+IHtcbiAgICAgICAgICBpZiAodC5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBpKCkgfHwgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHIpXG4gICAgICAgIH07XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyKVxuICAgICAgfSBlbHNlIG8oKSwgZCghMClcbiAgICB9KSksIGkoXCJzbGlkZUNoYW5nZSB1cGRhdGUgcmVzaXplIG9ic2VydmVyVXBkYXRlXCIsICgoKSA9PiB7XG4gICAgICBkKClcbiAgICB9KSksIGkoXCJzZXRUcmFuc2l0aW9uXCIsICgoZSwgcykgPT4ge1xuICAgICAgY29uc3QgYSA9IHQudGh1bWJzLnN3aXBlcjtcbiAgICAgIGEgJiYgIWEuZGVzdHJveWVkICYmIGEuc2V0VHJhbnNpdGlvbihzKVxuICAgIH0pKSwgaShcImJlZm9yZURlc3Ryb3lcIiwgKCgpID0+IHtcbiAgICAgIGNvbnN0IGUgPSB0LnRodW1icy5zd2lwZXI7XG4gICAgICBlICYmICFlLmRlc3Ryb3llZCAmJiBuICYmIGUuZGVzdHJveSgpXG4gICAgfSkpLCBPYmplY3QuYXNzaWduKHQudGh1bWJzLCB7aW5pdDogbywgdXBkYXRlOiBkfSlcbiAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICBsZXQge3N3aXBlcjogdCwgZXh0ZW5kUGFyYW1zOiBzLCBlbWl0OiBhLCBvbmNlOiBpfSA9IGU7XG4gICAgcyh7XG4gICAgICBmcmVlTW9kZToge1xuICAgICAgICBlbmFibGVkOiAhMSxcbiAgICAgICAgbW9tZW50dW06ICEwLFxuICAgICAgICBtb21lbnR1bVJhdGlvOiAxLFxuICAgICAgICBtb21lbnR1bUJvdW5jZTogITAsXG4gICAgICAgIG1vbWVudHVtQm91bmNlUmF0aW86IDEsXG4gICAgICAgIG1vbWVudHVtVmVsb2NpdHlSYXRpbzogMSxcbiAgICAgICAgc3RpY2t5OiAhMSxcbiAgICAgICAgbWluaW11bVZlbG9jaXR5OiAuMDJcbiAgICAgIH1cbiAgICB9KSwgT2JqZWN0LmFzc2lnbih0LCB7XG4gICAgICBmcmVlTW9kZToge1xuICAgICAgICBvblRvdWNoU3RhcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodC5wYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICAgICAgICAgIGNvbnN0IGUgPSB0LmdldFRyYW5zbGF0ZSgpO1xuICAgICAgICAgIHQuc2V0VHJhbnNsYXRlKGUpLCB0LnNldFRyYW5zaXRpb24oMCksIHQudG91Y2hFdmVudHNEYXRhLnZlbG9jaXRpZXMubGVuZ3RoID0gMCwgdC5mcmVlTW9kZS5vblRvdWNoRW5kKHtjdXJyZW50UG9zOiB0LnJ0bCA/IHQudHJhbnNsYXRlIDogLXQudHJhbnNsYXRlfSlcbiAgICAgICAgfSwgb25Ub3VjaE1vdmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodC5wYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICAgICAgICAgIGNvbnN0IHt0b3VjaEV2ZW50c0RhdGE6IGUsIHRvdWNoZXM6IHN9ID0gdDtcbiAgICAgICAgICAwID09PSBlLnZlbG9jaXRpZXMubGVuZ3RoICYmIGUudmVsb2NpdGllcy5wdXNoKHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBzW3QuaXNIb3Jpem9udGFsKCkgPyBcInN0YXJ0WFwiIDogXCJzdGFydFlcIl0sXG4gICAgICAgICAgICB0aW1lOiBlLnRvdWNoU3RhcnRUaW1lXG4gICAgICAgICAgfSksIGUudmVsb2NpdGllcy5wdXNoKHtwb3NpdGlvbjogc1t0LmlzSG9yaXpvbnRhbCgpID8gXCJjdXJyZW50WFwiIDogXCJjdXJyZW50WVwiXSwgdGltZTogbygpfSlcbiAgICAgICAgfSwgb25Ub3VjaEVuZDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBsZXQge2N1cnJlbnRQb3M6IHN9ID0gZTtcbiAgICAgICAgICBpZiAodC5wYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICAgICAgICAgIGNvbnN0IHtwYXJhbXM6IHIsIHdyYXBwZXJFbDogbiwgcnRsVHJhbnNsYXRlOiBsLCBzbmFwR3JpZDogZCwgdG91Y2hFdmVudHNEYXRhOiBjfSA9IHQsXG4gICAgICAgICAgICBwID0gbygpIC0gYy50b3VjaFN0YXJ0VGltZTtcbiAgICAgICAgICBpZiAocyA8IC10Lm1pblRyYW5zbGF0ZSgpKSB0LnNsaWRlVG8odC5hY3RpdmVJbmRleCk7IGVsc2UgaWYgKHMgPiAtdC5tYXhUcmFuc2xhdGUoKSkgdC5zbGlkZXMubGVuZ3RoIDwgZC5sZW5ndGggPyB0LnNsaWRlVG8oZC5sZW5ndGggLSAxKSA6IHQuc2xpZGVUbyh0LnNsaWRlcy5sZW5ndGggLSAxKTsgZWxzZSB7XG4gICAgICAgICAgICBpZiAoci5mcmVlTW9kZS5tb21lbnR1bSkge1xuICAgICAgICAgICAgICBpZiAoYy52ZWxvY2l0aWVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gYy52ZWxvY2l0aWVzLnBvcCgpLCBzID0gYy52ZWxvY2l0aWVzLnBvcCgpLCBhID0gZS5wb3NpdGlvbiAtIHMucG9zaXRpb24sIGkgPSBlLnRpbWUgLSBzLnRpbWU7XG4gICAgICAgICAgICAgICAgdC52ZWxvY2l0eSA9IGEgLyBpLCB0LnZlbG9jaXR5IC89IDIsIE1hdGguYWJzKHQudmVsb2NpdHkpIDwgci5mcmVlTW9kZS5taW5pbXVtVmVsb2NpdHkgJiYgKHQudmVsb2NpdHkgPSAwKSwgKGkgPiAxNTAgfHwgbygpIC0gZS50aW1lID4gMzAwKSAmJiAodC52ZWxvY2l0eSA9IDApXG4gICAgICAgICAgICAgIH0gZWxzZSB0LnZlbG9jaXR5ID0gMDtcbiAgICAgICAgICAgICAgdC52ZWxvY2l0eSAqPSByLmZyZWVNb2RlLm1vbWVudHVtVmVsb2NpdHlSYXRpbywgYy52ZWxvY2l0aWVzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgIGxldCBlID0gMWUzICogci5mcmVlTW9kZS5tb21lbnR1bVJhdGlvO1xuICAgICAgICAgICAgICBjb25zdCBzID0gdC52ZWxvY2l0eSAqIGU7XG4gICAgICAgICAgICAgIGxldCBwID0gdC50cmFuc2xhdGUgKyBzO1xuICAgICAgICAgICAgICBsICYmIChwID0gLXApO1xuICAgICAgICAgICAgICBsZXQgdSwgbSA9ICExO1xuICAgICAgICAgICAgICBjb25zdCBoID0gMjAgKiBNYXRoLmFicyh0LnZlbG9jaXR5KSAqIHIuZnJlZU1vZGUubW9tZW50dW1Cb3VuY2VSYXRpbztcbiAgICAgICAgICAgICAgbGV0IGY7XG4gICAgICAgICAgICAgIGlmIChwIDwgdC5tYXhUcmFuc2xhdGUoKSkgci5mcmVlTW9kZS5tb21lbnR1bUJvdW5jZSA/IChwICsgdC5tYXhUcmFuc2xhdGUoKSA8IC1oICYmIChwID0gdC5tYXhUcmFuc2xhdGUoKSAtIGgpLCB1ID0gdC5tYXhUcmFuc2xhdGUoKSwgbSA9ICEwLCBjLmFsbG93TW9tZW50dW1Cb3VuY2UgPSAhMCkgOiBwID0gdC5tYXhUcmFuc2xhdGUoKSwgci5sb29wICYmIHIuY2VudGVyZWRTbGlkZXMgJiYgKGYgPSAhMCk7IGVsc2UgaWYgKHAgPiB0Lm1pblRyYW5zbGF0ZSgpKSByLmZyZWVNb2RlLm1vbWVudHVtQm91bmNlID8gKHAgLSB0Lm1pblRyYW5zbGF0ZSgpID4gaCAmJiAocCA9IHQubWluVHJhbnNsYXRlKCkgKyBoKSwgdSA9IHQubWluVHJhbnNsYXRlKCksIG0gPSAhMCwgYy5hbGxvd01vbWVudHVtQm91bmNlID0gITApIDogcCA9IHQubWluVHJhbnNsYXRlKCksIHIubG9vcCAmJiByLmNlbnRlcmVkU2xpZGVzICYmIChmID0gITApOyBlbHNlIGlmIChyLmZyZWVNb2RlLnN0aWNreSkge1xuICAgICAgICAgICAgICAgIGxldCBlO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgZC5sZW5ndGg7IHQgKz0gMSkgaWYgKGRbdF0gPiAtcCkge1xuICAgICAgICAgICAgICAgICAgZSA9IHQ7XG4gICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwID0gTWF0aC5hYnMoZFtlXSAtIHApIDwgTWF0aC5hYnMoZFtlIC0gMV0gLSBwKSB8fCBcIm5leHRcIiA9PT0gdC5zd2lwZURpcmVjdGlvbiA/IGRbZV0gOiBkW2UgLSAxXSwgcCA9IC1wXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGYgJiYgaShcInRyYW5zaXRpb25FbmRcIiwgKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0Lmxvb3BGaXgoKVxuICAgICAgICAgICAgICB9KSksIDAgIT09IHQudmVsb2NpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZSA9IGwgPyBNYXRoLmFicygoLXAgLSB0LnRyYW5zbGF0ZSkgLyB0LnZlbG9jaXR5KSA6IE1hdGguYWJzKChwIC0gdC50cmFuc2xhdGUpIC8gdC52ZWxvY2l0eSksIHIuZnJlZU1vZGUuc3RpY2t5KSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBzID0gTWF0aC5hYnMoKGwgPyAtcCA6IHApIC0gdC50cmFuc2xhdGUpLCBhID0gdC5zbGlkZXNTaXplc0dyaWRbdC5hY3RpdmVJbmRleF07XG4gICAgICAgICAgICAgICAgICBlID0gcyA8IGEgPyByLnNwZWVkIDogcyA8IDIgKiBhID8gMS41ICogci5zcGVlZCA6IDIuNSAqIHIuc3BlZWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoci5mcmVlTW9kZS5zdGlja3kpIHJldHVybiB2b2lkIHQuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgICAgICAgICAgci5mcmVlTW9kZS5tb21lbnR1bUJvdW5jZSAmJiBtID8gKHQudXBkYXRlUHJvZ3Jlc3ModSksIHQuc2V0VHJhbnNpdGlvbihlKSwgdC5zZXRUcmFuc2xhdGUocCksIHQudHJhbnNpdGlvblN0YXJ0KCEwLCB0LnN3aXBlRGlyZWN0aW9uKSwgdC5hbmltYXRpbmcgPSAhMCwgeChuLCAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHQgJiYgIXQuZGVzdHJveWVkICYmIGMuYWxsb3dNb21lbnR1bUJvdW5jZSAmJiAoYShcIm1vbWVudHVtQm91bmNlXCIpLCB0LnNldFRyYW5zaXRpb24oci5zcGVlZCksIHNldFRpbWVvdXQoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHQuc2V0VHJhbnNsYXRlKHUpLCB4KG4sICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHQgJiYgIXQuZGVzdHJveWVkICYmIHQudHJhbnNpdGlvbkVuZCgpXG4gICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICB9KSwgMCkpXG4gICAgICAgICAgICAgIH0pKSkgOiB0LnZlbG9jaXR5ID8gKGEoXCJfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZVwiKSwgdC51cGRhdGVQcm9ncmVzcyhwKSwgdC5zZXRUcmFuc2l0aW9uKGUpLCB0LnNldFRyYW5zbGF0ZShwKSwgdC50cmFuc2l0aW9uU3RhcnQoITAsIHQuc3dpcGVEaXJlY3Rpb24pLCB0LmFuaW1hdGluZyB8fCAodC5hbmltYXRpbmcgPSAhMCwgeChuLCAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHQgJiYgIXQuZGVzdHJveWVkICYmIHQudHJhbnNpdGlvbkVuZCgpXG4gICAgICAgICAgICAgIH0pKSkpIDogdC51cGRhdGVQcm9ncmVzcyhwKSwgdC51cGRhdGVBY3RpdmVJbmRleCgpLCB0LnVwZGF0ZVNsaWRlc0NsYXNzZXMoKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHIuZnJlZU1vZGUuc3RpY2t5KSByZXR1cm4gdm9pZCB0LnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgICAgICAgICAgIHIuZnJlZU1vZGUgJiYgYShcIl9mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoIXIuZnJlZU1vZGUubW9tZW50dW0gfHwgcCA+PSByLmxvbmdTd2lwZXNNcykgJiYgKGEoXCJfZnJlZU1vZGVTdGF0aWNSZWxlYXNlXCIpLCB0LnVwZGF0ZVByb2dyZXNzKCksIHQudXBkYXRlQWN0aXZlSW5kZXgoKSwgdC51cGRhdGVTbGlkZXNDbGFzc2VzKCkpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICBsZXQgdCwgcywgYSwgaSwge3N3aXBlcjogciwgZXh0ZW5kUGFyYW1zOiBuLCBvbjogbH0gPSBlO1xuICAgIG4oe2dyaWQ6IHtyb3dzOiAxLCBmaWxsOiBcImNvbHVtblwifX0pO1xuICAgIGNvbnN0IG8gPSAoKSA9PiB7XG4gICAgICBsZXQgZSA9IHIucGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgICAgIHJldHVybiBcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIGUuaW5kZXhPZihcIiVcIikgPj0gMCA/IGUgPSBwYXJzZUZsb2F0KGUucmVwbGFjZShcIiVcIiwgXCJcIikpIC8gMTAwICogci5zaXplIDogXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSAmJiAoZSA9IHBhcnNlRmxvYXQoZSkpLCBlXG4gICAgfTtcbiAgICBsKFwiaW5pdFwiLCAoKCkgPT4ge1xuICAgICAgaSA9IHIucGFyYW1zLmdyaWQgJiYgci5wYXJhbXMuZ3JpZC5yb3dzID4gMVxuICAgIH0pKSwgbChcInVwZGF0ZVwiLCAoKCkgPT4ge1xuICAgICAgY29uc3Qge3BhcmFtczogZSwgZWw6IHR9ID0gciwgcyA9IGUuZ3JpZCAmJiBlLmdyaWQucm93cyA+IDE7XG4gICAgICBpICYmICFzID8gKHQuY2xhc3NMaXN0LnJlbW92ZShgJHtlLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGAsIGAke2UuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkLWNvbHVtbmApLCBhID0gMSwgci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpKSA6ICFpICYmIHMgJiYgKHQuY2xhc3NMaXN0LmFkZChgJHtlLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGApLCBcImNvbHVtblwiID09PSBlLmdyaWQuZmlsbCAmJiB0LmNsYXNzTGlzdC5hZGQoYCR7ZS5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCksIHIuZW1pdENvbnRhaW5lckNsYXNzZXMoKSksIGkgPSBzXG4gICAgfSkpLCByLmdyaWQgPSB7XG4gICAgICBpbml0U2xpZGVzOiBlID0+IHtcbiAgICAgICAgY29uc3Qge3NsaWRlc1BlclZpZXc6IGl9ID0gci5wYXJhbXMsIHtyb3dzOiBuLCBmaWxsOiBsfSA9IHIucGFyYW1zLmdyaWQsXG4gICAgICAgICAgbyA9IHIudmlydHVhbCAmJiByLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyByLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IGUubGVuZ3RoO1xuICAgICAgICBhID0gTWF0aC5mbG9vcihvIC8gbiksIHQgPSBNYXRoLmZsb29yKG8gLyBuKSA9PT0gbyAvIG4gPyBvIDogTWF0aC5jZWlsKG8gLyBuKSAqIG4sIFwiYXV0b1wiICE9PSBpICYmIFwicm93XCIgPT09IGwgJiYgKHQgPSBNYXRoLm1heCh0LCBpICogbikpLCBzID0gdCAvIG5cbiAgICAgIH0sIHVuc2V0U2xpZGVzOiAoKSA9PiB7XG4gICAgICAgIHIuc2xpZGVzICYmIHIuc2xpZGVzLmZvckVhY2goKGUgPT4ge1xuICAgICAgICAgIGUuc3dpcGVyU2xpZGVHcmlkU2V0ICYmIChlLnN0eWxlLmhlaWdodCA9IFwiXCIsIGUuc3R5bGVbci5nZXREaXJlY3Rpb25MYWJlbChcIm1hcmdpbi10b3BcIildID0gXCJcIilcbiAgICAgICAgfSkpXG4gICAgICB9LCB1cGRhdGVTbGlkZTogKGUsIGksIG4pID0+IHtcbiAgICAgICAgY29uc3Qge3NsaWRlc1Blckdyb3VwOiBsfSA9IHIucGFyYW1zLCBkID0gbygpLCB7cm93czogYywgZmlsbDogcH0gPSByLnBhcmFtcy5ncmlkLFxuICAgICAgICAgIHUgPSByLnZpcnR1YWwgJiYgci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBuLmxlbmd0aDtcbiAgICAgICAgbGV0IG0sIGgsIGY7XG4gICAgICAgIGlmIChcInJvd1wiID09PSBwICYmIGwgPiAxKSB7XG4gICAgICAgICAgY29uc3QgcyA9IE1hdGguZmxvb3IoZSAvIChsICogYykpLCBhID0gZSAtIGMgKiBsICogcyxcbiAgICAgICAgICAgIHIgPSAwID09PSBzID8gbCA6IE1hdGgubWluKE1hdGguY2VpbCgodSAtIHMgKiBjICogbCkgLyBjKSwgbCk7XG4gICAgICAgICAgZiA9IE1hdGguZmxvb3IoYSAvIHIpLCBoID0gYSAtIGYgKiByICsgcyAqIGwsIG0gPSBoICsgZiAqIHQgLyBjLCBpLnN0eWxlLm9yZGVyID0gbVxuICAgICAgICB9IGVsc2UgXCJjb2x1bW5cIiA9PT0gcCA/IChoID0gTWF0aC5mbG9vcihlIC8gYyksIGYgPSBlIC0gaCAqIGMsIChoID4gYSB8fCBoID09PSBhICYmIGYgPT09IGMgLSAxKSAmJiAoZiArPSAxLCBmID49IGMgJiYgKGYgPSAwLCBoICs9IDEpKSkgOiAoZiA9IE1hdGguZmxvb3IoZSAvIHMpLCBoID0gZSAtIGYgKiBzKTtcbiAgICAgICAgaS5yb3cgPSBmLCBpLmNvbHVtbiA9IGgsIGkuc3R5bGUuaGVpZ2h0ID0gYGNhbGMoKDEwMCUgLSAkeyhjIC0gMSkgKiBkfXB4KSAvICR7Y30pYCwgaS5zdHlsZVtyLmdldERpcmVjdGlvbkxhYmVsKFwibWFyZ2luLXRvcFwiKV0gPSAwICE9PSBmID8gZCAmJiBgJHtkfXB4YCA6IFwiXCIsIGkuc3dpcGVyU2xpZGVHcmlkU2V0ID0gITBcbiAgICAgIH0sIHVwZGF0ZVdyYXBwZXJTaXplOiAoZSwgcykgPT4ge1xuICAgICAgICBjb25zdCB7Y2VudGVyZWRTbGlkZXM6IGEsIHJvdW5kTGVuZ3RoczogaX0gPSByLnBhcmFtcywgbiA9IG8oKSwge3Jvd3M6IGx9ID0gci5wYXJhbXMuZ3JpZDtcbiAgICAgICAgaWYgKHIudmlydHVhbFNpemUgPSAoZSArIG4pICogdCwgci52aXJ0dWFsU2l6ZSA9IE1hdGguY2VpbChyLnZpcnR1YWxTaXplIC8gbCkgLSBuLCByLnBhcmFtcy5jc3NNb2RlIHx8IChyLndyYXBwZXJFbC5zdHlsZVtyLmdldERpcmVjdGlvbkxhYmVsKFwid2lkdGhcIildID0gYCR7ci52aXJ0dWFsU2l6ZSArIG59cHhgKSwgYSkge1xuICAgICAgICAgIGNvbnN0IGUgPSBbXTtcbiAgICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IHMubGVuZ3RoOyB0ICs9IDEpIHtcbiAgICAgICAgICAgIGxldCBhID0gc1t0XTtcbiAgICAgICAgICAgIGkgJiYgKGEgPSBNYXRoLmZsb29yKGEpKSwgc1t0XSA8IHIudmlydHVhbFNpemUgKyBzWzBdICYmIGUucHVzaChhKVxuICAgICAgICAgIH1cbiAgICAgICAgICBzLnNwbGljZSgwLCBzLmxlbmd0aCksIHMucHVzaCguLi5lKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCBmdW5jdGlvbiAoZSkge1xuICAgIGxldCB7c3dpcGVyOiB0fSA9IGU7XG4gICAgT2JqZWN0LmFzc2lnbih0LCB7XG4gICAgICBhcHBlbmRTbGlkZTogbGUuYmluZCh0KSxcbiAgICAgIHByZXBlbmRTbGlkZTogb2UuYmluZCh0KSxcbiAgICAgIGFkZFNsaWRlOiBkZS5iaW5kKHQpLFxuICAgICAgcmVtb3ZlU2xpZGU6IGNlLmJpbmQodCksXG4gICAgICByZW1vdmVBbGxTbGlkZXM6IHBlLmJpbmQodClcbiAgICB9KVxuICB9LCBmdW5jdGlvbiAoZSkge1xuICAgIGxldCB7c3dpcGVyOiB0LCBleHRlbmRQYXJhbXM6IHMsIG9uOiBhfSA9IGU7XG4gICAgcyh7ZmFkZUVmZmVjdDoge2Nyb3NzRmFkZTogITF9fSksIHVlKHtcbiAgICAgIGVmZmVjdDogXCJmYWRlXCIsXG4gICAgICBzd2lwZXI6IHQsXG4gICAgICBvbjogYSxcbiAgICAgIHNldFRyYW5zbGF0ZTogKCkgPT4ge1xuICAgICAgICBjb25zdCB7c2xpZGVzOiBlfSA9IHQ7XG4gICAgICAgIHQucGFyYW1zLmZhZGVFZmZlY3Q7XG4gICAgICAgIGZvciAobGV0IHMgPSAwOyBzIDwgZS5sZW5ndGg7IHMgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IGUgPSB0LnNsaWRlc1tzXTtcbiAgICAgICAgICBsZXQgYSA9IC1lLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgICAgIHQucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgfHwgKGEgLT0gdC50cmFuc2xhdGUpO1xuICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICB0LmlzSG9yaXpvbnRhbCgpIHx8IChpID0gYSwgYSA9IDApO1xuICAgICAgICAgIGNvbnN0IHIgPSB0LnBhcmFtcy5mYWRlRWZmZWN0LmNyb3NzRmFkZSA/IE1hdGgubWF4KDEgLSBNYXRoLmFicyhlLnByb2dyZXNzKSwgMCkgOiAxICsgTWF0aC5taW4oTWF0aC5tYXgoZS5wcm9ncmVzcywgLTEpLCAwKSxcbiAgICAgICAgICAgIG4gPSBtZSgwLCBlKTtcbiAgICAgICAgICBuLnN0eWxlLm9wYWNpdHkgPSByLCBuLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke2F9cHgsICR7aX1weCwgMHB4KWBcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldFRyYW5zaXRpb246IGUgPT4ge1xuICAgICAgICBjb25zdCBzID0gdC5zbGlkZXMubWFwKChlID0+IGgoZSkpKTtcbiAgICAgICAgcy5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICB0LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2V9bXNgXG4gICAgICAgIH0pKSwgaGUoe3N3aXBlcjogdCwgZHVyYXRpb246IGUsIHRyYW5zZm9ybUVsZW1lbnRzOiBzLCBhbGxTbGlkZXM6ICEwfSlcbiAgICAgIH0sXG4gICAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiAhMCxcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiAhdC5wYXJhbXMuY3NzTW9kZVxuICAgICAgfSlcbiAgICB9KVxuICB9LCBmdW5jdGlvbiAoZSkge1xuICAgIGxldCB7c3dpcGVyOiB0LCBleHRlbmRQYXJhbXM6IHMsIG9uOiBhfSA9IGU7XG4gICAgcyh7Y3ViZUVmZmVjdDoge3NsaWRlU2hhZG93czogITAsIHNoYWRvdzogITAsIHNoYWRvd09mZnNldDogMjAsIHNoYWRvd1NjYWxlOiAuOTR9fSk7XG4gICAgY29uc3QgaSA9IChlLCB0LCBzKSA9PiB7XG4gICAgICBsZXQgYSA9IHMgPyBlLnF1ZXJ5U2VsZWN0b3IoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0XCIpIDogZS5xdWVyeVNlbGVjdG9yKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wXCIpLFxuICAgICAgICBpID0gcyA/IGUucXVlcnlTZWxlY3RvcihcIi5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0XCIpIDogZS5xdWVyeVNlbGVjdG9yKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tXCIpO1xuICAgICAgYSB8fCAoYSA9IHYoXCJkaXZcIiwgKFwic3dpcGVyLXNsaWRlLXNoYWRvdy1jdWJlIHN3aXBlci1zbGlkZS1zaGFkb3ctXCIgKyAocyA/IFwibGVmdFwiIDogXCJ0b3BcIikpLnNwbGl0KFwiIFwiKSksIGUuYXBwZW5kKGEpKSwgaSB8fCAoaSA9IHYoXCJkaXZcIiwgKFwic3dpcGVyLXNsaWRlLXNoYWRvdy1jdWJlIHN3aXBlci1zbGlkZS1zaGFkb3ctXCIgKyAocyA/IFwicmlnaHRcIiA6IFwiYm90dG9tXCIpKS5zcGxpdChcIiBcIikpLCBlLmFwcGVuZChpKSksIGEgJiYgKGEuc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KC10LCAwKSksIGkgJiYgKGkuc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KHQsIDApKVxuICAgIH07XG4gICAgdWUoe1xuICAgICAgZWZmZWN0OiBcImN1YmVcIixcbiAgICAgIHN3aXBlcjogdCxcbiAgICAgIG9uOiBhLFxuICAgICAgc2V0VHJhbnNsYXRlOiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHtlbDogZSwgd3JhcHBlckVsOiBzLCBzbGlkZXM6IGEsIHdpZHRoOiByLCBoZWlnaHQ6IG4sIHJ0bFRyYW5zbGF0ZTogbCwgc2l6ZTogbywgYnJvd3NlcjogZH0gPSB0LCBjID0gTSh0KSxcbiAgICAgICAgICBwID0gdC5wYXJhbXMuY3ViZUVmZmVjdCwgdSA9IHQuaXNIb3Jpem9udGFsKCksIG0gPSB0LnZpcnR1YWwgJiYgdC5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgICAgICBsZXQgaCwgZiA9IDA7XG4gICAgICAgIHAuc2hhZG93ICYmICh1ID8gKGggPSB0LndyYXBwZXJFbC5xdWVyeVNlbGVjdG9yKFwiLnN3aXBlci1jdWJlLXNoYWRvd1wiKSwgaCB8fCAoaCA9IHYoXCJkaXZcIiwgXCJzd2lwZXItY3ViZS1zaGFkb3dcIiksIHQud3JhcHBlckVsLmFwcGVuZChoKSksIGguc3R5bGUuaGVpZ2h0ID0gYCR7cn1weGApIDogKGggPSBlLnF1ZXJ5U2VsZWN0b3IoXCIuc3dpcGVyLWN1YmUtc2hhZG93XCIpLCBoIHx8IChoID0gdihcImRpdlwiLCBcInN3aXBlci1jdWJlLXNoYWRvd1wiKSwgZS5hcHBlbmQoaCkpKSk7XG4gICAgICAgIGZvciAobGV0IGUgPSAwOyBlIDwgYS5sZW5ndGg7IGUgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IHQgPSBhW2VdO1xuICAgICAgICAgIGxldCBzID0gZTtcbiAgICAgICAgICBtICYmIChzID0gcGFyc2VJbnQodC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN3aXBlci1zbGlkZS1pbmRleFwiKSwgMTApKTtcbiAgICAgICAgICBsZXQgciA9IDkwICogcywgbiA9IE1hdGguZmxvb3IociAvIDM2MCk7XG4gICAgICAgICAgbCAmJiAociA9IC1yLCBuID0gTWF0aC5mbG9vcigtciAvIDM2MCkpO1xuICAgICAgICAgIGNvbnN0IGQgPSBNYXRoLm1heChNYXRoLm1pbih0LnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgICAgIGxldCBoID0gMCwgZyA9IDAsIHYgPSAwO1xuICAgICAgICAgIHMgJSA0ID09IDAgPyAoaCA9IDQgKiAtbiAqIG8sIHYgPSAwKSA6IChzIC0gMSkgJSA0ID09IDAgPyAoaCA9IDAsIHYgPSA0ICogLW4gKiBvKSA6IChzIC0gMikgJSA0ID09IDAgPyAoaCA9IG8gKyA0ICogbiAqIG8sIHYgPSBvKSA6IChzIC0gMykgJSA0ID09IDAgJiYgKGggPSAtbywgdiA9IDMgKiBvICsgNCAqIG8gKiBuKSwgbCAmJiAoaCA9IC1oKSwgdSB8fCAoZyA9IGgsIGggPSAwKTtcbiAgICAgICAgICBjb25zdCB3ID0gYHJvdGF0ZVgoJHtjKHUgPyAwIDogLXIpfWRlZykgcm90YXRlWSgke2ModSA/IHIgOiAwKX1kZWcpIHRyYW5zbGF0ZTNkKCR7aH1weCwgJHtnfXB4LCAke3Z9cHgpYDtcbiAgICAgICAgICBkIDw9IDEgJiYgZCA+IC0xICYmIChmID0gOTAgKiBzICsgOTAgKiBkLCBsICYmIChmID0gOTAgKiAtcyAtIDkwICogZCkpLCB0LnN0eWxlLnRyYW5zZm9ybSA9IHcsIHAuc2xpZGVTaGFkb3dzICYmIGkodCwgZCwgdSlcbiAgICAgICAgfVxuICAgICAgICBpZiAocy5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBgNTAlIDUwJSAtJHtvIC8gMn1weGAsIHMuc3R5bGVbXCItd2Via2l0LXRyYW5zZm9ybS1vcmlnaW5cIl0gPSBgNTAlIDUwJSAtJHtvIC8gMn1weGAsIHAuc2hhZG93KSBpZiAodSkgaC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoMHB4LCAke3IgLyAyICsgcC5zaGFkb3dPZmZzZXR9cHgsICR7LXIgLyAyfXB4KSByb3RhdGVYKDg5Ljk5ZGVnKSByb3RhdGVaKDBkZWcpIHNjYWxlKCR7cC5zaGFkb3dTY2FsZX0pYDsgZWxzZSB7XG4gICAgICAgICAgY29uc3QgZSA9IE1hdGguYWJzKGYpIC0gOTAgKiBNYXRoLmZsb29yKE1hdGguYWJzKGYpIC8gOTApLFxuICAgICAgICAgICAgdCA9IDEuNSAtIChNYXRoLnNpbigyICogZSAqIE1hdGguUEkgLyAzNjApIC8gMiArIE1hdGguY29zKDIgKiBlICogTWF0aC5QSSAvIDM2MCkgLyAyKSwgcyA9IHAuc2hhZG93U2NhbGUsXG4gICAgICAgICAgICBhID0gcC5zaGFkb3dTY2FsZSAvIHQsIGkgPSBwLnNoYWRvd09mZnNldDtcbiAgICAgICAgICBoLnN0eWxlLnRyYW5zZm9ybSA9IGBzY2FsZTNkKCR7c30sIDEsICR7YX0pIHRyYW5zbGF0ZTNkKDBweCwgJHtuIC8gMiArIGl9cHgsICR7LW4gLyAyIC8gYX1weCkgcm90YXRlWCgtODkuOTlkZWcpYFxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGcgPSAoZC5pc1NhZmFyaSB8fCBkLmlzV2ViVmlldykgJiYgZC5uZWVkUGVyc3BlY3RpdmVGaXggPyAtbyAvIDIgOiAwO1xuICAgICAgICBzLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwcHgsMCwke2d9cHgpIHJvdGF0ZVgoJHtjKHQuaXNIb3Jpem9udGFsKCkgPyAwIDogZil9ZGVnKSByb3RhdGVZKCR7Yyh0LmlzSG9yaXpvbnRhbCgpID8gLWYgOiAwKX1kZWcpYCwgcy5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tc3dpcGVyLWN1YmUtdHJhbnNsYXRlLXpcIiwgYCR7Z31weGApXG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZSA9PiB7XG4gICAgICAgIGNvbnN0IHtlbDogcywgc2xpZGVzOiBhfSA9IHQ7XG4gICAgICAgIGlmIChhLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgIHQuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZX1tc2AsIHQucXVlcnlTZWxlY3RvckFsbChcIi5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdFwiKS5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICAgIHQuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZX1tc2BcbiAgICAgICAgICB9KSlcbiAgICAgICAgfSkpLCB0LnBhcmFtcy5jdWJlRWZmZWN0LnNoYWRvdyAmJiAhdC5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgIGNvbnN0IHQgPSBzLnF1ZXJ5U2VsZWN0b3IoXCIuc3dpcGVyLWN1YmUtc2hhZG93XCIpO1xuICAgICAgICAgIHQgJiYgKHQuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZX1tc2ApXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZWNyZWF0ZVNoYWRvd3M6ICgpID0+IHtcbiAgICAgICAgY29uc3QgZSA9IHQuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgIHQuc2xpZGVzLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgIGNvbnN0IHMgPSBNYXRoLm1heChNYXRoLm1pbih0LnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgICAgIGkodCwgcywgZSlcbiAgICAgICAgfSkpXG4gICAgICB9LFxuICAgICAgZ2V0RWZmZWN0UGFyYW1zOiAoKSA9PiB0LnBhcmFtcy5jdWJlRWZmZWN0LFxuICAgICAgcGVyc3BlY3RpdmU6ICgpID0+ICEwLFxuICAgICAgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoe1xuICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogITAsXG4gICAgICAgIHJlc2lzdGFuY2VSYXRpbzogMCxcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICBjZW50ZXJlZFNsaWRlczogITEsXG4gICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICEwXG4gICAgICB9KVxuICAgIH0pXG4gIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgbGV0IHtzd2lwZXI6IHQsIGV4dGVuZFBhcmFtczogcywgb246IGF9ID0gZTtcbiAgICBzKHtmbGlwRWZmZWN0OiB7c2xpZGVTaGFkb3dzOiAhMCwgbGltaXRSb3RhdGlvbjogITB9fSk7XG4gICAgY29uc3QgaSA9IChlLCBzKSA9PiB7XG4gICAgICBsZXQgYSA9IHQuaXNIb3Jpem9udGFsKCkgPyBlLnF1ZXJ5U2VsZWN0b3IoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0XCIpIDogZS5xdWVyeVNlbGVjdG9yKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wXCIpLFxuICAgICAgICBpID0gdC5pc0hvcml6b250YWwoKSA/IGUucXVlcnlTZWxlY3RvcihcIi5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0XCIpIDogZS5xdWVyeVNlbGVjdG9yKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tXCIpO1xuICAgICAgYSB8fCAoYSA9IGZlKFwiZmxpcFwiLCBlLCB0LmlzSG9yaXpvbnRhbCgpID8gXCJsZWZ0XCIgOiBcInRvcFwiKSksIGkgfHwgKGkgPSBmZShcImZsaXBcIiwgZSwgdC5pc0hvcml6b250YWwoKSA/IFwicmlnaHRcIiA6IFwiYm90dG9tXCIpKSwgYSAmJiAoYS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLXMsIDApKSwgaSAmJiAoaS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgocywgMCkpXG4gICAgfTtcbiAgICB1ZSh7XG4gICAgICBlZmZlY3Q6IFwiZmxpcFwiLFxuICAgICAgc3dpcGVyOiB0LFxuICAgICAgb246IGEsXG4gICAgICBzZXRUcmFuc2xhdGU6ICgpID0+IHtcbiAgICAgICAgY29uc3Qge3NsaWRlczogZSwgcnRsVHJhbnNsYXRlOiBzfSA9IHQsIGEgPSB0LnBhcmFtcy5mbGlwRWZmZWN0LCByID0gTSh0KTtcbiAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCBlLmxlbmd0aDsgbiArPSAxKSB7XG4gICAgICAgICAgY29uc3QgbCA9IGVbbl07XG4gICAgICAgICAgbGV0IG8gPSBsLnByb2dyZXNzO1xuICAgICAgICAgIHQucGFyYW1zLmZsaXBFZmZlY3QubGltaXRSb3RhdGlvbiAmJiAobyA9IE1hdGgubWF4KE1hdGgubWluKGwucHJvZ3Jlc3MsIDEpLCAtMSkpO1xuICAgICAgICAgIGNvbnN0IGQgPSBsLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgICAgIGxldCBjID0gLTE4MCAqIG8sIHAgPSAwLCB1ID0gdC5wYXJhbXMuY3NzTW9kZSA/IC1kIC0gdC50cmFuc2xhdGUgOiAtZCwgbSA9IDA7XG4gICAgICAgICAgdC5pc0hvcml6b250YWwoKSA/IHMgJiYgKGMgPSAtYykgOiAobSA9IHUsIHUgPSAwLCBwID0gLWMsIGMgPSAwKSwgbC5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChvKSkgKyBlLmxlbmd0aCwgYS5zbGlkZVNoYWRvd3MgJiYgaShsLCBvKTtcbiAgICAgICAgICBjb25zdCBoID0gYHRyYW5zbGF0ZTNkKCR7dX1weCwgJHttfXB4LCAwcHgpIHJvdGF0ZVgoJHtyKHApfWRlZykgcm90YXRlWSgke3IoYyl9ZGVnKWA7XG4gICAgICAgICAgbWUoMCwgbCkuc3R5bGUudHJhbnNmb3JtID0gaFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZSA9PiB7XG4gICAgICAgIGNvbnN0IHMgPSB0LnNsaWRlcy5tYXAoKGUgPT4gaChlKSkpO1xuICAgICAgICBzLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgIHQuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZX1tc2AsIHQucXVlcnlTZWxlY3RvckFsbChcIi5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdFwiKS5mb3JFYWNoKCh0ID0+IHtcbiAgICAgICAgICAgIHQuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZX1tc2BcbiAgICAgICAgICB9KSlcbiAgICAgICAgfSkpLCBoZSh7c3dpcGVyOiB0LCBkdXJhdGlvbjogZSwgdHJhbnNmb3JtRWxlbWVudHM6IHN9KVxuICAgICAgfSxcbiAgICAgIHJlY3JlYXRlU2hhZG93czogKCkgPT4ge1xuICAgICAgICB0LnBhcmFtcy5mbGlwRWZmZWN0LCB0LnNsaWRlcy5mb3JFYWNoKChlID0+IHtcbiAgICAgICAgICBsZXQgcyA9IGUucHJvZ3Jlc3M7XG4gICAgICAgICAgdC5wYXJhbXMuZmxpcEVmZmVjdC5saW1pdFJvdGF0aW9uICYmIChzID0gTWF0aC5tYXgoTWF0aC5taW4oZS5wcm9ncmVzcywgMSksIC0xKSksIGkoZSwgcylcbiAgICAgICAgfSkpXG4gICAgICB9LFxuICAgICAgZ2V0RWZmZWN0UGFyYW1zOiAoKSA9PiB0LnBhcmFtcy5mbGlwRWZmZWN0LFxuICAgICAgcGVyc3BlY3RpdmU6ICgpID0+ICEwLFxuICAgICAgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoe1xuICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogITAsXG4gICAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgICAgdmlydHVhbFRyYW5zbGF0ZTogIXQucGFyYW1zLmNzc01vZGVcbiAgICAgIH0pXG4gICAgfSlcbiAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICBsZXQge3N3aXBlcjogdCwgZXh0ZW5kUGFyYW1zOiBzLCBvbjogYX0gPSBlO1xuICAgIHMoe2NvdmVyZmxvd0VmZmVjdDoge3JvdGF0ZTogNTAsIHN0cmV0Y2g6IDAsIGRlcHRoOiAxMDAsIHNjYWxlOiAxLCBtb2RpZmllcjogMSwgc2xpZGVTaGFkb3dzOiAhMH19KSwgdWUoe1xuICAgICAgZWZmZWN0OiBcImNvdmVyZmxvd1wiLCBzd2lwZXI6IHQsIG9uOiBhLCBzZXRUcmFuc2xhdGU6ICgpID0+IHtcbiAgICAgICAgY29uc3Qge3dpZHRoOiBlLCBoZWlnaHQ6IHMsIHNsaWRlczogYSwgc2xpZGVzU2l6ZXNHcmlkOiBpfSA9IHQsIHIgPSB0LnBhcmFtcy5jb3ZlcmZsb3dFZmZlY3QsXG4gICAgICAgICAgbiA9IHQuaXNIb3Jpem9udGFsKCksIGwgPSB0LnRyYW5zbGF0ZSwgbyA9IG4gPyBlIC8gMiAtIGwgOiBzIC8gMiAtIGwsIGQgPSBuID8gci5yb3RhdGUgOiAtci5yb3RhdGUsXG4gICAgICAgICAgYyA9IHIuZGVwdGgsIHAgPSBNKHQpO1xuICAgICAgICBmb3IgKGxldCBlID0gMCwgdCA9IGEubGVuZ3RoOyBlIDwgdDsgZSArPSAxKSB7XG4gICAgICAgICAgY29uc3QgdCA9IGFbZV0sIHMgPSBpW2VdLCBsID0gKG8gLSB0LnN3aXBlclNsaWRlT2Zmc2V0IC0gcyAvIDIpIC8gcyxcbiAgICAgICAgICAgIHUgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHIubW9kaWZpZXIgPyByLm1vZGlmaWVyKGwpIDogbCAqIHIubW9kaWZpZXI7XG4gICAgICAgICAgbGV0IG0gPSBuID8gZCAqIHUgOiAwLCBoID0gbiA/IDAgOiBkICogdSwgZiA9IC1jICogTWF0aC5hYnModSksIGcgPSByLnN0cmV0Y2g7XG4gICAgICAgICAgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZyAmJiAtMSAhPT0gZy5pbmRleE9mKFwiJVwiKSAmJiAoZyA9IHBhcnNlRmxvYXQoci5zdHJldGNoKSAvIDEwMCAqIHMpO1xuICAgICAgICAgIGxldCB2ID0gbiA/IDAgOiBnICogdSwgdyA9IG4gPyBnICogdSA6IDAsIGIgPSAxIC0gKDEgLSByLnNjYWxlKSAqIE1hdGguYWJzKHUpO1xuICAgICAgICAgIE1hdGguYWJzKHcpIDwgLjAwMSAmJiAodyA9IDApLCBNYXRoLmFicyh2KSA8IC4wMDEgJiYgKHYgPSAwKSwgTWF0aC5hYnMoZikgPCAuMDAxICYmIChmID0gMCksIE1hdGguYWJzKG0pIDwgLjAwMSAmJiAobSA9IDApLCBNYXRoLmFicyhoKSA8IC4wMDEgJiYgKGggPSAwKSwgTWF0aC5hYnMoYikgPCAuMDAxICYmIChiID0gMCk7XG4gICAgICAgICAgY29uc3QgeSA9IGB0cmFuc2xhdGUzZCgke3d9cHgsJHt2fXB4LCR7Zn1weCkgIHJvdGF0ZVgoJHtwKGgpfWRlZykgcm90YXRlWSgke3AobSl9ZGVnKSBzY2FsZSgke2J9KWA7XG4gICAgICAgICAgaWYgKG1lKDAsIHQpLnN0eWxlLnRyYW5zZm9ybSA9IHksIHQuc3R5bGUuekluZGV4ID0gMSAtIE1hdGguYWJzKE1hdGgucm91bmQodSkpLCByLnNsaWRlU2hhZG93cykge1xuICAgICAgICAgICAgbGV0IGUgPSBuID8gdC5xdWVyeVNlbGVjdG9yKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdFwiKSA6IHQucXVlcnlTZWxlY3RvcihcIi5zd2lwZXItc2xpZGUtc2hhZG93LXRvcFwiKSxcbiAgICAgICAgICAgICAgcyA9IG4gPyB0LnF1ZXJ5U2VsZWN0b3IoXCIuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodFwiKSA6IHQucXVlcnlTZWxlY3RvcihcIi5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbVwiKTtcbiAgICAgICAgICAgIGUgfHwgKGUgPSBmZShcImNvdmVyZmxvd1wiLCB0LCBuID8gXCJsZWZ0XCIgOiBcInRvcFwiKSksIHMgfHwgKHMgPSBmZShcImNvdmVyZmxvd1wiLCB0LCBuID8gXCJyaWdodFwiIDogXCJib3R0b21cIikpLCBlICYmIChlLnN0eWxlLm9wYWNpdHkgPSB1ID4gMCA/IHUgOiAwKSwgcyAmJiAocy5zdHlsZS5vcGFjaXR5ID0gLXUgPiAwID8gLXUgOiAwKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgc2V0VHJhbnNpdGlvbjogZSA9PiB7XG4gICAgICAgIHQuc2xpZGVzLm1hcCgoZSA9PiBoKGUpKSkuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgdC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtlfW1zYCwgdC5xdWVyeVNlbGVjdG9yQWxsKFwiLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0XCIpLmZvckVhY2goKHQgPT4ge1xuICAgICAgICAgICAgdC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtlfW1zYFxuICAgICAgICAgIH0pKVxuICAgICAgICB9KSlcbiAgICAgIH0sIHBlcnNwZWN0aXZlOiAoKSA9PiAhMCwgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoe3dhdGNoU2xpZGVzUHJvZ3Jlc3M6ICEwfSlcbiAgICB9KVxuICB9LCBmdW5jdGlvbiAoZSkge1xuICAgIGxldCB7c3dpcGVyOiB0LCBleHRlbmRQYXJhbXM6IHMsIG9uOiBhfSA9IGU7XG4gICAgcyh7XG4gICAgICBjcmVhdGl2ZUVmZmVjdDoge1xuICAgICAgICBsaW1pdFByb2dyZXNzOiAxLFxuICAgICAgICBzaGFkb3dQZXJQcm9ncmVzczogITEsXG4gICAgICAgIHByb2dyZXNzTXVsdGlwbGllcjogMSxcbiAgICAgICAgcGVyc3BlY3RpdmU6ICEwLFxuICAgICAgICBwcmV2OiB7dHJhbnNsYXRlOiBbMCwgMCwgMF0sIHJvdGF0ZTogWzAsIDAsIDBdLCBvcGFjaXR5OiAxLCBzY2FsZTogMX0sXG4gICAgICAgIG5leHQ6IHt0cmFuc2xhdGU6IFswLCAwLCAwXSwgcm90YXRlOiBbMCwgMCwgMF0sIG9wYWNpdHk6IDEsIHNjYWxlOiAxfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGkgPSBlID0+IFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgPyBlIDogYCR7ZX1weGA7XG4gICAgdWUoe1xuICAgICAgZWZmZWN0OiBcImNyZWF0aXZlXCIsXG4gICAgICBzd2lwZXI6IHQsXG4gICAgICBvbjogYSxcbiAgICAgIHNldFRyYW5zbGF0ZTogKCkgPT4ge1xuICAgICAgICBjb25zdCB7c2xpZGVzOiBlLCB3cmFwcGVyRWw6IHMsIHNsaWRlc1NpemVzR3JpZDogYX0gPSB0LFxuICAgICAgICAgIHIgPSB0LnBhcmFtcy5jcmVhdGl2ZUVmZmVjdCwge3Byb2dyZXNzTXVsdGlwbGllcjogbn0gPSByLCBsID0gdC5wYXJhbXMuY2VudGVyZWRTbGlkZXMsIG8gPSBNKHQpO1xuICAgICAgICBpZiAobCkge1xuICAgICAgICAgIGNvbnN0IGUgPSBhWzBdIC8gMiAtIHQucGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZSB8fCAwO1xuICAgICAgICAgIHMuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoY2FsYyg1MCUgLSAke2V9cHgpKWBcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBzID0gMDsgcyA8IGUubGVuZ3RoOyBzICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBhID0gZVtzXSwgZCA9IGEucHJvZ3Jlc3MsIGMgPSBNYXRoLm1pbihNYXRoLm1heChhLnByb2dyZXNzLCAtci5saW1pdFByb2dyZXNzKSwgci5saW1pdFByb2dyZXNzKTtcbiAgICAgICAgICBsZXQgcCA9IGM7XG4gICAgICAgICAgbCB8fCAocCA9IE1hdGgubWluKE1hdGgubWF4KGEub3JpZ2luYWxQcm9ncmVzcywgLXIubGltaXRQcm9ncmVzcyksIHIubGltaXRQcm9ncmVzcykpO1xuICAgICAgICAgIGNvbnN0IHUgPSBhLnN3aXBlclNsaWRlT2Zmc2V0LCBtID0gW3QucGFyYW1zLmNzc01vZGUgPyAtdSAtIHQudHJhbnNsYXRlIDogLXUsIDAsIDBdLCBoID0gWzAsIDAsIDBdO1xuICAgICAgICAgIGxldCBmID0gITE7XG4gICAgICAgICAgdC5pc0hvcml6b250YWwoKSB8fCAobVsxXSA9IG1bMF0sIG1bMF0gPSAwKTtcbiAgICAgICAgICBsZXQgZyA9IHt0cmFuc2xhdGU6IFswLCAwLCAwXSwgcm90YXRlOiBbMCwgMCwgMF0sIHNjYWxlOiAxLCBvcGFjaXR5OiAxfTtcbiAgICAgICAgICBjIDwgMCA/IChnID0gci5uZXh0LCBmID0gITApIDogYyA+IDAgJiYgKGcgPSByLnByZXYsIGYgPSAhMCksIG0uZm9yRWFjaCgoKGUsIHQpID0+IHtcbiAgICAgICAgICAgIG1bdF0gPSBgY2FsYygke2V9cHggKyAoJHtpKGcudHJhbnNsYXRlW3RdKX0gKiAke01hdGguYWJzKGMgKiBuKX0pKWBcbiAgICAgICAgICB9KSksIGguZm9yRWFjaCgoKGUsIHQpID0+IHtcbiAgICAgICAgICAgIGxldCBzID0gZy5yb3RhdGVbdF0gKiBNYXRoLmFicyhjICogbik7XG4gICAgICAgICAgICBoW3RdID0gc1xuICAgICAgICAgIH0pKSwgYS5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChkKSkgKyBlLmxlbmd0aDtcbiAgICAgICAgICBjb25zdCB2ID0gbS5qb2luKFwiLCBcIiksIHcgPSBgcm90YXRlWCgke28oaFswXSl9ZGVnKSByb3RhdGVZKCR7byhoWzFdKX1kZWcpIHJvdGF0ZVooJHtvKGhbMl0pfWRlZylgLFxuICAgICAgICAgICAgYiA9IHAgPCAwID8gYHNjYWxlKCR7MSArICgxIC0gZy5zY2FsZSkgKiBwICogbn0pYCA6IGBzY2FsZSgkezEgLSAoMSAtIGcuc2NhbGUpICogcCAqIG59KWAsXG4gICAgICAgICAgICB5ID0gcCA8IDAgPyAxICsgKDEgLSBnLm9wYWNpdHkpICogcCAqIG4gOiAxIC0gKDEgLSBnLm9wYWNpdHkpICogcCAqIG4sIEUgPSBgdHJhbnNsYXRlM2QoJHt2fSkgJHt3fSAke2J9YDtcbiAgICAgICAgICBpZiAoZiAmJiBnLnNoYWRvdyB8fCAhZikge1xuICAgICAgICAgICAgbGV0IGUgPSBhLnF1ZXJ5U2VsZWN0b3IoXCIuc3dpcGVyLXNsaWRlLXNoYWRvd1wiKTtcbiAgICAgICAgICAgIGlmICghZSAmJiBnLnNoYWRvdyAmJiAoZSA9IGZlKFwiY3JlYXRpdmVcIiwgYSkpLCBlKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHQgPSByLnNoYWRvd1BlclByb2dyZXNzID8gYyAqICgxIC8gci5saW1pdFByb2dyZXNzKSA6IGM7XG4gICAgICAgICAgICAgIGUuc3R5bGUub3BhY2l0eSA9IE1hdGgubWluKE1hdGgubWF4KE1hdGguYWJzKHQpLCAwKSwgMSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgeCA9IG1lKDAsIGEpO1xuICAgICAgICAgIHguc3R5bGUudHJhbnNmb3JtID0gRSwgeC5zdHlsZS5vcGFjaXR5ID0geSwgZy5vcmlnaW4gJiYgKHguc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gZy5vcmlnaW4pXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzZXRUcmFuc2l0aW9uOiBlID0+IHtcbiAgICAgICAgY29uc3QgcyA9IHQuc2xpZGVzLm1hcCgoZSA9PiBoKGUpKSk7XG4gICAgICAgIHMuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgdC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtlfW1zYCwgdC5xdWVyeVNlbGVjdG9yQWxsKFwiLnN3aXBlci1zbGlkZS1zaGFkb3dcIikuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICB0LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2V9bXNgXG4gICAgICAgICAgfSkpXG4gICAgICAgIH0pKSwgaGUoe3N3aXBlcjogdCwgZHVyYXRpb246IGUsIHRyYW5zZm9ybUVsZW1lbnRzOiBzLCBhbGxTbGlkZXM6ICEwfSlcbiAgICAgIH0sXG4gICAgICBwZXJzcGVjdGl2ZTogKCkgPT4gdC5wYXJhbXMuY3JlYXRpdmVFZmZlY3QucGVyc3BlY3RpdmUsXG4gICAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7d2F0Y2hTbGlkZXNQcm9ncmVzczogITAsIHZpcnR1YWxUcmFuc2xhdGU6ICF0LnBhcmFtcy5jc3NNb2RlfSlcbiAgICB9KVxuICB9LCBmdW5jdGlvbiAoZSkge1xuICAgIGxldCB7c3dpcGVyOiB0LCBleHRlbmRQYXJhbXM6IHMsIG9uOiBhfSA9IGU7XG4gICAgcyh7Y2FyZHNFZmZlY3Q6IHtzbGlkZVNoYWRvd3M6ICEwLCByb3RhdGU6ICEwLCBwZXJTbGlkZVJvdGF0ZTogMiwgcGVyU2xpZGVPZmZzZXQ6IDh9fSksIHVlKHtcbiAgICAgIGVmZmVjdDogXCJjYXJkc1wiLCBzd2lwZXI6IHQsIG9uOiBhLCBzZXRUcmFuc2xhdGU6ICgpID0+IHtcbiAgICAgICAgY29uc3Qge3NsaWRlczogZSwgYWN0aXZlSW5kZXg6IHMsIHJ0bFRyYW5zbGF0ZTogYX0gPSB0LCBpID0gdC5wYXJhbXMuY2FyZHNFZmZlY3QsIHtcbiAgICAgICAgICBzdGFydFRyYW5zbGF0ZTogcixcbiAgICAgICAgICBpc1RvdWNoZWQ6IG5cbiAgICAgICAgfSA9IHQudG91Y2hFdmVudHNEYXRhLCBsID0gYSA/IC10LnRyYW5zbGF0ZSA6IHQudHJhbnNsYXRlO1xuICAgICAgICBmb3IgKGxldCBvID0gMDsgbyA8IGUubGVuZ3RoOyBvICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBkID0gZVtvXSwgYyA9IGQucHJvZ3Jlc3MsIHAgPSBNYXRoLm1pbihNYXRoLm1heChjLCAtNCksIDQpO1xuICAgICAgICAgIGxldCB1ID0gZC5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgICAgICB0LnBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiAhdC5wYXJhbXMuY3NzTW9kZSAmJiAodC53cmFwcGVyRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHt0Lm1pblRyYW5zbGF0ZSgpfXB4KWApLCB0LnBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiB0LnBhcmFtcy5jc3NNb2RlICYmICh1IC09IGVbMF0uc3dpcGVyU2xpZGVPZmZzZXQpO1xuICAgICAgICAgIGxldCBtID0gdC5wYXJhbXMuY3NzTW9kZSA/IC11IC0gdC50cmFuc2xhdGUgOiAtdSwgaCA9IDA7XG4gICAgICAgICAgY29uc3QgZiA9IC0xMDAgKiBNYXRoLmFicyhwKTtcbiAgICAgICAgICBsZXQgZyA9IDEsIHYgPSAtaS5wZXJTbGlkZVJvdGF0ZSAqIHAsIHcgPSBpLnBlclNsaWRlT2Zmc2V0IC0gLjc1ICogTWF0aC5hYnMocCk7XG4gICAgICAgICAgY29uc3QgYiA9IHQudmlydHVhbCAmJiB0LnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyB0LnZpcnR1YWwuZnJvbSArIG8gOiBvLFxuICAgICAgICAgICAgeSA9IChiID09PSBzIHx8IGIgPT09IHMgLSAxKSAmJiBwID4gMCAmJiBwIDwgMSAmJiAobiB8fCB0LnBhcmFtcy5jc3NNb2RlKSAmJiBsIDwgcixcbiAgICAgICAgICAgIEUgPSAoYiA9PT0gcyB8fCBiID09PSBzICsgMSkgJiYgcCA8IDAgJiYgcCA+IC0xICYmIChuIHx8IHQucGFyYW1zLmNzc01vZGUpICYmIGwgPiByO1xuICAgICAgICAgIGlmICh5IHx8IEUpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSAoMSAtIE1hdGguYWJzKChNYXRoLmFicyhwKSAtIC41KSAvIC41KSkgKiogLjU7XG4gICAgICAgICAgICB2ICs9IC0yOCAqIHAgKiBlLCBnICs9IC0uNSAqIGUsIHcgKz0gOTYgKiBlLCBoID0gLTI1ICogZSAqIE1hdGguYWJzKHApICsgXCIlXCJcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG0gPSBwIDwgMCA/IGBjYWxjKCR7bX1weCAke2EgPyBcIi1cIiA6IFwiK1wifSAoJHt3ICogTWF0aC5hYnMocCl9JSkpYCA6IHAgPiAwID8gYGNhbGMoJHttfXB4ICR7YSA/IFwiLVwiIDogXCIrXCJ9ICgtJHt3ICogTWF0aC5hYnMocCl9JSkpYCA6IGAke219cHhgLCAhdC5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgY29uc3QgZSA9IGg7XG4gICAgICAgICAgICBoID0gbSwgbSA9IGVcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgeCA9IHAgPCAwID8gXCJcIiArICgxICsgKDEgLSBnKSAqIHApIDogXCJcIiArICgxIC0gKDEgLSBnKSAqIHApLFxuICAgICAgICAgICAgUyA9IGBcXG4gICAgICAgIHRyYW5zbGF0ZTNkKCR7bX0sICR7aH0sICR7Zn1weClcXG4gICAgICAgIHJvdGF0ZVooJHtpLnJvdGF0ZSA/IGEgPyAtdiA6IHYgOiAwfWRlZylcXG4gICAgICAgIHNjYWxlKCR7eH0pXFxuICAgICAgYDtcbiAgICAgICAgICBpZiAoaS5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgICAgIGxldCBlID0gZC5xdWVyeVNlbGVjdG9yKFwiLnN3aXBlci1zbGlkZS1zaGFkb3dcIik7XG4gICAgICAgICAgICBlIHx8IChlID0gZmUoXCJjYXJkc1wiLCBkKSksIGUgJiYgKGUuc3R5bGUub3BhY2l0eSA9IE1hdGgubWluKE1hdGgubWF4KChNYXRoLmFicyhwKSAtIC41KSAvIC41LCAwKSwgMSkpXG4gICAgICAgICAgfVxuICAgICAgICAgIGQuc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQoYykpICsgZS5sZW5ndGg7XG4gICAgICAgICAgbWUoMCwgZCkuc3R5bGUudHJhbnNmb3JtID0gU1xuICAgICAgICB9XG4gICAgICB9LCBzZXRUcmFuc2l0aW9uOiBlID0+IHtcbiAgICAgICAgY29uc3QgcyA9IHQuc2xpZGVzLm1hcCgoZSA9PiBoKGUpKSk7XG4gICAgICAgIHMuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgdC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtlfW1zYCwgdC5xdWVyeVNlbGVjdG9yQWxsKFwiLnN3aXBlci1zbGlkZS1zaGFkb3dcIikuZm9yRWFjaCgodCA9PiB7XG4gICAgICAgICAgICB0LnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2V9bXNgXG4gICAgICAgICAgfSkpXG4gICAgICAgIH0pKSwgaGUoe3N3aXBlcjogdCwgZHVyYXRpb246IGUsIHRyYW5zZm9ybUVsZW1lbnRzOiBzfSlcbiAgICAgIH0sIHBlcnNwZWN0aXZlOiAoKSA9PiAhMCwgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoe3dhdGNoU2xpZGVzUHJvZ3Jlc3M6ICEwLCB2aXJ0dWFsVHJhbnNsYXRlOiAhdC5wYXJhbXMuY3NzTW9kZX0pXG4gICAgfSlcbiAgfV07XG4gIHJldHVybiBpZS51c2UoZ2UpLCBpZVxufSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpcGVyLWJ1bmRsZS5taW4uanMubWFwXG4iLCJmdW5jdGlvbiBpc0luKHQsZSl7cmV0dXJuIGUuaW5kZXhPZih0KT49MH1mdW5jdGlvbiBleHRlbmQodCxlKXtmb3IoY29uc3QgbiBpbiBlKWlmKG51bGw9PXRbbl0pe2NvbnN0IGk9ZVtuXTt0W25dPWl9cmV0dXJuIHR9ZnVuY3Rpb24gaXNNb2JpbGUodCl7cmV0dXJuL0FuZHJvaWR8d2ViT1N8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KHQpfWZ1bmN0aW9uIGNyZWF0ZUV2ZW50KHQsZT0hMSxuPSExLGk9bnVsbCl7bGV0IHM7cmV0dXJuIG51bGwhPWRvY3VtZW50LmNyZWF0ZUV2ZW50PyhzPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIikscy5pbml0Q3VzdG9tRXZlbnQodCxlLG4saSkpOm51bGwhPWRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0PyhzPWRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0KCkscy5ldmVudFR5cGU9dCk6cy5ldmVudE5hbWU9dCxzfWZ1bmN0aW9uIGVtaXRFdmVudCh0LGUpe251bGwhPXQuZGlzcGF0Y2hFdmVudD90LmRpc3BhdGNoRXZlbnQoZSk6ZSBpbihudWxsIT10KT90W2VdKCk6YG9uJHtlfWBpbihudWxsIT10KSYmdFtgb24ke2V9YF0oKX1mdW5jdGlvbiBhZGRFdmVudCh0LGUsbil7bnVsbCE9dC5hZGRFdmVudExpc3RlbmVyP3QuYWRkRXZlbnRMaXN0ZW5lcihlLG4sITEpOm51bGwhPXQuYXR0YWNoRXZlbnQ/dC5hdHRhY2hFdmVudChgb24ke2V9YCxuKTp0W2VdPW59ZnVuY3Rpb24gcmVtb3ZlRXZlbnQodCxlLG4pe251bGwhPXQucmVtb3ZlRXZlbnRMaXN0ZW5lcj90LnJlbW92ZUV2ZW50TGlzdGVuZXIoZSxuLCExKTpudWxsIT10LmRldGFjaEV2ZW50P3QuZGV0YWNoRXZlbnQoYG9uJHtlfWAsbik6ZGVsZXRlIHRbZV19ZnVuY3Rpb24gZ2V0SW5uZXJIZWlnaHQoKXtyZXR1cm5cImlubmVySGVpZ2h0XCJpbiB3aW5kb3c/d2luZG93LmlubmVySGVpZ2h0OmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHR9Y29uc3QgV2Vha01hcD13aW5kb3cuV2Vha01hcHx8d2luZG93Lk1veldlYWtNYXB8fGNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5rZXlzPVtdLHRoaXMudmFsdWVzPVtdfWdldCh0KXtmb3IobGV0IGU9MDtlPHRoaXMua2V5cy5sZW5ndGg7ZSsrKXtpZih0aGlzLmtleXNbZV09PT10KXJldHVybiB0aGlzLnZhbHVlc1tlXX19c2V0KHQsZSl7Zm9yKGxldCBuPTA7bjx0aGlzLmtleXMubGVuZ3RoO24rKyl7aWYodGhpcy5rZXlzW25dPT09dClyZXR1cm4gdGhpcy52YWx1ZXNbbl09ZSx0aGlzfXJldHVybiB0aGlzLmtleXMucHVzaCh0KSx0aGlzLnZhbHVlcy5wdXNoKGUpLHRoaXN9fSxNdXRhdGlvbk9ic2VydmVyPXdpbmRvdy5NdXRhdGlvbk9ic2VydmVyfHx3aW5kb3cuV2Via2l0TXV0YXRpb25PYnNlcnZlcnx8d2luZG93Lk1vek11dGF0aW9uT2JzZXJ2ZXJ8fGNsYXNze2NvbnN0cnVjdG9yKCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGNvbnNvbGUmJm51bGwhPT1jb25zb2xlJiYoY29uc29sZS53YXJuKFwiTXV0YXRpb25PYnNlcnZlciBpcyBub3Qgc3VwcG9ydGVkIGJ5IHlvdXIgYnJvd3Nlci5cIiksY29uc29sZS53YXJuKFwiV09XLmpzIGNhbm5vdCBkZXRlY3QgZG9tIG11dGF0aW9ucywgcGxlYXNlIGNhbGwgLnN5bmMoKSBhZnRlciBsb2FkaW5nIG5ldyBjb250ZW50LlwiKSl9c3RhdGljIG5vdFN1cHBvcnRlZD0hMDtvYnNlcnZlKCl7fX0sZ2V0Q29tcHV0ZWRTdHlsZT13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZXx8ZnVuY3Rpb24odCl7Y29uc3QgZT0vKFxcLShbYS16XSl7MX0pL2c7cmV0dXJue2dldFByb3BlcnR5VmFsdWUobil7XCJmbG9hdFwiPT09biYmKG49XCJzdHlsZUZsb2F0XCIpLGUudGVzdChuKSYmbi5yZXBsYWNlKGUsKCh0LGUpPT5lLnRvVXBwZXJDYXNlKCkpKTtjb25zdHtjdXJyZW50U3R5bGU6aX09dDtyZXR1cm4obnVsbCE9aT9pW25dOnZvaWQgMCl8fG51bGx9fX07Y2xhc3MgV09Xe2RlZmF1bHRzPXtib3hDbGFzczpcIndvd1wiLGFuaW1hdGVDbGFzczpcImFuaW1hdGVkXCIsb2Zmc2V0OjAsbW9iaWxlOiEwLGxpdmU6ITAsY2FsbGJhY2s6bnVsbCxzY3JvbGxDb250YWluZXI6bnVsbCxyZXNldEFuaW1hdGlvbjohMH07Y29uc3RydWN0b3IodD17fSl7dGhpcy5zdGFydD10aGlzLnN0YXJ0LmJpbmQodGhpcyksdGhpcy5yZXNldEFuaW1hdGlvbj10aGlzLnJlc2V0QW5pbWF0aW9uLmJpbmQodGhpcyksdGhpcy5zY3JvbGxIYW5kbGVyPXRoaXMuc2Nyb2xsSGFuZGxlci5iaW5kKHRoaXMpLHRoaXMuc2Nyb2xsQ2FsbGJhY2s9dGhpcy5zY3JvbGxDYWxsYmFjay5iaW5kKHRoaXMpLHRoaXMuc2Nyb2xsZWQ9ITAsdGhpcy5jb25maWc9ZXh0ZW5kKHQsdGhpcy5kZWZhdWx0cyksbnVsbCE9dC5zY3JvbGxDb250YWluZXImJih0aGlzLmNvbmZpZy5zY3JvbGxDb250YWluZXI9ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0LnNjcm9sbENvbnRhaW5lcikpLHRoaXMuYW5pbWF0aW9uTmFtZUNhY2hlPW5ldyBXZWFrTWFwLHRoaXMud293RXZlbnQ9Y3JlYXRlRXZlbnQodGhpcy5jb25maWcuYm94Q2xhc3MpfWluaXQoKXt0aGlzLmVsZW1lbnQ9d2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxpc0luKGRvY3VtZW50LnJlYWR5U3RhdGUsW1wiaW50ZXJhY3RpdmVcIixcImNvbXBsZXRlXCJdKT90aGlzLnN0YXJ0KCk6YWRkRXZlbnQoZG9jdW1lbnQsXCJET01Db250ZW50TG9hZGVkXCIsdGhpcy5zdGFydCksdGhpcy5maW5pc2hlZD1bXX1zdGFydCgpe2lmKHRoaXMuc3RvcHBlZD0hMSx0aGlzLmJveGVzPVtdLnNsaWNlLmNhbGwodGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYC4ke3RoaXMuY29uZmlnLmJveENsYXNzfWApKSx0aGlzLmFsbD10aGlzLmJveGVzLnNsaWNlKDApLHRoaXMuYm94ZXMubGVuZ3RoKWlmKHRoaXMuZGlzYWJsZWQoKSl0aGlzLnJlc2V0U3R5bGUoKTtlbHNlIGZvcihsZXQgdD0wO3Q8dGhpcy5ib3hlcy5sZW5ndGg7dCsrKXtjb25zdCBlPXRoaXMuYm94ZXNbdF07dGhpcy5hcHBseVN0eWxlKGUsITApfWlmKHRoaXMuZGlzYWJsZWQoKXx8KGFkZEV2ZW50KHRoaXMuY29uZmlnLnNjcm9sbENvbnRhaW5lcnx8d2luZG93LFwic2Nyb2xsXCIsdGhpcy5zY3JvbGxIYW5kbGVyKSxhZGRFdmVudCh3aW5kb3csXCJyZXNpemVcIix0aGlzLnNjcm9sbEhhbmRsZXIpLHRoaXMuaW50ZXJ2YWw9c2V0SW50ZXJ2YWwodGhpcy5zY3JvbGxDYWxsYmFjayw1MCkpLHRoaXMuY29uZmlnLmxpdmUpe25ldyBNdXRhdGlvbk9ic2VydmVyKCh0PT57Zm9yKGxldCBlPTA7ZTx0Lmxlbmd0aDtlKyspe2NvbnN0IG49dFtlXTtmb3IobGV0IHQ9MDt0PG4uYWRkZWROb2Rlcy5sZW5ndGg7dCsrKXtjb25zdCBlPW4uYWRkZWROb2Rlc1t0XTt0aGlzLmRvU3luYyhlKX19fSkpLm9ic2VydmUoZG9jdW1lbnQuYm9keSx7Y2hpbGRMaXN0OiEwLHN1YnRyZWU6ITB9KX19c3RvcCgpe3RoaXMuc3RvcHBlZD0hMCxyZW1vdmVFdmVudCh0aGlzLmNvbmZpZy5zY3JvbGxDb250YWluZXJ8fHdpbmRvdyxcInNjcm9sbFwiLHRoaXMuc2Nyb2xsSGFuZGxlcikscmVtb3ZlRXZlbnQod2luZG93LFwicmVzaXplXCIsdGhpcy5zY3JvbGxIYW5kbGVyKSxudWxsIT10aGlzLmludGVydmFsJiZjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpfXN5bmMoKXtNdXRhdGlvbk9ic2VydmVyLm5vdFN1cHBvcnRlZCYmdGhpcy5kb1N5bmModGhpcy5lbGVtZW50KX1kb1N5bmModCl7aWYobnVsbD09dCYmKHtlbGVtZW50OnR9PXRoaXMpLDEhPT10Lm5vZGVUeXBlKXJldHVybjtjb25zdCBlPSh0PXQucGFyZW50Tm9kZXx8dCkucXVlcnlTZWxlY3RvckFsbChgLiR7dGhpcy5jb25maWcuYm94Q2xhc3N9YCk7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0Kyspe2NvbnN0IG49ZVt0XTtpc0luKG4sdGhpcy5hbGwpfHwodGhpcy5ib3hlcy5wdXNoKG4pLHRoaXMuYWxsLnB1c2gobiksdGhpcy5zdG9wcGVkfHx0aGlzLmRpc2FibGVkKCk/dGhpcy5yZXNldFN0eWxlKCk6dGhpcy5hcHBseVN0eWxlKG4sITApLHRoaXMuc2Nyb2xsZWQ9ITApfX1zaG93KHQpe3JldHVybiB0aGlzLmFwcGx5U3R5bGUodCksdC5jbGFzc05hbWU9YCR7dC5jbGFzc05hbWV9ICR7dGhpcy5jb25maWcuYW5pbWF0ZUNsYXNzfWAsbnVsbCE9dGhpcy5jb25maWcuY2FsbGJhY2smJnRoaXMuY29uZmlnLmNhbGxiYWNrKHQpLGVtaXRFdmVudCh0LHRoaXMud293RXZlbnQpLHRoaXMuY29uZmlnLnJlc2V0QW5pbWF0aW9uJiYoYWRkRXZlbnQodCxcImFuaW1hdGlvbmVuZFwiLHRoaXMucmVzZXRBbmltYXRpb24pLGFkZEV2ZW50KHQsXCJvYW5pbWF0aW9uZW5kXCIsdGhpcy5yZXNldEFuaW1hdGlvbiksYWRkRXZlbnQodCxcIndlYmtpdEFuaW1hdGlvbkVuZFwiLHRoaXMucmVzZXRBbmltYXRpb24pLGFkZEV2ZW50KHQsXCJNU0FuaW1hdGlvbkVuZFwiLHRoaXMucmVzZXRBbmltYXRpb24pKSx0fWFwcGx5U3R5bGUodCxlKXtjb25zdCBuPXQuZ2V0QXR0cmlidXRlKFwiZGF0YS13b3ctZHVyYXRpb25cIiksaT10LmdldEF0dHJpYnV0ZShcImRhdGEtd293LWRlbGF5XCIpLHM9dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdvdy1pdGVyYXRpb25cIik7cmV0dXJuIHRoaXMuYW5pbWF0ZSgoKCk9PnRoaXMuY3VzdG9tU3R5bGUodCxlLG4saSxzKSkpfWFuaW1hdGU9ZnVuY3Rpb24oKXtyZXR1cm5cInJlcXVlc3RBbmltYXRpb25GcmFtZVwiaW4gd2luZG93P3Q9PndpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodCk6dD0+dCgpfSgpO3Jlc2V0U3R5bGUoKXtmb3IobGV0IHQ9MDt0PHRoaXMuYm94ZXMubGVuZ3RoO3QrKyl7dGhpcy5ib3hlc1t0XS5zdHlsZS52aXNpYmlsaXR5PVwidmlzaWJsZVwifX1yZXNldEFuaW1hdGlvbih0KXtpZih0LnR5cGUudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiYW5pbWF0aW9uZW5kXCIpPj0wKXtjb25zdCBlPXQudGFyZ2V0fHx0LnNyY0VsZW1lbnQ7ZS5jbGFzc05hbWU9ZS5jbGFzc05hbWUucmVwbGFjZSh0aGlzLmNvbmZpZy5hbmltYXRlQ2xhc3MsXCJcIikudHJpbSgpfX1jdXN0b21TdHlsZSh0LGUsbixpLHMpe3JldHVybiBlJiZ0aGlzLmNhY2hlQW5pbWF0aW9uTmFtZSh0KSxuJiZ0aGlzLnZlbmRvclNldCh0LnN0eWxlLHthbmltYXRpb25EdXJhdGlvbjpufSksaSYmdGhpcy52ZW5kb3JTZXQodC5zdHlsZSx7YW5pbWF0aW9uRGVsYXk6aX0pLHMmJnRoaXMudmVuZG9yU2V0KHQuc3R5bGUse2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OnN9KSx0aGlzLnZlbmRvclNldCh0LnN0eWxlLHthbmltYXRpb25OYW1lOmU/XCJub25lXCI6dGhpcy5jYWNoZWRBbmltYXRpb25OYW1lKHQpfSksdC5zdHlsZS52aXNpYmlsaXR5PWU/XCJoaWRkZW5cIjpcInZpc2libGVcIix0fXZlbmRvcnM9W1wibW96XCIsXCJ3ZWJraXRcIl07dmVuZG9yU2V0KHQsZSl7Zm9yKGNvbnN0IG4gaW4gZSlpZihlLmhhc093blByb3BlcnR5KG4pKXtjb25zdCBpPWVbbl07dFtgJHtufWBdPWk7Zm9yKGxldCBlPTA7ZTx0aGlzLnZlbmRvcnMubGVuZ3RoO2UrKyl7dFtgJHt0aGlzLnZlbmRvcnNbZV19JHtuLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpfSR7bi5zdWJzdHIoMSl9YF09aX19fXZlbmRvckNTUyh0LGUpe2NvbnN0IG49Z2V0Q29tcHV0ZWRTdHlsZSh0KTtsZXQgaT1uLmdldFByb3BlcnR5Q1NTVmFsdWUoZSk7Zm9yKGxldCB0PTA7dDx0aGlzLnZlbmRvcnMubGVuZ3RoO3QrKyl7Y29uc3Qgcz10aGlzLnZlbmRvcnNbdF07aT1pfHxuLmdldFByb3BlcnR5Q1NTVmFsdWUoYC0ke3N9LSR7ZX1gKX1yZXR1cm4gaX1hbmltYXRpb25OYW1lKHQpe2xldCBlO3RyeXtlPXRoaXMudmVuZG9yQ1NTKHQsXCJhbmltYXRpb24tbmFtZVwiKS5jc3NUZXh0fWNhdGNoKG4pe2U9Z2V0Q29tcHV0ZWRTdHlsZSh0KS5nZXRQcm9wZXJ0eVZhbHVlKFwiYW5pbWF0aW9uLW5hbWVcIil9cmV0dXJuXCJub25lXCI9PT1lP1wiXCI6ZX1jYWNoZUFuaW1hdGlvbk5hbWUodCl7cmV0dXJuIHRoaXMuYW5pbWF0aW9uTmFtZUNhY2hlLnNldCh0LHRoaXMuYW5pbWF0aW9uTmFtZSh0KSl9Y2FjaGVkQW5pbWF0aW9uTmFtZSh0KXtyZXR1cm4gdGhpcy5hbmltYXRpb25OYW1lQ2FjaGUuZ2V0KHQpfXNjcm9sbEhhbmRsZXIoKXt0aGlzLnNjcm9sbGVkPSEwfXNjcm9sbENhbGxiYWNrKCl7aWYodGhpcy5zY3JvbGxlZCl7dGhpcy5zY3JvbGxlZD0hMTtjb25zdCB0PVtdO2ZvcihsZXQgZT0wO2U8dGhpcy5ib3hlcy5sZW5ndGg7ZSsrKXtjb25zdCBuPXRoaXMuYm94ZXNbZV07aWYobil7aWYodGhpcy5pc1Zpc2libGUobikpe3RoaXMuc2hvdyhuKTtjb250aW51ZX10LnB1c2gobil9fXRoaXMuYm94ZXM9dCx0aGlzLmJveGVzLmxlbmd0aHx8dGhpcy5jb25maWcubGl2ZXx8dGhpcy5zdG9wKCl9fW9mZnNldFRvcCh0KXtmb3IoO3ZvaWQgMD09PXQub2Zmc2V0VG9wOyl0PXQucGFyZW50Tm9kZTtsZXQgZT10Lm9mZnNldFRvcDtmb3IoO3Qub2Zmc2V0UGFyZW50OyllKz0odD10Lm9mZnNldFBhcmVudCkub2Zmc2V0VG9wO3JldHVybiBlfWlzVmlzaWJsZSh0KXtjb25zdCBlPXQuZ2V0QXR0cmlidXRlKFwiZGF0YS13b3ctb2Zmc2V0XCIpfHx0aGlzLmNvbmZpZy5vZmZzZXQsbj10aGlzLmNvbmZpZy5zY3JvbGxDb250YWluZXImJnRoaXMuY29uZmlnLnNjcm9sbENvbnRhaW5lci5zY3JvbGxUb3B8fHdpbmRvdy5wYWdlWU9mZnNldCxpPW4rTWF0aC5taW4odGhpcy5lbGVtZW50LmNsaWVudEhlaWdodCxnZXRJbm5lckhlaWdodCgpKS1lLHM9dGhpcy5vZmZzZXRUb3AodCksbz1zK3QuY2xpZW50SGVpZ2h0O3JldHVybiBzPD1pJiZvPj1ufWRpc2FibGVkKCl7cmV0dXJuIXRoaXMuY29uZmlnLm1vYmlsZSYmaXNNb2JpbGUobmF2aWdhdG9yLnVzZXJBZ2VudCl9fXdpbmRvdy5XT1c9V09XO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCIwNDE2MjgwZTNkMGMyZTJmYWNjOFwiKSIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUucGF0aHMgPSBbXTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCIvKiBnbG9iYWwgX19yZXNvdXJjZVF1ZXJ5LCBfX3dlYnBhY2tfaGFzaF9fICovXG4vLy8gPHJlZmVyZW5jZSB0eXBlcz1cIndlYnBhY2svbW9kdWxlXCIgLz5cbmltcG9ydCB3ZWJwYWNrSG90TG9nIGZyb20gXCJ3ZWJwYWNrL2hvdC9sb2cuanNcIjtcbmltcG9ydCBzdHJpcEFuc2kgZnJvbSBcIi4vdXRpbHMvc3RyaXBBbnNpLmpzXCI7XG5pbXBvcnQgcGFyc2VVUkwgZnJvbSBcIi4vdXRpbHMvcGFyc2VVUkwuanNcIjtcbmltcG9ydCBzb2NrZXQgZnJvbSBcIi4vc29ja2V0LmpzXCI7XG5pbXBvcnQgeyBmb3JtYXRQcm9ibGVtLCBzaG93LCBoaWRlIH0gZnJvbSBcIi4vb3ZlcmxheS5qc1wiO1xuaW1wb3J0IHsgbG9nLCBzZXRMb2dMZXZlbCB9IGZyb20gXCIuL3V0aWxzL2xvZy5qc1wiO1xuaW1wb3J0IHNlbmRNZXNzYWdlIGZyb20gXCIuL3V0aWxzL3NlbmRNZXNzYWdlLmpzXCI7XG5pbXBvcnQgcmVsb2FkQXBwIGZyb20gXCIuL3V0aWxzL3JlbG9hZEFwcC5qc1wiO1xuaW1wb3J0IGNyZWF0ZVNvY2tldFVSTCBmcm9tIFwiLi91dGlscy9jcmVhdGVTb2NrZXRVUkwuanNcIjtcbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gT3B0aW9uc1xuICogQHByb3BlcnR5IHtib29sZWFufSBob3RcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gbGl2ZVJlbG9hZFxuICogQHByb3BlcnR5IHtib29sZWFufSBwcm9ncmVzc1xuICogQHByb3BlcnR5IHtib29sZWFuIHwgeyB3YXJuaW5ncz86IGJvb2xlYW4sIGVycm9ycz86IGJvb2xlYW4sIHRydXN0ZWRUeXBlc1BvbGljeU5hbWU/OiBzdHJpbmcgfX0gb3ZlcmxheVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtsb2dnaW5nXVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtyZWNvbm5lY3RdXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTdGF0dXNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNVbmxvYWRpbmdcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjdXJyZW50SGFzaFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtwcmV2aW91c0hhc2hdXG4gKi9cblxuLyoqXG4gKiBAdHlwZSB7U3RhdHVzfVxuICovXG5cbnZhciBzdGF0dXMgPSB7XG4gIGlzVW5sb2FkaW5nOiBmYWxzZSxcbiAgLy8gVE9ETyBXb3JrYXJvdW5kIGZvciB3ZWJwYWNrIHY0LCBgX193ZWJwYWNrX2hhc2hfX2AgaXMgbm90IHJlcGxhY2VkIHdpdGhvdXQgSG90TW9kdWxlUmVwbGFjZW1lbnRcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICBjdXJyZW50SGFzaDogdHlwZW9mIF9fd2VicGFja19oYXNoX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfaGFzaF9fIDogXCJcIlxufTtcbi8qKiBAdHlwZSB7T3B0aW9uc30gKi9cblxudmFyIG9wdGlvbnMgPSB7XG4gIGhvdDogZmFsc2UsXG4gIGxpdmVSZWxvYWQ6IGZhbHNlLFxuICBwcm9ncmVzczogZmFsc2UsXG4gIG92ZXJsYXk6IGZhbHNlXG59O1xudmFyIHBhcnNlZFJlc291cmNlUXVlcnkgPSBwYXJzZVVSTChfX3Jlc291cmNlUXVlcnkpO1xuXG5pZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5ob3QgPT09IFwidHJ1ZVwiKSB7XG4gIG9wdGlvbnMuaG90ID0gdHJ1ZTtcbiAgbG9nLmluZm8oXCJIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGVuYWJsZWQuXCIpO1xufVxuXG5pZiAocGFyc2VkUmVzb3VyY2VRdWVyeVtcImxpdmUtcmVsb2FkXCJdID09PSBcInRydWVcIikge1xuICBvcHRpb25zLmxpdmVSZWxvYWQgPSB0cnVlO1xuICBsb2cuaW5mbyhcIkxpdmUgUmVsb2FkaW5nIGVuYWJsZWQuXCIpO1xufVxuXG5pZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5sb2dnaW5nKSB7XG4gIG9wdGlvbnMubG9nZ2luZyA9IHBhcnNlZFJlc291cmNlUXVlcnkubG9nZ2luZztcbn1cblxuaWYgKHR5cGVvZiBwYXJzZWRSZXNvdXJjZVF1ZXJ5LnJlY29ubmVjdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBvcHRpb25zLnJlY29ubmVjdCA9IE51bWJlcihwYXJzZWRSZXNvdXJjZVF1ZXJ5LnJlY29ubmVjdCk7XG59XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbFxuICovXG5cblxuZnVuY3Rpb24gc2V0QWxsTG9nTGV2ZWwobGV2ZWwpIHtcbiAgLy8gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgSE1SIGxvZ2dlciBvcGVyYXRlIHNlcGFyYXRlbHkgZnJvbSBkZXYgc2VydmVyIGxvZ2dlclxuICB3ZWJwYWNrSG90TG9nLnNldExvZ0xldmVsKGxldmVsID09PSBcInZlcmJvc2VcIiB8fCBsZXZlbCA9PT0gXCJsb2dcIiA/IFwiaW5mb1wiIDogbGV2ZWwpO1xuICBzZXRMb2dMZXZlbChsZXZlbCk7XG59XG5cbmlmIChvcHRpb25zLmxvZ2dpbmcpIHtcbiAgc2V0QWxsTG9nTGV2ZWwob3B0aW9ucy5sb2dnaW5nKTtcbn1cblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgc3RhdHVzLmlzVW5sb2FkaW5nID0gdHJ1ZTtcbn0pO1xudmFyIG9uU29ja2V0TWVzc2FnZSA9IHtcbiAgaG90OiBmdW5jdGlvbiBob3QoKSB7XG4gICAgaWYgKHBhcnNlZFJlc291cmNlUXVlcnkuaG90ID09PSBcImZhbHNlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcHRpb25zLmhvdCA9IHRydWU7XG4gICAgbG9nLmluZm8oXCJIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGVuYWJsZWQuXCIpO1xuICB9LFxuICBsaXZlUmVsb2FkOiBmdW5jdGlvbiBsaXZlUmVsb2FkKCkge1xuICAgIGlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5W1wibGl2ZS1yZWxvYWRcIl0gPT09IFwiZmFsc2VcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9wdGlvbnMubGl2ZVJlbG9hZCA9IHRydWU7XG4gICAgbG9nLmluZm8oXCJMaXZlIFJlbG9hZGluZyBlbmFibGVkLlwiKTtcbiAgfSxcbiAgaW52YWxpZDogZnVuY3Rpb24gaW52YWxpZCgpIHtcbiAgICBsb2cuaW5mbyhcIkFwcCB1cGRhdGVkLiBSZWNvbXBpbGluZy4uLlwiKTsgLy8gRml4ZXMgIzEwNDIuIG92ZXJsYXkgZG9lc24ndCBjbGVhciBpZiBlcnJvcnMgYXJlIGZpeGVkIGJ1dCB3YXJuaW5ncyByZW1haW4uXG5cbiAgICBpZiAob3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICBoaWRlKCk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoXCJJbnZhbGlkXCIpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFzaFxuICAgKi9cbiAgaGFzaDogZnVuY3Rpb24gaGFzaChfaGFzaCkge1xuICAgIHN0YXR1cy5wcmV2aW91c0hhc2ggPSBzdGF0dXMuY3VycmVudEhhc2g7XG4gICAgc3RhdHVzLmN1cnJlbnRIYXNoID0gX2hhc2g7XG4gIH0sXG4gIGxvZ2dpbmc6IHNldEFsbExvZ0xldmVsLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gICAqL1xuICBvdmVybGF5OiBmdW5jdGlvbiBvdmVybGF5KHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9wdGlvbnMub3ZlcmxheSA9IHZhbHVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICovXG4gIHJlY29ubmVjdDogZnVuY3Rpb24gcmVjb25uZWN0KHZhbHVlKSB7XG4gICAgaWYgKHBhcnNlZFJlc291cmNlUXVlcnkucmVjb25uZWN0ID09PSBcImZhbHNlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcHRpb25zLnJlY29ubmVjdCA9IHZhbHVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gICAqL1xuICBwcm9ncmVzczogZnVuY3Rpb24gcHJvZ3Jlc3ModmFsdWUpIHtcbiAgICBvcHRpb25zLnByb2dyZXNzID0gdmFsdWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7eyBwbHVnaW5OYW1lPzogc3RyaW5nLCBwZXJjZW50OiBudW1iZXIsIG1zZzogc3RyaW5nIH19IGRhdGFcbiAgICovXG4gIFwicHJvZ3Jlc3MtdXBkYXRlXCI6IGZ1bmN0aW9uIHByb2dyZXNzVXBkYXRlKGRhdGEpIHtcbiAgICBpZiAob3B0aW9ucy5wcm9ncmVzcykge1xuICAgICAgbG9nLmluZm8oXCJcIi5jb25jYXQoZGF0YS5wbHVnaW5OYW1lID8gXCJbXCIuY29uY2F0KGRhdGEucGx1Z2luTmFtZSwgXCJdIFwiKSA6IFwiXCIpLmNvbmNhdChkYXRhLnBlcmNlbnQsIFwiJSAtIFwiKS5jb25jYXQoZGF0YS5tc2csIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoXCJQcm9ncmVzc1wiLCBkYXRhKTtcbiAgfSxcbiAgXCJzdGlsbC1va1wiOiBmdW5jdGlvbiBzdGlsbE9rKCkge1xuICAgIGxvZy5pbmZvKFwiTm90aGluZyBjaGFuZ2VkLlwiKTtcblxuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIGhpZGUoKTtcbiAgICB9XG5cbiAgICBzZW5kTWVzc2FnZShcIlN0aWxsT2tcIik7XG4gIH0sXG4gIG9rOiBmdW5jdGlvbiBvaygpIHtcbiAgICBzZW5kTWVzc2FnZShcIk9rXCIpO1xuXG4gICAgaWYgKG9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgaGlkZSgpO1xuICAgIH1cblxuICAgIHJlbG9hZEFwcChvcHRpb25zLCBzdGF0dXMpO1xuICB9LFxuICAvLyBUT0RPOiByZW1vdmUgaW4gdjUgaW4gZmF2b3Igb2YgJ3N0YXRpYy1jaGFuZ2VkJ1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZVxuICAgKi9cbiAgXCJjb250ZW50LWNoYW5nZWRcIjogZnVuY3Rpb24gY29udGVudENoYW5nZWQoZmlsZSkge1xuICAgIGxvZy5pbmZvKFwiXCIuY29uY2F0KGZpbGUgPyBcIlxcXCJcIi5jb25jYXQoZmlsZSwgXCJcXFwiXCIpIDogXCJDb250ZW50XCIsIFwiIGZyb20gc3RhdGljIGRpcmVjdG9yeSB3YXMgY2hhbmdlZC4gUmVsb2FkaW5nLi4uXCIpKTtcbiAgICBzZWxmLmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZVxuICAgKi9cbiAgXCJzdGF0aWMtY2hhbmdlZFwiOiBmdW5jdGlvbiBzdGF0aWNDaGFuZ2VkKGZpbGUpIHtcbiAgICBsb2cuaW5mbyhcIlwiLmNvbmNhdChmaWxlID8gXCJcXFwiXCIuY29uY2F0KGZpbGUsIFwiXFxcIlwiKSA6IFwiQ29udGVudFwiLCBcIiBmcm9tIHN0YXRpYyBkaXJlY3Rvcnkgd2FzIGNoYW5nZWQuIFJlbG9hZGluZy4uLlwiKSk7XG4gICAgc2VsZi5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtFcnJvcltdfSB3YXJuaW5nc1xuICAgKiBAcGFyYW0ge2FueX0gcGFyYW1zXG4gICAqL1xuICB3YXJuaW5nczogZnVuY3Rpb24gd2FybmluZ3MoX3dhcm5pbmdzLCBwYXJhbXMpIHtcbiAgICBsb2cud2FybihcIldhcm5pbmdzIHdoaWxlIGNvbXBpbGluZy5cIik7XG5cbiAgICB2YXIgcHJpbnRhYmxlV2FybmluZ3MgPSBfd2FybmluZ3MubWFwKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgdmFyIF9mb3JtYXRQcm9ibGVtID0gZm9ybWF0UHJvYmxlbShcIndhcm5pbmdcIiwgZXJyb3IpLFxuICAgICAgICAgIGhlYWRlciA9IF9mb3JtYXRQcm9ibGVtLmhlYWRlcixcbiAgICAgICAgICBib2R5ID0gX2Zvcm1hdFByb2JsZW0uYm9keTtcblxuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGhlYWRlciwgXCJcXG5cIikuY29uY2F0KHN0cmlwQW5zaShib2R5KSk7XG4gICAgfSk7XG5cbiAgICBzZW5kTWVzc2FnZShcIldhcm5pbmdzXCIsIHByaW50YWJsZVdhcm5pbmdzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpbnRhYmxlV2FybmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxvZy53YXJuKHByaW50YWJsZVdhcm5pbmdzW2ldKTtcbiAgICB9XG5cbiAgICB2YXIgbmVlZFNob3dPdmVybGF5Rm9yV2FybmluZ3MgPSB0eXBlb2Ygb3B0aW9ucy5vdmVybGF5ID09PSBcImJvb2xlYW5cIiA/IG9wdGlvbnMub3ZlcmxheSA6IG9wdGlvbnMub3ZlcmxheSAmJiBvcHRpb25zLm92ZXJsYXkud2FybmluZ3M7XG5cbiAgICBpZiAobmVlZFNob3dPdmVybGF5Rm9yV2FybmluZ3MpIHtcbiAgICAgIHZhciB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lID0gdHlwZW9mIG9wdGlvbnMub3ZlcmxheSA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLm92ZXJsYXkudHJ1c3RlZFR5cGVzUG9saWN5TmFtZTtcbiAgICAgIHNob3coXCJ3YXJuaW5nXCIsIF93YXJuaW5ncywgdHJ1c3RlZFR5cGVzUG9saWN5TmFtZSB8fCBudWxsKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5wcmV2ZW50UmVsb2FkaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmVsb2FkQXBwKG9wdGlvbnMsIHN0YXR1cyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RXJyb3JbXX0gZXJyb3JzXG4gICAqL1xuICBlcnJvcnM6IGZ1bmN0aW9uIGVycm9ycyhfZXJyb3JzKSB7XG4gICAgbG9nLmVycm9yKFwiRXJyb3JzIHdoaWxlIGNvbXBpbGluZy4gUmVsb2FkIHByZXZlbnRlZC5cIik7XG5cbiAgICB2YXIgcHJpbnRhYmxlRXJyb3JzID0gX2Vycm9ycy5tYXAoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICB2YXIgX2Zvcm1hdFByb2JsZW0yID0gZm9ybWF0UHJvYmxlbShcImVycm9yXCIsIGVycm9yKSxcbiAgICAgICAgICBoZWFkZXIgPSBfZm9ybWF0UHJvYmxlbTIuaGVhZGVyLFxuICAgICAgICAgIGJvZHkgPSBfZm9ybWF0UHJvYmxlbTIuYm9keTtcblxuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGhlYWRlciwgXCJcXG5cIikuY29uY2F0KHN0cmlwQW5zaShib2R5KSk7XG4gICAgfSk7XG5cbiAgICBzZW5kTWVzc2FnZShcIkVycm9yc1wiLCBwcmludGFibGVFcnJvcnMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmludGFibGVFcnJvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxvZy5lcnJvcihwcmludGFibGVFcnJvcnNbaV0pO1xuICAgIH1cblxuICAgIHZhciBuZWVkU2hvd092ZXJsYXlGb3JFcnJvcnMgPSB0eXBlb2Ygb3B0aW9ucy5vdmVybGF5ID09PSBcImJvb2xlYW5cIiA/IG9wdGlvbnMub3ZlcmxheSA6IG9wdGlvbnMub3ZlcmxheSAmJiBvcHRpb25zLm92ZXJsYXkuZXJyb3JzO1xuXG4gICAgaWYgKG5lZWRTaG93T3ZlcmxheUZvckVycm9ycykge1xuICAgICAgdmFyIHRydXN0ZWRUeXBlc1BvbGljeU5hbWUgPSB0eXBlb2Ygb3B0aW9ucy5vdmVybGF5ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMub3ZlcmxheS50cnVzdGVkVHlwZXNQb2xpY3lOYW1lO1xuICAgICAgc2hvdyhcImVycm9yXCIsIF9lcnJvcnMsIHRydXN0ZWRUeXBlc1BvbGljeU5hbWUgfHwgbnVsbCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvclxuICAgKi9cbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKF9lcnJvcikge1xuICAgIGxvZy5lcnJvcihfZXJyb3IpO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgbG9nLmluZm8oXCJEaXNjb25uZWN0ZWQhXCIpO1xuXG4gICAgaWYgKG9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgaGlkZSgpO1xuICAgIH1cblxuICAgIHNlbmRNZXNzYWdlKFwiQ2xvc2VcIik7XG4gIH1cbn07XG52YXIgc29ja2V0VVJMID0gY3JlYXRlU29ja2V0VVJMKHBhcnNlZFJlc291cmNlUXVlcnkpO1xuc29ja2V0KHNvY2tldFVSTCwgb25Tb2NrZXRNZXNzYWdlLCBvcHRpb25zLnJlY29ubmVjdCk7IiwiaW1wb3J0ICcuLi9saWJyYXJpZXMvZ3NhcC5taW4nXG5pbXBvcnQgJy4uL2xpYnJhcmllcy9sb2Rhc2gubWluJ1xuaW1wb3J0ICcuLi9saWJyYXJpZXMvc2Nyb2xsLXRyaWdnZXIubWluJ1xuaW1wb3J0ICcuLi9saWJyYXJpZXMvd293Lm1pbidcbmltcG9ydCAnLi4vbGlicmFyaWVzL2lucHV0LW1hc2subWluLmpzJ1xuaW1wb3J0ICcuLi9saWJyYXJpZXMvZmlsZS1zYXZlci5taW4nXG5pbXBvcnQgJy4uL2xpYnJhcmllcy9zd2lwZXItYnVuZGxlJ1xuaW1wb3J0ICcuL3V0aWwnXG5pbXBvcnQgJy4vdmlkZW8nXG5pbXBvcnQgJy4vdXRtJ1xuaW1wb3J0ICcuL2Zvcm0nXG5pbXBvcnQgJy4vYnV0dG9uJ1xuaW1wb3J0ICcuL2FuaW1hdGlvbidcbmltcG9ydCAnLi9zdGVwLWFuaW1hdGlvbidcbmltcG9ydCAnLi9tYXAnXG5pbXBvcnQgJy4vdGltZXInXG5pbXBvcnQgJy4vc2xpZGVyJ1xuaW1wb3J0ICcuL3pvb20nXG5pbXBvcnQgJy4vY29sbGVjdGlvbnMnXG4iXSwibmFtZXMiOlsicnVuIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImUiLCJzdHlsZSIsInZpc2liaWxpdHkiLCJXT1ciLCJpbml0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImJhc2U2NFRvU3RyaW5nIiwid2luZG93IiwidXNlclNjcmlwdHMiLCJVdGlsIiwiY2xlYXJUYWdzIiwiRklMRV9QRVJNSVNTSU9OIiwicmVtb3ZlSGFzaCIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJ0aXRsZSIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJzZWFyY2giLCJCdXR0b24iLCJjb25zdHJ1Y3RvciIsImVsIiwiYnV0dG9uQ2xpY2tIYW5kbGVyIiwiaGFuZGxlQ2xpY2siLCJiaW5kIiwib3BlbmVkUG9wdXAiLCJ5YW5kZXhHb2FsSWQiLCJkYXRhc2V0IiwiZ29vZ2xlRXZlbnQiLCJKU09OIiwicGFyc2UiLCJkYXRhT25jbGlja0hyZWYiLCJocmVmIiwiZGF0YU9uY2xpY2tUYXJnZXQiLCJ0YXJnZXQiLCJpc05hdGl2ZUxpbmsiLCJ0YWdOYW1lIiwidG9Mb3dlckNhc2UiLCJpc0NhcnRBY3Rpb24iLCJhY3Rpb25DYXJ0IiwiaXNDYXJ0TGluayIsInR5cGUiLCJtaWRkbGV3YXJlIiwiaXNFeHRlcm5hbE9ySW50ZXJuYWwiLCJzdGFydHNXaXRoIiwiaXNGaWxlIiwib25jbGljayIsImNvbmNhdCIsInNldEF0dHJpYnV0ZSIsIllhIiwieW0iLCJfbWV0cmlrYSIsImdldENvdW50ZXJzIiwiaWQiLCJndGFnIiwiZXZlbnRBY3Rpb24iLCJldmVudENhdGVnb3J5IiwiZXZlbnRMYWJlbCIsIm1lbnUiLCJjbG9zZXN0IiwiaGlkZU1lbnUiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInByb2R1Y3ROYW1lIiwicHJvZHVjdERlc2NyaXB0aW9uIiwicHJvZHVjdFByaWNlIiwicHJvZHVjdEltYWdlIiwic2VjdGlvbiIsImNvbGxlY3Rpb25JdGVtIiwiZGV0YWlsIiwicm9vdElkIiwiYmxvY2tfaWQiLCJjb2xsZWN0aW9uX2lkIiwiY0lkIiwiY29sbGVjdGlvbl9pdGVtX2lkIiwiY0l0ZW1JZCIsImV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiY2FydCIsInF1ZXJ5U2VsZWN0b3IiLCJzaG93UG9wdXAiLCJoYXNoIiwiZ2V0QXR0cmlidXRlIiwidGFyZ2V0QXR0ciIsInNwbGl0IiwidXJsIiwidHJpbSIsInNhdmVBcyIsInBvcCIsIm9wZW4iLCJjb25zb2xlIiwibG9nIiwiaXNCdWlsZGVyIiwicG9wdXAiLCJzY3JvbGxUbyIsImluY2x1ZGVzIiwicm9vdEVsZW1lbnQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJib2R5IiwiaXRlbXMiLCJjIiwiYnV0dG9uIiwid2luZG93SGFzaCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiZ2V0RmlsdGVyc1dpdGhSZXBsYWNlZFRlbXBsYXRlVmFyaWFibGVzIiwic2Nyb2xsVG9FbGVtZW50IiwiZWxlbWVudCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aW5kb3dIZWlnaHQiLCJpbm5lckhlaWdodCIsInZpc2libGVQYXJ0VG9wWSIsIk1hdGgiLCJtaW4iLCJtYXgiLCJ0b3AiLCJ2aXNpYmxlUGFydEJvdHRvbVkiLCJib3R0b20iLCJ2aXNpYmxlSGVpZ2h0IiwiaGVpZ2h0Iiwic2Nyb2xsSW50b1ZpZXciLCJiZWhhdmlvciIsImJsb2NrIiwiZ2V0RmlsdGVyQ29uZGl0aW9ucyIsInN5c3RlbSIsImZpZWxkVHlwZSIsImNvbmRpdGlvbiIsImNvbmRpdGlvblZhbHVlIiwiZHluYW1pY1R5cGVEYXRhIiwicmVzdWx0IiwiX19zeXN0ZW0iLCJ2YWx1ZV90eXBlIiwiRUNvbmRpdGlvblZhbHVlVHlwZSIsIlNUUklORyIsIkVGaWx0ZXJNZXRob2RzQ29uZGl0aW9ucyIsIkVYSVNUUyIsIiRleGlzdHMiLCJCT09MRUFOIiwiTk9UX0VYSVNUUyIsInJhd1ZhbHVlIiwiRVRleHREeW5hbWljVHlwZSIsIkNVUlJFTlRfUEFHRV9JVEVNX0ZJRUxEIiwiZmllbGRJZCIsIkVRVUFMIiwiJGVxIiwiTk9UX0VRVUFMIiwiJG5lIiwiSU5DTFVERVMiLCIkcmVnZXgiLCJOT1RfSU5DTFVERVMiLCIkbmVyZWdleCIsIlNUQVJUU19XSVRIIiwiRU5EU19XSVRIIiwiTk9UX1NUQVJUU19XSVRIIiwiTk9UX0VORFNfV0lUSCIsIkVycm9yIiwiSU5UIiwiRUludER5bmFtaWNUeXBlIiwiR1JFQVRFUl9USEFOIiwiJGd0IiwiR1JFQVRFUl9USEFOX0VRVUFMIiwiJGd0ZSIsIkxFU1NfVEhBTiIsIiRsdCIsIkxFU1NfVEhBTl9FUVVBTCIsIiRsdGUiLCJyZXJ1blVzZXJTY3JpcHRzIiwiT2JqZWN0IiwidmFsdWVzIiwic2NyaXB0IiwiX3NjcmlwdCRydW4iLCJjYWxsIiwiQmluZCIsInJlcGVhdGVycyIsIl90aGlzIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJwcm9taXNlcyIsImVudHJpZXMiLCJtYXAiLCJfcmVmMiIsIl9yZWYiLCJyZXF1ZXN0SWQiLCJvcHRpb25zIiwicmVwZWF0ZXIiLCJSZXBlYXRlciIsInB1c2giLCJfeCIsImFwcGx5IiwiUHJvbWlzZSIsImFsbCIsInVwZGF0ZSIsIl90aGlzMiIsImRpc3BsYXkiLCJ1cmxQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJxdWVyeSIsImdldCIsImZpbHRlcnMiLCJfcmVmMyIsImtleSIsInZhbHVlIiwidXBkYXRlUGFnaW5hdGlvbiIsInVwZGF0ZUZpbHRlcnMiLCJfcmVmNCIsImZpbmQiLCJyZW5kZXIiLCJyZXBlYXRlcklkIiwicGFnZSIsImRhdGEiLCJwYWdpbmF0aW9uIiwib2Zmc2V0IiwibGltaXQiLCJzZWxlY3RvciIsIl9yZWY1IiwiJGFuZCIsIl9yZWY2IiwiJG9yIiwiZiIsInVwZGF0ZUZpbHRlciIsImZpbHRlciIsIl9yZWY3IiwiXyIsImZpbHRlck1ldGhvZHNTdHJ1Y3R1cmUiLCJlbGVtZW50U2VsZWN0b3IiLCJnZXRDb250ZW50IiwiX3RoaXMzIiwicmVmaW5lZEJpbmQiLCJzdHJpbmdpZnkiLCJfcmVmOCIsInJlcXVlc3QiLCJQYWdlQ3R4IiwiYWN0aW9uIiwiaWRlbnRpdHkiLCJjdHgiLCJyZXNwb25zZSIsImZldGNoIiwiaGVhZGVycyIsImNyZWRlbnRpYWxzIiwibWV0aG9kIiwianNvbiIsIl90aGlzNCIsInRlbXAiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwibmV3QmxvY2siLCJmaXJzdENoaWxkIiwia2V5cyIsIl9uZXdSZXBlYXRlcnMkIiwiX29sZFJlcGVhdGVycyQiLCJuZXdSZXBlYXRlcnMiLCJBcnJheSIsImZyb20iLCJvbGRSZXBlYXRlcnMiLCJuZXdQYXJlbnQiLCJwYXJlbnROb2RlIiwib2xkUGFyZW50IiwicmVwbGFjZUNoaWxkIiwiZmlyc3RSZXBlYXRlckVsZW1lbnQiLCJyZW1vdmUiLCJyb290IiwiYmxvY2tzIiwiZGVib3VuY2UiLCJzdHJpbmdUb0Jhc2U2NCIsIlJlcGVhdGVyRmlsdGVyIiwicGFyYW1zIiwiVVJMIiwiYmFzZTY0IiwiX29iamVjdFNwcmVhZCIsInNlYXJjaFBhcmFtcyIsInNldCIsInB1c2hTdGF0ZSIsIlBvcFN0YXRlRXZlbnQiLCJSZXBlYXRlclBhZ2luYXRpb24iLCJwZXJQYWdlIiwidG90YWwiLCJjdXJyZW50UGFnZSIsIk51bWJlciIsIm1heFBhZ2UiLCJjZWlsIiwic2V0UGFnZSIsInNldFRvdGFsIiwiUmVwZWF0ZXJQcmV2TmV4dFBhZ2luYXRpb24iLCJ0cmlnZ2VyIiwiZWZmZWN0IiwicHJldlBhZ2UiLCJuZXh0UGFnZSIsIlJlcGVhdGVyU2VhcmNoSW5wdXQiLCJyZXBsYWNlQWxsIiwiZGVib3VuY2VTZWFyY2giLCJTdHJpbmciLCJyZWZpbmVkVmFsdWUiLCJwYXJzZUludCIsImlzRmluaXRlIiwicGFnaW5hdGlvbktleSIsInBhZ2luYXRpb25zIiwiaW5wdXRzIiwiZ2V0VG90YWwiLCJpbml0UGFnaW5hdGlvbiIsImluaXRTZWFyY2hlcyIsIl90aGlzJG9wdGlvbnMkcGFnaW5hdCIsInBhZ2luYXRpb25EYXRhIiwicGFnaW5hdGlvbk1ldGhvZHNTdHJ1Y3R1cmVzIiwiZmlsdGVyTWV0aG9kc1N0cnVjdHVyZXMiLCJhbmQiLCJvciIsIl9lJF9fc3lzdGVtIiwiZmxhdCIsIkluZmluaXR5Iiwic2VhcmNoYWJsZUZpbHRlck1ldGhvZHNTdHJ1Y3R1cmVzIiwicmVmaW5lZE9wdGlvbnMiLCJmb3JtYXQiLCJFTkRQT0lOVCIsIm9yaWdpbiIsIkZPUk1fRU5EUE9JTlQiLCJDQVJUX0VORFBPSU5UIiwiUkVRVUlSRURfRklFTERfRVJST1JfVEVYVCIsIktFWV9ZQU5ERVhfQ0FQVENIQSIsIk9OTE9BRF9ZQU5ERVhfQ0FQVENIQSIsIlNSQ19ZQU5ERVhfQ0FQVENIQSIsIkNPTlRBSU5FUl9JRF9ZQU5ERVhfQ0FQVENIQSIsImZvcm1zIiwibWV0YVRhZ3NDYXB0Y2hhIiwiaGVhZCIsInNtYXJ0Q2FwdGNoYSIsImZvcm0iLCJpbml0U21hcnRDYXB0Y2hhIiwic2VyaWFsaXplRm9ybSIsImZvcm1Ob2RlIiwiZWxlbWVudHMiLCJyZXN1bHRXaXRoVGVtcElkcyIsInJlZHVjZSIsImFjYyIsIm5hbWUiLCJjaGVja2VkIiwiZmllbGRzZXQiLCJsZWdlbmQiLCJsZWdlbmRUZXh0Q29udGVudCIsInRleHRDb250ZW50IiwibWF0Y2giLCJ0ZW1wSWQiLCJyZXN0IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiX2V4Y2x1ZGVkIiwiZ2V0UHVyZUlkIiwibG9hZFNtYXJ0Q2FwdGNoYSIsInNyYyIsImRlZmVyIiwiYXBwZW5kQ2hpbGQiLCJpc0NhcHRjaGFFbmFibGVkIiwic29tZSIsInRhZyIsImNvbnRlbnQiLCJGb3JtIiwiYWN0aW9uVHlwZSIsImZvcm1BY3Rpb25UeXBlIiwicmVkaXJlY3RVcmwiLCJmb3JtUmVkaXJlY3RVcmwiLCJtZXNzYWdlIiwiZm9ybU1lc3NhZ2UiLCJyZXF1aXJlZEZpZWxkcyIsIndpZGdldFNtYXJ0Q2FwdGNoYUlkIiwic21hcnRDYXB0Y2hhQ29udGFpbmVySWQiLCJ3cmFwcGVyQ2FwdGNoYUNvbnRhaW5lciIsInJlZGlyZWN0QWZ0ZXJTZW5kIiwibWVzc2FnZUFmdGVyU2VuZCIsInJlc2V0IiwiY2hlY2tib3hlcyIsInN1Y2Nlc3NIYW5kbGUiLCJoaWRlUG9wdXAiLCJwYXltZW50IiwiYXNzaWduIiwicGFnZVVybCIsInRhcmdldElkIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiaGFuZGxlUGF5bWVudCIsImZvcm1IdG1sIiwicGF5bWVudElucHV0IiwiZm9ybURpdiIsInN1Ym1pdCIsImNyZWF0ZVNtYXJ0Q2FwdGNoYUNvbnRhaW5lciIsImNhcHRjaGFDb250YWluZXIiLCJoaWRlQ2FwdGNoYVdyYXBwZXIiLCJjbGFzc0xpc3QiLCJjbGVhckV2ZW50Q2FwdGNoYVdyYXBwZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZmFkZUhhbmRsZXJDYXB0Y2hhV3JhcHBlciIsInNob3dDYXB0Y2hhV3JhcHBlciIsImFkZCIsImNhcHRjaGFPcHRpb25zIiwic2l0ZWtleSIsImNhbGxiYWNrIiwib25TdWJtaXQiLCJfYXJndW1lbnRzIiwidG9rZW4iLCJwYXlsb2FkIiwiVVRNSGVscGVyIiwidXRtcyIsImdldEl0ZW1zIiwidXRtIiwiY2FydHMiLCJwcm9kdWN0cyIsInNvdXJjZSIsImNvdW50IiwicHJvZHVjdFF1YW50aXR5IiwicmVzcG9uc2VKc29uIiwib2siLCJjbGVhciIsInJlZGlyZWN0X3VyaSIsImxpbmsiLCJjbGljayIsImh0bWwiLCJlcnJvciIsImluaXRNYXNrIiwibWFza2VkIiwiaSIsInBhdHRlcm4iLCJtYXNrIiwicHJlZml4Iiwic3Vic3RyaW5nIiwiZGVmYXVsdE1hc2siLCJJbnB1dG1hc2siLCJpbml0U2VsZWN0IiwibyIsImxhYmVsIiwiaW5pdFdyYXBwZXJDYXB0Y2hhQ29udGFpbmVyIiwiYWRkUmVxdWlyZWRGaWVsZHNldExpc3RlbmVycyIsInVwZGF0ZVJlcXVpcmVkSW5wdXRzIiwiZXJyb3JUZXh0IiwiY3JlYXRlRXJyb3JUZXh0IiwiY29udGFpbnMiLCJyZXF1aXJlZEZpZWxkSXNOb3RFbXB0eSIsImlucHV0Iiwib3B0aW9uIiwic2VsZWN0ZWRJbmRleCIsInRleHQiLCJpbml0SGlkZGVuU3VibWl0QnRuIiwiY2xvbmVCdG4iLCJjcmVhdGVDbG9uZUJ0biIsImRpc2FibGVkIiwiaW50ZXJjZXB0U3VibWl0Rm9ybSIsImJ0biIsImNsb25lTm9kZSIsInBvc2l0aW9uIiwicmVtb3ZlQXR0cmlidXRlIiwibGVmdCIsIndpZHRoIiwib2Zmc2V0V2lkdGgiLCJvcGFjaXR5Iiwia2V5Q29kZUVudGVyIiwia2V5Q29kZSIsImZvcm1WYWxpZGF0aW9uIiwiaXNWYWxpZCIsImNoZWNrVmFsaWRpdHkiLCJldmVyeSIsInJlcG9ydFZhbGlkaXR5IiwiX3dpbmRvdyRzbWFydENhcHRjaGEiLCJnZXRSZXNwb25zZSIsIlNFTEVDVE9SIiwiQ0hFQ0tCT1hFU19TRUxFQ1RPUiIsIlJBRElPX1NFTEVDVE9SIiwicmFkaW8iLCJJVEVNX1BJQ0tFUlNfU0VMRUNUT1IiLCJpdGVtUGlja2VycyIsIk1hcCIsInBpbiIsImJhbGxvbiIsIm1hcmtlckljb24iLCJpY29uTGF5b3V0IiwiaWNvbkltYWdlSHJlZiIsImljb25JbWFnZVNpemUiLCJpY29uSW1hZ2VPZmZzZXQiLCJpY29uQ29udGVudCIsImljb25Db250ZW50T2Zmc2V0IiwiY29udGVudExheW91dCIsIm91dGVySFRNTCIsImdldEN1c3RvbUJhbGxvb24iLCJzdWJ0aXRsZSIsIk15QmFsbG9vbkxheW91dCIsInltYXBzIiwidGVtcGxhdGVMYXlvdXRGYWN0b3J5IiwiY3JlYXRlQ2xhc3MiLCJidWlsZCIsInN1cGVyY2xhc3MiLCJwYXJlbnQiLCJnZXRQYXJlbnRFbGVtZW50IiwiYmFsbG9vbiIsImVtYWlsIiwidGVsIiwidGV4dEVsIiwiYXBwZW5kIiwiXyRlbGVtZW50IiwiYXBwbHlFbGVtZW50T2Zmc2V0IiwiY2xvc2UiLCJvbkNsb3NlQ2xpY2siLCJnZXREYXRhIiwiZ2VvT2JqZWN0Iiwib25TdWJsYXlvdXRTaXplQ2hhbmdlIiwiZXZlbnRzIiwiZmlyZSIsImFycm93Iiwib2Zmc2V0SGVpZ2h0IiwiZ2V0U2hhcGUiLCJzaGFwZSIsIlJlY3RhbmdsZSIsImdlb21ldHJ5IiwicGl4ZWwiLCJyZXNvbHZlIiwicmVhZHkiLCJpc01vYmlsZSIsImJlaGF2aW9ycyIsInByZXZpZXdDaGFuZ2VTdWJzY3JpYmUiLCJjb250YWluZXIiLCJmaXRUb1ZpZXdwb3J0IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInByb3BlcnRpZXMiLCJiYWxsb29uUGFuZWxNYXhNYXBBcmVhIiwicG9pbnRzIiwicCIsImljb25PcHRpb25zIiwiaWNvbkNvbnRlbnRMYXlvdXQiLCJiYWxsb29uTGF5b3V0Iiwid2l0aEJhbGxvb24iLCJtYXJrIiwiUGxhY2VtYXJrIiwiY29vcmRpbmF0ZXMiLCJnZW9PYmplY3RzIiwiQVBJX0tFWV9WMSIsIkFQSV9LRVlfVjIiLCJBUElfS0VZIiwiTUFYX1NUQVRJQ19NQVBfV0lEVEgiLCJERUZBVUxUX01BUF9IRUlHSFQiLCJtYXBzIiwic3RhcnRMYXp5TWFwIiwibWFwTG9hZGVyUHJvbWlzZXMiLCJ5bWFwTG9hZGVyIiwiYXBpS2V5IiwicmVzIiwicmVqIiwiTUFQX0JVTkRMRV9VUkwiLCJ5YW5kZXhNYXBTY3JpcHQiLCJvbmxvYWQiLCJvbmVycm9yIiwicyIsIm1hcE9wdGlvbnMiLCJjb21wdXRlZCIsInBvaW50c1F1ZXJ5Iiwiam9pbiIsImNvbXBXaWR0aCIsImNvbXBIZWlnaHQiLCJzdGF0aWNGYWtlTWFwIiwiY2VudGVyIiwiem9vbSIsInJvb3RNYXJnaW4iLCJ0aHJlc2hvbGQiLCJpbnRlcnNlY3Rpb25IYW5kbGVyIiwiaXNJbnRlcnNlY3RpbmciLCJvYnNlcnZlciIsInVub2JzZXJ2ZSIsIl94MiIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsIlNsaWRlciIsInN3aXBlciIsInJlc2l6ZUhhbmRsZSIsInBhc3NlZFBhcmFtcyIsImJyZWFrcG9pbnRzIiwic29ydCIsImEiLCJiIiwiYWJzIiwic2xpZGVzUGVyVmlldyIsInNwYWNlQmV0d2VlbiIsImF1dG9wbGF5SW5pdCIsImNoYW5nZSIsImF1dG9wbGF5Iiwic3RhcnQiLCJzdG9wIiwicmVtb3ZlUGxheUNsYXNzRnJvbUFsbFNsaWRlcyIsIl90aGlzJHN3aXBlciIsInNsaWRlcyIsInNsaWRlIiwiU3dpcGVyIiwiZHluYW1pY0J1bGxldHMiLCJkeW5hbWljTWFpbkJ1bGxldHMiLCJjbGlja2FibGUiLCJuYXZpZ2F0aW9uIiwibmV4dEVsIiwicHJldkVsIiwib24iLCJiZWZvcmVTbGlkZUNoYW5nZVN0YXJ0Iiwib2JzZXJ2ZVBhcmVudHMiLCJjb250ZW50UmVjdCIsInJ1bm5pbmciLCJvYnNlcnZlQ2xhc3NDaGFuZ2VzIiwic2xpZGVycyIsInNsaWRlciIsIkVWRU5UUyIsInNjcm9sbCIsIm1vdXNlZW50ZXIiLCJlbGVtZW50T25TY3JlZW4iLCJibG9ja09uU2NyZWVuIiwiU3RlcEFuaW1hdGlvbiIsInN0ZXBzIiwic3RlcEFuaW1hdGlvblN0ZXBzIiwicmVwZWF0Iiwic3RlcEFuaW1hdGlvblJlcGVhdCIsInN0ZXBBbmltYXRpb25UeXBlIiwic3RlcEFuaW1hdGlvbk9mZnNldCIsInN0ZXBBbmltYXRpb25UcmlnZ2VyIiwiYmxvY2tQYXJlbnQiLCJ0aW1lbGluZSIsImlzVG91Y2hFdmVudCIsImlzU2hvd0V2ZW50Iiwib2Zmc2V0T3BlcmF0b3IiLCJjcmVhdGVUaW1lbGluZSIsInNlbGYiLCJvbkNvbXBsZXRlIiwicmV2ZXJzZSIsInBhdXNlIiwiZ3NhcCIsInBhdXNlZCIsInlveW8iLCJzY3JvbGxUcmlnZ2VyIiwiYXBwZW5kU3RlcHNUb1RpbWVsaW5lIiwiZXhjZXB0aW9ucyIsInN0ZXAiLCJkaXN0YW5jZSIsImZpeCIsInkiLCJwcmV2U3RlcHMiLCJpbmRleCIsInBhc3NlZERpc3RhbmNlIiwiY3VyciIsImltbWVkaWF0ZVJlbmRlciIsImVuZCIsInNjcnViIiwidG8iLCJ0b3VjaEV2ZW50SGFuZGxlciIsInJlc3RhcnQiLCJwbGF5Iiwic3RvcFRvdWNoRXZlbnRIYW5kbGVyIiwicmVnaXN0ZXJQbHVnaW4iLCJTY3JvbGxUcmlnZ2VyIiwiZGVmYXVsdHMiLCJzY3JvbGxlciIsImdldFNjcm9sbENvbnRhaW5lciIsImlzQWN0aXZlIiwiaGFzRWxlbWVudEhyZWYiLCJ0aW1lcklkIiwic2V0SW50ZXJ2YWwiLCJnZXRJdGVtIiwiY2xlYXJJbnRlcnZhbCIsIlRpbWVyIiwiaW50ZXJ2YWwiLCJldmVudERhdGUiLCJEYXRlIiwiZGF5RWwiLCJob3Vyc0VsIiwibWludXRlc0VsIiwic2Vjb25kc0VsIiwidGljayIsIm5vdyIsImRpZmZJblRpbWUiLCJnZXRUaW1lIiwidGltZXN0YW1wIiwidHJ1bmMiLCJhbGxIb3VycyIsImZsb29yIiwiZXhwaXJlZCIsInRpbWVycyIsInQiLCJ0aW1lciIsIlNUSUNLWV9TRUxFQ1RPUiIsIkJVSUxERVJfUFJFVklFV19TRUxFQ1RPUiIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbEFmdGVyTG9hZCIsImNiIiwic2Nyb2xsVGFyZ2V0IiwiY3VycmVudFNjcm9sbFRvcCIsInNjcm9sbFRvcCIsInRvcE9mZnNldCIsInN0aWNreUhlYWRlciIsImNvbXB1dGVkSGVpZ2h0IiwiY2hlY2tBbmRTY3JvbGwiLCJyZWFkeVN0YXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib25jZSIsImNvbnRhaW4iLCJvdmVyZmxvdyIsImNsZWFyRXZlbnRzIiwiY2xvc2VIYW5kbGVyIiwiZmFkZUhhbmRsZXIiLCJjbGFzc09ic2VydmVyIiwiUmVzaXplT2JzZXJ2ZXIiLCJjaGFuZ2VzIiwiTXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9uc0xpc3QiLCJjb25maWciLCJhdHRyaWJ1dGVzIiwiYXR0cmlidXRlRmlsdGVyIiwic3VidHJlZSIsInRvdWNoQWN0aW9uIiwic2hvd01lbnUiLCJ0b01hdGNoIiwidG9NYXRjaEl0ZW0iLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpc0Jhc2U2NCIsInZhbCIsInRlc3QiLCJUZXh0RGVjb2RlciIsImRlY29kZSIsIlVpbnQ4QXJyYXkiLCJhdG9iIiwibSIsImNvZGVQb2ludEF0Iiwic3RyIiwiYnRvYSIsImZyb21Db2RlUG9pbnQiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsImZ1bmMiLCJ3YWl0IiwiaW1tZWRpYXRlIiwidGltZW91dCIsIl9sZW4iLCJhcmdzIiwiX2tleSIsImxhdGVyIiwiY2FsbE5vdyIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJ0ZW1wbGF0ZUNvbnRleHQiLCJuZXdGaWx0ZXJzIiwiaXNWYXJpYWJsZSIsInJlcGxhY2VWYXJpYWJsZXMiLCJnZXRWYWx1ZSIsInJlZ2V4IiwicmVwbGFjZSIsInZhcmlhYmxlTmFtZSIsImdldFZhbHVlRnJvbVBhdGgiLCJjb250ZXh0IiwicGF0aCIsImFuZE9iaiIsIm9yQ29uZGl0aW9ucyIsIl9maWVsZElkIiwiY29uZGl0aW9ucyIsImNvbmRpdGlvbktleSIsInZhcmlhYmxlIiwibmV3Q29uZGl0aW9uVmFsdWUiLCJ2YWx1ZVR5cGUiLCJ2IiwiUmVnRXhwIiwiQ09OVEFJTlMiLCJOT1RfQ09OVEFJTlMiLCJGUk9NX0VMRU1FTlRfSU5fUEFHRSIsIkxTS2V5IiwiaGFzTWV0YVRhZyIsImdldFF1ZXJ5UGFyYW1zIiwiZnJvbUVudHJpZXMiLCJwYXJhbSIsInNhdmUiLCJWSURFT19TRVJWSUNFUyIsInNlcnZpY2UiLCJiYXNlIiwidXJsUmVnIiwiaWRSZWciLCJsaW5rQ29uc3RhbnQiLCJsaW5rRHluYW1pY1BhcmFtcyIsIm11dGUiLCJsb29wIiwiY29udHJvbHMiLCJwb3N0TWVzc2FnZXMiLCJnZXRCaW5hcnlGcm9tVXJsQnlLZXkiLCJpbmRleE9mIiwicGFyc2VVcmwiLCJ2aWRlb1NlcnZpY2UiLCJnZXRTZXJ2aWNlSWQiLCJWaWRlbyIsImlmcmFtZSIsImlmcmFtZVNyYyIsImJhY2tncm91bmRWaWRlbyIsInNlcnZpY2VPcHRpb25zIiwiaXNSdXR1YmVWaWRlbyIsImlzWW91dHViZVZpZGVvIiwiaXNWa1ZpZGVvIiwiYXV0b3BsYXlLZXkiLCJhdXRvcGxheVZhbHVlIiwicHJldmlld0RPTUVsZW1lbnQiLCJwbGF5SW50ZXJ2YWxJZCIsIndhc1JldHJ5UGxheUxhdW5jaGVkIiwicGxheWluZyIsImN1cnJlbnRQbGF5ZXJJbnN0YW5jZSIsImNvbW1hbmQiLCJfdGhpcyRpZnJhbWUiLCJjb250ZW50V2luZG93IiwiX3RoaXMkaWZyYW1lJGNvbnRlbnRXIiwicG9zdE1lc3NhZ2UiLCJfdGhpcyRpZnJhbWUyIiwiYWRkVmtWaWRlbyIsImFzeW5jIiwib25TY3JpcHRMb2FkZWQiLCJWSyIsIlZpZGVvUGxheWVyIiwicGFyc2VkVXJsIiwibXV0ZWRWYWx1ZSIsInZpc2libGVPYnNlcnZlciIsImNvbnRyb2xsZXIiLCJBYm9ydENvbnRyb2xsZXIiLCJhYm9ydCIsIl91bnVzZWQiLCJzaWduYWwiLCJJRlJBTUVfQVVUT19BQ1RJVkFUSU9OX0RFTEFZIiwidmlkZW9zIiwidmlkZW8iLCJJQ09OX05FWFQiLCJJQ09OX1BSRVYiLCJNQU5ZX0VMRU1FTlRTX1NXSVBFUiIsIk9ORV9FTEVNRU5UX1NXSVBFUiIsIk1BTllfRUxFTUVOVFNfT1BUSU9OUyIsIlpvb21Qb3B1cCIsImhpZGVIYW5kbGVyIiwiaGlkZSIsImNyZWF0ZSIsImNyZWF0ZVNsaWRlciIsImltYWdlcyIsInNsaWRlclBhZ2luYXRpb24iLCJpbWFnZSIsImFsdCIsImNyZWF0ZVNsaWRlIiwic3dpcGVyV3JhcHBlciIsInNsaWRlVG9Mb29wIiwiY2xhc3NOYW1lIiwiaW1hZ2VDb250YWluZXIiLCJmaWdjYXB0aW9uIiwic2hvdyIsImlzQ2xvc2VCdXR0b24iLCJpc0Nsb3NlQ29udGFpbmVyIiwiZGVzdHJveSIsIlpvb21PbkNsaWNrIiwiaXRlbSJdLCJzb3VyY2VSb290IjoiIn0=